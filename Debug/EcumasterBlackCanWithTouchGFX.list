
EcumasterBlackCanWithTouchGFX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00027670  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004390  08027840  08027840  00037840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000041fa  0802bbd0  0802bbd0  0003bbd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 000334f8  0802fdcc  0802fdcc  0003fdcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000240  080632c4  080632c4  000732c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08063504  08063504  00080108  2**0
                  CONTENTS
  7 .ARM          00000008  08063504  08063504  00073504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  0806350c  0806350c  00080108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  0806350c  0806350c  0007350c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  08063520  08063520  00073520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000108  20000000  08063528  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000c984  20000108  08063630  00080108  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  2000ca8c  08063630  0008ca8c  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00080108  2**0
                  CONTENTS, READONLY
 15 .comment      000000c2  00000000  00000000  00080138  2**0
                  CONTENTS, READONLY
 16 .debug_info   00059929  00000000  00000000  000801fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000105c4  00000000  00000000  000d9b23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00004150  00000000  00000000  000ea0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00003027  00000000  00000000  000ee238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0003a4a5  00000000  00000000  000f125f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   000517c0  00000000  00000000  0012b704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00131678  00000000  00000000  0017cec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  00011978  00000000  00000000  002ae53c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000003f  00000000  00000000  002bfeb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000108 	.word	0x20000108
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08027828 	.word	0x08027828

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000010c 	.word	0x2000010c
 800020c:	08027828 	.word	0x08027828

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	; 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__gedf2>:
 800087c:	f04f 3cff 	mov.w	ip, #4294967295
 8000880:	e006      	b.n	8000890 <__cmpdf2+0x4>
 8000882:	bf00      	nop

08000884 <__ledf2>:
 8000884:	f04f 0c01 	mov.w	ip, #1
 8000888:	e002      	b.n	8000890 <__cmpdf2+0x4>
 800088a:	bf00      	nop

0800088c <__cmpdf2>:
 800088c:	f04f 0c01 	mov.w	ip, #1
 8000890:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000894:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000898:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800089c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008a0:	bf18      	it	ne
 80008a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80008a6:	d01b      	beq.n	80008e0 <__cmpdf2+0x54>
 80008a8:	b001      	add	sp, #4
 80008aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80008ae:	bf0c      	ite	eq
 80008b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008b4:	ea91 0f03 	teqne	r1, r3
 80008b8:	bf02      	ittt	eq
 80008ba:	ea90 0f02 	teqeq	r0, r2
 80008be:	2000      	moveq	r0, #0
 80008c0:	4770      	bxeq	lr
 80008c2:	f110 0f00 	cmn.w	r0, #0
 80008c6:	ea91 0f03 	teq	r1, r3
 80008ca:	bf58      	it	pl
 80008cc:	4299      	cmppl	r1, r3
 80008ce:	bf08      	it	eq
 80008d0:	4290      	cmpeq	r0, r2
 80008d2:	bf2c      	ite	cs
 80008d4:	17d8      	asrcs	r0, r3, #31
 80008d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008da:	f040 0001 	orr.w	r0, r0, #1
 80008de:	4770      	bx	lr
 80008e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008e8:	d102      	bne.n	80008f0 <__cmpdf2+0x64>
 80008ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ee:	d107      	bne.n	8000900 <__cmpdf2+0x74>
 80008f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008f8:	d1d6      	bne.n	80008a8 <__cmpdf2+0x1c>
 80008fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008fe:	d0d3      	beq.n	80008a8 <__cmpdf2+0x1c>
 8000900:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop

08000908 <__aeabi_cdrcmple>:
 8000908:	4684      	mov	ip, r0
 800090a:	4610      	mov	r0, r2
 800090c:	4662      	mov	r2, ip
 800090e:	468c      	mov	ip, r1
 8000910:	4619      	mov	r1, r3
 8000912:	4663      	mov	r3, ip
 8000914:	e000      	b.n	8000918 <__aeabi_cdcmpeq>
 8000916:	bf00      	nop

08000918 <__aeabi_cdcmpeq>:
 8000918:	b501      	push	{r0, lr}
 800091a:	f7ff ffb7 	bl	800088c <__cmpdf2>
 800091e:	2800      	cmp	r0, #0
 8000920:	bf48      	it	mi
 8000922:	f110 0f00 	cmnmi.w	r0, #0
 8000926:	bd01      	pop	{r0, pc}

08000928 <__aeabi_dcmpeq>:
 8000928:	f84d ed08 	str.w	lr, [sp, #-8]!
 800092c:	f7ff fff4 	bl	8000918 <__aeabi_cdcmpeq>
 8000930:	bf0c      	ite	eq
 8000932:	2001      	moveq	r0, #1
 8000934:	2000      	movne	r0, #0
 8000936:	f85d fb08 	ldr.w	pc, [sp], #8
 800093a:	bf00      	nop

0800093c <__aeabi_dcmplt>:
 800093c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000940:	f7ff ffea 	bl	8000918 <__aeabi_cdcmpeq>
 8000944:	bf34      	ite	cc
 8000946:	2001      	movcc	r0, #1
 8000948:	2000      	movcs	r0, #0
 800094a:	f85d fb08 	ldr.w	pc, [sp], #8
 800094e:	bf00      	nop

08000950 <__aeabi_dcmple>:
 8000950:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000954:	f7ff ffe0 	bl	8000918 <__aeabi_cdcmpeq>
 8000958:	bf94      	ite	ls
 800095a:	2001      	movls	r0, #1
 800095c:	2000      	movhi	r0, #0
 800095e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000962:	bf00      	nop

08000964 <__aeabi_dcmpge>:
 8000964:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000968:	f7ff ffce 	bl	8000908 <__aeabi_cdrcmple>
 800096c:	bf94      	ite	ls
 800096e:	2001      	movls	r0, #1
 8000970:	2000      	movhi	r0, #0
 8000972:	f85d fb08 	ldr.w	pc, [sp], #8
 8000976:	bf00      	nop

08000978 <__aeabi_dcmpgt>:
 8000978:	f84d ed08 	str.w	lr, [sp, #-8]!
 800097c:	f7ff ffc4 	bl	8000908 <__aeabi_cdrcmple>
 8000980:	bf34      	ite	cc
 8000982:	2001      	movcc	r0, #1
 8000984:	2000      	movcs	r0, #0
 8000986:	f85d fb08 	ldr.w	pc, [sp], #8
 800098a:	bf00      	nop

0800098c <__aeabi_d2iz>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000994:	d215      	bcs.n	80009c2 <__aeabi_d2iz+0x36>
 8000996:	d511      	bpl.n	80009bc <__aeabi_d2iz+0x30>
 8000998:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800099c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a0:	d912      	bls.n	80009c8 <__aeabi_d2iz+0x3c>
 80009a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009b2:	fa23 f002 	lsr.w	r0, r3, r2
 80009b6:	bf18      	it	ne
 80009b8:	4240      	negne	r0, r0
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009c6:	d105      	bne.n	80009d4 <__aeabi_d2iz+0x48>
 80009c8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009cc:	bf08      	it	eq
 80009ce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_d2f>:
 80009dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009e4:	bf24      	itt	cs
 80009e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ee:	d90d      	bls.n	8000a0c <__aeabi_d2f+0x30>
 80009f0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009fc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a04:	bf08      	it	eq
 8000a06:	f020 0001 	biceq.w	r0, r0, #1
 8000a0a:	4770      	bx	lr
 8000a0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a10:	d121      	bne.n	8000a56 <__aeabi_d2f+0x7a>
 8000a12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a16:	bfbc      	itt	lt
 8000a18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a1c:	4770      	bxlt	lr
 8000a1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a26:	f1c2 0218 	rsb	r2, r2, #24
 8000a2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a32:	fa20 f002 	lsr.w	r0, r0, r2
 8000a36:	bf18      	it	ne
 8000a38:	f040 0001 	orrne.w	r0, r0, #1
 8000a3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a48:	ea40 000c 	orr.w	r0, r0, ip
 8000a4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a54:	e7cc      	b.n	80009f0 <__aeabi_d2f+0x14>
 8000a56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a5a:	d107      	bne.n	8000a6c <__aeabi_d2f+0x90>
 8000a5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a60:	bf1e      	ittt	ne
 8000a62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a6a:	4770      	bxne	lr
 8000a6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b970 	b.w	8000d74 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9e08      	ldr	r6, [sp, #32]
 8000ab2:	460d      	mov	r5, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	460f      	mov	r7, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14a      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4694      	mov	ip, r2
 8000ac0:	d965      	bls.n	8000b8e <__udivmoddi4+0xe2>
 8000ac2:	fab2 f382 	clz	r3, r2
 8000ac6:	b143      	cbz	r3, 8000ada <__udivmoddi4+0x2e>
 8000ac8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000acc:	f1c3 0220 	rsb	r2, r3, #32
 8000ad0:	409f      	lsls	r7, r3
 8000ad2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ad6:	4317      	orrs	r7, r2
 8000ad8:	409c      	lsls	r4, r3
 8000ada:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ade:	fa1f f58c 	uxth.w	r5, ip
 8000ae2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ae6:	0c22      	lsrs	r2, r4, #16
 8000ae8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000aec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000af0:	fb01 f005 	mul.w	r0, r1, r5
 8000af4:	4290      	cmp	r0, r2
 8000af6:	d90a      	bls.n	8000b0e <__udivmoddi4+0x62>
 8000af8:	eb1c 0202 	adds.w	r2, ip, r2
 8000afc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b00:	f080 811c 	bcs.w	8000d3c <__udivmoddi4+0x290>
 8000b04:	4290      	cmp	r0, r2
 8000b06:	f240 8119 	bls.w	8000d3c <__udivmoddi4+0x290>
 8000b0a:	3902      	subs	r1, #2
 8000b0c:	4462      	add	r2, ip
 8000b0e:	1a12      	subs	r2, r2, r0
 8000b10:	b2a4      	uxth	r4, r4
 8000b12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b1a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b1e:	fb00 f505 	mul.w	r5, r0, r5
 8000b22:	42a5      	cmp	r5, r4
 8000b24:	d90a      	bls.n	8000b3c <__udivmoddi4+0x90>
 8000b26:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b2e:	f080 8107 	bcs.w	8000d40 <__udivmoddi4+0x294>
 8000b32:	42a5      	cmp	r5, r4
 8000b34:	f240 8104 	bls.w	8000d40 <__udivmoddi4+0x294>
 8000b38:	4464      	add	r4, ip
 8000b3a:	3802      	subs	r0, #2
 8000b3c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b40:	1b64      	subs	r4, r4, r5
 8000b42:	2100      	movs	r1, #0
 8000b44:	b11e      	cbz	r6, 8000b4e <__udivmoddi4+0xa2>
 8000b46:	40dc      	lsrs	r4, r3
 8000b48:	2300      	movs	r3, #0
 8000b4a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0xbc>
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	f000 80ed 	beq.w	8000d36 <__udivmoddi4+0x28a>
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b62:	4608      	mov	r0, r1
 8000b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b68:	fab3 f183 	clz	r1, r3
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	d149      	bne.n	8000c04 <__udivmoddi4+0x158>
 8000b70:	42ab      	cmp	r3, r5
 8000b72:	d302      	bcc.n	8000b7a <__udivmoddi4+0xce>
 8000b74:	4282      	cmp	r2, r0
 8000b76:	f200 80f8 	bhi.w	8000d6a <__udivmoddi4+0x2be>
 8000b7a:	1a84      	subs	r4, r0, r2
 8000b7c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b80:	2001      	movs	r0, #1
 8000b82:	4617      	mov	r7, r2
 8000b84:	2e00      	cmp	r6, #0
 8000b86:	d0e2      	beq.n	8000b4e <__udivmoddi4+0xa2>
 8000b88:	e9c6 4700 	strd	r4, r7, [r6]
 8000b8c:	e7df      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b8e:	b902      	cbnz	r2, 8000b92 <__udivmoddi4+0xe6>
 8000b90:	deff      	udf	#255	; 0xff
 8000b92:	fab2 f382 	clz	r3, r2
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f040 8090 	bne.w	8000cbc <__udivmoddi4+0x210>
 8000b9c:	1a8a      	subs	r2, r1, r2
 8000b9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba2:	fa1f fe8c 	uxth.w	lr, ip
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bac:	fb07 2015 	mls	r0, r7, r5, r2
 8000bb0:	0c22      	lsrs	r2, r4, #16
 8000bb2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bb6:	fb0e f005 	mul.w	r0, lr, r5
 8000bba:	4290      	cmp	r0, r2
 8000bbc:	d908      	bls.n	8000bd0 <__udivmoddi4+0x124>
 8000bbe:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x122>
 8000bc8:	4290      	cmp	r0, r2
 8000bca:	f200 80cb 	bhi.w	8000d64 <__udivmoddi4+0x2b8>
 8000bce:	4645      	mov	r5, r8
 8000bd0:	1a12      	subs	r2, r2, r0
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bd8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bdc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000be0:	fb0e fe00 	mul.w	lr, lr, r0
 8000be4:	45a6      	cmp	lr, r4
 8000be6:	d908      	bls.n	8000bfa <__udivmoddi4+0x14e>
 8000be8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bec:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bf0:	d202      	bcs.n	8000bf8 <__udivmoddi4+0x14c>
 8000bf2:	45a6      	cmp	lr, r4
 8000bf4:	f200 80bb 	bhi.w	8000d6e <__udivmoddi4+0x2c2>
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	eba4 040e 	sub.w	r4, r4, lr
 8000bfe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c02:	e79f      	b.n	8000b44 <__udivmoddi4+0x98>
 8000c04:	f1c1 0720 	rsb	r7, r1, #32
 8000c08:	408b      	lsls	r3, r1
 8000c0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c12:	fa05 f401 	lsl.w	r4, r5, r1
 8000c16:	fa20 f307 	lsr.w	r3, r0, r7
 8000c1a:	40fd      	lsrs	r5, r7
 8000c1c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c20:	4323      	orrs	r3, r4
 8000c22:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c26:	fa1f fe8c 	uxth.w	lr, ip
 8000c2a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c2e:	0c1c      	lsrs	r4, r3, #16
 8000c30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c34:	fb08 f50e 	mul.w	r5, r8, lr
 8000c38:	42a5      	cmp	r5, r4
 8000c3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c3e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c42:	d90b      	bls.n	8000c5c <__udivmoddi4+0x1b0>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c4c:	f080 8088 	bcs.w	8000d60 <__udivmoddi4+0x2b4>
 8000c50:	42a5      	cmp	r5, r4
 8000c52:	f240 8085 	bls.w	8000d60 <__udivmoddi4+0x2b4>
 8000c56:	f1a8 0802 	sub.w	r8, r8, #2
 8000c5a:	4464      	add	r4, ip
 8000c5c:	1b64      	subs	r4, r4, r5
 8000c5e:	b29d      	uxth	r5, r3
 8000c60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c64:	fb09 4413 	mls	r4, r9, r3, r4
 8000c68:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c6c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c70:	45a6      	cmp	lr, r4
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x1da>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c7c:	d26c      	bcs.n	8000d58 <__udivmoddi4+0x2ac>
 8000c7e:	45a6      	cmp	lr, r4
 8000c80:	d96a      	bls.n	8000d58 <__udivmoddi4+0x2ac>
 8000c82:	3b02      	subs	r3, #2
 8000c84:	4464      	add	r4, ip
 8000c86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c8a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c8e:	eba4 040e 	sub.w	r4, r4, lr
 8000c92:	42ac      	cmp	r4, r5
 8000c94:	46c8      	mov	r8, r9
 8000c96:	46ae      	mov	lr, r5
 8000c98:	d356      	bcc.n	8000d48 <__udivmoddi4+0x29c>
 8000c9a:	d053      	beq.n	8000d44 <__udivmoddi4+0x298>
 8000c9c:	b156      	cbz	r6, 8000cb4 <__udivmoddi4+0x208>
 8000c9e:	ebb0 0208 	subs.w	r2, r0, r8
 8000ca2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ca6:	fa04 f707 	lsl.w	r7, r4, r7
 8000caa:	40ca      	lsrs	r2, r1
 8000cac:	40cc      	lsrs	r4, r1
 8000cae:	4317      	orrs	r7, r2
 8000cb0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbc:	f1c3 0120 	rsb	r1, r3, #32
 8000cc0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cc8:	fa25 f101 	lsr.w	r1, r5, r1
 8000ccc:	409d      	lsls	r5, r3
 8000cce:	432a      	orrs	r2, r5
 8000cd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd4:	fa1f fe8c 	uxth.w	lr, ip
 8000cd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cdc:	fb07 1510 	mls	r5, r7, r0, r1
 8000ce0:	0c11      	lsrs	r1, r2, #16
 8000ce2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ce6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cea:	428d      	cmp	r5, r1
 8000cec:	fa04 f403 	lsl.w	r4, r4, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x258>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cfa:	d22f      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000cfc:	428d      	cmp	r5, r1
 8000cfe:	d92d      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d00:	3802      	subs	r0, #2
 8000d02:	4461      	add	r1, ip
 8000d04:	1b49      	subs	r1, r1, r5
 8000d06:	b292      	uxth	r2, r2
 8000d08:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d0c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d14:	fb05 f10e 	mul.w	r1, r5, lr
 8000d18:	4291      	cmp	r1, r2
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x282>
 8000d1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d20:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d24:	d216      	bcs.n	8000d54 <__udivmoddi4+0x2a8>
 8000d26:	4291      	cmp	r1, r2
 8000d28:	d914      	bls.n	8000d54 <__udivmoddi4+0x2a8>
 8000d2a:	3d02      	subs	r5, #2
 8000d2c:	4462      	add	r2, ip
 8000d2e:	1a52      	subs	r2, r2, r1
 8000d30:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d34:	e738      	b.n	8000ba8 <__udivmoddi4+0xfc>
 8000d36:	4631      	mov	r1, r6
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e708      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000d3c:	4639      	mov	r1, r7
 8000d3e:	e6e6      	b.n	8000b0e <__udivmoddi4+0x62>
 8000d40:	4610      	mov	r0, r2
 8000d42:	e6fb      	b.n	8000b3c <__udivmoddi4+0x90>
 8000d44:	4548      	cmp	r0, r9
 8000d46:	d2a9      	bcs.n	8000c9c <__udivmoddi4+0x1f0>
 8000d48:	ebb9 0802 	subs.w	r8, r9, r2
 8000d4c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d50:	3b01      	subs	r3, #1
 8000d52:	e7a3      	b.n	8000c9c <__udivmoddi4+0x1f0>
 8000d54:	4645      	mov	r5, r8
 8000d56:	e7ea      	b.n	8000d2e <__udivmoddi4+0x282>
 8000d58:	462b      	mov	r3, r5
 8000d5a:	e794      	b.n	8000c86 <__udivmoddi4+0x1da>
 8000d5c:	4640      	mov	r0, r8
 8000d5e:	e7d1      	b.n	8000d04 <__udivmoddi4+0x258>
 8000d60:	46d0      	mov	r8, sl
 8000d62:	e77b      	b.n	8000c5c <__udivmoddi4+0x1b0>
 8000d64:	3d02      	subs	r5, #2
 8000d66:	4462      	add	r2, ip
 8000d68:	e732      	b.n	8000bd0 <__udivmoddi4+0x124>
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e70a      	b.n	8000b84 <__udivmoddi4+0xd8>
 8000d6e:	4464      	add	r4, ip
 8000d70:	3802      	subs	r0, #2
 8000d72:	e742      	b.n	8000bfa <__udivmoddi4+0x14e>

08000d74 <__aeabi_idiv0>:
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000d86:	b480      	push	{r7}
 8000d88:	b083      	sub	sp, #12
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
 8000d8e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
	...

08000dac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4a07      	ldr	r2, [pc, #28]	; (8000dd8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000dbc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	4a06      	ldr	r2, [pc, #24]	; (8000ddc <vApplicationGetIdleTaskMemory+0x30>)
 8000dc2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2280      	movs	r2, #128	; 0x80
 8000dc8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000124 	.word	0x20000124
 8000ddc:	2000017c 	.word	0x2000017c

08000de0 <SecondTask>:

extern xQueueHandle messageQ;
extern xQueueHandle settingsMessageQ;

void SecondTask(void const* argument)
{
 8000de0:	b5b0      	push	{r4, r5, r7, lr}
 8000de2:	b09e      	sub	sp, #120	; 0x78
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]

	settings_message settings_val = {7350, 1, 2, 3, 4, 5, 6, 7, 8, 0};
 8000de8:	4b89      	ldr	r3, [pc, #548]	; (8001010 <SecondTask+0x230>)
 8000dea:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000dee:	461d      	mov	r5, r3
 8000df0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000df2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000df4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000df6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000df8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000dfc:	e884 0003 	stmia.w	r4, {r0, r1}
	xQueueSend(settingsMessageQ, &settings_val,0);
 8000e00:	4b84      	ldr	r3, [pc, #528]	; (8001014 <SecondTask+0x234>)
 8000e02:	6818      	ldr	r0, [r3, #0]
 8000e04:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000e08:	2300      	movs	r3, #0
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f00c f898 	bl	800cf40 <xQueueGenericSend>
	osDelay(150);
 8000e10:	2096      	movs	r0, #150	; 0x96
 8000e12:	f00b fda3 	bl	800c95c <osDelay>

	static const int demo_mode = 0;
	for(;;)
	{
		if(demo_mode)
 8000e16:	4b80      	ldr	r3, [pc, #512]	; (8001018 <SecondTask+0x238>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f000 8135 	beq.w	800108a <SecondTask+0x2aa>
		{
			rpm = (rpm >= 8000) ? 0: rpm + 100;
 8000e20:	4b7e      	ldr	r3, [pc, #504]	; (800101c <SecondTask+0x23c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000e28:	da03      	bge.n	8000e32 <SecondTask+0x52>
 8000e2a:	4b7c      	ldr	r3, [pc, #496]	; (800101c <SecondTask+0x23c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	3364      	adds	r3, #100	; 0x64
 8000e30:	e000      	b.n	8000e34 <SecondTask+0x54>
 8000e32:	2300      	movs	r3, #0
 8000e34:	4a79      	ldr	r2, [pc, #484]	; (800101c <SecondTask+0x23c>)
 8000e36:	6013      	str	r3, [r2, #0]
			clt = (clt >= 250) ? -40: clt + 3;
 8000e38:	4b79      	ldr	r3, [pc, #484]	; (8001020 <SecondTask+0x240>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2bf9      	cmp	r3, #249	; 0xf9
 8000e3e:	dc03      	bgt.n	8000e48 <SecondTask+0x68>
 8000e40:	4b77      	ldr	r3, [pc, #476]	; (8001020 <SecondTask+0x240>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	3303      	adds	r3, #3
 8000e46:	e001      	b.n	8000e4c <SecondTask+0x6c>
 8000e48:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8000e4c:	4a74      	ldr	r2, [pc, #464]	; (8001020 <SecondTask+0x240>)
 8000e4e:	6013      	str	r3, [r2, #0]
			map = (map >= 450) ? 1: map + 6;
 8000e50:	4b74      	ldr	r3, [pc, #464]	; (8001024 <SecondTask+0x244>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000e58:	da03      	bge.n	8000e62 <SecondTask+0x82>
 8000e5a:	4b72      	ldr	r3, [pc, #456]	; (8001024 <SecondTask+0x244>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	3306      	adds	r3, #6
 8000e60:	e000      	b.n	8000e64 <SecondTask+0x84>
 8000e62:	2301      	movs	r3, #1
 8000e64:	4a6f      	ldr	r2, [pc, #444]	; (8001024 <SecondTask+0x244>)
 8000e66:	6013      	str	r3, [r2, #0]
			lambda = (lambda >= 1.4) ? 0.6: lambda + 0.05;
 8000e68:	4b6f      	ldr	r3, [pc, #444]	; (8001028 <SecondTask+0x248>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fcad 	bl	80007cc <__aeabi_f2d>
 8000e72:	a35f      	add	r3, pc, #380	; (adr r3, 8000ff0 <SecondTask+0x210>)
 8000e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e78:	f7ff fd74 	bl	8000964 <__aeabi_dcmpge>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <SecondTask+0xa6>
 8000e82:	4b6a      	ldr	r3, [pc, #424]	; (800102c <SecondTask+0x24c>)
 8000e84:	e010      	b.n	8000ea8 <SecondTask+0xc8>
 8000e86:	4b68      	ldr	r3, [pc, #416]	; (8001028 <SecondTask+0x248>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fc9e 	bl	80007cc <__aeabi_f2d>
 8000e90:	a359      	add	r3, pc, #356	; (adr r3, 8000ff8 <SecondTask+0x218>)
 8000e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e96:	f7ff fb3b 	bl	8000510 <__adddf3>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	4610      	mov	r0, r2
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f7ff fd9b 	bl	80009dc <__aeabi_d2f>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	4a5f      	ldr	r2, [pc, #380]	; (8001028 <SecondTask+0x248>)
 8000eaa:	6013      	str	r3, [r2, #0]
			lambda_targ = (lambda_targ >= 1.4) ? 0.65: lambda_targ + 0.06;
 8000eac:	4b60      	ldr	r3, [pc, #384]	; (8001030 <SecondTask+0x250>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff fc8b 	bl	80007cc <__aeabi_f2d>
 8000eb6:	a34e      	add	r3, pc, #312	; (adr r3, 8000ff0 <SecondTask+0x210>)
 8000eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ebc:	f7ff fd52 	bl	8000964 <__aeabi_dcmpge>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <SecondTask+0xea>
 8000ec6:	4b5b      	ldr	r3, [pc, #364]	; (8001034 <SecondTask+0x254>)
 8000ec8:	e010      	b.n	8000eec <SecondTask+0x10c>
 8000eca:	4b59      	ldr	r3, [pc, #356]	; (8001030 <SecondTask+0x250>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fc7c 	bl	80007cc <__aeabi_f2d>
 8000ed4:	a34a      	add	r3, pc, #296	; (adr r3, 8001000 <SecondTask+0x220>)
 8000ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eda:	f7ff fb19 	bl	8000510 <__adddf3>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	4610      	mov	r0, r2
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f7ff fd79 	bl	80009dc <__aeabi_d2f>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4a50      	ldr	r2, [pc, #320]	; (8001030 <SecondTask+0x250>)
 8000eee:	6013      	str	r3, [r2, #0]
			oil_tmp = (oil_tmp >= 160) ? 1: oil_tmp + 2;
 8000ef0:	4b51      	ldr	r3, [pc, #324]	; (8001038 <SecondTask+0x258>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b9f      	cmp	r3, #159	; 0x9f
 8000ef6:	dc03      	bgt.n	8000f00 <SecondTask+0x120>
 8000ef8:	4b4f      	ldr	r3, [pc, #316]	; (8001038 <SecondTask+0x258>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	3302      	adds	r3, #2
 8000efe:	e000      	b.n	8000f02 <SecondTask+0x122>
 8000f00:	2301      	movs	r3, #1
 8000f02:	4a4d      	ldr	r2, [pc, #308]	; (8001038 <SecondTask+0x258>)
 8000f04:	6013      	str	r3, [r2, #0]
			oil_press = (oil_press >= 12.0) ? 0.1: oil_press + 0.1;
 8000f06:	4b4d      	ldr	r3, [pc, #308]	; (800103c <SecondTask+0x25c>)
 8000f08:	edd3 7a00 	vldr	s15, [r3]
 8000f0c:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8000f10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f18:	db01      	blt.n	8000f1e <SecondTask+0x13e>
 8000f1a:	4b49      	ldr	r3, [pc, #292]	; (8001040 <SecondTask+0x260>)
 8000f1c:	e010      	b.n	8000f40 <SecondTask+0x160>
 8000f1e:	4b47      	ldr	r3, [pc, #284]	; (800103c <SecondTask+0x25c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fc52 	bl	80007cc <__aeabi_f2d>
 8000f28:	a337      	add	r3, pc, #220	; (adr r3, 8001008 <SecondTask+0x228>)
 8000f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2e:	f7ff faef 	bl	8000510 <__adddf3>
 8000f32:	4602      	mov	r2, r0
 8000f34:	460b      	mov	r3, r1
 8000f36:	4610      	mov	r0, r2
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f7ff fd4f 	bl	80009dc <__aeabi_d2f>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	4a3e      	ldr	r2, [pc, #248]	; (800103c <SecondTask+0x25c>)
 8000f42:	6013      	str	r3, [r2, #0]
			fuel_press = (fuel_press >= 100) ? 1: iat + 2;
 8000f44:	4b3f      	ldr	r3, [pc, #252]	; (8001044 <SecondTask+0x264>)
 8000f46:	edd3 7a00 	vldr	s15, [r3]
 8000f4a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001048 <SecondTask+0x268>
 8000f4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f56:	db02      	blt.n	8000f5e <SecondTask+0x17e>
 8000f58:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000f5c:	e006      	b.n	8000f6c <SecondTask+0x18c>
 8000f5e:	4b3b      	ldr	r3, [pc, #236]	; (800104c <SecondTask+0x26c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	3302      	adds	r3, #2
 8000f64:	ee07 3a90 	vmov	s15, r3
 8000f68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f6c:	4b35      	ldr	r3, [pc, #212]	; (8001044 <SecondTask+0x264>)
 8000f6e:	edc3 7a00 	vstr	s15, [r3]
			iat = (iat >= 100) ? 1: iat + 2;
 8000f72:	4b36      	ldr	r3, [pc, #216]	; (800104c <SecondTask+0x26c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2b63      	cmp	r3, #99	; 0x63
 8000f78:	dc03      	bgt.n	8000f82 <SecondTask+0x1a2>
 8000f7a:	4b34      	ldr	r3, [pc, #208]	; (800104c <SecondTask+0x26c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	3302      	adds	r3, #2
 8000f80:	e000      	b.n	8000f84 <SecondTask+0x1a4>
 8000f82:	2301      	movs	r3, #1
 8000f84:	4a31      	ldr	r2, [pc, #196]	; (800104c <SecondTask+0x26c>)
 8000f86:	6013      	str	r3, [r2, #0]
			egt = (egt >= 760) ? 500: egt +12;
 8000f88:	4b31      	ldr	r3, [pc, #196]	; (8001050 <SecondTask+0x270>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f5b3 7f3e 	cmp.w	r3, #760	; 0x2f8
 8000f90:	da03      	bge.n	8000f9a <SecondTask+0x1ba>
 8000f92:	4b2f      	ldr	r3, [pc, #188]	; (8001050 <SecondTask+0x270>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	330c      	adds	r3, #12
 8000f98:	e001      	b.n	8000f9e <SecondTask+0x1be>
 8000f9a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f9e:	4a2c      	ldr	r2, [pc, #176]	; (8001050 <SecondTask+0x270>)
 8000fa0:	6013      	str	r3, [r2, #0]
			egt_2 = (egt >= 760) ? 500: egt_2 +12;
 8000fa2:	4b2b      	ldr	r3, [pc, #172]	; (8001050 <SecondTask+0x270>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f5b3 7f3e 	cmp.w	r3, #760	; 0x2f8
 8000faa:	da03      	bge.n	8000fb4 <SecondTask+0x1d4>
 8000fac:	4b29      	ldr	r3, [pc, #164]	; (8001054 <SecondTask+0x274>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	330c      	adds	r3, #12
 8000fb2:	e001      	b.n	8000fb8 <SecondTask+0x1d8>
 8000fb4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fb8:	4a26      	ldr	r2, [pc, #152]	; (8001054 <SecondTask+0x274>)
 8000fba:	6013      	str	r3, [r2, #0]
			tps = (tps >= 100) ? 0: tps + 4;
 8000fbc:	4b26      	ldr	r3, [pc, #152]	; (8001058 <SecondTask+0x278>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b63      	cmp	r3, #99	; 0x63
 8000fc2:	dc03      	bgt.n	8000fcc <SecondTask+0x1ec>
 8000fc4:	4b24      	ldr	r3, [pc, #144]	; (8001058 <SecondTask+0x278>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	3304      	adds	r3, #4
 8000fca:	e000      	b.n	8000fce <SecondTask+0x1ee>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4a22      	ldr	r2, [pc, #136]	; (8001058 <SecondTask+0x278>)
 8000fd0:	6013      	str	r3, [r2, #0]
			batt_v = (batt_v >= 20.0) ? 10.0: batt_v + 0.6;
 8000fd2:	4b22      	ldr	r3, [pc, #136]	; (800105c <SecondTask+0x27c>)
 8000fd4:	edd3 7a00 	vldr	s15, [r3]
 8000fd8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000fdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe4:	db3e      	blt.n	8001064 <SecondTask+0x284>
 8000fe6:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <SecondTask+0x280>)
 8000fe8:	e04d      	b.n	8001086 <SecondTask+0x2a6>
 8000fea:	bf00      	nop
 8000fec:	f3af 8000 	nop.w
 8000ff0:	66666666 	.word	0x66666666
 8000ff4:	3ff66666 	.word	0x3ff66666
 8000ff8:	9999999a 	.word	0x9999999a
 8000ffc:	3fa99999 	.word	0x3fa99999
 8001000:	eb851eb8 	.word	0xeb851eb8
 8001004:	3faeb851 	.word	0x3faeb851
 8001008:	9999999a 	.word	0x9999999a
 800100c:	3fb99999 	.word	0x3fb99999
 8001010:	08027840 	.word	0x08027840
 8001014:	20008ee0 	.word	0x20008ee0
 8001018:	080282d0 	.word	0x080282d0
 800101c:	20000ae0 	.word	0x20000ae0
 8001020:	20000ae8 	.word	0x20000ae8
 8001024:	20000004 	.word	0x20000004
 8001028:	20000af0 	.word	0x20000af0
 800102c:	3f19999a 	.word	0x3f19999a
 8001030:	20000008 	.word	0x20000008
 8001034:	3f266666 	.word	0x3f266666
 8001038:	20000afc 	.word	0x20000afc
 800103c:	20000b04 	.word	0x20000b04
 8001040:	3dcccccd 	.word	0x3dcccccd
 8001044:	20000b0c 	.word	0x20000b0c
 8001048:	42c80000 	.word	0x42c80000
 800104c:	20000b10 	.word	0x20000b10
 8001050:	20000b14 	.word	0x20000b14
 8001054:	20000b18 	.word	0x20000b18
 8001058:	20000b1c 	.word	0x20000b1c
 800105c:	20000b20 	.word	0x20000b20
 8001060:	41200000 	.word	0x41200000
 8001064:	4b30      	ldr	r3, [pc, #192]	; (8001128 <SecondTask+0x348>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fbaf 	bl	80007cc <__aeabi_f2d>
 800106e:	a32c      	add	r3, pc, #176	; (adr r3, 8001120 <SecondTask+0x340>)
 8001070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001074:	f7ff fa4c 	bl	8000510 <__adddf3>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4610      	mov	r0, r2
 800107e:	4619      	mov	r1, r3
 8001080:	f7ff fcac 	bl	80009dc <__aeabi_d2f>
 8001084:	4603      	mov	r3, r0
 8001086:	4a28      	ldr	r2, [pc, #160]	; (8001128 <SecondTask+0x348>)
 8001088:	6013      	str	r3, [r2, #0]
		}

		display_values dispVals = {rpm, max_rpm, clt, max_clt, speed, max_speed, lambda, oil_tmp, max_oil_tmp, oil_press, min_oil_press, fuel_tmp, fuel_press, min_fuel_press, iat, tps, batt_v, bat_indicator, oil_indicator, mil_indicator};
 800108a:	4b28      	ldr	r3, [pc, #160]	; (800112c <SecondTask+0x34c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	4b27      	ldr	r3, [pc, #156]	; (8001130 <SecondTask+0x350>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	4b27      	ldr	r3, [pc, #156]	; (8001134 <SecondTask+0x354>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	4b26      	ldr	r3, [pc, #152]	; (8001138 <SecondTask+0x358>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	617b      	str	r3, [r7, #20]
 80010a2:	4b26      	ldr	r3, [pc, #152]	; (800113c <SecondTask+0x35c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	61bb      	str	r3, [r7, #24]
 80010a8:	4b25      	ldr	r3, [pc, #148]	; (8001140 <SecondTask+0x360>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	61fb      	str	r3, [r7, #28]
 80010ae:	4b25      	ldr	r3, [pc, #148]	; (8001144 <SecondTask+0x364>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	623b      	str	r3, [r7, #32]
 80010b4:	4b24      	ldr	r3, [pc, #144]	; (8001148 <SecondTask+0x368>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
 80010ba:	4b24      	ldr	r3, [pc, #144]	; (800114c <SecondTask+0x36c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	62bb      	str	r3, [r7, #40]	; 0x28
 80010c0:	4b23      	ldr	r3, [pc, #140]	; (8001150 <SecondTask+0x370>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010c6:	4b23      	ldr	r3, [pc, #140]	; (8001154 <SecondTask+0x374>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	633b      	str	r3, [r7, #48]	; 0x30
 80010cc:	4b22      	ldr	r3, [pc, #136]	; (8001158 <SecondTask+0x378>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	637b      	str	r3, [r7, #52]	; 0x34
 80010d2:	4b22      	ldr	r3, [pc, #136]	; (800115c <SecondTask+0x37c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80010d8:	4b21      	ldr	r3, [pc, #132]	; (8001160 <SecondTask+0x380>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010de:	4b21      	ldr	r3, [pc, #132]	; (8001164 <SecondTask+0x384>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	643b      	str	r3, [r7, #64]	; 0x40
 80010e4:	4b20      	ldr	r3, [pc, #128]	; (8001168 <SecondTask+0x388>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	647b      	str	r3, [r7, #68]	; 0x44
 80010ea:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <SecondTask+0x348>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80010f0:	4b1e      	ldr	r3, [pc, #120]	; (800116c <SecondTask+0x38c>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 80010f8:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <SecondTask+0x390>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8001100:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <SecondTask+0x394>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	    xQueueSend(messageQ, &dispVals,0);
 8001108:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <SecondTask+0x398>)
 800110a:	6818      	ldr	r0, [r3, #0]
 800110c:	f107 0108 	add.w	r1, r7, #8
 8001110:	2300      	movs	r3, #0
 8001112:	2200      	movs	r2, #0
 8001114:	f00b ff14 	bl	800cf40 <xQueueGenericSend>
		osDelay(50);
 8001118:	2032      	movs	r0, #50	; 0x32
 800111a:	f00b fc1f 	bl	800c95c <osDelay>
	{
 800111e:	e67a      	b.n	8000e16 <SecondTask+0x36>
 8001120:	33333333 	.word	0x33333333
 8001124:	3fe33333 	.word	0x3fe33333
 8001128:	20000b20 	.word	0x20000b20
 800112c:	20000ae0 	.word	0x20000ae0
 8001130:	20000ae4 	.word	0x20000ae4
 8001134:	20000ae8 	.word	0x20000ae8
 8001138:	20000aec 	.word	0x20000aec
 800113c:	20000af4 	.word	0x20000af4
 8001140:	20000af8 	.word	0x20000af8
 8001144:	20000af0 	.word	0x20000af0
 8001148:	20000afc 	.word	0x20000afc
 800114c:	20000b00 	.word	0x20000b00
 8001150:	20000b04 	.word	0x20000b04
 8001154:	2000000c 	.word	0x2000000c
 8001158:	20000b08 	.word	0x20000b08
 800115c:	20000b0c 	.word	0x20000b0c
 8001160:	20000010 	.word	0x20000010
 8001164:	20000b10 	.word	0x20000b10
 8001168:	20000b1c 	.word	0x20000b1c
 800116c:	20000014 	.word	0x20000014
 8001170:	20000015 	.word	0x20000015
 8001174:	20000016 	.word	0x20000016
 8001178:	20008edc 	.word	0x20008edc

0800117c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800117c:	b5b0      	push	{r4, r5, r7, lr}
 800117e:	b08e      	sub	sp, #56	; 0x38
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001182:	f002 fe44 	bl	8003e0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001186:	f000 f85f 	bl	8001248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800118a:	f001 fb17 	bl	80027bc <MX_GPIO_Init>
  MX_ADC3_Init();
 800118e:	f000 f917 	bl	80013c0 <MX_ADC3_Init>
  MX_CRC_Init();
 8001192:	f000 fc4f 	bl	8001a34 <MX_CRC_Init>
  MX_DCMI_Init();
 8001196:	f000 fc6f 	bl	8001a78 <MX_DCMI_Init>
  MX_DMA2D_Init();
 800119a:	f000 fca1 	bl	8001ae0 <MX_DMA2D_Init>
  MX_FMC_Init();
 800119e:	f001 fa61 	bl	8002664 <MX_FMC_Init>
  MX_LTDC_Init();
 80011a2:	f000 fccf 	bl	8001b44 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80011a6:	f000 fd4f 	bl	8001c48 <MX_QUADSPI_Init>
  MX_RTC_Init();
 80011aa:	f000 fd79 	bl	8001ca0 <MX_RTC_Init>
  MX_SAI2_Init();
 80011ae:	f000 fe1f 	bl	8001df0 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 80011b2:	f000 fec5 	bl	8001f40 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 80011b6:	f000 fee3 	bl	8001f80 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 80011ba:	f000 ff11 	bl	8001fe0 <MX_SPI2_Init>
  MX_TIM1_Init();
 80011be:	f000 ff4d 	bl	800205c <MX_TIM1_Init>
  MX_TIM2_Init();
 80011c2:	f000 fff7 	bl	80021b4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80011c6:	f001 f86b 	bl	80022a0 <MX_TIM3_Init>
  MX_TIM5_Init();
 80011ca:	f001 f8df 	bl	800238c <MX_TIM5_Init>
  MX_TIM8_Init();
 80011ce:	f001 f953 	bl	8002478 <MX_TIM8_Init>
  MX_TIM12_Init();
 80011d2:	f001 f9a3 	bl	800251c <MX_TIM12_Init>
  MX_USART1_UART_Init();
 80011d6:	f001 f9e5 	bl	80025a4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80011da:	f001 fa13 	bl	8002604 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 80011de:	f00b f879 	bl	800c2d4 <MX_FATFS_Init>
  MX_CAN1_Init();
 80011e2:	f000 f93f 	bl	8001464 <MX_CAN1_Init>
  MX_TouchGFX_Init();
 80011e6:	f00e f927 	bl	800f438 <MX_TouchGFX_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 80011ea:	4b13      	ldr	r3, [pc, #76]	; (8001238 <main+0xbc>)
 80011ec:	f107 041c 	add.w	r4, r7, #28
 80011f0:	461d      	mov	r5, r3
 80011f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f00b fb5d 	bl	800c8c4 <osThreadCreate>
 800120a:	4603      	mov	r3, r0
 800120c:	4a0b      	ldr	r2, [pc, #44]	; (800123c <main+0xc0>)
 800120e:	6013      	str	r3, [r2, #0]

  osThreadDef(second, SecondTask, osPriorityNormal, 0, 512);
 8001210:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <main+0xc4>)
 8001212:	463c      	mov	r4, r7
 8001214:	461d      	mov	r5, r3
 8001216:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800121a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800121e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  secondTaskHandle = osThreadCreate(osThread(second), NULL);
 8001222:	463b      	mov	r3, r7
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f00b fb4c 	bl	800c8c4 <osThreadCreate>
 800122c:	4603      	mov	r3, r0
 800122e:	4a05      	ldr	r2, [pc, #20]	; (8001244 <main+0xc8>)
 8001230:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001232:	f00b fb24 	bl	800c87e <osKernelStart>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001236:	e7fe      	b.n	8001236 <main+0xba>
 8001238:	08027874 	.word	0x08027874
 800123c:	20000ac8 	.word	0x20000ac8
 8001240:	08027898 	.word	0x08027898
 8001244:	20000acc 	.word	0x20000acc

08001248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b0b4      	sub	sp, #208	; 0xd0
 800124c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001252:	2230      	movs	r2, #48	; 0x30
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f025 fcc3 	bl	8026be2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800125c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800126c:	f107 0308 	add.w	r3, r7, #8
 8001270:	2284      	movs	r2, #132	; 0x84
 8001272:	2100      	movs	r1, #0
 8001274:	4618      	mov	r0, r3
 8001276:	f025 fcb4 	bl	8026be2 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800127a:	f005 faa9 	bl	80067d0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800127e:	4b4d      	ldr	r3, [pc, #308]	; (80013b4 <SystemClock_Config+0x16c>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	4a4c      	ldr	r2, [pc, #304]	; (80013b4 <SystemClock_Config+0x16c>)
 8001284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001288:	6413      	str	r3, [r2, #64]	; 0x40
 800128a:	4b4a      	ldr	r3, [pc, #296]	; (80013b4 <SystemClock_Config+0x16c>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001296:	4b48      	ldr	r3, [pc, #288]	; (80013b8 <SystemClock_Config+0x170>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a47      	ldr	r2, [pc, #284]	; (80013b8 <SystemClock_Config+0x170>)
 800129c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	4b45      	ldr	r3, [pc, #276]	; (80013b8 <SystemClock_Config+0x170>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80012ae:	2309      	movs	r3, #9
 80012b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80012bc:	2301      	movs	r3, #1
 80012be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c2:	2302      	movs	r3, #2
 80012c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80012d0:	2319      	movs	r3, #25
 80012d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 80012d6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80012da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012de:	2302      	movs	r3, #2
 80012e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80012e4:	2309      	movs	r3, #9
 80012e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f005 fb90 	bl	8006a14 <HAL_RCC_OscConfig>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80012fa:	f001 fc93 	bl	8002c24 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012fe:	f005 fa77 	bl	80067f0 <HAL_PWREx_EnableOverDrive>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001308:	f001 fc8c 	bl	8002c24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800130c:	230f      	movs	r3, #15
 800130e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001312:	2302      	movs	r3, #2
 8001314:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001318:	2300      	movs	r3, #0
 800131a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800131e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001322:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001326:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800132a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800132e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001332:	2106      	movs	r1, #6
 8001334:	4618      	mov	r0, r3
 8001336:	f005 fe11 	bl	8006f5c <HAL_RCC_ClockConfig>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001340:	f001 fc70 	bl	8002c24 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8001344:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <SystemClock_Config+0x174>)
 8001346:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001348:	2364      	movs	r3, #100	; 0x64
 800134a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800134c:	2302      	movs	r3, #2
 800134e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001350:	2302      	movs	r3, #2
 8001352:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001354:	2302      	movs	r3, #2
 8001356:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001358:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800135c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800135e:	2305      	movs	r3, #5
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001362:	2302      	movs	r3, #2
 8001364:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001366:	2303      	movs	r3, #3
 8001368:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800136a:	2301      	movs	r3, #1
 800136c:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800136e:	2301      	movs	r3, #1
 8001370:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001372:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001376:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001378:	f44f 7300 	mov.w	r3, #512	; 0x200
 800137c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800137e:	2300      	movs	r3, #0
 8001380:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001382:	2300      	movs	r3, #0
 8001384:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001386:	2300      	movs	r3, #0
 8001388:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800138a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800138e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001392:	2300      	movs	r3, #0
 8001394:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001398:	f107 0308 	add.w	r3, r7, #8
 800139c:	4618      	mov	r0, r3
 800139e:	f005 fff5 	bl	800738c <HAL_RCCEx_PeriphCLKConfig>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <SystemClock_Config+0x164>
  {
    Error_Handler();
 80013a8:	f001 fc3c 	bl	8002c24 <Error_Handler>
  }
}
 80013ac:	bf00      	nop
 80013ae:	37d0      	adds	r7, #208	; 0xd0
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40007000 	.word	0x40007000
 80013bc:	01b00868 	.word	0x01b00868

080013c0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013c6:	463b      	mov	r3, r7
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 80013d2:	4b21      	ldr	r3, [pc, #132]	; (8001458 <MX_ADC3_Init+0x98>)
 80013d4:	4a21      	ldr	r2, [pc, #132]	; (800145c <MX_ADC3_Init+0x9c>)
 80013d6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013d8:	4b1f      	ldr	r3, [pc, #124]	; (8001458 <MX_ADC3_Init+0x98>)
 80013da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013de:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80013e0:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <MX_ADC3_Init+0x98>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013e6:	4b1c      	ldr	r3, [pc, #112]	; (8001458 <MX_ADC3_Init+0x98>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80013ec:	4b1a      	ldr	r3, [pc, #104]	; (8001458 <MX_ADC3_Init+0x98>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80013f2:	4b19      	ldr	r3, [pc, #100]	; (8001458 <MX_ADC3_Init+0x98>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013fa:	4b17      	ldr	r3, [pc, #92]	; (8001458 <MX_ADC3_Init+0x98>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001400:	4b15      	ldr	r3, [pc, #84]	; (8001458 <MX_ADC3_Init+0x98>)
 8001402:	4a17      	ldr	r2, [pc, #92]	; (8001460 <MX_ADC3_Init+0xa0>)
 8001404:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001406:	4b14      	ldr	r3, [pc, #80]	; (8001458 <MX_ADC3_Init+0x98>)
 8001408:	2200      	movs	r2, #0
 800140a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <MX_ADC3_Init+0x98>)
 800140e:	2201      	movs	r2, #1
 8001410:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001412:	4b11      	ldr	r3, [pc, #68]	; (8001458 <MX_ADC3_Init+0x98>)
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800141a:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <MX_ADC3_Init+0x98>)
 800141c:	2201      	movs	r2, #1
 800141e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001420:	480d      	ldr	r0, [pc, #52]	; (8001458 <MX_ADC3_Init+0x98>)
 8001422:	f002 fd45 	bl	8003eb0 <HAL_ADC_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800142c:	f001 fbfa 	bl	8002c24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001430:	2304      	movs	r3, #4
 8001432:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001434:	2301      	movs	r3, #1
 8001436:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800143c:	463b      	mov	r3, r7
 800143e:	4619      	mov	r1, r3
 8001440:	4805      	ldr	r0, [pc, #20]	; (8001458 <MX_ADC3_Init+0x98>)
 8001442:	f002 fd79 	bl	8003f38 <HAL_ADC_ConfigChannel>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800144c:	f001 fbea 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001450:	bf00      	nop
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	2000037c 	.word	0x2000037c
 800145c:	40012200 	.word	0x40012200
 8001460:	0f000001 	.word	0x0f000001

08001464 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	; 0x28
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800146a:	4b30      	ldr	r3, [pc, #192]	; (800152c <MX_CAN1_Init+0xc8>)
 800146c:	4a30      	ldr	r2, [pc, #192]	; (8001530 <MX_CAN1_Init+0xcc>)
 800146e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8001470:	4b2e      	ldr	r3, [pc, #184]	; (800152c <MX_CAN1_Init+0xc8>)
 8001472:	2205      	movs	r2, #5
 8001474:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001476:	4b2d      	ldr	r3, [pc, #180]	; (800152c <MX_CAN1_Init+0xc8>)
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800147c:	4b2b      	ldr	r3, [pc, #172]	; (800152c <MX_CAN1_Init+0xc8>)
 800147e:	2200      	movs	r2, #0
 8001480:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8001482:	4b2a      	ldr	r3, [pc, #168]	; (800152c <MX_CAN1_Init+0xc8>)
 8001484:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001488:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800148a:	4b28      	ldr	r3, [pc, #160]	; (800152c <MX_CAN1_Init+0xc8>)
 800148c:	2200      	movs	r2, #0
 800148e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001490:	4b26      	ldr	r3, [pc, #152]	; (800152c <MX_CAN1_Init+0xc8>)
 8001492:	2200      	movs	r2, #0
 8001494:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001496:	4b25      	ldr	r3, [pc, #148]	; (800152c <MX_CAN1_Init+0xc8>)
 8001498:	2200      	movs	r2, #0
 800149a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800149c:	4b23      	ldr	r3, [pc, #140]	; (800152c <MX_CAN1_Init+0xc8>)
 800149e:	2200      	movs	r2, #0
 80014a0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80014a2:	4b22      	ldr	r3, [pc, #136]	; (800152c <MX_CAN1_Init+0xc8>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80014a8:	4b20      	ldr	r3, [pc, #128]	; (800152c <MX_CAN1_Init+0xc8>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80014ae:	4b1f      	ldr	r3, [pc, #124]	; (800152c <MX_CAN1_Init+0xc8>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80014b4:	481d      	ldr	r0, [pc, #116]	; (800152c <MX_CAN1_Init+0xc8>)
 80014b6:	f002 ff83 	bl	80043c0 <HAL_CAN_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80014c0:	f001 fbb0 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80014cc:	2301      	movs	r3, #1
 80014ce:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 80014d0:	2300      	movs	r3, #0
 80014d2:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80014d4:	2300      	movs	r3, #0
 80014d6:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80014d8:	2300      	movs	r3, #0
 80014da:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80014e4:	2301      	movs	r3, #1
 80014e6:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80014e8:	230e      	movs	r3, #14
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80014ec:	463b      	mov	r3, r7
 80014ee:	4619      	mov	r1, r3
 80014f0:	480e      	ldr	r0, [pc, #56]	; (800152c <MX_CAN1_Init+0xc8>)
 80014f2:	f003 f861 	bl	80045b8 <HAL_CAN_ConfigFilter>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_CAN1_Init+0x9c>
  {
    /* Filter configuration Error */
    Error_Handler();
 80014fc:	f001 fb92 	bl	8002c24 <Error_Handler>
  }

  /*##-3- Start the CAN peripheral ###########################################*/
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8001500:	480a      	ldr	r0, [pc, #40]	; (800152c <MX_CAN1_Init+0xc8>)
 8001502:	f003 f939 	bl	8004778 <HAL_CAN_Start>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_CAN1_Init+0xac>
  {
   /* Start Error */
   Error_Handler();
 800150c:	f001 fb8a 	bl	8002c24 <Error_Handler>
  }

  /*##-4- Activate CAN RX notification #######################################*/
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8001510:	2102      	movs	r1, #2
 8001512:	4806      	ldr	r0, [pc, #24]	; (800152c <MX_CAN1_Init+0xc8>)
 8001514:	f003 fa86 	bl	8004a24 <HAL_CAN_ActivateNotification>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_CAN1_Init+0xbe>
  {
    /* Notification Error */
    Error_Handler();
 800151e:	f001 fb81 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 8001522:	bf00      	nop
 8001524:	3728      	adds	r7, #40	; 0x28
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200003c4 	.word	0x200003c4
 8001530:	40006400 	.word	0x40006400
 8001534:	00000000 	.word	0x00000000

08001538 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	; 0x28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001540:	4ba7      	ldr	r3, [pc, #668]	; (80017e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8001542:	4aa8      	ldr	r2, [pc, #672]	; (80017e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 8001544:	2100      	movs	r1, #0
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f003 f95a 	bl	8004800 <HAL_CAN_GetRxMessage>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    /* Reception Error */
    Error_Handler();
 8001552:	f001 fb67 	bl	8002c24 <Error_Handler>
  }

  /* Package one */
  if ((RxHeader.StdId == 0x360) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8001556:	4ba3      	ldr	r3, [pc, #652]	; (80017e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f5b3 7f58 	cmp.w	r3, #864	; 0x360
 800155e:	d13a      	bne.n	80015d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x9e>
 8001560:	4ba0      	ldr	r3, [pc, #640]	; (80017e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d136      	bne.n	80015d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x9e>
 8001568:	4b9e      	ldr	r3, [pc, #632]	; (80017e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	2b08      	cmp	r3, #8
 800156e:	d132      	bne.n	80015d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x9e>
  {
	 uint16_t rpm_in = (RxData[0] << 8) | (RxData[1] << 0);
 8001570:	4b9b      	ldr	r3, [pc, #620]	; (80017e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	021b      	lsls	r3, r3, #8
 8001576:	b21a      	sxth	r2, r3
 8001578:	4b99      	ldr	r3, [pc, #612]	; (80017e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 800157a:	785b      	ldrb	r3, [r3, #1]
 800157c:	b21b      	sxth	r3, r3
 800157e:	4313      	orrs	r3, r2
 8001580:	b21b      	sxth	r3, r3
 8001582:	84fb      	strh	r3, [r7, #38]	; 0x26
	 uint16_t tps_in = (RxData[4] << 8) | (RxData[5] << 0);
 8001584:	4b96      	ldr	r3, [pc, #600]	; (80017e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8001586:	791b      	ldrb	r3, [r3, #4]
 8001588:	021b      	lsls	r3, r3, #8
 800158a:	b21a      	sxth	r2, r3
 800158c:	4b94      	ldr	r3, [pc, #592]	; (80017e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 800158e:	795b      	ldrb	r3, [r3, #5]
 8001590:	b21b      	sxth	r3, r3
 8001592:	4313      	orrs	r3, r2
 8001594:	b21b      	sxth	r3, r3
 8001596:	84bb      	strh	r3, [r7, #36]	; 0x24

	 rpm = (int)rpm_in;
 8001598:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800159a:	4a93      	ldr	r2, [pc, #588]	; (80017e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>)
 800159c:	6013      	str	r3, [r2, #0]
	 if(rpm > max_rpm) {
 800159e:	4b92      	ldr	r3, [pc, #584]	; (80017e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	4b92      	ldr	r3, [pc, #584]	; (80017ec <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	dd03      	ble.n	80015b2 <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
		 max_rpm = rpm;
 80015aa:	4b8f      	ldr	r3, [pc, #572]	; (80017e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a8f      	ldr	r2, [pc, #572]	; (80017ec <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 80015b0:	6013      	str	r3, [r2, #0]
	 }
	 tps = (int)tps_in * 0.1;
 80015b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff f8f7 	bl	80007a8 <__aeabi_i2d>
 80015ba:	a383      	add	r3, pc, #524	; (adr r3, 80017c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 80015bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c0:	f7fe fe76 	bl	80002b0 <__aeabi_dmul>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4610      	mov	r0, r2
 80015ca:	4619      	mov	r1, r3
 80015cc:	f7ff f9de 	bl	800098c <__aeabi_d2iz>
 80015d0:	4603      	mov	r3, r0
 80015d2:	4a87      	ldr	r2, [pc, #540]	; (80017f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 80015d4:	6013      	str	r3, [r2, #0]
  }

  if ((RxHeader.StdId == 0x361) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 80015d6:	4b83      	ldr	r3, [pc, #524]	; (80017e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f240 3261 	movw	r2, #865	; 0x361
 80015de:	4293      	cmp	r3, r2
 80015e0:	f040 808f 	bne.w	8001702 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ca>
 80015e4:	4b7f      	ldr	r3, [pc, #508]	; (80017e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f040 808a 	bne.w	8001702 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ca>
 80015ee:	4b7d      	ldr	r3, [pc, #500]	; (80017e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	2b08      	cmp	r3, #8
 80015f4:	f040 8085 	bne.w	8001702 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ca>
  {
	 uint16_t fuel_pres_in = (RxData[0] << 8) | (RxData[1] << 0);
 80015f8:	4b79      	ldr	r3, [pc, #484]	; (80017e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	021b      	lsls	r3, r3, #8
 80015fe:	b21a      	sxth	r2, r3
 8001600:	4b77      	ldr	r3, [pc, #476]	; (80017e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8001602:	785b      	ldrb	r3, [r3, #1]
 8001604:	b21b      	sxth	r3, r3
 8001606:	4313      	orrs	r3, r2
 8001608:	b21b      	sxth	r3, r3
 800160a:	847b      	strh	r3, [r7, #34]	; 0x22
	 uint16_t oil_pres_in = (RxData[2] << 8) | (RxData[3] << 0);
 800160c:	4b74      	ldr	r3, [pc, #464]	; (80017e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 800160e:	789b      	ldrb	r3, [r3, #2]
 8001610:	021b      	lsls	r3, r3, #8
 8001612:	b21a      	sxth	r2, r3
 8001614:	4b72      	ldr	r3, [pc, #456]	; (80017e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8001616:	78db      	ldrb	r3, [r3, #3]
 8001618:	b21b      	sxth	r3, r3
 800161a:	4313      	orrs	r3, r2
 800161c:	b21b      	sxth	r3, r3
 800161e:	843b      	strh	r3, [r7, #32]

	 fuel_press = (((float)fuel_pres_in)*0.1f - 101.3)*0.01f;
 8001620:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001622:	ee07 3a90 	vmov	s15, r3
 8001626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800162a:	ed9f 7a72 	vldr	s14, [pc, #456]	; 80017f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>
 800162e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001632:	ee17 0a90 	vmov	r0, s15
 8001636:	f7ff f8c9 	bl	80007cc <__aeabi_f2d>
 800163a:	a365      	add	r3, pc, #404	; (adr r3, 80017d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 800163c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001640:	f7fe ff64 	bl	800050c <__aeabi_dsub>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	4610      	mov	r0, r2
 800164a:	4619      	mov	r1, r3
 800164c:	a362      	add	r3, pc, #392	; (adr r3, 80017d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 800164e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001652:	f7fe fe2d 	bl	80002b0 <__aeabi_dmul>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4610      	mov	r0, r2
 800165c:	4619      	mov	r1, r3
 800165e:	f7ff f9bd 	bl	80009dc <__aeabi_d2f>
 8001662:	4603      	mov	r3, r0
 8001664:	4a64      	ldr	r2, [pc, #400]	; (80017f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8001666:	6013      	str	r3, [r2, #0]
	 oil_press = (((float)oil_pres_in)*0.1f - 101.3)*0.01f;
 8001668:	8c3b      	ldrh	r3, [r7, #32]
 800166a:	ee07 3a90 	vmov	s15, r3
 800166e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001672:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80017f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>
 8001676:	ee67 7a87 	vmul.f32	s15, s15, s14
 800167a:	ee17 0a90 	vmov	r0, s15
 800167e:	f7ff f8a5 	bl	80007cc <__aeabi_f2d>
 8001682:	a353      	add	r3, pc, #332	; (adr r3, 80017d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8001684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001688:	f7fe ff40 	bl	800050c <__aeabi_dsub>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4610      	mov	r0, r2
 8001692:	4619      	mov	r1, r3
 8001694:	a350      	add	r3, pc, #320	; (adr r3, 80017d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 8001696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169a:	f7fe fe09 	bl	80002b0 <__aeabi_dmul>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4610      	mov	r0, r2
 80016a4:	4619      	mov	r1, r3
 80016a6:	f7ff f999 	bl	80009dc <__aeabi_d2f>
 80016aa:	4603      	mov	r3, r0
 80016ac:	4a53      	ldr	r2, [pc, #332]	; (80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 80016ae:	6013      	str	r3, [r2, #0]

	 if(rpm > 700 && fuel_press < min_fuel_press){
 80016b0:	4b4d      	ldr	r3, [pc, #308]	; (80017e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80016b8:	dd0e      	ble.n	80016d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>
 80016ba:	4b4f      	ldr	r3, [pc, #316]	; (80017f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 80016bc:	ed93 7a00 	vldr	s14, [r3]
 80016c0:	4b4f      	ldr	r3, [pc, #316]	; (8001800 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 80016c2:	edd3 7a00 	vldr	s15, [r3]
 80016c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ce:	d503      	bpl.n	80016d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>
		 min_fuel_press = fuel_press;
 80016d0:	4b49      	ldr	r3, [pc, #292]	; (80017f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a4a      	ldr	r2, [pc, #296]	; (8001800 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 80016d6:	6013      	str	r3, [r2, #0]
	 }

	 if(rpm > 2500 && oil_press < min_oil_press){
 80016d8:	4b43      	ldr	r3, [pc, #268]	; (80017e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80016e0:	4293      	cmp	r3, r2
 80016e2:	dd0e      	ble.n	8001702 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ca>
 80016e4:	4b45      	ldr	r3, [pc, #276]	; (80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 80016e6:	ed93 7a00 	vldr	s14, [r3]
 80016ea:	4b46      	ldr	r3, [pc, #280]	; (8001804 <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>)
 80016ec:	edd3 7a00 	vldr	s15, [r3]
 80016f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f8:	d503      	bpl.n	8001702 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ca>
		 min_oil_press = oil_press;
 80016fa:	4b40      	ldr	r3, [pc, #256]	; (80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a41      	ldr	r2, [pc, #260]	; (8001804 <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>)
 8001700:	6013      	str	r3, [r2, #0]
	 }
  }

  if ((RxHeader.StdId == 0x368) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8001702:	4b38      	ldr	r3, [pc, #224]	; (80017e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 800170a:	d11d      	bne.n	8001748 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>
 800170c:	4b35      	ldr	r3, [pc, #212]	; (80017e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d119      	bne.n	8001748 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>
 8001714:	4b33      	ldr	r3, [pc, #204]	; (80017e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	2b08      	cmp	r3, #8
 800171a:	d115      	bne.n	8001748 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>
  {
	 uint16_t lambda_in = (RxData[0] << 8) | (RxData[1] << 0);
 800171c:	4b30      	ldr	r3, [pc, #192]	; (80017e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	021b      	lsls	r3, r3, #8
 8001722:	b21a      	sxth	r2, r3
 8001724:	4b2e      	ldr	r3, [pc, #184]	; (80017e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8001726:	785b      	ldrb	r3, [r3, #1]
 8001728:	b21b      	sxth	r3, r3
 800172a:	4313      	orrs	r3, r2
 800172c:	b21b      	sxth	r3, r3
 800172e:	83fb      	strh	r3, [r7, #30]
	 lambda = ((float)lambda_in)*0.001f;
 8001730:	8bfb      	ldrh	r3, [r7, #30]
 8001732:	ee07 3a90 	vmov	s15, r3
 8001736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800173a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001808 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>
 800173e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001742:	4b32      	ldr	r3, [pc, #200]	; (800180c <HAL_CAN_RxFifo0MsgPendingCallback+0x2d4>)
 8001744:	edc3 7a00 	vstr	s15, [r3]
   }

  if ((RxHeader.StdId == 0x370) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8001748:	4b26      	ldr	r3, [pc, #152]	; (80017e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f5b3 7f5c 	cmp.w	r3, #880	; 0x370
 8001750:	d12d      	bne.n	80017ae <HAL_CAN_RxFifo0MsgPendingCallback+0x276>
 8001752:	4b24      	ldr	r3, [pc, #144]	; (80017e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d129      	bne.n	80017ae <HAL_CAN_RxFifo0MsgPendingCallback+0x276>
 800175a:	4b22      	ldr	r3, [pc, #136]	; (80017e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	2b08      	cmp	r3, #8
 8001760:	d125      	bne.n	80017ae <HAL_CAN_RxFifo0MsgPendingCallback+0x276>
  {
	 uint16_t speed_in = (RxData[0] << 8) | (RxData[1] << 0);
 8001762:	4b1f      	ldr	r3, [pc, #124]	; (80017e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	021b      	lsls	r3, r3, #8
 8001768:	b21a      	sxth	r2, r3
 800176a:	4b1d      	ldr	r3, [pc, #116]	; (80017e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 800176c:	785b      	ldrb	r3, [r3, #1]
 800176e:	b21b      	sxth	r3, r3
 8001770:	4313      	orrs	r3, r2
 8001772:	b21b      	sxth	r3, r3
 8001774:	83bb      	strh	r3, [r7, #28]

	 speed = (int)speed_in * 0.1;
 8001776:	8bbb      	ldrh	r3, [r7, #28]
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff f815 	bl	80007a8 <__aeabi_i2d>
 800177e:	a312      	add	r3, pc, #72	; (adr r3, 80017c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8001780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001784:	f7fe fd94 	bl	80002b0 <__aeabi_dmul>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4610      	mov	r0, r2
 800178e:	4619      	mov	r1, r3
 8001790:	f7ff f8fc 	bl	800098c <__aeabi_d2iz>
 8001794:	4603      	mov	r3, r0
 8001796:	4a1e      	ldr	r2, [pc, #120]	; (8001810 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 8001798:	6013      	str	r3, [r2, #0]
	 if(speed > max_speed) {
 800179a:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	dd03      	ble.n	80017ae <HAL_CAN_RxFifo0MsgPendingCallback+0x276>
		 max_speed = speed;
 80017a6:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a1a      	ldr	r2, [pc, #104]	; (8001814 <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 80017ac:	6013      	str	r3, [r2, #0]
	 }
  }

  if ((RxHeader.StdId == 0x372) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 80017ae:	4b0d      	ldr	r3, [pc, #52]	; (80017e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f240 3272 	movw	r2, #882	; 0x372
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d14b      	bne.n	8001852 <HAL_CAN_RxFifo0MsgPendingCallback+0x31a>
 80017ba:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	e02a      	b.n	8001818 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e0>
 80017c2:	bf00      	nop
 80017c4:	f3af 8000 	nop.w
 80017c8:	9999999a 	.word	0x9999999a
 80017cc:	3fb99999 	.word	0x3fb99999
 80017d0:	33333333 	.word	0x33333333
 80017d4:	40595333 	.word	0x40595333
 80017d8:	40000000 	.word	0x40000000
 80017dc:	3f847ae1 	.word	0x3f847ae1
 80017e0:	20000408 	.word	0x20000408
 80017e4:	200003ec 	.word	0x200003ec
 80017e8:	20000ae0 	.word	0x20000ae0
 80017ec:	20000ae4 	.word	0x20000ae4
 80017f0:	20000b1c 	.word	0x20000b1c
 80017f4:	3dcccccd 	.word	0x3dcccccd
 80017f8:	20000b0c 	.word	0x20000b0c
 80017fc:	20000b04 	.word	0x20000b04
 8001800:	20000010 	.word	0x20000010
 8001804:	2000000c 	.word	0x2000000c
 8001808:	3a83126f 	.word	0x3a83126f
 800180c:	20000af0 	.word	0x20000af0
 8001810:	20000af4 	.word	0x20000af4
 8001814:	20000af8 	.word	0x20000af8
 8001818:	d11b      	bne.n	8001852 <HAL_CAN_RxFifo0MsgPendingCallback+0x31a>
 800181a:	4b79      	ldr	r3, [pc, #484]	; (8001a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c8>)
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	2b08      	cmp	r3, #8
 8001820:	d117      	bne.n	8001852 <HAL_CAN_RxFifo0MsgPendingCallback+0x31a>
  {
	 uint16_t batt_in = (RxData[0] << 8) | (RxData[1] << 0);
 8001822:	4b78      	ldr	r3, [pc, #480]	; (8001a04 <HAL_CAN_RxFifo0MsgPendingCallback+0x4cc>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	021b      	lsls	r3, r3, #8
 8001828:	b21a      	sxth	r2, r3
 800182a:	4b76      	ldr	r3, [pc, #472]	; (8001a04 <HAL_CAN_RxFifo0MsgPendingCallback+0x4cc>)
 800182c:	785b      	ldrb	r3, [r3, #1]
 800182e:	b21b      	sxth	r3, r3
 8001830:	4313      	orrs	r3, r2
 8001832:	b21b      	sxth	r3, r3
 8001834:	837b      	strh	r3, [r7, #26]
	 float battery_voltage = ((float)batt_in)*0.1f;
 8001836:	8b7b      	ldrh	r3, [r7, #26]
 8001838:	ee07 3a90 	vmov	s15, r3
 800183c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001840:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8001a08 <HAL_CAN_RxFifo0MsgPendingCallback+0x4d0>
 8001844:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001848:	edc7 7a05 	vstr	s15, [r7, #20]
	 batt_v = battery_voltage;
 800184c:	4a6f      	ldr	r2, [pc, #444]	; (8001a0c <HAL_CAN_RxFifo0MsgPendingCallback+0x4d4>)
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	6013      	str	r3, [r2, #0]
	 (void)batt_v;
  }

  if ((RxHeader.StdId == 0x3E0) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8001852:	4b6b      	ldr	r3, [pc, #428]	; (8001a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c8>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f5b3 7f78 	cmp.w	r3, #992	; 0x3e0
 800185a:	f040 8096 	bne.w	800198a <HAL_CAN_RxFifo0MsgPendingCallback+0x452>
 800185e:	4b68      	ldr	r3, [pc, #416]	; (8001a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c8>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	2b00      	cmp	r3, #0
 8001864:	f040 8091 	bne.w	800198a <HAL_CAN_RxFifo0MsgPendingCallback+0x452>
 8001868:	4b65      	ldr	r3, [pc, #404]	; (8001a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c8>)
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	2b08      	cmp	r3, #8
 800186e:	f040 808c 	bne.w	800198a <HAL_CAN_RxFifo0MsgPendingCallback+0x452>
  {
	 uint16_t clt_in = (RxData[0] << 8) | (RxData[1] << 0);
 8001872:	4b64      	ldr	r3, [pc, #400]	; (8001a04 <HAL_CAN_RxFifo0MsgPendingCallback+0x4cc>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	021b      	lsls	r3, r3, #8
 8001878:	b21a      	sxth	r2, r3
 800187a:	4b62      	ldr	r3, [pc, #392]	; (8001a04 <HAL_CAN_RxFifo0MsgPendingCallback+0x4cc>)
 800187c:	785b      	ldrb	r3, [r3, #1]
 800187e:	b21b      	sxth	r3, r3
 8001880:	4313      	orrs	r3, r2
 8001882:	b21b      	sxth	r3, r3
 8001884:	827b      	strh	r3, [r7, #18]
	 uint16_t iat_in = (RxData[2] << 8) | (RxData[3] << 0);
 8001886:	4b5f      	ldr	r3, [pc, #380]	; (8001a04 <HAL_CAN_RxFifo0MsgPendingCallback+0x4cc>)
 8001888:	789b      	ldrb	r3, [r3, #2]
 800188a:	021b      	lsls	r3, r3, #8
 800188c:	b21a      	sxth	r2, r3
 800188e:	4b5d      	ldr	r3, [pc, #372]	; (8001a04 <HAL_CAN_RxFifo0MsgPendingCallback+0x4cc>)
 8001890:	78db      	ldrb	r3, [r3, #3]
 8001892:	b21b      	sxth	r3, r3
 8001894:	4313      	orrs	r3, r2
 8001896:	b21b      	sxth	r3, r3
 8001898:	823b      	strh	r3, [r7, #16]
	 uint16_t fuel_tmp_in = (RxData[4] << 8) | (RxData[5] << 0);
 800189a:	4b5a      	ldr	r3, [pc, #360]	; (8001a04 <HAL_CAN_RxFifo0MsgPendingCallback+0x4cc>)
 800189c:	791b      	ldrb	r3, [r3, #4]
 800189e:	021b      	lsls	r3, r3, #8
 80018a0:	b21a      	sxth	r2, r3
 80018a2:	4b58      	ldr	r3, [pc, #352]	; (8001a04 <HAL_CAN_RxFifo0MsgPendingCallback+0x4cc>)
 80018a4:	795b      	ldrb	r3, [r3, #5]
 80018a6:	b21b      	sxth	r3, r3
 80018a8:	4313      	orrs	r3, r2
 80018aa:	b21b      	sxth	r3, r3
 80018ac:	81fb      	strh	r3, [r7, #14]
	 uint16_t oil_tmp_in = (RxData[6] << 8) | (RxData[7] << 0);
 80018ae:	4b55      	ldr	r3, [pc, #340]	; (8001a04 <HAL_CAN_RxFifo0MsgPendingCallback+0x4cc>)
 80018b0:	799b      	ldrb	r3, [r3, #6]
 80018b2:	021b      	lsls	r3, r3, #8
 80018b4:	b21a      	sxth	r2, r3
 80018b6:	4b53      	ldr	r3, [pc, #332]	; (8001a04 <HAL_CAN_RxFifo0MsgPendingCallback+0x4cc>)
 80018b8:	79db      	ldrb	r3, [r3, #7]
 80018ba:	b21b      	sxth	r3, r3
 80018bc:	4313      	orrs	r3, r2
 80018be:	b21b      	sxth	r3, r3
 80018c0:	81bb      	strh	r3, [r7, #12]

	 clt = ((int)clt_in - 2731) * 0.1;
 80018c2:	8a7b      	ldrh	r3, [r7, #18]
 80018c4:	f6a3 23ab 	subw	r3, r3, #2731	; 0xaab
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe ff6d 	bl	80007a8 <__aeabi_i2d>
 80018ce:	a34a      	add	r3, pc, #296	; (adr r3, 80019f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c0>)
 80018d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d4:	f7fe fcec 	bl	80002b0 <__aeabi_dmul>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4610      	mov	r0, r2
 80018de:	4619      	mov	r1, r3
 80018e0:	f7ff f854 	bl	800098c <__aeabi_d2iz>
 80018e4:	4603      	mov	r3, r0
 80018e6:	4a4a      	ldr	r2, [pc, #296]	; (8001a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x4d8>)
 80018e8:	6013      	str	r3, [r2, #0]
	 if(clt > max_clt){
 80018ea:	4b49      	ldr	r3, [pc, #292]	; (8001a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x4d8>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	4b49      	ldr	r3, [pc, #292]	; (8001a14 <HAL_CAN_RxFifo0MsgPendingCallback+0x4dc>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	dd03      	ble.n	80018fe <HAL_CAN_RxFifo0MsgPendingCallback+0x3c6>
		 max_clt = clt;
 80018f6:	4b46      	ldr	r3, [pc, #280]	; (8001a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x4d8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a46      	ldr	r2, [pc, #280]	; (8001a14 <HAL_CAN_RxFifo0MsgPendingCallback+0x4dc>)
 80018fc:	6013      	str	r3, [r2, #0]
	 }

	 iat = ((int)iat_in - 2731) * 0.1;
 80018fe:	8a3b      	ldrh	r3, [r7, #16]
 8001900:	f6a3 23ab 	subw	r3, r3, #2731	; 0xaab
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe ff4f 	bl	80007a8 <__aeabi_i2d>
 800190a:	a33b      	add	r3, pc, #236	; (adr r3, 80019f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c0>)
 800190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001910:	f7fe fcce 	bl	80002b0 <__aeabi_dmul>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4610      	mov	r0, r2
 800191a:	4619      	mov	r1, r3
 800191c:	f7ff f836 	bl	800098c <__aeabi_d2iz>
 8001920:	4603      	mov	r3, r0
 8001922:	4a3d      	ldr	r2, [pc, #244]	; (8001a18 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e0>)
 8001924:	6013      	str	r3, [r2, #0]

	 fuel_tmp = ((int)fuel_tmp_in - 2731) * 0.1;
 8001926:	89fb      	ldrh	r3, [r7, #14]
 8001928:	f6a3 23ab 	subw	r3, r3, #2731	; 0xaab
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe ff3b 	bl	80007a8 <__aeabi_i2d>
 8001932:	a331      	add	r3, pc, #196	; (adr r3, 80019f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c0>)
 8001934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001938:	f7fe fcba 	bl	80002b0 <__aeabi_dmul>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4610      	mov	r0, r2
 8001942:	4619      	mov	r1, r3
 8001944:	f7ff f822 	bl	800098c <__aeabi_d2iz>
 8001948:	4603      	mov	r3, r0
 800194a:	4a34      	ldr	r2, [pc, #208]	; (8001a1c <HAL_CAN_RxFifo0MsgPendingCallback+0x4e4>)
 800194c:	6013      	str	r3, [r2, #0]

	 oil_tmp = ((int)oil_tmp_in - 2731) * 0.1;
 800194e:	89bb      	ldrh	r3, [r7, #12]
 8001950:	f6a3 23ab 	subw	r3, r3, #2731	; 0xaab
 8001954:	4618      	mov	r0, r3
 8001956:	f7fe ff27 	bl	80007a8 <__aeabi_i2d>
 800195a:	a327      	add	r3, pc, #156	; (adr r3, 80019f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c0>)
 800195c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001960:	f7fe fca6 	bl	80002b0 <__aeabi_dmul>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	4610      	mov	r0, r2
 800196a:	4619      	mov	r1, r3
 800196c:	f7ff f80e 	bl	800098c <__aeabi_d2iz>
 8001970:	4603      	mov	r3, r0
 8001972:	4a2b      	ldr	r2, [pc, #172]	; (8001a20 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e8>)
 8001974:	6013      	str	r3, [r2, #0]
	 if(oil_tmp > max_oil_tmp){
 8001976:	4b2a      	ldr	r3, [pc, #168]	; (8001a20 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e8>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	4b2a      	ldr	r3, [pc, #168]	; (8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ec>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	dd03      	ble.n	800198a <HAL_CAN_RxFifo0MsgPendingCallback+0x452>
		 max_oil_tmp = oil_tmp;
 8001982:	4b27      	ldr	r3, [pc, #156]	; (8001a20 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a27      	ldr	r2, [pc, #156]	; (8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ec>)
 8001988:	6013      	str	r3, [r2, #0]
	 }
  }

  if ((RxHeader.StdId == 0x3E4) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 800198a:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f5b3 7f79 	cmp.w	r3, #996	; 0x3e4
 8001992:	d12c      	bne.n	80019ee <HAL_CAN_RxFifo0MsgPendingCallback+0x4b6>
 8001994:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c8>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d128      	bne.n	80019ee <HAL_CAN_RxFifo0MsgPendingCallback+0x4b6>
 800199c:	4b18      	ldr	r3, [pc, #96]	; (8001a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c8>)
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	2b08      	cmp	r3, #8
 80019a2:	d124      	bne.n	80019ee <HAL_CAN_RxFifo0MsgPendingCallback+0x4b6>
  {
	 oil_indicator = (RxData[1] >> 0) & 1;
 80019a4:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <HAL_CAN_RxFifo0MsgPendingCallback+0x4cc>)
 80019a6:	785b      	ldrb	r3, [r3, #1]
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	bf14      	ite	ne
 80019b0:	2301      	movne	r3, #1
 80019b2:	2300      	moveq	r3, #0
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	4b1c      	ldr	r3, [pc, #112]	; (8001a28 <HAL_CAN_RxFifo0MsgPendingCallback+0x4f0>)
 80019b8:	701a      	strb	r2, [r3, #0]
	 mil_indicator = (RxData[7] >> 7) & 1;
 80019ba:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_CAN_RxFifo0MsgPendingCallback+0x4cc>)
 80019bc:	79db      	ldrb	r3, [r3, #7]
 80019be:	09db      	lsrs	r3, r3, #7
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	bf14      	ite	ne
 80019ca:	2301      	movne	r3, #1
 80019cc:	2300      	moveq	r3, #0
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	4b16      	ldr	r3, [pc, #88]	; (8001a2c <HAL_CAN_RxFifo0MsgPendingCallback+0x4f4>)
 80019d2:	701a      	strb	r2, [r3, #0]
	 bat_indicator = (RxData[7] >> 6) & 1;
 80019d4:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <HAL_CAN_RxFifo0MsgPendingCallback+0x4cc>)
 80019d6:	79db      	ldrb	r3, [r3, #7]
 80019d8:	099b      	lsrs	r3, r3, #6
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	bf14      	ite	ne
 80019e4:	2301      	movne	r3, #1
 80019e6:	2300      	moveq	r3, #0
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <HAL_CAN_RxFifo0MsgPendingCallback+0x4f8>)
 80019ec:	701a      	strb	r2, [r3, #0]
  }
}
 80019ee:	bf00      	nop
 80019f0:	3728      	adds	r7, #40	; 0x28
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	9999999a 	.word	0x9999999a
 80019fc:	3fb99999 	.word	0x3fb99999
 8001a00:	200003ec 	.word	0x200003ec
 8001a04:	20000408 	.word	0x20000408
 8001a08:	3dcccccd 	.word	0x3dcccccd
 8001a0c:	20000b20 	.word	0x20000b20
 8001a10:	20000ae8 	.word	0x20000ae8
 8001a14:	20000aec 	.word	0x20000aec
 8001a18:	20000b10 	.word	0x20000b10
 8001a1c:	20000b08 	.word	0x20000b08
 8001a20:	20000afc 	.word	0x20000afc
 8001a24:	20000b00 	.word	0x20000b00
 8001a28:	20000015 	.word	0x20000015
 8001a2c:	20000016 	.word	0x20000016
 8001a30:	20000014 	.word	0x20000014

08001a34 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001a38:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <MX_CRC_Init+0x3c>)
 8001a3a:	4a0e      	ldr	r2, [pc, #56]	; (8001a74 <MX_CRC_Init+0x40>)
 8001a3c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001a3e:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <MX_CRC_Init+0x3c>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001a44:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <MX_CRC_Init+0x3c>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001a4a:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <MX_CRC_Init+0x3c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001a50:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <MX_CRC_Init+0x3c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <MX_CRC_Init+0x3c>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001a5c:	4804      	ldr	r0, [pc, #16]	; (8001a70 <MX_CRC_Init+0x3c>)
 8001a5e:	f003 fb4b 	bl	80050f8 <HAL_CRC_Init>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001a68:	f001 f8dc 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20000410 	.word	0x20000410
 8001a74:	40023000 	.word	0x40023000

08001a78 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001a7c:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <MX_DCMI_Init+0x60>)
 8001a7e:	4a17      	ldr	r2, [pc, #92]	; (8001adc <MX_DCMI_Init+0x64>)
 8001a80:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <MX_DCMI_Init+0x60>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001a88:	4b13      	ldr	r3, [pc, #76]	; (8001ad8 <MX_DCMI_Init+0x60>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001a8e:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <MX_DCMI_Init+0x60>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001a94:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <MX_DCMI_Init+0x60>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001a9a:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <MX_DCMI_Init+0x60>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001aa0:	4b0d      	ldr	r3, [pc, #52]	; (8001ad8 <MX_DCMI_Init+0x60>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001aa6:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <MX_DCMI_Init+0x60>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001aac:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <MX_DCMI_Init+0x60>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <MX_DCMI_Init+0x60>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001ab8:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <MX_DCMI_Init+0x60>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <MX_DCMI_Init+0x60>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001ac4:	4804      	ldr	r0, [pc, #16]	; (8001ad8 <MX_DCMI_Init+0x60>)
 8001ac6:	f003 fc01 	bl	80052cc <HAL_DCMI_Init>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001ad0:	f001 f8a8 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000434 	.word	0x20000434
 8001adc:	50050000 	.word	0x50050000

08001ae0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001ae4:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <MX_DMA2D_Init+0x5c>)
 8001ae6:	4a16      	ldr	r2, [pc, #88]	; (8001b40 <MX_DMA2D_Init+0x60>)
 8001ae8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001aea:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <MX_DMA2D_Init+0x5c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <MX_DMA2D_Init+0x5c>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001af6:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <MX_DMA2D_Init+0x5c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001afc:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <MX_DMA2D_Init+0x5c>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001b02:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <MX_DMA2D_Init+0x5c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <MX_DMA2D_Init+0x5c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <MX_DMA2D_Init+0x5c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001b14:	4809      	ldr	r0, [pc, #36]	; (8001b3c <MX_DMA2D_Init+0x5c>)
 8001b16:	f003 fced 	bl	80054f4 <HAL_DMA2D_Init>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001b20:	f001 f880 	bl	8002c24 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001b24:	2101      	movs	r1, #1
 8001b26:	4805      	ldr	r0, [pc, #20]	; (8001b3c <MX_DMA2D_Init+0x5c>)
 8001b28:	f003 ffae 	bl	8005a88 <HAL_DMA2D_ConfigLayer>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001b32:	f001 f877 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000484 	.word	0x20000484
 8001b40:	4002b000 	.word	0x4002b000

08001b44 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08e      	sub	sp, #56	; 0x38
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	2234      	movs	r2, #52	; 0x34
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4618      	mov	r0, r3
 8001b52:	f025 f846 	bl	8026be2 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001b56:	4b3a      	ldr	r3, [pc, #232]	; (8001c40 <MX_LTDC_Init+0xfc>)
 8001b58:	4a3a      	ldr	r2, [pc, #232]	; (8001c44 <MX_LTDC_Init+0x100>)
 8001b5a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001b5c:	4b38      	ldr	r3, [pc, #224]	; (8001c40 <MX_LTDC_Init+0xfc>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001b62:	4b37      	ldr	r3, [pc, #220]	; (8001c40 <MX_LTDC_Init+0xfc>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001b68:	4b35      	ldr	r3, [pc, #212]	; (8001c40 <MX_LTDC_Init+0xfc>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001b6e:	4b34      	ldr	r3, [pc, #208]	; (8001c40 <MX_LTDC_Init+0xfc>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001b74:	4b32      	ldr	r3, [pc, #200]	; (8001c40 <MX_LTDC_Init+0xfc>)
 8001b76:	2228      	movs	r2, #40	; 0x28
 8001b78:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001b7a:	4b31      	ldr	r3, [pc, #196]	; (8001c40 <MX_LTDC_Init+0xfc>)
 8001b7c:	2209      	movs	r2, #9
 8001b7e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001b80:	4b2f      	ldr	r3, [pc, #188]	; (8001c40 <MX_LTDC_Init+0xfc>)
 8001b82:	2235      	movs	r2, #53	; 0x35
 8001b84:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001b86:	4b2e      	ldr	r3, [pc, #184]	; (8001c40 <MX_LTDC_Init+0xfc>)
 8001b88:	220b      	movs	r2, #11
 8001b8a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001b8c:	4b2c      	ldr	r3, [pc, #176]	; (8001c40 <MX_LTDC_Init+0xfc>)
 8001b8e:	f240 2215 	movw	r2, #533	; 0x215
 8001b92:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001b94:	4b2a      	ldr	r3, [pc, #168]	; (8001c40 <MX_LTDC_Init+0xfc>)
 8001b96:	f240 121b 	movw	r2, #283	; 0x11b
 8001b9a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001b9c:	4b28      	ldr	r3, [pc, #160]	; (8001c40 <MX_LTDC_Init+0xfc>)
 8001b9e:	f240 2235 	movw	r2, #565	; 0x235
 8001ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001ba4:	4b26      	ldr	r3, [pc, #152]	; (8001c40 <MX_LTDC_Init+0xfc>)
 8001ba6:	f240 121d 	movw	r2, #285	; 0x11d
 8001baa:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001bac:	4b24      	ldr	r3, [pc, #144]	; (8001c40 <MX_LTDC_Init+0xfc>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001bb4:	4b22      	ldr	r3, [pc, #136]	; (8001c40 <MX_LTDC_Init+0xfc>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001bbc:	4b20      	ldr	r3, [pc, #128]	; (8001c40 <MX_LTDC_Init+0xfc>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001bc4:	481e      	ldr	r0, [pc, #120]	; (8001c40 <MX_LTDC_Init+0xfc>)
 8001bc6:	f004 fa6b 	bl	80060a0 <HAL_LTDC_Init>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001bd0:	f001 f828 	bl	8002c24 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001bd8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001bdc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001be2:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001be6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8001be8:	2301      	movs	r3, #1
 8001bea:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001bec:	23ff      	movs	r3, #255	; 0xff
 8001bee:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001bf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bf8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001bfa:	2305      	movs	r3, #5
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001bfe:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001c02:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001c04:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001c0a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001c0e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001c22:	1d3b      	adds	r3, r7, #4
 8001c24:	2200      	movs	r2, #0
 8001c26:	4619      	mov	r1, r3
 8001c28:	4805      	ldr	r0, [pc, #20]	; (8001c40 <MX_LTDC_Init+0xfc>)
 8001c2a:	f004 fbc1 	bl	80063b0 <HAL_LTDC_ConfigLayer>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001c34:	f000 fff6 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001c38:	bf00      	nop
 8001c3a:	3738      	adds	r7, #56	; 0x38
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	200004c4 	.word	0x200004c4
 8001c44:	40016800 	.word	0x40016800

08001c48 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <MX_QUADSPI_Init+0x50>)
 8001c4e:	4a13      	ldr	r2, [pc, #76]	; (8001c9c <MX_QUADSPI_Init+0x54>)
 8001c50:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001c52:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <MX_QUADSPI_Init+0x50>)
 8001c54:	22ff      	movs	r2, #255	; 0xff
 8001c56:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <MX_QUADSPI_Init+0x50>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <MX_QUADSPI_Init+0x50>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001c64:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <MX_QUADSPI_Init+0x50>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <MX_QUADSPI_Init+0x50>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001c70:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <MX_QUADSPI_Init+0x50>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001c76:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <MX_QUADSPI_Init+0x50>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <MX_QUADSPI_Init+0x50>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001c82:	4805      	ldr	r0, [pc, #20]	; (8001c98 <MX_QUADSPI_Init+0x50>)
 8001c84:	f004 fe04 	bl	8006890 <HAL_QSPI_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001c8e:	f000 ffc9 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	2000056c 	.word	0x2000056c
 8001c9c:	a0001000 	.word	0xa0001000

08001ca0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b092      	sub	sp, #72	; 0x48
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001ca6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	609a      	str	r2, [r3, #8]
 8001cb2:	60da      	str	r2, [r3, #12]
 8001cb4:	611a      	str	r2, [r3, #16]
 8001cb6:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001cb8:	2300      	movs	r3, #0
 8001cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001cbc:	463b      	mov	r3, r7
 8001cbe:	222c      	movs	r2, #44	; 0x2c
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f024 ff8d 	bl	8026be2 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001cc8:	4b47      	ldr	r3, [pc, #284]	; (8001de8 <MX_RTC_Init+0x148>)
 8001cca:	4a48      	ldr	r2, [pc, #288]	; (8001dec <MX_RTC_Init+0x14c>)
 8001ccc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001cce:	4b46      	ldr	r3, [pc, #280]	; (8001de8 <MX_RTC_Init+0x148>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001cd4:	4b44      	ldr	r3, [pc, #272]	; (8001de8 <MX_RTC_Init+0x148>)
 8001cd6:	227f      	movs	r2, #127	; 0x7f
 8001cd8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001cda:	4b43      	ldr	r3, [pc, #268]	; (8001de8 <MX_RTC_Init+0x148>)
 8001cdc:	22ff      	movs	r2, #255	; 0xff
 8001cde:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ce0:	4b41      	ldr	r3, [pc, #260]	; (8001de8 <MX_RTC_Init+0x148>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ce6:	4b40      	ldr	r3, [pc, #256]	; (8001de8 <MX_RTC_Init+0x148>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001cec:	4b3e      	ldr	r3, [pc, #248]	; (8001de8 <MX_RTC_Init+0x148>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001cf2:	483d      	ldr	r0, [pc, #244]	; (8001de8 <MX_RTC_Init+0x148>)
 8001cf4:	f006 f87a 	bl	8007dec <HAL_RTC_Init>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001cfe:	f000 ff91 	bl	8002c24 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d14:	2300      	movs	r3, #0
 8001d16:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d20:	2201      	movs	r2, #1
 8001d22:	4619      	mov	r1, r3
 8001d24:	4830      	ldr	r0, [pc, #192]	; (8001de8 <MX_RTC_Init+0x148>)
 8001d26:	f006 f8dd 	bl	8007ee4 <HAL_RTC_SetTime>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001d30:	f000 ff78 	bl	8002c24 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001d34:	2301      	movs	r3, #1
 8001d36:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001d40:	2301      	movs	r3, #1
 8001d42:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001d4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d50:	2201      	movs	r2, #1
 8001d52:	4619      	mov	r1, r3
 8001d54:	4824      	ldr	r0, [pc, #144]	; (8001de8 <MX_RTC_Init+0x148>)
 8001d56:	f006 f983 	bl	8008060 <HAL_RTC_SetDate>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001d60:	f000 ff60 	bl	8002c24 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001d64:	2300      	movs	r3, #0
 8001d66:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d74:	2300      	movs	r3, #0
 8001d76:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001d84:	2300      	movs	r3, #0
 8001d86:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001d8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d92:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d94:	463b      	mov	r3, r7
 8001d96:	2201      	movs	r2, #1
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4813      	ldr	r0, [pc, #76]	; (8001de8 <MX_RTC_Init+0x148>)
 8001d9c:	f006 fa08 	bl	80081b0 <HAL_RTC_SetAlarm>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001da6:	f000 ff3d 	bl	8002c24 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 8001daa:	2301      	movs	r3, #1
 8001dac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 8001db0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001db4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001db6:	463b      	mov	r3, r7
 8001db8:	2201      	movs	r2, #1
 8001dba:	4619      	mov	r1, r3
 8001dbc:	480a      	ldr	r0, [pc, #40]	; (8001de8 <MX_RTC_Init+0x148>)
 8001dbe:	f006 f9f7 	bl	80081b0 <HAL_RTC_SetAlarm>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 8001dc8:	f000 ff2c 	bl	8002c24 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001dcc:	2202      	movs	r2, #2
 8001dce:	2100      	movs	r1, #0
 8001dd0:	4805      	ldr	r0, [pc, #20]	; (8001de8 <MX_RTC_Init+0x148>)
 8001dd2:	f006 fb77 	bl	80084c4 <HAL_RTCEx_SetTimeStamp>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_RTC_Init+0x140>
  {
    Error_Handler();
 8001ddc:	f000 ff22 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001de0:	bf00      	nop
 8001de2:	3748      	adds	r7, #72	; 0x48
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	200005b8 	.word	0x200005b8
 8001dec:	40002800 	.word	0x40002800

08001df0 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001df4:	4b4d      	ldr	r3, [pc, #308]	; (8001f2c <MX_SAI2_Init+0x13c>)
 8001df6:	4a4e      	ldr	r2, [pc, #312]	; (8001f30 <MX_SAI2_Init+0x140>)
 8001df8:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001dfa:	4b4c      	ldr	r3, [pc, #304]	; (8001f2c <MX_SAI2_Init+0x13c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001e00:	4b4a      	ldr	r3, [pc, #296]	; (8001f2c <MX_SAI2_Init+0x13c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001e06:	4b49      	ldr	r3, [pc, #292]	; (8001f2c <MX_SAI2_Init+0x13c>)
 8001e08:	2240      	movs	r2, #64	; 0x40
 8001e0a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001e0c:	4b47      	ldr	r3, [pc, #284]	; (8001f2c <MX_SAI2_Init+0x13c>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001e12:	4b46      	ldr	r3, [pc, #280]	; (8001f2c <MX_SAI2_Init+0x13c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001e18:	4b44      	ldr	r3, [pc, #272]	; (8001f2c <MX_SAI2_Init+0x13c>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001e1e:	4b43      	ldr	r3, [pc, #268]	; (8001f2c <MX_SAI2_Init+0x13c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001e24:	4b41      	ldr	r3, [pc, #260]	; (8001f2c <MX_SAI2_Init+0x13c>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001e2a:	4b40      	ldr	r3, [pc, #256]	; (8001f2c <MX_SAI2_Init+0x13c>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001e30:	4b3e      	ldr	r3, [pc, #248]	; (8001f2c <MX_SAI2_Init+0x13c>)
 8001e32:	4a40      	ldr	r2, [pc, #256]	; (8001f34 <MX_SAI2_Init+0x144>)
 8001e34:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001e36:	4b3d      	ldr	r3, [pc, #244]	; (8001f2c <MX_SAI2_Init+0x13c>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001e3c:	4b3b      	ldr	r3, [pc, #236]	; (8001f2c <MX_SAI2_Init+0x13c>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001e42:	4b3a      	ldr	r3, [pc, #232]	; (8001f2c <MX_SAI2_Init+0x13c>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001e48:	4b38      	ldr	r3, [pc, #224]	; (8001f2c <MX_SAI2_Init+0x13c>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001e4e:	4b37      	ldr	r3, [pc, #220]	; (8001f2c <MX_SAI2_Init+0x13c>)
 8001e50:	2208      	movs	r2, #8
 8001e52:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001e54:	4b35      	ldr	r3, [pc, #212]	; (8001f2c <MX_SAI2_Init+0x13c>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001e5a:	4b34      	ldr	r3, [pc, #208]	; (8001f2c <MX_SAI2_Init+0x13c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001e60:	4b32      	ldr	r3, [pc, #200]	; (8001f2c <MX_SAI2_Init+0x13c>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001e66:	4b31      	ldr	r3, [pc, #196]	; (8001f2c <MX_SAI2_Init+0x13c>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001e6c:	4b2f      	ldr	r3, [pc, #188]	; (8001f2c <MX_SAI2_Init+0x13c>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001e72:	4b2e      	ldr	r3, [pc, #184]	; (8001f2c <MX_SAI2_Init+0x13c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001e78:	4b2c      	ldr	r3, [pc, #176]	; (8001f2c <MX_SAI2_Init+0x13c>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001e7e:	4b2b      	ldr	r3, [pc, #172]	; (8001f2c <MX_SAI2_Init+0x13c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001e84:	4829      	ldr	r0, [pc, #164]	; (8001f2c <MX_SAI2_Init+0x13c>)
 8001e86:	f006 fb73 	bl	8008570 <HAL_SAI_Init>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001e90:	f000 fec8 	bl	8002c24 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001e94:	4b28      	ldr	r3, [pc, #160]	; (8001f38 <MX_SAI2_Init+0x148>)
 8001e96:	4a29      	ldr	r2, [pc, #164]	; (8001f3c <MX_SAI2_Init+0x14c>)
 8001e98:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001e9a:	4b27      	ldr	r3, [pc, #156]	; (8001f38 <MX_SAI2_Init+0x148>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001ea0:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <MX_SAI2_Init+0x148>)
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001ea6:	4b24      	ldr	r3, [pc, #144]	; (8001f38 <MX_SAI2_Init+0x148>)
 8001ea8:	2240      	movs	r2, #64	; 0x40
 8001eaa:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001eac:	4b22      	ldr	r3, [pc, #136]	; (8001f38 <MX_SAI2_Init+0x148>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001eb2:	4b21      	ldr	r3, [pc, #132]	; (8001f38 <MX_SAI2_Init+0x148>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001eb8:	4b1f      	ldr	r3, [pc, #124]	; (8001f38 <MX_SAI2_Init+0x148>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001ebe:	4b1e      	ldr	r3, [pc, #120]	; (8001f38 <MX_SAI2_Init+0x148>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001ec4:	4b1c      	ldr	r3, [pc, #112]	; (8001f38 <MX_SAI2_Init+0x148>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001eca:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <MX_SAI2_Init+0x148>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001ed0:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <MX_SAI2_Init+0x148>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001ed6:	4b18      	ldr	r3, [pc, #96]	; (8001f38 <MX_SAI2_Init+0x148>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001edc:	4b16      	ldr	r3, [pc, #88]	; (8001f38 <MX_SAI2_Init+0x148>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001ee2:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <MX_SAI2_Init+0x148>)
 8001ee4:	2208      	movs	r2, #8
 8001ee6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001ee8:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <MX_SAI2_Init+0x148>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001eee:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <MX_SAI2_Init+0x148>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001ef4:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <MX_SAI2_Init+0x148>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001efa:	4b0f      	ldr	r3, [pc, #60]	; (8001f38 <MX_SAI2_Init+0x148>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001f00:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <MX_SAI2_Init+0x148>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001f06:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <MX_SAI2_Init+0x148>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001f0c:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <MX_SAI2_Init+0x148>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001f12:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <MX_SAI2_Init+0x148>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001f18:	4807      	ldr	r0, [pc, #28]	; (8001f38 <MX_SAI2_Init+0x148>)
 8001f1a:	f006 fb29 	bl	8008570 <HAL_SAI_Init>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001f24:	f000 fe7e 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001f28:	bf00      	nop
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	200005d8 	.word	0x200005d8
 8001f30:	40015c04 	.word	0x40015c04
 8001f34:	0002ee00 	.word	0x0002ee00
 8001f38:	2000065c 	.word	0x2000065c
 8001f3c:	40015c24 	.word	0x40015c24

08001f40 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001f44:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <MX_SDMMC1_SD_Init+0x38>)
 8001f46:	4a0d      	ldr	r2, [pc, #52]	; (8001f7c <MX_SDMMC1_SD_Init+0x3c>)
 8001f48:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001f4a:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <MX_SDMMC1_SD_Init+0x38>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001f50:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <MX_SDMMC1_SD_Init+0x38>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001f56:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <MX_SDMMC1_SD_Init+0x38>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001f5c:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <MX_SDMMC1_SD_Init+0x38>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001f62:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <MX_SDMMC1_SD_Init+0x38>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001f68:	4b03      	ldr	r3, [pc, #12]	; (8001f78 <MX_SDMMC1_SD_Init+0x38>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001f6e:	bf00      	nop
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	200006e0 	.word	0x200006e0
 8001f7c:	40012c00 	.word	0x40012c00

08001f80 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001f84:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <MX_SPDIFRX_Init+0x5c>)
 8001f86:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001f8a:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001f8c:	4b13      	ldr	r3, [pc, #76]	; (8001fdc <MX_SPDIFRX_Init+0x5c>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001f92:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <MX_SPDIFRX_Init+0x5c>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001f98:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <MX_SPDIFRX_Init+0x5c>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001f9e:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <MX_SPDIFRX_Init+0x5c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001fa4:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <MX_SPDIFRX_Init+0x5c>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001faa:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <MX_SPDIFRX_Init+0x5c>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001fb0:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <MX_SPDIFRX_Init+0x5c>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001fb6:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <MX_SPDIFRX_Init+0x5c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001fbc:	4b07      	ldr	r3, [pc, #28]	; (8001fdc <MX_SPDIFRX_Init+0x5c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001fc2:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <MX_SPDIFRX_Init+0x5c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001fc8:	4804      	ldr	r0, [pc, #16]	; (8001fdc <MX_SPDIFRX_Init+0x5c>)
 8001fca:	f007 fd69 	bl	8009aa0 <HAL_SPDIFRX_Init>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001fd4:	f000 fe26 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001fd8:	bf00      	nop
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20000764 	.word	0x20000764

08001fe0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001fe4:	4b1b      	ldr	r3, [pc, #108]	; (8002054 <MX_SPI2_Init+0x74>)
 8001fe6:	4a1c      	ldr	r2, [pc, #112]	; (8002058 <MX_SPI2_Init+0x78>)
 8001fe8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001fea:	4b1a      	ldr	r3, [pc, #104]	; (8002054 <MX_SPI2_Init+0x74>)
 8001fec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ff0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001ff2:	4b18      	ldr	r3, [pc, #96]	; (8002054 <MX_SPI2_Init+0x74>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001ff8:	4b16      	ldr	r3, [pc, #88]	; (8002054 <MX_SPI2_Init+0x74>)
 8001ffa:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001ffe:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002000:	4b14      	ldr	r3, [pc, #80]	; (8002054 <MX_SPI2_Init+0x74>)
 8002002:	2200      	movs	r2, #0
 8002004:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002006:	4b13      	ldr	r3, [pc, #76]	; (8002054 <MX_SPI2_Init+0x74>)
 8002008:	2200      	movs	r2, #0
 800200a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800200c:	4b11      	ldr	r3, [pc, #68]	; (8002054 <MX_SPI2_Init+0x74>)
 800200e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002012:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002014:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <MX_SPI2_Init+0x74>)
 8002016:	2200      	movs	r2, #0
 8002018:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800201a:	4b0e      	ldr	r3, [pc, #56]	; (8002054 <MX_SPI2_Init+0x74>)
 800201c:	2200      	movs	r2, #0
 800201e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002020:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <MX_SPI2_Init+0x74>)
 8002022:	2200      	movs	r2, #0
 8002024:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002026:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <MX_SPI2_Init+0x74>)
 8002028:	2200      	movs	r2, #0
 800202a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800202c:	4b09      	ldr	r3, [pc, #36]	; (8002054 <MX_SPI2_Init+0x74>)
 800202e:	2207      	movs	r2, #7
 8002030:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002032:	4b08      	ldr	r3, [pc, #32]	; (8002054 <MX_SPI2_Init+0x74>)
 8002034:	2200      	movs	r2, #0
 8002036:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <MX_SPI2_Init+0x74>)
 800203a:	2208      	movs	r2, #8
 800203c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800203e:	4805      	ldr	r0, [pc, #20]	; (8002054 <MX_SPI2_Init+0x74>)
 8002040:	f007 fd8a 	bl	8009b58 <HAL_SPI_Init>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800204a:	f000 fdeb 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	200007b0 	.word	0x200007b0
 8002058:	40003800 	.word	0x40003800

0800205c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b09a      	sub	sp, #104	; 0x68
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002062:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	605a      	str	r2, [r3, #4]
 800206c:	609a      	str	r2, [r3, #8]
 800206e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002070:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800207c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	611a      	str	r2, [r3, #16]
 800208c:	615a      	str	r2, [r3, #20]
 800208e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002090:	1d3b      	adds	r3, r7, #4
 8002092:	222c      	movs	r2, #44	; 0x2c
 8002094:	2100      	movs	r1, #0
 8002096:	4618      	mov	r0, r3
 8002098:	f024 fda3 	bl	8026be2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800209c:	4b43      	ldr	r3, [pc, #268]	; (80021ac <MX_TIM1_Init+0x150>)
 800209e:	4a44      	ldr	r2, [pc, #272]	; (80021b0 <MX_TIM1_Init+0x154>)
 80020a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80020a2:	4b42      	ldr	r3, [pc, #264]	; (80021ac <MX_TIM1_Init+0x150>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a8:	4b40      	ldr	r3, [pc, #256]	; (80021ac <MX_TIM1_Init+0x150>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80020ae:	4b3f      	ldr	r3, [pc, #252]	; (80021ac <MX_TIM1_Init+0x150>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b4:	4b3d      	ldr	r3, [pc, #244]	; (80021ac <MX_TIM1_Init+0x150>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020ba:	4b3c      	ldr	r3, [pc, #240]	; (80021ac <MX_TIM1_Init+0x150>)
 80020bc:	2200      	movs	r2, #0
 80020be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020c0:	4b3a      	ldr	r3, [pc, #232]	; (80021ac <MX_TIM1_Init+0x150>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020c6:	4839      	ldr	r0, [pc, #228]	; (80021ac <MX_TIM1_Init+0x150>)
 80020c8:	f007 fdd8 	bl	8009c7c <HAL_TIM_Base_Init>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80020d2:	f000 fda7 	bl	8002c24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020da:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020e0:	4619      	mov	r1, r3
 80020e2:	4832      	ldr	r0, [pc, #200]	; (80021ac <MX_TIM1_Init+0x150>)
 80020e4:	f008 f882 	bl	800a1ec <HAL_TIM_ConfigClockSource>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80020ee:	f000 fd99 	bl	8002c24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80020f2:	482e      	ldr	r0, [pc, #184]	; (80021ac <MX_TIM1_Init+0x150>)
 80020f4:	f007 fe18 	bl	8009d28 <HAL_TIM_PWM_Init>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80020fe:	f000 fd91 	bl	8002c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002102:	2300      	movs	r3, #0
 8002104:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002106:	2300      	movs	r3, #0
 8002108:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800210a:	2300      	movs	r3, #0
 800210c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800210e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002112:	4619      	mov	r1, r3
 8002114:	4825      	ldr	r0, [pc, #148]	; (80021ac <MX_TIM1_Init+0x150>)
 8002116:	f008 fcef 	bl	800aaf8 <HAL_TIMEx_MasterConfigSynchronization>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8002120:	f000 fd80 	bl	8002c24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002124:	2360      	movs	r3, #96	; 0x60
 8002126:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002128:	2300      	movs	r3, #0
 800212a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800212c:	2300      	movs	r3, #0
 800212e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002130:	2300      	movs	r3, #0
 8002132:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002134:	2300      	movs	r3, #0
 8002136:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002138:	2300      	movs	r3, #0
 800213a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800213c:	2300      	movs	r3, #0
 800213e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002140:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002144:	2200      	movs	r2, #0
 8002146:	4619      	mov	r1, r3
 8002148:	4818      	ldr	r0, [pc, #96]	; (80021ac <MX_TIM1_Init+0x150>)
 800214a:	f007 ff37 	bl	8009fbc <HAL_TIM_PWM_ConfigChannel>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8002154:	f000 fd66 	bl	8002c24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002158:	2300      	movs	r3, #0
 800215a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800215c:	2300      	movs	r3, #0
 800215e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002160:	2300      	movs	r3, #0
 8002162:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800216c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002170:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002176:	2300      	movs	r3, #0
 8002178:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800217a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800217e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002180:	2300      	movs	r3, #0
 8002182:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002184:	2300      	movs	r3, #0
 8002186:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002188:	1d3b      	adds	r3, r7, #4
 800218a:	4619      	mov	r1, r3
 800218c:	4807      	ldr	r0, [pc, #28]	; (80021ac <MX_TIM1_Init+0x150>)
 800218e:	f008 fd41 	bl	800ac14 <HAL_TIMEx_ConfigBreakDeadTime>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002198:	f000 fd44 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800219c:	4803      	ldr	r0, [pc, #12]	; (80021ac <MX_TIM1_Init+0x150>)
 800219e:	f001 fa3b 	bl	8003618 <HAL_TIM_MspPostInit>

}
 80021a2:	bf00      	nop
 80021a4:	3768      	adds	r7, #104	; 0x68
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20000814 	.word	0x20000814
 80021b0:	40010000 	.word	0x40010000

080021b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08e      	sub	sp, #56	; 0x38
 80021b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	605a      	str	r2, [r3, #4]
 80021c4:	609a      	str	r2, [r3, #8]
 80021c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021c8:	f107 031c 	add.w	r3, r7, #28
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021d4:	463b      	mov	r3, r7
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	609a      	str	r2, [r3, #8]
 80021de:	60da      	str	r2, [r3, #12]
 80021e0:	611a      	str	r2, [r3, #16]
 80021e2:	615a      	str	r2, [r3, #20]
 80021e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021e6:	4b2d      	ldr	r3, [pc, #180]	; (800229c <MX_TIM2_Init+0xe8>)
 80021e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80021ee:	4b2b      	ldr	r3, [pc, #172]	; (800229c <MX_TIM2_Init+0xe8>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f4:	4b29      	ldr	r3, [pc, #164]	; (800229c <MX_TIM2_Init+0xe8>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80021fa:	4b28      	ldr	r3, [pc, #160]	; (800229c <MX_TIM2_Init+0xe8>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002200:	4b26      	ldr	r3, [pc, #152]	; (800229c <MX_TIM2_Init+0xe8>)
 8002202:	2200      	movs	r2, #0
 8002204:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002206:	4b25      	ldr	r3, [pc, #148]	; (800229c <MX_TIM2_Init+0xe8>)
 8002208:	2200      	movs	r2, #0
 800220a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800220c:	4823      	ldr	r0, [pc, #140]	; (800229c <MX_TIM2_Init+0xe8>)
 800220e:	f007 fd35 	bl	8009c7c <HAL_TIM_Base_Init>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002218:	f000 fd04 	bl	8002c24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800221c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002220:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002222:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002226:	4619      	mov	r1, r3
 8002228:	481c      	ldr	r0, [pc, #112]	; (800229c <MX_TIM2_Init+0xe8>)
 800222a:	f007 ffdf 	bl	800a1ec <HAL_TIM_ConfigClockSource>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002234:	f000 fcf6 	bl	8002c24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002238:	4818      	ldr	r0, [pc, #96]	; (800229c <MX_TIM2_Init+0xe8>)
 800223a:	f007 fd75 	bl	8009d28 <HAL_TIM_PWM_Init>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002244:	f000 fcee 	bl	8002c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002248:	2300      	movs	r3, #0
 800224a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800224c:	2300      	movs	r3, #0
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002250:	f107 031c 	add.w	r3, r7, #28
 8002254:	4619      	mov	r1, r3
 8002256:	4811      	ldr	r0, [pc, #68]	; (800229c <MX_TIM2_Init+0xe8>)
 8002258:	f008 fc4e 	bl	800aaf8 <HAL_TIMEx_MasterConfigSynchronization>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002262:	f000 fcdf 	bl	8002c24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002266:	2360      	movs	r3, #96	; 0x60
 8002268:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800226a:	2300      	movs	r3, #0
 800226c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800226e:	2300      	movs	r3, #0
 8002270:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002276:	463b      	mov	r3, r7
 8002278:	2200      	movs	r2, #0
 800227a:	4619      	mov	r1, r3
 800227c:	4807      	ldr	r0, [pc, #28]	; (800229c <MX_TIM2_Init+0xe8>)
 800227e:	f007 fe9d 	bl	8009fbc <HAL_TIM_PWM_ConfigChannel>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002288:	f000 fccc 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800228c:	4803      	ldr	r0, [pc, #12]	; (800229c <MX_TIM2_Init+0xe8>)
 800228e:	f001 f9c3 	bl	8003618 <HAL_TIM_MspPostInit>

}
 8002292:	bf00      	nop
 8002294:	3738      	adds	r7, #56	; 0x38
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000854 	.word	0x20000854

080022a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08e      	sub	sp, #56	; 0x38
 80022a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	605a      	str	r2, [r3, #4]
 80022b0:	609a      	str	r2, [r3, #8]
 80022b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b4:	f107 031c 	add.w	r3, r7, #28
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022c0:	463b      	mov	r3, r7
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	605a      	str	r2, [r3, #4]
 80022c8:	609a      	str	r2, [r3, #8]
 80022ca:	60da      	str	r2, [r3, #12]
 80022cc:	611a      	str	r2, [r3, #16]
 80022ce:	615a      	str	r2, [r3, #20]
 80022d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022d2:	4b2c      	ldr	r3, [pc, #176]	; (8002384 <MX_TIM3_Init+0xe4>)
 80022d4:	4a2c      	ldr	r2, [pc, #176]	; (8002388 <MX_TIM3_Init+0xe8>)
 80022d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80022d8:	4b2a      	ldr	r3, [pc, #168]	; (8002384 <MX_TIM3_Init+0xe4>)
 80022da:	2200      	movs	r2, #0
 80022dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022de:	4b29      	ldr	r3, [pc, #164]	; (8002384 <MX_TIM3_Init+0xe4>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80022e4:	4b27      	ldr	r3, [pc, #156]	; (8002384 <MX_TIM3_Init+0xe4>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ea:	4b26      	ldr	r3, [pc, #152]	; (8002384 <MX_TIM3_Init+0xe4>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022f0:	4b24      	ldr	r3, [pc, #144]	; (8002384 <MX_TIM3_Init+0xe4>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022f6:	4823      	ldr	r0, [pc, #140]	; (8002384 <MX_TIM3_Init+0xe4>)
 80022f8:	f007 fcc0 	bl	8009c7c <HAL_TIM_Base_Init>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002302:	f000 fc8f 	bl	8002c24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002306:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800230a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800230c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002310:	4619      	mov	r1, r3
 8002312:	481c      	ldr	r0, [pc, #112]	; (8002384 <MX_TIM3_Init+0xe4>)
 8002314:	f007 ff6a 	bl	800a1ec <HAL_TIM_ConfigClockSource>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800231e:	f000 fc81 	bl	8002c24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002322:	4818      	ldr	r0, [pc, #96]	; (8002384 <MX_TIM3_Init+0xe4>)
 8002324:	f007 fd00 	bl	8009d28 <HAL_TIM_PWM_Init>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800232e:	f000 fc79 	bl	8002c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002332:	2300      	movs	r3, #0
 8002334:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002336:	2300      	movs	r3, #0
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800233a:	f107 031c 	add.w	r3, r7, #28
 800233e:	4619      	mov	r1, r3
 8002340:	4810      	ldr	r0, [pc, #64]	; (8002384 <MX_TIM3_Init+0xe4>)
 8002342:	f008 fbd9 	bl	800aaf8 <HAL_TIMEx_MasterConfigSynchronization>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800234c:	f000 fc6a 	bl	8002c24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002350:	2360      	movs	r3, #96	; 0x60
 8002352:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002354:	2300      	movs	r3, #0
 8002356:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002358:	2300      	movs	r3, #0
 800235a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800235c:	2300      	movs	r3, #0
 800235e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002360:	463b      	mov	r3, r7
 8002362:	2200      	movs	r2, #0
 8002364:	4619      	mov	r1, r3
 8002366:	4807      	ldr	r0, [pc, #28]	; (8002384 <MX_TIM3_Init+0xe4>)
 8002368:	f007 fe28 	bl	8009fbc <HAL_TIM_PWM_ConfigChannel>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002372:	f000 fc57 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002376:	4803      	ldr	r0, [pc, #12]	; (8002384 <MX_TIM3_Init+0xe4>)
 8002378:	f001 f94e 	bl	8003618 <HAL_TIM_MspPostInit>

}
 800237c:	bf00      	nop
 800237e:	3738      	adds	r7, #56	; 0x38
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	20000894 	.word	0x20000894
 8002388:	40000400 	.word	0x40000400

0800238c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08e      	sub	sp, #56	; 0x38
 8002390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002392:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	605a      	str	r2, [r3, #4]
 800239c:	609a      	str	r2, [r3, #8]
 800239e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023a0:	f107 031c 	add.w	r3, r7, #28
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023ac:	463b      	mov	r3, r7
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	605a      	str	r2, [r3, #4]
 80023b4:	609a      	str	r2, [r3, #8]
 80023b6:	60da      	str	r2, [r3, #12]
 80023b8:	611a      	str	r2, [r3, #16]
 80023ba:	615a      	str	r2, [r3, #20]
 80023bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80023be:	4b2c      	ldr	r3, [pc, #176]	; (8002470 <MX_TIM5_Init+0xe4>)
 80023c0:	4a2c      	ldr	r2, [pc, #176]	; (8002474 <MX_TIM5_Init+0xe8>)
 80023c2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80023c4:	4b2a      	ldr	r3, [pc, #168]	; (8002470 <MX_TIM5_Init+0xe4>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ca:	4b29      	ldr	r3, [pc, #164]	; (8002470 <MX_TIM5_Init+0xe4>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 80023d0:	4b27      	ldr	r3, [pc, #156]	; (8002470 <MX_TIM5_Init+0xe4>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023d6:	4b26      	ldr	r3, [pc, #152]	; (8002470 <MX_TIM5_Init+0xe4>)
 80023d8:	2200      	movs	r2, #0
 80023da:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023dc:	4b24      	ldr	r3, [pc, #144]	; (8002470 <MX_TIM5_Init+0xe4>)
 80023de:	2200      	movs	r2, #0
 80023e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80023e2:	4823      	ldr	r0, [pc, #140]	; (8002470 <MX_TIM5_Init+0xe4>)
 80023e4:	f007 fc4a 	bl	8009c7c <HAL_TIM_Base_Init>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80023ee:	f000 fc19 	bl	8002c24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023f6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80023f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023fc:	4619      	mov	r1, r3
 80023fe:	481c      	ldr	r0, [pc, #112]	; (8002470 <MX_TIM5_Init+0xe4>)
 8002400:	f007 fef4 	bl	800a1ec <HAL_TIM_ConfigClockSource>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800240a:	f000 fc0b 	bl	8002c24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800240e:	4818      	ldr	r0, [pc, #96]	; (8002470 <MX_TIM5_Init+0xe4>)
 8002410:	f007 fc8a 	bl	8009d28 <HAL_TIM_PWM_Init>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800241a:	f000 fc03 	bl	8002c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800241e:	2300      	movs	r3, #0
 8002420:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002422:	2300      	movs	r3, #0
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002426:	f107 031c 	add.w	r3, r7, #28
 800242a:	4619      	mov	r1, r3
 800242c:	4810      	ldr	r0, [pc, #64]	; (8002470 <MX_TIM5_Init+0xe4>)
 800242e:	f008 fb63 	bl	800aaf8 <HAL_TIMEx_MasterConfigSynchronization>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8002438:	f000 fbf4 	bl	8002c24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800243c:	2360      	movs	r3, #96	; 0x60
 800243e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002440:	2300      	movs	r3, #0
 8002442:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002444:	2300      	movs	r3, #0
 8002446:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002448:	2300      	movs	r3, #0
 800244a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800244c:	463b      	mov	r3, r7
 800244e:	220c      	movs	r2, #12
 8002450:	4619      	mov	r1, r3
 8002452:	4807      	ldr	r0, [pc, #28]	; (8002470 <MX_TIM5_Init+0xe4>)
 8002454:	f007 fdb2 	bl	8009fbc <HAL_TIM_PWM_ConfigChannel>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800245e:	f000 fbe1 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002462:	4803      	ldr	r0, [pc, #12]	; (8002470 <MX_TIM5_Init+0xe4>)
 8002464:	f001 f8d8 	bl	8003618 <HAL_TIM_MspPostInit>

}
 8002468:	bf00      	nop
 800246a:	3738      	adds	r7, #56	; 0x38
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	200008d4 	.word	0x200008d4
 8002474:	40000c00 	.word	0x40000c00

08002478 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b088      	sub	sp, #32
 800247c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800247e:	f107 0310 	add.w	r3, r7, #16
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	605a      	str	r2, [r3, #4]
 8002488:	609a      	str	r2, [r3, #8]
 800248a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800248c:	1d3b      	adds	r3, r7, #4
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	605a      	str	r2, [r3, #4]
 8002494:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002496:	4b1f      	ldr	r3, [pc, #124]	; (8002514 <MX_TIM8_Init+0x9c>)
 8002498:	4a1f      	ldr	r2, [pc, #124]	; (8002518 <MX_TIM8_Init+0xa0>)
 800249a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800249c:	4b1d      	ldr	r3, [pc, #116]	; (8002514 <MX_TIM8_Init+0x9c>)
 800249e:	2200      	movs	r2, #0
 80024a0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a2:	4b1c      	ldr	r3, [pc, #112]	; (8002514 <MX_TIM8_Init+0x9c>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 80024a8:	4b1a      	ldr	r3, [pc, #104]	; (8002514 <MX_TIM8_Init+0x9c>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ae:	4b19      	ldr	r3, [pc, #100]	; (8002514 <MX_TIM8_Init+0x9c>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80024b4:	4b17      	ldr	r3, [pc, #92]	; (8002514 <MX_TIM8_Init+0x9c>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024ba:	4b16      	ldr	r3, [pc, #88]	; (8002514 <MX_TIM8_Init+0x9c>)
 80024bc:	2200      	movs	r2, #0
 80024be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80024c0:	4814      	ldr	r0, [pc, #80]	; (8002514 <MX_TIM8_Init+0x9c>)
 80024c2:	f007 fbdb 	bl	8009c7c <HAL_TIM_Base_Init>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 80024cc:	f000 fbaa 	bl	8002c24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80024d6:	f107 0310 	add.w	r3, r7, #16
 80024da:	4619      	mov	r1, r3
 80024dc:	480d      	ldr	r0, [pc, #52]	; (8002514 <MX_TIM8_Init+0x9c>)
 80024de:	f007 fe85 	bl	800a1ec <HAL_TIM_ConfigClockSource>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 80024e8:	f000 fb9c 	bl	8002c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024ec:	2300      	movs	r3, #0
 80024ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80024f0:	2300      	movs	r3, #0
 80024f2:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024f4:	2300      	movs	r3, #0
 80024f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80024f8:	1d3b      	adds	r3, r7, #4
 80024fa:	4619      	mov	r1, r3
 80024fc:	4805      	ldr	r0, [pc, #20]	; (8002514 <MX_TIM8_Init+0x9c>)
 80024fe:	f008 fafb 	bl	800aaf8 <HAL_TIMEx_MasterConfigSynchronization>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8002508:	f000 fb8c 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800250c:	bf00      	nop
 800250e:	3720      	adds	r7, #32
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20000914 	.word	0x20000914
 8002518:	40010400 	.word	0x40010400

0800251c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b088      	sub	sp, #32
 8002520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002522:	1d3b      	adds	r3, r7, #4
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	611a      	str	r2, [r3, #16]
 8002530:	615a      	str	r2, [r3, #20]
 8002532:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002534:	4b19      	ldr	r3, [pc, #100]	; (800259c <MX_TIM12_Init+0x80>)
 8002536:	4a1a      	ldr	r2, [pc, #104]	; (80025a0 <MX_TIM12_Init+0x84>)
 8002538:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800253a:	4b18      	ldr	r3, [pc, #96]	; (800259c <MX_TIM12_Init+0x80>)
 800253c:	2200      	movs	r2, #0
 800253e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002540:	4b16      	ldr	r3, [pc, #88]	; (800259c <MX_TIM12_Init+0x80>)
 8002542:	2200      	movs	r2, #0
 8002544:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 8002546:	4b15      	ldr	r3, [pc, #84]	; (800259c <MX_TIM12_Init+0x80>)
 8002548:	2200      	movs	r2, #0
 800254a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800254c:	4b13      	ldr	r3, [pc, #76]	; (800259c <MX_TIM12_Init+0x80>)
 800254e:	2200      	movs	r2, #0
 8002550:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002552:	4b12      	ldr	r3, [pc, #72]	; (800259c <MX_TIM12_Init+0x80>)
 8002554:	2200      	movs	r2, #0
 8002556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002558:	4810      	ldr	r0, [pc, #64]	; (800259c <MX_TIM12_Init+0x80>)
 800255a:	f007 fbe5 	bl	8009d28 <HAL_TIM_PWM_Init>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8002564:	f000 fb5e 	bl	8002c24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002568:	2360      	movs	r3, #96	; 0x60
 800256a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800256c:	2300      	movs	r3, #0
 800256e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002570:	2300      	movs	r3, #0
 8002572:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002578:	1d3b      	adds	r3, r7, #4
 800257a:	2200      	movs	r2, #0
 800257c:	4619      	mov	r1, r3
 800257e:	4807      	ldr	r0, [pc, #28]	; (800259c <MX_TIM12_Init+0x80>)
 8002580:	f007 fd1c 	bl	8009fbc <HAL_TIM_PWM_ConfigChannel>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 800258a:	f000 fb4b 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800258e:	4803      	ldr	r0, [pc, #12]	; (800259c <MX_TIM12_Init+0x80>)
 8002590:	f001 f842 	bl	8003618 <HAL_TIM_MspPostInit>

}
 8002594:	bf00      	nop
 8002596:	3720      	adds	r7, #32
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20000954 	.word	0x20000954
 80025a0:	40001800 	.word	0x40001800

080025a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025a8:	4b14      	ldr	r3, [pc, #80]	; (80025fc <MX_USART1_UART_Init+0x58>)
 80025aa:	4a15      	ldr	r2, [pc, #84]	; (8002600 <MX_USART1_UART_Init+0x5c>)
 80025ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80025ae:	4b13      	ldr	r3, [pc, #76]	; (80025fc <MX_USART1_UART_Init+0x58>)
 80025b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025b6:	4b11      	ldr	r3, [pc, #68]	; (80025fc <MX_USART1_UART_Init+0x58>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025bc:	4b0f      	ldr	r3, [pc, #60]	; (80025fc <MX_USART1_UART_Init+0x58>)
 80025be:	2200      	movs	r2, #0
 80025c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025c2:	4b0e      	ldr	r3, [pc, #56]	; (80025fc <MX_USART1_UART_Init+0x58>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025c8:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <MX_USART1_UART_Init+0x58>)
 80025ca:	220c      	movs	r2, #12
 80025cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ce:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <MX_USART1_UART_Init+0x58>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025d4:	4b09      	ldr	r3, [pc, #36]	; (80025fc <MX_USART1_UART_Init+0x58>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025da:	4b08      	ldr	r3, [pc, #32]	; (80025fc <MX_USART1_UART_Init+0x58>)
 80025dc:	2200      	movs	r2, #0
 80025de:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025e0:	4b06      	ldr	r3, [pc, #24]	; (80025fc <MX_USART1_UART_Init+0x58>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025e6:	4805      	ldr	r0, [pc, #20]	; (80025fc <MX_USART1_UART_Init+0x58>)
 80025e8:	f008 fbb0 	bl	800ad4c <HAL_UART_Init>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80025f2:	f000 fb17 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000994 	.word	0x20000994
 8002600:	40011000 	.word	0x40011000

08002604 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002608:	4b14      	ldr	r3, [pc, #80]	; (800265c <MX_USART6_UART_Init+0x58>)
 800260a:	4a15      	ldr	r2, [pc, #84]	; (8002660 <MX_USART6_UART_Init+0x5c>)
 800260c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800260e:	4b13      	ldr	r3, [pc, #76]	; (800265c <MX_USART6_UART_Init+0x58>)
 8002610:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002614:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002616:	4b11      	ldr	r3, [pc, #68]	; (800265c <MX_USART6_UART_Init+0x58>)
 8002618:	2200      	movs	r2, #0
 800261a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800261c:	4b0f      	ldr	r3, [pc, #60]	; (800265c <MX_USART6_UART_Init+0x58>)
 800261e:	2200      	movs	r2, #0
 8002620:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002622:	4b0e      	ldr	r3, [pc, #56]	; (800265c <MX_USART6_UART_Init+0x58>)
 8002624:	2200      	movs	r2, #0
 8002626:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002628:	4b0c      	ldr	r3, [pc, #48]	; (800265c <MX_USART6_UART_Init+0x58>)
 800262a:	220c      	movs	r2, #12
 800262c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800262e:	4b0b      	ldr	r3, [pc, #44]	; (800265c <MX_USART6_UART_Init+0x58>)
 8002630:	2200      	movs	r2, #0
 8002632:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002634:	4b09      	ldr	r3, [pc, #36]	; (800265c <MX_USART6_UART_Init+0x58>)
 8002636:	2200      	movs	r2, #0
 8002638:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800263a:	4b08      	ldr	r3, [pc, #32]	; (800265c <MX_USART6_UART_Init+0x58>)
 800263c:	2200      	movs	r2, #0
 800263e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002640:	4b06      	ldr	r3, [pc, #24]	; (800265c <MX_USART6_UART_Init+0x58>)
 8002642:	2200      	movs	r2, #0
 8002644:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002646:	4805      	ldr	r0, [pc, #20]	; (800265c <MX_USART6_UART_Init+0x58>)
 8002648:	f008 fb80 	bl	800ad4c <HAL_UART_Init>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002652:	f000 fae7 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000a14 	.word	0x20000a14
 8002660:	40011400 	.word	0x40011400

08002664 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b088      	sub	sp, #32
 8002668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800266a:	1d3b      	adds	r3, r7, #4
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	611a      	str	r2, [r3, #16]
 8002678:	615a      	str	r2, [r3, #20]
 800267a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800267c:	4b4c      	ldr	r3, [pc, #304]	; (80027b0 <MX_FMC_Init+0x14c>)
 800267e:	4a4d      	ldr	r2, [pc, #308]	; (80027b4 <MX_FMC_Init+0x150>)
 8002680:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002682:	4b4b      	ldr	r3, [pc, #300]	; (80027b0 <MX_FMC_Init+0x14c>)
 8002684:	2200      	movs	r2, #0
 8002686:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002688:	4b49      	ldr	r3, [pc, #292]	; (80027b0 <MX_FMC_Init+0x14c>)
 800268a:	2200      	movs	r2, #0
 800268c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800268e:	4b48      	ldr	r3, [pc, #288]	; (80027b0 <MX_FMC_Init+0x14c>)
 8002690:	2204      	movs	r2, #4
 8002692:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002694:	4b46      	ldr	r3, [pc, #280]	; (80027b0 <MX_FMC_Init+0x14c>)
 8002696:	2210      	movs	r2, #16
 8002698:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800269a:	4b45      	ldr	r3, [pc, #276]	; (80027b0 <MX_FMC_Init+0x14c>)
 800269c:	2240      	movs	r2, #64	; 0x40
 800269e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80026a0:	4b43      	ldr	r3, [pc, #268]	; (80027b0 <MX_FMC_Init+0x14c>)
 80026a2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80026a6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80026a8:	4b41      	ldr	r3, [pc, #260]	; (80027b0 <MX_FMC_Init+0x14c>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80026ae:	4b40      	ldr	r3, [pc, #256]	; (80027b0 <MX_FMC_Init+0x14c>)
 80026b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026b4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80026b6:	4b3e      	ldr	r3, [pc, #248]	; (80027b0 <MX_FMC_Init+0x14c>)
 80026b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026bc:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80026be:	4b3c      	ldr	r3, [pc, #240]	; (80027b0 <MX_FMC_Init+0x14c>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80026c4:	2302      	movs	r3, #2
 80026c6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80026c8:	2307      	movs	r3, #7
 80026ca:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80026cc:	2304      	movs	r3, #4
 80026ce:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80026d0:	2307      	movs	r3, #7
 80026d2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80026d4:	2303      	movs	r3, #3
 80026d6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80026d8:	2302      	movs	r3, #2
 80026da:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80026dc:	2302      	movs	r3, #2
 80026de:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80026e0:	1d3b      	adds	r3, r7, #4
 80026e2:	4619      	mov	r1, r3
 80026e4:	4832      	ldr	r0, [pc, #200]	; (80027b0 <MX_FMC_Init+0x14c>)
 80026e6:	f007 f95b 	bl	80099a0 <HAL_SDRAM_Init>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80026f0:	f000 fa98 	bl	8002c24 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  __IO uint32_t tmpmrd = 0;
 80026f4:	2300      	movs	r3, #0
 80026f6:	603b      	str	r3, [r7, #0]

    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80026f8:	4b2f      	ldr	r3, [pc, #188]	; (80027b8 <MX_FMC_Init+0x154>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 80026fe:	4b2e      	ldr	r3, [pc, #184]	; (80027b8 <MX_FMC_Init+0x154>)
 8002700:	2210      	movs	r2, #16
 8002702:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8002704:	4b2c      	ldr	r3, [pc, #176]	; (80027b8 <MX_FMC_Init+0x154>)
 8002706:	2201      	movs	r2, #1
 8002708:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 800270a:	4b2b      	ldr	r3, [pc, #172]	; (80027b8 <MX_FMC_Init+0x154>)
 800270c:	2200      	movs	r2, #0
 800270e:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002710:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002714:	4928      	ldr	r1, [pc, #160]	; (80027b8 <MX_FMC_Init+0x154>)
 8002716:	4826      	ldr	r0, [pc, #152]	; (80027b0 <MX_FMC_Init+0x14c>)
 8002718:	f007 f976 	bl	8009a08 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 800271c:	2001      	movs	r0, #1
 800271e:	f001 fba3 	bl	8003e68 <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002722:	4b25      	ldr	r3, [pc, #148]	; (80027b8 <MX_FMC_Init+0x154>)
 8002724:	2202      	movs	r2, #2
 8002726:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002728:	4b23      	ldr	r3, [pc, #140]	; (80027b8 <MX_FMC_Init+0x154>)
 800272a:	2210      	movs	r2, #16
 800272c:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 800272e:	4b22      	ldr	r3, [pc, #136]	; (80027b8 <MX_FMC_Init+0x154>)
 8002730:	2201      	movs	r2, #1
 8002732:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8002734:	4b20      	ldr	r3, [pc, #128]	; (80027b8 <MX_FMC_Init+0x154>)
 8002736:	2200      	movs	r2, #0
 8002738:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800273a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800273e:	491e      	ldr	r1, [pc, #120]	; (80027b8 <MX_FMC_Init+0x154>)
 8002740:	481b      	ldr	r0, [pc, #108]	; (80027b0 <MX_FMC_Init+0x14c>)
 8002742:	f007 f961 	bl	8009a08 <HAL_SDRAM_SendCommand>

    /* Step 4: Configure an Auto Refresh command */
    Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002746:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <MX_FMC_Init+0x154>)
 8002748:	2203      	movs	r2, #3
 800274a:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800274c:	4b1a      	ldr	r3, [pc, #104]	; (80027b8 <MX_FMC_Init+0x154>)
 800274e:	2210      	movs	r2, #16
 8002750:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 8;
 8002752:	4b19      	ldr	r3, [pc, #100]	; (80027b8 <MX_FMC_Init+0x154>)
 8002754:	2208      	movs	r2, #8
 8002756:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8002758:	4b17      	ldr	r3, [pc, #92]	; (80027b8 <MX_FMC_Init+0x154>)
 800275a:	2200      	movs	r2, #0
 800275c:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800275e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002762:	4915      	ldr	r1, [pc, #84]	; (80027b8 <MX_FMC_Init+0x154>)
 8002764:	4812      	ldr	r0, [pc, #72]	; (80027b0 <MX_FMC_Init+0x14c>)
 8002766:	f007 f94f 	bl	8009a08 <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 800276a:	f44f 730c 	mov.w	r3, #560	; 0x230
 800276e:	603b      	str	r3, [r7, #0]
             SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
             SDRAM_MODEREG_CAS_LATENCY_3            | \
             SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
             SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002770:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <MX_FMC_Init+0x154>)
 8002772:	2204      	movs	r2, #4
 8002774:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002776:	4b10      	ldr	r3, [pc, #64]	; (80027b8 <MX_FMC_Init+0x154>)
 8002778:	2210      	movs	r2, #16
 800277a:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 800277c:	4b0e      	ldr	r3, [pc, #56]	; (80027b8 <MX_FMC_Init+0x154>)
 800277e:	2201      	movs	r2, #1
 8002780:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	4a0c      	ldr	r2, [pc, #48]	; (80027b8 <MX_FMC_Init+0x154>)
 8002786:	60d3      	str	r3, [r2, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002788:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800278c:	490a      	ldr	r1, [pc, #40]	; (80027b8 <MX_FMC_Init+0x154>)
 800278e:	4808      	ldr	r0, [pc, #32]	; (80027b0 <MX_FMC_Init+0x14c>)
 8002790:	f007 f93a 	bl	8009a08 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8002794:	f240 712b 	movw	r1, #1835	; 0x72b
 8002798:	4805      	ldr	r0, [pc, #20]	; (80027b0 <MX_FMC_Init+0x14c>)
 800279a:	f007 f960 	bl	8009a5e <HAL_SDRAM_ProgramRefreshRate>

    //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
    FMC_Bank1->BTCR[0] = 0x000030D2;
 800279e:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80027a2:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80027a6:	601a      	str	r2, [r3, #0]
  /* USER CODE END FMC_Init 2 */
}
 80027a8:	bf00      	nop
 80027aa:	3720      	adds	r7, #32
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	20000a94 	.word	0x20000a94
 80027b4:	a0000140 	.word	0xa0000140
 80027b8:	20000ad0 	.word	0x20000ad0

080027bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b090      	sub	sp, #64	; 0x40
 80027c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	605a      	str	r2, [r3, #4]
 80027cc:	609a      	str	r2, [r3, #8]
 80027ce:	60da      	str	r2, [r3, #12]
 80027d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80027d2:	4baf      	ldr	r3, [pc, #700]	; (8002a90 <MX_GPIO_Init+0x2d4>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	4aae      	ldr	r2, [pc, #696]	; (8002a90 <MX_GPIO_Init+0x2d4>)
 80027d8:	f043 0310 	orr.w	r3, r3, #16
 80027dc:	6313      	str	r3, [r2, #48]	; 0x30
 80027de:	4bac      	ldr	r3, [pc, #688]	; (8002a90 <MX_GPIO_Init+0x2d4>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	f003 0310 	and.w	r3, r3, #16
 80027e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80027e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80027ea:	4ba9      	ldr	r3, [pc, #676]	; (8002a90 <MX_GPIO_Init+0x2d4>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	4aa8      	ldr	r2, [pc, #672]	; (8002a90 <MX_GPIO_Init+0x2d4>)
 80027f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027f4:	6313      	str	r3, [r2, #48]	; 0x30
 80027f6:	4ba6      	ldr	r3, [pc, #664]	; (8002a90 <MX_GPIO_Init+0x2d4>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002802:	4ba3      	ldr	r3, [pc, #652]	; (8002a90 <MX_GPIO_Init+0x2d4>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	4aa2      	ldr	r2, [pc, #648]	; (8002a90 <MX_GPIO_Init+0x2d4>)
 8002808:	f043 0302 	orr.w	r3, r3, #2
 800280c:	6313      	str	r3, [r2, #48]	; 0x30
 800280e:	4ba0      	ldr	r3, [pc, #640]	; (8002a90 <MX_GPIO_Init+0x2d4>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	623b      	str	r3, [r7, #32]
 8002818:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800281a:	4b9d      	ldr	r3, [pc, #628]	; (8002a90 <MX_GPIO_Init+0x2d4>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	4a9c      	ldr	r2, [pc, #624]	; (8002a90 <MX_GPIO_Init+0x2d4>)
 8002820:	f043 0308 	orr.w	r3, r3, #8
 8002824:	6313      	str	r3, [r2, #48]	; 0x30
 8002826:	4b9a      	ldr	r3, [pc, #616]	; (8002a90 <MX_GPIO_Init+0x2d4>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	61fb      	str	r3, [r7, #28]
 8002830:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002832:	4b97      	ldr	r3, [pc, #604]	; (8002a90 <MX_GPIO_Init+0x2d4>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	4a96      	ldr	r2, [pc, #600]	; (8002a90 <MX_GPIO_Init+0x2d4>)
 8002838:	f043 0304 	orr.w	r3, r3, #4
 800283c:	6313      	str	r3, [r2, #48]	; 0x30
 800283e:	4b94      	ldr	r3, [pc, #592]	; (8002a90 <MX_GPIO_Init+0x2d4>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	f003 0304 	and.w	r3, r3, #4
 8002846:	61bb      	str	r3, [r7, #24]
 8002848:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800284a:	4b91      	ldr	r3, [pc, #580]	; (8002a90 <MX_GPIO_Init+0x2d4>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	4a90      	ldr	r2, [pc, #576]	; (8002a90 <MX_GPIO_Init+0x2d4>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	6313      	str	r3, [r2, #48]	; 0x30
 8002856:	4b8e      	ldr	r3, [pc, #568]	; (8002a90 <MX_GPIO_Init+0x2d4>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002862:	4b8b      	ldr	r3, [pc, #556]	; (8002a90 <MX_GPIO_Init+0x2d4>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	4a8a      	ldr	r2, [pc, #552]	; (8002a90 <MX_GPIO_Init+0x2d4>)
 8002868:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800286c:	6313      	str	r3, [r2, #48]	; 0x30
 800286e:	4b88      	ldr	r3, [pc, #544]	; (8002a90 <MX_GPIO_Init+0x2d4>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002876:	613b      	str	r3, [r7, #16]
 8002878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800287a:	4b85      	ldr	r3, [pc, #532]	; (8002a90 <MX_GPIO_Init+0x2d4>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	4a84      	ldr	r2, [pc, #528]	; (8002a90 <MX_GPIO_Init+0x2d4>)
 8002880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002884:	6313      	str	r3, [r2, #48]	; 0x30
 8002886:	4b82      	ldr	r3, [pc, #520]	; (8002a90 <MX_GPIO_Init+0x2d4>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002892:	4b7f      	ldr	r3, [pc, #508]	; (8002a90 <MX_GPIO_Init+0x2d4>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	4a7e      	ldr	r2, [pc, #504]	; (8002a90 <MX_GPIO_Init+0x2d4>)
 8002898:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800289c:	6313      	str	r3, [r2, #48]	; 0x30
 800289e:	4b7c      	ldr	r3, [pc, #496]	; (8002a90 <MX_GPIO_Init+0x2d4>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a6:	60bb      	str	r3, [r7, #8]
 80028a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80028aa:	4b79      	ldr	r3, [pc, #484]	; (8002a90 <MX_GPIO_Init+0x2d4>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	4a78      	ldr	r2, [pc, #480]	; (8002a90 <MX_GPIO_Init+0x2d4>)
 80028b0:	f043 0320 	orr.w	r3, r3, #32
 80028b4:	6313      	str	r3, [r2, #48]	; 0x30
 80028b6:	4b76      	ldr	r3, [pc, #472]	; (8002a90 <MX_GPIO_Init+0x2d4>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	f003 0320 	and.w	r3, r3, #32
 80028be:	607b      	str	r3, [r7, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028c2:	4b73      	ldr	r3, [pc, #460]	; (8002a90 <MX_GPIO_Init+0x2d4>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	4a72      	ldr	r2, [pc, #456]	; (8002a90 <MX_GPIO_Init+0x2d4>)
 80028c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028cc:	6313      	str	r3, [r2, #48]	; 0x30
 80028ce:	4b70      	ldr	r3, [pc, #448]	; (8002a90 <MX_GPIO_Init+0x2d4>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d6:	603b      	str	r3, [r7, #0]
 80028d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80028da:	2201      	movs	r2, #1
 80028dc:	2120      	movs	r1, #32
 80028de:	486d      	ldr	r0, [pc, #436]	; (8002a94 <MX_GPIO_Init+0x2d8>)
 80028e0:	f003 fbc4 	bl	800606c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80028e4:	2200      	movs	r2, #0
 80028e6:	210c      	movs	r1, #12
 80028e8:	486b      	ldr	r0, [pc, #428]	; (8002a98 <MX_GPIO_Init+0x2dc>)
 80028ea:	f003 fbbf 	bl	800606c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80028ee:	2201      	movs	r2, #1
 80028f0:	2108      	movs	r1, #8
 80028f2:	486a      	ldr	r0, [pc, #424]	; (8002a9c <MX_GPIO_Init+0x2e0>)
 80028f4:	f003 fbba 	bl	800606c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80028f8:	2201      	movs	r2, #1
 80028fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028fe:	4866      	ldr	r0, [pc, #408]	; (8002a98 <MX_GPIO_Init+0x2dc>)
 8002900:	f003 fbb4 	bl	800606c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002904:	2200      	movs	r2, #0
 8002906:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800290a:	4865      	ldr	r0, [pc, #404]	; (8002aa0 <MX_GPIO_Init+0x2e4>)
 800290c:	f003 fbae 	bl	800606c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002910:	2200      	movs	r2, #0
 8002912:	21c8      	movs	r1, #200	; 0xc8
 8002914:	4863      	ldr	r0, [pc, #396]	; (8002aa4 <MX_GPIO_Init+0x2e8>)
 8002916:	f003 fba9 	bl	800606c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800291a:	2308      	movs	r3, #8
 800291c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800291e:	2300      	movs	r3, #0
 8002920:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002922:	2300      	movs	r3, #0
 8002924:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002926:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800292a:	4619      	mov	r1, r3
 800292c:	485e      	ldr	r0, [pc, #376]	; (8002aa8 <MX_GPIO_Init+0x2ec>)
 800292e:	f003 f9d9 	bl	8005ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8002932:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002936:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002938:	2302      	movs	r3, #2
 800293a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293c:	2300      	movs	r3, #0
 800293e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002940:	2303      	movs	r3, #3
 8002942:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002944:	230b      	movs	r3, #11
 8002946:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002948:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800294c:	4619      	mov	r1, r3
 800294e:	4855      	ldr	r0, [pc, #340]	; (8002aa4 <MX_GPIO_Init+0x2e8>)
 8002950:	f003 f9c8 	bl	8005ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8002954:	f643 4323 	movw	r3, #15395	; 0x3c23
 8002958:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295a:	2302      	movs	r3, #2
 800295c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295e:	2300      	movs	r3, #0
 8002960:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002962:	2303      	movs	r3, #3
 8002964:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002966:	230a      	movs	r3, #10
 8002968:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800296a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800296e:	4619      	mov	r1, r3
 8002970:	484e      	ldr	r0, [pc, #312]	; (8002aac <MX_GPIO_Init+0x2f0>)
 8002972:	f003 f9b7 	bl	8005ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002976:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800297a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800297c:	2300      	movs	r3, #0
 800297e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002980:	2300      	movs	r3, #0
 8002982:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002984:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002988:	4619      	mov	r1, r3
 800298a:	4849      	ldr	r0, [pc, #292]	; (8002ab0 <MX_GPIO_Init+0x2f4>)
 800298c:	f003 f9aa 	bl	8005ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002990:	2340      	movs	r3, #64	; 0x40
 8002992:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002994:	4b47      	ldr	r3, [pc, #284]	; (8002ab4 <MX_GPIO_Init+0x2f8>)
 8002996:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	2300      	movs	r3, #0
 800299a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800299c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029a0:	4619      	mov	r1, r3
 80029a2:	483c      	ldr	r0, [pc, #240]	; (8002a94 <MX_GPIO_Init+0x2d8>)
 80029a4:	f003 f99e 	bl	8005ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80029a8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80029ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ae:	2302      	movs	r3, #2
 80029b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b2:	2300      	movs	r3, #0
 80029b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b6:	2303      	movs	r3, #3
 80029b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80029ba:	230a      	movs	r3, #10
 80029bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029c2:	4619      	mov	r1, r3
 80029c4:	483c      	ldr	r0, [pc, #240]	; (8002ab8 <MX_GPIO_Init+0x2fc>)
 80029c6:	f003 f98d 	bl	8005ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80029ca:	2320      	movs	r3, #32
 80029cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ce:	2301      	movs	r3, #1
 80029d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d6:	2300      	movs	r3, #0
 80029d8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80029da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029de:	4619      	mov	r1, r3
 80029e0:	482c      	ldr	r0, [pc, #176]	; (8002a94 <MX_GPIO_Init+0x2d8>)
 80029e2:	f003 f97f 	bl	8005ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80029e6:	f241 030c 	movw	r3, #4108	; 0x100c
 80029ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ec:	2301      	movs	r3, #1
 80029ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f4:	2300      	movs	r3, #0
 80029f6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80029f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029fc:	4619      	mov	r1, r3
 80029fe:	4826      	ldr	r0, [pc, #152]	; (8002a98 <MX_GPIO_Init+0x2dc>)
 8002a00:	f003 f970 	bl	8005ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002a04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002a12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a16:	4619      	mov	r1, r3
 8002a18:	4828      	ldr	r0, [pc, #160]	; (8002abc <MX_GPIO_Init+0x300>)
 8002a1a:	f003 f963 	bl	8005ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002a1e:	2308      	movs	r3, #8
 8002a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a22:	2301      	movs	r3, #1
 8002a24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002a2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a32:	4619      	mov	r1, r3
 8002a34:	4819      	ldr	r0, [pc, #100]	; (8002a9c <MX_GPIO_Init+0x2e0>)
 8002a36:	f003 f955 	bl	8005ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002a3a:	2310      	movs	r3, #16
 8002a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002a46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4811      	ldr	r0, [pc, #68]	; (8002a94 <MX_GPIO_Init+0x2d8>)
 8002a4e:	f003 f949 	bl	8005ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002a52:	f248 0304 	movw	r3, #32772	; 0x8004
 8002a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002a60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a64:	4619      	mov	r1, r3
 8002a66:	480e      	ldr	r0, [pc, #56]	; (8002aa0 <MX_GPIO_Init+0x2e4>)
 8002a68:	f003 f93c 	bl	8005ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002a6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a72:	2301      	movs	r3, #1
 8002a74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002a7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a82:	4619      	mov	r1, r3
 8002a84:	4806      	ldr	r0, [pc, #24]	; (8002aa0 <MX_GPIO_Init+0x2e4>)
 8002a86:	f003 f92d 	bl	8005ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002a8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a8e:	e017      	b.n	8002ac0 <MX_GPIO_Init+0x304>
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40020c00 	.word	0x40020c00
 8002a98:	40022000 	.word	0x40022000
 8002a9c:	40022800 	.word	0x40022800
 8002aa0:	40021c00 	.word	0x40021c00
 8002aa4:	40021800 	.word	0x40021800
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	40020400 	.word	0x40020400
 8002ab0:	40022400 	.word	0x40022400
 8002ab4:	10120000 	.word	0x10120000
 8002ab8:	40020000 	.word	0x40020000
 8002abc:	40020800 	.word	0x40020800
 8002ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002ac2:	4b44      	ldr	r3, [pc, #272]	; (8002bd4 <MX_GPIO_Init+0x418>)
 8002ac4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002aca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4841      	ldr	r0, [pc, #260]	; (8002bd8 <MX_GPIO_Init+0x41c>)
 8002ad2:	f003 f907 	bl	8005ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002ad6:	2310      	movs	r3, #16
 8002ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ada:	2302      	movs	r3, #2
 8002adc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002ae6:	230a      	movs	r3, #10
 8002ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002aea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002aee:	4619      	mov	r1, r3
 8002af0:	483a      	ldr	r0, [pc, #232]	; (8002bdc <MX_GPIO_Init+0x420>)
 8002af2:	f003 f8f7 	bl	8005ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002af6:	23c8      	movs	r3, #200	; 0xc8
 8002af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002afa:	2301      	movs	r3, #1
 8002afc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b02:	2300      	movs	r3, #0
 8002b04:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4834      	ldr	r0, [pc, #208]	; (8002be0 <MX_GPIO_Init+0x424>)
 8002b0e:	f003 f8e9 	bl	8005ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002b12:	2305      	movs	r3, #5
 8002b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b16:	2302      	movs	r3, #2
 8002b18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002b22:	230a      	movs	r3, #10
 8002b24:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	482d      	ldr	r0, [pc, #180]	; (8002be4 <MX_GPIO_Init+0x428>)
 8002b2e:	f003 f8d9 	bl	8005ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002b32:	2332      	movs	r3, #50	; 0x32
 8002b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b36:	2302      	movs	r3, #2
 8002b38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002b42:	230b      	movs	r3, #11
 8002b44:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	4825      	ldr	r0, [pc, #148]	; (8002be4 <MX_GPIO_Init+0x428>)
 8002b4e:	f003 f8c9 	bl	8005ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002b52:	2304      	movs	r3, #4
 8002b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b56:	2300      	movs	r3, #0
 8002b58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002b5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b62:	4619      	mov	r1, r3
 8002b64:	481e      	ldr	r0, [pc, #120]	; (8002be0 <MX_GPIO_Init+0x424>)
 8002b66:	f003 f8bd 	bl	8005ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002b6a:	2386      	movs	r3, #134	; 0x86
 8002b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b76:	2303      	movs	r3, #3
 8002b78:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002b7a:	230b      	movs	r3, #11
 8002b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b82:	4619      	mov	r1, r3
 8002b84:	4818      	ldr	r0, [pc, #96]	; (8002be8 <MX_GPIO_Init+0x42c>)
 8002b86:	f003 f8ad 	bl	8005ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002b8a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b90:	2312      	movs	r3, #18
 8002b92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b94:	2301      	movs	r3, #1
 8002b96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b9c:	2304      	movs	r3, #4
 8002b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002ba0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	480d      	ldr	r0, [pc, #52]	; (8002bdc <MX_GPIO_Init+0x420>)
 8002ba8:	f003 f89c 	bl	8005ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002bac:	2328      	movs	r3, #40	; 0x28
 8002bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002bbc:	230a      	movs	r3, #10
 8002bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4808      	ldr	r0, [pc, #32]	; (8002be8 <MX_GPIO_Init+0x42c>)
 8002bc8:	f003 f88c 	bl	8005ce4 <HAL_GPIO_Init>

}
 8002bcc:	bf00      	nop
 8002bce:	3740      	adds	r7, #64	; 0x40
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	10120000 	.word	0x10120000
 8002bd8:	40022000 	.word	0x40022000
 8002bdc:	40021c00 	.word	0x40021c00
 8002be0:	40021800 	.word	0x40021800
 8002be4:	40020800 	.word	0x40020800
 8002be8:	40020000 	.word	0x40020000

08002bec <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  MX_TouchGFX_Process();
 8002bf4:	f00c fc26 	bl	800f444 <MX_TouchGFX_Process>
  /* Infinite loop */

  for(;;)
  {
    osDelay(1);
 8002bf8:	2001      	movs	r0, #1
 8002bfa:	f009 feaf 	bl	800c95c <osDelay>
 8002bfe:	e7fb      	b.n	8002bf8 <StartDefaultTask+0xc>

08002c00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a04      	ldr	r2, [pc, #16]	; (8002c20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d101      	bne.n	8002c16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002c12:	f001 f909 	bl	8003e28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002c16:	bf00      	nop
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40001000 	.word	0x40001000

08002c24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002c28:	bf00      	nop
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
	...

08002c34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c3a:	4b11      	ldr	r3, [pc, #68]	; (8002c80 <HAL_MspInit+0x4c>)
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	4a10      	ldr	r2, [pc, #64]	; (8002c80 <HAL_MspInit+0x4c>)
 8002c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c44:	6413      	str	r3, [r2, #64]	; 0x40
 8002c46:	4b0e      	ldr	r3, [pc, #56]	; (8002c80 <HAL_MspInit+0x4c>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4e:	607b      	str	r3, [r7, #4]
 8002c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c52:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <HAL_MspInit+0x4c>)
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	4a0a      	ldr	r2, [pc, #40]	; (8002c80 <HAL_MspInit+0x4c>)
 8002c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c5e:	4b08      	ldr	r3, [pc, #32]	; (8002c80 <HAL_MspInit+0x4c>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c66:	603b      	str	r3, [r7, #0]
 8002c68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	210f      	movs	r1, #15
 8002c6e:	f06f 0001 	mvn.w	r0, #1
 8002c72:	f002 fa09 	bl	8005088 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40023800 	.word	0x40023800

08002c84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b08a      	sub	sp, #40	; 0x28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c8c:	f107 0314 	add.w	r3, r7, #20
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	605a      	str	r2, [r3, #4]
 8002c96:	609a      	str	r2, [r3, #8]
 8002c98:	60da      	str	r2, [r3, #12]
 8002c9a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a21      	ldr	r2, [pc, #132]	; (8002d28 <HAL_ADC_MspInit+0xa4>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d13c      	bne.n	8002d20 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002ca6:	4b21      	ldr	r3, [pc, #132]	; (8002d2c <HAL_ADC_MspInit+0xa8>)
 8002ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002caa:	4a20      	ldr	r2, [pc, #128]	; (8002d2c <HAL_ADC_MspInit+0xa8>)
 8002cac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8002cb2:	4b1e      	ldr	r3, [pc, #120]	; (8002d2c <HAL_ADC_MspInit+0xa8>)
 8002cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cba:	613b      	str	r3, [r7, #16]
 8002cbc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cbe:	4b1b      	ldr	r3, [pc, #108]	; (8002d2c <HAL_ADC_MspInit+0xa8>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	4a1a      	ldr	r2, [pc, #104]	; (8002d2c <HAL_ADC_MspInit+0xa8>)
 8002cc4:	f043 0320 	orr.w	r3, r3, #32
 8002cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cca:	4b18      	ldr	r3, [pc, #96]	; (8002d2c <HAL_ADC_MspInit+0xa8>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	f003 0320 	and.w	r3, r3, #32
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd6:	4b15      	ldr	r3, [pc, #84]	; (8002d2c <HAL_ADC_MspInit+0xa8>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	4a14      	ldr	r2, [pc, #80]	; (8002d2c <HAL_ADC_MspInit+0xa8>)
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce2:	4b12      	ldr	r3, [pc, #72]	; (8002d2c <HAL_ADC_MspInit+0xa8>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	60bb      	str	r3, [r7, #8]
 8002cec:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 8002cee:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002cf2:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002cfc:	f107 0314 	add.w	r3, r7, #20
 8002d00:	4619      	mov	r1, r3
 8002d02:	480b      	ldr	r0, [pc, #44]	; (8002d30 <HAL_ADC_MspInit+0xac>)
 8002d04:	f002 ffee 	bl	8005ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d10:	2300      	movs	r3, #0
 8002d12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002d14:	f107 0314 	add.w	r3, r7, #20
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4806      	ldr	r0, [pc, #24]	; (8002d34 <HAL_ADC_MspInit+0xb0>)
 8002d1c:	f002 ffe2 	bl	8005ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002d20:	bf00      	nop
 8002d22:	3728      	adds	r7, #40	; 0x28
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40012200 	.word	0x40012200
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	40021400 	.word	0x40021400
 8002d34:	40020000 	.word	0x40020000

08002d38 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08a      	sub	sp, #40	; 0x28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d40:	f107 0314 	add.w	r3, r7, #20
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	605a      	str	r2, [r3, #4]
 8002d4a:	609a      	str	r2, [r3, #8]
 8002d4c:	60da      	str	r2, [r3, #12]
 8002d4e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a1b      	ldr	r2, [pc, #108]	; (8002dc4 <HAL_CAN_MspInit+0x8c>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d130      	bne.n	8002dbc <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002d5a:	4b1b      	ldr	r3, [pc, #108]	; (8002dc8 <HAL_CAN_MspInit+0x90>)
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	4a1a      	ldr	r2, [pc, #104]	; (8002dc8 <HAL_CAN_MspInit+0x90>)
 8002d60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d64:	6413      	str	r3, [r2, #64]	; 0x40
 8002d66:	4b18      	ldr	r3, [pc, #96]	; (8002dc8 <HAL_CAN_MspInit+0x90>)
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6e:	613b      	str	r3, [r7, #16]
 8002d70:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d72:	4b15      	ldr	r3, [pc, #84]	; (8002dc8 <HAL_CAN_MspInit+0x90>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	4a14      	ldr	r2, [pc, #80]	; (8002dc8 <HAL_CAN_MspInit+0x90>)
 8002d78:	f043 0302 	orr.w	r3, r3, #2
 8002d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7e:	4b12      	ldr	r3, [pc, #72]	; (8002dc8 <HAL_CAN_MspInit+0x90>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d90:	2302      	movs	r3, #2
 8002d92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d94:	2300      	movs	r3, #0
 8002d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002d9c:	2309      	movs	r3, #9
 8002d9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002da0:	f107 0314 	add.w	r3, r7, #20
 8002da4:	4619      	mov	r1, r3
 8002da6:	4809      	ldr	r0, [pc, #36]	; (8002dcc <HAL_CAN_MspInit+0x94>)
 8002da8:	f002 ff9c 	bl	8005ce4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002dac:	2200      	movs	r2, #0
 8002dae:	2105      	movs	r1, #5
 8002db0:	2014      	movs	r0, #20
 8002db2:	f002 f969 	bl	8005088 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002db6:	2014      	movs	r0, #20
 8002db8:	f002 f982 	bl	80050c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002dbc:	bf00      	nop
 8002dbe:	3728      	adds	r7, #40	; 0x28
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40006400 	.word	0x40006400
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	40020400 	.word	0x40020400

08002dd0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a0a      	ldr	r2, [pc, #40]	; (8002e08 <HAL_CRC_MspInit+0x38>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d10b      	bne.n	8002dfa <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002de2:	4b0a      	ldr	r3, [pc, #40]	; (8002e0c <HAL_CRC_MspInit+0x3c>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	4a09      	ldr	r2, [pc, #36]	; (8002e0c <HAL_CRC_MspInit+0x3c>)
 8002de8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002dec:	6313      	str	r3, [r2, #48]	; 0x30
 8002dee:	4b07      	ldr	r3, [pc, #28]	; (8002e0c <HAL_CRC_MspInit+0x3c>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002dfa:	bf00      	nop
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40023000 	.word	0x40023000
 8002e0c:	40023800 	.word	0x40023800

08002e10 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b08e      	sub	sp, #56	; 0x38
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	605a      	str	r2, [r3, #4]
 8002e22:	609a      	str	r2, [r3, #8]
 8002e24:	60da      	str	r2, [r3, #12]
 8002e26:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a50      	ldr	r2, [pc, #320]	; (8002f70 <HAL_DCMI_MspInit+0x160>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	f040 809a 	bne.w	8002f68 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002e34:	4b4f      	ldr	r3, [pc, #316]	; (8002f74 <HAL_DCMI_MspInit+0x164>)
 8002e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e38:	4a4e      	ldr	r2, [pc, #312]	; (8002f74 <HAL_DCMI_MspInit+0x164>)
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	6353      	str	r3, [r2, #52]	; 0x34
 8002e40:	4b4c      	ldr	r3, [pc, #304]	; (8002f74 <HAL_DCMI_MspInit+0x164>)
 8002e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	623b      	str	r3, [r7, #32]
 8002e4a:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e4c:	4b49      	ldr	r3, [pc, #292]	; (8002f74 <HAL_DCMI_MspInit+0x164>)
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e50:	4a48      	ldr	r2, [pc, #288]	; (8002f74 <HAL_DCMI_MspInit+0x164>)
 8002e52:	f043 0310 	orr.w	r3, r3, #16
 8002e56:	6313      	str	r3, [r2, #48]	; 0x30
 8002e58:	4b46      	ldr	r3, [pc, #280]	; (8002f74 <HAL_DCMI_MspInit+0x164>)
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5c:	f003 0310 	and.w	r3, r3, #16
 8002e60:	61fb      	str	r3, [r7, #28]
 8002e62:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e64:	4b43      	ldr	r3, [pc, #268]	; (8002f74 <HAL_DCMI_MspInit+0x164>)
 8002e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e68:	4a42      	ldr	r2, [pc, #264]	; (8002f74 <HAL_DCMI_MspInit+0x164>)
 8002e6a:	f043 0308 	orr.w	r3, r3, #8
 8002e6e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e70:	4b40      	ldr	r3, [pc, #256]	; (8002f74 <HAL_DCMI_MspInit+0x164>)
 8002e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e74:	f003 0308 	and.w	r3, r3, #8
 8002e78:	61bb      	str	r3, [r7, #24]
 8002e7a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e7c:	4b3d      	ldr	r3, [pc, #244]	; (8002f74 <HAL_DCMI_MspInit+0x164>)
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e80:	4a3c      	ldr	r2, [pc, #240]	; (8002f74 <HAL_DCMI_MspInit+0x164>)
 8002e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e86:	6313      	str	r3, [r2, #48]	; 0x30
 8002e88:	4b3a      	ldr	r3, [pc, #232]	; (8002f74 <HAL_DCMI_MspInit+0x164>)
 8002e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e90:	617b      	str	r3, [r7, #20]
 8002e92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e94:	4b37      	ldr	r3, [pc, #220]	; (8002f74 <HAL_DCMI_MspInit+0x164>)
 8002e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e98:	4a36      	ldr	r2, [pc, #216]	; (8002f74 <HAL_DCMI_MspInit+0x164>)
 8002e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e9e:	6313      	str	r3, [r2, #48]	; 0x30
 8002ea0:	4b34      	ldr	r3, [pc, #208]	; (8002f74 <HAL_DCMI_MspInit+0x164>)
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eac:	4b31      	ldr	r3, [pc, #196]	; (8002f74 <HAL_DCMI_MspInit+0x164>)
 8002eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb0:	4a30      	ldr	r2, [pc, #192]	; (8002f74 <HAL_DCMI_MspInit+0x164>)
 8002eb2:	f043 0301 	orr.w	r3, r3, #1
 8002eb6:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb8:	4b2e      	ldr	r3, [pc, #184]	; (8002f74 <HAL_DCMI_MspInit+0x164>)
 8002eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002ec4:	2360      	movs	r3, #96	; 0x60
 8002ec6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002ed4:	230d      	movs	r3, #13
 8002ed6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002edc:	4619      	mov	r1, r3
 8002ede:	4826      	ldr	r0, [pc, #152]	; (8002f78 <HAL_DCMI_MspInit+0x168>)
 8002ee0:	f002 ff00 	bl	8005ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002ee4:	2308      	movs	r3, #8
 8002ee6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eec:	2300      	movs	r3, #0
 8002eee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002ef4:	230d      	movs	r3, #13
 8002ef6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002efc:	4619      	mov	r1, r3
 8002efe:	481f      	ldr	r0, [pc, #124]	; (8002f7c <HAL_DCMI_MspInit+0x16c>)
 8002f00:	f002 fef0 	bl	8005ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002f04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f12:	2300      	movs	r3, #0
 8002f14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002f16:	230d      	movs	r3, #13
 8002f18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4817      	ldr	r0, [pc, #92]	; (8002f80 <HAL_DCMI_MspInit+0x170>)
 8002f22:	f002 fedf 	bl	8005ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 8002f26:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002f2a:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f30:	2300      	movs	r3, #0
 8002f32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f34:	2300      	movs	r3, #0
 8002f36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002f38:	230d      	movs	r3, #13
 8002f3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002f3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f40:	4619      	mov	r1, r3
 8002f42:	4810      	ldr	r0, [pc, #64]	; (8002f84 <HAL_DCMI_MspInit+0x174>)
 8002f44:	f002 fece 	bl	8005ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002f48:	2350      	movs	r3, #80	; 0x50
 8002f4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f54:	2300      	movs	r3, #0
 8002f56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002f58:	230d      	movs	r3, #13
 8002f5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f60:	4619      	mov	r1, r3
 8002f62:	4809      	ldr	r0, [pc, #36]	; (8002f88 <HAL_DCMI_MspInit+0x178>)
 8002f64:	f002 febe 	bl	8005ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002f68:	bf00      	nop
 8002f6a:	3738      	adds	r7, #56	; 0x38
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	50050000 	.word	0x50050000
 8002f74:	40023800 	.word	0x40023800
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	40020c00 	.word	0x40020c00
 8002f80:	40021800 	.word	0x40021800
 8002f84:	40021c00 	.word	0x40021c00
 8002f88:	40020000 	.word	0x40020000

08002f8c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a0d      	ldr	r2, [pc, #52]	; (8002fd0 <HAL_DMA2D_MspInit+0x44>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d113      	bne.n	8002fc6 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002f9e:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <HAL_DMA2D_MspInit+0x48>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa2:	4a0c      	ldr	r2, [pc, #48]	; (8002fd4 <HAL_DMA2D_MspInit+0x48>)
 8002fa4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8002faa:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <HAL_DMA2D_MspInit+0x48>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	2105      	movs	r1, #5
 8002fba:	205a      	movs	r0, #90	; 0x5a
 8002fbc:	f002 f864 	bl	8005088 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002fc0:	205a      	movs	r0, #90	; 0x5a
 8002fc2:	f002 f87d 	bl	80050c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002fc6:	bf00      	nop
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	4002b000 	.word	0x4002b000
 8002fd4:	40023800 	.word	0x40023800

08002fd8 <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a07      	ldr	r2, [pc, #28]	; (8003004 <HAL_DMA2D_MspDeInit+0x2c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d108      	bne.n	8002ffc <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 8002fea:	4b07      	ldr	r3, [pc, #28]	; (8003008 <HAL_DMA2D_MspDeInit+0x30>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	4a06      	ldr	r2, [pc, #24]	; (8003008 <HAL_DMA2D_MspDeInit+0x30>)
 8002ff0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ff4:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 8002ff6:	205a      	movs	r0, #90	; 0x5a
 8002ff8:	f002 f870 	bl	80050dc <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 8002ffc:	bf00      	nop
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	4002b000 	.word	0x4002b000
 8003008:	40023800 	.word	0x40023800

0800300c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b08e      	sub	sp, #56	; 0x38
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	605a      	str	r2, [r3, #4]
 800301e:	609a      	str	r2, [r3, #8]
 8003020:	60da      	str	r2, [r3, #12]
 8003022:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a55      	ldr	r2, [pc, #340]	; (8003180 <HAL_LTDC_MspInit+0x174>)
 800302a:	4293      	cmp	r3, r2
 800302c:	f040 80a3 	bne.w	8003176 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003030:	4b54      	ldr	r3, [pc, #336]	; (8003184 <HAL_LTDC_MspInit+0x178>)
 8003032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003034:	4a53      	ldr	r2, [pc, #332]	; (8003184 <HAL_LTDC_MspInit+0x178>)
 8003036:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800303a:	6453      	str	r3, [r2, #68]	; 0x44
 800303c:	4b51      	ldr	r3, [pc, #324]	; (8003184 <HAL_LTDC_MspInit+0x178>)
 800303e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003040:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003044:	623b      	str	r3, [r7, #32]
 8003046:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003048:	4b4e      	ldr	r3, [pc, #312]	; (8003184 <HAL_LTDC_MspInit+0x178>)
 800304a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304c:	4a4d      	ldr	r2, [pc, #308]	; (8003184 <HAL_LTDC_MspInit+0x178>)
 800304e:	f043 0310 	orr.w	r3, r3, #16
 8003052:	6313      	str	r3, [r2, #48]	; 0x30
 8003054:	4b4b      	ldr	r3, [pc, #300]	; (8003184 <HAL_LTDC_MspInit+0x178>)
 8003056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003058:	f003 0310 	and.w	r3, r3, #16
 800305c:	61fb      	str	r3, [r7, #28]
 800305e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003060:	4b48      	ldr	r3, [pc, #288]	; (8003184 <HAL_LTDC_MspInit+0x178>)
 8003062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003064:	4a47      	ldr	r2, [pc, #284]	; (8003184 <HAL_LTDC_MspInit+0x178>)
 8003066:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800306a:	6313      	str	r3, [r2, #48]	; 0x30
 800306c:	4b45      	ldr	r3, [pc, #276]	; (8003184 <HAL_LTDC_MspInit+0x178>)
 800306e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003070:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003074:	61bb      	str	r3, [r7, #24]
 8003076:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003078:	4b42      	ldr	r3, [pc, #264]	; (8003184 <HAL_LTDC_MspInit+0x178>)
 800307a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307c:	4a41      	ldr	r2, [pc, #260]	; (8003184 <HAL_LTDC_MspInit+0x178>)
 800307e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003082:	6313      	str	r3, [r2, #48]	; 0x30
 8003084:	4b3f      	ldr	r3, [pc, #252]	; (8003184 <HAL_LTDC_MspInit+0x178>)
 8003086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800308c:	617b      	str	r3, [r7, #20]
 800308e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003090:	4b3c      	ldr	r3, [pc, #240]	; (8003184 <HAL_LTDC_MspInit+0x178>)
 8003092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003094:	4a3b      	ldr	r2, [pc, #236]	; (8003184 <HAL_LTDC_MspInit+0x178>)
 8003096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800309a:	6313      	str	r3, [r2, #48]	; 0x30
 800309c:	4b39      	ldr	r3, [pc, #228]	; (8003184 <HAL_LTDC_MspInit+0x178>)
 800309e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80030a8:	4b36      	ldr	r3, [pc, #216]	; (8003184 <HAL_LTDC_MspInit+0x178>)
 80030aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ac:	4a35      	ldr	r2, [pc, #212]	; (8003184 <HAL_LTDC_MspInit+0x178>)
 80030ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b2:	6313      	str	r3, [r2, #48]	; 0x30
 80030b4:	4b33      	ldr	r3, [pc, #204]	; (8003184 <HAL_LTDC_MspInit+0x178>)
 80030b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030bc:	60fb      	str	r3, [r7, #12]
 80030be:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80030c0:	2310      	movs	r3, #16
 80030c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c4:	2302      	movs	r3, #2
 80030c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c8:	2300      	movs	r3, #0
 80030ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030cc:	2300      	movs	r3, #0
 80030ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80030d0:	230e      	movs	r3, #14
 80030d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80030d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030d8:	4619      	mov	r1, r3
 80030da:	482b      	ldr	r0, [pc, #172]	; (8003188 <HAL_LTDC_MspInit+0x17c>)
 80030dc:	f002 fe02 	bl	8005ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 80030e0:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80030e4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e6:	2302      	movs	r3, #2
 80030e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ee:	2300      	movs	r3, #0
 80030f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80030f2:	230e      	movs	r3, #14
 80030f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80030f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030fa:	4619      	mov	r1, r3
 80030fc:	4823      	ldr	r0, [pc, #140]	; (800318c <HAL_LTDC_MspInit+0x180>)
 80030fe:	f002 fdf1 	bl	8005ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8003102:	23f7      	movs	r3, #247	; 0xf7
 8003104:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003106:	2302      	movs	r3, #2
 8003108:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310a:	2300      	movs	r3, #0
 800310c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800310e:	2300      	movs	r3, #0
 8003110:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003112:	230e      	movs	r3, #14
 8003114:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800311a:	4619      	mov	r1, r3
 800311c:	481c      	ldr	r0, [pc, #112]	; (8003190 <HAL_LTDC_MspInit+0x184>)
 800311e:	f002 fde1 	bl	8005ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003122:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003126:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003128:	2302      	movs	r3, #2
 800312a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312c:	2300      	movs	r3, #0
 800312e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003130:	2300      	movs	r3, #0
 8003132:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003134:	2309      	movs	r3, #9
 8003136:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800313c:	4619      	mov	r1, r3
 800313e:	4815      	ldr	r0, [pc, #84]	; (8003194 <HAL_LTDC_MspInit+0x188>)
 8003140:	f002 fdd0 	bl	8005ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003144:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8003148:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314a:	2302      	movs	r3, #2
 800314c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314e:	2300      	movs	r3, #0
 8003150:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003152:	2300      	movs	r3, #0
 8003154:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003156:	230e      	movs	r3, #14
 8003158:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800315a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800315e:	4619      	mov	r1, r3
 8003160:	480d      	ldr	r0, [pc, #52]	; (8003198 <HAL_LTDC_MspInit+0x18c>)
 8003162:	f002 fdbf 	bl	8005ce4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003166:	2200      	movs	r2, #0
 8003168:	2105      	movs	r1, #5
 800316a:	2058      	movs	r0, #88	; 0x58
 800316c:	f001 ff8c 	bl	8005088 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003170:	2058      	movs	r0, #88	; 0x58
 8003172:	f001 ffa5 	bl	80050c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003176:	bf00      	nop
 8003178:	3738      	adds	r7, #56	; 0x38
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40016800 	.word	0x40016800
 8003184:	40023800 	.word	0x40023800
 8003188:	40021000 	.word	0x40021000
 800318c:	40022400 	.word	0x40022400
 8003190:	40022800 	.word	0x40022800
 8003194:	40021800 	.word	0x40021800
 8003198:	40022000 	.word	0x40022000

0800319c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08c      	sub	sp, #48	; 0x30
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a4:	f107 031c 	add.w	r3, r7, #28
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	609a      	str	r2, [r3, #8]
 80031b0:	60da      	str	r2, [r3, #12]
 80031b2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a3b      	ldr	r2, [pc, #236]	; (80032a8 <HAL_QSPI_MspInit+0x10c>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d170      	bne.n	80032a0 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80031be:	4b3b      	ldr	r3, [pc, #236]	; (80032ac <HAL_QSPI_MspInit+0x110>)
 80031c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c2:	4a3a      	ldr	r2, [pc, #232]	; (80032ac <HAL_QSPI_MspInit+0x110>)
 80031c4:	f043 0302 	orr.w	r3, r3, #2
 80031c8:	6393      	str	r3, [r2, #56]	; 0x38
 80031ca:	4b38      	ldr	r3, [pc, #224]	; (80032ac <HAL_QSPI_MspInit+0x110>)
 80031cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	61bb      	str	r3, [r7, #24]
 80031d4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80031d6:	4b35      	ldr	r3, [pc, #212]	; (80032ac <HAL_QSPI_MspInit+0x110>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	4a34      	ldr	r2, [pc, #208]	; (80032ac <HAL_QSPI_MspInit+0x110>)
 80031dc:	f043 0310 	orr.w	r3, r3, #16
 80031e0:	6313      	str	r3, [r2, #48]	; 0x30
 80031e2:	4b32      	ldr	r3, [pc, #200]	; (80032ac <HAL_QSPI_MspInit+0x110>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	f003 0310 	and.w	r3, r3, #16
 80031ea:	617b      	str	r3, [r7, #20]
 80031ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ee:	4b2f      	ldr	r3, [pc, #188]	; (80032ac <HAL_QSPI_MspInit+0x110>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	4a2e      	ldr	r2, [pc, #184]	; (80032ac <HAL_QSPI_MspInit+0x110>)
 80031f4:	f043 0302 	orr.w	r3, r3, #2
 80031f8:	6313      	str	r3, [r2, #48]	; 0x30
 80031fa:	4b2c      	ldr	r3, [pc, #176]	; (80032ac <HAL_QSPI_MspInit+0x110>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	613b      	str	r3, [r7, #16]
 8003204:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003206:	4b29      	ldr	r3, [pc, #164]	; (80032ac <HAL_QSPI_MspInit+0x110>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	4a28      	ldr	r2, [pc, #160]	; (80032ac <HAL_QSPI_MspInit+0x110>)
 800320c:	f043 0308 	orr.w	r3, r3, #8
 8003210:	6313      	str	r3, [r2, #48]	; 0x30
 8003212:	4b26      	ldr	r3, [pc, #152]	; (80032ac <HAL_QSPI_MspInit+0x110>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800321e:	2304      	movs	r3, #4
 8003220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003222:	2302      	movs	r3, #2
 8003224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003226:	2300      	movs	r3, #0
 8003228:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800322a:	2303      	movs	r3, #3
 800322c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800322e:	2309      	movs	r3, #9
 8003230:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8003232:	f107 031c 	add.w	r3, r7, #28
 8003236:	4619      	mov	r1, r3
 8003238:	481d      	ldr	r0, [pc, #116]	; (80032b0 <HAL_QSPI_MspInit+0x114>)
 800323a:	f002 fd53 	bl	8005ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800323e:	2340      	movs	r3, #64	; 0x40
 8003240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003242:	2302      	movs	r3, #2
 8003244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003246:	2300      	movs	r3, #0
 8003248:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800324a:	2303      	movs	r3, #3
 800324c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800324e:	230a      	movs	r3, #10
 8003250:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8003252:	f107 031c 	add.w	r3, r7, #28
 8003256:	4619      	mov	r1, r3
 8003258:	4816      	ldr	r0, [pc, #88]	; (80032b4 <HAL_QSPI_MspInit+0x118>)
 800325a:	f002 fd43 	bl	8005ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800325e:	2304      	movs	r3, #4
 8003260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003262:	2302      	movs	r3, #2
 8003264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003266:	2300      	movs	r3, #0
 8003268:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800326a:	2303      	movs	r3, #3
 800326c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800326e:	2309      	movs	r3, #9
 8003270:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003272:	f107 031c 	add.w	r3, r7, #28
 8003276:	4619      	mov	r1, r3
 8003278:	480e      	ldr	r0, [pc, #56]	; (80032b4 <HAL_QSPI_MspInit+0x118>)
 800327a:	f002 fd33 	bl	8005ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800327e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003284:	2302      	movs	r3, #2
 8003286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003288:	2300      	movs	r3, #0
 800328a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800328c:	2303      	movs	r3, #3
 800328e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003290:	2309      	movs	r3, #9
 8003292:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003294:	f107 031c 	add.w	r3, r7, #28
 8003298:	4619      	mov	r1, r3
 800329a:	4807      	ldr	r0, [pc, #28]	; (80032b8 <HAL_QSPI_MspInit+0x11c>)
 800329c:	f002 fd22 	bl	8005ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80032a0:	bf00      	nop
 80032a2:	3730      	adds	r7, #48	; 0x30
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	a0001000 	.word	0xa0001000
 80032ac:	40023800 	.word	0x40023800
 80032b0:	40021000 	.word	0x40021000
 80032b4:	40020400 	.word	0x40020400
 80032b8:	40020c00 	.word	0x40020c00

080032bc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a07      	ldr	r2, [pc, #28]	; (80032e8 <HAL_RTC_MspInit+0x2c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d105      	bne.n	80032da <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80032ce:	4b07      	ldr	r3, [pc, #28]	; (80032ec <HAL_RTC_MspInit+0x30>)
 80032d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d2:	4a06      	ldr	r2, [pc, #24]	; (80032ec <HAL_RTC_MspInit+0x30>)
 80032d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032d8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	40002800 	.word	0x40002800
 80032ec:	40023800 	.word	0x40023800

080032f0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08a      	sub	sp, #40	; 0x28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f8:	f107 0314 	add.w	r3, r7, #20
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	605a      	str	r2, [r3, #4]
 8003302:	609a      	str	r2, [r3, #8]
 8003304:	60da      	str	r2, [r3, #12]
 8003306:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a25      	ldr	r2, [pc, #148]	; (80033a4 <HAL_SD_MspInit+0xb4>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d144      	bne.n	800339c <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003312:	4b25      	ldr	r3, [pc, #148]	; (80033a8 <HAL_SD_MspInit+0xb8>)
 8003314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003316:	4a24      	ldr	r2, [pc, #144]	; (80033a8 <HAL_SD_MspInit+0xb8>)
 8003318:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800331c:	6453      	str	r3, [r2, #68]	; 0x44
 800331e:	4b22      	ldr	r3, [pc, #136]	; (80033a8 <HAL_SD_MspInit+0xb8>)
 8003320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003322:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003326:	613b      	str	r3, [r7, #16]
 8003328:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800332a:	4b1f      	ldr	r3, [pc, #124]	; (80033a8 <HAL_SD_MspInit+0xb8>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	4a1e      	ldr	r2, [pc, #120]	; (80033a8 <HAL_SD_MspInit+0xb8>)
 8003330:	f043 0304 	orr.w	r3, r3, #4
 8003334:	6313      	str	r3, [r2, #48]	; 0x30
 8003336:	4b1c      	ldr	r3, [pc, #112]	; (80033a8 <HAL_SD_MspInit+0xb8>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	f003 0304 	and.w	r3, r3, #4
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003342:	4b19      	ldr	r3, [pc, #100]	; (80033a8 <HAL_SD_MspInit+0xb8>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	4a18      	ldr	r2, [pc, #96]	; (80033a8 <HAL_SD_MspInit+0xb8>)
 8003348:	f043 0308 	orr.w	r3, r3, #8
 800334c:	6313      	str	r3, [r2, #48]	; 0x30
 800334e:	4b16      	ldr	r3, [pc, #88]	; (80033a8 <HAL_SD_MspInit+0xb8>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	f003 0308 	and.w	r3, r3, #8
 8003356:	60bb      	str	r3, [r7, #8]
 8003358:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 800335a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800335e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003360:	2302      	movs	r3, #2
 8003362:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003364:	2300      	movs	r3, #0
 8003366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003368:	2303      	movs	r3, #3
 800336a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800336c:	230c      	movs	r3, #12
 800336e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003370:	f107 0314 	add.w	r3, r7, #20
 8003374:	4619      	mov	r1, r3
 8003376:	480d      	ldr	r0, [pc, #52]	; (80033ac <HAL_SD_MspInit+0xbc>)
 8003378:	f002 fcb4 	bl	8005ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800337c:	2304      	movs	r3, #4
 800337e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003380:	2302      	movs	r3, #2
 8003382:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003384:	2300      	movs	r3, #0
 8003386:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003388:	2303      	movs	r3, #3
 800338a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800338c:	230c      	movs	r3, #12
 800338e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8003390:	f107 0314 	add.w	r3, r7, #20
 8003394:	4619      	mov	r1, r3
 8003396:	4806      	ldr	r0, [pc, #24]	; (80033b0 <HAL_SD_MspInit+0xc0>)
 8003398:	f002 fca4 	bl	8005ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800339c:	bf00      	nop
 800339e:	3728      	adds	r7, #40	; 0x28
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40012c00 	.word	0x40012c00
 80033a8:	40023800 	.word	0x40023800
 80033ac:	40020800 	.word	0x40020800
 80033b0:	40020c00 	.word	0x40020c00

080033b4 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b08a      	sub	sp, #40	; 0x28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033bc:	f107 0314 	add.w	r3, r7, #20
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	605a      	str	r2, [r3, #4]
 80033c6:	609a      	str	r2, [r3, #8]
 80033c8:	60da      	str	r2, [r3, #12]
 80033ca:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 80033d4:	d127      	bne.n	8003426 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80033d6:	4b16      	ldr	r3, [pc, #88]	; (8003430 <HAL_SPDIFRX_MspInit+0x7c>)
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	4a15      	ldr	r2, [pc, #84]	; (8003430 <HAL_SPDIFRX_MspInit+0x7c>)
 80033dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e0:	6413      	str	r3, [r2, #64]	; 0x40
 80033e2:	4b13      	ldr	r3, [pc, #76]	; (8003430 <HAL_SPDIFRX_MspInit+0x7c>)
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ea:	613b      	str	r3, [r7, #16]
 80033ec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033ee:	4b10      	ldr	r3, [pc, #64]	; (8003430 <HAL_SPDIFRX_MspInit+0x7c>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	4a0f      	ldr	r2, [pc, #60]	; (8003430 <HAL_SPDIFRX_MspInit+0x7c>)
 80033f4:	f043 0308 	orr.w	r3, r3, #8
 80033f8:	6313      	str	r3, [r2, #48]	; 0x30
 80033fa:	4b0d      	ldr	r3, [pc, #52]	; (8003430 <HAL_SPDIFRX_MspInit+0x7c>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	60fb      	str	r3, [r7, #12]
 8003404:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8003406:	2380      	movs	r3, #128	; 0x80
 8003408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340a:	2302      	movs	r3, #2
 800340c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340e:	2300      	movs	r3, #0
 8003410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003412:	2300      	movs	r3, #0
 8003414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8003416:	2308      	movs	r3, #8
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800341a:	f107 0314 	add.w	r3, r7, #20
 800341e:	4619      	mov	r1, r3
 8003420:	4804      	ldr	r0, [pc, #16]	; (8003434 <HAL_SPDIFRX_MspInit+0x80>)
 8003422:	f002 fc5f 	bl	8005ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8003426:	bf00      	nop
 8003428:	3728      	adds	r7, #40	; 0x28
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40023800 	.word	0x40023800
 8003434:	40020c00 	.word	0x40020c00

08003438 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b08a      	sub	sp, #40	; 0x28
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003440:	f107 0314 	add.w	r3, r7, #20
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	605a      	str	r2, [r3, #4]
 800344a:	609a      	str	r2, [r3, #8]
 800344c:	60da      	str	r2, [r3, #12]
 800344e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a25      	ldr	r2, [pc, #148]	; (80034ec <HAL_SPI_MspInit+0xb4>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d144      	bne.n	80034e4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800345a:	4b25      	ldr	r3, [pc, #148]	; (80034f0 <HAL_SPI_MspInit+0xb8>)
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	4a24      	ldr	r2, [pc, #144]	; (80034f0 <HAL_SPI_MspInit+0xb8>)
 8003460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003464:	6413      	str	r3, [r2, #64]	; 0x40
 8003466:	4b22      	ldr	r3, [pc, #136]	; (80034f0 <HAL_SPI_MspInit+0xb8>)
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800346e:	613b      	str	r3, [r7, #16]
 8003470:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003472:	4b1f      	ldr	r3, [pc, #124]	; (80034f0 <HAL_SPI_MspInit+0xb8>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003476:	4a1e      	ldr	r2, [pc, #120]	; (80034f0 <HAL_SPI_MspInit+0xb8>)
 8003478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800347c:	6313      	str	r3, [r2, #48]	; 0x30
 800347e:	4b1c      	ldr	r3, [pc, #112]	; (80034f0 <HAL_SPI_MspInit+0xb8>)
 8003480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800348a:	4b19      	ldr	r3, [pc, #100]	; (80034f0 <HAL_SPI_MspInit+0xb8>)
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	4a18      	ldr	r2, [pc, #96]	; (80034f0 <HAL_SPI_MspInit+0xb8>)
 8003490:	f043 0302 	orr.w	r3, r3, #2
 8003494:	6313      	str	r3, [r2, #48]	; 0x30
 8003496:	4b16      	ldr	r3, [pc, #88]	; (80034f0 <HAL_SPI_MspInit+0xb8>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	60bb      	str	r3, [r7, #8]
 80034a0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80034a2:	2302      	movs	r3, #2
 80034a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a6:	2302      	movs	r3, #2
 80034a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034aa:	2300      	movs	r3, #0
 80034ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ae:	2300      	movs	r3, #0
 80034b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80034b2:	2305      	movs	r3, #5
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80034b6:	f107 0314 	add.w	r3, r7, #20
 80034ba:	4619      	mov	r1, r3
 80034bc:	480d      	ldr	r0, [pc, #52]	; (80034f4 <HAL_SPI_MspInit+0xbc>)
 80034be:	f002 fc11 	bl	8005ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80034c2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80034c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c8:	2302      	movs	r3, #2
 80034ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034cc:	2300      	movs	r3, #0
 80034ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d0:	2300      	movs	r3, #0
 80034d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80034d4:	2305      	movs	r3, #5
 80034d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034d8:	f107 0314 	add.w	r3, r7, #20
 80034dc:	4619      	mov	r1, r3
 80034de:	4806      	ldr	r0, [pc, #24]	; (80034f8 <HAL_SPI_MspInit+0xc0>)
 80034e0:	f002 fc00 	bl	8005ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80034e4:	bf00      	nop
 80034e6:	3728      	adds	r7, #40	; 0x28
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40003800 	.word	0x40003800
 80034f0:	40023800 	.word	0x40023800
 80034f4:	40022000 	.word	0x40022000
 80034f8:	40020400 	.word	0x40020400

080034fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b089      	sub	sp, #36	; 0x24
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a2e      	ldr	r2, [pc, #184]	; (80035c4 <HAL_TIM_Base_MspInit+0xc8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d10c      	bne.n	8003528 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800350e:	4b2e      	ldr	r3, [pc, #184]	; (80035c8 <HAL_TIM_Base_MspInit+0xcc>)
 8003510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003512:	4a2d      	ldr	r2, [pc, #180]	; (80035c8 <HAL_TIM_Base_MspInit+0xcc>)
 8003514:	f043 0301 	orr.w	r3, r3, #1
 8003518:	6453      	str	r3, [r2, #68]	; 0x44
 800351a:	4b2b      	ldr	r3, [pc, #172]	; (80035c8 <HAL_TIM_Base_MspInit+0xcc>)
 800351c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	61fb      	str	r3, [r7, #28]
 8003524:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003526:	e046      	b.n	80035b6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003530:	d10c      	bne.n	800354c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003532:	4b25      	ldr	r3, [pc, #148]	; (80035c8 <HAL_TIM_Base_MspInit+0xcc>)
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	4a24      	ldr	r2, [pc, #144]	; (80035c8 <HAL_TIM_Base_MspInit+0xcc>)
 8003538:	f043 0301 	orr.w	r3, r3, #1
 800353c:	6413      	str	r3, [r2, #64]	; 0x40
 800353e:	4b22      	ldr	r3, [pc, #136]	; (80035c8 <HAL_TIM_Base_MspInit+0xcc>)
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	61bb      	str	r3, [r7, #24]
 8003548:	69bb      	ldr	r3, [r7, #24]
}
 800354a:	e034      	b.n	80035b6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a1e      	ldr	r2, [pc, #120]	; (80035cc <HAL_TIM_Base_MspInit+0xd0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d10c      	bne.n	8003570 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003556:	4b1c      	ldr	r3, [pc, #112]	; (80035c8 <HAL_TIM_Base_MspInit+0xcc>)
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	4a1b      	ldr	r2, [pc, #108]	; (80035c8 <HAL_TIM_Base_MspInit+0xcc>)
 800355c:	f043 0302 	orr.w	r3, r3, #2
 8003560:	6413      	str	r3, [r2, #64]	; 0x40
 8003562:	4b19      	ldr	r3, [pc, #100]	; (80035c8 <HAL_TIM_Base_MspInit+0xcc>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	697b      	ldr	r3, [r7, #20]
}
 800356e:	e022      	b.n	80035b6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a16      	ldr	r2, [pc, #88]	; (80035d0 <HAL_TIM_Base_MspInit+0xd4>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d10c      	bne.n	8003594 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800357a:	4b13      	ldr	r3, [pc, #76]	; (80035c8 <HAL_TIM_Base_MspInit+0xcc>)
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	4a12      	ldr	r2, [pc, #72]	; (80035c8 <HAL_TIM_Base_MspInit+0xcc>)
 8003580:	f043 0308 	orr.w	r3, r3, #8
 8003584:	6413      	str	r3, [r2, #64]	; 0x40
 8003586:	4b10      	ldr	r3, [pc, #64]	; (80035c8 <HAL_TIM_Base_MspInit+0xcc>)
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	613b      	str	r3, [r7, #16]
 8003590:	693b      	ldr	r3, [r7, #16]
}
 8003592:	e010      	b.n	80035b6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a0e      	ldr	r2, [pc, #56]	; (80035d4 <HAL_TIM_Base_MspInit+0xd8>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d10b      	bne.n	80035b6 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800359e:	4b0a      	ldr	r3, [pc, #40]	; (80035c8 <HAL_TIM_Base_MspInit+0xcc>)
 80035a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a2:	4a09      	ldr	r2, [pc, #36]	; (80035c8 <HAL_TIM_Base_MspInit+0xcc>)
 80035a4:	f043 0302 	orr.w	r3, r3, #2
 80035a8:	6453      	str	r3, [r2, #68]	; 0x44
 80035aa:	4b07      	ldr	r3, [pc, #28]	; (80035c8 <HAL_TIM_Base_MspInit+0xcc>)
 80035ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	68fb      	ldr	r3, [r7, #12]
}
 80035b6:	bf00      	nop
 80035b8:	3724      	adds	r7, #36	; 0x24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	40010000 	.word	0x40010000
 80035c8:	40023800 	.word	0x40023800
 80035cc:	40000400 	.word	0x40000400
 80035d0:	40000c00 	.word	0x40000c00
 80035d4:	40010400 	.word	0x40010400

080035d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a0a      	ldr	r2, [pc, #40]	; (8003610 <HAL_TIM_PWM_MspInit+0x38>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d10b      	bne.n	8003602 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80035ea:	4b0a      	ldr	r3, [pc, #40]	; (8003614 <HAL_TIM_PWM_MspInit+0x3c>)
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	4a09      	ldr	r2, [pc, #36]	; (8003614 <HAL_TIM_PWM_MspInit+0x3c>)
 80035f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035f4:	6413      	str	r3, [r2, #64]	; 0x40
 80035f6:	4b07      	ldr	r3, [pc, #28]	; (8003614 <HAL_TIM_PWM_MspInit+0x3c>)
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8003602:	bf00      	nop
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	40001800 	.word	0x40001800
 8003614:	40023800 	.word	0x40023800

08003618 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b08c      	sub	sp, #48	; 0x30
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003620:	f107 031c 	add.w	r3, r7, #28
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	605a      	str	r2, [r3, #4]
 800362a:	609a      	str	r2, [r3, #8]
 800362c:	60da      	str	r2, [r3, #12]
 800362e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a56      	ldr	r2, [pc, #344]	; (8003790 <HAL_TIM_MspPostInit+0x178>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d11d      	bne.n	8003676 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800363a:	4b56      	ldr	r3, [pc, #344]	; (8003794 <HAL_TIM_MspPostInit+0x17c>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	4a55      	ldr	r2, [pc, #340]	; (8003794 <HAL_TIM_MspPostInit+0x17c>)
 8003640:	f043 0301 	orr.w	r3, r3, #1
 8003644:	6313      	str	r3, [r2, #48]	; 0x30
 8003646:	4b53      	ldr	r3, [pc, #332]	; (8003794 <HAL_TIM_MspPostInit+0x17c>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	61bb      	str	r3, [r7, #24]
 8003650:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8003652:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003658:	2302      	movs	r3, #2
 800365a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365c:	2300      	movs	r3, #0
 800365e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003660:	2300      	movs	r3, #0
 8003662:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003664:	2301      	movs	r3, #1
 8003666:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8003668:	f107 031c 	add.w	r3, r7, #28
 800366c:	4619      	mov	r1, r3
 800366e:	484a      	ldr	r0, [pc, #296]	; (8003798 <HAL_TIM_MspPostInit+0x180>)
 8003670:	f002 fb38 	bl	8005ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003674:	e087      	b.n	8003786 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800367e:	d11d      	bne.n	80036bc <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003680:	4b44      	ldr	r3, [pc, #272]	; (8003794 <HAL_TIM_MspPostInit+0x17c>)
 8003682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003684:	4a43      	ldr	r2, [pc, #268]	; (8003794 <HAL_TIM_MspPostInit+0x17c>)
 8003686:	f043 0301 	orr.w	r3, r3, #1
 800368a:	6313      	str	r3, [r2, #48]	; 0x30
 800368c:	4b41      	ldr	r3, [pc, #260]	; (8003794 <HAL_TIM_MspPostInit+0x17c>)
 800368e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	617b      	str	r3, [r7, #20]
 8003696:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003698:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800369c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800369e:	2302      	movs	r3, #2
 80036a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a2:	2300      	movs	r3, #0
 80036a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a6:	2300      	movs	r3, #0
 80036a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036aa:	2301      	movs	r3, #1
 80036ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80036ae:	f107 031c 	add.w	r3, r7, #28
 80036b2:	4619      	mov	r1, r3
 80036b4:	4838      	ldr	r0, [pc, #224]	; (8003798 <HAL_TIM_MspPostInit+0x180>)
 80036b6:	f002 fb15 	bl	8005ce4 <HAL_GPIO_Init>
}
 80036ba:	e064      	b.n	8003786 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a36      	ldr	r2, [pc, #216]	; (800379c <HAL_TIM_MspPostInit+0x184>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d11c      	bne.n	8003700 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036c6:	4b33      	ldr	r3, [pc, #204]	; (8003794 <HAL_TIM_MspPostInit+0x17c>)
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	4a32      	ldr	r2, [pc, #200]	; (8003794 <HAL_TIM_MspPostInit+0x17c>)
 80036cc:	f043 0302 	orr.w	r3, r3, #2
 80036d0:	6313      	str	r3, [r2, #48]	; 0x30
 80036d2:	4b30      	ldr	r3, [pc, #192]	; (8003794 <HAL_TIM_MspPostInit+0x17c>)
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	613b      	str	r3, [r7, #16]
 80036dc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80036de:	2310      	movs	r3, #16
 80036e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e2:	2302      	movs	r3, #2
 80036e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ea:	2300      	movs	r3, #0
 80036ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80036ee:	2302      	movs	r3, #2
 80036f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80036f2:	f107 031c 	add.w	r3, r7, #28
 80036f6:	4619      	mov	r1, r3
 80036f8:	4829      	ldr	r0, [pc, #164]	; (80037a0 <HAL_TIM_MspPostInit+0x188>)
 80036fa:	f002 faf3 	bl	8005ce4 <HAL_GPIO_Init>
}
 80036fe:	e042      	b.n	8003786 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a27      	ldr	r2, [pc, #156]	; (80037a4 <HAL_TIM_MspPostInit+0x18c>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d11c      	bne.n	8003744 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800370a:	4b22      	ldr	r3, [pc, #136]	; (8003794 <HAL_TIM_MspPostInit+0x17c>)
 800370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370e:	4a21      	ldr	r2, [pc, #132]	; (8003794 <HAL_TIM_MspPostInit+0x17c>)
 8003710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003714:	6313      	str	r3, [r2, #48]	; 0x30
 8003716:	4b1f      	ldr	r3, [pc, #124]	; (8003794 <HAL_TIM_MspPostInit+0x17c>)
 8003718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8003722:	2301      	movs	r3, #1
 8003724:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003726:	2302      	movs	r3, #2
 8003728:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372a:	2300      	movs	r3, #0
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800372e:	2300      	movs	r3, #0
 8003730:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003732:	2302      	movs	r3, #2
 8003734:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8003736:	f107 031c 	add.w	r3, r7, #28
 800373a:	4619      	mov	r1, r3
 800373c:	481a      	ldr	r0, [pc, #104]	; (80037a8 <HAL_TIM_MspPostInit+0x190>)
 800373e:	f002 fad1 	bl	8005ce4 <HAL_GPIO_Init>
}
 8003742:	e020      	b.n	8003786 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a18      	ldr	r2, [pc, #96]	; (80037ac <HAL_TIM_MspPostInit+0x194>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d11b      	bne.n	8003786 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800374e:	4b11      	ldr	r3, [pc, #68]	; (8003794 <HAL_TIM_MspPostInit+0x17c>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003752:	4a10      	ldr	r2, [pc, #64]	; (8003794 <HAL_TIM_MspPostInit+0x17c>)
 8003754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003758:	6313      	str	r3, [r2, #48]	; 0x30
 800375a:	4b0e      	ldr	r3, [pc, #56]	; (8003794 <HAL_TIM_MspPostInit+0x17c>)
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003762:	60bb      	str	r3, [r7, #8]
 8003764:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8003766:	2340      	movs	r3, #64	; 0x40
 8003768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800376a:	2302      	movs	r3, #2
 800376c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376e:	2300      	movs	r3, #0
 8003770:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003772:	2300      	movs	r3, #0
 8003774:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003776:	2309      	movs	r3, #9
 8003778:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800377a:	f107 031c 	add.w	r3, r7, #28
 800377e:	4619      	mov	r1, r3
 8003780:	480b      	ldr	r0, [pc, #44]	; (80037b0 <HAL_TIM_MspPostInit+0x198>)
 8003782:	f002 faaf 	bl	8005ce4 <HAL_GPIO_Init>
}
 8003786:	bf00      	nop
 8003788:	3730      	adds	r7, #48	; 0x30
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40010000 	.word	0x40010000
 8003794:	40023800 	.word	0x40023800
 8003798:	40020000 	.word	0x40020000
 800379c:	40000400 	.word	0x40000400
 80037a0:	40020400 	.word	0x40020400
 80037a4:	40000c00 	.word	0x40000c00
 80037a8:	40022000 	.word	0x40022000
 80037ac:	40001800 	.word	0x40001800
 80037b0:	40021c00 	.word	0x40021c00

080037b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b08c      	sub	sp, #48	; 0x30
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037bc:	f107 031c 	add.w	r3, r7, #28
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	605a      	str	r2, [r3, #4]
 80037c6:	609a      	str	r2, [r3, #8]
 80037c8:	60da      	str	r2, [r3, #12]
 80037ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a3c      	ldr	r2, [pc, #240]	; (80038c4 <HAL_UART_MspInit+0x110>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d145      	bne.n	8003862 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80037d6:	4b3c      	ldr	r3, [pc, #240]	; (80038c8 <HAL_UART_MspInit+0x114>)
 80037d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037da:	4a3b      	ldr	r2, [pc, #236]	; (80038c8 <HAL_UART_MspInit+0x114>)
 80037dc:	f043 0310 	orr.w	r3, r3, #16
 80037e0:	6453      	str	r3, [r2, #68]	; 0x44
 80037e2:	4b39      	ldr	r3, [pc, #228]	; (80038c8 <HAL_UART_MspInit+0x114>)
 80037e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e6:	f003 0310 	and.w	r3, r3, #16
 80037ea:	61bb      	str	r3, [r7, #24]
 80037ec:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ee:	4b36      	ldr	r3, [pc, #216]	; (80038c8 <HAL_UART_MspInit+0x114>)
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	4a35      	ldr	r2, [pc, #212]	; (80038c8 <HAL_UART_MspInit+0x114>)
 80037f4:	f043 0302 	orr.w	r3, r3, #2
 80037f8:	6313      	str	r3, [r2, #48]	; 0x30
 80037fa:	4b33      	ldr	r3, [pc, #204]	; (80038c8 <HAL_UART_MspInit+0x114>)
 80037fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003806:	4b30      	ldr	r3, [pc, #192]	; (80038c8 <HAL_UART_MspInit+0x114>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	4a2f      	ldr	r2, [pc, #188]	; (80038c8 <HAL_UART_MspInit+0x114>)
 800380c:	f043 0301 	orr.w	r3, r3, #1
 8003810:	6313      	str	r3, [r2, #48]	; 0x30
 8003812:	4b2d      	ldr	r3, [pc, #180]	; (80038c8 <HAL_UART_MspInit+0x114>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	613b      	str	r3, [r7, #16]
 800381c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800381e:	2380      	movs	r3, #128	; 0x80
 8003820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003822:	2302      	movs	r3, #2
 8003824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003826:	2300      	movs	r3, #0
 8003828:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800382a:	2300      	movs	r3, #0
 800382c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800382e:	2307      	movs	r3, #7
 8003830:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003832:	f107 031c 	add.w	r3, r7, #28
 8003836:	4619      	mov	r1, r3
 8003838:	4824      	ldr	r0, [pc, #144]	; (80038cc <HAL_UART_MspInit+0x118>)
 800383a:	f002 fa53 	bl	8005ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800383e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003844:	2302      	movs	r3, #2
 8003846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003848:	2300      	movs	r3, #0
 800384a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800384c:	2300      	movs	r3, #0
 800384e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003850:	2307      	movs	r3, #7
 8003852:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003854:	f107 031c 	add.w	r3, r7, #28
 8003858:	4619      	mov	r1, r3
 800385a:	481d      	ldr	r0, [pc, #116]	; (80038d0 <HAL_UART_MspInit+0x11c>)
 800385c:	f002 fa42 	bl	8005ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003860:	e02c      	b.n	80038bc <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a1b      	ldr	r2, [pc, #108]	; (80038d4 <HAL_UART_MspInit+0x120>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d127      	bne.n	80038bc <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 800386c:	4b16      	ldr	r3, [pc, #88]	; (80038c8 <HAL_UART_MspInit+0x114>)
 800386e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003870:	4a15      	ldr	r2, [pc, #84]	; (80038c8 <HAL_UART_MspInit+0x114>)
 8003872:	f043 0320 	orr.w	r3, r3, #32
 8003876:	6453      	str	r3, [r2, #68]	; 0x44
 8003878:	4b13      	ldr	r3, [pc, #76]	; (80038c8 <HAL_UART_MspInit+0x114>)
 800387a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387c:	f003 0320 	and.w	r3, r3, #32
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003884:	4b10      	ldr	r3, [pc, #64]	; (80038c8 <HAL_UART_MspInit+0x114>)
 8003886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003888:	4a0f      	ldr	r2, [pc, #60]	; (80038c8 <HAL_UART_MspInit+0x114>)
 800388a:	f043 0304 	orr.w	r3, r3, #4
 800388e:	6313      	str	r3, [r2, #48]	; 0x30
 8003890:	4b0d      	ldr	r3, [pc, #52]	; (80038c8 <HAL_UART_MspInit+0x114>)
 8003892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	60bb      	str	r3, [r7, #8]
 800389a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800389c:	23c0      	movs	r3, #192	; 0xc0
 800389e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a0:	2302      	movs	r3, #2
 80038a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a4:	2300      	movs	r3, #0
 80038a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038a8:	2303      	movs	r3, #3
 80038aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80038ac:	2308      	movs	r3, #8
 80038ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038b0:	f107 031c 	add.w	r3, r7, #28
 80038b4:	4619      	mov	r1, r3
 80038b6:	4808      	ldr	r0, [pc, #32]	; (80038d8 <HAL_UART_MspInit+0x124>)
 80038b8:	f002 fa14 	bl	8005ce4 <HAL_GPIO_Init>
}
 80038bc:	bf00      	nop
 80038be:	3730      	adds	r7, #48	; 0x30
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40011000 	.word	0x40011000
 80038c8:	40023800 	.word	0x40023800
 80038cc:	40020400 	.word	0x40020400
 80038d0:	40020000 	.word	0x40020000
 80038d4:	40011400 	.word	0x40011400
 80038d8:	40020800 	.word	0x40020800

080038dc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80038e2:	1d3b      	adds	r3, r7, #4
 80038e4:	2200      	movs	r2, #0
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	605a      	str	r2, [r3, #4]
 80038ea:	609a      	str	r2, [r3, #8]
 80038ec:	60da      	str	r2, [r3, #12]
 80038ee:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80038f0:	4b3a      	ldr	r3, [pc, #232]	; (80039dc <HAL_FMC_MspInit+0x100>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d16d      	bne.n	80039d4 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80038f8:	4b38      	ldr	r3, [pc, #224]	; (80039dc <HAL_FMC_MspInit+0x100>)
 80038fa:	2201      	movs	r2, #1
 80038fc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80038fe:	4b38      	ldr	r3, [pc, #224]	; (80039e0 <HAL_FMC_MspInit+0x104>)
 8003900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003902:	4a37      	ldr	r2, [pc, #220]	; (80039e0 <HAL_FMC_MspInit+0x104>)
 8003904:	f043 0301 	orr.w	r3, r3, #1
 8003908:	6393      	str	r3, [r2, #56]	; 0x38
 800390a:	4b35      	ldr	r3, [pc, #212]	; (80039e0 <HAL_FMC_MspInit+0x104>)
 800390c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	603b      	str	r3, [r7, #0]
 8003914:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8003916:	f64f 7383 	movw	r3, #65411	; 0xff83
 800391a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800391c:	2302      	movs	r3, #2
 800391e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003920:	2300      	movs	r3, #0
 8003922:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003924:	2303      	movs	r3, #3
 8003926:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003928:	230c      	movs	r3, #12
 800392a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800392c:	1d3b      	adds	r3, r7, #4
 800392e:	4619      	mov	r1, r3
 8003930:	482c      	ldr	r0, [pc, #176]	; (80039e4 <HAL_FMC_MspInit+0x108>)
 8003932:	f002 f9d7 	bl	8005ce4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8003936:	f248 1333 	movw	r3, #33075	; 0x8133
 800393a:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800393c:	2302      	movs	r3, #2
 800393e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003940:	2300      	movs	r3, #0
 8003942:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003944:	2303      	movs	r3, #3
 8003946:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003948:	230c      	movs	r3, #12
 800394a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800394c:	1d3b      	adds	r3, r7, #4
 800394e:	4619      	mov	r1, r3
 8003950:	4825      	ldr	r0, [pc, #148]	; (80039e8 <HAL_FMC_MspInit+0x10c>)
 8003952:	f002 f9c7 	bl	8005ce4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8003956:	f24c 7303 	movw	r3, #50947	; 0xc703
 800395a:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800395c:	2302      	movs	r3, #2
 800395e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003960:	2300      	movs	r3, #0
 8003962:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003964:	2303      	movs	r3, #3
 8003966:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003968:	230c      	movs	r3, #12
 800396a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800396c:	1d3b      	adds	r3, r7, #4
 800396e:	4619      	mov	r1, r3
 8003970:	481e      	ldr	r0, [pc, #120]	; (80039ec <HAL_FMC_MspInit+0x110>)
 8003972:	f002 f9b7 	bl	8005ce4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8003976:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800397a:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800397c:	2302      	movs	r3, #2
 800397e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003980:	2300      	movs	r3, #0
 8003982:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003984:	2303      	movs	r3, #3
 8003986:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003988:	230c      	movs	r3, #12
 800398a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800398c:	1d3b      	adds	r3, r7, #4
 800398e:	4619      	mov	r1, r3
 8003990:	4817      	ldr	r0, [pc, #92]	; (80039f0 <HAL_FMC_MspInit+0x114>)
 8003992:	f002 f9a7 	bl	8005ce4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003996:	2328      	movs	r3, #40	; 0x28
 8003998:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800399a:	2302      	movs	r3, #2
 800399c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800399e:	2300      	movs	r3, #0
 80039a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039a2:	2303      	movs	r3, #3
 80039a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80039a6:	230c      	movs	r3, #12
 80039a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80039aa:	1d3b      	adds	r3, r7, #4
 80039ac:	4619      	mov	r1, r3
 80039ae:	4811      	ldr	r0, [pc, #68]	; (80039f4 <HAL_FMC_MspInit+0x118>)
 80039b0:	f002 f998 	bl	8005ce4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80039b4:	2308      	movs	r3, #8
 80039b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b8:	2302      	movs	r3, #2
 80039ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039bc:	2300      	movs	r3, #0
 80039be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039c0:	2303      	movs	r3, #3
 80039c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80039c4:	230c      	movs	r3, #12
 80039c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80039c8:	1d3b      	adds	r3, r7, #4
 80039ca:	4619      	mov	r1, r3
 80039cc:	480a      	ldr	r0, [pc, #40]	; (80039f8 <HAL_FMC_MspInit+0x11c>)
 80039ce:	f002 f989 	bl	8005ce4 <HAL_GPIO_Init>
 80039d2:	e000      	b.n	80039d6 <HAL_FMC_MspInit+0xfa>
    return;
 80039d4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80039d6:	3718      	adds	r7, #24
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	20000b24 	.word	0x20000b24
 80039e0:	40023800 	.word	0x40023800
 80039e4:	40021000 	.word	0x40021000
 80039e8:	40021800 	.word	0x40021800
 80039ec:	40020c00 	.word	0x40020c00
 80039f0:	40021400 	.word	0x40021400
 80039f4:	40021c00 	.word	0x40021c00
 80039f8:	40020800 	.word	0x40020800

080039fc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003a04:	f7ff ff6a 	bl	80038dc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003a08:	bf00      	nop
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b08a      	sub	sp, #40	; 0x28
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a2b      	ldr	r2, [pc, #172]	; (8003acc <HAL_SAI_MspInit+0xbc>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d124      	bne.n	8003a6c <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8003a22:	4b2b      	ldr	r3, [pc, #172]	; (8003ad0 <HAL_SAI_MspInit+0xc0>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10b      	bne.n	8003a42 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003a2a:	4b2a      	ldr	r3, [pc, #168]	; (8003ad4 <HAL_SAI_MspInit+0xc4>)
 8003a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2e:	4a29      	ldr	r2, [pc, #164]	; (8003ad4 <HAL_SAI_MspInit+0xc4>)
 8003a30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a34:	6453      	str	r3, [r2, #68]	; 0x44
 8003a36:	4b27      	ldr	r3, [pc, #156]	; (8003ad4 <HAL_SAI_MspInit+0xc4>)
 8003a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a3e:	613b      	str	r3, [r7, #16]
 8003a40:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8003a42:	4b23      	ldr	r3, [pc, #140]	; (8003ad0 <HAL_SAI_MspInit+0xc0>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	3301      	adds	r3, #1
 8003a48:	4a21      	ldr	r2, [pc, #132]	; (8003ad0 <HAL_SAI_MspInit+0xc0>)
 8003a4a:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8003a4c:	23f0      	movs	r3, #240	; 0xf0
 8003a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a50:	2302      	movs	r3, #2
 8003a52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a54:	2300      	movs	r3, #0
 8003a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003a5c:	230a      	movs	r3, #10
 8003a5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003a60:	f107 0314 	add.w	r3, r7, #20
 8003a64:	4619      	mov	r1, r3
 8003a66:	481c      	ldr	r0, [pc, #112]	; (8003ad8 <HAL_SAI_MspInit+0xc8>)
 8003a68:	f002 f93c 	bl	8005ce4 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a1a      	ldr	r2, [pc, #104]	; (8003adc <HAL_SAI_MspInit+0xcc>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d125      	bne.n	8003ac2 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8003a76:	4b16      	ldr	r3, [pc, #88]	; (8003ad0 <HAL_SAI_MspInit+0xc0>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10b      	bne.n	8003a96 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003a7e:	4b15      	ldr	r3, [pc, #84]	; (8003ad4 <HAL_SAI_MspInit+0xc4>)
 8003a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a82:	4a14      	ldr	r2, [pc, #80]	; (8003ad4 <HAL_SAI_MspInit+0xc4>)
 8003a84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a88:	6453      	str	r3, [r2, #68]	; 0x44
 8003a8a:	4b12      	ldr	r3, [pc, #72]	; (8003ad4 <HAL_SAI_MspInit+0xc4>)
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a92:	60fb      	str	r3, [r7, #12]
 8003a94:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8003a96:	4b0e      	ldr	r3, [pc, #56]	; (8003ad0 <HAL_SAI_MspInit+0xc0>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	4a0c      	ldr	r2, [pc, #48]	; (8003ad0 <HAL_SAI_MspInit+0xc0>)
 8003a9e:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003aa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003ab2:	230a      	movs	r3, #10
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8003ab6:	f107 0314 	add.w	r3, r7, #20
 8003aba:	4619      	mov	r1, r3
 8003abc:	4808      	ldr	r0, [pc, #32]	; (8003ae0 <HAL_SAI_MspInit+0xd0>)
 8003abe:	f002 f911 	bl	8005ce4 <HAL_GPIO_Init>

    }
}
 8003ac2:	bf00      	nop
 8003ac4:	3728      	adds	r7, #40	; 0x28
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	40015c04 	.word	0x40015c04
 8003ad0:	20000b28 	.word	0x20000b28
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	40022000 	.word	0x40022000
 8003adc:	40015c24 	.word	0x40015c24
 8003ae0:	40021800 	.word	0x40021800

08003ae4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b08c      	sub	sp, #48	; 0x30
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003aec:	2300      	movs	r3, #0
 8003aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003af0:	2300      	movs	r3, #0
 8003af2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8003af4:	2200      	movs	r2, #0
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	2036      	movs	r0, #54	; 0x36
 8003afa:	f001 fac5 	bl	8005088 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8003afe:	2036      	movs	r0, #54	; 0x36
 8003b00:	f001 fade 	bl	80050c0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003b04:	4b1f      	ldr	r3, [pc, #124]	; (8003b84 <HAL_InitTick+0xa0>)
 8003b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b08:	4a1e      	ldr	r2, [pc, #120]	; (8003b84 <HAL_InitTick+0xa0>)
 8003b0a:	f043 0310 	orr.w	r3, r3, #16
 8003b0e:	6413      	str	r3, [r2, #64]	; 0x40
 8003b10:	4b1c      	ldr	r3, [pc, #112]	; (8003b84 <HAL_InitTick+0xa0>)
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	f003 0310 	and.w	r3, r3, #16
 8003b18:	60fb      	str	r3, [r7, #12]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b1c:	f107 0210 	add.w	r2, r7, #16
 8003b20:	f107 0314 	add.w	r3, r7, #20
 8003b24:	4611      	mov	r1, r2
 8003b26:	4618      	mov	r0, r3
 8003b28:	f003 fbfe 	bl	8007328 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003b2c:	f003 fbd4 	bl	80072d8 <HAL_RCC_GetPCLK1Freq>
 8003b30:	4603      	mov	r3, r0
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b38:	4a13      	ldr	r2, [pc, #76]	; (8003b88 <HAL_InitTick+0xa4>)
 8003b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3e:	0c9b      	lsrs	r3, r3, #18
 8003b40:	3b01      	subs	r3, #1
 8003b42:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003b44:	4b11      	ldr	r3, [pc, #68]	; (8003b8c <HAL_InitTick+0xa8>)
 8003b46:	4a12      	ldr	r2, [pc, #72]	; (8003b90 <HAL_InitTick+0xac>)
 8003b48:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8003b4a:	4b10      	ldr	r3, [pc, #64]	; (8003b8c <HAL_InitTick+0xa8>)
 8003b4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003b50:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003b52:	4a0e      	ldr	r2, [pc, #56]	; (8003b8c <HAL_InitTick+0xa8>)
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b56:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003b58:	4b0c      	ldr	r3, [pc, #48]	; (8003b8c <HAL_InitTick+0xa8>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b5e:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <HAL_InitTick+0xa8>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003b64:	4809      	ldr	r0, [pc, #36]	; (8003b8c <HAL_InitTick+0xa8>)
 8003b66:	f006 f889 	bl	8009c7c <HAL_TIM_Base_Init>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d104      	bne.n	8003b7a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003b70:	4806      	ldr	r0, [pc, #24]	; (8003b8c <HAL_InitTick+0xa8>)
 8003b72:	f006 f8af 	bl	8009cd4 <HAL_TIM_Base_Start_IT>
 8003b76:	4603      	mov	r3, r0
 8003b78:	e000      	b.n	8003b7c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3730      	adds	r7, #48	; 0x30
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40023800 	.word	0x40023800
 8003b88:	431bde83 	.word	0x431bde83
 8003b8c:	20000b2c 	.word	0x20000b2c
 8003b90:	40001000 	.word	0x40001000

08003b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003b98:	bf00      	nop
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ba6:	e7fe      	b.n	8003ba6 <HardFault_Handler+0x4>

08003ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bac:	e7fe      	b.n	8003bac <MemManage_Handler+0x4>

08003bae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bb2:	e7fe      	b.n	8003bb2 <BusFault_Handler+0x4>

08003bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bb8:	e7fe      	b.n	8003bb8 <UsageFault_Handler+0x4>

08003bba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bbe:	bf00      	nop
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003bcc:	4802      	ldr	r0, [pc, #8]	; (8003bd8 <CAN1_RX0_IRQHandler+0x10>)
 8003bce:	f000 ff4f 	bl	8004a70 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003bd2:	bf00      	nop
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	200003c4 	.word	0x200003c4

08003bdc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003be0:	4802      	ldr	r0, [pc, #8]	; (8003bec <TIM6_DAC_IRQHandler+0x10>)
 8003be2:	f006 f8cc 	bl	8009d7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003be6:	bf00      	nop
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	20000b2c 	.word	0x20000b2c

08003bf0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003bf4:	4802      	ldr	r0, [pc, #8]	; (8003c00 <LTDC_IRQHandler+0x10>)
 8003bf6:	f002 fb23 	bl	8006240 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003bfa:	bf00      	nop
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	200004c4 	.word	0x200004c4

08003c04 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003c08:	4802      	ldr	r0, [pc, #8]	; (8003c14 <DMA2D_IRQHandler+0x10>)
 8003c0a:	f001 fe2c 	bl	8005866 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003c0e:	bf00      	nop
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	20000484 	.word	0x20000484

08003c18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
	return 1;
 8003c1c:	2301      	movs	r3, #1
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <_kill>:

int _kill(int pid, int sig)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003c32:	f023 f879 	bl	8026d28 <__errno>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2216      	movs	r2, #22
 8003c3a:	601a      	str	r2, [r3, #0]
	return -1;
 8003c3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3708      	adds	r7, #8
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <_exit>:

void _exit (int status)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003c50:	f04f 31ff 	mov.w	r1, #4294967295
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f7ff ffe7 	bl	8003c28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003c5a:	e7fe      	b.n	8003c5a <_exit+0x12>

08003c5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c68:	2300      	movs	r3, #0
 8003c6a:	617b      	str	r3, [r7, #20]
 8003c6c:	e00a      	b.n	8003c84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003c6e:	f3af 8000 	nop.w
 8003c72:	4601      	mov	r1, r0
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	60ba      	str	r2, [r7, #8]
 8003c7a:	b2ca      	uxtb	r2, r1
 8003c7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	3301      	adds	r3, #1
 8003c82:	617b      	str	r3, [r7, #20]
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	dbf0      	blt.n	8003c6e <_read+0x12>
	}

return len;
 8003c8c:	687b      	ldr	r3, [r7, #4]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3718      	adds	r7, #24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b086      	sub	sp, #24
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	60f8      	str	r0, [r7, #12]
 8003c9e:	60b9      	str	r1, [r7, #8]
 8003ca0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	617b      	str	r3, [r7, #20]
 8003ca6:	e009      	b.n	8003cbc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	1c5a      	adds	r2, r3, #1
 8003cac:	60ba      	str	r2, [r7, #8]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	617b      	str	r3, [r7, #20]
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	dbf1      	blt.n	8003ca8 <_write+0x12>
	}
	return len;
 8003cc4:	687b      	ldr	r3, [r7, #4]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3718      	adds	r7, #24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <_close>:

int _close(int file)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
	return -1;
 8003cd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
 8003cee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cf6:	605a      	str	r2, [r3, #4]
	return 0;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <_isatty>:

int _isatty(int file)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
	return 1;
 8003d0e:	2301      	movs	r3, #1
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
	return 0;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
	...

08003d38 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003d40:	4b11      	ldr	r3, [pc, #68]	; (8003d88 <_sbrk+0x50>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d102      	bne.n	8003d4e <_sbrk+0x16>
		heap_end = &end;
 8003d48:	4b0f      	ldr	r3, [pc, #60]	; (8003d88 <_sbrk+0x50>)
 8003d4a:	4a10      	ldr	r2, [pc, #64]	; (8003d8c <_sbrk+0x54>)
 8003d4c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003d4e:	4b0e      	ldr	r3, [pc, #56]	; (8003d88 <_sbrk+0x50>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003d54:	4b0c      	ldr	r3, [pc, #48]	; (8003d88 <_sbrk+0x50>)
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	466a      	mov	r2, sp
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d907      	bls.n	8003d72 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003d62:	f022 ffe1 	bl	8026d28 <__errno>
 8003d66:	4603      	mov	r3, r0
 8003d68:	220c      	movs	r2, #12
 8003d6a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d70:	e006      	b.n	8003d80 <_sbrk+0x48>
	}

	heap_end += incr;
 8003d72:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <_sbrk+0x50>)
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4413      	add	r3, r2
 8003d7a:	4a03      	ldr	r2, [pc, #12]	; (8003d88 <_sbrk+0x50>)
 8003d7c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	20000b6c 	.word	0x20000b6c
 8003d8c:	2000ca90 	.word	0x2000ca90

08003d90 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d94:	4b08      	ldr	r3, [pc, #32]	; (8003db8 <SystemInit+0x28>)
 8003d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9a:	4a07      	ldr	r2, [pc, #28]	; (8003db8 <SystemInit+0x28>)
 8003d9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003da0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003da4:	4b04      	ldr	r3, [pc, #16]	; (8003db8 <SystemInit+0x28>)
 8003da6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003daa:	609a      	str	r2, [r3, #8]
#endif
}
 8003dac:	bf00      	nop
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	e000ed00 	.word	0xe000ed00

08003dbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003dbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003df4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003dc0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003dc2:	e003      	b.n	8003dcc <LoopCopyDataInit>

08003dc4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003dc4:	4b0c      	ldr	r3, [pc, #48]	; (8003df8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003dc6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003dc8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003dca:	3104      	adds	r1, #4

08003dcc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003dcc:	480b      	ldr	r0, [pc, #44]	; (8003dfc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003dce:	4b0c      	ldr	r3, [pc, #48]	; (8003e00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003dd0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003dd2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003dd4:	d3f6      	bcc.n	8003dc4 <CopyDataInit>
  ldr  r2, =_sbss
 8003dd6:	4a0b      	ldr	r2, [pc, #44]	; (8003e04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003dd8:	e002      	b.n	8003de0 <LoopFillZerobss>

08003dda <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003dda:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003ddc:	f842 3b04 	str.w	r3, [r2], #4

08003de0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003de0:	4b09      	ldr	r3, [pc, #36]	; (8003e08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003de2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003de4:	d3f9      	bcc.n	8003dda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003de6:	f7ff ffd3 	bl	8003d90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003dea:	f022 ffa3 	bl	8026d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003dee:	f7fd f9c5 	bl	800117c <main>
  bx  lr    
 8003df2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003df4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003df8:	08063528 	.word	0x08063528
  ldr  r0, =_sdata
 8003dfc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003e00:	20000108 	.word	0x20000108
  ldr  r2, =_sbss
 8003e04:	20000108 	.word	0x20000108
  ldr  r3, = _ebss
 8003e08:	2000ca8c 	.word	0x2000ca8c

08003e0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e0c:	e7fe      	b.n	8003e0c <ADC_IRQHandler>

08003e0e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e12:	2003      	movs	r0, #3
 8003e14:	f001 f92d 	bl	8005072 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e18:	2000      	movs	r0, #0
 8003e1a:	f7ff fe63 	bl	8003ae4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003e1e:	f7fe ff09 	bl	8002c34 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e2c:	4b06      	ldr	r3, [pc, #24]	; (8003e48 <HAL_IncTick+0x20>)
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	461a      	mov	r2, r3
 8003e32:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <HAL_IncTick+0x24>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4413      	add	r3, r2
 8003e38:	4a04      	ldr	r2, [pc, #16]	; (8003e4c <HAL_IncTick+0x24>)
 8003e3a:	6013      	str	r3, [r2, #0]
}
 8003e3c:	bf00      	nop
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	20000020 	.word	0x20000020
 8003e4c:	20000b70 	.word	0x20000b70

08003e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
  return uwTick;
 8003e54:	4b03      	ldr	r3, [pc, #12]	; (8003e64 <HAL_GetTick+0x14>)
 8003e56:	681b      	ldr	r3, [r3, #0]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	20000b70 	.word	0x20000b70

08003e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e70:	f7ff ffee 	bl	8003e50 <HAL_GetTick>
 8003e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e80:	d005      	beq.n	8003e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e82:	4b0a      	ldr	r3, [pc, #40]	; (8003eac <HAL_Delay+0x44>)
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	461a      	mov	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e8e:	bf00      	nop
 8003e90:	f7ff ffde 	bl	8003e50 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d8f7      	bhi.n	8003e90 <HAL_Delay+0x28>
  {
  }
}
 8003ea0:	bf00      	nop
 8003ea2:	bf00      	nop
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	20000020 	.word	0x20000020

08003eb0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e031      	b.n	8003f2a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d109      	bne.n	8003ee2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7fe fed8 	bl	8002c84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	f003 0310 	and.w	r3, r3, #16
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d116      	bne.n	8003f1c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ef2:	4b10      	ldr	r3, [pc, #64]	; (8003f34 <HAL_ADC_Init+0x84>)
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	f043 0202 	orr.w	r2, r3, #2
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f964 	bl	80041cc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	f023 0303 	bic.w	r3, r3, #3
 8003f12:	f043 0201 	orr.w	r2, r3, #1
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	641a      	str	r2, [r3, #64]	; 0x40
 8003f1a:	e001      	b.n	8003f20 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	ffffeefd 	.word	0xffffeefd

08003f38 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003f42:	2300      	movs	r3, #0
 8003f44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <HAL_ADC_ConfigChannel+0x1c>
 8003f50:	2302      	movs	r3, #2
 8003f52:	e12a      	b.n	80041aa <HAL_ADC_ConfigChannel+0x272>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b09      	cmp	r3, #9
 8003f62:	d93a      	bls.n	8003fda <HAL_ADC_ConfigChannel+0xa2>
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f6c:	d035      	beq.n	8003fda <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68d9      	ldr	r1, [r3, #12]
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	4413      	add	r3, r2
 8003f82:	3b1e      	subs	r3, #30
 8003f84:	2207      	movs	r2, #7
 8003f86:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8a:	43da      	mvns	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	400a      	ands	r2, r1
 8003f92:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a87      	ldr	r2, [pc, #540]	; (80041b8 <HAL_ADC_ConfigChannel+0x280>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d10a      	bne.n	8003fb4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68d9      	ldr	r1, [r3, #12]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	061a      	lsls	r2, r3, #24
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003fb2:	e035      	b.n	8004020 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68d9      	ldr	r1, [r3, #12]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	689a      	ldr	r2, [r3, #8]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	4403      	add	r3, r0
 8003fcc:	3b1e      	subs	r3, #30
 8003fce:	409a      	lsls	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003fd8:	e022      	b.n	8004020 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6919      	ldr	r1, [r3, #16]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	4613      	mov	r3, r2
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	4413      	add	r3, r2
 8003fee:	2207      	movs	r2, #7
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	43da      	mvns	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	400a      	ands	r2, r1
 8003ffc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6919      	ldr	r1, [r3, #16]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	b29b      	uxth	r3, r3
 800400e:	4618      	mov	r0, r3
 8004010:	4603      	mov	r3, r0
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	4403      	add	r3, r0
 8004016:	409a      	lsls	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2b06      	cmp	r3, #6
 8004026:	d824      	bhi.n	8004072 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	4613      	mov	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4413      	add	r3, r2
 8004038:	3b05      	subs	r3, #5
 800403a:	221f      	movs	r2, #31
 800403c:	fa02 f303 	lsl.w	r3, r2, r3
 8004040:	43da      	mvns	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	400a      	ands	r2, r1
 8004048:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	b29b      	uxth	r3, r3
 8004056:	4618      	mov	r0, r3
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	4613      	mov	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	3b05      	subs	r3, #5
 8004064:	fa00 f203 	lsl.w	r2, r0, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	635a      	str	r2, [r3, #52]	; 0x34
 8004070:	e04c      	b.n	800410c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	2b0c      	cmp	r3, #12
 8004078:	d824      	bhi.n	80040c4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	4613      	mov	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	3b23      	subs	r3, #35	; 0x23
 800408c:	221f      	movs	r2, #31
 800408e:	fa02 f303 	lsl.w	r3, r2, r3
 8004092:	43da      	mvns	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	400a      	ands	r2, r1
 800409a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	4618      	mov	r0, r3
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	4613      	mov	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4413      	add	r3, r2
 80040b4:	3b23      	subs	r3, #35	; 0x23
 80040b6:	fa00 f203 	lsl.w	r2, r0, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	631a      	str	r2, [r3, #48]	; 0x30
 80040c2:	e023      	b.n	800410c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	4613      	mov	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	3b41      	subs	r3, #65	; 0x41
 80040d6:	221f      	movs	r2, #31
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	43da      	mvns	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	400a      	ands	r2, r1
 80040e4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	4618      	mov	r0, r3
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	4613      	mov	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4413      	add	r3, r2
 80040fe:	3b41      	subs	r3, #65	; 0x41
 8004100:	fa00 f203 	lsl.w	r2, r0, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	430a      	orrs	r2, r1
 800410a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a2a      	ldr	r2, [pc, #168]	; (80041bc <HAL_ADC_ConfigChannel+0x284>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d10a      	bne.n	800412c <HAL_ADC_ConfigChannel+0x1f4>
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800411e:	d105      	bne.n	800412c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004120:	4b27      	ldr	r3, [pc, #156]	; (80041c0 <HAL_ADC_ConfigChannel+0x288>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	4a26      	ldr	r2, [pc, #152]	; (80041c0 <HAL_ADC_ConfigChannel+0x288>)
 8004126:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800412a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a22      	ldr	r2, [pc, #136]	; (80041bc <HAL_ADC_ConfigChannel+0x284>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d109      	bne.n	800414a <HAL_ADC_ConfigChannel+0x212>
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2b12      	cmp	r3, #18
 800413c:	d105      	bne.n	800414a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800413e:	4b20      	ldr	r3, [pc, #128]	; (80041c0 <HAL_ADC_ConfigChannel+0x288>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	4a1f      	ldr	r2, [pc, #124]	; (80041c0 <HAL_ADC_ConfigChannel+0x288>)
 8004144:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004148:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a1b      	ldr	r2, [pc, #108]	; (80041bc <HAL_ADC_ConfigChannel+0x284>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d125      	bne.n	80041a0 <HAL_ADC_ConfigChannel+0x268>
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a17      	ldr	r2, [pc, #92]	; (80041b8 <HAL_ADC_ConfigChannel+0x280>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d003      	beq.n	8004166 <HAL_ADC_ConfigChannel+0x22e>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b11      	cmp	r3, #17
 8004164:	d11c      	bne.n	80041a0 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004166:	4b16      	ldr	r3, [pc, #88]	; (80041c0 <HAL_ADC_ConfigChannel+0x288>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	4a15      	ldr	r2, [pc, #84]	; (80041c0 <HAL_ADC_ConfigChannel+0x288>)
 800416c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004170:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a10      	ldr	r2, [pc, #64]	; (80041b8 <HAL_ADC_ConfigChannel+0x280>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d111      	bne.n	80041a0 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800417c:	4b11      	ldr	r3, [pc, #68]	; (80041c4 <HAL_ADC_ConfigChannel+0x28c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a11      	ldr	r2, [pc, #68]	; (80041c8 <HAL_ADC_ConfigChannel+0x290>)
 8004182:	fba2 2303 	umull	r2, r3, r2, r3
 8004186:	0c9a      	lsrs	r2, r3, #18
 8004188:	4613      	mov	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4413      	add	r3, r2
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004192:	e002      	b.n	800419a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	3b01      	subs	r3, #1
 8004198:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1f9      	bne.n	8004194 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	10000012 	.word	0x10000012
 80041bc:	40012000 	.word	0x40012000
 80041c0:	40012300 	.word	0x40012300
 80041c4:	20000018 	.word	0x20000018
 80041c8:	431bde83 	.word	0x431bde83

080041cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80041d4:	4b78      	ldr	r3, [pc, #480]	; (80043b8 <ADC_Init+0x1ec>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	4a77      	ldr	r2, [pc, #476]	; (80043b8 <ADC_Init+0x1ec>)
 80041da:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80041de:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80041e0:	4b75      	ldr	r3, [pc, #468]	; (80043b8 <ADC_Init+0x1ec>)
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	4973      	ldr	r1, [pc, #460]	; (80043b8 <ADC_Init+0x1ec>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6859      	ldr	r1, [r3, #4]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	021a      	lsls	r2, r3, #8
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004220:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6859      	ldr	r1, [r3, #4]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689a      	ldr	r2, [r3, #8]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004242:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6899      	ldr	r1, [r3, #8]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425a:	4a58      	ldr	r2, [pc, #352]	; (80043bc <ADC_Init+0x1f0>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d022      	beq.n	80042a6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689a      	ldr	r2, [r3, #8]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800426e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6899      	ldr	r1, [r3, #8]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	430a      	orrs	r2, r1
 8004280:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004290:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6899      	ldr	r1, [r3, #8]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	609a      	str	r2, [r3, #8]
 80042a4:	e00f      	b.n	80042c6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80042c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0202 	bic.w	r2, r2, #2
 80042d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	6899      	ldr	r1, [r3, #8]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	005a      	lsls	r2, r3, #1
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d01b      	beq.n	800432c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004302:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004312:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	6859      	ldr	r1, [r3, #4]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431e:	3b01      	subs	r3, #1
 8004320:	035a      	lsls	r2, r3, #13
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	605a      	str	r2, [r3, #4]
 800432a:	e007      	b.n	800433c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800433a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800434a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	3b01      	subs	r3, #1
 8004358:	051a      	lsls	r2, r3, #20
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	689a      	ldr	r2, [r3, #8]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004370:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6899      	ldr	r1, [r3, #8]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800437e:	025a      	lsls	r2, r3, #9
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689a      	ldr	r2, [r3, #8]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004396:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6899      	ldr	r1, [r3, #8]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	029a      	lsls	r2, r3, #10
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	430a      	orrs	r2, r1
 80043aa:	609a      	str	r2, [r3, #8]
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr
 80043b8:	40012300 	.word	0x40012300
 80043bc:	0f000001 	.word	0x0f000001

080043c0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e0ed      	b.n	80045ae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d102      	bne.n	80043e4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7fe fcaa 	bl	8002d38 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0202 	bic.w	r2, r2, #2
 80043f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043f4:	f7ff fd2c 	bl	8003e50 <HAL_GetTick>
 80043f8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80043fa:	e012      	b.n	8004422 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80043fc:	f7ff fd28 	bl	8003e50 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b0a      	cmp	r3, #10
 8004408:	d90b      	bls.n	8004422 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2205      	movs	r2, #5
 800441a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e0c5      	b.n	80045ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1e5      	bne.n	80043fc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 0201 	orr.w	r2, r2, #1
 800443e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004440:	f7ff fd06 	bl	8003e50 <HAL_GetTick>
 8004444:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004446:	e012      	b.n	800446e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004448:	f7ff fd02 	bl	8003e50 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b0a      	cmp	r3, #10
 8004454:	d90b      	bls.n	800446e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2205      	movs	r2, #5
 8004466:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e09f      	b.n	80045ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0e5      	beq.n	8004448 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	7e1b      	ldrb	r3, [r3, #24]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d108      	bne.n	8004496 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	e007      	b.n	80044a6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	7e5b      	ldrb	r3, [r3, #25]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d108      	bne.n	80044c0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044bc:	601a      	str	r2, [r3, #0]
 80044be:	e007      	b.n	80044d0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	7e9b      	ldrb	r3, [r3, #26]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d108      	bne.n	80044ea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f042 0220 	orr.w	r2, r2, #32
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	e007      	b.n	80044fa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 0220 	bic.w	r2, r2, #32
 80044f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	7edb      	ldrb	r3, [r3, #27]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d108      	bne.n	8004514 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 0210 	bic.w	r2, r2, #16
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	e007      	b.n	8004524 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0210 	orr.w	r2, r2, #16
 8004522:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	7f1b      	ldrb	r3, [r3, #28]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d108      	bne.n	800453e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f042 0208 	orr.w	r2, r2, #8
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	e007      	b.n	800454e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0208 	bic.w	r2, r2, #8
 800454c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	7f5b      	ldrb	r3, [r3, #29]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d108      	bne.n	8004568 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f042 0204 	orr.w	r2, r2, #4
 8004564:	601a      	str	r2, [r3, #0]
 8004566:	e007      	b.n	8004578 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 0204 	bic.w	r2, r2, #4
 8004576:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689a      	ldr	r2, [r3, #8]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	431a      	orrs	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	ea42 0103 	orr.w	r1, r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	1e5a      	subs	r2, r3, #1
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
	...

080045b8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045ce:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80045d0:	7cfb      	ldrb	r3, [r7, #19]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d003      	beq.n	80045de <HAL_CAN_ConfigFilter+0x26>
 80045d6:	7cfb      	ldrb	r3, [r7, #19]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	f040 80be 	bne.w	800475a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80045de:	4b65      	ldr	r3, [pc, #404]	; (8004774 <HAL_CAN_ConfigFilter+0x1bc>)
 80045e0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80045e8:	f043 0201 	orr.w	r2, r3, #1
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80045f8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	021b      	lsls	r3, r3, #8
 800460e:	431a      	orrs	r2, r3
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	f003 031f 	and.w	r3, r3, #31
 800461e:	2201      	movs	r2, #1
 8004620:	fa02 f303 	lsl.w	r3, r2, r3
 8004624:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	43db      	mvns	r3, r3
 8004630:	401a      	ands	r2, r3
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	69db      	ldr	r3, [r3, #28]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d123      	bne.n	8004688 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	43db      	mvns	r3, r3
 800464a:	401a      	ands	r2, r3
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004662:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	3248      	adds	r2, #72	; 0x48
 8004668:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800467c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800467e:	6979      	ldr	r1, [r7, #20]
 8004680:	3348      	adds	r3, #72	; 0x48
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	440b      	add	r3, r1
 8004686:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	69db      	ldr	r3, [r3, #28]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d122      	bne.n	80046d6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	431a      	orrs	r2, r3
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80046b0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	3248      	adds	r2, #72	; 0x48
 80046b6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80046ca:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80046cc:	6979      	ldr	r1, [r7, #20]
 80046ce:	3348      	adds	r3, #72	; 0x48
 80046d0:	00db      	lsls	r3, r3, #3
 80046d2:	440b      	add	r3, r1
 80046d4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d109      	bne.n	80046f2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	43db      	mvns	r3, r3
 80046e8:	401a      	ands	r2, r3
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80046f0:	e007      	b.n	8004702 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	431a      	orrs	r2, r3
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d109      	bne.n	800471e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	43db      	mvns	r3, r3
 8004714:	401a      	ands	r2, r3
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800471c:	e007      	b.n	800472e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	431a      	orrs	r2, r3
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d107      	bne.n	8004746 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	431a      	orrs	r2, r3
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800474c:	f023 0201 	bic.w	r2, r3, #1
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004756:	2300      	movs	r3, #0
 8004758:	e006      	b.n	8004768 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
  }
}
 8004768:	4618      	mov	r0, r3
 800476a:	371c      	adds	r7, #28
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr
 8004774:	40006400 	.word	0x40006400

08004778 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b01      	cmp	r3, #1
 800478a:	d12e      	bne.n	80047ea <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2202      	movs	r2, #2
 8004790:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 0201 	bic.w	r2, r2, #1
 80047a2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80047a4:	f7ff fb54 	bl	8003e50 <HAL_GetTick>
 80047a8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80047aa:	e012      	b.n	80047d2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80047ac:	f7ff fb50 	bl	8003e50 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b0a      	cmp	r3, #10
 80047b8:	d90b      	bls.n	80047d2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2205      	movs	r2, #5
 80047ca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e012      	b.n	80047f8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1e5      	bne.n	80047ac <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	e006      	b.n	80047f8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
  }
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004800:	b480      	push	{r7}
 8004802:	b087      	sub	sp, #28
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
 800480c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004814:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004816:	7dfb      	ldrb	r3, [r7, #23]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d003      	beq.n	8004824 <HAL_CAN_GetRxMessage+0x24>
 800481c:	7dfb      	ldrb	r3, [r7, #23]
 800481e:	2b02      	cmp	r3, #2
 8004820:	f040 80f3 	bne.w	8004a0a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10e      	bne.n	8004848 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f003 0303 	and.w	r3, r3, #3
 8004834:	2b00      	cmp	r3, #0
 8004836:	d116      	bne.n	8004866 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e0e7      	b.n	8004a18 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d107      	bne.n	8004866 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e0d8      	b.n	8004a18 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	331b      	adds	r3, #27
 800486e:	011b      	lsls	r3, r3, #4
 8004870:	4413      	add	r3, r2
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0204 	and.w	r2, r3, #4
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10c      	bne.n	800489e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	331b      	adds	r3, #27
 800488c:	011b      	lsls	r3, r3, #4
 800488e:	4413      	add	r3, r2
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	0d5b      	lsrs	r3, r3, #21
 8004894:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	e00b      	b.n	80048b6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	331b      	adds	r3, #27
 80048a6:	011b      	lsls	r3, r3, #4
 80048a8:	4413      	add	r3, r2
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	08db      	lsrs	r3, r3, #3
 80048ae:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	331b      	adds	r3, #27
 80048be:	011b      	lsls	r3, r3, #4
 80048c0:	4413      	add	r3, r2
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0202 	and.w	r2, r3, #2
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	331b      	adds	r3, #27
 80048d4:	011b      	lsls	r3, r3, #4
 80048d6:	4413      	add	r3, r2
 80048d8:	3304      	adds	r3, #4
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 020f 	and.w	r2, r3, #15
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	331b      	adds	r3, #27
 80048ec:	011b      	lsls	r3, r3, #4
 80048ee:	4413      	add	r3, r2
 80048f0:	3304      	adds	r3, #4
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	0a1b      	lsrs	r3, r3, #8
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	331b      	adds	r3, #27
 8004904:	011b      	lsls	r3, r3, #4
 8004906:	4413      	add	r3, r2
 8004908:	3304      	adds	r3, #4
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	0c1b      	lsrs	r3, r3, #16
 800490e:	b29a      	uxth	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	011b      	lsls	r3, r3, #4
 800491c:	4413      	add	r3, r2
 800491e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	b2da      	uxtb	r2, r3
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	011b      	lsls	r3, r3, #4
 8004932:	4413      	add	r3, r2
 8004934:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	0a1a      	lsrs	r2, r3, #8
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	3301      	adds	r3, #1
 8004940:	b2d2      	uxtb	r2, r2
 8004942:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	011b      	lsls	r3, r3, #4
 800494c:	4413      	add	r3, r2
 800494e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	0c1a      	lsrs	r2, r3, #16
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	3302      	adds	r3, #2
 800495a:	b2d2      	uxtb	r2, r2
 800495c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	011b      	lsls	r3, r3, #4
 8004966:	4413      	add	r3, r2
 8004968:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	0e1a      	lsrs	r2, r3, #24
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	3303      	adds	r3, #3
 8004974:	b2d2      	uxtb	r2, r2
 8004976:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	011b      	lsls	r3, r3, #4
 8004980:	4413      	add	r3, r2
 8004982:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	3304      	adds	r3, #4
 800498c:	b2d2      	uxtb	r2, r2
 800498e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	011b      	lsls	r3, r3, #4
 8004998:	4413      	add	r3, r2
 800499a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	0a1a      	lsrs	r2, r3, #8
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	3305      	adds	r3, #5
 80049a6:	b2d2      	uxtb	r2, r2
 80049a8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	011b      	lsls	r3, r3, #4
 80049b2:	4413      	add	r3, r2
 80049b4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	0c1a      	lsrs	r2, r3, #16
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	3306      	adds	r3, #6
 80049c0:	b2d2      	uxtb	r2, r2
 80049c2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	011b      	lsls	r3, r3, #4
 80049cc:	4413      	add	r3, r2
 80049ce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	0e1a      	lsrs	r2, r3, #24
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	3307      	adds	r3, #7
 80049da:	b2d2      	uxtb	r2, r2
 80049dc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d108      	bne.n	80049f6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0220 	orr.w	r2, r2, #32
 80049f2:	60da      	str	r2, [r3, #12]
 80049f4:	e007      	b.n	8004a06 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	691a      	ldr	r2, [r3, #16]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f042 0220 	orr.w	r2, r2, #32
 8004a04:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004a06:	2300      	movs	r3, #0
 8004a08:	e006      	b.n	8004a18 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
  }
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	371c      	adds	r7, #28
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a34:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004a36:	7bfb      	ldrb	r3, [r7, #15]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d002      	beq.n	8004a42 <HAL_CAN_ActivateNotification+0x1e>
 8004a3c:	7bfb      	ldrb	r3, [r7, #15]
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d109      	bne.n	8004a56 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6959      	ldr	r1, [r3, #20]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004a52:	2300      	movs	r3, #0
 8004a54:	e006      	b.n	8004a64 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
  }
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b08a      	sub	sp, #40	; 0x28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004aac:	6a3b      	ldr	r3, [r7, #32]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d07c      	beq.n	8004bb0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d023      	beq.n	8004b08 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d003      	beq.n	8004ada <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f983 	bl	8004dde <HAL_CAN_TxMailbox0CompleteCallback>
 8004ad8:	e016      	b.n	8004b08 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d004      	beq.n	8004aee <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004aea:	627b      	str	r3, [r7, #36]	; 0x24
 8004aec:	e00c      	b.n	8004b08 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	f003 0308 	and.w	r3, r3, #8
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d004      	beq.n	8004b02 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004afe:	627b      	str	r3, [r7, #36]	; 0x24
 8004b00:	e002      	b.n	8004b08 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f989 	bl	8004e1a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d024      	beq.n	8004b5c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b1a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d003      	beq.n	8004b2e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f963 	bl	8004df2 <HAL_CAN_TxMailbox1CompleteCallback>
 8004b2c:	e016      	b.n	8004b5c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d004      	beq.n	8004b42 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b40:	e00c      	b.n	8004b5c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d004      	beq.n	8004b56 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b52:	627b      	str	r3, [r7, #36]	; 0x24
 8004b54:	e002      	b.n	8004b5c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f969 	bl	8004e2e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d024      	beq.n	8004bb0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004b6e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f943 	bl	8004e06 <HAL_CAN_TxMailbox2CompleteCallback>
 8004b80:	e016      	b.n	8004bb0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d004      	beq.n	8004b96 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b92:	627b      	str	r3, [r7, #36]	; 0x24
 8004b94:	e00c      	b.n	8004bb0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d004      	beq.n	8004baa <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ba8:	e002      	b.n	8004bb0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f949 	bl	8004e42 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004bb0:	6a3b      	ldr	r3, [r7, #32]
 8004bb2:	f003 0308 	and.w	r3, r3, #8
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00c      	beq.n	8004bd4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	f003 0310 	and.w	r3, r3, #16
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d007      	beq.n	8004bd4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2210      	movs	r2, #16
 8004bd2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004bd4:	6a3b      	ldr	r3, [r7, #32]
 8004bd6:	f003 0304 	and.w	r3, r3, #4
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00b      	beq.n	8004bf6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	f003 0308 	and.w	r3, r3, #8
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d006      	beq.n	8004bf6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2208      	movs	r2, #8
 8004bee:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 f930 	bl	8004e56 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004bf6:	6a3b      	ldr	r3, [r7, #32]
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d009      	beq.n	8004c14 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	f003 0303 	and.w	r3, r3, #3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d002      	beq.n	8004c14 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f7fc fc92 	bl	8001538 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004c14:	6a3b      	ldr	r3, [r7, #32]
 8004c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00c      	beq.n	8004c38 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	f003 0310 	and.w	r3, r3, #16
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d007      	beq.n	8004c38 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c2e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2210      	movs	r2, #16
 8004c36:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004c38:	6a3b      	ldr	r3, [r7, #32]
 8004c3a:	f003 0320 	and.w	r3, r3, #32
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00b      	beq.n	8004c5a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f003 0308 	and.w	r3, r3, #8
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d006      	beq.n	8004c5a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2208      	movs	r2, #8
 8004c52:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 f912 	bl	8004e7e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	f003 0310 	and.w	r3, r3, #16
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d009      	beq.n	8004c78 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	f003 0303 	and.w	r3, r3, #3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d002      	beq.n	8004c78 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f8f9 	bl	8004e6a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004c78:	6a3b      	ldr	r3, [r7, #32]
 8004c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00b      	beq.n	8004c9a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	f003 0310 	and.w	r3, r3, #16
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d006      	beq.n	8004c9a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2210      	movs	r2, #16
 8004c92:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 f8fc 	bl	8004e92 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004c9a:	6a3b      	ldr	r3, [r7, #32]
 8004c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00b      	beq.n	8004cbc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	f003 0308 	and.w	r3, r3, #8
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d006      	beq.n	8004cbc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2208      	movs	r2, #8
 8004cb4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f8f5 	bl	8004ea6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d07b      	beq.n	8004dbe <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	f003 0304 	and.w	r3, r3, #4
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d072      	beq.n	8004db6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004cd0:	6a3b      	ldr	r3, [r7, #32]
 8004cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d008      	beq.n	8004cec <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d003      	beq.n	8004cec <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce6:	f043 0301 	orr.w	r3, r3, #1
 8004cea:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d008      	beq.n	8004d08 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d003      	beq.n	8004d08 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	f043 0302 	orr.w	r3, r3, #2
 8004d06:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d008      	beq.n	8004d24 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d003      	beq.n	8004d24 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	f043 0304 	orr.w	r3, r3, #4
 8004d22:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004d24:	6a3b      	ldr	r3, [r7, #32]
 8004d26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d043      	beq.n	8004db6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d03e      	beq.n	8004db6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d3e:	2b60      	cmp	r3, #96	; 0x60
 8004d40:	d02b      	beq.n	8004d9a <HAL_CAN_IRQHandler+0x32a>
 8004d42:	2b60      	cmp	r3, #96	; 0x60
 8004d44:	d82e      	bhi.n	8004da4 <HAL_CAN_IRQHandler+0x334>
 8004d46:	2b50      	cmp	r3, #80	; 0x50
 8004d48:	d022      	beq.n	8004d90 <HAL_CAN_IRQHandler+0x320>
 8004d4a:	2b50      	cmp	r3, #80	; 0x50
 8004d4c:	d82a      	bhi.n	8004da4 <HAL_CAN_IRQHandler+0x334>
 8004d4e:	2b40      	cmp	r3, #64	; 0x40
 8004d50:	d019      	beq.n	8004d86 <HAL_CAN_IRQHandler+0x316>
 8004d52:	2b40      	cmp	r3, #64	; 0x40
 8004d54:	d826      	bhi.n	8004da4 <HAL_CAN_IRQHandler+0x334>
 8004d56:	2b30      	cmp	r3, #48	; 0x30
 8004d58:	d010      	beq.n	8004d7c <HAL_CAN_IRQHandler+0x30c>
 8004d5a:	2b30      	cmp	r3, #48	; 0x30
 8004d5c:	d822      	bhi.n	8004da4 <HAL_CAN_IRQHandler+0x334>
 8004d5e:	2b10      	cmp	r3, #16
 8004d60:	d002      	beq.n	8004d68 <HAL_CAN_IRQHandler+0x2f8>
 8004d62:	2b20      	cmp	r3, #32
 8004d64:	d005      	beq.n	8004d72 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004d66:	e01d      	b.n	8004da4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	f043 0308 	orr.w	r3, r3, #8
 8004d6e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004d70:	e019      	b.n	8004da6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	f043 0310 	orr.w	r3, r3, #16
 8004d78:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004d7a:	e014      	b.n	8004da6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7e:	f043 0320 	orr.w	r3, r3, #32
 8004d82:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004d84:	e00f      	b.n	8004da6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d8c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004d8e:	e00a      	b.n	8004da6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d96:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004d98:	e005      	b.n	8004da6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004da0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004da2:	e000      	b.n	8004da6 <HAL_CAN_IRQHandler+0x336>
            break;
 8004da4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	699a      	ldr	r2, [r3, #24]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004db4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2204      	movs	r2, #4
 8004dbc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d008      	beq.n	8004dd6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 f872 	bl	8004eba <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004dd6:	bf00      	nop
 8004dd8:	3728      	adds	r7, #40	; 0x28
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b083      	sub	sp, #12
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004de6:	bf00      	nop
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b083      	sub	sp, #12
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004dfa:	bf00      	nop
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b083      	sub	sp, #12
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004e0e:	bf00      	nop
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b083      	sub	sp, #12
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004e22:	bf00      	nop
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b083      	sub	sp, #12
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004e36:	bf00      	nop
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr

08004e42 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004e42:	b480      	push	{r7}
 8004e44:	b083      	sub	sp, #12
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004e4a:	bf00      	nop
 8004e4c:	370c      	adds	r7, #12
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b083      	sub	sp, #12
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004e5e:	bf00      	nop
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004e72:	bf00      	nop
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr

08004e7e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b083      	sub	sp, #12
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b083      	sub	sp, #12
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004e9a:	bf00      	nop
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004eae:	bf00      	nop
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004ec2:	bf00      	nop
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
	...

08004ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f003 0307 	and.w	r3, r3, #7
 8004ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ee0:	4b0b      	ldr	r3, [pc, #44]	; (8004f10 <__NVIC_SetPriorityGrouping+0x40>)
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004eec:	4013      	ands	r3, r2
 8004eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004ef8:	4b06      	ldr	r3, [pc, #24]	; (8004f14 <__NVIC_SetPriorityGrouping+0x44>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004efe:	4a04      	ldr	r2, [pc, #16]	; (8004f10 <__NVIC_SetPriorityGrouping+0x40>)
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	60d3      	str	r3, [r2, #12]
}
 8004f04:	bf00      	nop
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	e000ed00 	.word	0xe000ed00
 8004f14:	05fa0000 	.word	0x05fa0000

08004f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f1c:	4b04      	ldr	r3, [pc, #16]	; (8004f30 <__NVIC_GetPriorityGrouping+0x18>)
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	0a1b      	lsrs	r3, r3, #8
 8004f22:	f003 0307 	and.w	r3, r3, #7
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr
 8004f30:	e000ed00 	.word	0xe000ed00

08004f34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	db0b      	blt.n	8004f5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f46:	79fb      	ldrb	r3, [r7, #7]
 8004f48:	f003 021f 	and.w	r2, r3, #31
 8004f4c:	4907      	ldr	r1, [pc, #28]	; (8004f6c <__NVIC_EnableIRQ+0x38>)
 8004f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f52:	095b      	lsrs	r3, r3, #5
 8004f54:	2001      	movs	r0, #1
 8004f56:	fa00 f202 	lsl.w	r2, r0, r2
 8004f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004f5e:	bf00      	nop
 8004f60:	370c      	adds	r7, #12
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	e000e100 	.word	0xe000e100

08004f70 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	4603      	mov	r3, r0
 8004f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	db12      	blt.n	8004fa8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f82:	79fb      	ldrb	r3, [r7, #7]
 8004f84:	f003 021f 	and.w	r2, r3, #31
 8004f88:	490a      	ldr	r1, [pc, #40]	; (8004fb4 <__NVIC_DisableIRQ+0x44>)
 8004f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f8e:	095b      	lsrs	r3, r3, #5
 8004f90:	2001      	movs	r0, #1
 8004f92:	fa00 f202 	lsl.w	r2, r0, r2
 8004f96:	3320      	adds	r3, #32
 8004f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004f9c:	f3bf 8f4f 	dsb	sy
}
 8004fa0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004fa2:	f3bf 8f6f 	isb	sy
}
 8004fa6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	e000e100 	.word	0xe000e100

08004fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	6039      	str	r1, [r7, #0]
 8004fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	db0a      	blt.n	8004fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	b2da      	uxtb	r2, r3
 8004fd0:	490c      	ldr	r1, [pc, #48]	; (8005004 <__NVIC_SetPriority+0x4c>)
 8004fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fd6:	0112      	lsls	r2, r2, #4
 8004fd8:	b2d2      	uxtb	r2, r2
 8004fda:	440b      	add	r3, r1
 8004fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fe0:	e00a      	b.n	8004ff8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	b2da      	uxtb	r2, r3
 8004fe6:	4908      	ldr	r1, [pc, #32]	; (8005008 <__NVIC_SetPriority+0x50>)
 8004fe8:	79fb      	ldrb	r3, [r7, #7]
 8004fea:	f003 030f 	and.w	r3, r3, #15
 8004fee:	3b04      	subs	r3, #4
 8004ff0:	0112      	lsls	r2, r2, #4
 8004ff2:	b2d2      	uxtb	r2, r2
 8004ff4:	440b      	add	r3, r1
 8004ff6:	761a      	strb	r2, [r3, #24]
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	e000e100 	.word	0xe000e100
 8005008:	e000ed00 	.word	0xe000ed00

0800500c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800500c:	b480      	push	{r7}
 800500e:	b089      	sub	sp, #36	; 0x24
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f003 0307 	and.w	r3, r3, #7
 800501e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	f1c3 0307 	rsb	r3, r3, #7
 8005026:	2b04      	cmp	r3, #4
 8005028:	bf28      	it	cs
 800502a:	2304      	movcs	r3, #4
 800502c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	3304      	adds	r3, #4
 8005032:	2b06      	cmp	r3, #6
 8005034:	d902      	bls.n	800503c <NVIC_EncodePriority+0x30>
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	3b03      	subs	r3, #3
 800503a:	e000      	b.n	800503e <NVIC_EncodePriority+0x32>
 800503c:	2300      	movs	r3, #0
 800503e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005040:	f04f 32ff 	mov.w	r2, #4294967295
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	fa02 f303 	lsl.w	r3, r2, r3
 800504a:	43da      	mvns	r2, r3
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	401a      	ands	r2, r3
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005054:	f04f 31ff 	mov.w	r1, #4294967295
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	fa01 f303 	lsl.w	r3, r1, r3
 800505e:	43d9      	mvns	r1, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005064:	4313      	orrs	r3, r2
         );
}
 8005066:	4618      	mov	r0, r3
 8005068:	3724      	adds	r7, #36	; 0x24
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b082      	sub	sp, #8
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f7ff ff28 	bl	8004ed0 <__NVIC_SetPriorityGrouping>
}
 8005080:	bf00      	nop
 8005082:	3708      	adds	r7, #8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af00      	add	r7, sp, #0
 800508e:	4603      	mov	r3, r0
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
 8005094:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005096:	2300      	movs	r3, #0
 8005098:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800509a:	f7ff ff3d 	bl	8004f18 <__NVIC_GetPriorityGrouping>
 800509e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	68b9      	ldr	r1, [r7, #8]
 80050a4:	6978      	ldr	r0, [r7, #20]
 80050a6:	f7ff ffb1 	bl	800500c <NVIC_EncodePriority>
 80050aa:	4602      	mov	r2, r0
 80050ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050b0:	4611      	mov	r1, r2
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7ff ff80 	bl	8004fb8 <__NVIC_SetPriority>
}
 80050b8:	bf00      	nop
 80050ba:	3718      	adds	r7, #24
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	4603      	mov	r3, r0
 80050c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7ff ff30 	bl	8004f34 <__NVIC_EnableIRQ>
}
 80050d4:	bf00      	nop
 80050d6:	3708      	adds	r7, #8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	4603      	mov	r3, r0
 80050e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80050e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7ff ff40 	bl	8004f70 <__NVIC_DisableIRQ>
}
 80050f0:	bf00      	nop
 80050f2:	3708      	adds	r7, #8
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e054      	b.n	80051b4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	7f5b      	ldrb	r3, [r3, #29]
 800510e:	b2db      	uxtb	r3, r3
 8005110:	2b00      	cmp	r3, #0
 8005112:	d105      	bne.n	8005120 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7fd fe58 	bl	8002dd0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2202      	movs	r2, #2
 8005124:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	791b      	ldrb	r3, [r3, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10c      	bne.n	8005148 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a22      	ldr	r2, [pc, #136]	; (80051bc <HAL_CRC_Init+0xc4>)
 8005134:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f022 0218 	bic.w	r2, r2, #24
 8005144:	609a      	str	r2, [r3, #8]
 8005146:	e00c      	b.n	8005162 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6899      	ldr	r1, [r3, #8]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	461a      	mov	r2, r3
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f834 	bl	80051c0 <HAL_CRCEx_Polynomial_Set>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e028      	b.n	80051b4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	795b      	ldrb	r3, [r3, #5]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d105      	bne.n	8005176 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f04f 32ff 	mov.w	r2, #4294967295
 8005172:	611a      	str	r2, [r3, #16]
 8005174:	e004      	b.n	8005180 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	6912      	ldr	r2, [r2, #16]
 800517e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	695a      	ldr	r2, [r3, #20]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	430a      	orrs	r2, r1
 8005194:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	699a      	ldr	r2, [r3, #24]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3708      	adds	r7, #8
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	04c11db7 	.word	0x04c11db7

080051c0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b087      	sub	sp, #28
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051cc:	2300      	movs	r3, #0
 80051ce:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80051d0:	231f      	movs	r3, #31
 80051d2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80051d4:	bf00      	nop
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1e5a      	subs	r2, r3, #1
 80051da:	613a      	str	r2, [r7, #16]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d009      	beq.n	80051f4 <HAL_CRCEx_Polynomial_Set+0x34>
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	f003 031f 	and.w	r3, r3, #31
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	fa22 f303 	lsr.w	r3, r2, r3
 80051ec:	f003 0301 	and.w	r3, r3, #1
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d0f0      	beq.n	80051d6 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b18      	cmp	r3, #24
 80051f8:	d846      	bhi.n	8005288 <HAL_CRCEx_Polynomial_Set+0xc8>
 80051fa:	a201      	add	r2, pc, #4	; (adr r2, 8005200 <HAL_CRCEx_Polynomial_Set+0x40>)
 80051fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005200:	0800528f 	.word	0x0800528f
 8005204:	08005289 	.word	0x08005289
 8005208:	08005289 	.word	0x08005289
 800520c:	08005289 	.word	0x08005289
 8005210:	08005289 	.word	0x08005289
 8005214:	08005289 	.word	0x08005289
 8005218:	08005289 	.word	0x08005289
 800521c:	08005289 	.word	0x08005289
 8005220:	0800527d 	.word	0x0800527d
 8005224:	08005289 	.word	0x08005289
 8005228:	08005289 	.word	0x08005289
 800522c:	08005289 	.word	0x08005289
 8005230:	08005289 	.word	0x08005289
 8005234:	08005289 	.word	0x08005289
 8005238:	08005289 	.word	0x08005289
 800523c:	08005289 	.word	0x08005289
 8005240:	08005271 	.word	0x08005271
 8005244:	08005289 	.word	0x08005289
 8005248:	08005289 	.word	0x08005289
 800524c:	08005289 	.word	0x08005289
 8005250:	08005289 	.word	0x08005289
 8005254:	08005289 	.word	0x08005289
 8005258:	08005289 	.word	0x08005289
 800525c:	08005289 	.word	0x08005289
 8005260:	08005265 	.word	0x08005265
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	2b06      	cmp	r3, #6
 8005268:	d913      	bls.n	8005292 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800526e:	e010      	b.n	8005292 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	2b07      	cmp	r3, #7
 8005274:	d90f      	bls.n	8005296 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800527a:	e00c      	b.n	8005296 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	2b0f      	cmp	r3, #15
 8005280:	d90b      	bls.n	800529a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005286:	e008      	b.n	800529a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	75fb      	strb	r3, [r7, #23]
      break;
 800528c:	e006      	b.n	800529c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800528e:	bf00      	nop
 8005290:	e004      	b.n	800529c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005292:	bf00      	nop
 8005294:	e002      	b.n	800529c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005296:	bf00      	nop
 8005298:	e000      	b.n	800529c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800529a:	bf00      	nop
  }
  if (status == HAL_OK)
 800529c:	7dfb      	ldrb	r3, [r7, #23]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10d      	bne.n	80052be <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68ba      	ldr	r2, [r7, #8]
 80052a8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f023 0118 	bic.w	r1, r3, #24
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80052be:	7dfb      	ldrb	r3, [r7, #23]
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	371c      	adds	r7, #28
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d101      	bne.n	80052de <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e069      	b.n	80053b2 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d102      	bne.n	80052f0 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7fd fd90 	bl	8002e10 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d002      	beq.n	8005306 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	6819      	ldr	r1, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	4b2a      	ldr	r3, [pc, #168]	; (80053bc <HAL_DCMI_Init+0xf0>)
 8005312:	400b      	ands	r3, r1
 8005314:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	6819      	ldr	r1, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800532a:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005336:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005342:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005348:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800534e:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005354:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800535a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	2b10      	cmp	r3, #16
 800536a:	d112      	bne.n	8005392 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	7f1b      	ldrb	r3, [r3, #28]
 8005370:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	7f5b      	ldrb	r3, [r3, #29]
 8005376:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005378:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	7f9b      	ldrb	r3, [r3, #30]
 800537e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8005380:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	7fdb      	ldrb	r3, [r3, #31]
 8005388:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800538e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005390:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68da      	ldr	r2, [r3, #12]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f042 021e 	orr.w	r2, r2, #30
 80053a0:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3708      	adds	r7, #8
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	ffe0f007 	.word	0xffe0f007

080053c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
 80053cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053ce:	2300      	movs	r3, #0
 80053d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d101      	bne.n	80053e6 <HAL_DMA_Start_IT+0x26>
 80053e2:	2302      	movs	r3, #2
 80053e4:	e048      	b.n	8005478 <HAL_DMA_Start_IT+0xb8>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d137      	bne.n	800546a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2202      	movs	r2, #2
 80053fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	68b9      	ldr	r1, [r7, #8]
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	f000 f842 	bl	8005498 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005418:	223f      	movs	r2, #63	; 0x3f
 800541a:	409a      	lsls	r2, r3
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f042 0216 	orr.w	r2, r2, #22
 800542e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	695a      	ldr	r2, [r3, #20]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800543e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005444:	2b00      	cmp	r3, #0
 8005446:	d007      	beq.n	8005458 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f042 0208 	orr.w	r2, r2, #8
 8005456:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 0201 	orr.w	r2, r2, #1
 8005466:	601a      	str	r2, [r3, #0]
 8005468:	e005      	b.n	8005476 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005472:	2302      	movs	r3, #2
 8005474:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005476:	7dfb      	ldrb	r3, [r7, #23]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800548c:	4618      	mov	r0, r3
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
 80054a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80054b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	2b40      	cmp	r3, #64	; 0x40
 80054c4:	d108      	bne.n	80054d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80054d6:	e007      	b.n	80054e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	60da      	str	r2, [r3, #12]
}
 80054e8:	bf00      	nop
 80054ea:	3714      	adds	r7, #20
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e039      	b.n	800557a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d106      	bne.n	8005520 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7fd fd36 	bl	8002f8c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2202      	movs	r2, #2
 8005524:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005544:	f023 0107 	bic.w	r1, r3, #7
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	430a      	orrs	r2, r1
 8005552:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800555a:	4b0a      	ldr	r3, [pc, #40]	; (8005584 <HAL_DMA2D_Init+0x90>)
 800555c:	4013      	ands	r3, r2
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	68d1      	ldr	r1, [r2, #12]
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	6812      	ldr	r2, [r2, #0]
 8005566:	430b      	orrs	r3, r1
 8005568:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	ffffc000 	.word	0xffffc000

08005588 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e05f      	b.n	800565a <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 800559a:	4b32      	ldr	r3, [pc, #200]	; (8005664 <HAL_DMA2D_DeInit+0xdc>)
 800559c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d02e      	beq.n	8005604 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d107      	bne.n	80055c4 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 f8c1 	bl	800573c <HAL_DMA2D_Abort>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d021      	beq.n	8005604 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e04a      	b.n	800565a <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ca:	f003 0320 	and.w	r3, r3, #32
 80055ce:	2b20      	cmp	r3, #32
 80055d0:	d108      	bne.n	80055e4 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 80055d2:	2100      	movs	r1, #0
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f8f7 	bl	80057c8 <HAL_DMA2D_CLUTLoading_Abort>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d011      	beq.n	8005604 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e03a      	b.n	800565a <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	f003 0320 	and.w	r3, r3, #32
 80055ee:	2b20      	cmp	r3, #32
 80055f0:	d108      	bne.n	8005604 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 80055f2:	2101      	movs	r1, #1
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 f8e7 	bl	80057c8 <HAL_DMA2D_CLUTLoading_Abort>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d001      	beq.n	8005604 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e02a      	b.n	800565a <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2200      	movs	r2, #0
 800560a:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	223f      	movs	r2, #63	; 0x3f
 8005612:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2200      	movs	r2, #0
 800561a:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2200      	movs	r2, #0
 8005622:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2200      	movs	r2, #0
 800562a:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2200      	movs	r2, #0
 8005632:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2200      	movs	r2, #0
 800563a:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f7fd fccb 	bl	8002fd8 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3708      	adds	r7, #8
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	40023800 	.word	0x40023800

08005668 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af02      	add	r7, sp, #8
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
 8005674:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800567c:	2b01      	cmp	r3, #1
 800567e:	d101      	bne.n	8005684 <HAL_DMA2D_Start_IT+0x1c>
 8005680:	2302      	movs	r3, #2
 8005682:	e020      	b.n	80056c6 <HAL_DMA2D_Start_IT+0x5e>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2202      	movs	r2, #2
 8005690:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	68b9      	ldr	r1, [r7, #8]
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f000 fa84 	bl	8005bac <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 80056b2:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f042 0201 	orr.w	r2, r2, #1
 80056c2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b086      	sub	sp, #24
 80056d2:	af02      	add	r7, sp, #8
 80056d4:	60f8      	str	r0, [r7, #12]
 80056d6:	60b9      	str	r1, [r7, #8]
 80056d8:	607a      	str	r2, [r7, #4]
 80056da:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d101      	bne.n	80056ea <HAL_DMA2D_BlendingStart_IT+0x1c>
 80056e6:	2302      	movs	r3, #2
 80056e8:	e024      	b.n	8005734 <HAL_DMA2D_BlendingStart_IT+0x66>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2202      	movs	r2, #2
 80056f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	68b9      	ldr	r1, [r7, #8]
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f000 fa4d 	bl	8005bac <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8005720:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f042 0201 	orr.w	r2, r2, #1
 8005730:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f023 0205 	bic.w	r2, r3, #5
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f042 0204 	orr.w	r2, r2, #4
 8005756:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005758:	f7fe fb7a 	bl	8003e50 <HAL_GetTick>
 800575c:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800575e:	e017      	b.n	8005790 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8005760:	f7fe fb76 	bl	8003e50 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800576e:	d90f      	bls.n	8005790 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005774:	f043 0220 	orr.w	r2, r3, #32
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2203      	movs	r2, #3
 8005780:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e017      	b.n	80057c0 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1e0      	bne.n	8005760 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 80057ac:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3324      	adds	r3, #36	; 0x24
 80057d8:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f042 0204 	orr.w	r2, r2, #4
 80057e8:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d103      	bne.n	80057f8 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	331c      	adds	r3, #28
 80057f6:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 80057f8:	f7fe fb2a 	bl	8003e50 <HAL_GetTick>
 80057fc:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 80057fe:	e017      	b.n	8005830 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8005800:	f7fe fb26 	bl	8003e50 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800580e:	d90f      	bls.n	8005830 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005814:	f043 0220 	orr.w	r2, r3, #32
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2203      	movs	r2, #3
 8005820:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e016      	b.n	800585e <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0320 	and.w	r3, r3, #32
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1e1      	bne.n	8005800 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 800584a:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b084      	sub	sp, #16
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	2b00      	cmp	r3, #0
 8005886:	d026      	beq.n	80058d6 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800588e:	2b00      	cmp	r3, #0
 8005890:	d021      	beq.n	80058d6 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058a0:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a6:	f043 0201 	orr.w	r2, r3, #1
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2201      	movs	r2, #1
 80058b4:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2204      	movs	r2, #4
 80058ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f003 0320 	and.w	r3, r3, #32
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d026      	beq.n	800592e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d021      	beq.n	800592e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058f8:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2220      	movs	r2, #32
 8005900:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005906:	f043 0202 	orr.w	r2, r3, #2
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2204      	movs	r2, #4
 8005912:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f003 0308 	and.w	r3, r3, #8
 8005934:	2b00      	cmp	r3, #0
 8005936:	d026      	beq.n	8005986 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800593e:	2b00      	cmp	r3, #0
 8005940:	d021      	beq.n	8005986 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005950:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2208      	movs	r2, #8
 8005958:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800595e:	f043 0204 	orr.w	r2, r3, #4
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2204      	movs	r2, #4
 800596a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f003 0304 	and.w	r3, r3, #4
 800598c:	2b00      	cmp	r3, #0
 800598e:	d013      	beq.n	80059b8 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00e      	beq.n	80059b8 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059a8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2204      	movs	r2, #4
 80059b0:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 f853 	bl	8005a5e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f003 0302 	and.w	r3, r3, #2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d024      	beq.n	8005a0c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d01f      	beq.n	8005a0c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80059da:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2202      	movs	r2, #2
 80059e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d003      	beq.n	8005a0c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f003 0310 	and.w	r3, r3, #16
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d01f      	beq.n	8005a56 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d01a      	beq.n	8005a56 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a2e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2210      	movs	r2, #16
 8005a36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f80e 	bl	8005a72 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005a56:	bf00      	nop
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005a66:	bf00      	nop
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005a72:	b480      	push	{r7}
 8005a74:	b083      	sub	sp, #12
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005a7a:	bf00      	nop
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
	...

08005a88 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d101      	bne.n	8005aa8 <HAL_DMA2D_ConfigLayer+0x20>
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	e079      	b.n	8005b9c <HAL_DMA2D_ConfigLayer+0x114>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	011b      	lsls	r3, r3, #4
 8005abc:	3318      	adds	r3, #24
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	041b      	lsls	r3, r3, #16
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005ad2:	4b35      	ldr	r3, [pc, #212]	; (8005ba8 <HAL_DMA2D_ConfigLayer+0x120>)
 8005ad4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	2b0a      	cmp	r3, #10
 8005adc:	d003      	beq.n	8005ae6 <HAL_DMA2D_ConfigLayer+0x5e>
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	2b09      	cmp	r3, #9
 8005ae4:	d107      	bne.n	8005af6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	617b      	str	r3, [r7, #20]
 8005af4:	e005      	b.n	8005b02 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	061b      	lsls	r3, r3, #24
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d120      	bne.n	8005b4a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	43db      	mvns	r3, r3
 8005b12:	ea02 0103 	and.w	r1, r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	6812      	ldr	r2, [r2, #0]
 8005b28:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	2b0a      	cmp	r3, #10
 8005b30:	d003      	beq.n	8005b3a <HAL_DMA2D_ConfigLayer+0xb2>
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	2b09      	cmp	r3, #9
 8005b38:	d127      	bne.n	8005b8a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	68da      	ldr	r2, [r3, #12]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005b46:	629a      	str	r2, [r3, #40]	; 0x28
 8005b48:	e01f      	b.n	8005b8a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	69da      	ldr	r2, [r3, #28]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	43db      	mvns	r3, r3
 8005b54:	ea02 0103 	and.w	r1, r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	6812      	ldr	r2, [r2, #0]
 8005b6a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	2b0a      	cmp	r3, #10
 8005b72:	d003      	beq.n	8005b7c <HAL_DMA2D_ConfigLayer+0xf4>
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	2b09      	cmp	r3, #9
 8005b7a:	d106      	bne.n	8005b8a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	68da      	ldr	r2, [r3, #12]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005b88:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	371c      	adds	r7, #28
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr
 8005ba8:	ff03000f 	.word	0xff03000f

08005bac <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b08b      	sub	sp, #44	; 0x2c
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
 8005bb8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	041a      	lsls	r2, r3, #16
 8005bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005be4:	d174      	bne.n	8005cd0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005bec:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005bf4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005bfc:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d108      	bne.n	8005c1e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8005c0c:	69ba      	ldr	r2, [r7, #24]
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	431a      	orrs	r2, r3
 8005c12:	6a3b      	ldr	r3, [r7, #32]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c1c:	e053      	b.n	8005cc6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d106      	bne.n	8005c34 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005c26:	69ba      	ldr	r2, [r7, #24]
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	627b      	str	r3, [r7, #36]	; 0x24
 8005c32:	e048      	b.n	8005cc6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d111      	bne.n	8005c60 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	0cdb      	lsrs	r3, r3, #19
 8005c40:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	0a9b      	lsrs	r3, r3, #10
 8005c46:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	08db      	lsrs	r3, r3, #3
 8005c4c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	015a      	lsls	r2, r3, #5
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	02db      	lsls	r3, r3, #11
 8005c56:	4313      	orrs	r3, r2
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c5e:	e032      	b.n	8005cc6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	2b03      	cmp	r3, #3
 8005c66:	d117      	bne.n	8005c98 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005c68:	6a3b      	ldr	r3, [r7, #32]
 8005c6a:	0fdb      	lsrs	r3, r3, #31
 8005c6c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	0cdb      	lsrs	r3, r3, #19
 8005c72:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	0adb      	lsrs	r3, r3, #11
 8005c78:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	08db      	lsrs	r3, r3, #3
 8005c7e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	029b      	lsls	r3, r3, #10
 8005c88:	431a      	orrs	r2, r3
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
 8005c8c:	03db      	lsls	r3, r3, #15
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	627b      	str	r3, [r7, #36]	; 0x24
 8005c96:	e016      	b.n	8005cc6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005c98:	6a3b      	ldr	r3, [r7, #32]
 8005c9a:	0f1b      	lsrs	r3, r3, #28
 8005c9c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	0d1b      	lsrs	r3, r3, #20
 8005ca2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	0b1b      	lsrs	r3, r3, #12
 8005ca8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	091b      	lsrs	r3, r3, #4
 8005cae:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	011a      	lsls	r2, r3, #4
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	021b      	lsls	r3, r3, #8
 8005cb8:	431a      	orrs	r2, r3
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	031b      	lsls	r3, r3, #12
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ccc:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005cce:	e003      	b.n	8005cd8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	60da      	str	r2, [r3, #12]
}
 8005cd8:	bf00      	nop
 8005cda:	372c      	adds	r7, #44	; 0x2c
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b089      	sub	sp, #36	; 0x24
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005cfe:	2300      	movs	r3, #0
 8005d00:	61fb      	str	r3, [r7, #28]
 8005d02:	e175      	b.n	8005ff0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005d04:	2201      	movs	r2, #1
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	4013      	ands	r3, r2
 8005d16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	f040 8164 	bne.w	8005fea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d00b      	beq.n	8005d42 <HAL_GPIO_Init+0x5e>
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d007      	beq.n	8005d42 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005d36:	2b11      	cmp	r3, #17
 8005d38:	d003      	beq.n	8005d42 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	2b12      	cmp	r3, #18
 8005d40:	d130      	bne.n	8005da4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	005b      	lsls	r3, r3, #1
 8005d4c:	2203      	movs	r2, #3
 8005d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d52:	43db      	mvns	r3, r3
 8005d54:	69ba      	ldr	r2, [r7, #24]
 8005d56:	4013      	ands	r3, r2
 8005d58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	68da      	ldr	r2, [r3, #12]
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	005b      	lsls	r3, r3, #1
 8005d62:	fa02 f303 	lsl.w	r3, r2, r3
 8005d66:	69ba      	ldr	r2, [r7, #24]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	69ba      	ldr	r2, [r7, #24]
 8005d70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d78:	2201      	movs	r2, #1
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d80:	43db      	mvns	r3, r3
 8005d82:	69ba      	ldr	r2, [r7, #24]
 8005d84:	4013      	ands	r3, r2
 8005d86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	091b      	lsrs	r3, r3, #4
 8005d8e:	f003 0201 	and.w	r2, r3, #1
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	fa02 f303 	lsl.w	r3, r2, r3
 8005d98:	69ba      	ldr	r2, [r7, #24]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	005b      	lsls	r3, r3, #1
 8005dae:	2203      	movs	r2, #3
 8005db0:	fa02 f303 	lsl.w	r3, r2, r3
 8005db4:	43db      	mvns	r3, r3
 8005db6:	69ba      	ldr	r2, [r7, #24]
 8005db8:	4013      	ands	r3, r2
 8005dba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	689a      	ldr	r2, [r3, #8]
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	005b      	lsls	r3, r3, #1
 8005dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d003      	beq.n	8005de4 <HAL_GPIO_Init+0x100>
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	2b12      	cmp	r3, #18
 8005de2:	d123      	bne.n	8005e2c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	08da      	lsrs	r2, r3, #3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	3208      	adds	r2, #8
 8005dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005df0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	f003 0307 	and.w	r3, r3, #7
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	220f      	movs	r2, #15
 8005dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005e00:	43db      	mvns	r3, r3
 8005e02:	69ba      	ldr	r2, [r7, #24]
 8005e04:	4013      	ands	r3, r2
 8005e06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	691a      	ldr	r2, [r3, #16]
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	f003 0307 	and.w	r3, r3, #7
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	fa02 f303 	lsl.w	r3, r2, r3
 8005e18:	69ba      	ldr	r2, [r7, #24]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	08da      	lsrs	r2, r3, #3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	3208      	adds	r2, #8
 8005e26:	69b9      	ldr	r1, [r7, #24]
 8005e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	005b      	lsls	r3, r3, #1
 8005e36:	2203      	movs	r2, #3
 8005e38:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3c:	43db      	mvns	r3, r3
 8005e3e:	69ba      	ldr	r2, [r7, #24]
 8005e40:	4013      	ands	r3, r2
 8005e42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f003 0203 	and.w	r2, r3, #3
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	005b      	lsls	r3, r3, #1
 8005e50:	fa02 f303 	lsl.w	r3, r2, r3
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	69ba      	ldr	r2, [r7, #24]
 8005e5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f000 80be 	beq.w	8005fea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e6e:	4b66      	ldr	r3, [pc, #408]	; (8006008 <HAL_GPIO_Init+0x324>)
 8005e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e72:	4a65      	ldr	r2, [pc, #404]	; (8006008 <HAL_GPIO_Init+0x324>)
 8005e74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e78:	6453      	str	r3, [r2, #68]	; 0x44
 8005e7a:	4b63      	ldr	r3, [pc, #396]	; (8006008 <HAL_GPIO_Init+0x324>)
 8005e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e82:	60fb      	str	r3, [r7, #12]
 8005e84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005e86:	4a61      	ldr	r2, [pc, #388]	; (800600c <HAL_GPIO_Init+0x328>)
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	089b      	lsrs	r3, r3, #2
 8005e8c:	3302      	adds	r3, #2
 8005e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	f003 0303 	and.w	r3, r3, #3
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	220f      	movs	r2, #15
 8005e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea2:	43db      	mvns	r3, r3
 8005ea4:	69ba      	ldr	r2, [r7, #24]
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a58      	ldr	r2, [pc, #352]	; (8006010 <HAL_GPIO_Init+0x32c>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d037      	beq.n	8005f22 <HAL_GPIO_Init+0x23e>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a57      	ldr	r2, [pc, #348]	; (8006014 <HAL_GPIO_Init+0x330>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d031      	beq.n	8005f1e <HAL_GPIO_Init+0x23a>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a56      	ldr	r2, [pc, #344]	; (8006018 <HAL_GPIO_Init+0x334>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d02b      	beq.n	8005f1a <HAL_GPIO_Init+0x236>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a55      	ldr	r2, [pc, #340]	; (800601c <HAL_GPIO_Init+0x338>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d025      	beq.n	8005f16 <HAL_GPIO_Init+0x232>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a54      	ldr	r2, [pc, #336]	; (8006020 <HAL_GPIO_Init+0x33c>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d01f      	beq.n	8005f12 <HAL_GPIO_Init+0x22e>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a53      	ldr	r2, [pc, #332]	; (8006024 <HAL_GPIO_Init+0x340>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d019      	beq.n	8005f0e <HAL_GPIO_Init+0x22a>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a52      	ldr	r2, [pc, #328]	; (8006028 <HAL_GPIO_Init+0x344>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d013      	beq.n	8005f0a <HAL_GPIO_Init+0x226>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a51      	ldr	r2, [pc, #324]	; (800602c <HAL_GPIO_Init+0x348>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d00d      	beq.n	8005f06 <HAL_GPIO_Init+0x222>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a50      	ldr	r2, [pc, #320]	; (8006030 <HAL_GPIO_Init+0x34c>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d007      	beq.n	8005f02 <HAL_GPIO_Init+0x21e>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a4f      	ldr	r2, [pc, #316]	; (8006034 <HAL_GPIO_Init+0x350>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d101      	bne.n	8005efe <HAL_GPIO_Init+0x21a>
 8005efa:	2309      	movs	r3, #9
 8005efc:	e012      	b.n	8005f24 <HAL_GPIO_Init+0x240>
 8005efe:	230a      	movs	r3, #10
 8005f00:	e010      	b.n	8005f24 <HAL_GPIO_Init+0x240>
 8005f02:	2308      	movs	r3, #8
 8005f04:	e00e      	b.n	8005f24 <HAL_GPIO_Init+0x240>
 8005f06:	2307      	movs	r3, #7
 8005f08:	e00c      	b.n	8005f24 <HAL_GPIO_Init+0x240>
 8005f0a:	2306      	movs	r3, #6
 8005f0c:	e00a      	b.n	8005f24 <HAL_GPIO_Init+0x240>
 8005f0e:	2305      	movs	r3, #5
 8005f10:	e008      	b.n	8005f24 <HAL_GPIO_Init+0x240>
 8005f12:	2304      	movs	r3, #4
 8005f14:	e006      	b.n	8005f24 <HAL_GPIO_Init+0x240>
 8005f16:	2303      	movs	r3, #3
 8005f18:	e004      	b.n	8005f24 <HAL_GPIO_Init+0x240>
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	e002      	b.n	8005f24 <HAL_GPIO_Init+0x240>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e000      	b.n	8005f24 <HAL_GPIO_Init+0x240>
 8005f22:	2300      	movs	r3, #0
 8005f24:	69fa      	ldr	r2, [r7, #28]
 8005f26:	f002 0203 	and.w	r2, r2, #3
 8005f2a:	0092      	lsls	r2, r2, #2
 8005f2c:	4093      	lsls	r3, r2
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005f34:	4935      	ldr	r1, [pc, #212]	; (800600c <HAL_GPIO_Init+0x328>)
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	089b      	lsrs	r3, r3, #2
 8005f3a:	3302      	adds	r3, #2
 8005f3c:	69ba      	ldr	r2, [r7, #24]
 8005f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005f42:	4b3d      	ldr	r3, [pc, #244]	; (8006038 <HAL_GPIO_Init+0x354>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	43db      	mvns	r3, r3
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	4013      	ands	r3, r2
 8005f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d003      	beq.n	8005f66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005f66:	4a34      	ldr	r2, [pc, #208]	; (8006038 <HAL_GPIO_Init+0x354>)
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005f6c:	4b32      	ldr	r3, [pc, #200]	; (8006038 <HAL_GPIO_Init+0x354>)
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	43db      	mvns	r3, r3
 8005f76:	69ba      	ldr	r2, [r7, #24]
 8005f78:	4013      	ands	r3, r2
 8005f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d003      	beq.n	8005f90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005f88:	69ba      	ldr	r2, [r7, #24]
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005f90:	4a29      	ldr	r2, [pc, #164]	; (8006038 <HAL_GPIO_Init+0x354>)
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005f96:	4b28      	ldr	r3, [pc, #160]	; (8006038 <HAL_GPIO_Init+0x354>)
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	43db      	mvns	r3, r3
 8005fa0:	69ba      	ldr	r2, [r7, #24]
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005fb2:	69ba      	ldr	r2, [r7, #24]
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005fba:	4a1f      	ldr	r2, [pc, #124]	; (8006038 <HAL_GPIO_Init+0x354>)
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005fc0:	4b1d      	ldr	r3, [pc, #116]	; (8006038 <HAL_GPIO_Init+0x354>)
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	43db      	mvns	r3, r3
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	4013      	ands	r3, r2
 8005fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d003      	beq.n	8005fe4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005fdc:	69ba      	ldr	r2, [r7, #24]
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005fe4:	4a14      	ldr	r2, [pc, #80]	; (8006038 <HAL_GPIO_Init+0x354>)
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	3301      	adds	r3, #1
 8005fee:	61fb      	str	r3, [r7, #28]
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	2b0f      	cmp	r3, #15
 8005ff4:	f67f ae86 	bls.w	8005d04 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005ff8:	bf00      	nop
 8005ffa:	bf00      	nop
 8005ffc:	3724      	adds	r7, #36	; 0x24
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	40023800 	.word	0x40023800
 800600c:	40013800 	.word	0x40013800
 8006010:	40020000 	.word	0x40020000
 8006014:	40020400 	.word	0x40020400
 8006018:	40020800 	.word	0x40020800
 800601c:	40020c00 	.word	0x40020c00
 8006020:	40021000 	.word	0x40021000
 8006024:	40021400 	.word	0x40021400
 8006028:	40021800 	.word	0x40021800
 800602c:	40021c00 	.word	0x40021c00
 8006030:	40022000 	.word	0x40022000
 8006034:	40022400 	.word	0x40022400
 8006038:	40013c00 	.word	0x40013c00

0800603c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	460b      	mov	r3, r1
 8006046:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	691a      	ldr	r2, [r3, #16]
 800604c:	887b      	ldrh	r3, [r7, #2]
 800604e:	4013      	ands	r3, r2
 8006050:	2b00      	cmp	r3, #0
 8006052:	d002      	beq.n	800605a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006054:	2301      	movs	r3, #1
 8006056:	73fb      	strb	r3, [r7, #15]
 8006058:	e001      	b.n	800605e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800605a:	2300      	movs	r3, #0
 800605c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800605e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006060:	4618      	mov	r0, r3
 8006062:	3714      	adds	r7, #20
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	460b      	mov	r3, r1
 8006076:	807b      	strh	r3, [r7, #2]
 8006078:	4613      	mov	r3, r2
 800607a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800607c:	787b      	ldrb	r3, [r7, #1]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d003      	beq.n	800608a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006082:	887a      	ldrh	r2, [r7, #2]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006088:	e003      	b.n	8006092 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800608a:	887b      	ldrh	r3, [r7, #2]
 800608c:	041a      	lsls	r2, r3, #16
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	619a      	str	r2, [r3, #24]
}
 8006092:	bf00      	nop
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
	...

080060a0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e0bf      	b.n	8006232 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d106      	bne.n	80060cc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f7fc ffa0 	bl	800300c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2202      	movs	r2, #2
 80060d0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	699a      	ldr	r2, [r3, #24]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80060e2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	6999      	ldr	r1, [r3, #24]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685a      	ldr	r2, [r3, #4]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80060f8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	430a      	orrs	r2, r1
 8006106:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6899      	ldr	r1, [r3, #8]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	4b4a      	ldr	r3, [pc, #296]	; (800623c <HAL_LTDC_Init+0x19c>)
 8006114:	400b      	ands	r3, r1
 8006116:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	695b      	ldr	r3, [r3, #20]
 800611c:	041b      	lsls	r3, r3, #16
 800611e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6899      	ldr	r1, [r3, #8]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	699a      	ldr	r2, [r3, #24]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	431a      	orrs	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	430a      	orrs	r2, r1
 8006134:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68d9      	ldr	r1, [r3, #12]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	4b3e      	ldr	r3, [pc, #248]	; (800623c <HAL_LTDC_Init+0x19c>)
 8006142:	400b      	ands	r3, r1
 8006144:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	69db      	ldr	r3, [r3, #28]
 800614a:	041b      	lsls	r3, r3, #16
 800614c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68d9      	ldr	r1, [r3, #12]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a1a      	ldr	r2, [r3, #32]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	431a      	orrs	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	430a      	orrs	r2, r1
 8006162:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6919      	ldr	r1, [r3, #16]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	4b33      	ldr	r3, [pc, #204]	; (800623c <HAL_LTDC_Init+0x19c>)
 8006170:	400b      	ands	r3, r1
 8006172:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006178:	041b      	lsls	r3, r3, #16
 800617a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6919      	ldr	r1, [r3, #16]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	431a      	orrs	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	430a      	orrs	r2, r1
 8006190:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	6959      	ldr	r1, [r3, #20]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	4b27      	ldr	r3, [pc, #156]	; (800623c <HAL_LTDC_Init+0x19c>)
 800619e:	400b      	ands	r3, r1
 80061a0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a6:	041b      	lsls	r3, r3, #16
 80061a8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	6959      	ldr	r1, [r3, #20]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	431a      	orrs	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	430a      	orrs	r2, r1
 80061be:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061c6:	021b      	lsls	r3, r3, #8
 80061c8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80061d0:	041b      	lsls	r3, r3, #16
 80061d2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80061e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80061f6:	431a      	orrs	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	430a      	orrs	r2, r1
 80061fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f042 0206 	orr.w	r2, r2, #6
 800620e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	699a      	ldr	r2, [r3, #24]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f042 0201 	orr.w	r2, r2, #1
 800621e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	f000f800 	.word	0xf000f800

08006240 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006256:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f003 0304 	and.w	r3, r3, #4
 800625e:	2b00      	cmp	r3, #0
 8006260:	d023      	beq.n	80062aa <HAL_LTDC_IRQHandler+0x6a>
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	f003 0304 	and.w	r3, r3, #4
 8006268:	2b00      	cmp	r3, #0
 800626a:	d01e      	beq.n	80062aa <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f022 0204 	bic.w	r2, r2, #4
 800627a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2204      	movs	r2, #4
 8006282:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800628a:	f043 0201 	orr.w	r2, r3, #1
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2204      	movs	r2, #4
 8006298:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 f86f 	bl	8006388 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f003 0302 	and.w	r3, r3, #2
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d023      	beq.n	80062fc <HAL_LTDC_IRQHandler+0xbc>
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	f003 0302 	and.w	r3, r3, #2
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d01e      	beq.n	80062fc <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f022 0202 	bic.w	r2, r2, #2
 80062cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2202      	movs	r2, #2
 80062d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80062dc:	f043 0202 	orr.w	r2, r3, #2
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2204      	movs	r2, #4
 80062ea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f846 	bl	8006388 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	2b00      	cmp	r3, #0
 8006304:	d01b      	beq.n	800633e <HAL_LTDC_IRQHandler+0xfe>
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	f003 0301 	and.w	r3, r3, #1
 800630c:	2b00      	cmp	r3, #0
 800630e:	d016      	beq.n	800633e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f022 0201 	bic.w	r2, r2, #1
 800631e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2201      	movs	r2, #1
 8006326:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f010 fbf9 	bl	8016b30 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f003 0308 	and.w	r3, r3, #8
 8006344:	2b00      	cmp	r3, #0
 8006346:	d01b      	beq.n	8006380 <HAL_LTDC_IRQHandler+0x140>
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	f003 0308 	and.w	r3, r3, #8
 800634e:	2b00      	cmp	r3, #0
 8006350:	d016      	beq.n	8006380 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f022 0208 	bic.w	r2, r2, #8
 8006360:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2208      	movs	r2, #8
 8006368:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 f80e 	bl	800639c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006380:	bf00      	nop
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80063a4:	bf00      	nop
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80063b0:	b5b0      	push	{r4, r5, r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d101      	bne.n	80063ca <HAL_LTDC_ConfigLayer+0x1a>
 80063c6:	2302      	movs	r3, #2
 80063c8:	e02c      	b.n	8006424 <HAL_LTDC_ConfigLayer+0x74>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2202      	movs	r2, #2
 80063d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2134      	movs	r1, #52	; 0x34
 80063e0:	fb01 f303 	mul.w	r3, r1, r3
 80063e4:	4413      	add	r3, r2
 80063e6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	4614      	mov	r4, r2
 80063ee:	461d      	mov	r5, r3
 80063f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063fc:	682b      	ldr	r3, [r5, #0]
 80063fe:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	68b9      	ldr	r1, [r7, #8]
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f000 f849 	bl	800649c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2201      	movs	r2, #1
 8006410:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bdb0      	pop	{r4, r5, r7, pc}

0800642c <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800643c:	2b01      	cmp	r3, #1
 800643e:	d101      	bne.n	8006444 <HAL_LTDC_ProgramLineEvent+0x18>
 8006440:	2302      	movs	r3, #2
 8006442:	e023      	b.n	800648c <HAL_LTDC_ProgramLineEvent+0x60>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2202      	movs	r2, #2
 8006450:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f022 0201 	bic.w	r2, r2, #1
 8006462:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8006464:	4a0c      	ldr	r2, [pc, #48]	; (8006498 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f042 0201 	orr.w	r2, r2, #1
 8006478:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr
 8006498:	40016800 	.word	0x40016800

0800649c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800649c:	b480      	push	{r7}
 800649e:	b089      	sub	sp, #36	; 0x24
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	685a      	ldr	r2, [r3, #4]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	0c1b      	lsrs	r3, r3, #16
 80064b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064b8:	4413      	add	r3, r2
 80064ba:	041b      	lsls	r3, r3, #16
 80064bc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	461a      	mov	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	01db      	lsls	r3, r3, #7
 80064c8:	4413      	add	r3, r2
 80064ca:	3384      	adds	r3, #132	; 0x84
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	6812      	ldr	r2, [r2, #0]
 80064d2:	4611      	mov	r1, r2
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	01d2      	lsls	r2, r2, #7
 80064d8:	440a      	add	r2, r1
 80064da:	3284      	adds	r2, #132	; 0x84
 80064dc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80064e0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	0c1b      	lsrs	r3, r3, #16
 80064ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064f2:	4413      	add	r3, r2
 80064f4:	1c5a      	adds	r2, r3, #1
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4619      	mov	r1, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	01db      	lsls	r3, r3, #7
 8006500:	440b      	add	r3, r1
 8006502:	3384      	adds	r3, #132	; 0x84
 8006504:	4619      	mov	r1, r3
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	4313      	orrs	r3, r2
 800650a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	68da      	ldr	r2, [r3, #12]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800651a:	4413      	add	r3, r2
 800651c:	041b      	lsls	r3, r3, #16
 800651e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	461a      	mov	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	01db      	lsls	r3, r3, #7
 800652a:	4413      	add	r3, r2
 800652c:	3384      	adds	r3, #132	; 0x84
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	6812      	ldr	r2, [r2, #0]
 8006534:	4611      	mov	r1, r2
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	01d2      	lsls	r2, r2, #7
 800653a:	440a      	add	r2, r1
 800653c:	3284      	adds	r2, #132	; 0x84
 800653e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006542:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	689a      	ldr	r2, [r3, #8]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006552:	4413      	add	r3, r2
 8006554:	1c5a      	adds	r2, r3, #1
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4619      	mov	r1, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	01db      	lsls	r3, r3, #7
 8006560:	440b      	add	r3, r1
 8006562:	3384      	adds	r3, #132	; 0x84
 8006564:	4619      	mov	r1, r3
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	4313      	orrs	r3, r2
 800656a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	461a      	mov	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	01db      	lsls	r3, r3, #7
 8006576:	4413      	add	r3, r2
 8006578:	3384      	adds	r3, #132	; 0x84
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	6812      	ldr	r2, [r2, #0]
 8006580:	4611      	mov	r1, r2
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	01d2      	lsls	r2, r2, #7
 8006586:	440a      	add	r2, r1
 8006588:	3284      	adds	r2, #132	; 0x84
 800658a:	f023 0307 	bic.w	r3, r3, #7
 800658e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	461a      	mov	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	01db      	lsls	r3, r3, #7
 800659a:	4413      	add	r3, r2
 800659c:	3384      	adds	r3, #132	; 0x84
 800659e:	461a      	mov	r2, r3
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80065ac:	021b      	lsls	r3, r3, #8
 80065ae:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80065b6:	041b      	lsls	r3, r3, #16
 80065b8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	061b      	lsls	r3, r3, #24
 80065c0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	461a      	mov	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	01db      	lsls	r3, r3, #7
 80065cc:	4413      	add	r3, r2
 80065ce:	3384      	adds	r3, #132	; 0x84
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	461a      	mov	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	01db      	lsls	r3, r3, #7
 80065dc:	4413      	add	r3, r2
 80065de:	3384      	adds	r3, #132	; 0x84
 80065e0:	461a      	mov	r2, r3
 80065e2:	2300      	movs	r3, #0
 80065e4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80065ec:	461a      	mov	r2, r3
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	431a      	orrs	r2, r3
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	431a      	orrs	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4619      	mov	r1, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	01db      	lsls	r3, r3, #7
 8006600:	440b      	add	r3, r1
 8006602:	3384      	adds	r3, #132	; 0x84
 8006604:	4619      	mov	r1, r3
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	4313      	orrs	r3, r2
 800660a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	461a      	mov	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	01db      	lsls	r3, r3, #7
 8006616:	4413      	add	r3, r2
 8006618:	3384      	adds	r3, #132	; 0x84
 800661a:	695b      	ldr	r3, [r3, #20]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	6812      	ldr	r2, [r2, #0]
 8006620:	4611      	mov	r1, r2
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	01d2      	lsls	r2, r2, #7
 8006626:	440a      	add	r2, r1
 8006628:	3284      	adds	r2, #132	; 0x84
 800662a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800662e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	461a      	mov	r2, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	01db      	lsls	r3, r3, #7
 800663a:	4413      	add	r3, r2
 800663c:	3384      	adds	r3, #132	; 0x84
 800663e:	461a      	mov	r2, r3
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	695b      	ldr	r3, [r3, #20]
 8006644:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	461a      	mov	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	01db      	lsls	r3, r3, #7
 8006650:	4413      	add	r3, r2
 8006652:	3384      	adds	r3, #132	; 0x84
 8006654:	69da      	ldr	r2, [r3, #28]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4619      	mov	r1, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	01db      	lsls	r3, r3, #7
 8006660:	440b      	add	r3, r1
 8006662:	3384      	adds	r3, #132	; 0x84
 8006664:	4619      	mov	r1, r3
 8006666:	4b58      	ldr	r3, [pc, #352]	; (80067c8 <LTDC_SetConfig+0x32c>)
 8006668:	4013      	ands	r3, r2
 800666a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	69da      	ldr	r2, [r3, #28]
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	6a1b      	ldr	r3, [r3, #32]
 8006674:	68f9      	ldr	r1, [r7, #12]
 8006676:	6809      	ldr	r1, [r1, #0]
 8006678:	4608      	mov	r0, r1
 800667a:	6879      	ldr	r1, [r7, #4]
 800667c:	01c9      	lsls	r1, r1, #7
 800667e:	4401      	add	r1, r0
 8006680:	3184      	adds	r1, #132	; 0x84
 8006682:	4313      	orrs	r3, r2
 8006684:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	461a      	mov	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	01db      	lsls	r3, r3, #7
 8006690:	4413      	add	r3, r2
 8006692:	3384      	adds	r3, #132	; 0x84
 8006694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	461a      	mov	r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	01db      	lsls	r3, r3, #7
 80066a0:	4413      	add	r3, r2
 80066a2:	3384      	adds	r3, #132	; 0x84
 80066a4:	461a      	mov	r2, r3
 80066a6:	2300      	movs	r3, #0
 80066a8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	461a      	mov	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	01db      	lsls	r3, r3, #7
 80066b4:	4413      	add	r3, r2
 80066b6:	3384      	adds	r3, #132	; 0x84
 80066b8:	461a      	mov	r2, r3
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066be:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d102      	bne.n	80066ce <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80066c8:	2304      	movs	r3, #4
 80066ca:	61fb      	str	r3, [r7, #28]
 80066cc:	e01b      	b.n	8006706 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d102      	bne.n	80066dc <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80066d6:	2303      	movs	r3, #3
 80066d8:	61fb      	str	r3, [r7, #28]
 80066da:	e014      	b.n	8006706 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	2b04      	cmp	r3, #4
 80066e2:	d00b      	beq.n	80066fc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d007      	beq.n	80066fc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80066f0:	2b03      	cmp	r3, #3
 80066f2:	d003      	beq.n	80066fc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80066f8:	2b07      	cmp	r3, #7
 80066fa:	d102      	bne.n	8006702 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80066fc:	2302      	movs	r3, #2
 80066fe:	61fb      	str	r3, [r7, #28]
 8006700:	e001      	b.n	8006706 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006702:	2301      	movs	r3, #1
 8006704:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	461a      	mov	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	01db      	lsls	r3, r3, #7
 8006710:	4413      	add	r3, r2
 8006712:	3384      	adds	r3, #132	; 0x84
 8006714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	6812      	ldr	r2, [r2, #0]
 800671a:	4611      	mov	r1, r2
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	01d2      	lsls	r2, r2, #7
 8006720:	440a      	add	r2, r1
 8006722:	3284      	adds	r2, #132	; 0x84
 8006724:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006728:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672e:	69fa      	ldr	r2, [r7, #28]
 8006730:	fb02 f303 	mul.w	r3, r2, r3
 8006734:	041a      	lsls	r2, r3, #16
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	6859      	ldr	r1, [r3, #4]
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	1acb      	subs	r3, r1, r3
 8006740:	69f9      	ldr	r1, [r7, #28]
 8006742:	fb01 f303 	mul.w	r3, r1, r3
 8006746:	3303      	adds	r3, #3
 8006748:	68f9      	ldr	r1, [r7, #12]
 800674a:	6809      	ldr	r1, [r1, #0]
 800674c:	4608      	mov	r0, r1
 800674e:	6879      	ldr	r1, [r7, #4]
 8006750:	01c9      	lsls	r1, r1, #7
 8006752:	4401      	add	r1, r0
 8006754:	3184      	adds	r1, #132	; 0x84
 8006756:	4313      	orrs	r3, r2
 8006758:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	461a      	mov	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	01db      	lsls	r3, r3, #7
 8006764:	4413      	add	r3, r2
 8006766:	3384      	adds	r3, #132	; 0x84
 8006768:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4619      	mov	r1, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	01db      	lsls	r3, r3, #7
 8006774:	440b      	add	r3, r1
 8006776:	3384      	adds	r3, #132	; 0x84
 8006778:	4619      	mov	r1, r3
 800677a:	4b14      	ldr	r3, [pc, #80]	; (80067cc <LTDC_SetConfig+0x330>)
 800677c:	4013      	ands	r3, r2
 800677e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	461a      	mov	r2, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	01db      	lsls	r3, r3, #7
 800678a:	4413      	add	r3, r2
 800678c:	3384      	adds	r3, #132	; 0x84
 800678e:	461a      	mov	r2, r3
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006794:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	461a      	mov	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	01db      	lsls	r3, r3, #7
 80067a0:	4413      	add	r3, r2
 80067a2:	3384      	adds	r3, #132	; 0x84
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	6812      	ldr	r2, [r2, #0]
 80067aa:	4611      	mov	r1, r2
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	01d2      	lsls	r2, r2, #7
 80067b0:	440a      	add	r2, r1
 80067b2:	3284      	adds	r2, #132	; 0x84
 80067b4:	f043 0301 	orr.w	r3, r3, #1
 80067b8:	6013      	str	r3, [r2, #0]
}
 80067ba:	bf00      	nop
 80067bc:	3724      	adds	r7, #36	; 0x24
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	fffff8f8 	.word	0xfffff8f8
 80067cc:	fffff800 	.word	0xfffff800

080067d0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80067d0:	b480      	push	{r7}
 80067d2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067d4:	4b05      	ldr	r3, [pc, #20]	; (80067ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a04      	ldr	r2, [pc, #16]	; (80067ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80067da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067de:	6013      	str	r3, [r2, #0]
}
 80067e0:	bf00      	nop
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	40007000 	.word	0x40007000

080067f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80067f6:	2300      	movs	r3, #0
 80067f8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80067fa:	4b23      	ldr	r3, [pc, #140]	; (8006888 <HAL_PWREx_EnableOverDrive+0x98>)
 80067fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fe:	4a22      	ldr	r2, [pc, #136]	; (8006888 <HAL_PWREx_EnableOverDrive+0x98>)
 8006800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006804:	6413      	str	r3, [r2, #64]	; 0x40
 8006806:	4b20      	ldr	r3, [pc, #128]	; (8006888 <HAL_PWREx_EnableOverDrive+0x98>)
 8006808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800680e:	603b      	str	r3, [r7, #0]
 8006810:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006812:	4b1e      	ldr	r3, [pc, #120]	; (800688c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a1d      	ldr	r2, [pc, #116]	; (800688c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800681c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800681e:	f7fd fb17 	bl	8003e50 <HAL_GetTick>
 8006822:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006824:	e009      	b.n	800683a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006826:	f7fd fb13 	bl	8003e50 <HAL_GetTick>
 800682a:	4602      	mov	r2, r0
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006834:	d901      	bls.n	800683a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e022      	b.n	8006880 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800683a:	4b14      	ldr	r3, [pc, #80]	; (800688c <HAL_PWREx_EnableOverDrive+0x9c>)
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006846:	d1ee      	bne.n	8006826 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006848:	4b10      	ldr	r3, [pc, #64]	; (800688c <HAL_PWREx_EnableOverDrive+0x9c>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a0f      	ldr	r2, [pc, #60]	; (800688c <HAL_PWREx_EnableOverDrive+0x9c>)
 800684e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006852:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006854:	f7fd fafc 	bl	8003e50 <HAL_GetTick>
 8006858:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800685a:	e009      	b.n	8006870 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800685c:	f7fd faf8 	bl	8003e50 <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800686a:	d901      	bls.n	8006870 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e007      	b.n	8006880 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006870:	4b06      	ldr	r3, [pc, #24]	; (800688c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006878:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800687c:	d1ee      	bne.n	800685c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3708      	adds	r7, #8
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	40023800 	.word	0x40023800
 800688c:	40007000 	.word	0x40007000

08006890 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af02      	add	r7, sp, #8
 8006896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006898:	f7fd fada 	bl	8003e50 <HAL_GetTick>
 800689c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d101      	bne.n	80068a8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e067      	b.n	8006978 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10b      	bne.n	80068cc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f7fc fc6d 	bl	800319c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80068c2:	f241 3188 	movw	r1, #5000	; 0x1388
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f85e 	bl	8006988 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	3b01      	subs	r3, #1
 80068dc:	021a      	lsls	r2, r3, #8
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	430a      	orrs	r2, r1
 80068e4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ea:	9300      	str	r3, [sp, #0]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	2120      	movs	r1, #32
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 f856 	bl	80069a4 <QSPI_WaitFlagStateUntilTimeout>
 80068f8:	4603      	mov	r3, r0
 80068fa:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80068fc:	7afb      	ldrb	r3, [r7, #11]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d135      	bne.n	800696e <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	4b1d      	ldr	r3, [pc, #116]	; (8006980 <HAL_QSPI_Init+0xf0>)
 800690a:	4013      	ands	r3, r2
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	6852      	ldr	r2, [r2, #4]
 8006910:	0611      	lsls	r1, r2, #24
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	68d2      	ldr	r2, [r2, #12]
 8006916:	4311      	orrs	r1, r2
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	69d2      	ldr	r2, [r2, #28]
 800691c:	4311      	orrs	r1, r2
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	6a12      	ldr	r2, [r2, #32]
 8006922:	4311      	orrs	r1, r2
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	6812      	ldr	r2, [r2, #0]
 8006928:	430b      	orrs	r3, r1
 800692a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	685a      	ldr	r2, [r3, #4]
 8006932:	4b14      	ldr	r3, [pc, #80]	; (8006984 <HAL_QSPI_Init+0xf4>)
 8006934:	4013      	ands	r3, r2
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	6912      	ldr	r2, [r2, #16]
 800693a:	0411      	lsls	r1, r2, #16
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	6952      	ldr	r2, [r2, #20]
 8006940:	4311      	orrs	r1, r2
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	6992      	ldr	r2, [r2, #24]
 8006946:	4311      	orrs	r1, r2
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	6812      	ldr	r2, [r2, #0]
 800694c:	430b      	orrs	r3, r1
 800694e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f042 0201 	orr.w	r2, r2, #1
 800695e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006976:	7afb      	ldrb	r3, [r7, #11]
}
 8006978:	4618      	mov	r0, r3
 800697a:	3710      	adds	r7, #16
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	00ffff2f 	.word	0x00ffff2f
 8006984:	ffe0f8fe 	.word	0xffe0f8fe

08006988 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	683a      	ldr	r2, [r7, #0]
 8006996:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006998:	bf00      	nop
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	603b      	str	r3, [r7, #0]
 80069b0:	4613      	mov	r3, r2
 80069b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80069b4:	e01a      	b.n	80069ec <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069bc:	d016      	beq.n	80069ec <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069be:	f7fd fa47 	bl	8003e50 <HAL_GetTick>
 80069c2:	4602      	mov	r2, r0
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	69ba      	ldr	r2, [r7, #24]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d302      	bcc.n	80069d4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10b      	bne.n	80069ec <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2204      	movs	r2, #4
 80069d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069e0:	f043 0201 	orr.w	r2, r3, #1
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e00e      	b.n	8006a0a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	689a      	ldr	r2, [r3, #8]
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	4013      	ands	r3, r2
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	bf14      	ite	ne
 80069fa:	2301      	movne	r3, #1
 80069fc:	2300      	moveq	r3, #0
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	461a      	mov	r2, r3
 8006a02:	79fb      	ldrb	r3, [r7, #7]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d1d6      	bne.n	80069b6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
	...

08006a14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b086      	sub	sp, #24
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d101      	bne.n	8006a2a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e291      	b.n	8006f4e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f000 8087 	beq.w	8006b46 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a38:	4b96      	ldr	r3, [pc, #600]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	f003 030c 	and.w	r3, r3, #12
 8006a40:	2b04      	cmp	r3, #4
 8006a42:	d00c      	beq.n	8006a5e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a44:	4b93      	ldr	r3, [pc, #588]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	f003 030c 	and.w	r3, r3, #12
 8006a4c:	2b08      	cmp	r3, #8
 8006a4e:	d112      	bne.n	8006a76 <HAL_RCC_OscConfig+0x62>
 8006a50:	4b90      	ldr	r3, [pc, #576]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a5c:	d10b      	bne.n	8006a76 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a5e:	4b8d      	ldr	r3, [pc, #564]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d06c      	beq.n	8006b44 <HAL_RCC_OscConfig+0x130>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d168      	bne.n	8006b44 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e26b      	b.n	8006f4e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a7e:	d106      	bne.n	8006a8e <HAL_RCC_OscConfig+0x7a>
 8006a80:	4b84      	ldr	r3, [pc, #528]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a83      	ldr	r2, [pc, #524]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006a86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a8a:	6013      	str	r3, [r2, #0]
 8006a8c:	e02e      	b.n	8006aec <HAL_RCC_OscConfig+0xd8>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10c      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x9c>
 8006a96:	4b7f      	ldr	r3, [pc, #508]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a7e      	ldr	r2, [pc, #504]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006a9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006aa0:	6013      	str	r3, [r2, #0]
 8006aa2:	4b7c      	ldr	r3, [pc, #496]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a7b      	ldr	r2, [pc, #492]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006aa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006aac:	6013      	str	r3, [r2, #0]
 8006aae:	e01d      	b.n	8006aec <HAL_RCC_OscConfig+0xd8>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ab8:	d10c      	bne.n	8006ad4 <HAL_RCC_OscConfig+0xc0>
 8006aba:	4b76      	ldr	r3, [pc, #472]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a75      	ldr	r2, [pc, #468]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ac4:	6013      	str	r3, [r2, #0]
 8006ac6:	4b73      	ldr	r3, [pc, #460]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a72      	ldr	r2, [pc, #456]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ad0:	6013      	str	r3, [r2, #0]
 8006ad2:	e00b      	b.n	8006aec <HAL_RCC_OscConfig+0xd8>
 8006ad4:	4b6f      	ldr	r3, [pc, #444]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a6e      	ldr	r2, [pc, #440]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ade:	6013      	str	r3, [r2, #0]
 8006ae0:	4b6c      	ldr	r3, [pc, #432]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a6b      	ldr	r2, [pc, #428]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006aea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d013      	beq.n	8006b1c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006af4:	f7fd f9ac 	bl	8003e50 <HAL_GetTick>
 8006af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006afa:	e008      	b.n	8006b0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006afc:	f7fd f9a8 	bl	8003e50 <HAL_GetTick>
 8006b00:	4602      	mov	r2, r0
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	1ad3      	subs	r3, r2, r3
 8006b06:	2b64      	cmp	r3, #100	; 0x64
 8006b08:	d901      	bls.n	8006b0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e21f      	b.n	8006f4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b0e:	4b61      	ldr	r3, [pc, #388]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d0f0      	beq.n	8006afc <HAL_RCC_OscConfig+0xe8>
 8006b1a:	e014      	b.n	8006b46 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b1c:	f7fd f998 	bl	8003e50 <HAL_GetTick>
 8006b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b22:	e008      	b.n	8006b36 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b24:	f7fd f994 	bl	8003e50 <HAL_GetTick>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	2b64      	cmp	r3, #100	; 0x64
 8006b30:	d901      	bls.n	8006b36 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e20b      	b.n	8006f4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b36:	4b57      	ldr	r3, [pc, #348]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1f0      	bne.n	8006b24 <HAL_RCC_OscConfig+0x110>
 8006b42:	e000      	b.n	8006b46 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 0302 	and.w	r3, r3, #2
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d069      	beq.n	8006c26 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006b52:	4b50      	ldr	r3, [pc, #320]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	f003 030c 	and.w	r3, r3, #12
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00b      	beq.n	8006b76 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b5e:	4b4d      	ldr	r3, [pc, #308]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f003 030c 	and.w	r3, r3, #12
 8006b66:	2b08      	cmp	r3, #8
 8006b68:	d11c      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x190>
 8006b6a:	4b4a      	ldr	r3, [pc, #296]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d116      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b76:	4b47      	ldr	r3, [pc, #284]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d005      	beq.n	8006b8e <HAL_RCC_OscConfig+0x17a>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d001      	beq.n	8006b8e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e1df      	b.n	8006f4e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b8e:	4b41      	ldr	r3, [pc, #260]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	00db      	lsls	r3, r3, #3
 8006b9c:	493d      	ldr	r1, [pc, #244]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ba2:	e040      	b.n	8006c26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d023      	beq.n	8006bf4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bac:	4b39      	ldr	r3, [pc, #228]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a38      	ldr	r2, [pc, #224]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006bb2:	f043 0301 	orr.w	r3, r3, #1
 8006bb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb8:	f7fd f94a 	bl	8003e50 <HAL_GetTick>
 8006bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bbe:	e008      	b.n	8006bd2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bc0:	f7fd f946 	bl	8003e50 <HAL_GetTick>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d901      	bls.n	8006bd2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e1bd      	b.n	8006f4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bd2:	4b30      	ldr	r3, [pc, #192]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0302 	and.w	r3, r3, #2
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d0f0      	beq.n	8006bc0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bde:	4b2d      	ldr	r3, [pc, #180]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	00db      	lsls	r3, r3, #3
 8006bec:	4929      	ldr	r1, [pc, #164]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	600b      	str	r3, [r1, #0]
 8006bf2:	e018      	b.n	8006c26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bf4:	4b27      	ldr	r3, [pc, #156]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a26      	ldr	r2, [pc, #152]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006bfa:	f023 0301 	bic.w	r3, r3, #1
 8006bfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c00:	f7fd f926 	bl	8003e50 <HAL_GetTick>
 8006c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c06:	e008      	b.n	8006c1a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c08:	f7fd f922 	bl	8003e50 <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d901      	bls.n	8006c1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e199      	b.n	8006f4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c1a:	4b1e      	ldr	r3, [pc, #120]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0302 	and.w	r3, r3, #2
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1f0      	bne.n	8006c08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0308 	and.w	r3, r3, #8
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d038      	beq.n	8006ca4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d019      	beq.n	8006c6e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c3a:	4b16      	ldr	r3, [pc, #88]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c3e:	4a15      	ldr	r2, [pc, #84]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006c40:	f043 0301 	orr.w	r3, r3, #1
 8006c44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c46:	f7fd f903 	bl	8003e50 <HAL_GetTick>
 8006c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c4c:	e008      	b.n	8006c60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c4e:	f7fd f8ff 	bl	8003e50 <HAL_GetTick>
 8006c52:	4602      	mov	r2, r0
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d901      	bls.n	8006c60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e176      	b.n	8006f4e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c60:	4b0c      	ldr	r3, [pc, #48]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c64:	f003 0302 	and.w	r3, r3, #2
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d0f0      	beq.n	8006c4e <HAL_RCC_OscConfig+0x23a>
 8006c6c:	e01a      	b.n	8006ca4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c6e:	4b09      	ldr	r3, [pc, #36]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c72:	4a08      	ldr	r2, [pc, #32]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006c74:	f023 0301 	bic.w	r3, r3, #1
 8006c78:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c7a:	f7fd f8e9 	bl	8003e50 <HAL_GetTick>
 8006c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c80:	e00a      	b.n	8006c98 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c82:	f7fd f8e5 	bl	8003e50 <HAL_GetTick>
 8006c86:	4602      	mov	r2, r0
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d903      	bls.n	8006c98 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e15c      	b.n	8006f4e <HAL_RCC_OscConfig+0x53a>
 8006c94:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c98:	4b91      	ldr	r3, [pc, #580]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c9c:	f003 0302 	and.w	r3, r3, #2
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1ee      	bne.n	8006c82 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0304 	and.w	r3, r3, #4
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 80a4 	beq.w	8006dfa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cb2:	4b8b      	ldr	r3, [pc, #556]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10d      	bne.n	8006cda <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cbe:	4b88      	ldr	r3, [pc, #544]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc2:	4a87      	ldr	r2, [pc, #540]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8006cca:	4b85      	ldr	r3, [pc, #532]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cd2:	60bb      	str	r3, [r7, #8]
 8006cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cda:	4b82      	ldr	r3, [pc, #520]	; (8006ee4 <HAL_RCC_OscConfig+0x4d0>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d118      	bne.n	8006d18 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006ce6:	4b7f      	ldr	r3, [pc, #508]	; (8006ee4 <HAL_RCC_OscConfig+0x4d0>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a7e      	ldr	r2, [pc, #504]	; (8006ee4 <HAL_RCC_OscConfig+0x4d0>)
 8006cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cf2:	f7fd f8ad 	bl	8003e50 <HAL_GetTick>
 8006cf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cf8:	e008      	b.n	8006d0c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cfa:	f7fd f8a9 	bl	8003e50 <HAL_GetTick>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	2b64      	cmp	r3, #100	; 0x64
 8006d06:	d901      	bls.n	8006d0c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	e120      	b.n	8006f4e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d0c:	4b75      	ldr	r3, [pc, #468]	; (8006ee4 <HAL_RCC_OscConfig+0x4d0>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d0f0      	beq.n	8006cfa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d106      	bne.n	8006d2e <HAL_RCC_OscConfig+0x31a>
 8006d20:	4b6f      	ldr	r3, [pc, #444]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d24:	4a6e      	ldr	r2, [pc, #440]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006d26:	f043 0301 	orr.w	r3, r3, #1
 8006d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8006d2c:	e02d      	b.n	8006d8a <HAL_RCC_OscConfig+0x376>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10c      	bne.n	8006d50 <HAL_RCC_OscConfig+0x33c>
 8006d36:	4b6a      	ldr	r3, [pc, #424]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d3a:	4a69      	ldr	r2, [pc, #420]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006d3c:	f023 0301 	bic.w	r3, r3, #1
 8006d40:	6713      	str	r3, [r2, #112]	; 0x70
 8006d42:	4b67      	ldr	r3, [pc, #412]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d46:	4a66      	ldr	r2, [pc, #408]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006d48:	f023 0304 	bic.w	r3, r3, #4
 8006d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8006d4e:	e01c      	b.n	8006d8a <HAL_RCC_OscConfig+0x376>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	2b05      	cmp	r3, #5
 8006d56:	d10c      	bne.n	8006d72 <HAL_RCC_OscConfig+0x35e>
 8006d58:	4b61      	ldr	r3, [pc, #388]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d5c:	4a60      	ldr	r2, [pc, #384]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006d5e:	f043 0304 	orr.w	r3, r3, #4
 8006d62:	6713      	str	r3, [r2, #112]	; 0x70
 8006d64:	4b5e      	ldr	r3, [pc, #376]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d68:	4a5d      	ldr	r2, [pc, #372]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006d6a:	f043 0301 	orr.w	r3, r3, #1
 8006d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8006d70:	e00b      	b.n	8006d8a <HAL_RCC_OscConfig+0x376>
 8006d72:	4b5b      	ldr	r3, [pc, #364]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d76:	4a5a      	ldr	r2, [pc, #360]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006d78:	f023 0301 	bic.w	r3, r3, #1
 8006d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8006d7e:	4b58      	ldr	r3, [pc, #352]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d82:	4a57      	ldr	r2, [pc, #348]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006d84:	f023 0304 	bic.w	r3, r3, #4
 8006d88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d015      	beq.n	8006dbe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d92:	f7fd f85d 	bl	8003e50 <HAL_GetTick>
 8006d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d98:	e00a      	b.n	8006db0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d9a:	f7fd f859 	bl	8003e50 <HAL_GetTick>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d901      	bls.n	8006db0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	e0ce      	b.n	8006f4e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006db0:	4b4b      	ldr	r3, [pc, #300]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db4:	f003 0302 	and.w	r3, r3, #2
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d0ee      	beq.n	8006d9a <HAL_RCC_OscConfig+0x386>
 8006dbc:	e014      	b.n	8006de8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dbe:	f7fd f847 	bl	8003e50 <HAL_GetTick>
 8006dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dc4:	e00a      	b.n	8006ddc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dc6:	f7fd f843 	bl	8003e50 <HAL_GetTick>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d901      	bls.n	8006ddc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	e0b8      	b.n	8006f4e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ddc:	4b40      	ldr	r3, [pc, #256]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de0:	f003 0302 	and.w	r3, r3, #2
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1ee      	bne.n	8006dc6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006de8:	7dfb      	ldrb	r3, [r7, #23]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d105      	bne.n	8006dfa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dee:	4b3c      	ldr	r3, [pc, #240]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df2:	4a3b      	ldr	r2, [pc, #236]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006df8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	f000 80a4 	beq.w	8006f4c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006e04:	4b36      	ldr	r3, [pc, #216]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	f003 030c 	and.w	r3, r3, #12
 8006e0c:	2b08      	cmp	r3, #8
 8006e0e:	d06b      	beq.n	8006ee8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d149      	bne.n	8006eac <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e18:	4b31      	ldr	r3, [pc, #196]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a30      	ldr	r2, [pc, #192]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006e1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e24:	f7fd f814 	bl	8003e50 <HAL_GetTick>
 8006e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e2a:	e008      	b.n	8006e3e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e2c:	f7fd f810 	bl	8003e50 <HAL_GetTick>
 8006e30:	4602      	mov	r2, r0
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	d901      	bls.n	8006e3e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e087      	b.n	8006f4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e3e:	4b28      	ldr	r3, [pc, #160]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1f0      	bne.n	8006e2c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	69da      	ldr	r2, [r3, #28]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	431a      	orrs	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e58:	019b      	lsls	r3, r3, #6
 8006e5a:	431a      	orrs	r2, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e60:	085b      	lsrs	r3, r3, #1
 8006e62:	3b01      	subs	r3, #1
 8006e64:	041b      	lsls	r3, r3, #16
 8006e66:	431a      	orrs	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6c:	061b      	lsls	r3, r3, #24
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	4a1b      	ldr	r2, [pc, #108]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006e72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e76:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e78:	4b19      	ldr	r3, [pc, #100]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a18      	ldr	r2, [pc, #96]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006e7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e84:	f7fc ffe4 	bl	8003e50 <HAL_GetTick>
 8006e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e8a:	e008      	b.n	8006e9e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e8c:	f7fc ffe0 	bl	8003e50 <HAL_GetTick>
 8006e90:	4602      	mov	r2, r0
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	d901      	bls.n	8006e9e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	e057      	b.n	8006f4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e9e:	4b10      	ldr	r3, [pc, #64]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d0f0      	beq.n	8006e8c <HAL_RCC_OscConfig+0x478>
 8006eaa:	e04f      	b.n	8006f4c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006eac:	4b0c      	ldr	r3, [pc, #48]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a0b      	ldr	r2, [pc, #44]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006eb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006eb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eb8:	f7fc ffca 	bl	8003e50 <HAL_GetTick>
 8006ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ebe:	e008      	b.n	8006ed2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ec0:	f7fc ffc6 	bl	8003e50 <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d901      	bls.n	8006ed2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e03d      	b.n	8006f4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ed2:	4b03      	ldr	r3, [pc, #12]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1f0      	bne.n	8006ec0 <HAL_RCC_OscConfig+0x4ac>
 8006ede:	e035      	b.n	8006f4c <HAL_RCC_OscConfig+0x538>
 8006ee0:	40023800 	.word	0x40023800
 8006ee4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006ee8:	4b1b      	ldr	r3, [pc, #108]	; (8006f58 <HAL_RCC_OscConfig+0x544>)
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d028      	beq.n	8006f48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d121      	bne.n	8006f48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d11a      	bne.n	8006f48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f18:	4013      	ands	r3, r2
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f1e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d111      	bne.n	8006f48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f2e:	085b      	lsrs	r3, r3, #1
 8006f30:	3b01      	subs	r3, #1
 8006f32:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d107      	bne.n	8006f48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f42:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d001      	beq.n	8006f4c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e000      	b.n	8006f4e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3718      	adds	r7, #24
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	40023800 	.word	0x40023800

08006f5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006f66:	2300      	movs	r3, #0
 8006f68:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d101      	bne.n	8006f74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e0d0      	b.n	8007116 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f74:	4b6a      	ldr	r3, [pc, #424]	; (8007120 <HAL_RCC_ClockConfig+0x1c4>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 030f 	and.w	r3, r3, #15
 8006f7c:	683a      	ldr	r2, [r7, #0]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d910      	bls.n	8006fa4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f82:	4b67      	ldr	r3, [pc, #412]	; (8007120 <HAL_RCC_ClockConfig+0x1c4>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f023 020f 	bic.w	r2, r3, #15
 8006f8a:	4965      	ldr	r1, [pc, #404]	; (8007120 <HAL_RCC_ClockConfig+0x1c4>)
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f92:	4b63      	ldr	r3, [pc, #396]	; (8007120 <HAL_RCC_ClockConfig+0x1c4>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 030f 	and.w	r3, r3, #15
 8006f9a:	683a      	ldr	r2, [r7, #0]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d001      	beq.n	8006fa4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e0b8      	b.n	8007116 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0302 	and.w	r3, r3, #2
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d020      	beq.n	8006ff2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0304 	and.w	r3, r3, #4
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d005      	beq.n	8006fc8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006fbc:	4b59      	ldr	r3, [pc, #356]	; (8007124 <HAL_RCC_ClockConfig+0x1c8>)
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	4a58      	ldr	r2, [pc, #352]	; (8007124 <HAL_RCC_ClockConfig+0x1c8>)
 8006fc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006fc6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0308 	and.w	r3, r3, #8
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d005      	beq.n	8006fe0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fd4:	4b53      	ldr	r3, [pc, #332]	; (8007124 <HAL_RCC_ClockConfig+0x1c8>)
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	4a52      	ldr	r2, [pc, #328]	; (8007124 <HAL_RCC_ClockConfig+0x1c8>)
 8006fda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006fde:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fe0:	4b50      	ldr	r3, [pc, #320]	; (8007124 <HAL_RCC_ClockConfig+0x1c8>)
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	494d      	ldr	r1, [pc, #308]	; (8007124 <HAL_RCC_ClockConfig+0x1c8>)
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 0301 	and.w	r3, r3, #1
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d040      	beq.n	8007080 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	2b01      	cmp	r3, #1
 8007004:	d107      	bne.n	8007016 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007006:	4b47      	ldr	r3, [pc, #284]	; (8007124 <HAL_RCC_ClockConfig+0x1c8>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800700e:	2b00      	cmp	r3, #0
 8007010:	d115      	bne.n	800703e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e07f      	b.n	8007116 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	2b02      	cmp	r3, #2
 800701c:	d107      	bne.n	800702e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800701e:	4b41      	ldr	r3, [pc, #260]	; (8007124 <HAL_RCC_ClockConfig+0x1c8>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d109      	bne.n	800703e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e073      	b.n	8007116 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800702e:	4b3d      	ldr	r3, [pc, #244]	; (8007124 <HAL_RCC_ClockConfig+0x1c8>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 0302 	and.w	r3, r3, #2
 8007036:	2b00      	cmp	r3, #0
 8007038:	d101      	bne.n	800703e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	e06b      	b.n	8007116 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800703e:	4b39      	ldr	r3, [pc, #228]	; (8007124 <HAL_RCC_ClockConfig+0x1c8>)
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	f023 0203 	bic.w	r2, r3, #3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	4936      	ldr	r1, [pc, #216]	; (8007124 <HAL_RCC_ClockConfig+0x1c8>)
 800704c:	4313      	orrs	r3, r2
 800704e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007050:	f7fc fefe 	bl	8003e50 <HAL_GetTick>
 8007054:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007056:	e00a      	b.n	800706e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007058:	f7fc fefa 	bl	8003e50 <HAL_GetTick>
 800705c:	4602      	mov	r2, r0
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	1ad3      	subs	r3, r2, r3
 8007062:	f241 3288 	movw	r2, #5000	; 0x1388
 8007066:	4293      	cmp	r3, r2
 8007068:	d901      	bls.n	800706e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	e053      	b.n	8007116 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800706e:	4b2d      	ldr	r3, [pc, #180]	; (8007124 <HAL_RCC_ClockConfig+0x1c8>)
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f003 020c 	and.w	r2, r3, #12
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	429a      	cmp	r2, r3
 800707e:	d1eb      	bne.n	8007058 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007080:	4b27      	ldr	r3, [pc, #156]	; (8007120 <HAL_RCC_ClockConfig+0x1c4>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 030f 	and.w	r3, r3, #15
 8007088:	683a      	ldr	r2, [r7, #0]
 800708a:	429a      	cmp	r2, r3
 800708c:	d210      	bcs.n	80070b0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800708e:	4b24      	ldr	r3, [pc, #144]	; (8007120 <HAL_RCC_ClockConfig+0x1c4>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f023 020f 	bic.w	r2, r3, #15
 8007096:	4922      	ldr	r1, [pc, #136]	; (8007120 <HAL_RCC_ClockConfig+0x1c4>)
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	4313      	orrs	r3, r2
 800709c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800709e:	4b20      	ldr	r3, [pc, #128]	; (8007120 <HAL_RCC_ClockConfig+0x1c4>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 030f 	and.w	r3, r3, #15
 80070a6:	683a      	ldr	r2, [r7, #0]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d001      	beq.n	80070b0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e032      	b.n	8007116 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0304 	and.w	r3, r3, #4
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d008      	beq.n	80070ce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070bc:	4b19      	ldr	r3, [pc, #100]	; (8007124 <HAL_RCC_ClockConfig+0x1c8>)
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	4916      	ldr	r1, [pc, #88]	; (8007124 <HAL_RCC_ClockConfig+0x1c8>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0308 	and.w	r3, r3, #8
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d009      	beq.n	80070ee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80070da:	4b12      	ldr	r3, [pc, #72]	; (8007124 <HAL_RCC_ClockConfig+0x1c8>)
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	00db      	lsls	r3, r3, #3
 80070e8:	490e      	ldr	r1, [pc, #56]	; (8007124 <HAL_RCC_ClockConfig+0x1c8>)
 80070ea:	4313      	orrs	r3, r2
 80070ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80070ee:	f000 f821 	bl	8007134 <HAL_RCC_GetSysClockFreq>
 80070f2:	4602      	mov	r2, r0
 80070f4:	4b0b      	ldr	r3, [pc, #44]	; (8007124 <HAL_RCC_ClockConfig+0x1c8>)
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	091b      	lsrs	r3, r3, #4
 80070fa:	f003 030f 	and.w	r3, r3, #15
 80070fe:	490a      	ldr	r1, [pc, #40]	; (8007128 <HAL_RCC_ClockConfig+0x1cc>)
 8007100:	5ccb      	ldrb	r3, [r1, r3]
 8007102:	fa22 f303 	lsr.w	r3, r2, r3
 8007106:	4a09      	ldr	r2, [pc, #36]	; (800712c <HAL_RCC_ClockConfig+0x1d0>)
 8007108:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800710a:	4b09      	ldr	r3, [pc, #36]	; (8007130 <HAL_RCC_ClockConfig+0x1d4>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4618      	mov	r0, r3
 8007110:	f7fc fce8 	bl	8003ae4 <HAL_InitTick>

  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	40023c00 	.word	0x40023c00
 8007124:	40023800 	.word	0x40023800
 8007128:	080282d4 	.word	0x080282d4
 800712c:	20000018 	.word	0x20000018
 8007130:	2000001c 	.word	0x2000001c

08007134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007138:	b090      	sub	sp, #64	; 0x40
 800713a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800713c:	2300      	movs	r3, #0
 800713e:	637b      	str	r3, [r7, #52]	; 0x34
 8007140:	2300      	movs	r3, #0
 8007142:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007144:	2300      	movs	r3, #0
 8007146:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8007148:	2300      	movs	r3, #0
 800714a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800714c:	4b59      	ldr	r3, [pc, #356]	; (80072b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	f003 030c 	and.w	r3, r3, #12
 8007154:	2b08      	cmp	r3, #8
 8007156:	d00d      	beq.n	8007174 <HAL_RCC_GetSysClockFreq+0x40>
 8007158:	2b08      	cmp	r3, #8
 800715a:	f200 80a1 	bhi.w	80072a0 <HAL_RCC_GetSysClockFreq+0x16c>
 800715e:	2b00      	cmp	r3, #0
 8007160:	d002      	beq.n	8007168 <HAL_RCC_GetSysClockFreq+0x34>
 8007162:	2b04      	cmp	r3, #4
 8007164:	d003      	beq.n	800716e <HAL_RCC_GetSysClockFreq+0x3a>
 8007166:	e09b      	b.n	80072a0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007168:	4b53      	ldr	r3, [pc, #332]	; (80072b8 <HAL_RCC_GetSysClockFreq+0x184>)
 800716a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800716c:	e09b      	b.n	80072a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800716e:	4b53      	ldr	r3, [pc, #332]	; (80072bc <HAL_RCC_GetSysClockFreq+0x188>)
 8007170:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007172:	e098      	b.n	80072a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007174:	4b4f      	ldr	r3, [pc, #316]	; (80072b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800717c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800717e:	4b4d      	ldr	r3, [pc, #308]	; (80072b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d028      	beq.n	80071dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800718a:	4b4a      	ldr	r3, [pc, #296]	; (80072b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	099b      	lsrs	r3, r3, #6
 8007190:	2200      	movs	r2, #0
 8007192:	623b      	str	r3, [r7, #32]
 8007194:	627a      	str	r2, [r7, #36]	; 0x24
 8007196:	6a3b      	ldr	r3, [r7, #32]
 8007198:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800719c:	2100      	movs	r1, #0
 800719e:	4b47      	ldr	r3, [pc, #284]	; (80072bc <HAL_RCC_GetSysClockFreq+0x188>)
 80071a0:	fb03 f201 	mul.w	r2, r3, r1
 80071a4:	2300      	movs	r3, #0
 80071a6:	fb00 f303 	mul.w	r3, r0, r3
 80071aa:	4413      	add	r3, r2
 80071ac:	4a43      	ldr	r2, [pc, #268]	; (80072bc <HAL_RCC_GetSysClockFreq+0x188>)
 80071ae:	fba0 1202 	umull	r1, r2, r0, r2
 80071b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071b4:	460a      	mov	r2, r1
 80071b6:	62ba      	str	r2, [r7, #40]	; 0x28
 80071b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071ba:	4413      	add	r3, r2
 80071bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c0:	2200      	movs	r2, #0
 80071c2:	61bb      	str	r3, [r7, #24]
 80071c4:	61fa      	str	r2, [r7, #28]
 80071c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80071ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80071ce:	f7f9 fc55 	bl	8000a7c <__aeabi_uldivmod>
 80071d2:	4602      	mov	r2, r0
 80071d4:	460b      	mov	r3, r1
 80071d6:	4613      	mov	r3, r2
 80071d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071da:	e053      	b.n	8007284 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071dc:	4b35      	ldr	r3, [pc, #212]	; (80072b4 <HAL_RCC_GetSysClockFreq+0x180>)
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	099b      	lsrs	r3, r3, #6
 80071e2:	2200      	movs	r2, #0
 80071e4:	613b      	str	r3, [r7, #16]
 80071e6:	617a      	str	r2, [r7, #20]
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80071ee:	f04f 0b00 	mov.w	fp, #0
 80071f2:	4652      	mov	r2, sl
 80071f4:	465b      	mov	r3, fp
 80071f6:	f04f 0000 	mov.w	r0, #0
 80071fa:	f04f 0100 	mov.w	r1, #0
 80071fe:	0159      	lsls	r1, r3, #5
 8007200:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007204:	0150      	lsls	r0, r2, #5
 8007206:	4602      	mov	r2, r0
 8007208:	460b      	mov	r3, r1
 800720a:	ebb2 080a 	subs.w	r8, r2, sl
 800720e:	eb63 090b 	sbc.w	r9, r3, fp
 8007212:	f04f 0200 	mov.w	r2, #0
 8007216:	f04f 0300 	mov.w	r3, #0
 800721a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800721e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007222:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007226:	ebb2 0408 	subs.w	r4, r2, r8
 800722a:	eb63 0509 	sbc.w	r5, r3, r9
 800722e:	f04f 0200 	mov.w	r2, #0
 8007232:	f04f 0300 	mov.w	r3, #0
 8007236:	00eb      	lsls	r3, r5, #3
 8007238:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800723c:	00e2      	lsls	r2, r4, #3
 800723e:	4614      	mov	r4, r2
 8007240:	461d      	mov	r5, r3
 8007242:	eb14 030a 	adds.w	r3, r4, sl
 8007246:	603b      	str	r3, [r7, #0]
 8007248:	eb45 030b 	adc.w	r3, r5, fp
 800724c:	607b      	str	r3, [r7, #4]
 800724e:	f04f 0200 	mov.w	r2, #0
 8007252:	f04f 0300 	mov.w	r3, #0
 8007256:	e9d7 4500 	ldrd	r4, r5, [r7]
 800725a:	4629      	mov	r1, r5
 800725c:	028b      	lsls	r3, r1, #10
 800725e:	4621      	mov	r1, r4
 8007260:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007264:	4621      	mov	r1, r4
 8007266:	028a      	lsls	r2, r1, #10
 8007268:	4610      	mov	r0, r2
 800726a:	4619      	mov	r1, r3
 800726c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800726e:	2200      	movs	r2, #0
 8007270:	60bb      	str	r3, [r7, #8]
 8007272:	60fa      	str	r2, [r7, #12]
 8007274:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007278:	f7f9 fc00 	bl	8000a7c <__aeabi_uldivmod>
 800727c:	4602      	mov	r2, r0
 800727e:	460b      	mov	r3, r1
 8007280:	4613      	mov	r3, r2
 8007282:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007284:	4b0b      	ldr	r3, [pc, #44]	; (80072b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	0c1b      	lsrs	r3, r3, #16
 800728a:	f003 0303 	and.w	r3, r3, #3
 800728e:	3301      	adds	r3, #1
 8007290:	005b      	lsls	r3, r3, #1
 8007292:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8007294:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007298:	fbb2 f3f3 	udiv	r3, r2, r3
 800729c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800729e:	e002      	b.n	80072a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80072a0:	4b05      	ldr	r3, [pc, #20]	; (80072b8 <HAL_RCC_GetSysClockFreq+0x184>)
 80072a2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80072a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3740      	adds	r7, #64	; 0x40
 80072ac:	46bd      	mov	sp, r7
 80072ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072b2:	bf00      	nop
 80072b4:	40023800 	.word	0x40023800
 80072b8:	00f42400 	.word	0x00f42400
 80072bc:	017d7840 	.word	0x017d7840

080072c0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072c0:	b480      	push	{r7}
 80072c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072c4:	4b03      	ldr	r3, [pc, #12]	; (80072d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80072c6:	681b      	ldr	r3, [r3, #0]
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	20000018 	.word	0x20000018

080072d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80072dc:	f7ff fff0 	bl	80072c0 <HAL_RCC_GetHCLKFreq>
 80072e0:	4602      	mov	r2, r0
 80072e2:	4b05      	ldr	r3, [pc, #20]	; (80072f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	0a9b      	lsrs	r3, r3, #10
 80072e8:	f003 0307 	and.w	r3, r3, #7
 80072ec:	4903      	ldr	r1, [pc, #12]	; (80072fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80072ee:	5ccb      	ldrb	r3, [r1, r3]
 80072f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	40023800 	.word	0x40023800
 80072fc:	080282e4 	.word	0x080282e4

08007300 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007304:	f7ff ffdc 	bl	80072c0 <HAL_RCC_GetHCLKFreq>
 8007308:	4602      	mov	r2, r0
 800730a:	4b05      	ldr	r3, [pc, #20]	; (8007320 <HAL_RCC_GetPCLK2Freq+0x20>)
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	0b5b      	lsrs	r3, r3, #13
 8007310:	f003 0307 	and.w	r3, r3, #7
 8007314:	4903      	ldr	r1, [pc, #12]	; (8007324 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007316:	5ccb      	ldrb	r3, [r1, r3]
 8007318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800731c:	4618      	mov	r0, r3
 800731e:	bd80      	pop	{r7, pc}
 8007320:	40023800 	.word	0x40023800
 8007324:	080282e4 	.word	0x080282e4

08007328 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	220f      	movs	r2, #15
 8007336:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007338:	4b12      	ldr	r3, [pc, #72]	; (8007384 <HAL_RCC_GetClockConfig+0x5c>)
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	f003 0203 	and.w	r2, r3, #3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007344:	4b0f      	ldr	r3, [pc, #60]	; (8007384 <HAL_RCC_GetClockConfig+0x5c>)
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007350:	4b0c      	ldr	r3, [pc, #48]	; (8007384 <HAL_RCC_GetClockConfig+0x5c>)
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800735c:	4b09      	ldr	r3, [pc, #36]	; (8007384 <HAL_RCC_GetClockConfig+0x5c>)
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	08db      	lsrs	r3, r3, #3
 8007362:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800736a:	4b07      	ldr	r3, [pc, #28]	; (8007388 <HAL_RCC_GetClockConfig+0x60>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 020f 	and.w	r2, r3, #15
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	601a      	str	r2, [r3, #0]
}
 8007376:	bf00      	nop
 8007378:	370c      	adds	r7, #12
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	40023800 	.word	0x40023800
 8007388:	40023c00 	.word	0x40023c00

0800738c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b088      	sub	sp, #32
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007394:	2300      	movs	r3, #0
 8007396:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007398:	2300      	movs	r3, #0
 800739a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800739c:	2300      	movs	r3, #0
 800739e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80073a0:	2300      	movs	r3, #0
 80073a2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80073a4:	2300      	movs	r3, #0
 80073a6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 0301 	and.w	r3, r3, #1
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d012      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80073b4:	4b69      	ldr	r3, [pc, #420]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	4a68      	ldr	r2, [pc, #416]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80073be:	6093      	str	r3, [r2, #8]
 80073c0:	4b66      	ldr	r3, [pc, #408]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073c2:	689a      	ldr	r2, [r3, #8]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c8:	4964      	ldr	r1, [pc, #400]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d101      	bne.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80073d6:	2301      	movs	r3, #1
 80073d8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d017      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80073e6:	4b5d      	ldr	r3, [pc, #372]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073f4:	4959      	ldr	r1, [pc, #356]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073f6:	4313      	orrs	r3, r2
 80073f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007400:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007404:	d101      	bne.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007406:	2301      	movs	r3, #1
 8007408:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800740e:	2b00      	cmp	r3, #0
 8007410:	d101      	bne.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007412:	2301      	movs	r3, #1
 8007414:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800741e:	2b00      	cmp	r3, #0
 8007420:	d017      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007422:	4b4e      	ldr	r3, [pc, #312]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007428:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007430:	494a      	ldr	r1, [pc, #296]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007432:	4313      	orrs	r3, r2
 8007434:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007440:	d101      	bne.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007442:	2301      	movs	r3, #1
 8007444:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744a:	2b00      	cmp	r3, #0
 800744c:	d101      	bne.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800744e:	2301      	movs	r3, #1
 8007450:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d001      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800745e:	2301      	movs	r3, #1
 8007460:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f003 0320 	and.w	r3, r3, #32
 800746a:	2b00      	cmp	r3, #0
 800746c:	f000 808b 	beq.w	8007586 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007470:	4b3a      	ldr	r3, [pc, #232]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007474:	4a39      	ldr	r2, [pc, #228]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800747a:	6413      	str	r3, [r2, #64]	; 0x40
 800747c:	4b37      	ldr	r3, [pc, #220]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800747e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007484:	60bb      	str	r3, [r7, #8]
 8007486:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007488:	4b35      	ldr	r3, [pc, #212]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a34      	ldr	r2, [pc, #208]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800748e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007492:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007494:	f7fc fcdc 	bl	8003e50 <HAL_GetTick>
 8007498:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800749a:	e008      	b.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800749c:	f7fc fcd8 	bl	8003e50 <HAL_GetTick>
 80074a0:	4602      	mov	r2, r0
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	2b64      	cmp	r3, #100	; 0x64
 80074a8:	d901      	bls.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80074aa:	2303      	movs	r3, #3
 80074ac:	e357      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80074ae:	4b2c      	ldr	r3, [pc, #176]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d0f0      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80074ba:	4b28      	ldr	r3, [pc, #160]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074c2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d035      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074d2:	693a      	ldr	r2, [r7, #16]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d02e      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80074d8:	4b20      	ldr	r3, [pc, #128]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074e0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80074e2:	4b1e      	ldr	r3, [pc, #120]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074e6:	4a1d      	ldr	r2, [pc, #116]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074ec:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80074ee:	4b1b      	ldr	r3, [pc, #108]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074f2:	4a1a      	ldr	r2, [pc, #104]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80074fa:	4a18      	ldr	r2, [pc, #96]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007500:	4b16      	ldr	r3, [pc, #88]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007504:	f003 0301 	and.w	r3, r3, #1
 8007508:	2b01      	cmp	r3, #1
 800750a:	d114      	bne.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800750c:	f7fc fca0 	bl	8003e50 <HAL_GetTick>
 8007510:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007512:	e00a      	b.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007514:	f7fc fc9c 	bl	8003e50 <HAL_GetTick>
 8007518:	4602      	mov	r2, r0
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007522:	4293      	cmp	r3, r2
 8007524:	d901      	bls.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007526:	2303      	movs	r3, #3
 8007528:	e319      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800752a:	4b0c      	ldr	r3, [pc, #48]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800752c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800752e:	f003 0302 	and.w	r3, r3, #2
 8007532:	2b00      	cmp	r3, #0
 8007534:	d0ee      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800753a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800753e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007542:	d111      	bne.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007544:	4b05      	ldr	r3, [pc, #20]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007550:	4b04      	ldr	r3, [pc, #16]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007552:	400b      	ands	r3, r1
 8007554:	4901      	ldr	r1, [pc, #4]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007556:	4313      	orrs	r3, r2
 8007558:	608b      	str	r3, [r1, #8]
 800755a:	e00b      	b.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800755c:	40023800 	.word	0x40023800
 8007560:	40007000 	.word	0x40007000
 8007564:	0ffffcff 	.word	0x0ffffcff
 8007568:	4baa      	ldr	r3, [pc, #680]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	4aa9      	ldr	r2, [pc, #676]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800756e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007572:	6093      	str	r3, [r2, #8]
 8007574:	4ba7      	ldr	r3, [pc, #668]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007576:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800757c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007580:	49a4      	ldr	r1, [pc, #656]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007582:	4313      	orrs	r3, r2
 8007584:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 0310 	and.w	r3, r3, #16
 800758e:	2b00      	cmp	r3, #0
 8007590:	d010      	beq.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007592:	4ba0      	ldr	r3, [pc, #640]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007594:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007598:	4a9e      	ldr	r2, [pc, #632]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800759a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800759e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80075a2:	4b9c      	ldr	r3, [pc, #624]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075a4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ac:	4999      	ldr	r1, [pc, #612]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075ae:	4313      	orrs	r3, r2
 80075b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00a      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80075c0:	4b94      	ldr	r3, [pc, #592]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075ce:	4991      	ldr	r1, [pc, #580]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075d0:	4313      	orrs	r3, r2
 80075d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00a      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80075e2:	4b8c      	ldr	r3, [pc, #560]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075f0:	4988      	ldr	r1, [pc, #544]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075f2:	4313      	orrs	r3, r2
 80075f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00a      	beq.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007604:	4b83      	ldr	r3, [pc, #524]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800760a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007612:	4980      	ldr	r1, [pc, #512]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007614:	4313      	orrs	r3, r2
 8007616:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00a      	beq.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007626:	4b7b      	ldr	r3, [pc, #492]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800762c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007634:	4977      	ldr	r1, [pc, #476]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007636:	4313      	orrs	r3, r2
 8007638:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00a      	beq.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007648:	4b72      	ldr	r3, [pc, #456]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800764a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800764e:	f023 0203 	bic.w	r2, r3, #3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007656:	496f      	ldr	r1, [pc, #444]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007658:	4313      	orrs	r3, r2
 800765a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00a      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800766a:	4b6a      	ldr	r3, [pc, #424]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800766c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007670:	f023 020c 	bic.w	r2, r3, #12
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007678:	4966      	ldr	r1, [pc, #408]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800767a:	4313      	orrs	r3, r2
 800767c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007688:	2b00      	cmp	r3, #0
 800768a:	d00a      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800768c:	4b61      	ldr	r3, [pc, #388]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800768e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007692:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800769a:	495e      	ldr	r1, [pc, #376]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800769c:	4313      	orrs	r3, r2
 800769e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00a      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80076ae:	4b59      	ldr	r3, [pc, #356]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076b4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076bc:	4955      	ldr	r1, [pc, #340]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076be:	4313      	orrs	r3, r2
 80076c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00a      	beq.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80076d0:	4b50      	ldr	r3, [pc, #320]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076de:	494d      	ldr	r1, [pc, #308]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00a      	beq.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80076f2:	4b48      	ldr	r3, [pc, #288]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076f8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007700:	4944      	ldr	r1, [pc, #272]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007702:	4313      	orrs	r3, r2
 8007704:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00a      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007714:	4b3f      	ldr	r3, [pc, #252]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800771a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007722:	493c      	ldr	r1, [pc, #240]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007724:	4313      	orrs	r3, r2
 8007726:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00a      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007736:	4b37      	ldr	r3, [pc, #220]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800773c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007744:	4933      	ldr	r1, [pc, #204]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007746:	4313      	orrs	r3, r2
 8007748:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d00a      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007758:	4b2e      	ldr	r3, [pc, #184]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800775a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800775e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007766:	492b      	ldr	r1, [pc, #172]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007768:	4313      	orrs	r3, r2
 800776a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d011      	beq.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800777a:	4b26      	ldr	r3, [pc, #152]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800777c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007780:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007788:	4922      	ldr	r1, [pc, #136]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800778a:	4313      	orrs	r3, r2
 800778c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007794:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007798:	d101      	bne.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800779a:	2301      	movs	r3, #1
 800779c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 0308 	and.w	r3, r3, #8
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d001      	beq.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80077aa:	2301      	movs	r3, #1
 80077ac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00a      	beq.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80077ba:	4b16      	ldr	r3, [pc, #88]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077c0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077c8:	4912      	ldr	r1, [pc, #72]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077ca:	4313      	orrs	r3, r2
 80077cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d00b      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80077dc:	4b0d      	ldr	r3, [pc, #52]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077e2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077ec:	4909      	ldr	r1, [pc, #36]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077ee:	4313      	orrs	r3, r2
 80077f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d005      	beq.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007802:	f040 80d9 	bne.w	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007806:	4b03      	ldr	r3, [pc, #12]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a02      	ldr	r2, [pc, #8]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800780c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007810:	6013      	str	r3, [r2, #0]
 8007812:	e001      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007814:	40023800 	.word	0x40023800

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007818:	f7fc fb1a 	bl	8003e50 <HAL_GetTick>
 800781c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800781e:	e008      	b.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007820:	f7fc fb16 	bl	8003e50 <HAL_GetTick>
 8007824:	4602      	mov	r2, r0
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	1ad3      	subs	r3, r2, r3
 800782a:	2b64      	cmp	r3, #100	; 0x64
 800782c:	d901      	bls.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800782e:	2303      	movs	r3, #3
 8007830:	e195      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007832:	4b6d      	ldr	r3, [pc, #436]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1f0      	bne.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x494>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f003 0301 	and.w	r3, r3, #1
 8007846:	2b00      	cmp	r3, #0
 8007848:	d021      	beq.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800784e:	2b00      	cmp	r3, #0
 8007850:	d11d      	bne.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007852:	4b65      	ldr	r3, [pc, #404]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007858:	0c1b      	lsrs	r3, r3, #16
 800785a:	f003 0303 	and.w	r3, r3, #3
 800785e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007860:	4b61      	ldr	r3, [pc, #388]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007862:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007866:	0e1b      	lsrs	r3, r3, #24
 8007868:	f003 030f 	and.w	r3, r3, #15
 800786c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	019a      	lsls	r2, r3, #6
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	041b      	lsls	r3, r3, #16
 8007878:	431a      	orrs	r2, r3
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	061b      	lsls	r3, r3, #24
 800787e:	431a      	orrs	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	071b      	lsls	r3, r3, #28
 8007886:	4958      	ldr	r1, [pc, #352]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007888:	4313      	orrs	r3, r2
 800788a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007896:	2b00      	cmp	r3, #0
 8007898:	d004      	beq.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800789e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078a2:	d00a      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d02e      	beq.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x582>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078b8:	d129      	bne.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x582>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80078ba:	4b4b      	ldr	r3, [pc, #300]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078c0:	0c1b      	lsrs	r3, r3, #16
 80078c2:	f003 0303 	and.w	r3, r3, #3
 80078c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80078c8:	4b47      	ldr	r3, [pc, #284]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078ce:	0f1b      	lsrs	r3, r3, #28
 80078d0:	f003 0307 	and.w	r3, r3, #7
 80078d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	019a      	lsls	r2, r3, #6
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	041b      	lsls	r3, r3, #16
 80078e0:	431a      	orrs	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	061b      	lsls	r3, r3, #24
 80078e8:	431a      	orrs	r2, r3
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	071b      	lsls	r3, r3, #28
 80078ee:	493e      	ldr	r1, [pc, #248]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078f0:	4313      	orrs	r3, r2
 80078f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80078f6:	4b3c      	ldr	r3, [pc, #240]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078fc:	f023 021f 	bic.w	r2, r3, #31
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007904:	3b01      	subs	r3, #1
 8007906:	4938      	ldr	r1, [pc, #224]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007908:	4313      	orrs	r3, r2
 800790a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007916:	2b00      	cmp	r3, #0
 8007918:	d01d      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800791a:	4b33      	ldr	r3, [pc, #204]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800791c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007920:	0e1b      	lsrs	r3, r3, #24
 8007922:	f003 030f 	and.w	r3, r3, #15
 8007926:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007928:	4b2f      	ldr	r3, [pc, #188]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800792a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800792e:	0f1b      	lsrs	r3, r3, #28
 8007930:	f003 0307 	and.w	r3, r3, #7
 8007934:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	019a      	lsls	r2, r3, #6
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	691b      	ldr	r3, [r3, #16]
 8007940:	041b      	lsls	r3, r3, #16
 8007942:	431a      	orrs	r2, r3
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	061b      	lsls	r3, r3, #24
 8007948:	431a      	orrs	r2, r3
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	071b      	lsls	r3, r3, #28
 800794e:	4926      	ldr	r1, [pc, #152]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007950:	4313      	orrs	r3, r2
 8007952:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800795e:	2b00      	cmp	r3, #0
 8007960:	d011      	beq.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	019a      	lsls	r2, r3, #6
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	041b      	lsls	r3, r3, #16
 800796e:	431a      	orrs	r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	061b      	lsls	r3, r3, #24
 8007976:	431a      	orrs	r2, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	071b      	lsls	r3, r3, #28
 800797e:	491a      	ldr	r1, [pc, #104]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007980:	4313      	orrs	r3, r2
 8007982:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007986:	4b18      	ldr	r3, [pc, #96]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a17      	ldr	r2, [pc, #92]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800798c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007990:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007992:	f7fc fa5d 	bl	8003e50 <HAL_GetTick>
 8007996:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007998:	e008      	b.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x620>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800799a:	f7fc fa59 	bl	8003e50 <HAL_GetTick>
 800799e:	4602      	mov	r2, r0
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	1ad3      	subs	r3, r2, r3
 80079a4:	2b64      	cmp	r3, #100	; 0x64
 80079a6:	d901      	bls.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x620>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80079a8:	2303      	movs	r3, #3
 80079aa:	e0d8      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80079ac:	4b0e      	ldr	r3, [pc, #56]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d0f0      	beq.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x60e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	f040 80ce 	bne.w	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80079c0:	4b09      	ldr	r3, [pc, #36]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a08      	ldr	r2, [pc, #32]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80079c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079cc:	f7fc fa40 	bl	8003e50 <HAL_GetTick>
 80079d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80079d2:	e00b      	b.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80079d4:	f7fc fa3c 	bl	8003e50 <HAL_GetTick>
 80079d8:	4602      	mov	r2, r0
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	2b64      	cmp	r3, #100	; 0x64
 80079e0:	d904      	bls.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80079e2:	2303      	movs	r3, #3
 80079e4:	e0bb      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80079e6:	bf00      	nop
 80079e8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80079ec:	4b5e      	ldr	r3, [pc, #376]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079f8:	d0ec      	beq.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x648>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d003      	beq.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d009      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d02e      	beq.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d12a      	bne.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007a22:	4b51      	ldr	r3, [pc, #324]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a28:	0c1b      	lsrs	r3, r3, #16
 8007a2a:	f003 0303 	and.w	r3, r3, #3
 8007a2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007a30:	4b4d      	ldr	r3, [pc, #308]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a36:	0f1b      	lsrs	r3, r3, #28
 8007a38:	f003 0307 	and.w	r3, r3, #7
 8007a3c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	695b      	ldr	r3, [r3, #20]
 8007a42:	019a      	lsls	r2, r3, #6
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	041b      	lsls	r3, r3, #16
 8007a48:	431a      	orrs	r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	061b      	lsls	r3, r3, #24
 8007a50:	431a      	orrs	r2, r3
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	071b      	lsls	r3, r3, #28
 8007a56:	4944      	ldr	r1, [pc, #272]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007a5e:	4b42      	ldr	r3, [pc, #264]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a64:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a6c:	3b01      	subs	r3, #1
 8007a6e:	021b      	lsls	r3, r3, #8
 8007a70:	493d      	ldr	r1, [pc, #244]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a72:	4313      	orrs	r3, r2
 8007a74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d022      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a8c:	d11d      	bne.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007a8e:	4b36      	ldr	r3, [pc, #216]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a94:	0e1b      	lsrs	r3, r3, #24
 8007a96:	f003 030f 	and.w	r3, r3, #15
 8007a9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007a9c:	4b32      	ldr	r3, [pc, #200]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aa2:	0f1b      	lsrs	r3, r3, #28
 8007aa4:	f003 0307 	and.w	r3, r3, #7
 8007aa8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	019a      	lsls	r2, r3, #6
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6a1b      	ldr	r3, [r3, #32]
 8007ab4:	041b      	lsls	r3, r3, #16
 8007ab6:	431a      	orrs	r2, r3
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	061b      	lsls	r3, r3, #24
 8007abc:	431a      	orrs	r2, r3
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	071b      	lsls	r3, r3, #28
 8007ac2:	4929      	ldr	r1, [pc, #164]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 0308 	and.w	r3, r3, #8
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d028      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007ad6:	4b24      	ldr	r3, [pc, #144]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007adc:	0e1b      	lsrs	r3, r3, #24
 8007ade:	f003 030f 	and.w	r3, r3, #15
 8007ae2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007ae4:	4b20      	ldr	r3, [pc, #128]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aea:	0c1b      	lsrs	r3, r3, #16
 8007aec:	f003 0303 	and.w	r3, r3, #3
 8007af0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	695b      	ldr	r3, [r3, #20]
 8007af6:	019a      	lsls	r2, r3, #6
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	041b      	lsls	r3, r3, #16
 8007afc:	431a      	orrs	r2, r3
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	061b      	lsls	r3, r3, #24
 8007b02:	431a      	orrs	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	69db      	ldr	r3, [r3, #28]
 8007b08:	071b      	lsls	r3, r3, #28
 8007b0a:	4917      	ldr	r1, [pc, #92]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007b12:	4b15      	ldr	r3, [pc, #84]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b20:	4911      	ldr	r1, [pc, #68]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b22:	4313      	orrs	r3, r2
 8007b24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007b28:	4b0f      	ldr	r3, [pc, #60]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a0e      	ldr	r2, [pc, #56]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b34:	f7fc f98c 	bl	8003e50 <HAL_GetTick>
 8007b38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007b3a:	e008      	b.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007b3c:	f7fc f988 	bl	8003e50 <HAL_GetTick>
 8007b40:	4602      	mov	r2, r0
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	1ad3      	subs	r3, r2, r3
 8007b46:	2b64      	cmp	r3, #100	; 0x64
 8007b48:	d901      	bls.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	e007      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007b4e:	4b06      	ldr	r3, [pc, #24]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b5a:	d1ef      	bne.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3720      	adds	r7, #32
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	40023800 	.word	0x40023800

08007b6c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b087      	sub	sp, #28
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007b74:	2300      	movs	r3, #0
 8007b76:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8007b80:	2300      	movs	r3, #0
 8007b82:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007b8a:	f040 808d 	bne.w	8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007b8e:	4b93      	ldr	r3, [pc, #588]	; (8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b94:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007b9c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ba4:	d07c      	beq.n	8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007bac:	d87b      	bhi.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d004      	beq.n	8007bbe <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bba:	d039      	beq.n	8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007bbc:	e073      	b.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007bbe:	4b87      	ldr	r3, [pc, #540]	; (8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d108      	bne.n	8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007bca:	4b84      	ldr	r3, [pc, #528]	; (8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bd2:	4a83      	ldr	r2, [pc, #524]	; (8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bd8:	613b      	str	r3, [r7, #16]
 8007bda:	e007      	b.n	8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007bdc:	4b7f      	ldr	r3, [pc, #508]	; (8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007be4:	4a7f      	ldr	r2, [pc, #508]	; (8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bea:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007bec:	4b7b      	ldr	r3, [pc, #492]	; (8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bf2:	0e1b      	lsrs	r3, r3, #24
 8007bf4:	f003 030f 	and.w	r3, r3, #15
 8007bf8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007bfa:	4b78      	ldr	r3, [pc, #480]	; (8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c00:	099b      	lsrs	r3, r3, #6
 8007c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c06:	693a      	ldr	r2, [r7, #16]
 8007c08:	fb03 f202 	mul.w	r2, r3, r2
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c12:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007c14:	4b71      	ldr	r3, [pc, #452]	; (8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007c16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c1a:	0a1b      	lsrs	r3, r3, #8
 8007c1c:	f003 031f 	and.w	r3, r3, #31
 8007c20:	3301      	adds	r3, #1
 8007c22:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007c24:	697a      	ldr	r2, [r7, #20]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c2c:	617b      	str	r3, [r7, #20]
        break;
 8007c2e:	e03b      	b.n	8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007c30:	4b6a      	ldr	r3, [pc, #424]	; (8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d108      	bne.n	8007c4e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007c3c:	4b67      	ldr	r3, [pc, #412]	; (8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c44:	4a66      	ldr	r2, [pc, #408]	; (8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c4a:	613b      	str	r3, [r7, #16]
 8007c4c:	e007      	b.n	8007c5e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007c4e:	4b63      	ldr	r3, [pc, #396]	; (8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c56:	4a63      	ldr	r2, [pc, #396]	; (8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c5c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007c5e:	4b5f      	ldr	r3, [pc, #380]	; (8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007c60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c64:	0e1b      	lsrs	r3, r3, #24
 8007c66:	f003 030f 	and.w	r3, r3, #15
 8007c6a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007c6c:	4b5b      	ldr	r3, [pc, #364]	; (8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007c6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c72:	099b      	lsrs	r3, r3, #6
 8007c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c78:	693a      	ldr	r2, [r7, #16]
 8007c7a:	fb03 f202 	mul.w	r2, r3, r2
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c84:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007c86:	4b55      	ldr	r3, [pc, #340]	; (8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c8c:	f003 031f 	and.w	r3, r3, #31
 8007c90:	3301      	adds	r3, #1
 8007c92:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007c94:	697a      	ldr	r2, [r7, #20]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c9c:	617b      	str	r3, [r7, #20]
        break;
 8007c9e:	e003      	b.n	8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007ca0:	4b51      	ldr	r3, [pc, #324]	; (8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007ca2:	617b      	str	r3, [r7, #20]
        break;
 8007ca4:	e000      	b.n	8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8007ca6:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cae:	f040 808d 	bne.w	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007cb2:	4b4a      	ldr	r3, [pc, #296]	; (8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cb8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007cc0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007cc8:	d07c      	beq.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007cd0:	d87b      	bhi.n	8007dca <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d004      	beq.n	8007ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cde:	d039      	beq.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007ce0:	e073      	b.n	8007dca <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007ce2:	4b3e      	ldr	r3, [pc, #248]	; (8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d108      	bne.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007cee:	4b3b      	ldr	r3, [pc, #236]	; (8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cf6:	4a3a      	ldr	r2, [pc, #232]	; (8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cfc:	613b      	str	r3, [r7, #16]
 8007cfe:	e007      	b.n	8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007d00:	4b36      	ldr	r3, [pc, #216]	; (8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d08:	4a36      	ldr	r2, [pc, #216]	; (8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d0e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007d10:	4b32      	ldr	r3, [pc, #200]	; (8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d16:	0e1b      	lsrs	r3, r3, #24
 8007d18:	f003 030f 	and.w	r3, r3, #15
 8007d1c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007d1e:	4b2f      	ldr	r3, [pc, #188]	; (8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d24:	099b      	lsrs	r3, r3, #6
 8007d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	fb03 f202 	mul.w	r2, r3, r2
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d36:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007d38:	4b28      	ldr	r3, [pc, #160]	; (8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d3e:	0a1b      	lsrs	r3, r3, #8
 8007d40:	f003 031f 	and.w	r3, r3, #31
 8007d44:	3301      	adds	r3, #1
 8007d46:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007d48:	697a      	ldr	r2, [r7, #20]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d50:	617b      	str	r3, [r7, #20]
        break;
 8007d52:	e03b      	b.n	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007d54:	4b21      	ldr	r3, [pc, #132]	; (8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d108      	bne.n	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007d60:	4b1e      	ldr	r3, [pc, #120]	; (8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d68:	4a1d      	ldr	r2, [pc, #116]	; (8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d6e:	613b      	str	r3, [r7, #16]
 8007d70:	e007      	b.n	8007d82 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007d72:	4b1a      	ldr	r3, [pc, #104]	; (8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d7a:	4a1a      	ldr	r2, [pc, #104]	; (8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d80:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007d82:	4b16      	ldr	r3, [pc, #88]	; (8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d88:	0e1b      	lsrs	r3, r3, #24
 8007d8a:	f003 030f 	and.w	r3, r3, #15
 8007d8e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007d90:	4b12      	ldr	r3, [pc, #72]	; (8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d96:	099b      	lsrs	r3, r3, #6
 8007d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d9c:	693a      	ldr	r2, [r7, #16]
 8007d9e:	fb03 f202 	mul.w	r2, r3, r2
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007da8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007daa:	4b0c      	ldr	r3, [pc, #48]	; (8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007dac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007db0:	f003 031f 	and.w	r3, r3, #31
 8007db4:	3301      	adds	r3, #1
 8007db6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007db8:	697a      	ldr	r2, [r7, #20]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dc0:	617b      	str	r3, [r7, #20]
        break;
 8007dc2:	e003      	b.n	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007dc4:	4b08      	ldr	r3, [pc, #32]	; (8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007dc6:	617b      	str	r3, [r7, #20]
        break;
 8007dc8:	e000      	b.n	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8007dca:	bf00      	nop
      }
    }
  }

  return frequency;
 8007dcc:	697b      	ldr	r3, [r7, #20]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	371c      	adds	r7, #28
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop
 8007ddc:	40023800 	.word	0x40023800
 8007de0:	00f42400 	.word	0x00f42400
 8007de4:	017d7840 	.word	0x017d7840
 8007de8:	00bb8000 	.word	0x00bb8000

08007dec <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d101      	bne.n	8007dfe <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e06b      	b.n	8007ed6 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	7f5b      	ldrb	r3, [r3, #29]
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d105      	bne.n	8007e14 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f7fb fa54 	bl	80032bc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2202      	movs	r2, #2
 8007e18:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	22ca      	movs	r2, #202	; 0xca
 8007e20:	625a      	str	r2, [r3, #36]	; 0x24
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2253      	movs	r2, #83	; 0x53
 8007e28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 fb00 	bl	8008430 <RTC_EnterInitMode>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d008      	beq.n	8007e48 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	22ff      	movs	r2, #255	; 0xff
 8007e3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2204      	movs	r2, #4
 8007e42:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007e44:	2301      	movs	r3, #1
 8007e46:	e046      	b.n	8007ed6 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	6899      	ldr	r1, [r3, #8]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	4b23      	ldr	r3, [pc, #140]	; (8007ee0 <HAL_RTC_Init+0xf4>)
 8007e54:	400b      	ands	r3, r1
 8007e56:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	6899      	ldr	r1, [r3, #8]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	685a      	ldr	r2, [r3, #4]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	431a      	orrs	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	695b      	ldr	r3, [r3, #20]
 8007e6c:	431a      	orrs	r2, r3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	430a      	orrs	r2, r1
 8007e74:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	68d2      	ldr	r2, [r2, #12]
 8007e7e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	6919      	ldr	r1, [r3, #16]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	041a      	lsls	r2, r3, #16
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	430a      	orrs	r2, r1
 8007e92:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68da      	ldr	r2, [r3, #12]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ea2:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f022 0208 	bic.w	r2, r2, #8
 8007eb2:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	699a      	ldr	r2, [r3, #24]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	430a      	orrs	r2, r1
 8007ec4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	22ff      	movs	r2, #255	; 0xff
 8007ecc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
  }
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3708      	adds	r7, #8
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	ff8fffbf 	.word	0xff8fffbf

08007ee4 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007ee4:	b590      	push	{r4, r7, lr}
 8007ee6:	b087      	sub	sp, #28
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	7f1b      	ldrb	r3, [r3, #28]
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d101      	bne.n	8007f00 <HAL_RTC_SetTime+0x1c>
 8007efc:	2302      	movs	r3, #2
 8007efe:	e0a8      	b.n	8008052 <HAL_RTC_SetTime+0x16e>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2201      	movs	r2, #1
 8007f04:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2202      	movs	r2, #2
 8007f0a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d126      	bne.n	8007f60 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d102      	bne.n	8007f26 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	2200      	movs	r2, #0
 8007f24:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f000 faac 	bl	8008488 <RTC_ByteToBcd2>
 8007f30:	4603      	mov	r3, r0
 8007f32:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	785b      	ldrb	r3, [r3, #1]
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f000 faa5 	bl	8008488 <RTC_ByteToBcd2>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007f42:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	789b      	ldrb	r3, [r3, #2]
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f000 fa9d 	bl	8008488 <RTC_ByteToBcd2>
 8007f4e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007f50:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	7b1b      	ldrb	r3, [r3, #12]
 8007f58:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	617b      	str	r3, [r7, #20]
 8007f5e:	e018      	b.n	8007f92 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d102      	bne.n	8007f74 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	2200      	movs	r2, #0
 8007f72:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	785b      	ldrb	r3, [r3, #1]
 8007f7e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007f80:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007f82:	68ba      	ldr	r2, [r7, #8]
 8007f84:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007f86:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	7b1b      	ldrb	r3, [r3, #12]
 8007f8c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	22ca      	movs	r2, #202	; 0xca
 8007f98:	625a      	str	r2, [r3, #36]	; 0x24
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	2253      	movs	r2, #83	; 0x53
 8007fa0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007fa2:	68f8      	ldr	r0, [r7, #12]
 8007fa4:	f000 fa44 	bl	8008430 <RTC_EnterInitMode>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00b      	beq.n	8007fc6 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	22ff      	movs	r2, #255	; 0xff
 8007fb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2204      	movs	r2, #4
 8007fba:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e045      	b.n	8008052 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	6979      	ldr	r1, [r7, #20]
 8007fcc:	4b23      	ldr	r3, [pc, #140]	; (800805c <HAL_RTC_SetTime+0x178>)
 8007fce:	400b      	ands	r3, r1
 8007fd0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	689a      	ldr	r2, [r3, #8]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007fe0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	6899      	ldr	r1, [r3, #8]
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	691a      	ldr	r2, [r3, #16]
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	695b      	ldr	r3, [r3, #20]
 8007ff0:	431a      	orrs	r2, r3
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	430a      	orrs	r2, r1
 8007ff8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	68da      	ldr	r2, [r3, #12]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008008:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	f003 0320 	and.w	r3, r3, #32
 8008014:	2b00      	cmp	r3, #0
 8008016:	d111      	bne.n	800803c <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008018:	68f8      	ldr	r0, [r7, #12]
 800801a:	f000 f9e1 	bl	80083e0 <HAL_RTC_WaitForSynchro>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d00b      	beq.n	800803c <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	22ff      	movs	r2, #255	; 0xff
 800802a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2204      	movs	r2, #4
 8008030:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2200      	movs	r2, #0
 8008036:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008038:	2301      	movs	r3, #1
 800803a:	e00a      	b.n	8008052 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	22ff      	movs	r2, #255	; 0xff
 8008042:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2201      	movs	r2, #1
 8008048:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2200      	movs	r2, #0
 800804e:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008050:	2300      	movs	r3, #0
  }
}
 8008052:	4618      	mov	r0, r3
 8008054:	371c      	adds	r7, #28
 8008056:	46bd      	mov	sp, r7
 8008058:	bd90      	pop	{r4, r7, pc}
 800805a:	bf00      	nop
 800805c:	007f7f7f 	.word	0x007f7f7f

08008060 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008060:	b590      	push	{r4, r7, lr}
 8008062:	b087      	sub	sp, #28
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800806c:	2300      	movs	r3, #0
 800806e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	7f1b      	ldrb	r3, [r3, #28]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d101      	bne.n	800807c <HAL_RTC_SetDate+0x1c>
 8008078:	2302      	movs	r3, #2
 800807a:	e092      	b.n	80081a2 <HAL_RTC_SetDate+0x142>
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2201      	movs	r2, #1
 8008080:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2202      	movs	r2, #2
 8008086:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d10e      	bne.n	80080ac <HAL_RTC_SetDate+0x4c>
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	785b      	ldrb	r3, [r3, #1]
 8008092:	f003 0310 	and.w	r3, r3, #16
 8008096:	2b00      	cmp	r3, #0
 8008098:	d008      	beq.n	80080ac <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	785b      	ldrb	r3, [r3, #1]
 800809e:	f023 0310 	bic.w	r3, r3, #16
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	330a      	adds	r3, #10
 80080a6:	b2da      	uxtb	r2, r3
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d11c      	bne.n	80080ec <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	78db      	ldrb	r3, [r3, #3]
 80080b6:	4618      	mov	r0, r3
 80080b8:	f000 f9e6 	bl	8008488 <RTC_ByteToBcd2>
 80080bc:	4603      	mov	r3, r0
 80080be:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	785b      	ldrb	r3, [r3, #1]
 80080c4:	4618      	mov	r0, r3
 80080c6:	f000 f9df 	bl	8008488 <RTC_ByteToBcd2>
 80080ca:	4603      	mov	r3, r0
 80080cc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80080ce:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	789b      	ldrb	r3, [r3, #2]
 80080d4:	4618      	mov	r0, r3
 80080d6:	f000 f9d7 	bl	8008488 <RTC_ByteToBcd2>
 80080da:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80080dc:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80080e6:	4313      	orrs	r3, r2
 80080e8:	617b      	str	r3, [r7, #20]
 80080ea:	e00e      	b.n	800810a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	78db      	ldrb	r3, [r3, #3]
 80080f0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	785b      	ldrb	r3, [r3, #1]
 80080f6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80080f8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80080fa:	68ba      	ldr	r2, [r7, #8]
 80080fc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 80080fe:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008106:	4313      	orrs	r3, r2
 8008108:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	22ca      	movs	r2, #202	; 0xca
 8008110:	625a      	str	r2, [r3, #36]	; 0x24
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2253      	movs	r2, #83	; 0x53
 8008118:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	f000 f988 	bl	8008430 <RTC_EnterInitMode>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00b      	beq.n	800813e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	22ff      	movs	r2, #255	; 0xff
 800812c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2204      	movs	r2, #4
 8008132:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2200      	movs	r2, #0
 8008138:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	e031      	b.n	80081a2 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	6979      	ldr	r1, [r7, #20]
 8008144:	4b19      	ldr	r3, [pc, #100]	; (80081ac <HAL_RTC_SetDate+0x14c>)
 8008146:	400b      	ands	r3, r1
 8008148:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	68da      	ldr	r2, [r3, #12]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008158:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	f003 0320 	and.w	r3, r3, #32
 8008164:	2b00      	cmp	r3, #0
 8008166:	d111      	bne.n	800818c <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f000 f939 	bl	80083e0 <HAL_RTC_WaitForSynchro>
 800816e:	4603      	mov	r3, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00b      	beq.n	800818c <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	22ff      	movs	r2, #255	; 0xff
 800817a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2204      	movs	r2, #4
 8008180:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2200      	movs	r2, #0
 8008186:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	e00a      	b.n	80081a2 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	22ff      	movs	r2, #255	; 0xff
 8008192:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2201      	movs	r2, #1
 8008198:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2200      	movs	r2, #0
 800819e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80081a0:	2300      	movs	r3, #0
  }
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	371c      	adds	r7, #28
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd90      	pop	{r4, r7, pc}
 80081aa:	bf00      	nop
 80081ac:	00ffff3f 	.word	0x00ffff3f

080081b0 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80081b0:	b590      	push	{r4, r7, lr}
 80081b2:	b089      	sub	sp, #36	; 0x24
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 80081bc:	2300      	movs	r3, #0
 80081be:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 80081c0:	2300      	movs	r3, #0
 80081c2:	61fb      	str	r3, [r7, #28]
 80081c4:	2300      	movs	r3, #0
 80081c6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	7f1b      	ldrb	r3, [r3, #28]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d101      	bne.n	80081d4 <HAL_RTC_SetAlarm+0x24>
 80081d0:	2302      	movs	r3, #2
 80081d2:	e101      	b.n	80083d8 <HAL_RTC_SetAlarm+0x228>
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2201      	movs	r2, #1
 80081d8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2202      	movs	r2, #2
 80081de:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d137      	bne.n	8008256 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d102      	bne.n	80081fa <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	2200      	movs	r2, #0
 80081f8:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	4618      	mov	r0, r3
 8008200:	f000 f942 	bl	8008488 <RTC_ByteToBcd2>
 8008204:	4603      	mov	r3, r0
 8008206:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	785b      	ldrb	r3, [r3, #1]
 800820c:	4618      	mov	r0, r3
 800820e:	f000 f93b 	bl	8008488 <RTC_ByteToBcd2>
 8008212:	4603      	mov	r3, r0
 8008214:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008216:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	789b      	ldrb	r3, [r3, #2]
 800821c:	4618      	mov	r0, r3
 800821e:	f000 f933 	bl	8008488 <RTC_ByteToBcd2>
 8008222:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008224:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	7b1b      	ldrb	r3, [r3, #12]
 800822c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800822e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008238:	4618      	mov	r0, r3
 800823a:	f000 f925 	bl	8008488 <RTC_ByteToBcd2>
 800823e:	4603      	mov	r3, r0
 8008240:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008242:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800824a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008250:	4313      	orrs	r3, r2
 8008252:	61fb      	str	r3, [r7, #28]
 8008254:	e023      	b.n	800829e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008260:	2b00      	cmp	r3, #0
 8008262:	d102      	bne.n	800826a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	2200      	movs	r2, #0
 8008268:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	785b      	ldrb	r3, [r3, #1]
 8008274:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008276:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008278:	68ba      	ldr	r2, [r7, #8]
 800827a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800827c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	7b1b      	ldrb	r3, [r3, #12]
 8008282:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008284:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800828c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800828e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008294:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800829a:	4313      	orrs	r3, r2
 800829c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	685a      	ldr	r2, [r3, #4]
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	69db      	ldr	r3, [r3, #28]
 80082a6:	4313      	orrs	r3, r2
 80082a8:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	22ca      	movs	r2, #202	; 0xca
 80082b0:	625a      	str	r2, [r3, #36]	; 0x24
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2253      	movs	r2, #83	; 0x53
 80082b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082c2:	d13f      	bne.n	8008344 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	689a      	ldr	r2, [r3, #8]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80082d2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	689a      	ldr	r2, [r3, #8]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80082e2:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80082e4:	f7fb fdb4 	bl	8003e50 <HAL_GetTick>
 80082e8:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80082ea:	e013      	b.n	8008314 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80082ec:	f7fb fdb0 	bl	8003e50 <HAL_GetTick>
 80082f0:	4602      	mov	r2, r0
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082fa:	d90b      	bls.n	8008314 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	22ff      	movs	r2, #255	; 0xff
 8008302:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2203      	movs	r2, #3
 8008308:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2200      	movs	r2, #0
 800830e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008310:	2303      	movs	r3, #3
 8008312:	e061      	b.n	80083d8 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	f003 0301 	and.w	r3, r3, #1
 800831e:	2b00      	cmp	r3, #0
 8008320:	d0e4      	beq.n	80082ec <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	69fa      	ldr	r2, [r7, #28]
 8008328:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	697a      	ldr	r2, [r7, #20]
 8008330:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	689a      	ldr	r2, [r3, #8]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008340:	609a      	str	r2, [r3, #8]
 8008342:	e03e      	b.n	80083c2 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	689a      	ldr	r2, [r3, #8]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008352:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	689a      	ldr	r2, [r3, #8]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008362:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008364:	f7fb fd74 	bl	8003e50 <HAL_GetTick>
 8008368:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800836a:	e013      	b.n	8008394 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800836c:	f7fb fd70 	bl	8003e50 <HAL_GetTick>
 8008370:	4602      	mov	r2, r0
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	1ad3      	subs	r3, r2, r3
 8008376:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800837a:	d90b      	bls.n	8008394 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	22ff      	movs	r2, #255	; 0xff
 8008382:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2203      	movs	r2, #3
 8008388:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2200      	movs	r2, #0
 800838e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008390:	2303      	movs	r3, #3
 8008392:	e021      	b.n	80083d8 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	f003 0302 	and.w	r3, r3, #2
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d0e4      	beq.n	800836c <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	69fa      	ldr	r2, [r7, #28]
 80083a8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	697a      	ldr	r2, [r7, #20]
 80083b0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	689a      	ldr	r2, [r3, #8]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083c0:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	22ff      	movs	r2, #255	; 0xff
 80083c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2201      	movs	r2, #1
 80083ce:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2200      	movs	r2, #0
 80083d4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80083d6:	2300      	movs	r3, #0
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3724      	adds	r7, #36	; 0x24
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd90      	pop	{r4, r7, pc}

080083e0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80083e8:	2300      	movs	r3, #0
 80083ea:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	68da      	ldr	r2, [r3, #12]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80083fa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80083fc:	f7fb fd28 	bl	8003e50 <HAL_GetTick>
 8008400:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008402:	e009      	b.n	8008418 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008404:	f7fb fd24 	bl	8003e50 <HAL_GetTick>
 8008408:	4602      	mov	r2, r0
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	1ad3      	subs	r3, r2, r3
 800840e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008412:	d901      	bls.n	8008418 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008414:	2303      	movs	r3, #3
 8008416:	e007      	b.n	8008428 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	f003 0320 	and.w	r3, r3, #32
 8008422:	2b00      	cmp	r3, #0
 8008424:	d0ee      	beq.n	8008404 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008426:	2300      	movs	r3, #0
}
 8008428:	4618      	mov	r0, r3
 800842a:	3710      	adds	r7, #16
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008438:	2300      	movs	r3, #0
 800843a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008446:	2b00      	cmp	r3, #0
 8008448:	d119      	bne.n	800847e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f04f 32ff 	mov.w	r2, #4294967295
 8008452:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008454:	f7fb fcfc 	bl	8003e50 <HAL_GetTick>
 8008458:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800845a:	e009      	b.n	8008470 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800845c:	f7fb fcf8 	bl	8003e50 <HAL_GetTick>
 8008460:	4602      	mov	r2, r0
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	1ad3      	subs	r3, r2, r3
 8008466:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800846a:	d901      	bls.n	8008470 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800846c:	2303      	movs	r3, #3
 800846e:	e007      	b.n	8008480 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800847a:	2b00      	cmp	r3, #0
 800847c:	d0ee      	beq.n	800845c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800847e:	2300      	movs	r3, #0
}
 8008480:	4618      	mov	r0, r3
 8008482:	3710      	adds	r7, #16
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008488:	b480      	push	{r7}
 800848a:	b085      	sub	sp, #20
 800848c:	af00      	add	r7, sp, #0
 800848e:	4603      	mov	r3, r0
 8008490:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8008492:	2300      	movs	r3, #0
 8008494:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8008496:	e005      	b.n	80084a4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	3301      	adds	r3, #1
 800849c:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800849e:	79fb      	ldrb	r3, [r7, #7]
 80084a0:	3b0a      	subs	r3, #10
 80084a2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80084a4:	79fb      	ldrb	r3, [r7, #7]
 80084a6:	2b09      	cmp	r3, #9
 80084a8:	d8f6      	bhi.n	8008498 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	011b      	lsls	r3, r3, #4
 80084b0:	b2da      	uxtb	r2, r3
 80084b2:	79fb      	ldrb	r3, [r7, #7]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	b2db      	uxtb	r3, r3
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3714      	adds	r7, #20
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr

080084c4 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b087      	sub	sp, #28
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80084d0:	2300      	movs	r3, #0
 80084d2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	7f1b      	ldrb	r3, [r3, #28]
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d101      	bne.n	80084e0 <HAL_RTCEx_SetTimeStamp+0x1c>
 80084dc:	2302      	movs	r3, #2
 80084de:	e03e      	b.n	800855e <HAL_RTCEx_SetTimeStamp+0x9a>
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2201      	movs	r2, #1
 80084e4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2202      	movs	r2, #2
 80084ea:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	689a      	ldr	r2, [r3, #8]
 80084f2:	4b1e      	ldr	r3, [pc, #120]	; (800856c <HAL_RTCEx_SetTimeStamp+0xa8>)
 80084f4:	4013      	ands	r3, r2
 80084f6:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 80084f8:	697a      	ldr	r2, [r7, #20]
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	4313      	orrs	r3, r2
 80084fe:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	22ca      	movs	r2, #202	; 0xca
 8008506:	625a      	str	r2, [r3, #36]	; 0x24
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2253      	movs	r2, #83	; 0x53
 800850e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f022 0206 	bic.w	r2, r2, #6
 800851e:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	430a      	orrs	r2, r1
 800852e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	697a      	ldr	r2, [r7, #20]
 8008536:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	689a      	ldr	r2, [r3, #8]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008546:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	22ff      	movs	r2, #255	; 0xff
 800854e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2201      	movs	r2, #1
 8008554:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2200      	movs	r2, #0
 800855a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800855c:	2300      	movs	r3, #0
}
 800855e:	4618      	mov	r0, r3
 8008560:	371c      	adds	r7, #28
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr
 800856a:	bf00      	nop
 800856c:	fffff7f7 	.word	0xfffff7f7

08008570 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b088      	sub	sp, #32
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8008578:	2300      	movs	r3, #0
 800857a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800857c:	2300      	movs	r3, #0
 800857e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8008580:	2300      	movs	r3, #0
 8008582:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d101      	bne.n	800858e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	e14d      	b.n	800882a <HAL_SAI_Init+0x2ba>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8008594:	b2db      	uxtb	r3, r3
 8008596:	2b00      	cmp	r3, #0
 8008598:	d106      	bne.n	80085a8 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f7fb fa34 	bl	8003a10 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2202      	movs	r2, #2
 80085ac:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 f953 	bl	800885c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	d00c      	beq.n	80085d8 <HAL_SAI_Init+0x68>
 80085be:	2b02      	cmp	r3, #2
 80085c0:	d80d      	bhi.n	80085de <HAL_SAI_Init+0x6e>
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d002      	beq.n	80085cc <HAL_SAI_Init+0x5c>
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d003      	beq.n	80085d2 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 80085ca:	e008      	b.n	80085de <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 80085cc:	2300      	movs	r3, #0
 80085ce:	61fb      	str	r3, [r7, #28]
      break;
 80085d0:	e006      	b.n	80085e0 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80085d2:	2310      	movs	r3, #16
 80085d4:	61fb      	str	r3, [r7, #28]
      break;
 80085d6:	e003      	b.n	80085e0 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80085d8:	2320      	movs	r3, #32
 80085da:	61fb      	str	r3, [r7, #28]
      break;
 80085dc:	e000      	b.n	80085e0 <HAL_SAI_Init+0x70>
    break;
 80085de:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	2b03      	cmp	r3, #3
 80085e6:	d81e      	bhi.n	8008626 <HAL_SAI_Init+0xb6>
 80085e8:	a201      	add	r2, pc, #4	; (adr r2, 80085f0 <HAL_SAI_Init+0x80>)
 80085ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ee:	bf00      	nop
 80085f0:	08008601 	.word	0x08008601
 80085f4:	08008607 	.word	0x08008607
 80085f8:	0800860f 	.word	0x0800860f
 80085fc:	08008617 	.word	0x08008617
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8008600:	2300      	movs	r3, #0
 8008602:	617b      	str	r3, [r7, #20]
      }
      break;
 8008604:	e010      	b.n	8008628 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8008606:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800860a:	617b      	str	r3, [r7, #20]
      }
      break;
 800860c:	e00c      	b.n	8008628 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800860e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008612:	617b      	str	r3, [r7, #20]
      }
      break;
 8008614:	e008      	b.n	8008628 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8008616:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800861a:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	f043 0301 	orr.w	r3, r3, #1
 8008622:	61fb      	str	r3, [r7, #28]
      }
      break;
 8008624:	e000      	b.n	8008628 <HAL_SAI_Init+0xb8>
  default:
    break;
 8008626:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a81      	ldr	r2, [pc, #516]	; (8008834 <HAL_SAI_Init+0x2c4>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d004      	beq.n	800863c <HAL_SAI_Init+0xcc>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a80      	ldr	r2, [pc, #512]	; (8008838 <HAL_SAI_Init+0x2c8>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d103      	bne.n	8008644 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800863c:	4a7f      	ldr	r2, [pc, #508]	; (800883c <HAL_SAI_Init+0x2cc>)
 800863e:	69fb      	ldr	r3, [r7, #28]
 8008640:	6013      	str	r3, [r2, #0]
 8008642:	e002      	b.n	800864a <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008644:	4a7e      	ldr	r2, [pc, #504]	; (8008840 <HAL_SAI_Init+0x2d0>)
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	69db      	ldr	r3, [r3, #28]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d043      	beq.n	80086da <HAL_SAI_Init+0x16a>
  {
    uint32_t freq = 0;
 8008652:	2300      	movs	r3, #0
 8008654:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a76      	ldr	r2, [pc, #472]	; (8008834 <HAL_SAI_Init+0x2c4>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d004      	beq.n	800866a <HAL_SAI_Init+0xfa>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a74      	ldr	r2, [pc, #464]	; (8008838 <HAL_SAI_Init+0x2c8>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d104      	bne.n	8008674 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800866a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800866e:	f7ff fa7d 	bl	8007b6c <HAL_RCCEx_GetPeriphCLKFreq>
 8008672:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a72      	ldr	r2, [pc, #456]	; (8008844 <HAL_SAI_Init+0x2d4>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d004      	beq.n	8008688 <HAL_SAI_Init+0x118>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a71      	ldr	r2, [pc, #452]	; (8008848 <HAL_SAI_Init+0x2d8>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d104      	bne.n	8008692 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008688:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800868c:	f7ff fa6e 	bl	8007b6c <HAL_RCCEx_GetPeriphCLKFreq>
 8008690:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8008692:	693a      	ldr	r2, [r7, #16]
 8008694:	4613      	mov	r3, r2
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	4413      	add	r3, r2
 800869a:	005b      	lsls	r3, r3, #1
 800869c:	461a      	mov	r2, r3
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	69db      	ldr	r3, [r3, #28]
 80086a2:	025b      	lsls	r3, r3, #9
 80086a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80086a8:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	4a67      	ldr	r2, [pc, #412]	; (800884c <HAL_SAI_Init+0x2dc>)
 80086ae:	fba2 2303 	umull	r2, r3, r2, r3
 80086b2:	08da      	lsrs	r2, r3, #3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 80086b8:	68f9      	ldr	r1, [r7, #12]
 80086ba:	4b64      	ldr	r3, [pc, #400]	; (800884c <HAL_SAI_Init+0x2dc>)
 80086bc:	fba3 2301 	umull	r2, r3, r3, r1
 80086c0:	08da      	lsrs	r2, r3, #3
 80086c2:	4613      	mov	r3, r2
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	4413      	add	r3, r2
 80086c8:	005b      	lsls	r3, r3, #1
 80086ca:	1aca      	subs	r2, r1, r3
 80086cc:	2a08      	cmp	r2, #8
 80086ce:	d904      	bls.n	80086da <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv+= 1;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6a1b      	ldr	r3, [r3, #32]
 80086d4:	1c5a      	adds	r2, r3, #1
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d003      	beq.n	80086ea <HAL_SAI_Init+0x17a>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	2b02      	cmp	r3, #2
 80086e8:	d109      	bne.n	80086fe <HAL_SAI_Init+0x18e>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d101      	bne.n	80086f6 <HAL_SAI_Init+0x186>
 80086f2:	2300      	movs	r3, #0
 80086f4:	e001      	b.n	80086fa <HAL_SAI_Init+0x18a>
 80086f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086fa:	61bb      	str	r3, [r7, #24]
 80086fc:	e008      	b.n	8008710 <HAL_SAI_Init+0x1a0>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008702:	2b01      	cmp	r3, #1
 8008704:	d102      	bne.n	800870c <HAL_SAI_Init+0x19c>
 8008706:	f44f 7300 	mov.w	r3, #512	; 0x200
 800870a:	e000      	b.n	800870e <HAL_SAI_Init+0x19e>
 800870c:	2300      	movs	r3, #0
 800870e:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	6819      	ldr	r1, [r3, #0]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	4b4d      	ldr	r3, [pc, #308]	; (8008850 <HAL_SAI_Init+0x2e0>)
 800871c:	400b      	ands	r3, r1
 800871e:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	6819      	ldr	r1, [r3, #0]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	685a      	ldr	r2, [r3, #4]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800872e:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008734:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800873a:	431a      	orrs	r2, r3
 800873c:	69bb      	ldr	r3, [r7, #24]
 800873e:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8008748:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	691b      	ldr	r3, [r3, #16]
 800874e:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008754:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6a1b      	ldr	r3, [r3, #32]
 800875a:	051b      	lsls	r3, r3, #20
 800875c:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	430a      	orrs	r2, r1
 8008764:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	6859      	ldr	r1, [r3, #4]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	4b38      	ldr	r3, [pc, #224]	; (8008854 <HAL_SAI_Init+0x2e4>)
 8008772:	400b      	ands	r3, r1
 8008774:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	6859      	ldr	r1, [r3, #4]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	699a      	ldr	r2, [r3, #24]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008784:	431a      	orrs	r2, r3
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800878a:	431a      	orrs	r2, r3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	430a      	orrs	r2, r1
 8008792:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	6899      	ldr	r1, [r3, #8]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	4b2e      	ldr	r3, [pc, #184]	; (8008858 <HAL_SAI_Init+0x2e8>)
 80087a0:	400b      	ands	r3, r1
 80087a2:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	6899      	ldr	r1, [r3, #8]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ae:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80087b4:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 80087ba:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 80087c0:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087c6:	3b01      	subs	r3, #1
 80087c8:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 80087ca:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	430a      	orrs	r2, r1
 80087d2:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	68d9      	ldr	r1, [r3, #12]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	f24f 0320 	movw	r3, #61472	; 0xf020
 80087e2:	400b      	ands	r3, r1
 80087e4:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	68d9      	ldr	r1, [r3, #12]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087f4:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087fa:	041b      	lsls	r3, r3, #16
 80087fc:	431a      	orrs	r2, r3
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008802:	3b01      	subs	r3, #1
 8008804:	021b      	lsls	r3, r3, #8
 8008806:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	430a      	orrs	r2, r1
 800880e:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2201      	movs	r2, #1
 800881c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3720      	adds	r7, #32
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	40015804 	.word	0x40015804
 8008838:	40015824 	.word	0x40015824
 800883c:	40015800 	.word	0x40015800
 8008840:	40015c00 	.word	0x40015c00
 8008844:	40015c04 	.word	0x40015c04
 8008848:	40015c24 	.word	0x40015c24
 800884c:	cccccccd 	.word	0xcccccccd
 8008850:	ff05c010 	.word	0xff05c010
 8008854:	ffff1ff0 	.word	0xffff1ff0
 8008858:	fff88000 	.word	0xfff88000

0800885c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800885c:	b490      	push	{r4, r7}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8008864:	4b16      	ldr	r3, [pc, #88]	; (80088c0 <SAI_Disable+0x64>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a16      	ldr	r2, [pc, #88]	; (80088c4 <SAI_Disable+0x68>)
 800886a:	fba2 2303 	umull	r2, r3, r2, r3
 800886e:	0b1b      	lsrs	r3, r3, #12
 8008870:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8008872:	2300      	movs	r3, #0
 8008874:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008884:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8008886:	4623      	mov	r3, r4
 8008888:	1e5c      	subs	r4, r3, #1
 800888a:	2b00      	cmp	r3, #0
 800888c:	d10a      	bne.n	80088a4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008894:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800889e:	2303      	movs	r3, #3
 80088a0:	73fb      	strb	r3, [r7, #15]
      break;
 80088a2:	e006      	b.n	80088b2 <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d1e9      	bne.n	8008886 <SAI_Disable+0x2a>

  return status;
 80088b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3710      	adds	r7, #16
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bc90      	pop	{r4, r7}
 80088bc:	4770      	bx	lr
 80088be:	bf00      	nop
 80088c0:	20000018 	.word	0x20000018
 80088c4:	95cbec1b 	.word	0x95cbec1b

080088c8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d101      	bne.n	80088da <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	e022      	b.n	8008920 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d105      	bne.n	80088f2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f7fa fcff 	bl	80032f0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2203      	movs	r2, #3
 80088f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 f814 	bl	8008928 <HAL_SD_InitCard>
 8008900:	4603      	mov	r3, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	d001      	beq.n	800890a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	e00a      	b.n	8008920 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2201      	movs	r2, #1
 800891a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800891e:	2300      	movs	r3, #0
}
 8008920:	4618      	mov	r0, r3
 8008922:	3708      	adds	r7, #8
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008928:	b5b0      	push	{r4, r5, r7, lr}
 800892a:	b08e      	sub	sp, #56	; 0x38
 800892c:	af04      	add	r7, sp, #16
 800892e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008930:	2300      	movs	r3, #0
 8008932:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008934:	2300      	movs	r3, #0
 8008936:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008938:	2300      	movs	r3, #0
 800893a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800893c:	2300      	movs	r3, #0
 800893e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008940:	2300      	movs	r3, #0
 8008942:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008944:	2376      	movs	r3, #118	; 0x76
 8008946:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681d      	ldr	r5, [r3, #0]
 800894c:	466c      	mov	r4, sp
 800894e:	f107 0314 	add.w	r3, r7, #20
 8008952:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008956:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800895a:	f107 0308 	add.w	r3, r7, #8
 800895e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008960:	4628      	mov	r0, r5
 8008962:	f002 ff61 	bl	800b828 <SDMMC_Init>
 8008966:	4603      	mov	r3, r0
 8008968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800896c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008970:	2b00      	cmp	r3, #0
 8008972:	d001      	beq.n	8008978 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008974:	2301      	movs	r3, #1
 8008976:	e03b      	b.n	80089f0 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	685a      	ldr	r2, [r3, #4]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008986:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4618      	mov	r0, r3
 800898e:	f002 ff84 	bl	800b89a <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	685a      	ldr	r2, [r3, #4]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80089a0:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 fde6 	bl	8009574 <SD_PowerON>
 80089a8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80089aa:	6a3b      	ldr	r3, [r7, #32]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d00b      	beq.n	80089c8 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2201      	movs	r2, #1
 80089b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089bc:	6a3b      	ldr	r3, [r7, #32]
 80089be:	431a      	orrs	r2, r3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80089c4:	2301      	movs	r3, #1
 80089c6:	e013      	b.n	80089f0 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fd05 	bl	80093d8 <SD_InitCard>
 80089ce:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80089d0:	6a3b      	ldr	r3, [r7, #32]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d00b      	beq.n	80089ee <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2201      	movs	r2, #1
 80089da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089e2:	6a3b      	ldr	r3, [r7, #32]
 80089e4:	431a      	orrs	r2, r3
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	e000      	b.n	80089f0 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3728      	adds	r7, #40	; 0x28
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bdb0      	pop	{r4, r5, r7, pc}

080089f8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b08c      	sub	sp, #48	; 0x30
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	607a      	str	r2, [r7, #4]
 8008a04:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d107      	bne.n	8008a20 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a14:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	e0cc      	b.n	8008bba <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	f040 80c5 	bne.w	8008bb8 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2200      	movs	r2, #0
 8008a32:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008a34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	441a      	add	r2, r3
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d907      	bls.n	8008a52 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a46:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e0b3      	b.n	8008bba <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2203      	movs	r2, #3
 8008a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008a70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a76:	4a53      	ldr	r2, [pc, #332]	; (8008bc4 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8008a78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a7e:	4a52      	ldr	r2, [pc, #328]	; (8008bc8 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8008a80:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a86:	2200      	movs	r2, #0
 8008a88:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	3380      	adds	r3, #128	; 0x80
 8008a94:	4619      	mov	r1, r3
 8008a96:	68ba      	ldr	r2, [r7, #8]
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	025b      	lsls	r3, r3, #9
 8008a9c:	089b      	lsrs	r3, r3, #2
 8008a9e:	f7fc fc8f 	bl	80053c0 <HAL_DMA_Start_IT>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d017      	beq.n	8008ad8 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008ab6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a43      	ldr	r2, [pc, #268]	; (8008bcc <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008abe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e070      	b.n	8008bba <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f042 0208 	orr.w	r2, r2, #8
 8008ae6:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d002      	beq.n	8008af6 <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 8008af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af2:	025b      	lsls	r3, r3, #9
 8008af4:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008afe:	4618      	mov	r0, r3
 8008b00:	f002 ff5e 	bl	800b9c0 <SDMMC_CmdBlockLength>
 8008b04:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8008b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d00f      	beq.n	8008b2c <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a2e      	ldr	r2, [pc, #184]	; (8008bcc <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008b12:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b1a:	431a      	orrs	r2, r3
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e046      	b.n	8008bba <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8008b30:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	025b      	lsls	r3, r3, #9
 8008b36:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008b38:	2390      	movs	r3, #144	; 0x90
 8008b3a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008b3c:	2302      	movs	r3, #2
 8008b3e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008b40:	2300      	movs	r3, #0
 8008b42:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008b44:	2301      	movs	r3, #1
 8008b46:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f107 0210 	add.w	r2, r7, #16
 8008b50:	4611      	mov	r1, r2
 8008b52:	4618      	mov	r0, r3
 8008b54:	f002 ff08 	bl	800b968 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d90a      	bls.n	8008b74 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2282      	movs	r2, #130	; 0x82
 8008b62:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f002 ff6c 	bl	800ba48 <SDMMC_CmdReadMultiBlock>
 8008b70:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008b72:	e009      	b.n	8008b88 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2281      	movs	r2, #129	; 0x81
 8008b78:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b80:	4618      	mov	r0, r3
 8008b82:	f002 ff3f 	bl	800ba04 <SDMMC_CmdReadSingleBlock>
 8008b86:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d012      	beq.n	8008bb4 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a0e      	ldr	r2, [pc, #56]	; (8008bcc <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008b94:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b9c:	431a      	orrs	r2, r3
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2200      	movs	r2, #0
 8008bae:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	e002      	b.n	8008bba <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	e000      	b.n	8008bba <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 8008bb8:	2302      	movs	r3, #2
  }
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3730      	adds	r7, #48	; 0x30
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	bf00      	nop
 8008bc4:	080092c3 	.word	0x080092c3
 8008bc8:	08009335 	.word	0x08009335
 8008bcc:	004005ff 	.word	0x004005ff

08008bd0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b08c      	sub	sp, #48	; 0x30
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	60b9      	str	r1, [r7, #8]
 8008bda:	607a      	str	r2, [r7, #4]
 8008bdc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d107      	bne.n	8008bf8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e0cf      	b.n	8008d98 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	f040 80c8 	bne.w	8008d96 <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008c0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	441a      	add	r2, r3
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d907      	bls.n	8008c2a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c1e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	e0b6      	b.n	8008d98 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2203      	movs	r2, #3
 8008c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2200      	movs	r2, #0
 8008c38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f042 021a 	orr.w	r2, r2, #26
 8008c48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c4e:	4a54      	ldr	r2, [pc, #336]	; (8008da0 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8008c50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c56:	4a53      	ldr	r2, [pc, #332]	; (8008da4 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8008c58:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c5e:	2200      	movs	r2, #0
 8008c60:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d002      	beq.n	8008c70 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8008c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6c:	025b      	lsls	r3, r3, #9
 8008c6e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f002 fea1 	bl	800b9c0 <SDMMC_CmdBlockLength>
 8008c7e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00f      	beq.n	8008ca6 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a47      	ldr	r2, [pc, #284]	; (8008da8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008c8c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c94:	431a      	orrs	r2, r3
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e078      	b.n	8008d98 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d90a      	bls.n	8008cc2 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	22a0      	movs	r2, #160	; 0xa0
 8008cb0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f002 ff09 	bl	800bad0 <SDMMC_CmdWriteMultiBlock>
 8008cbe:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008cc0:	e009      	b.n	8008cd6 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2290      	movs	r2, #144	; 0x90
 8008cc6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f002 fedc 	bl	800ba8c <SDMMC_CmdWriteSingleBlock>
 8008cd4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d012      	beq.n	8008d02 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a31      	ldr	r2, [pc, #196]	; (8008da8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008ce2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cea:	431a      	orrs	r2, r3
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e04a      	b.n	8008d98 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f042 0208 	orr.w	r2, r2, #8
 8008d10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008d16:	68b9      	ldr	r1, [r7, #8]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	3380      	adds	r3, #128	; 0x80
 8008d1e:	461a      	mov	r2, r3
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	025b      	lsls	r3, r3, #9
 8008d24:	089b      	lsrs	r3, r3, #2
 8008d26:	f7fc fb4b 	bl	80053c0 <HAL_DMA_Start_IT>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d01a      	beq.n	8008d66 <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f022 021a 	bic.w	r2, r2, #26
 8008d3e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a18      	ldr	r2, [pc, #96]	; (8008da8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008d46:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d4c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2201      	movs	r2, #1
 8008d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008d62:	2301      	movs	r3, #1
 8008d64:	e018      	b.n	8008d98 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008d66:	f04f 33ff 	mov.w	r3, #4294967295
 8008d6a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	025b      	lsls	r3, r3, #9
 8008d70:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008d72:	2390      	movs	r3, #144	; 0x90
 8008d74:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008d76:	2300      	movs	r3, #0
 8008d78:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f107 0210 	add.w	r2, r7, #16
 8008d8a:	4611      	mov	r1, r2
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f002 fdeb 	bl	800b968 <SDMMC_ConfigData>

      return HAL_OK;
 8008d92:	2300      	movs	r3, #0
 8008d94:	e000      	b.n	8008d98 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 8008d96:	2302      	movs	r3, #2
  }
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3730      	adds	r7, #48	; 0x30
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	08009299 	.word	0x08009299
 8008da4:	08009335 	.word	0x08009335
 8008da8:	004005ff 	.word	0x004005ff

08008dac <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008db4:	bf00      	nop
 8008db6:	370c      	adds	r7, #12
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr

08008dc0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008dce:	0f9b      	lsrs	r3, r3, #30
 8008dd0:	b2da      	uxtb	r2, r3
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008dda:	0e9b      	lsrs	r3, r3, #26
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	f003 030f 	and.w	r3, r3, #15
 8008de2:	b2da      	uxtb	r2, r3
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008dec:	0e1b      	lsrs	r3, r3, #24
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	f003 0303 	and.w	r3, r3, #3
 8008df4:	b2da      	uxtb	r2, r3
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008dfe:	0c1b      	lsrs	r3, r3, #16
 8008e00:	b2da      	uxtb	r2, r3
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e0a:	0a1b      	lsrs	r3, r3, #8
 8008e0c:	b2da      	uxtb	r2, r3
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e16:	b2da      	uxtb	r2, r3
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e20:	0d1b      	lsrs	r3, r3, #20
 8008e22:	b29a      	uxth	r2, r3
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e2c:	0c1b      	lsrs	r3, r3, #16
 8008e2e:	b2db      	uxtb	r3, r3
 8008e30:	f003 030f 	and.w	r3, r3, #15
 8008e34:	b2da      	uxtb	r2, r3
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e3e:	0bdb      	lsrs	r3, r3, #15
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	f003 0301 	and.w	r3, r3, #1
 8008e46:	b2da      	uxtb	r2, r3
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e50:	0b9b      	lsrs	r3, r3, #14
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	f003 0301 	and.w	r3, r3, #1
 8008e58:	b2da      	uxtb	r2, r3
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e62:	0b5b      	lsrs	r3, r3, #13
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	f003 0301 	and.w	r3, r3, #1
 8008e6a:	b2da      	uxtb	r2, r3
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e74:	0b1b      	lsrs	r3, r3, #12
 8008e76:	b2db      	uxtb	r3, r3
 8008e78:	f003 0301 	and.w	r3, r3, #1
 8008e7c:	b2da      	uxtb	r2, r3
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	2200      	movs	r2, #0
 8008e86:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d163      	bne.n	8008f58 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e94:	009a      	lsls	r2, r3, #2
 8008e96:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008e9a:	4013      	ands	r3, r2
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008ea0:	0f92      	lsrs	r2, r2, #30
 8008ea2:	431a      	orrs	r2, r3
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008eac:	0edb      	lsrs	r3, r3, #27
 8008eae:	b2db      	uxtb	r3, r3
 8008eb0:	f003 0307 	and.w	r3, r3, #7
 8008eb4:	b2da      	uxtb	r2, r3
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ebe:	0e1b      	lsrs	r3, r3, #24
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	f003 0307 	and.w	r3, r3, #7
 8008ec6:	b2da      	uxtb	r2, r3
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ed0:	0d5b      	lsrs	r3, r3, #21
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	f003 0307 	and.w	r3, r3, #7
 8008ed8:	b2da      	uxtb	r2, r3
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ee2:	0c9b      	lsrs	r3, r3, #18
 8008ee4:	b2db      	uxtb	r3, r3
 8008ee6:	f003 0307 	and.w	r3, r3, #7
 8008eea:	b2da      	uxtb	r2, r3
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ef4:	0bdb      	lsrs	r3, r3, #15
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	f003 0307 	and.w	r3, r3, #7
 8008efc:	b2da      	uxtb	r2, r3
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	691b      	ldr	r3, [r3, #16]
 8008f06:	1c5a      	adds	r2, r3, #1
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	7e1b      	ldrb	r3, [r3, #24]
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	f003 0307 	and.w	r3, r3, #7
 8008f16:	3302      	adds	r3, #2
 8008f18:	2201      	movs	r2, #1
 8008f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008f22:	fb03 f202 	mul.w	r2, r3, r2
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	7a1b      	ldrb	r3, [r3, #8]
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	f003 030f 	and.w	r3, r3, #15
 8008f34:	2201      	movs	r2, #1
 8008f36:	409a      	lsls	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008f44:	0a52      	lsrs	r2, r2, #9
 8008f46:	fb03 f202 	mul.w	r2, r3, r2
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f54:	661a      	str	r2, [r3, #96]	; 0x60
 8008f56:	e031      	b.n	8008fbc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d11d      	bne.n	8008f9c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f64:	041b      	lsls	r3, r3, #16
 8008f66:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f6e:	0c1b      	lsrs	r3, r3, #16
 8008f70:	431a      	orrs	r2, r3
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	691b      	ldr	r3, [r3, #16]
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	029a      	lsls	r2, r3, #10
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f90:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	661a      	str	r2, [r3, #96]	; 0x60
 8008f9a:	e00f      	b.n	8008fbc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a58      	ldr	r2, [pc, #352]	; (8009104 <HAL_SD_GetCardCSD+0x344>)
 8008fa2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	e09d      	b.n	80090f8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fc0:	0b9b      	lsrs	r3, r3, #14
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	f003 0301 	and.w	r3, r3, #1
 8008fc8:	b2da      	uxtb	r2, r3
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fd2:	09db      	lsrs	r3, r3, #7
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fda:	b2da      	uxtb	r2, r3
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fea:	b2da      	uxtb	r2, r3
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ff4:	0fdb      	lsrs	r3, r3, #31
 8008ff6:	b2da      	uxtb	r2, r3
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009000:	0f5b      	lsrs	r3, r3, #29
 8009002:	b2db      	uxtb	r3, r3
 8009004:	f003 0303 	and.w	r3, r3, #3
 8009008:	b2da      	uxtb	r2, r3
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009012:	0e9b      	lsrs	r3, r3, #26
 8009014:	b2db      	uxtb	r3, r3
 8009016:	f003 0307 	and.w	r3, r3, #7
 800901a:	b2da      	uxtb	r2, r3
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009024:	0d9b      	lsrs	r3, r3, #22
 8009026:	b2db      	uxtb	r3, r3
 8009028:	f003 030f 	and.w	r3, r3, #15
 800902c:	b2da      	uxtb	r2, r3
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009036:	0d5b      	lsrs	r3, r3, #21
 8009038:	b2db      	uxtb	r3, r3
 800903a:	f003 0301 	and.w	r3, r3, #1
 800903e:	b2da      	uxtb	r2, r3
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	2200      	movs	r2, #0
 800904a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009052:	0c1b      	lsrs	r3, r3, #16
 8009054:	b2db      	uxtb	r3, r3
 8009056:	f003 0301 	and.w	r3, r3, #1
 800905a:	b2da      	uxtb	r2, r3
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009066:	0bdb      	lsrs	r3, r3, #15
 8009068:	b2db      	uxtb	r3, r3
 800906a:	f003 0301 	and.w	r3, r3, #1
 800906e:	b2da      	uxtb	r2, r3
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800907a:	0b9b      	lsrs	r3, r3, #14
 800907c:	b2db      	uxtb	r3, r3
 800907e:	f003 0301 	and.w	r3, r3, #1
 8009082:	b2da      	uxtb	r2, r3
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800908e:	0b5b      	lsrs	r3, r3, #13
 8009090:	b2db      	uxtb	r3, r3
 8009092:	f003 0301 	and.w	r3, r3, #1
 8009096:	b2da      	uxtb	r2, r3
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090a2:	0b1b      	lsrs	r3, r3, #12
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	f003 0301 	and.w	r3, r3, #1
 80090aa:	b2da      	uxtb	r2, r3
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090b6:	0a9b      	lsrs	r3, r3, #10
 80090b8:	b2db      	uxtb	r3, r3
 80090ba:	f003 0303 	and.w	r3, r3, #3
 80090be:	b2da      	uxtb	r2, r3
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ca:	0a1b      	lsrs	r3, r3, #8
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	f003 0303 	and.w	r3, r3, #3
 80090d2:	b2da      	uxtb	r2, r3
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090de:	085b      	lsrs	r3, r3, #1
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090e6:	b2da      	uxtb	r2, r3
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	2201      	movs	r2, #1
 80090f2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80090f6:	2300      	movs	r3, #0
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	370c      	adds	r7, #12
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr
 8009104:	004005ff 	.word	0x004005ff

08009108 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009152:	2300      	movs	r3, #0
}
 8009154:	4618      	mov	r0, r3
 8009156:	370c      	adds	r7, #12
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009160:	b5b0      	push	{r4, r5, r7, lr}
 8009162:	b08e      	sub	sp, #56	; 0x38
 8009164:	af04      	add	r7, sp, #16
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2203      	movs	r2, #3
 800916e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009176:	2b03      	cmp	r3, #3
 8009178:	d02e      	beq.n	80091d8 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009180:	d106      	bne.n	8009190 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009186:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	639a      	str	r2, [r3, #56]	; 0x38
 800918e:	e029      	b.n	80091e4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009196:	d10a      	bne.n	80091ae <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 faa1 	bl	80096e0 <SD_WideBus_Enable>
 800919e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a6:	431a      	orrs	r2, r3
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	639a      	str	r2, [r3, #56]	; 0x38
 80091ac:	e01a      	b.n	80091e4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d10a      	bne.n	80091ca <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 fade 	bl	8009776 <SD_WideBus_Disable>
 80091ba:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c2:	431a      	orrs	r2, r3
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	639a      	str	r2, [r3, #56]	; 0x38
 80091c8:	e00c      	b.n	80091e4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	639a      	str	r2, [r3, #56]	; 0x38
 80091d6:	e005      	b.n	80091e4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d009      	beq.n	8009200 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a18      	ldr	r2, [pc, #96]	; (8009254 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80091f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2201      	movs	r2, #1
 80091f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80091fc:	2301      	movs	r3, #1
 80091fe:	e024      	b.n	800924a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	695b      	ldr	r3, [r3, #20]
 800921a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	699b      	ldr	r3, [r3, #24]
 8009220:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681d      	ldr	r5, [r3, #0]
 8009226:	466c      	mov	r4, sp
 8009228:	f107 0318 	add.w	r3, r7, #24
 800922c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009230:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009234:	f107 030c 	add.w	r3, r7, #12
 8009238:	cb0e      	ldmia	r3, {r1, r2, r3}
 800923a:	4628      	mov	r0, r5
 800923c:	f002 faf4 	bl	800b828 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2201      	movs	r2, #1
 8009244:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009248:	2300      	movs	r3, #0
}
 800924a:	4618      	mov	r0, r3
 800924c:	3728      	adds	r7, #40	; 0x28
 800924e:	46bd      	mov	sp, r7
 8009250:	bdb0      	pop	{r4, r5, r7, pc}
 8009252:	bf00      	nop
 8009254:	004005ff 	.word	0x004005ff

08009258 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b086      	sub	sp, #24
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009260:	2300      	movs	r3, #0
 8009262:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009264:	f107 030c 	add.w	r3, r7, #12
 8009268:	4619      	mov	r1, r3
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 fa10 	bl	8009690 <SD_SendStatus>
 8009270:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d005      	beq.n	8009284 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	431a      	orrs	r2, r3
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	0a5b      	lsrs	r3, r3, #9
 8009288:	f003 030f 	and.w	r3, r3, #15
 800928c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800928e:	693b      	ldr	r3, [r7, #16]
}
 8009290:	4618      	mov	r0, r3
 8009292:	3718      	adds	r7, #24
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009298:	b480      	push	{r7}
 800929a:	b085      	sub	sp, #20
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80092b4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80092b6:	bf00      	nop
 80092b8:	3714      	adds	r7, #20
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr

080092c2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b084      	sub	sp, #16
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ce:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092d4:	2b82      	cmp	r3, #130	; 0x82
 80092d6:	d111      	bne.n	80092fc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4618      	mov	r0, r3
 80092de:	f002 fc19 	bl	800bb14 <SDMMC_CmdStopTransfer>
 80092e2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d008      	beq.n	80092fc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	431a      	orrs	r2, r3
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80092f6:	68f8      	ldr	r0, [r7, #12]
 80092f8:	f7ff fd58 	bl	8008dac <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f022 0208 	bic.w	r2, r2, #8
 800930a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f240 523a 	movw	r2, #1338	; 0x53a
 8009314:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2201      	movs	r2, #1
 800931a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2200      	movs	r2, #0
 8009322:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	f003 f85f 	bl	800c3e8 <HAL_SD_RxCpltCallback>
#endif
}
 800932a:	bf00      	nop
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
	...

08009334 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b086      	sub	sp, #24
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009340:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f7fc f89c 	bl	8005480 <HAL_DMA_GetError>
 8009348:	4603      	mov	r3, r0
 800934a:	2b02      	cmp	r3, #2
 800934c:	d03e      	beq.n	80093cc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009354:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800935a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800935c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	2b01      	cmp	r3, #1
 8009362:	d002      	beq.n	800936a <SD_DMAError+0x36>
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2b01      	cmp	r3, #1
 8009368:	d12d      	bne.n	80093c6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4a19      	ldr	r2, [pc, #100]	; (80093d4 <SD_DMAError+0xa0>)
 8009370:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009380:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009386:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800938e:	6978      	ldr	r0, [r7, #20]
 8009390:	f7ff ff62 	bl	8009258 <HAL_SD_GetCardState>
 8009394:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	2b06      	cmp	r3, #6
 800939a:	d002      	beq.n	80093a2 <SD_DMAError+0x6e>
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	2b05      	cmp	r3, #5
 80093a0:	d10a      	bne.n	80093b8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4618      	mov	r0, r3
 80093a8:	f002 fbb4 	bl	800bb14 <SDMMC_CmdStopTransfer>
 80093ac:	4602      	mov	r2, r0
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093b2:	431a      	orrs	r2, r3
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	2201      	movs	r2, #1
 80093bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	2200      	movs	r2, #0
 80093c4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80093c6:	6978      	ldr	r0, [r7, #20]
 80093c8:	f7ff fcf0 	bl	8008dac <HAL_SD_ErrorCallback>
#endif
  }
}
 80093cc:	bf00      	nop
 80093ce:	3718      	adds	r7, #24
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}
 80093d4:	004005ff 	.word	0x004005ff

080093d8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80093d8:	b5b0      	push	{r4, r5, r7, lr}
 80093da:	b094      	sub	sp, #80	; 0x50
 80093dc:	af04      	add	r7, sp, #16
 80093de:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80093e0:	2301      	movs	r3, #1
 80093e2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4618      	mov	r0, r3
 80093ea:	f002 fa65 	bl	800b8b8 <SDMMC_GetPowerState>
 80093ee:	4603      	mov	r3, r0
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d102      	bne.n	80093fa <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80093f4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80093f8:	e0b8      	b.n	800956c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093fe:	2b03      	cmp	r3, #3
 8009400:	d02f      	beq.n	8009462 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4618      	mov	r0, r3
 8009408:	f002 fc8f 	bl	800bd2a <SDMMC_CmdSendCID>
 800940c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800940e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009410:	2b00      	cmp	r3, #0
 8009412:	d001      	beq.n	8009418 <SD_InitCard+0x40>
    {
      return errorstate;
 8009414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009416:	e0a9      	b.n	800956c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2100      	movs	r1, #0
 800941e:	4618      	mov	r0, r3
 8009420:	f002 fa8f 	bl	800b942 <SDMMC_GetResponse>
 8009424:	4602      	mov	r2, r0
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	2104      	movs	r1, #4
 8009430:	4618      	mov	r0, r3
 8009432:	f002 fa86 	bl	800b942 <SDMMC_GetResponse>
 8009436:	4602      	mov	r2, r0
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	2108      	movs	r1, #8
 8009442:	4618      	mov	r0, r3
 8009444:	f002 fa7d 	bl	800b942 <SDMMC_GetResponse>
 8009448:	4602      	mov	r2, r0
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	210c      	movs	r1, #12
 8009454:	4618      	mov	r0, r3
 8009456:	f002 fa74 	bl	800b942 <SDMMC_GetResponse>
 800945a:	4602      	mov	r2, r0
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009466:	2b03      	cmp	r3, #3
 8009468:	d00d      	beq.n	8009486 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f107 020e 	add.w	r2, r7, #14
 8009472:	4611      	mov	r1, r2
 8009474:	4618      	mov	r0, r3
 8009476:	f002 fc95 	bl	800bda4 <SDMMC_CmdSetRelAdd>
 800947a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800947c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800947e:	2b00      	cmp	r3, #0
 8009480:	d001      	beq.n	8009486 <SD_InitCard+0xae>
    {
      return errorstate;
 8009482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009484:	e072      	b.n	800956c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800948a:	2b03      	cmp	r3, #3
 800948c:	d036      	beq.n	80094fc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800948e:	89fb      	ldrh	r3, [r7, #14]
 8009490:	461a      	mov	r2, r3
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800949e:	041b      	lsls	r3, r3, #16
 80094a0:	4619      	mov	r1, r3
 80094a2:	4610      	mov	r0, r2
 80094a4:	f002 fc5f 	bl	800bd66 <SDMMC_CmdSendCSD>
 80094a8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80094aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d001      	beq.n	80094b4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80094b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094b2:	e05b      	b.n	800956c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2100      	movs	r1, #0
 80094ba:	4618      	mov	r0, r3
 80094bc:	f002 fa41 	bl	800b942 <SDMMC_GetResponse>
 80094c0:	4602      	mov	r2, r0
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2104      	movs	r1, #4
 80094cc:	4618      	mov	r0, r3
 80094ce:	f002 fa38 	bl	800b942 <SDMMC_GetResponse>
 80094d2:	4602      	mov	r2, r0
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	2108      	movs	r1, #8
 80094de:	4618      	mov	r0, r3
 80094e0:	f002 fa2f 	bl	800b942 <SDMMC_GetResponse>
 80094e4:	4602      	mov	r2, r0
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	210c      	movs	r1, #12
 80094f0:	4618      	mov	r0, r3
 80094f2:	f002 fa26 	bl	800b942 <SDMMC_GetResponse>
 80094f6:	4602      	mov	r2, r0
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	2104      	movs	r1, #4
 8009502:	4618      	mov	r0, r3
 8009504:	f002 fa1d 	bl	800b942 <SDMMC_GetResponse>
 8009508:	4603      	mov	r3, r0
 800950a:	0d1a      	lsrs	r2, r3, #20
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009510:	f107 0310 	add.w	r3, r7, #16
 8009514:	4619      	mov	r1, r3
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f7ff fc52 	bl	8008dc0 <HAL_SD_GetCardCSD>
 800951c:	4603      	mov	r3, r0
 800951e:	2b00      	cmp	r3, #0
 8009520:	d002      	beq.n	8009528 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009522:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009526:	e021      	b.n	800956c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6819      	ldr	r1, [r3, #0]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009530:	041b      	lsls	r3, r3, #16
 8009532:	2200      	movs	r2, #0
 8009534:	461c      	mov	r4, r3
 8009536:	4615      	mov	r5, r2
 8009538:	4622      	mov	r2, r4
 800953a:	462b      	mov	r3, r5
 800953c:	4608      	mov	r0, r1
 800953e:	f002 fb0b 	bl	800bb58 <SDMMC_CmdSelDesel>
 8009542:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009546:	2b00      	cmp	r3, #0
 8009548:	d001      	beq.n	800954e <SD_InitCard+0x176>
  {
    return errorstate;
 800954a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800954c:	e00e      	b.n	800956c <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681d      	ldr	r5, [r3, #0]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	466c      	mov	r4, sp
 8009556:	f103 0210 	add.w	r2, r3, #16
 800955a:	ca07      	ldmia	r2, {r0, r1, r2}
 800955c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009560:	3304      	adds	r3, #4
 8009562:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009564:	4628      	mov	r0, r5
 8009566:	f002 f95f 	bl	800b828 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800956a:	2300      	movs	r3, #0
}
 800956c:	4618      	mov	r0, r3
 800956e:	3740      	adds	r7, #64	; 0x40
 8009570:	46bd      	mov	sp, r7
 8009572:	bdb0      	pop	{r4, r5, r7, pc}

08009574 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b086      	sub	sp, #24
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800957c:	2300      	movs	r3, #0
 800957e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009580:	2300      	movs	r3, #0
 8009582:	617b      	str	r3, [r7, #20]
 8009584:	2300      	movs	r3, #0
 8009586:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4618      	mov	r0, r3
 800958e:	f002 fb06 	bl	800bb9e <SDMMC_CmdGoIdleState>
 8009592:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d001      	beq.n	800959e <SD_PowerON+0x2a>
  {
    return errorstate;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	e072      	b.n	8009684 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4618      	mov	r0, r3
 80095a4:	f002 fb19 	bl	800bbda <SDMMC_CmdOperCond>
 80095a8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d00d      	beq.n	80095cc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4618      	mov	r0, r3
 80095bc:	f002 faef 	bl	800bb9e <SDMMC_CmdGoIdleState>
 80095c0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d004      	beq.n	80095d2 <SD_PowerON+0x5e>
    {
      return errorstate;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	e05b      	b.n	8009684 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2201      	movs	r2, #1
 80095d0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d137      	bne.n	800964a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	2100      	movs	r1, #0
 80095e0:	4618      	mov	r0, r3
 80095e2:	f002 fb19 	bl	800bc18 <SDMMC_CmdAppCommand>
 80095e6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d02d      	beq.n	800964a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80095ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80095f2:	e047      	b.n	8009684 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	2100      	movs	r1, #0
 80095fa:	4618      	mov	r0, r3
 80095fc:	f002 fb0c 	bl	800bc18 <SDMMC_CmdAppCommand>
 8009600:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d001      	beq.n	800960c <SD_PowerON+0x98>
    {
      return errorstate;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	e03b      	b.n	8009684 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	491e      	ldr	r1, [pc, #120]	; (800968c <SD_PowerON+0x118>)
 8009612:	4618      	mov	r0, r3
 8009614:	f002 fb22 	bl	800bc5c <SDMMC_CmdAppOperCommand>
 8009618:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d002      	beq.n	8009626 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009620:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009624:	e02e      	b.n	8009684 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	2100      	movs	r1, #0
 800962c:	4618      	mov	r0, r3
 800962e:	f002 f988 	bl	800b942 <SDMMC_GetResponse>
 8009632:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	0fdb      	lsrs	r3, r3, #31
 8009638:	2b01      	cmp	r3, #1
 800963a:	d101      	bne.n	8009640 <SD_PowerON+0xcc>
 800963c:	2301      	movs	r3, #1
 800963e:	e000      	b.n	8009642 <SD_PowerON+0xce>
 8009640:	2300      	movs	r3, #0
 8009642:	613b      	str	r3, [r7, #16]

    count++;
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	3301      	adds	r3, #1
 8009648:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009650:	4293      	cmp	r3, r2
 8009652:	d802      	bhi.n	800965a <SD_PowerON+0xe6>
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d0cc      	beq.n	80095f4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009660:	4293      	cmp	r3, r2
 8009662:	d902      	bls.n	800966a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009664:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009668:	e00c      	b.n	8009684 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009670:	2b00      	cmp	r3, #0
 8009672:	d003      	beq.n	800967c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2201      	movs	r2, #1
 8009678:	645a      	str	r2, [r3, #68]	; 0x44
 800967a:	e002      	b.n	8009682 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009682:	2300      	movs	r3, #0
}
 8009684:	4618      	mov	r0, r3
 8009686:	3718      	adds	r7, #24
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}
 800968c:	c1100000 	.word	0xc1100000

08009690 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d102      	bne.n	80096a6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80096a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80096a4:	e018      	b.n	80096d8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681a      	ldr	r2, [r3, #0]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096ae:	041b      	lsls	r3, r3, #16
 80096b0:	4619      	mov	r1, r3
 80096b2:	4610      	mov	r0, r2
 80096b4:	f002 fb97 	bl	800bde6 <SDMMC_CmdSendStatus>
 80096b8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d001      	beq.n	80096c4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	e009      	b.n	80096d8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	2100      	movs	r1, #0
 80096ca:	4618      	mov	r0, r3
 80096cc:	f002 f939 	bl	800b942 <SDMMC_GetResponse>
 80096d0:	4602      	mov	r2, r0
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80096d6:	2300      	movs	r3, #0
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3710      	adds	r7, #16
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b086      	sub	sp, #24
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80096e8:	2300      	movs	r3, #0
 80096ea:	60fb      	str	r3, [r7, #12]
 80096ec:	2300      	movs	r3, #0
 80096ee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	2100      	movs	r1, #0
 80096f6:	4618      	mov	r0, r3
 80096f8:	f002 f923 	bl	800b942 <SDMMC_GetResponse>
 80096fc:	4603      	mov	r3, r0
 80096fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009702:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009706:	d102      	bne.n	800970e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009708:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800970c:	e02f      	b.n	800976e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800970e:	f107 030c 	add.w	r3, r7, #12
 8009712:	4619      	mov	r1, r3
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 f879 	bl	800980c <SD_FindSCR>
 800971a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d001      	beq.n	8009726 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	e023      	b.n	800976e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800972c:	2b00      	cmp	r3, #0
 800972e:	d01c      	beq.n	800976a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009738:	041b      	lsls	r3, r3, #16
 800973a:	4619      	mov	r1, r3
 800973c:	4610      	mov	r0, r2
 800973e:	f002 fa6b 	bl	800bc18 <SDMMC_CmdAppCommand>
 8009742:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d001      	beq.n	800974e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	e00f      	b.n	800976e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	2102      	movs	r1, #2
 8009754:	4618      	mov	r0, r3
 8009756:	f002 faa5 	bl	800bca4 <SDMMC_CmdBusWidth>
 800975a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d001      	beq.n	8009766 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	e003      	b.n	800976e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009766:	2300      	movs	r3, #0
 8009768:	e001      	b.n	800976e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800976a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800976e:	4618      	mov	r0, r3
 8009770:	3718      	adds	r7, #24
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b086      	sub	sp, #24
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800977e:	2300      	movs	r3, #0
 8009780:	60fb      	str	r3, [r7, #12]
 8009782:	2300      	movs	r3, #0
 8009784:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	2100      	movs	r1, #0
 800978c:	4618      	mov	r0, r3
 800978e:	f002 f8d8 	bl	800b942 <SDMMC_GetResponse>
 8009792:	4603      	mov	r3, r0
 8009794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009798:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800979c:	d102      	bne.n	80097a4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800979e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80097a2:	e02f      	b.n	8009804 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80097a4:	f107 030c 	add.w	r3, r7, #12
 80097a8:	4619      	mov	r1, r3
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 f82e 	bl	800980c <SD_FindSCR>
 80097b0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d001      	beq.n	80097bc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	e023      	b.n	8009804 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d01c      	beq.n	8009800 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097ce:	041b      	lsls	r3, r3, #16
 80097d0:	4619      	mov	r1, r3
 80097d2:	4610      	mov	r0, r2
 80097d4:	f002 fa20 	bl	800bc18 <SDMMC_CmdAppCommand>
 80097d8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d001      	beq.n	80097e4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	e00f      	b.n	8009804 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2100      	movs	r1, #0
 80097ea:	4618      	mov	r0, r3
 80097ec:	f002 fa5a 	bl	800bca4 <SDMMC_CmdBusWidth>
 80097f0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d001      	beq.n	80097fc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	e003      	b.n	8009804 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80097fc:	2300      	movs	r3, #0
 80097fe:	e001      	b.n	8009804 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009800:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009804:	4618      	mov	r0, r3
 8009806:	3718      	adds	r7, #24
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800980c:	b590      	push	{r4, r7, lr}
 800980e:	b08f      	sub	sp, #60	; 0x3c
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009816:	f7fa fb1b 	bl	8003e50 <HAL_GetTick>
 800981a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800981c:	2300      	movs	r3, #0
 800981e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009820:	2300      	movs	r3, #0
 8009822:	60bb      	str	r3, [r7, #8]
 8009824:	2300      	movs	r3, #0
 8009826:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	2108      	movs	r1, #8
 8009832:	4618      	mov	r0, r3
 8009834:	f002 f8c4 	bl	800b9c0 <SDMMC_CmdBlockLength>
 8009838:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800983a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983c:	2b00      	cmp	r3, #0
 800983e:	d001      	beq.n	8009844 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009842:	e0a9      	b.n	8009998 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800984c:	041b      	lsls	r3, r3, #16
 800984e:	4619      	mov	r1, r3
 8009850:	4610      	mov	r0, r2
 8009852:	f002 f9e1 	bl	800bc18 <SDMMC_CmdAppCommand>
 8009856:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985a:	2b00      	cmp	r3, #0
 800985c:	d001      	beq.n	8009862 <SD_FindSCR+0x56>
  {
    return errorstate;
 800985e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009860:	e09a      	b.n	8009998 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009862:	f04f 33ff 	mov.w	r3, #4294967295
 8009866:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009868:	2308      	movs	r3, #8
 800986a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800986c:	2330      	movs	r3, #48	; 0x30
 800986e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009870:	2302      	movs	r3, #2
 8009872:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009874:	2300      	movs	r3, #0
 8009876:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009878:	2301      	movs	r3, #1
 800987a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f107 0210 	add.w	r2, r7, #16
 8009884:	4611      	mov	r1, r2
 8009886:	4618      	mov	r0, r3
 8009888:	f002 f86e 	bl	800b968 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4618      	mov	r0, r3
 8009892:	f002 fa29 	bl	800bce8 <SDMMC_CmdSendSCR>
 8009896:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989a:	2b00      	cmp	r3, #0
 800989c:	d022      	beq.n	80098e4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800989e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a0:	e07a      	b.n	8009998 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d00e      	beq.n	80098ce <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6819      	ldr	r1, [r3, #0]
 80098b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	f107 0208 	add.w	r2, r7, #8
 80098bc:	18d4      	adds	r4, r2, r3
 80098be:	4608      	mov	r0, r1
 80098c0:	f001 ffde 	bl	800b880 <SDMMC_ReadFIFO>
 80098c4:	4603      	mov	r3, r0
 80098c6:	6023      	str	r3, [r4, #0]
      index++;
 80098c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098ca:	3301      	adds	r3, #1
 80098cc:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80098ce:	f7fa fabf 	bl	8003e50 <HAL_GetTick>
 80098d2:	4602      	mov	r2, r0
 80098d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d6:	1ad3      	subs	r3, r2, r3
 80098d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098dc:	d102      	bne.n	80098e4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80098de:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80098e2:	e059      	b.n	8009998 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098ea:	f240 432a 	movw	r3, #1066	; 0x42a
 80098ee:	4013      	ands	r3, r2
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d0d6      	beq.n	80098a2 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098fa:	f003 0308 	and.w	r3, r3, #8
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d005      	beq.n	800990e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	2208      	movs	r2, #8
 8009908:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800990a:	2308      	movs	r3, #8
 800990c:	e044      	b.n	8009998 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009914:	f003 0302 	and.w	r3, r3, #2
 8009918:	2b00      	cmp	r3, #0
 800991a:	d005      	beq.n	8009928 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2202      	movs	r2, #2
 8009922:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009924:	2302      	movs	r3, #2
 8009926:	e037      	b.n	8009998 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800992e:	f003 0320 	and.w	r3, r3, #32
 8009932:	2b00      	cmp	r3, #0
 8009934:	d005      	beq.n	8009942 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	2220      	movs	r2, #32
 800993c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800993e:	2320      	movs	r3, #32
 8009940:	e02a      	b.n	8009998 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f240 523a 	movw	r2, #1338	; 0x53a
 800994a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	061a      	lsls	r2, r3, #24
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	021b      	lsls	r3, r3, #8
 8009954:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009958:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	0a1b      	lsrs	r3, r3, #8
 800995e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009962:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	0e1b      	lsrs	r3, r3, #24
 8009968:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800996a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800996c:	601a      	str	r2, [r3, #0]
    scr++;
 800996e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009970:	3304      	adds	r3, #4
 8009972:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	061a      	lsls	r2, r3, #24
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	021b      	lsls	r3, r3, #8
 800997c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009980:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	0a1b      	lsrs	r3, r3, #8
 8009986:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800998a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	0e1b      	lsrs	r3, r3, #24
 8009990:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009994:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009996:	2300      	movs	r3, #0
}
 8009998:	4618      	mov	r0, r3
 800999a:	373c      	adds	r7, #60	; 0x3c
 800999c:	46bd      	mov	sp, r7
 800999e:	bd90      	pop	{r4, r7, pc}

080099a0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b082      	sub	sp, #8
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d101      	bne.n	80099b4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80099b0:	2301      	movs	r3, #1
 80099b2:	e025      	b.n	8009a00 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d106      	bne.n	80099ce <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2200      	movs	r2, #0
 80099c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f7fa f817 	bl	80039fc <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2202      	movs	r2, #2
 80099d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	3304      	adds	r3, #4
 80099de:	4619      	mov	r1, r3
 80099e0:	4610      	mov	r0, r2
 80099e2:	f001 fdfb 	bl	800b5dc <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6818      	ldr	r0, [r3, #0]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	461a      	mov	r2, r3
 80099f0:	6839      	ldr	r1, [r7, #0]
 80099f2:	f001 fe65 	bl	800b6c0 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2201      	movs	r2, #1
 80099fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80099fe:	2300      	movs	r3, #0
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3708      	adds	r7, #8
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	60b9      	str	r1, [r7, #8]
 8009a12:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	2b02      	cmp	r3, #2
 8009a1e:	d101      	bne.n	8009a24 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8009a20:	2302      	movs	r3, #2
 8009a22:	e018      	b.n	8009a56 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2202      	movs	r2, #2
 8009a28:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	68b9      	ldr	r1, [r7, #8]
 8009a34:	4618      	mov	r0, r3
 8009a36:	f001 fec3 	bl	800b7c0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	2b02      	cmp	r3, #2
 8009a40:	d104      	bne.n	8009a4c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2205      	movs	r2, #5
 8009a46:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8009a4a:	e003      	b.n	8009a54 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2201      	movs	r2, #1
 8009a50:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8009a54:	2300      	movs	r3, #0
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3710      	adds	r7, #16
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}

08009a5e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009a5e:	b580      	push	{r7, lr}
 8009a60:	b082      	sub	sp, #8
 8009a62:	af00      	add	r7, sp, #0
 8009a64:	6078      	str	r0, [r7, #4]
 8009a66:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009a6e:	b2db      	uxtb	r3, r3
 8009a70:	2b02      	cmp	r3, #2
 8009a72:	d101      	bne.n	8009a78 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009a74:	2302      	movs	r3, #2
 8009a76:	e00e      	b.n	8009a96 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2202      	movs	r2, #2
 8009a7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	6839      	ldr	r1, [r7, #0]
 8009a86:	4618      	mov	r0, r3
 8009a88:	f001 febb 	bl	800b802 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8009a94:	2300      	movs	r3, #0
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3708      	adds	r7, #8
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
	...

08009aa0 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b084      	sub	sp, #16
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d101      	bne.n	8009ab2 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e04c      	b.n	8009b4c <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ab8:	b2db      	uxtb	r3, r3
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d106      	bne.n	8009acc <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f7f9 fc74 	bl	80033b4 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2202      	movs	r2, #2
 8009ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f022 0203 	bic.w	r2, r2, #3
 8009ae2:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8009aec:	68fa      	ldr	r2, [r7, #12]
 8009aee:	4b19      	ldr	r3, [pc, #100]	; (8009b54 <HAL_SPDIFRX_Init+0xb4>)
 8009af0:	4013      	ands	r3, r2
 8009af2:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8009afc:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8009b02:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8009b08:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8009b0e:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8009b14:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8009b1a:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8009b20:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8009b26:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8009b2c:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8009b2e:	68fa      	ldr	r2, [r7, #12]
 8009b30:	4313      	orrs	r3, r2
 8009b32:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	68fa      	ldr	r2, [r7, #12]
 8009b3a:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2201      	movs	r2, #1
 8009b46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8009b4a:	2300      	movs	r3, #0
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3710      	adds	r7, #16
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	fff88407 	.word	0xfff88407

08009b58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d101      	bne.n	8009b6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009b66:	2301      	movs	r3, #1
 8009b68:	e084      	b.n	8009c74 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d106      	bne.n	8009b8a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f7f9 fc57 	bl	8003438 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2202      	movs	r2, #2
 8009b8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ba0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	68db      	ldr	r3, [r3, #12]
 8009ba6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009baa:	d902      	bls.n	8009bb2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009bac:	2300      	movs	r3, #0
 8009bae:	60fb      	str	r3, [r7, #12]
 8009bb0:	e002      	b.n	8009bb8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009bb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009bb6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	68db      	ldr	r3, [r3, #12]
 8009bbc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009bc0:	d007      	beq.n	8009bd2 <HAL_SPI_Init+0x7a>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	68db      	ldr	r3, [r3, #12]
 8009bc6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009bca:	d002      	beq.n	8009bd2 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d10b      	bne.n	8009bf2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	68db      	ldr	r3, [r3, #12]
 8009bde:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009be2:	d903      	bls.n	8009bec <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2202      	movs	r2, #2
 8009be8:	631a      	str	r2, [r3, #48]	; 0x30
 8009bea:	e002      	b.n	8009bf2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	685a      	ldr	r2, [r3, #4]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	431a      	orrs	r2, r3
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	691b      	ldr	r3, [r3, #16]
 8009c00:	431a      	orrs	r2, r3
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	695b      	ldr	r3, [r3, #20]
 8009c06:	431a      	orrs	r2, r3
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	699b      	ldr	r3, [r3, #24]
 8009c0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c10:	431a      	orrs	r2, r3
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	69db      	ldr	r3, [r3, #28]
 8009c16:	431a      	orrs	r2, r3
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6a1b      	ldr	r3, [r3, #32]
 8009c1c:	ea42 0103 	orr.w	r1, r2, r3
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	430a      	orrs	r2, r1
 8009c2a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	699b      	ldr	r3, [r3, #24]
 8009c30:	0c1b      	lsrs	r3, r3, #16
 8009c32:	f003 0204 	and.w	r2, r3, #4
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c3a:	431a      	orrs	r2, r3
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c40:	431a      	orrs	r2, r3
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	68db      	ldr	r3, [r3, #12]
 8009c46:	ea42 0103 	orr.w	r1, r2, r3
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	430a      	orrs	r2, r1
 8009c52:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	69da      	ldr	r2, [r3, #28]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009c62:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2200      	movs	r2, #0
 8009c68:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009c72:	2300      	movs	r3, #0
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3710      	adds	r7, #16
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d101      	bne.n	8009c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	e01d      	b.n	8009cca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d106      	bne.n	8009ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f7f9 fc2a 	bl	80034fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2202      	movs	r2, #2
 8009cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	3304      	adds	r3, #4
 8009cb8:	4619      	mov	r1, r3
 8009cba:	4610      	mov	r0, r2
 8009cbc:	f000 fb84 	bl	800a3c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009cc8:	2300      	movs	r3, #0
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3708      	adds	r7, #8
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
	...

08009cd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b085      	sub	sp, #20
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	68da      	ldr	r2, [r3, #12]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f042 0201 	orr.w	r2, r2, #1
 8009cea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	689a      	ldr	r2, [r3, #8]
 8009cf2:	4b0c      	ldr	r3, [pc, #48]	; (8009d24 <HAL_TIM_Base_Start_IT+0x50>)
 8009cf4:	4013      	ands	r3, r2
 8009cf6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2b06      	cmp	r3, #6
 8009cfc:	d00b      	beq.n	8009d16 <HAL_TIM_Base_Start_IT+0x42>
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d04:	d007      	beq.n	8009d16 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f042 0201 	orr.w	r2, r2, #1
 8009d14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009d16:	2300      	movs	r3, #0
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3714      	adds	r7, #20
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d22:	4770      	bx	lr
 8009d24:	00010007 	.word	0x00010007

08009d28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d101      	bne.n	8009d3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009d36:	2301      	movs	r3, #1
 8009d38:	e01d      	b.n	8009d76 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d106      	bne.n	8009d54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f7f9 fc42 	bl	80035d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2202      	movs	r2, #2
 8009d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681a      	ldr	r2, [r3, #0]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	3304      	adds	r3, #4
 8009d64:	4619      	mov	r1, r3
 8009d66:	4610      	mov	r0, r2
 8009d68:	f000 fb2e 	bl	800a3c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2201      	movs	r2, #1
 8009d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d74:	2300      	movs	r3, #0
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3708      	adds	r7, #8
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}

08009d7e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009d7e:	b580      	push	{r7, lr}
 8009d80:	b082      	sub	sp, #8
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	691b      	ldr	r3, [r3, #16]
 8009d8c:	f003 0302 	and.w	r3, r3, #2
 8009d90:	2b02      	cmp	r3, #2
 8009d92:	d122      	bne.n	8009dda <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	68db      	ldr	r3, [r3, #12]
 8009d9a:	f003 0302 	and.w	r3, r3, #2
 8009d9e:	2b02      	cmp	r3, #2
 8009da0:	d11b      	bne.n	8009dda <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f06f 0202 	mvn.w	r2, #2
 8009daa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2201      	movs	r2, #1
 8009db0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	699b      	ldr	r3, [r3, #24]
 8009db8:	f003 0303 	and.w	r3, r3, #3
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d003      	beq.n	8009dc8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f000 fae3 	bl	800a38c <HAL_TIM_IC_CaptureCallback>
 8009dc6:	e005      	b.n	8009dd4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 fad5 	bl	800a378 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 fae6 	bl	800a3a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	691b      	ldr	r3, [r3, #16]
 8009de0:	f003 0304 	and.w	r3, r3, #4
 8009de4:	2b04      	cmp	r3, #4
 8009de6:	d122      	bne.n	8009e2e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	f003 0304 	and.w	r3, r3, #4
 8009df2:	2b04      	cmp	r3, #4
 8009df4:	d11b      	bne.n	8009e2e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f06f 0204 	mvn.w	r2, #4
 8009dfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2202      	movs	r2, #2
 8009e04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	699b      	ldr	r3, [r3, #24]
 8009e0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d003      	beq.n	8009e1c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 fab9 	bl	800a38c <HAL_TIM_IC_CaptureCallback>
 8009e1a:	e005      	b.n	8009e28 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f000 faab 	bl	800a378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f000 fabc 	bl	800a3a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	691b      	ldr	r3, [r3, #16]
 8009e34:	f003 0308 	and.w	r3, r3, #8
 8009e38:	2b08      	cmp	r3, #8
 8009e3a:	d122      	bne.n	8009e82 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	68db      	ldr	r3, [r3, #12]
 8009e42:	f003 0308 	and.w	r3, r3, #8
 8009e46:	2b08      	cmp	r3, #8
 8009e48:	d11b      	bne.n	8009e82 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f06f 0208 	mvn.w	r2, #8
 8009e52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2204      	movs	r2, #4
 8009e58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	69db      	ldr	r3, [r3, #28]
 8009e60:	f003 0303 	and.w	r3, r3, #3
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d003      	beq.n	8009e70 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f000 fa8f 	bl	800a38c <HAL_TIM_IC_CaptureCallback>
 8009e6e:	e005      	b.n	8009e7c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 fa81 	bl	800a378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 fa92 	bl	800a3a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	691b      	ldr	r3, [r3, #16]
 8009e88:	f003 0310 	and.w	r3, r3, #16
 8009e8c:	2b10      	cmp	r3, #16
 8009e8e:	d122      	bne.n	8009ed6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	68db      	ldr	r3, [r3, #12]
 8009e96:	f003 0310 	and.w	r3, r3, #16
 8009e9a:	2b10      	cmp	r3, #16
 8009e9c:	d11b      	bne.n	8009ed6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f06f 0210 	mvn.w	r2, #16
 8009ea6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2208      	movs	r2, #8
 8009eac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	69db      	ldr	r3, [r3, #28]
 8009eb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d003      	beq.n	8009ec4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 fa65 	bl	800a38c <HAL_TIM_IC_CaptureCallback>
 8009ec2:	e005      	b.n	8009ed0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 fa57 	bl	800a378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 fa68 	bl	800a3a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	691b      	ldr	r3, [r3, #16]
 8009edc:	f003 0301 	and.w	r3, r3, #1
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d10e      	bne.n	8009f02 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	68db      	ldr	r3, [r3, #12]
 8009eea:	f003 0301 	and.w	r3, r3, #1
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d107      	bne.n	8009f02 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f06f 0201 	mvn.w	r2, #1
 8009efa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f7f8 fe7f 	bl	8002c00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	691b      	ldr	r3, [r3, #16]
 8009f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f0c:	2b80      	cmp	r3, #128	; 0x80
 8009f0e:	d10e      	bne.n	8009f2e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	68db      	ldr	r3, [r3, #12]
 8009f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f1a:	2b80      	cmp	r3, #128	; 0x80
 8009f1c:	d107      	bne.n	8009f2e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009f26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 fefb 	bl	800ad24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	691b      	ldr	r3, [r3, #16]
 8009f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f3c:	d10e      	bne.n	8009f5c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	68db      	ldr	r3, [r3, #12]
 8009f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f48:	2b80      	cmp	r3, #128	; 0x80
 8009f4a:	d107      	bne.n	8009f5c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 feee 	bl	800ad38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	691b      	ldr	r3, [r3, #16]
 8009f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f66:	2b40      	cmp	r3, #64	; 0x40
 8009f68:	d10e      	bne.n	8009f88 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	68db      	ldr	r3, [r3, #12]
 8009f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f74:	2b40      	cmp	r3, #64	; 0x40
 8009f76:	d107      	bne.n	8009f88 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f000 fa16 	bl	800a3b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	691b      	ldr	r3, [r3, #16]
 8009f8e:	f003 0320 	and.w	r3, r3, #32
 8009f92:	2b20      	cmp	r3, #32
 8009f94:	d10e      	bne.n	8009fb4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	68db      	ldr	r3, [r3, #12]
 8009f9c:	f003 0320 	and.w	r3, r3, #32
 8009fa0:	2b20      	cmp	r3, #32
 8009fa2:	d107      	bne.n	8009fb4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f06f 0220 	mvn.w	r2, #32
 8009fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f000 feae 	bl	800ad10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009fb4:	bf00      	nop
 8009fb6:	3708      	adds	r7, #8
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	60b9      	str	r1, [r7, #8]
 8009fc6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fce:	2b01      	cmp	r3, #1
 8009fd0:	d101      	bne.n	8009fd6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009fd2:	2302      	movs	r3, #2
 8009fd4:	e105      	b.n	800a1e2 <HAL_TIM_PWM_ConfigChannel+0x226>
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2201      	movs	r2, #1
 8009fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2202      	movs	r2, #2
 8009fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2b14      	cmp	r3, #20
 8009fea:	f200 80f0 	bhi.w	800a1ce <HAL_TIM_PWM_ConfigChannel+0x212>
 8009fee:	a201      	add	r2, pc, #4	; (adr r2, 8009ff4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff4:	0800a049 	.word	0x0800a049
 8009ff8:	0800a1cf 	.word	0x0800a1cf
 8009ffc:	0800a1cf 	.word	0x0800a1cf
 800a000:	0800a1cf 	.word	0x0800a1cf
 800a004:	0800a089 	.word	0x0800a089
 800a008:	0800a1cf 	.word	0x0800a1cf
 800a00c:	0800a1cf 	.word	0x0800a1cf
 800a010:	0800a1cf 	.word	0x0800a1cf
 800a014:	0800a0cb 	.word	0x0800a0cb
 800a018:	0800a1cf 	.word	0x0800a1cf
 800a01c:	0800a1cf 	.word	0x0800a1cf
 800a020:	0800a1cf 	.word	0x0800a1cf
 800a024:	0800a10b 	.word	0x0800a10b
 800a028:	0800a1cf 	.word	0x0800a1cf
 800a02c:	0800a1cf 	.word	0x0800a1cf
 800a030:	0800a1cf 	.word	0x0800a1cf
 800a034:	0800a14d 	.word	0x0800a14d
 800a038:	0800a1cf 	.word	0x0800a1cf
 800a03c:	0800a1cf 	.word	0x0800a1cf
 800a040:	0800a1cf 	.word	0x0800a1cf
 800a044:	0800a18d 	.word	0x0800a18d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	68b9      	ldr	r1, [r7, #8]
 800a04e:	4618      	mov	r0, r3
 800a050:	f000 fa5a 	bl	800a508 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	699a      	ldr	r2, [r3, #24]
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f042 0208 	orr.w	r2, r2, #8
 800a062:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	699a      	ldr	r2, [r3, #24]
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f022 0204 	bic.w	r2, r2, #4
 800a072:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	6999      	ldr	r1, [r3, #24]
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	691a      	ldr	r2, [r3, #16]
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	430a      	orrs	r2, r1
 800a084:	619a      	str	r2, [r3, #24]
      break;
 800a086:	e0a3      	b.n	800a1d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	68b9      	ldr	r1, [r7, #8]
 800a08e:	4618      	mov	r0, r3
 800a090:	f000 faac 	bl	800a5ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	699a      	ldr	r2, [r3, #24]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a0a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	699a      	ldr	r2, [r3, #24]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a0b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	6999      	ldr	r1, [r3, #24]
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	691b      	ldr	r3, [r3, #16]
 800a0be:	021a      	lsls	r2, r3, #8
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	430a      	orrs	r2, r1
 800a0c6:	619a      	str	r2, [r3, #24]
      break;
 800a0c8:	e082      	b.n	800a1d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	68b9      	ldr	r1, [r7, #8]
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f000 fb03 	bl	800a6dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	69da      	ldr	r2, [r3, #28]
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f042 0208 	orr.w	r2, r2, #8
 800a0e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	69da      	ldr	r2, [r3, #28]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f022 0204 	bic.w	r2, r2, #4
 800a0f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	69d9      	ldr	r1, [r3, #28]
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	691a      	ldr	r2, [r3, #16]
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	430a      	orrs	r2, r1
 800a106:	61da      	str	r2, [r3, #28]
      break;
 800a108:	e062      	b.n	800a1d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	68b9      	ldr	r1, [r7, #8]
 800a110:	4618      	mov	r0, r3
 800a112:	f000 fb59 	bl	800a7c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	69da      	ldr	r2, [r3, #28]
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a124:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	69da      	ldr	r2, [r3, #28]
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a134:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	69d9      	ldr	r1, [r3, #28]
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	691b      	ldr	r3, [r3, #16]
 800a140:	021a      	lsls	r2, r3, #8
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	430a      	orrs	r2, r1
 800a148:	61da      	str	r2, [r3, #28]
      break;
 800a14a:	e041      	b.n	800a1d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	68b9      	ldr	r1, [r7, #8]
 800a152:	4618      	mov	r0, r3
 800a154:	f000 fb90 	bl	800a878 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f042 0208 	orr.w	r2, r2, #8
 800a166:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f022 0204 	bic.w	r2, r2, #4
 800a176:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	691a      	ldr	r2, [r3, #16]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	430a      	orrs	r2, r1
 800a188:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a18a:	e021      	b.n	800a1d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	68b9      	ldr	r1, [r7, #8]
 800a192:	4618      	mov	r0, r3
 800a194:	f000 fbc2 	bl	800a91c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a1a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a1b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	691b      	ldr	r3, [r3, #16]
 800a1c2:	021a      	lsls	r2, r3, #8
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	430a      	orrs	r2, r1
 800a1ca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a1cc:	e000      	b.n	800a1d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800a1ce:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a1e0:	2300      	movs	r3, #0
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3710      	adds	r7, #16
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop

0800a1ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d101      	bne.n	800a204 <HAL_TIM_ConfigClockSource+0x18>
 800a200:	2302      	movs	r3, #2
 800a202:	e0b3      	b.n	800a36c <HAL_TIM_ConfigClockSource+0x180>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2201      	movs	r2, #1
 800a208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2202      	movs	r2, #2
 800a210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a21c:	68fa      	ldr	r2, [r7, #12]
 800a21e:	4b55      	ldr	r3, [pc, #340]	; (800a374 <HAL_TIM_ConfigClockSource+0x188>)
 800a220:	4013      	ands	r3, r2
 800a222:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a22a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a23c:	d03e      	beq.n	800a2bc <HAL_TIM_ConfigClockSource+0xd0>
 800a23e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a242:	f200 8087 	bhi.w	800a354 <HAL_TIM_ConfigClockSource+0x168>
 800a246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a24a:	f000 8085 	beq.w	800a358 <HAL_TIM_ConfigClockSource+0x16c>
 800a24e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a252:	d87f      	bhi.n	800a354 <HAL_TIM_ConfigClockSource+0x168>
 800a254:	2b70      	cmp	r3, #112	; 0x70
 800a256:	d01a      	beq.n	800a28e <HAL_TIM_ConfigClockSource+0xa2>
 800a258:	2b70      	cmp	r3, #112	; 0x70
 800a25a:	d87b      	bhi.n	800a354 <HAL_TIM_ConfigClockSource+0x168>
 800a25c:	2b60      	cmp	r3, #96	; 0x60
 800a25e:	d050      	beq.n	800a302 <HAL_TIM_ConfigClockSource+0x116>
 800a260:	2b60      	cmp	r3, #96	; 0x60
 800a262:	d877      	bhi.n	800a354 <HAL_TIM_ConfigClockSource+0x168>
 800a264:	2b50      	cmp	r3, #80	; 0x50
 800a266:	d03c      	beq.n	800a2e2 <HAL_TIM_ConfigClockSource+0xf6>
 800a268:	2b50      	cmp	r3, #80	; 0x50
 800a26a:	d873      	bhi.n	800a354 <HAL_TIM_ConfigClockSource+0x168>
 800a26c:	2b40      	cmp	r3, #64	; 0x40
 800a26e:	d058      	beq.n	800a322 <HAL_TIM_ConfigClockSource+0x136>
 800a270:	2b40      	cmp	r3, #64	; 0x40
 800a272:	d86f      	bhi.n	800a354 <HAL_TIM_ConfigClockSource+0x168>
 800a274:	2b30      	cmp	r3, #48	; 0x30
 800a276:	d064      	beq.n	800a342 <HAL_TIM_ConfigClockSource+0x156>
 800a278:	2b30      	cmp	r3, #48	; 0x30
 800a27a:	d86b      	bhi.n	800a354 <HAL_TIM_ConfigClockSource+0x168>
 800a27c:	2b20      	cmp	r3, #32
 800a27e:	d060      	beq.n	800a342 <HAL_TIM_ConfigClockSource+0x156>
 800a280:	2b20      	cmp	r3, #32
 800a282:	d867      	bhi.n	800a354 <HAL_TIM_ConfigClockSource+0x168>
 800a284:	2b00      	cmp	r3, #0
 800a286:	d05c      	beq.n	800a342 <HAL_TIM_ConfigClockSource+0x156>
 800a288:	2b10      	cmp	r3, #16
 800a28a:	d05a      	beq.n	800a342 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a28c:	e062      	b.n	800a354 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6818      	ldr	r0, [r3, #0]
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	6899      	ldr	r1, [r3, #8]
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	685a      	ldr	r2, [r3, #4]
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	68db      	ldr	r3, [r3, #12]
 800a29e:	f000 fc0b 	bl	800aab8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	689b      	ldr	r3, [r3, #8]
 800a2a8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a2b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	68fa      	ldr	r2, [r7, #12]
 800a2b8:	609a      	str	r2, [r3, #8]
      break;
 800a2ba:	e04e      	b.n	800a35a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6818      	ldr	r0, [r3, #0]
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	6899      	ldr	r1, [r3, #8]
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	685a      	ldr	r2, [r3, #4]
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	68db      	ldr	r3, [r3, #12]
 800a2cc:	f000 fbf4 	bl	800aab8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	689a      	ldr	r2, [r3, #8]
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a2de:	609a      	str	r2, [r3, #8]
      break;
 800a2e0:	e03b      	b.n	800a35a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6818      	ldr	r0, [r3, #0]
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	6859      	ldr	r1, [r3, #4]
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	68db      	ldr	r3, [r3, #12]
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	f000 fb68 	bl	800a9c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	2150      	movs	r1, #80	; 0x50
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f000 fbc1 	bl	800aa82 <TIM_ITRx_SetConfig>
      break;
 800a300:	e02b      	b.n	800a35a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6818      	ldr	r0, [r3, #0]
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	6859      	ldr	r1, [r3, #4]
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	68db      	ldr	r3, [r3, #12]
 800a30e:	461a      	mov	r2, r3
 800a310:	f000 fb87 	bl	800aa22 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	2160      	movs	r1, #96	; 0x60
 800a31a:	4618      	mov	r0, r3
 800a31c:	f000 fbb1 	bl	800aa82 <TIM_ITRx_SetConfig>
      break;
 800a320:	e01b      	b.n	800a35a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6818      	ldr	r0, [r3, #0]
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	6859      	ldr	r1, [r3, #4]
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	68db      	ldr	r3, [r3, #12]
 800a32e:	461a      	mov	r2, r3
 800a330:	f000 fb48 	bl	800a9c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	2140      	movs	r1, #64	; 0x40
 800a33a:	4618      	mov	r0, r3
 800a33c:	f000 fba1 	bl	800aa82 <TIM_ITRx_SetConfig>
      break;
 800a340:	e00b      	b.n	800a35a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4619      	mov	r1, r3
 800a34c:	4610      	mov	r0, r2
 800a34e:	f000 fb98 	bl	800aa82 <TIM_ITRx_SetConfig>
      break;
 800a352:	e002      	b.n	800a35a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a354:	bf00      	nop
 800a356:	e000      	b.n	800a35a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a358:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2201      	movs	r2, #1
 800a35e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2200      	movs	r2, #0
 800a366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a36a:	2300      	movs	r3, #0
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3710      	adds	r7, #16
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}
 800a374:	fffeff88 	.word	0xfffeff88

0800a378 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a380:	bf00      	nop
 800a382:	370c      	adds	r7, #12
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr

0800a38c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a394:	bf00      	nop
 800a396:	370c      	adds	r7, #12
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b083      	sub	sp, #12
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a3a8:	bf00      	nop
 800a3aa:	370c      	adds	r7, #12
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr

0800a3b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b083      	sub	sp, #12
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a3bc:	bf00      	nop
 800a3be:	370c      	adds	r7, #12
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b085      	sub	sp, #20
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	4a40      	ldr	r2, [pc, #256]	; (800a4dc <TIM_Base_SetConfig+0x114>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d013      	beq.n	800a408 <TIM_Base_SetConfig+0x40>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3e6:	d00f      	beq.n	800a408 <TIM_Base_SetConfig+0x40>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	4a3d      	ldr	r2, [pc, #244]	; (800a4e0 <TIM_Base_SetConfig+0x118>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d00b      	beq.n	800a408 <TIM_Base_SetConfig+0x40>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	4a3c      	ldr	r2, [pc, #240]	; (800a4e4 <TIM_Base_SetConfig+0x11c>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d007      	beq.n	800a408 <TIM_Base_SetConfig+0x40>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	4a3b      	ldr	r2, [pc, #236]	; (800a4e8 <TIM_Base_SetConfig+0x120>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d003      	beq.n	800a408 <TIM_Base_SetConfig+0x40>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	4a3a      	ldr	r2, [pc, #232]	; (800a4ec <TIM_Base_SetConfig+0x124>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d108      	bne.n	800a41a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a40e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	68fa      	ldr	r2, [r7, #12]
 800a416:	4313      	orrs	r3, r2
 800a418:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	4a2f      	ldr	r2, [pc, #188]	; (800a4dc <TIM_Base_SetConfig+0x114>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d02b      	beq.n	800a47a <TIM_Base_SetConfig+0xb2>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a428:	d027      	beq.n	800a47a <TIM_Base_SetConfig+0xb2>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	4a2c      	ldr	r2, [pc, #176]	; (800a4e0 <TIM_Base_SetConfig+0x118>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d023      	beq.n	800a47a <TIM_Base_SetConfig+0xb2>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	4a2b      	ldr	r2, [pc, #172]	; (800a4e4 <TIM_Base_SetConfig+0x11c>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d01f      	beq.n	800a47a <TIM_Base_SetConfig+0xb2>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	4a2a      	ldr	r2, [pc, #168]	; (800a4e8 <TIM_Base_SetConfig+0x120>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d01b      	beq.n	800a47a <TIM_Base_SetConfig+0xb2>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	4a29      	ldr	r2, [pc, #164]	; (800a4ec <TIM_Base_SetConfig+0x124>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d017      	beq.n	800a47a <TIM_Base_SetConfig+0xb2>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	4a28      	ldr	r2, [pc, #160]	; (800a4f0 <TIM_Base_SetConfig+0x128>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d013      	beq.n	800a47a <TIM_Base_SetConfig+0xb2>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	4a27      	ldr	r2, [pc, #156]	; (800a4f4 <TIM_Base_SetConfig+0x12c>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d00f      	beq.n	800a47a <TIM_Base_SetConfig+0xb2>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	4a26      	ldr	r2, [pc, #152]	; (800a4f8 <TIM_Base_SetConfig+0x130>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d00b      	beq.n	800a47a <TIM_Base_SetConfig+0xb2>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	4a25      	ldr	r2, [pc, #148]	; (800a4fc <TIM_Base_SetConfig+0x134>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d007      	beq.n	800a47a <TIM_Base_SetConfig+0xb2>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	4a24      	ldr	r2, [pc, #144]	; (800a500 <TIM_Base_SetConfig+0x138>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d003      	beq.n	800a47a <TIM_Base_SetConfig+0xb2>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	4a23      	ldr	r2, [pc, #140]	; (800a504 <TIM_Base_SetConfig+0x13c>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d108      	bne.n	800a48c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a480:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	68db      	ldr	r3, [r3, #12]
 800a486:	68fa      	ldr	r2, [r7, #12]
 800a488:	4313      	orrs	r3, r2
 800a48a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	695b      	ldr	r3, [r3, #20]
 800a496:	4313      	orrs	r3, r2
 800a498:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	68fa      	ldr	r2, [r7, #12]
 800a49e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	689a      	ldr	r2, [r3, #8]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	4a0a      	ldr	r2, [pc, #40]	; (800a4dc <TIM_Base_SetConfig+0x114>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d003      	beq.n	800a4c0 <TIM_Base_SetConfig+0xf8>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	4a0c      	ldr	r2, [pc, #48]	; (800a4ec <TIM_Base_SetConfig+0x124>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d103      	bne.n	800a4c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	691a      	ldr	r2, [r3, #16]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	615a      	str	r2, [r3, #20]
}
 800a4ce:	bf00      	nop
 800a4d0:	3714      	adds	r7, #20
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d8:	4770      	bx	lr
 800a4da:	bf00      	nop
 800a4dc:	40010000 	.word	0x40010000
 800a4e0:	40000400 	.word	0x40000400
 800a4e4:	40000800 	.word	0x40000800
 800a4e8:	40000c00 	.word	0x40000c00
 800a4ec:	40010400 	.word	0x40010400
 800a4f0:	40014000 	.word	0x40014000
 800a4f4:	40014400 	.word	0x40014400
 800a4f8:	40014800 	.word	0x40014800
 800a4fc:	40001800 	.word	0x40001800
 800a500:	40001c00 	.word	0x40001c00
 800a504:	40002000 	.word	0x40002000

0800a508 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a508:	b480      	push	{r7}
 800a50a:	b087      	sub	sp, #28
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6a1b      	ldr	r3, [r3, #32]
 800a516:	f023 0201 	bic.w	r2, r3, #1
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6a1b      	ldr	r3, [r3, #32]
 800a522:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	699b      	ldr	r3, [r3, #24]
 800a52e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a530:	68fa      	ldr	r2, [r7, #12]
 800a532:	4b2b      	ldr	r3, [pc, #172]	; (800a5e0 <TIM_OC1_SetConfig+0xd8>)
 800a534:	4013      	ands	r3, r2
 800a536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f023 0303 	bic.w	r3, r3, #3
 800a53e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	68fa      	ldr	r2, [r7, #12]
 800a546:	4313      	orrs	r3, r2
 800a548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	f023 0302 	bic.w	r3, r3, #2
 800a550:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	689b      	ldr	r3, [r3, #8]
 800a556:	697a      	ldr	r2, [r7, #20]
 800a558:	4313      	orrs	r3, r2
 800a55a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	4a21      	ldr	r2, [pc, #132]	; (800a5e4 <TIM_OC1_SetConfig+0xdc>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d003      	beq.n	800a56c <TIM_OC1_SetConfig+0x64>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	4a20      	ldr	r2, [pc, #128]	; (800a5e8 <TIM_OC1_SetConfig+0xe0>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d10c      	bne.n	800a586 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	f023 0308 	bic.w	r3, r3, #8
 800a572:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	68db      	ldr	r3, [r3, #12]
 800a578:	697a      	ldr	r2, [r7, #20]
 800a57a:	4313      	orrs	r3, r2
 800a57c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	f023 0304 	bic.w	r3, r3, #4
 800a584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	4a16      	ldr	r2, [pc, #88]	; (800a5e4 <TIM_OC1_SetConfig+0xdc>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d003      	beq.n	800a596 <TIM_OC1_SetConfig+0x8e>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	4a15      	ldr	r2, [pc, #84]	; (800a5e8 <TIM_OC1_SetConfig+0xe0>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d111      	bne.n	800a5ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a59c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a5a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	695b      	ldr	r3, [r3, #20]
 800a5aa:	693a      	ldr	r2, [r7, #16]
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	699b      	ldr	r3, [r3, #24]
 800a5b4:	693a      	ldr	r2, [r7, #16]
 800a5b6:	4313      	orrs	r3, r2
 800a5b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	693a      	ldr	r2, [r7, #16]
 800a5be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	68fa      	ldr	r2, [r7, #12]
 800a5c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	685a      	ldr	r2, [r3, #4]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	697a      	ldr	r2, [r7, #20]
 800a5d2:	621a      	str	r2, [r3, #32]
}
 800a5d4:	bf00      	nop
 800a5d6:	371c      	adds	r7, #28
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr
 800a5e0:	fffeff8f 	.word	0xfffeff8f
 800a5e4:	40010000 	.word	0x40010000
 800a5e8:	40010400 	.word	0x40010400

0800a5ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b087      	sub	sp, #28
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6a1b      	ldr	r3, [r3, #32]
 800a5fa:	f023 0210 	bic.w	r2, r3, #16
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6a1b      	ldr	r3, [r3, #32]
 800a606:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	685b      	ldr	r3, [r3, #4]
 800a60c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	699b      	ldr	r3, [r3, #24]
 800a612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a614:	68fa      	ldr	r2, [r7, #12]
 800a616:	4b2e      	ldr	r3, [pc, #184]	; (800a6d0 <TIM_OC2_SetConfig+0xe4>)
 800a618:	4013      	ands	r3, r2
 800a61a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	021b      	lsls	r3, r3, #8
 800a62a:	68fa      	ldr	r2, [r7, #12]
 800a62c:	4313      	orrs	r3, r2
 800a62e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	f023 0320 	bic.w	r3, r3, #32
 800a636:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	689b      	ldr	r3, [r3, #8]
 800a63c:	011b      	lsls	r3, r3, #4
 800a63e:	697a      	ldr	r2, [r7, #20]
 800a640:	4313      	orrs	r3, r2
 800a642:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	4a23      	ldr	r2, [pc, #140]	; (800a6d4 <TIM_OC2_SetConfig+0xe8>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d003      	beq.n	800a654 <TIM_OC2_SetConfig+0x68>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	4a22      	ldr	r2, [pc, #136]	; (800a6d8 <TIM_OC2_SetConfig+0xec>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d10d      	bne.n	800a670 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a65a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	68db      	ldr	r3, [r3, #12]
 800a660:	011b      	lsls	r3, r3, #4
 800a662:	697a      	ldr	r2, [r7, #20]
 800a664:	4313      	orrs	r3, r2
 800a666:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a66e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	4a18      	ldr	r2, [pc, #96]	; (800a6d4 <TIM_OC2_SetConfig+0xe8>)
 800a674:	4293      	cmp	r3, r2
 800a676:	d003      	beq.n	800a680 <TIM_OC2_SetConfig+0x94>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	4a17      	ldr	r2, [pc, #92]	; (800a6d8 <TIM_OC2_SetConfig+0xec>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d113      	bne.n	800a6a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a686:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a68e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	695b      	ldr	r3, [r3, #20]
 800a694:	009b      	lsls	r3, r3, #2
 800a696:	693a      	ldr	r2, [r7, #16]
 800a698:	4313      	orrs	r3, r2
 800a69a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	699b      	ldr	r3, [r3, #24]
 800a6a0:	009b      	lsls	r3, r3, #2
 800a6a2:	693a      	ldr	r2, [r7, #16]
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	693a      	ldr	r2, [r7, #16]
 800a6ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	68fa      	ldr	r2, [r7, #12]
 800a6b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	685a      	ldr	r2, [r3, #4]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	697a      	ldr	r2, [r7, #20]
 800a6c0:	621a      	str	r2, [r3, #32]
}
 800a6c2:	bf00      	nop
 800a6c4:	371c      	adds	r7, #28
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6cc:	4770      	bx	lr
 800a6ce:	bf00      	nop
 800a6d0:	feff8fff 	.word	0xfeff8fff
 800a6d4:	40010000 	.word	0x40010000
 800a6d8:	40010400 	.word	0x40010400

0800a6dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b087      	sub	sp, #28
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6a1b      	ldr	r3, [r3, #32]
 800a6ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6a1b      	ldr	r3, [r3, #32]
 800a6f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	69db      	ldr	r3, [r3, #28]
 800a702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a704:	68fa      	ldr	r2, [r7, #12]
 800a706:	4b2d      	ldr	r3, [pc, #180]	; (800a7bc <TIM_OC3_SetConfig+0xe0>)
 800a708:	4013      	ands	r3, r2
 800a70a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	f023 0303 	bic.w	r3, r3, #3
 800a712:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	68fa      	ldr	r2, [r7, #12]
 800a71a:	4313      	orrs	r3, r2
 800a71c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a724:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	689b      	ldr	r3, [r3, #8]
 800a72a:	021b      	lsls	r3, r3, #8
 800a72c:	697a      	ldr	r2, [r7, #20]
 800a72e:	4313      	orrs	r3, r2
 800a730:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	4a22      	ldr	r2, [pc, #136]	; (800a7c0 <TIM_OC3_SetConfig+0xe4>)
 800a736:	4293      	cmp	r3, r2
 800a738:	d003      	beq.n	800a742 <TIM_OC3_SetConfig+0x66>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	4a21      	ldr	r2, [pc, #132]	; (800a7c4 <TIM_OC3_SetConfig+0xe8>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	d10d      	bne.n	800a75e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a748:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	68db      	ldr	r3, [r3, #12]
 800a74e:	021b      	lsls	r3, r3, #8
 800a750:	697a      	ldr	r2, [r7, #20]
 800a752:	4313      	orrs	r3, r2
 800a754:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a75c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	4a17      	ldr	r2, [pc, #92]	; (800a7c0 <TIM_OC3_SetConfig+0xe4>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d003      	beq.n	800a76e <TIM_OC3_SetConfig+0x92>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	4a16      	ldr	r2, [pc, #88]	; (800a7c4 <TIM_OC3_SetConfig+0xe8>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d113      	bne.n	800a796 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a774:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a77c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	695b      	ldr	r3, [r3, #20]
 800a782:	011b      	lsls	r3, r3, #4
 800a784:	693a      	ldr	r2, [r7, #16]
 800a786:	4313      	orrs	r3, r2
 800a788:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	699b      	ldr	r3, [r3, #24]
 800a78e:	011b      	lsls	r3, r3, #4
 800a790:	693a      	ldr	r2, [r7, #16]
 800a792:	4313      	orrs	r3, r2
 800a794:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	693a      	ldr	r2, [r7, #16]
 800a79a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	68fa      	ldr	r2, [r7, #12]
 800a7a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	685a      	ldr	r2, [r3, #4]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	697a      	ldr	r2, [r7, #20]
 800a7ae:	621a      	str	r2, [r3, #32]
}
 800a7b0:	bf00      	nop
 800a7b2:	371c      	adds	r7, #28
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr
 800a7bc:	fffeff8f 	.word	0xfffeff8f
 800a7c0:	40010000 	.word	0x40010000
 800a7c4:	40010400 	.word	0x40010400

0800a7c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b087      	sub	sp, #28
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6a1b      	ldr	r3, [r3, #32]
 800a7d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6a1b      	ldr	r3, [r3, #32]
 800a7e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	69db      	ldr	r3, [r3, #28]
 800a7ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a7f0:	68fa      	ldr	r2, [r7, #12]
 800a7f2:	4b1e      	ldr	r3, [pc, #120]	; (800a86c <TIM_OC4_SetConfig+0xa4>)
 800a7f4:	4013      	ands	r3, r2
 800a7f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	021b      	lsls	r3, r3, #8
 800a806:	68fa      	ldr	r2, [r7, #12]
 800a808:	4313      	orrs	r3, r2
 800a80a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a812:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	689b      	ldr	r3, [r3, #8]
 800a818:	031b      	lsls	r3, r3, #12
 800a81a:	693a      	ldr	r2, [r7, #16]
 800a81c:	4313      	orrs	r3, r2
 800a81e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	4a13      	ldr	r2, [pc, #76]	; (800a870 <TIM_OC4_SetConfig+0xa8>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d003      	beq.n	800a830 <TIM_OC4_SetConfig+0x68>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	4a12      	ldr	r2, [pc, #72]	; (800a874 <TIM_OC4_SetConfig+0xac>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d109      	bne.n	800a844 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a836:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	695b      	ldr	r3, [r3, #20]
 800a83c:	019b      	lsls	r3, r3, #6
 800a83e:	697a      	ldr	r2, [r7, #20]
 800a840:	4313      	orrs	r3, r2
 800a842:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	697a      	ldr	r2, [r7, #20]
 800a848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	68fa      	ldr	r2, [r7, #12]
 800a84e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	685a      	ldr	r2, [r3, #4]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	693a      	ldr	r2, [r7, #16]
 800a85c:	621a      	str	r2, [r3, #32]
}
 800a85e:	bf00      	nop
 800a860:	371c      	adds	r7, #28
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr
 800a86a:	bf00      	nop
 800a86c:	feff8fff 	.word	0xfeff8fff
 800a870:	40010000 	.word	0x40010000
 800a874:	40010400 	.word	0x40010400

0800a878 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a878:	b480      	push	{r7}
 800a87a:	b087      	sub	sp, #28
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6a1b      	ldr	r3, [r3, #32]
 800a886:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6a1b      	ldr	r3, [r3, #32]
 800a892:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a89e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a8a0:	68fa      	ldr	r2, [r7, #12]
 800a8a2:	4b1b      	ldr	r3, [pc, #108]	; (800a910 <TIM_OC5_SetConfig+0x98>)
 800a8a4:	4013      	ands	r3, r2
 800a8a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	68fa      	ldr	r2, [r7, #12]
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a8b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	689b      	ldr	r3, [r3, #8]
 800a8be:	041b      	lsls	r3, r3, #16
 800a8c0:	693a      	ldr	r2, [r7, #16]
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	4a12      	ldr	r2, [pc, #72]	; (800a914 <TIM_OC5_SetConfig+0x9c>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d003      	beq.n	800a8d6 <TIM_OC5_SetConfig+0x5e>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	4a11      	ldr	r2, [pc, #68]	; (800a918 <TIM_OC5_SetConfig+0xa0>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d109      	bne.n	800a8ea <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	695b      	ldr	r3, [r3, #20]
 800a8e2:	021b      	lsls	r3, r3, #8
 800a8e4:	697a      	ldr	r2, [r7, #20]
 800a8e6:	4313      	orrs	r3, r2
 800a8e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	697a      	ldr	r2, [r7, #20]
 800a8ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	68fa      	ldr	r2, [r7, #12]
 800a8f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	685a      	ldr	r2, [r3, #4]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	693a      	ldr	r2, [r7, #16]
 800a902:	621a      	str	r2, [r3, #32]
}
 800a904:	bf00      	nop
 800a906:	371c      	adds	r7, #28
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr
 800a910:	fffeff8f 	.word	0xfffeff8f
 800a914:	40010000 	.word	0x40010000
 800a918:	40010400 	.word	0x40010400

0800a91c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b087      	sub	sp, #28
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6a1b      	ldr	r3, [r3, #32]
 800a92a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6a1b      	ldr	r3, [r3, #32]
 800a936:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a944:	68fa      	ldr	r2, [r7, #12]
 800a946:	4b1c      	ldr	r3, [pc, #112]	; (800a9b8 <TIM_OC6_SetConfig+0x9c>)
 800a948:	4013      	ands	r3, r2
 800a94a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	021b      	lsls	r3, r3, #8
 800a952:	68fa      	ldr	r2, [r7, #12]
 800a954:	4313      	orrs	r3, r2
 800a956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a95e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	689b      	ldr	r3, [r3, #8]
 800a964:	051b      	lsls	r3, r3, #20
 800a966:	693a      	ldr	r2, [r7, #16]
 800a968:	4313      	orrs	r3, r2
 800a96a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	4a13      	ldr	r2, [pc, #76]	; (800a9bc <TIM_OC6_SetConfig+0xa0>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d003      	beq.n	800a97c <TIM_OC6_SetConfig+0x60>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	4a12      	ldr	r2, [pc, #72]	; (800a9c0 <TIM_OC6_SetConfig+0xa4>)
 800a978:	4293      	cmp	r3, r2
 800a97a:	d109      	bne.n	800a990 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a982:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	695b      	ldr	r3, [r3, #20]
 800a988:	029b      	lsls	r3, r3, #10
 800a98a:	697a      	ldr	r2, [r7, #20]
 800a98c:	4313      	orrs	r3, r2
 800a98e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	697a      	ldr	r2, [r7, #20]
 800a994:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	68fa      	ldr	r2, [r7, #12]
 800a99a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	685a      	ldr	r2, [r3, #4]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	693a      	ldr	r2, [r7, #16]
 800a9a8:	621a      	str	r2, [r3, #32]
}
 800a9aa:	bf00      	nop
 800a9ac:	371c      	adds	r7, #28
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b4:	4770      	bx	lr
 800a9b6:	bf00      	nop
 800a9b8:	feff8fff 	.word	0xfeff8fff
 800a9bc:	40010000 	.word	0x40010000
 800a9c0:	40010400 	.word	0x40010400

0800a9c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b087      	sub	sp, #28
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	60f8      	str	r0, [r7, #12]
 800a9cc:	60b9      	str	r1, [r7, #8]
 800a9ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	6a1b      	ldr	r3, [r3, #32]
 800a9d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	6a1b      	ldr	r3, [r3, #32]
 800a9da:	f023 0201 	bic.w	r2, r3, #1
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	699b      	ldr	r3, [r3, #24]
 800a9e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a9ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	011b      	lsls	r3, r3, #4
 800a9f4:	693a      	ldr	r2, [r7, #16]
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	f023 030a 	bic.w	r3, r3, #10
 800aa00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aa02:	697a      	ldr	r2, [r7, #20]
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	4313      	orrs	r3, r2
 800aa08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	693a      	ldr	r2, [r7, #16]
 800aa0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	697a      	ldr	r2, [r7, #20]
 800aa14:	621a      	str	r2, [r3, #32]
}
 800aa16:	bf00      	nop
 800aa18:	371c      	adds	r7, #28
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa20:	4770      	bx	lr

0800aa22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa22:	b480      	push	{r7}
 800aa24:	b087      	sub	sp, #28
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	60f8      	str	r0, [r7, #12]
 800aa2a:	60b9      	str	r1, [r7, #8]
 800aa2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	6a1b      	ldr	r3, [r3, #32]
 800aa32:	f023 0210 	bic.w	r2, r3, #16
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	699b      	ldr	r3, [r3, #24]
 800aa3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	6a1b      	ldr	r3, [r3, #32]
 800aa44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aa4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	031b      	lsls	r3, r3, #12
 800aa52:	697a      	ldr	r2, [r7, #20]
 800aa54:	4313      	orrs	r3, r2
 800aa56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aa5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	011b      	lsls	r3, r3, #4
 800aa64:	693a      	ldr	r2, [r7, #16]
 800aa66:	4313      	orrs	r3, r2
 800aa68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	697a      	ldr	r2, [r7, #20]
 800aa6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	693a      	ldr	r2, [r7, #16]
 800aa74:	621a      	str	r2, [r3, #32]
}
 800aa76:	bf00      	nop
 800aa78:	371c      	adds	r7, #28
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa80:	4770      	bx	lr

0800aa82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aa82:	b480      	push	{r7}
 800aa84:	b085      	sub	sp, #20
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	6078      	str	r0, [r7, #4]
 800aa8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	689b      	ldr	r3, [r3, #8]
 800aa90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aa9a:	683a      	ldr	r2, [r7, #0]
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	4313      	orrs	r3, r2
 800aaa0:	f043 0307 	orr.w	r3, r3, #7
 800aaa4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	68fa      	ldr	r2, [r7, #12]
 800aaaa:	609a      	str	r2, [r3, #8]
}
 800aaac:	bf00      	nop
 800aaae:	3714      	adds	r7, #20
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr

0800aab8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b087      	sub	sp, #28
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	60f8      	str	r0, [r7, #12]
 800aac0:	60b9      	str	r1, [r7, #8]
 800aac2:	607a      	str	r2, [r7, #4]
 800aac4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	689b      	ldr	r3, [r3, #8]
 800aaca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aad2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	021a      	lsls	r2, r3, #8
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	431a      	orrs	r2, r3
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	4313      	orrs	r3, r2
 800aae0:	697a      	ldr	r2, [r7, #20]
 800aae2:	4313      	orrs	r3, r2
 800aae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	697a      	ldr	r2, [r7, #20]
 800aaea:	609a      	str	r2, [r3, #8]
}
 800aaec:	bf00      	nop
 800aaee:	371c      	adds	r7, #28
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr

0800aaf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b085      	sub	sp, #20
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	d101      	bne.n	800ab10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ab0c:	2302      	movs	r3, #2
 800ab0e:	e06d      	b.n	800abec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2201      	movs	r2, #1
 800ab14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2202      	movs	r2, #2
 800ab1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	685b      	ldr	r3, [r3, #4]
 800ab26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	689b      	ldr	r3, [r3, #8]
 800ab2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4a30      	ldr	r2, [pc, #192]	; (800abf8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d004      	beq.n	800ab44 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4a2f      	ldr	r2, [pc, #188]	; (800abfc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d108      	bne.n	800ab56 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ab4a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	68fa      	ldr	r2, [r7, #12]
 800ab52:	4313      	orrs	r3, r2
 800ab54:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab5c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	68fa      	ldr	r2, [r7, #12]
 800ab64:	4313      	orrs	r3, r2
 800ab66:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	68fa      	ldr	r2, [r7, #12]
 800ab6e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	4a20      	ldr	r2, [pc, #128]	; (800abf8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d022      	beq.n	800abc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab82:	d01d      	beq.n	800abc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	4a1d      	ldr	r2, [pc, #116]	; (800ac00 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d018      	beq.n	800abc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	4a1c      	ldr	r2, [pc, #112]	; (800ac04 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d013      	beq.n	800abc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	4a1a      	ldr	r2, [pc, #104]	; (800ac08 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d00e      	beq.n	800abc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	4a15      	ldr	r2, [pc, #84]	; (800abfc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d009      	beq.n	800abc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	4a16      	ldr	r2, [pc, #88]	; (800ac0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d004      	beq.n	800abc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4a15      	ldr	r2, [pc, #84]	; (800ac10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d10c      	bne.n	800abda <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800abc6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	689b      	ldr	r3, [r3, #8]
 800abcc:	68ba      	ldr	r2, [r7, #8]
 800abce:	4313      	orrs	r3, r2
 800abd0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	68ba      	ldr	r2, [r7, #8]
 800abd8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2201      	movs	r2, #1
 800abde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2200      	movs	r2, #0
 800abe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800abea:	2300      	movs	r3, #0
}
 800abec:	4618      	mov	r0, r3
 800abee:	3714      	adds	r7, #20
 800abf0:	46bd      	mov	sp, r7
 800abf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf6:	4770      	bx	lr
 800abf8:	40010000 	.word	0x40010000
 800abfc:	40010400 	.word	0x40010400
 800ac00:	40000400 	.word	0x40000400
 800ac04:	40000800 	.word	0x40000800
 800ac08:	40000c00 	.word	0x40000c00
 800ac0c:	40014000 	.word	0x40014000
 800ac10:	40001800 	.word	0x40001800

0800ac14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b085      	sub	sp, #20
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d101      	bne.n	800ac30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ac2c:	2302      	movs	r3, #2
 800ac2e:	e065      	b.n	800acfc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2201      	movs	r2, #1
 800ac34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	68db      	ldr	r3, [r3, #12]
 800ac42:	4313      	orrs	r3, r2
 800ac44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	689b      	ldr	r3, [r3, #8]
 800ac50:	4313      	orrs	r3, r2
 800ac52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	691b      	ldr	r3, [r3, #16]
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	695b      	ldr	r3, [r3, #20]
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac96:	4313      	orrs	r3, r2
 800ac98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	699b      	ldr	r3, [r3, #24]
 800aca4:	041b      	lsls	r3, r3, #16
 800aca6:	4313      	orrs	r3, r2
 800aca8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	4a16      	ldr	r2, [pc, #88]	; (800ad08 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d004      	beq.n	800acbe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4a14      	ldr	r2, [pc, #80]	; (800ad0c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d115      	bne.n	800acea <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc8:	051b      	lsls	r3, r3, #20
 800acca:	4313      	orrs	r3, r2
 800accc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	69db      	ldr	r3, [r3, #28]
 800acd8:	4313      	orrs	r3, r2
 800acda:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	6a1b      	ldr	r3, [r3, #32]
 800ace6:	4313      	orrs	r3, r2
 800ace8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	68fa      	ldr	r2, [r7, #12]
 800acf0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2200      	movs	r2, #0
 800acf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800acfa:	2300      	movs	r3, #0
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3714      	adds	r7, #20
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr
 800ad08:	40010000 	.word	0x40010000
 800ad0c:	40010400 	.word	0x40010400

0800ad10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b083      	sub	sp, #12
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad18:	bf00      	nop
 800ad1a:	370c      	adds	r7, #12
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr

0800ad24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ad2c:	bf00      	nop
 800ad2e:	370c      	adds	r7, #12
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr

0800ad38 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b083      	sub	sp, #12
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ad40:	bf00      	nop
 800ad42:	370c      	adds	r7, #12
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr

0800ad4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b082      	sub	sp, #8
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d101      	bne.n	800ad5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	e040      	b.n	800ade0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d106      	bne.n	800ad74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f7f8 fd20 	bl	80037b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2224      	movs	r2, #36	; 0x24
 800ad78:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f022 0201 	bic.w	r2, r2, #1
 800ad88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 f82c 	bl	800ade8 <UART_SetConfig>
 800ad90:	4603      	mov	r3, r0
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d101      	bne.n	800ad9a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ad96:	2301      	movs	r3, #1
 800ad98:	e022      	b.n	800ade0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d002      	beq.n	800ada8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f000 face 	bl	800b344 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	685a      	ldr	r2, [r3, #4]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800adb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	689a      	ldr	r2, [r3, #8]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800adc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	681a      	ldr	r2, [r3, #0]
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f042 0201 	orr.w	r2, r2, #1
 800add6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f000 fb55 	bl	800b488 <UART_CheckIdleState>
 800adde:	4603      	mov	r3, r0
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	3708      	adds	r7, #8
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b088      	sub	sp, #32
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800adf0:	2300      	movs	r3, #0
 800adf2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800adf4:	2300      	movs	r3, #0
 800adf6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	689a      	ldr	r2, [r3, #8]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	691b      	ldr	r3, [r3, #16]
 800ae00:	431a      	orrs	r2, r3
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	695b      	ldr	r3, [r3, #20]
 800ae06:	431a      	orrs	r2, r3
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	69db      	ldr	r3, [r3, #28]
 800ae0c:	4313      	orrs	r3, r2
 800ae0e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	681a      	ldr	r2, [r3, #0]
 800ae16:	4ba6      	ldr	r3, [pc, #664]	; (800b0b0 <UART_SetConfig+0x2c8>)
 800ae18:	4013      	ands	r3, r2
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	6812      	ldr	r2, [r2, #0]
 800ae1e:	6939      	ldr	r1, [r7, #16]
 800ae20:	430b      	orrs	r3, r1
 800ae22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	68da      	ldr	r2, [r3, #12]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	430a      	orrs	r2, r1
 800ae38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	699b      	ldr	r3, [r3, #24]
 800ae3e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6a1b      	ldr	r3, [r3, #32]
 800ae44:	693a      	ldr	r2, [r7, #16]
 800ae46:	4313      	orrs	r3, r2
 800ae48:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	689b      	ldr	r3, [r3, #8]
 800ae50:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	693a      	ldr	r2, [r7, #16]
 800ae5a:	430a      	orrs	r2, r1
 800ae5c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	4a94      	ldr	r2, [pc, #592]	; (800b0b4 <UART_SetConfig+0x2cc>)
 800ae64:	4293      	cmp	r3, r2
 800ae66:	d120      	bne.n	800aeaa <UART_SetConfig+0xc2>
 800ae68:	4b93      	ldr	r3, [pc, #588]	; (800b0b8 <UART_SetConfig+0x2d0>)
 800ae6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae6e:	f003 0303 	and.w	r3, r3, #3
 800ae72:	2b03      	cmp	r3, #3
 800ae74:	d816      	bhi.n	800aea4 <UART_SetConfig+0xbc>
 800ae76:	a201      	add	r2, pc, #4	; (adr r2, 800ae7c <UART_SetConfig+0x94>)
 800ae78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae7c:	0800ae8d 	.word	0x0800ae8d
 800ae80:	0800ae99 	.word	0x0800ae99
 800ae84:	0800ae93 	.word	0x0800ae93
 800ae88:	0800ae9f 	.word	0x0800ae9f
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	77fb      	strb	r3, [r7, #31]
 800ae90:	e150      	b.n	800b134 <UART_SetConfig+0x34c>
 800ae92:	2302      	movs	r3, #2
 800ae94:	77fb      	strb	r3, [r7, #31]
 800ae96:	e14d      	b.n	800b134 <UART_SetConfig+0x34c>
 800ae98:	2304      	movs	r3, #4
 800ae9a:	77fb      	strb	r3, [r7, #31]
 800ae9c:	e14a      	b.n	800b134 <UART_SetConfig+0x34c>
 800ae9e:	2308      	movs	r3, #8
 800aea0:	77fb      	strb	r3, [r7, #31]
 800aea2:	e147      	b.n	800b134 <UART_SetConfig+0x34c>
 800aea4:	2310      	movs	r3, #16
 800aea6:	77fb      	strb	r3, [r7, #31]
 800aea8:	e144      	b.n	800b134 <UART_SetConfig+0x34c>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4a83      	ldr	r2, [pc, #524]	; (800b0bc <UART_SetConfig+0x2d4>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d132      	bne.n	800af1a <UART_SetConfig+0x132>
 800aeb4:	4b80      	ldr	r3, [pc, #512]	; (800b0b8 <UART_SetConfig+0x2d0>)
 800aeb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aeba:	f003 030c 	and.w	r3, r3, #12
 800aebe:	2b0c      	cmp	r3, #12
 800aec0:	d828      	bhi.n	800af14 <UART_SetConfig+0x12c>
 800aec2:	a201      	add	r2, pc, #4	; (adr r2, 800aec8 <UART_SetConfig+0xe0>)
 800aec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aec8:	0800aefd 	.word	0x0800aefd
 800aecc:	0800af15 	.word	0x0800af15
 800aed0:	0800af15 	.word	0x0800af15
 800aed4:	0800af15 	.word	0x0800af15
 800aed8:	0800af09 	.word	0x0800af09
 800aedc:	0800af15 	.word	0x0800af15
 800aee0:	0800af15 	.word	0x0800af15
 800aee4:	0800af15 	.word	0x0800af15
 800aee8:	0800af03 	.word	0x0800af03
 800aeec:	0800af15 	.word	0x0800af15
 800aef0:	0800af15 	.word	0x0800af15
 800aef4:	0800af15 	.word	0x0800af15
 800aef8:	0800af0f 	.word	0x0800af0f
 800aefc:	2300      	movs	r3, #0
 800aefe:	77fb      	strb	r3, [r7, #31]
 800af00:	e118      	b.n	800b134 <UART_SetConfig+0x34c>
 800af02:	2302      	movs	r3, #2
 800af04:	77fb      	strb	r3, [r7, #31]
 800af06:	e115      	b.n	800b134 <UART_SetConfig+0x34c>
 800af08:	2304      	movs	r3, #4
 800af0a:	77fb      	strb	r3, [r7, #31]
 800af0c:	e112      	b.n	800b134 <UART_SetConfig+0x34c>
 800af0e:	2308      	movs	r3, #8
 800af10:	77fb      	strb	r3, [r7, #31]
 800af12:	e10f      	b.n	800b134 <UART_SetConfig+0x34c>
 800af14:	2310      	movs	r3, #16
 800af16:	77fb      	strb	r3, [r7, #31]
 800af18:	e10c      	b.n	800b134 <UART_SetConfig+0x34c>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	4a68      	ldr	r2, [pc, #416]	; (800b0c0 <UART_SetConfig+0x2d8>)
 800af20:	4293      	cmp	r3, r2
 800af22:	d120      	bne.n	800af66 <UART_SetConfig+0x17e>
 800af24:	4b64      	ldr	r3, [pc, #400]	; (800b0b8 <UART_SetConfig+0x2d0>)
 800af26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af2a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800af2e:	2b30      	cmp	r3, #48	; 0x30
 800af30:	d013      	beq.n	800af5a <UART_SetConfig+0x172>
 800af32:	2b30      	cmp	r3, #48	; 0x30
 800af34:	d814      	bhi.n	800af60 <UART_SetConfig+0x178>
 800af36:	2b20      	cmp	r3, #32
 800af38:	d009      	beq.n	800af4e <UART_SetConfig+0x166>
 800af3a:	2b20      	cmp	r3, #32
 800af3c:	d810      	bhi.n	800af60 <UART_SetConfig+0x178>
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d002      	beq.n	800af48 <UART_SetConfig+0x160>
 800af42:	2b10      	cmp	r3, #16
 800af44:	d006      	beq.n	800af54 <UART_SetConfig+0x16c>
 800af46:	e00b      	b.n	800af60 <UART_SetConfig+0x178>
 800af48:	2300      	movs	r3, #0
 800af4a:	77fb      	strb	r3, [r7, #31]
 800af4c:	e0f2      	b.n	800b134 <UART_SetConfig+0x34c>
 800af4e:	2302      	movs	r3, #2
 800af50:	77fb      	strb	r3, [r7, #31]
 800af52:	e0ef      	b.n	800b134 <UART_SetConfig+0x34c>
 800af54:	2304      	movs	r3, #4
 800af56:	77fb      	strb	r3, [r7, #31]
 800af58:	e0ec      	b.n	800b134 <UART_SetConfig+0x34c>
 800af5a:	2308      	movs	r3, #8
 800af5c:	77fb      	strb	r3, [r7, #31]
 800af5e:	e0e9      	b.n	800b134 <UART_SetConfig+0x34c>
 800af60:	2310      	movs	r3, #16
 800af62:	77fb      	strb	r3, [r7, #31]
 800af64:	e0e6      	b.n	800b134 <UART_SetConfig+0x34c>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4a56      	ldr	r2, [pc, #344]	; (800b0c4 <UART_SetConfig+0x2dc>)
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d120      	bne.n	800afb2 <UART_SetConfig+0x1ca>
 800af70:	4b51      	ldr	r3, [pc, #324]	; (800b0b8 <UART_SetConfig+0x2d0>)
 800af72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af76:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800af7a:	2bc0      	cmp	r3, #192	; 0xc0
 800af7c:	d013      	beq.n	800afa6 <UART_SetConfig+0x1be>
 800af7e:	2bc0      	cmp	r3, #192	; 0xc0
 800af80:	d814      	bhi.n	800afac <UART_SetConfig+0x1c4>
 800af82:	2b80      	cmp	r3, #128	; 0x80
 800af84:	d009      	beq.n	800af9a <UART_SetConfig+0x1b2>
 800af86:	2b80      	cmp	r3, #128	; 0x80
 800af88:	d810      	bhi.n	800afac <UART_SetConfig+0x1c4>
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d002      	beq.n	800af94 <UART_SetConfig+0x1ac>
 800af8e:	2b40      	cmp	r3, #64	; 0x40
 800af90:	d006      	beq.n	800afa0 <UART_SetConfig+0x1b8>
 800af92:	e00b      	b.n	800afac <UART_SetConfig+0x1c4>
 800af94:	2300      	movs	r3, #0
 800af96:	77fb      	strb	r3, [r7, #31]
 800af98:	e0cc      	b.n	800b134 <UART_SetConfig+0x34c>
 800af9a:	2302      	movs	r3, #2
 800af9c:	77fb      	strb	r3, [r7, #31]
 800af9e:	e0c9      	b.n	800b134 <UART_SetConfig+0x34c>
 800afa0:	2304      	movs	r3, #4
 800afa2:	77fb      	strb	r3, [r7, #31]
 800afa4:	e0c6      	b.n	800b134 <UART_SetConfig+0x34c>
 800afa6:	2308      	movs	r3, #8
 800afa8:	77fb      	strb	r3, [r7, #31]
 800afaa:	e0c3      	b.n	800b134 <UART_SetConfig+0x34c>
 800afac:	2310      	movs	r3, #16
 800afae:	77fb      	strb	r3, [r7, #31]
 800afb0:	e0c0      	b.n	800b134 <UART_SetConfig+0x34c>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	4a44      	ldr	r2, [pc, #272]	; (800b0c8 <UART_SetConfig+0x2e0>)
 800afb8:	4293      	cmp	r3, r2
 800afba:	d125      	bne.n	800b008 <UART_SetConfig+0x220>
 800afbc:	4b3e      	ldr	r3, [pc, #248]	; (800b0b8 <UART_SetConfig+0x2d0>)
 800afbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800afc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800afca:	d017      	beq.n	800affc <UART_SetConfig+0x214>
 800afcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800afd0:	d817      	bhi.n	800b002 <UART_SetConfig+0x21a>
 800afd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afd6:	d00b      	beq.n	800aff0 <UART_SetConfig+0x208>
 800afd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afdc:	d811      	bhi.n	800b002 <UART_SetConfig+0x21a>
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d003      	beq.n	800afea <UART_SetConfig+0x202>
 800afe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afe6:	d006      	beq.n	800aff6 <UART_SetConfig+0x20e>
 800afe8:	e00b      	b.n	800b002 <UART_SetConfig+0x21a>
 800afea:	2300      	movs	r3, #0
 800afec:	77fb      	strb	r3, [r7, #31]
 800afee:	e0a1      	b.n	800b134 <UART_SetConfig+0x34c>
 800aff0:	2302      	movs	r3, #2
 800aff2:	77fb      	strb	r3, [r7, #31]
 800aff4:	e09e      	b.n	800b134 <UART_SetConfig+0x34c>
 800aff6:	2304      	movs	r3, #4
 800aff8:	77fb      	strb	r3, [r7, #31]
 800affa:	e09b      	b.n	800b134 <UART_SetConfig+0x34c>
 800affc:	2308      	movs	r3, #8
 800affe:	77fb      	strb	r3, [r7, #31]
 800b000:	e098      	b.n	800b134 <UART_SetConfig+0x34c>
 800b002:	2310      	movs	r3, #16
 800b004:	77fb      	strb	r3, [r7, #31]
 800b006:	e095      	b.n	800b134 <UART_SetConfig+0x34c>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	4a2f      	ldr	r2, [pc, #188]	; (800b0cc <UART_SetConfig+0x2e4>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d125      	bne.n	800b05e <UART_SetConfig+0x276>
 800b012:	4b29      	ldr	r3, [pc, #164]	; (800b0b8 <UART_SetConfig+0x2d0>)
 800b014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b018:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b01c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b020:	d017      	beq.n	800b052 <UART_SetConfig+0x26a>
 800b022:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b026:	d817      	bhi.n	800b058 <UART_SetConfig+0x270>
 800b028:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b02c:	d00b      	beq.n	800b046 <UART_SetConfig+0x25e>
 800b02e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b032:	d811      	bhi.n	800b058 <UART_SetConfig+0x270>
 800b034:	2b00      	cmp	r3, #0
 800b036:	d003      	beq.n	800b040 <UART_SetConfig+0x258>
 800b038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b03c:	d006      	beq.n	800b04c <UART_SetConfig+0x264>
 800b03e:	e00b      	b.n	800b058 <UART_SetConfig+0x270>
 800b040:	2301      	movs	r3, #1
 800b042:	77fb      	strb	r3, [r7, #31]
 800b044:	e076      	b.n	800b134 <UART_SetConfig+0x34c>
 800b046:	2302      	movs	r3, #2
 800b048:	77fb      	strb	r3, [r7, #31]
 800b04a:	e073      	b.n	800b134 <UART_SetConfig+0x34c>
 800b04c:	2304      	movs	r3, #4
 800b04e:	77fb      	strb	r3, [r7, #31]
 800b050:	e070      	b.n	800b134 <UART_SetConfig+0x34c>
 800b052:	2308      	movs	r3, #8
 800b054:	77fb      	strb	r3, [r7, #31]
 800b056:	e06d      	b.n	800b134 <UART_SetConfig+0x34c>
 800b058:	2310      	movs	r3, #16
 800b05a:	77fb      	strb	r3, [r7, #31]
 800b05c:	e06a      	b.n	800b134 <UART_SetConfig+0x34c>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	4a1b      	ldr	r2, [pc, #108]	; (800b0d0 <UART_SetConfig+0x2e8>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d138      	bne.n	800b0da <UART_SetConfig+0x2f2>
 800b068:	4b13      	ldr	r3, [pc, #76]	; (800b0b8 <UART_SetConfig+0x2d0>)
 800b06a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b06e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b072:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b076:	d017      	beq.n	800b0a8 <UART_SetConfig+0x2c0>
 800b078:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b07c:	d82a      	bhi.n	800b0d4 <UART_SetConfig+0x2ec>
 800b07e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b082:	d00b      	beq.n	800b09c <UART_SetConfig+0x2b4>
 800b084:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b088:	d824      	bhi.n	800b0d4 <UART_SetConfig+0x2ec>
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d003      	beq.n	800b096 <UART_SetConfig+0x2ae>
 800b08e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b092:	d006      	beq.n	800b0a2 <UART_SetConfig+0x2ba>
 800b094:	e01e      	b.n	800b0d4 <UART_SetConfig+0x2ec>
 800b096:	2300      	movs	r3, #0
 800b098:	77fb      	strb	r3, [r7, #31]
 800b09a:	e04b      	b.n	800b134 <UART_SetConfig+0x34c>
 800b09c:	2302      	movs	r3, #2
 800b09e:	77fb      	strb	r3, [r7, #31]
 800b0a0:	e048      	b.n	800b134 <UART_SetConfig+0x34c>
 800b0a2:	2304      	movs	r3, #4
 800b0a4:	77fb      	strb	r3, [r7, #31]
 800b0a6:	e045      	b.n	800b134 <UART_SetConfig+0x34c>
 800b0a8:	2308      	movs	r3, #8
 800b0aa:	77fb      	strb	r3, [r7, #31]
 800b0ac:	e042      	b.n	800b134 <UART_SetConfig+0x34c>
 800b0ae:	bf00      	nop
 800b0b0:	efff69f3 	.word	0xefff69f3
 800b0b4:	40011000 	.word	0x40011000
 800b0b8:	40023800 	.word	0x40023800
 800b0bc:	40004400 	.word	0x40004400
 800b0c0:	40004800 	.word	0x40004800
 800b0c4:	40004c00 	.word	0x40004c00
 800b0c8:	40005000 	.word	0x40005000
 800b0cc:	40011400 	.word	0x40011400
 800b0d0:	40007800 	.word	0x40007800
 800b0d4:	2310      	movs	r3, #16
 800b0d6:	77fb      	strb	r3, [r7, #31]
 800b0d8:	e02c      	b.n	800b134 <UART_SetConfig+0x34c>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	4a95      	ldr	r2, [pc, #596]	; (800b334 <UART_SetConfig+0x54c>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d125      	bne.n	800b130 <UART_SetConfig+0x348>
 800b0e4:	4b94      	ldr	r3, [pc, #592]	; (800b338 <UART_SetConfig+0x550>)
 800b0e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b0ee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b0f2:	d017      	beq.n	800b124 <UART_SetConfig+0x33c>
 800b0f4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b0f8:	d817      	bhi.n	800b12a <UART_SetConfig+0x342>
 800b0fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0fe:	d00b      	beq.n	800b118 <UART_SetConfig+0x330>
 800b100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b104:	d811      	bhi.n	800b12a <UART_SetConfig+0x342>
 800b106:	2b00      	cmp	r3, #0
 800b108:	d003      	beq.n	800b112 <UART_SetConfig+0x32a>
 800b10a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b10e:	d006      	beq.n	800b11e <UART_SetConfig+0x336>
 800b110:	e00b      	b.n	800b12a <UART_SetConfig+0x342>
 800b112:	2300      	movs	r3, #0
 800b114:	77fb      	strb	r3, [r7, #31]
 800b116:	e00d      	b.n	800b134 <UART_SetConfig+0x34c>
 800b118:	2302      	movs	r3, #2
 800b11a:	77fb      	strb	r3, [r7, #31]
 800b11c:	e00a      	b.n	800b134 <UART_SetConfig+0x34c>
 800b11e:	2304      	movs	r3, #4
 800b120:	77fb      	strb	r3, [r7, #31]
 800b122:	e007      	b.n	800b134 <UART_SetConfig+0x34c>
 800b124:	2308      	movs	r3, #8
 800b126:	77fb      	strb	r3, [r7, #31]
 800b128:	e004      	b.n	800b134 <UART_SetConfig+0x34c>
 800b12a:	2310      	movs	r3, #16
 800b12c:	77fb      	strb	r3, [r7, #31]
 800b12e:	e001      	b.n	800b134 <UART_SetConfig+0x34c>
 800b130:	2310      	movs	r3, #16
 800b132:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	69db      	ldr	r3, [r3, #28]
 800b138:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b13c:	f040 8080 	bne.w	800b240 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800b140:	7ffb      	ldrb	r3, [r7, #31]
 800b142:	2b08      	cmp	r3, #8
 800b144:	d85c      	bhi.n	800b200 <UART_SetConfig+0x418>
 800b146:	a201      	add	r2, pc, #4	; (adr r2, 800b14c <UART_SetConfig+0x364>)
 800b148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b14c:	0800b171 	.word	0x0800b171
 800b150:	0800b191 	.word	0x0800b191
 800b154:	0800b1b1 	.word	0x0800b1b1
 800b158:	0800b201 	.word	0x0800b201
 800b15c:	0800b1c9 	.word	0x0800b1c9
 800b160:	0800b201 	.word	0x0800b201
 800b164:	0800b201 	.word	0x0800b201
 800b168:	0800b201 	.word	0x0800b201
 800b16c:	0800b1e9 	.word	0x0800b1e9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b170:	f7fc f8b2 	bl	80072d8 <HAL_RCC_GetPCLK1Freq>
 800b174:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	005a      	lsls	r2, r3, #1
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	085b      	lsrs	r3, r3, #1
 800b180:	441a      	add	r2, r3
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	685b      	ldr	r3, [r3, #4]
 800b186:	fbb2 f3f3 	udiv	r3, r2, r3
 800b18a:	b29b      	uxth	r3, r3
 800b18c:	61bb      	str	r3, [r7, #24]
        break;
 800b18e:	e03a      	b.n	800b206 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b190:	f7fc f8b6 	bl	8007300 <HAL_RCC_GetPCLK2Freq>
 800b194:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	005a      	lsls	r2, r3, #1
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	085b      	lsrs	r3, r3, #1
 800b1a0:	441a      	add	r2, r3
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	685b      	ldr	r3, [r3, #4]
 800b1a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1aa:	b29b      	uxth	r3, r3
 800b1ac:	61bb      	str	r3, [r7, #24]
        break;
 800b1ae:	e02a      	b.n	800b206 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	685b      	ldr	r3, [r3, #4]
 800b1b4:	085a      	lsrs	r2, r3, #1
 800b1b6:	4b61      	ldr	r3, [pc, #388]	; (800b33c <UART_SetConfig+0x554>)
 800b1b8:	4413      	add	r3, r2
 800b1ba:	687a      	ldr	r2, [r7, #4]
 800b1bc:	6852      	ldr	r2, [r2, #4]
 800b1be:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1c2:	b29b      	uxth	r3, r3
 800b1c4:	61bb      	str	r3, [r7, #24]
        break;
 800b1c6:	e01e      	b.n	800b206 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b1c8:	f7fb ffb4 	bl	8007134 <HAL_RCC_GetSysClockFreq>
 800b1cc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	005a      	lsls	r2, r3, #1
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	085b      	lsrs	r3, r3, #1
 800b1d8:	441a      	add	r2, r3
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	685b      	ldr	r3, [r3, #4]
 800b1de:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1e2:	b29b      	uxth	r3, r3
 800b1e4:	61bb      	str	r3, [r7, #24]
        break;
 800b1e6:	e00e      	b.n	800b206 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	085b      	lsrs	r3, r3, #1
 800b1ee:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1fa:	b29b      	uxth	r3, r3
 800b1fc:	61bb      	str	r3, [r7, #24]
        break;
 800b1fe:	e002      	b.n	800b206 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800b200:	2301      	movs	r3, #1
 800b202:	75fb      	strb	r3, [r7, #23]
        break;
 800b204:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b206:	69bb      	ldr	r3, [r7, #24]
 800b208:	2b0f      	cmp	r3, #15
 800b20a:	d916      	bls.n	800b23a <UART_SetConfig+0x452>
 800b20c:	69bb      	ldr	r3, [r7, #24]
 800b20e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b212:	d212      	bcs.n	800b23a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b214:	69bb      	ldr	r3, [r7, #24]
 800b216:	b29b      	uxth	r3, r3
 800b218:	f023 030f 	bic.w	r3, r3, #15
 800b21c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b21e:	69bb      	ldr	r3, [r7, #24]
 800b220:	085b      	lsrs	r3, r3, #1
 800b222:	b29b      	uxth	r3, r3
 800b224:	f003 0307 	and.w	r3, r3, #7
 800b228:	b29a      	uxth	r2, r3
 800b22a:	897b      	ldrh	r3, [r7, #10]
 800b22c:	4313      	orrs	r3, r2
 800b22e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	897a      	ldrh	r2, [r7, #10]
 800b236:	60da      	str	r2, [r3, #12]
 800b238:	e070      	b.n	800b31c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b23a:	2301      	movs	r3, #1
 800b23c:	75fb      	strb	r3, [r7, #23]
 800b23e:	e06d      	b.n	800b31c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800b240:	7ffb      	ldrb	r3, [r7, #31]
 800b242:	2b08      	cmp	r3, #8
 800b244:	d859      	bhi.n	800b2fa <UART_SetConfig+0x512>
 800b246:	a201      	add	r2, pc, #4	; (adr r2, 800b24c <UART_SetConfig+0x464>)
 800b248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b24c:	0800b271 	.word	0x0800b271
 800b250:	0800b28f 	.word	0x0800b28f
 800b254:	0800b2ad 	.word	0x0800b2ad
 800b258:	0800b2fb 	.word	0x0800b2fb
 800b25c:	0800b2c5 	.word	0x0800b2c5
 800b260:	0800b2fb 	.word	0x0800b2fb
 800b264:	0800b2fb 	.word	0x0800b2fb
 800b268:	0800b2fb 	.word	0x0800b2fb
 800b26c:	0800b2e3 	.word	0x0800b2e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b270:	f7fc f832 	bl	80072d8 <HAL_RCC_GetPCLK1Freq>
 800b274:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	085a      	lsrs	r2, r3, #1
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	441a      	add	r2, r3
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	fbb2 f3f3 	udiv	r3, r2, r3
 800b288:	b29b      	uxth	r3, r3
 800b28a:	61bb      	str	r3, [r7, #24]
        break;
 800b28c:	e038      	b.n	800b300 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b28e:	f7fc f837 	bl	8007300 <HAL_RCC_GetPCLK2Freq>
 800b292:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	685b      	ldr	r3, [r3, #4]
 800b298:	085a      	lsrs	r2, r3, #1
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	441a      	add	r2, r3
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	685b      	ldr	r3, [r3, #4]
 800b2a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2a6:	b29b      	uxth	r3, r3
 800b2a8:	61bb      	str	r3, [r7, #24]
        break;
 800b2aa:	e029      	b.n	800b300 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	685b      	ldr	r3, [r3, #4]
 800b2b0:	085a      	lsrs	r2, r3, #1
 800b2b2:	4b23      	ldr	r3, [pc, #140]	; (800b340 <UART_SetConfig+0x558>)
 800b2b4:	4413      	add	r3, r2
 800b2b6:	687a      	ldr	r2, [r7, #4]
 800b2b8:	6852      	ldr	r2, [r2, #4]
 800b2ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2be:	b29b      	uxth	r3, r3
 800b2c0:	61bb      	str	r3, [r7, #24]
        break;
 800b2c2:	e01d      	b.n	800b300 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b2c4:	f7fb ff36 	bl	8007134 <HAL_RCC_GetSysClockFreq>
 800b2c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	085a      	lsrs	r2, r3, #1
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	441a      	add	r2, r3
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2dc:	b29b      	uxth	r3, r3
 800b2de:	61bb      	str	r3, [r7, #24]
        break;
 800b2e0:	e00e      	b.n	800b300 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	685b      	ldr	r3, [r3, #4]
 800b2e6:	085b      	lsrs	r3, r3, #1
 800b2e8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2f4:	b29b      	uxth	r3, r3
 800b2f6:	61bb      	str	r3, [r7, #24]
        break;
 800b2f8:	e002      	b.n	800b300 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	75fb      	strb	r3, [r7, #23]
        break;
 800b2fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b300:	69bb      	ldr	r3, [r7, #24]
 800b302:	2b0f      	cmp	r3, #15
 800b304:	d908      	bls.n	800b318 <UART_SetConfig+0x530>
 800b306:	69bb      	ldr	r3, [r7, #24]
 800b308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b30c:	d204      	bcs.n	800b318 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	69ba      	ldr	r2, [r7, #24]
 800b314:	60da      	str	r2, [r3, #12]
 800b316:	e001      	b.n	800b31c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b318:	2301      	movs	r3, #1
 800b31a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2200      	movs	r2, #0
 800b320:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2200      	movs	r2, #0
 800b326:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800b328:	7dfb      	ldrb	r3, [r7, #23]
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3720      	adds	r7, #32
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
 800b332:	bf00      	nop
 800b334:	40007c00 	.word	0x40007c00
 800b338:	40023800 	.word	0x40023800
 800b33c:	01e84800 	.word	0x01e84800
 800b340:	00f42400 	.word	0x00f42400

0800b344 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b344:	b480      	push	{r7}
 800b346:	b083      	sub	sp, #12
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b350:	f003 0301 	and.w	r3, r3, #1
 800b354:	2b00      	cmp	r3, #0
 800b356:	d00a      	beq.n	800b36e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	430a      	orrs	r2, r1
 800b36c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b372:	f003 0302 	and.w	r3, r3, #2
 800b376:	2b00      	cmp	r3, #0
 800b378:	d00a      	beq.n	800b390 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	430a      	orrs	r2, r1
 800b38e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b394:	f003 0304 	and.w	r3, r3, #4
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d00a      	beq.n	800b3b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	430a      	orrs	r2, r1
 800b3b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b6:	f003 0308 	and.w	r3, r3, #8
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d00a      	beq.n	800b3d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	430a      	orrs	r2, r1
 800b3d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d8:	f003 0310 	and.w	r3, r3, #16
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d00a      	beq.n	800b3f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	689b      	ldr	r3, [r3, #8]
 800b3e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	430a      	orrs	r2, r1
 800b3f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3fa:	f003 0320 	and.w	r3, r3, #32
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d00a      	beq.n	800b418 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	689b      	ldr	r3, [r3, #8]
 800b408:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	430a      	orrs	r2, r1
 800b416:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b41c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b420:	2b00      	cmp	r3, #0
 800b422:	d01a      	beq.n	800b45a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	430a      	orrs	r2, r1
 800b438:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b43e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b442:	d10a      	bne.n	800b45a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	685b      	ldr	r3, [r3, #4]
 800b44a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	430a      	orrs	r2, r1
 800b458:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b45e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b462:	2b00      	cmp	r3, #0
 800b464:	d00a      	beq.n	800b47c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	685b      	ldr	r3, [r3, #4]
 800b46c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	430a      	orrs	r2, r1
 800b47a:	605a      	str	r2, [r3, #4]
  }
}
 800b47c:	bf00      	nop
 800b47e:	370c      	adds	r7, #12
 800b480:	46bd      	mov	sp, r7
 800b482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b486:	4770      	bx	lr

0800b488 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b086      	sub	sp, #24
 800b48c:	af02      	add	r7, sp, #8
 800b48e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2200      	movs	r2, #0
 800b494:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b496:	f7f8 fcdb 	bl	8003e50 <HAL_GetTick>
 800b49a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f003 0308 	and.w	r3, r3, #8
 800b4a6:	2b08      	cmp	r3, #8
 800b4a8:	d10e      	bne.n	800b4c8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b4aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b4ae:	9300      	str	r3, [sp, #0]
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 f814 	bl	800b4e6 <UART_WaitOnFlagUntilTimeout>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d001      	beq.n	800b4c8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b4c4:	2303      	movs	r3, #3
 800b4c6:	e00a      	b.n	800b4de <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2220      	movs	r2, #32
 800b4cc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2220      	movs	r2, #32
 800b4d2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b4dc:	2300      	movs	r3, #0
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3710      	adds	r7, #16
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}

0800b4e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b4e6:	b580      	push	{r7, lr}
 800b4e8:	b084      	sub	sp, #16
 800b4ea:	af00      	add	r7, sp, #0
 800b4ec:	60f8      	str	r0, [r7, #12]
 800b4ee:	60b9      	str	r1, [r7, #8]
 800b4f0:	603b      	str	r3, [r7, #0]
 800b4f2:	4613      	mov	r3, r2
 800b4f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b4f6:	e05d      	b.n	800b5b4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b4f8:	69bb      	ldr	r3, [r7, #24]
 800b4fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4fe:	d059      	beq.n	800b5b4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b500:	f7f8 fca6 	bl	8003e50 <HAL_GetTick>
 800b504:	4602      	mov	r2, r0
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	1ad3      	subs	r3, r2, r3
 800b50a:	69ba      	ldr	r2, [r7, #24]
 800b50c:	429a      	cmp	r2, r3
 800b50e:	d302      	bcc.n	800b516 <UART_WaitOnFlagUntilTimeout+0x30>
 800b510:	69bb      	ldr	r3, [r7, #24]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d11b      	bne.n	800b54e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	681a      	ldr	r2, [r3, #0]
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b524:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	689a      	ldr	r2, [r3, #8]
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f022 0201 	bic.w	r2, r2, #1
 800b534:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2220      	movs	r2, #32
 800b53a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	2220      	movs	r2, #32
 800b540:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	2200      	movs	r2, #0
 800b546:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800b54a:	2303      	movs	r3, #3
 800b54c:	e042      	b.n	800b5d4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f003 0304 	and.w	r3, r3, #4
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d02b      	beq.n	800b5b4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	69db      	ldr	r3, [r3, #28]
 800b562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b566:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b56a:	d123      	bne.n	800b5b4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b574:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	681a      	ldr	r2, [r3, #0]
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b584:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	689a      	ldr	r2, [r3, #8]
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f022 0201 	bic.w	r2, r2, #1
 800b594:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2220      	movs	r2, #32
 800b59a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2220      	movs	r2, #32
 800b5a0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	2220      	movs	r2, #32
 800b5a6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800b5b0:	2303      	movs	r3, #3
 800b5b2:	e00f      	b.n	800b5d4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	69da      	ldr	r2, [r3, #28]
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	4013      	ands	r3, r2
 800b5be:	68ba      	ldr	r2, [r7, #8]
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	bf0c      	ite	eq
 800b5c4:	2301      	moveq	r3, #1
 800b5c6:	2300      	movne	r3, #0
 800b5c8:	b2db      	uxtb	r3, r3
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	79fb      	ldrb	r3, [r7, #7]
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	d092      	beq.n	800b4f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b5d2:	2300      	movs	r3, #0
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3710      	adds	r7, #16
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b085      	sub	sp, #20
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	2b01      	cmp	r3, #1
 800b5f4:	d027      	beq.n	800b646 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b5fc:	68fa      	ldr	r2, [r7, #12]
 800b5fe:	4b2f      	ldr	r3, [pc, #188]	; (800b6bc <FMC_SDRAM_Init+0xe0>)
 800b600:	4013      	ands	r3, r2
 800b602:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b60c:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800b612:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800b618:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800b61e:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800b624:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800b62a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800b630:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b636:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b638:	68fa      	ldr	r2, [r7, #12]
 800b63a:	4313      	orrs	r3, r2
 800b63c:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	68fa      	ldr	r2, [r7, #12]
 800b642:	601a      	str	r2, [r3, #0]
 800b644:	e032      	b.n	800b6ac <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b652:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b65c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b662:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b664:	68fa      	ldr	r2, [r7, #12]
 800b666:	4313      	orrs	r3, r2
 800b668:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b670:	68ba      	ldr	r2, [r7, #8]
 800b672:	4b12      	ldr	r3, [pc, #72]	; (800b6bc <FMC_SDRAM_Init+0xe0>)
 800b674:	4013      	ands	r3, r2
 800b676:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b680:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800b686:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800b68c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800b692:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800b698:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b69a:	68ba      	ldr	r2, [r7, #8]
 800b69c:	4313      	orrs	r3, r2
 800b69e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	68fa      	ldr	r2, [r7, #12]
 800b6a4:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	68ba      	ldr	r2, [r7, #8]
 800b6aa:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800b6ac:	2300      	movs	r3, #0
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3714      	adds	r7, #20
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b8:	4770      	bx	lr
 800b6ba:	bf00      	nop
 800b6bc:	ffff8000 	.word	0xffff8000

0800b6c0 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b087      	sub	sp, #28
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	60f8      	str	r0, [r7, #12]
 800b6c8:	60b9      	str	r1, [r7, #8]
 800b6ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2b01      	cmp	r3, #1
 800b6d8:	d02e      	beq.n	800b738 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	689b      	ldr	r3, [r3, #8]
 800b6de:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b6e0:	697b      	ldr	r3, [r7, #20]
 800b6e2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b6e6:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	3b01      	subs	r3, #1
 800b6f4:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b6f6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	689b      	ldr	r3, [r3, #8]
 800b6fc:	3b01      	subs	r3, #1
 800b6fe:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b700:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	68db      	ldr	r3, [r3, #12]
 800b706:	3b01      	subs	r3, #1
 800b708:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b70a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	691b      	ldr	r3, [r3, #16]
 800b710:	3b01      	subs	r3, #1
 800b712:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b714:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	695b      	ldr	r3, [r3, #20]
 800b71a:	3b01      	subs	r3, #1
 800b71c:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b71e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	699b      	ldr	r3, [r3, #24]
 800b724:	3b01      	subs	r3, #1
 800b726:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b728:	4313      	orrs	r3, r2
 800b72a:	697a      	ldr	r2, [r7, #20]
 800b72c:	4313      	orrs	r3, r2
 800b72e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	697a      	ldr	r2, [r7, #20]
 800b734:	609a      	str	r2, [r3, #8]
 800b736:	e039      	b.n	800b7ac <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	689b      	ldr	r3, [r3, #8]
 800b73c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800b73e:	697a      	ldr	r2, [r7, #20]
 800b740:	4b1e      	ldr	r3, [pc, #120]	; (800b7bc <FMC_SDRAM_Timing_Init+0xfc>)
 800b742:	4013      	ands	r3, r2
 800b744:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	68db      	ldr	r3, [r3, #12]
 800b74a:	3b01      	subs	r3, #1
 800b74c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	695b      	ldr	r3, [r3, #20]
 800b752:	3b01      	subs	r3, #1
 800b754:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b756:	4313      	orrs	r3, r2
 800b758:	697a      	ldr	r2, [r7, #20]
 800b75a:	4313      	orrs	r3, r2
 800b75c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	68db      	ldr	r3, [r3, #12]
 800b762:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b76a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	3b01      	subs	r3, #1
 800b778:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b77a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	689b      	ldr	r3, [r3, #8]
 800b780:	3b01      	subs	r3, #1
 800b782:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b784:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	691b      	ldr	r3, [r3, #16]
 800b78a:	3b01      	subs	r3, #1
 800b78c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b78e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	699b      	ldr	r3, [r3, #24]
 800b794:	3b01      	subs	r3, #1
 800b796:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b798:	4313      	orrs	r3, r2
 800b79a:	693a      	ldr	r2, [r7, #16]
 800b79c:	4313      	orrs	r3, r2
 800b79e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	697a      	ldr	r2, [r7, #20]
 800b7a4:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	693a      	ldr	r2, [r7, #16]
 800b7aa:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800b7ac:	2300      	movs	r3, #0
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	371c      	adds	r7, #28
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b8:	4770      	bx	lr
 800b7ba:	bf00      	nop
 800b7bc:	ff0f0fff 	.word	0xff0f0fff

0800b7c0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b087      	sub	sp, #28
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	60b9      	str	r1, [r7, #8]
 800b7ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b7d8:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	689b      	ldr	r3, [r3, #8]
 800b7de:	3b01      	subs	r3, #1
 800b7e0:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800b7e2:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	68db      	ldr	r3, [r3, #12]
 800b7e8:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b7ea:	4313      	orrs	r3, r2
 800b7ec:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800b7ee:	697a      	ldr	r2, [r7, #20]
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800b7f4:	2300      	movs	r3, #0
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	371c      	adds	r7, #28
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b800:	4770      	bx	lr

0800b802 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b802:	b480      	push	{r7}
 800b804:	b083      	sub	sp, #12
 800b806:	af00      	add	r7, sp, #0
 800b808:	6078      	str	r0, [r7, #4]
 800b80a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	695a      	ldr	r2, [r3, #20]
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	005b      	lsls	r3, r3, #1
 800b814:	431a      	orrs	r2, r3
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800b81a:	2300      	movs	r3, #0
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	370c      	adds	r7, #12
 800b820:	46bd      	mov	sp, r7
 800b822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b826:	4770      	bx	lr

0800b828 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b828:	b084      	sub	sp, #16
 800b82a:	b480      	push	{r7}
 800b82c:	b085      	sub	sp, #20
 800b82e:	af00      	add	r7, sp, #0
 800b830:	6078      	str	r0, [r7, #4]
 800b832:	f107 001c 	add.w	r0, r7, #28
 800b836:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b83a:	2300      	movs	r3, #0
 800b83c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b83e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b840:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b842:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b846:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b848:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b84a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b84e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b852:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b854:	68fa      	ldr	r2, [r7, #12]
 800b856:	4313      	orrs	r3, r2
 800b858:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	685a      	ldr	r2, [r3, #4]
 800b85e:	4b07      	ldr	r3, [pc, #28]	; (800b87c <SDMMC_Init+0x54>)
 800b860:	4013      	ands	r3, r2
 800b862:	68fa      	ldr	r2, [r7, #12]
 800b864:	431a      	orrs	r2, r3
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b86a:	2300      	movs	r3, #0
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3714      	adds	r7, #20
 800b870:	46bd      	mov	sp, r7
 800b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b876:	b004      	add	sp, #16
 800b878:	4770      	bx	lr
 800b87a:	bf00      	nop
 800b87c:	ffff8100 	.word	0xffff8100

0800b880 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b880:	b480      	push	{r7}
 800b882:	b083      	sub	sp, #12
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b88e:	4618      	mov	r0, r3
 800b890:	370c      	adds	r7, #12
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr

0800b89a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800b89a:	b580      	push	{r7, lr}
 800b89c:	b082      	sub	sp, #8
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2203      	movs	r2, #3
 800b8a6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b8a8:	2002      	movs	r0, #2
 800b8aa:	f7f8 fadd 	bl	8003e68 <HAL_Delay>
  
  return HAL_OK;
 800b8ae:	2300      	movs	r3, #0
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3708      	adds	r7, #8
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}

0800b8b8 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b083      	sub	sp, #12
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f003 0303 	and.w	r3, r3, #3
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	370c      	adds	r7, #12
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d2:	4770      	bx	lr

0800b8d4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b085      	sub	sp, #20
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	681a      	ldr	r2, [r3, #0]
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b8f2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b8f8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b8fe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b900:	68fa      	ldr	r2, [r7, #12]
 800b902:	4313      	orrs	r3, r2
 800b904:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	68da      	ldr	r2, [r3, #12]
 800b90a:	4b06      	ldr	r3, [pc, #24]	; (800b924 <SDMMC_SendCommand+0x50>)
 800b90c:	4013      	ands	r3, r2
 800b90e:	68fa      	ldr	r2, [r7, #12]
 800b910:	431a      	orrs	r2, r3
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b916:	2300      	movs	r3, #0
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3714      	adds	r7, #20
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr
 800b924:	fffff000 	.word	0xfffff000

0800b928 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b928:	b480      	push	{r7}
 800b92a:	b083      	sub	sp, #12
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	691b      	ldr	r3, [r3, #16]
 800b934:	b2db      	uxtb	r3, r3
}
 800b936:	4618      	mov	r0, r3
 800b938:	370c      	adds	r7, #12
 800b93a:	46bd      	mov	sp, r7
 800b93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b940:	4770      	bx	lr

0800b942 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b942:	b480      	push	{r7}
 800b944:	b085      	sub	sp, #20
 800b946:	af00      	add	r7, sp, #0
 800b948:	6078      	str	r0, [r7, #4]
 800b94a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	3314      	adds	r3, #20
 800b950:	461a      	mov	r2, r3
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	4413      	add	r3, r2
 800b956:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
}  
 800b95c:	4618      	mov	r0, r3
 800b95e:	3714      	adds	r7, #20
 800b960:	46bd      	mov	sp, r7
 800b962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b966:	4770      	bx	lr

0800b968 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b968:	b480      	push	{r7}
 800b96a:	b085      	sub	sp, #20
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b972:	2300      	movs	r3, #0
 800b974:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	681a      	ldr	r2, [r3, #0]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	685a      	ldr	r2, [r3, #4]
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b98e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b994:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b99a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b99c:	68fa      	ldr	r2, [r7, #12]
 800b99e:	4313      	orrs	r3, r2
 800b9a0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9a6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	431a      	orrs	r2, r3
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b9b2:	2300      	movs	r3, #0

}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3714      	adds	r7, #20
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr

0800b9c0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b088      	sub	sp, #32
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b9ce:	2310      	movs	r3, #16
 800b9d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b9d2:	2340      	movs	r3, #64	; 0x40
 800b9d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9e0:	f107 0308 	add.w	r3, r7, #8
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f7ff ff74 	bl	800b8d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b9ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9f0:	2110      	movs	r1, #16
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f000 fa42 	bl	800be7c <SDMMC_GetCmdResp1>
 800b9f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9fa:	69fb      	ldr	r3, [r7, #28]
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3720      	adds	r7, #32
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}

0800ba04 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b088      	sub	sp, #32
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ba12:	2311      	movs	r3, #17
 800ba14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba16:	2340      	movs	r3, #64	; 0x40
 800ba18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba24:	f107 0308 	add.w	r3, r7, #8
 800ba28:	4619      	mov	r1, r3
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f7ff ff52 	bl	800b8d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ba30:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba34:	2111      	movs	r1, #17
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f000 fa20 	bl	800be7c <SDMMC_GetCmdResp1>
 800ba3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba3e:	69fb      	ldr	r3, [r7, #28]
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3720      	adds	r7, #32
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}

0800ba48 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b088      	sub	sp, #32
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
 800ba50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ba56:	2312      	movs	r3, #18
 800ba58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba5a:	2340      	movs	r3, #64	; 0x40
 800ba5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba68:	f107 0308 	add.w	r3, r7, #8
 800ba6c:	4619      	mov	r1, r3
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f7ff ff30 	bl	800b8d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ba74:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba78:	2112      	movs	r1, #18
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f000 f9fe 	bl	800be7c <SDMMC_GetCmdResp1>
 800ba80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba82:	69fb      	ldr	r3, [r7, #28]
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3720      	adds	r7, #32
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b088      	sub	sp, #32
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
 800ba94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ba9a:	2318      	movs	r3, #24
 800ba9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba9e:	2340      	movs	r3, #64	; 0x40
 800baa0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800baa2:	2300      	movs	r3, #0
 800baa4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800baa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800baaa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800baac:	f107 0308 	add.w	r3, r7, #8
 800bab0:	4619      	mov	r1, r3
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f7ff ff0e 	bl	800b8d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bab8:	f241 3288 	movw	r2, #5000	; 0x1388
 800babc:	2118      	movs	r1, #24
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 f9dc 	bl	800be7c <SDMMC_GetCmdResp1>
 800bac4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bac6:	69fb      	ldr	r3, [r7, #28]
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3720      	adds	r7, #32
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}

0800bad0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b088      	sub	sp, #32
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800bade:	2319      	movs	r3, #25
 800bae0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bae2:	2340      	movs	r3, #64	; 0x40
 800bae4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bae6:	2300      	movs	r3, #0
 800bae8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800baea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800baee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800baf0:	f107 0308 	add.w	r3, r7, #8
 800baf4:	4619      	mov	r1, r3
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f7ff feec 	bl	800b8d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bafc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb00:	2119      	movs	r1, #25
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 f9ba 	bl	800be7c <SDMMC_GetCmdResp1>
 800bb08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb0a:	69fb      	ldr	r3, [r7, #28]
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3720      	adds	r7, #32
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}

0800bb14 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b088      	sub	sp, #32
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800bb20:	230c      	movs	r3, #12
 800bb22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb24:	2340      	movs	r3, #64	; 0x40
 800bb26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb32:	f107 0308 	add.w	r3, r7, #8
 800bb36:	4619      	mov	r1, r3
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f7ff fecb 	bl	800b8d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800bb3e:	4a05      	ldr	r2, [pc, #20]	; (800bb54 <SDMMC_CmdStopTransfer+0x40>)
 800bb40:	210c      	movs	r1, #12
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f000 f99a 	bl	800be7c <SDMMC_GetCmdResp1>
 800bb48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb4a:	69fb      	ldr	r3, [r7, #28]
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3720      	adds	r7, #32
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}
 800bb54:	05f5e100 	.word	0x05f5e100

0800bb58 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b08a      	sub	sp, #40	; 0x28
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	60f8      	str	r0, [r7, #12]
 800bb60:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bb68:	2307      	movs	r3, #7
 800bb6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb6c:	2340      	movs	r3, #64	; 0x40
 800bb6e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb70:	2300      	movs	r3, #0
 800bb72:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb78:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb7a:	f107 0310 	add.w	r3, r7, #16
 800bb7e:	4619      	mov	r1, r3
 800bb80:	68f8      	ldr	r0, [r7, #12]
 800bb82:	f7ff fea7 	bl	800b8d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800bb86:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb8a:	2107      	movs	r1, #7
 800bb8c:	68f8      	ldr	r0, [r7, #12]
 800bb8e:	f000 f975 	bl	800be7c <SDMMC_GetCmdResp1>
 800bb92:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800bb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	3728      	adds	r7, #40	; 0x28
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}

0800bb9e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800bb9e:	b580      	push	{r7, lr}
 800bba0:	b088      	sub	sp, #32
 800bba2:	af00      	add	r7, sp, #0
 800bba4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800bba6:	2300      	movs	r3, #0
 800bba8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bbb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bbbc:	f107 0308 	add.w	r3, r7, #8
 800bbc0:	4619      	mov	r1, r3
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f7ff fe86 	bl	800b8d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f000 f92f 	bl	800be2c <SDMMC_GetCmdError>
 800bbce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbd0:	69fb      	ldr	r3, [r7, #28]
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3720      	adds	r7, #32
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}

0800bbda <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800bbda:	b580      	push	{r7, lr}
 800bbdc:	b088      	sub	sp, #32
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800bbe2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800bbe6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800bbe8:	2308      	movs	r3, #8
 800bbea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bbec:	2340      	movs	r3, #64	; 0x40
 800bbee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bbf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbf8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bbfa:	f107 0308 	add.w	r3, r7, #8
 800bbfe:	4619      	mov	r1, r3
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f7ff fe67 	bl	800b8d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 fb18 	bl	800c23c <SDMMC_GetCmdResp7>
 800bc0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc0e:	69fb      	ldr	r3, [r7, #28]
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3720      	adds	r7, #32
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}

0800bc18 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b088      	sub	sp, #32
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
 800bc20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800bc26:	2337      	movs	r3, #55	; 0x37
 800bc28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc2a:	2340      	movs	r3, #64	; 0x40
 800bc2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc38:	f107 0308 	add.w	r3, r7, #8
 800bc3c:	4619      	mov	r1, r3
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f7ff fe48 	bl	800b8d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800bc44:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc48:	2137      	movs	r1, #55	; 0x37
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f000 f916 	bl	800be7c <SDMMC_GetCmdResp1>
 800bc50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc52:	69fb      	ldr	r3, [r7, #28]
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3720      	adds	r7, #32
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}

0800bc5c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b088      	sub	sp, #32
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800bc66:	683a      	ldr	r2, [r7, #0]
 800bc68:	4b0d      	ldr	r3, [pc, #52]	; (800bca0 <SDMMC_CmdAppOperCommand+0x44>)
 800bc6a:	4313      	orrs	r3, r2
 800bc6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800bc6e:	2329      	movs	r3, #41	; 0x29
 800bc70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc72:	2340      	movs	r3, #64	; 0x40
 800bc74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc76:	2300      	movs	r3, #0
 800bc78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc80:	f107 0308 	add.w	r3, r7, #8
 800bc84:	4619      	mov	r1, r3
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f7ff fe24 	bl	800b8d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f000 fa27 	bl	800c0e0 <SDMMC_GetCmdResp3>
 800bc92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc94:	69fb      	ldr	r3, [r7, #28]
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3720      	adds	r7, #32
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}
 800bc9e:	bf00      	nop
 800bca0:	80100000 	.word	0x80100000

0800bca4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b088      	sub	sp, #32
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800bcb2:	2306      	movs	r3, #6
 800bcb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bcb6:	2340      	movs	r3, #64	; 0x40
 800bcb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bcbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcc2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bcc4:	f107 0308 	add.w	r3, r7, #8
 800bcc8:	4619      	mov	r1, r3
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f7ff fe02 	bl	800b8d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800bcd0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcd4:	2106      	movs	r1, #6
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f000 f8d0 	bl	800be7c <SDMMC_GetCmdResp1>
 800bcdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bcde:	69fb      	ldr	r3, [r7, #28]
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3720      	adds	r7, #32
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}

0800bce8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b088      	sub	sp, #32
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800bcf4:	2333      	movs	r3, #51	; 0x33
 800bcf6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bcf8:	2340      	movs	r3, #64	; 0x40
 800bcfa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd04:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd06:	f107 0308 	add.w	r3, r7, #8
 800bd0a:	4619      	mov	r1, r3
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f7ff fde1 	bl	800b8d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800bd12:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd16:	2133      	movs	r1, #51	; 0x33
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f000 f8af 	bl	800be7c <SDMMC_GetCmdResp1>
 800bd1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd20:	69fb      	ldr	r3, [r7, #28]
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3720      	adds	r7, #32
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}

0800bd2a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800bd2a:	b580      	push	{r7, lr}
 800bd2c:	b088      	sub	sp, #32
 800bd2e:	af00      	add	r7, sp, #0
 800bd30:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800bd32:	2300      	movs	r3, #0
 800bd34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800bd36:	2302      	movs	r3, #2
 800bd38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bd3a:	23c0      	movs	r3, #192	; 0xc0
 800bd3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd48:	f107 0308 	add.w	r3, r7, #8
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f7ff fdc0 	bl	800b8d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f000 f97d 	bl	800c054 <SDMMC_GetCmdResp2>
 800bd5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd5c:	69fb      	ldr	r3, [r7, #28]
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3720      	adds	r7, #32
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}

0800bd66 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bd66:	b580      	push	{r7, lr}
 800bd68:	b088      	sub	sp, #32
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	6078      	str	r0, [r7, #4]
 800bd6e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800bd74:	2309      	movs	r3, #9
 800bd76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bd78:	23c0      	movs	r3, #192	; 0xc0
 800bd7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd86:	f107 0308 	add.w	r3, r7, #8
 800bd8a:	4619      	mov	r1, r3
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f7ff fda1 	bl	800b8d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f000 f95e 	bl	800c054 <SDMMC_GetCmdResp2>
 800bd98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd9a:	69fb      	ldr	r3, [r7, #28]
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3720      	adds	r7, #32
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b088      	sub	sp, #32
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800bdb2:	2303      	movs	r3, #3
 800bdb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bdb6:	2340      	movs	r3, #64	; 0x40
 800bdb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bdbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdc2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bdc4:	f107 0308 	add.w	r3, r7, #8
 800bdc8:	4619      	mov	r1, r3
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f7ff fd82 	bl	800b8d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800bdd0:	683a      	ldr	r2, [r7, #0]
 800bdd2:	2103      	movs	r1, #3
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f000 f9bd 	bl	800c154 <SDMMC_GetCmdResp6>
 800bdda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bddc:	69fb      	ldr	r3, [r7, #28]
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3720      	adds	r7, #32
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}

0800bde6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bde6:	b580      	push	{r7, lr}
 800bde8:	b088      	sub	sp, #32
 800bdea:	af00      	add	r7, sp, #0
 800bdec:	6078      	str	r0, [r7, #4]
 800bdee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800bdf4:	230d      	movs	r3, #13
 800bdf6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bdf8:	2340      	movs	r3, #64	; 0x40
 800bdfa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be04:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be06:	f107 0308 	add.w	r3, r7, #8
 800be0a:	4619      	mov	r1, r3
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f7ff fd61 	bl	800b8d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800be12:	f241 3288 	movw	r2, #5000	; 0x1388
 800be16:	210d      	movs	r1, #13
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f000 f82f 	bl	800be7c <SDMMC_GetCmdResp1>
 800be1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be20:	69fb      	ldr	r3, [r7, #28]
}
 800be22:	4618      	mov	r0, r3
 800be24:	3720      	adds	r7, #32
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}
	...

0800be2c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800be2c:	b490      	push	{r4, r7}
 800be2e:	b082      	sub	sp, #8
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800be34:	4b0f      	ldr	r3, [pc, #60]	; (800be74 <SDMMC_GetCmdError+0x48>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	4a0f      	ldr	r2, [pc, #60]	; (800be78 <SDMMC_GetCmdError+0x4c>)
 800be3a:	fba2 2303 	umull	r2, r3, r2, r3
 800be3e:	0a5b      	lsrs	r3, r3, #9
 800be40:	f241 3288 	movw	r2, #5000	; 0x1388
 800be44:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800be48:	4623      	mov	r3, r4
 800be4a:	1e5c      	subs	r4, r3, #1
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d102      	bne.n	800be56 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800be50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800be54:	e009      	b.n	800be6a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d0f2      	beq.n	800be48 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	22c5      	movs	r2, #197	; 0xc5
 800be66:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800be68:	2300      	movs	r3, #0
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3708      	adds	r7, #8
 800be6e:	46bd      	mov	sp, r7
 800be70:	bc90      	pop	{r4, r7}
 800be72:	4770      	bx	lr
 800be74:	20000018 	.word	0x20000018
 800be78:	10624dd3 	.word	0x10624dd3

0800be7c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800be7c:	b590      	push	{r4, r7, lr}
 800be7e:	b087      	sub	sp, #28
 800be80:	af00      	add	r7, sp, #0
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	460b      	mov	r3, r1
 800be86:	607a      	str	r2, [r7, #4]
 800be88:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800be8a:	4b6f      	ldr	r3, [pc, #444]	; (800c048 <SDMMC_GetCmdResp1+0x1cc>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	4a6f      	ldr	r2, [pc, #444]	; (800c04c <SDMMC_GetCmdResp1+0x1d0>)
 800be90:	fba2 2303 	umull	r2, r3, r2, r3
 800be94:	0a5b      	lsrs	r3, r3, #9
 800be96:	687a      	ldr	r2, [r7, #4]
 800be98:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800be9c:	4623      	mov	r3, r4
 800be9e:	1e5c      	subs	r4, r3, #1
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d102      	bne.n	800beaa <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bea4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bea8:	e0c9      	b.n	800c03e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beae:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800beb0:	697b      	ldr	r3, [r7, #20]
 800beb2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d0f0      	beq.n	800be9c <SDMMC_GetCmdResp1+0x20>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d1eb      	bne.n	800be9c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bec8:	f003 0304 	and.w	r3, r3, #4
 800becc:	2b00      	cmp	r3, #0
 800bece:	d004      	beq.n	800beda <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2204      	movs	r2, #4
 800bed4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bed6:	2304      	movs	r3, #4
 800bed8:	e0b1      	b.n	800c03e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bede:	f003 0301 	and.w	r3, r3, #1
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d004      	beq.n	800bef0 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	2201      	movs	r2, #1
 800beea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800beec:	2301      	movs	r3, #1
 800beee:	e0a6      	b.n	800c03e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	22c5      	movs	r2, #197	; 0xc5
 800bef4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bef6:	68f8      	ldr	r0, [r7, #12]
 800bef8:	f7ff fd16 	bl	800b928 <SDMMC_GetCommandResponse>
 800befc:	4603      	mov	r3, r0
 800befe:	461a      	mov	r2, r3
 800bf00:	7afb      	ldrb	r3, [r7, #11]
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d001      	beq.n	800bf0a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bf06:	2301      	movs	r3, #1
 800bf08:	e099      	b.n	800c03e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bf0a:	2100      	movs	r1, #0
 800bf0c:	68f8      	ldr	r0, [r7, #12]
 800bf0e:	f7ff fd18 	bl	800b942 <SDMMC_GetResponse>
 800bf12:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bf14:	693a      	ldr	r2, [r7, #16]
 800bf16:	4b4e      	ldr	r3, [pc, #312]	; (800c050 <SDMMC_GetCmdResp1+0x1d4>)
 800bf18:	4013      	ands	r3, r2
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d101      	bne.n	800bf22 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	e08d      	b.n	800c03e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	da02      	bge.n	800bf2e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bf28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bf2c:	e087      	b.n	800c03e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bf2e:	693b      	ldr	r3, [r7, #16]
 800bf30:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d001      	beq.n	800bf3c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bf38:	2340      	movs	r3, #64	; 0x40
 800bf3a:	e080      	b.n	800c03e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bf3c:	693b      	ldr	r3, [r7, #16]
 800bf3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d001      	beq.n	800bf4a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bf46:	2380      	movs	r3, #128	; 0x80
 800bf48:	e079      	b.n	800c03e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d002      	beq.n	800bf5a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bf54:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bf58:	e071      	b.n	800c03e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d002      	beq.n	800bf6a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bf64:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf68:	e069      	b.n	800c03e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bf6a:	693b      	ldr	r3, [r7, #16]
 800bf6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d002      	beq.n	800bf7a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bf74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf78:	e061      	b.n	800c03e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d002      	beq.n	800bf8a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bf84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bf88:	e059      	b.n	800c03e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bf8a:	693b      	ldr	r3, [r7, #16]
 800bf8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d002      	beq.n	800bf9a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bf94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf98:	e051      	b.n	800c03e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d002      	beq.n	800bfaa <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bfa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bfa8:	e049      	b.n	800c03e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d002      	beq.n	800bfba <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bfb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bfb8:	e041      	b.n	800c03e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d002      	beq.n	800bfca <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800bfc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bfc8:	e039      	b.n	800c03e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bfca:	693b      	ldr	r3, [r7, #16]
 800bfcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d002      	beq.n	800bfda <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bfd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bfd8:	e031      	b.n	800c03e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d002      	beq.n	800bfea <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bfe4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bfe8:	e029      	b.n	800c03e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d002      	beq.n	800bffa <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bff4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bff8:	e021      	b.n	800c03e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c000:	2b00      	cmp	r3, #0
 800c002:	d002      	beq.n	800c00a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c004:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c008:	e019      	b.n	800c03e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c010:	2b00      	cmp	r3, #0
 800c012:	d002      	beq.n	800c01a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c014:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c018:	e011      	b.n	800c03e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c01a:	693b      	ldr	r3, [r7, #16]
 800c01c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c020:	2b00      	cmp	r3, #0
 800c022:	d002      	beq.n	800c02a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c024:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c028:	e009      	b.n	800c03e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	f003 0308 	and.w	r3, r3, #8
 800c030:	2b00      	cmp	r3, #0
 800c032:	d002      	beq.n	800c03a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c034:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c038:	e001      	b.n	800c03e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c03a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c03e:	4618      	mov	r0, r3
 800c040:	371c      	adds	r7, #28
 800c042:	46bd      	mov	sp, r7
 800c044:	bd90      	pop	{r4, r7, pc}
 800c046:	bf00      	nop
 800c048:	20000018 	.word	0x20000018
 800c04c:	10624dd3 	.word	0x10624dd3
 800c050:	fdffe008 	.word	0xfdffe008

0800c054 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c054:	b490      	push	{r4, r7}
 800c056:	b084      	sub	sp, #16
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c05c:	4b1e      	ldr	r3, [pc, #120]	; (800c0d8 <SDMMC_GetCmdResp2+0x84>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	4a1e      	ldr	r2, [pc, #120]	; (800c0dc <SDMMC_GetCmdResp2+0x88>)
 800c062:	fba2 2303 	umull	r2, r3, r2, r3
 800c066:	0a5b      	lsrs	r3, r3, #9
 800c068:	f241 3288 	movw	r2, #5000	; 0x1388
 800c06c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c070:	4623      	mov	r3, r4
 800c072:	1e5c      	subs	r4, r3, #1
 800c074:	2b00      	cmp	r3, #0
 800c076:	d102      	bne.n	800c07e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c078:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c07c:	e026      	b.n	800c0cc <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c082:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d0f0      	beq.n	800c070 <SDMMC_GetCmdResp2+0x1c>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c094:	2b00      	cmp	r3, #0
 800c096:	d1eb      	bne.n	800c070 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c09c:	f003 0304 	and.w	r3, r3, #4
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d004      	beq.n	800c0ae <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2204      	movs	r2, #4
 800c0a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c0aa:	2304      	movs	r3, #4
 800c0ac:	e00e      	b.n	800c0cc <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0b2:	f003 0301 	and.w	r3, r3, #1
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d004      	beq.n	800c0c4 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2201      	movs	r2, #1
 800c0be:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	e003      	b.n	800c0cc <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	22c5      	movs	r2, #197	; 0xc5
 800c0c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c0ca:	2300      	movs	r3, #0
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3710      	adds	r7, #16
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bc90      	pop	{r4, r7}
 800c0d4:	4770      	bx	lr
 800c0d6:	bf00      	nop
 800c0d8:	20000018 	.word	0x20000018
 800c0dc:	10624dd3 	.word	0x10624dd3

0800c0e0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c0e0:	b490      	push	{r4, r7}
 800c0e2:	b084      	sub	sp, #16
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c0e8:	4b18      	ldr	r3, [pc, #96]	; (800c14c <SDMMC_GetCmdResp3+0x6c>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	4a18      	ldr	r2, [pc, #96]	; (800c150 <SDMMC_GetCmdResp3+0x70>)
 800c0ee:	fba2 2303 	umull	r2, r3, r2, r3
 800c0f2:	0a5b      	lsrs	r3, r3, #9
 800c0f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0f8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c0fc:	4623      	mov	r3, r4
 800c0fe:	1e5c      	subs	r4, r3, #1
 800c100:	2b00      	cmp	r3, #0
 800c102:	d102      	bne.n	800c10a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c104:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c108:	e01b      	b.n	800c142 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c10e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c116:	2b00      	cmp	r3, #0
 800c118:	d0f0      	beq.n	800c0fc <SDMMC_GetCmdResp3+0x1c>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c120:	2b00      	cmp	r3, #0
 800c122:	d1eb      	bne.n	800c0fc <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c128:	f003 0304 	and.w	r3, r3, #4
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d004      	beq.n	800c13a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2204      	movs	r2, #4
 800c134:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c136:	2304      	movs	r3, #4
 800c138:	e003      	b.n	800c142 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	22c5      	movs	r2, #197	; 0xc5
 800c13e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c140:	2300      	movs	r3, #0
}
 800c142:	4618      	mov	r0, r3
 800c144:	3710      	adds	r7, #16
 800c146:	46bd      	mov	sp, r7
 800c148:	bc90      	pop	{r4, r7}
 800c14a:	4770      	bx	lr
 800c14c:	20000018 	.word	0x20000018
 800c150:	10624dd3 	.word	0x10624dd3

0800c154 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c154:	b590      	push	{r4, r7, lr}
 800c156:	b087      	sub	sp, #28
 800c158:	af00      	add	r7, sp, #0
 800c15a:	60f8      	str	r0, [r7, #12]
 800c15c:	460b      	mov	r3, r1
 800c15e:	607a      	str	r2, [r7, #4]
 800c160:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c162:	4b34      	ldr	r3, [pc, #208]	; (800c234 <SDMMC_GetCmdResp6+0xe0>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	4a34      	ldr	r2, [pc, #208]	; (800c238 <SDMMC_GetCmdResp6+0xe4>)
 800c168:	fba2 2303 	umull	r2, r3, r2, r3
 800c16c:	0a5b      	lsrs	r3, r3, #9
 800c16e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c172:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c176:	4623      	mov	r3, r4
 800c178:	1e5c      	subs	r4, r3, #1
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d102      	bne.n	800c184 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c17e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c182:	e052      	b.n	800c22a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c188:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c190:	2b00      	cmp	r3, #0
 800c192:	d0f0      	beq.n	800c176 <SDMMC_GetCmdResp6+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d1eb      	bne.n	800c176 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1a2:	f003 0304 	and.w	r3, r3, #4
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d004      	beq.n	800c1b4 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	2204      	movs	r2, #4
 800c1ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c1b0:	2304      	movs	r3, #4
 800c1b2:	e03a      	b.n	800c22a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1b8:	f003 0301 	and.w	r3, r3, #1
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d004      	beq.n	800c1ca <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	e02f      	b.n	800c22a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c1ca:	68f8      	ldr	r0, [r7, #12]
 800c1cc:	f7ff fbac 	bl	800b928 <SDMMC_GetCommandResponse>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	7afb      	ldrb	r3, [r7, #11]
 800c1d6:	4293      	cmp	r3, r2
 800c1d8:	d001      	beq.n	800c1de <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c1da:	2301      	movs	r3, #1
 800c1dc:	e025      	b.n	800c22a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	22c5      	movs	r2, #197	; 0xc5
 800c1e2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c1e4:	2100      	movs	r1, #0
 800c1e6:	68f8      	ldr	r0, [r7, #12]
 800c1e8:	f7ff fbab 	bl	800b942 <SDMMC_GetResponse>
 800c1ec:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d106      	bne.n	800c206 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	0c1b      	lsrs	r3, r3, #16
 800c1fc:	b29a      	uxth	r2, r3
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c202:	2300      	movs	r3, #0
 800c204:	e011      	b.n	800c22a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c206:	693b      	ldr	r3, [r7, #16]
 800c208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d002      	beq.n	800c216 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c210:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c214:	e009      	b.n	800c22a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d002      	beq.n	800c226 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c220:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c224:	e001      	b.n	800c22a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c226:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	371c      	adds	r7, #28
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd90      	pop	{r4, r7, pc}
 800c232:	bf00      	nop
 800c234:	20000018 	.word	0x20000018
 800c238:	10624dd3 	.word	0x10624dd3

0800c23c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c23c:	b490      	push	{r4, r7}
 800c23e:	b084      	sub	sp, #16
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c244:	4b21      	ldr	r3, [pc, #132]	; (800c2cc <SDMMC_GetCmdResp7+0x90>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	4a21      	ldr	r2, [pc, #132]	; (800c2d0 <SDMMC_GetCmdResp7+0x94>)
 800c24a:	fba2 2303 	umull	r2, r3, r2, r3
 800c24e:	0a5b      	lsrs	r3, r3, #9
 800c250:	f241 3288 	movw	r2, #5000	; 0x1388
 800c254:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c258:	4623      	mov	r3, r4
 800c25a:	1e5c      	subs	r4, r3, #1
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d102      	bne.n	800c266 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c260:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c264:	e02c      	b.n	800c2c0 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c26a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c272:	2b00      	cmp	r3, #0
 800c274:	d0f0      	beq.n	800c258 <SDMMC_GetCmdResp7+0x1c>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d1eb      	bne.n	800c258 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c284:	f003 0304 	and.w	r3, r3, #4
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d004      	beq.n	800c296 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2204      	movs	r2, #4
 800c290:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c292:	2304      	movs	r3, #4
 800c294:	e014      	b.n	800c2c0 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c29a:	f003 0301 	and.w	r3, r3, #1
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d004      	beq.n	800c2ac <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2201      	movs	r2, #1
 800c2a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	e009      	b.n	800c2c0 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d002      	beq.n	800c2be <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2240      	movs	r2, #64	; 0x40
 800c2bc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c2be:	2300      	movs	r3, #0
  
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3710      	adds	r7, #16
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bc90      	pop	{r4, r7}
 800c2c8:	4770      	bx	lr
 800c2ca:	bf00      	nop
 800c2cc:	20000018 	.word	0x20000018
 800c2d0:	10624dd3 	.word	0x10624dd3

0800c2d4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c2d8:	4904      	ldr	r1, [pc, #16]	; (800c2ec <MX_FATFS_Init+0x18>)
 800c2da:	4805      	ldr	r0, [pc, #20]	; (800c2f0 <MX_FATFS_Init+0x1c>)
 800c2dc:	f000 fa96 	bl	800c80c <FATFS_LinkDriver>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	4b03      	ldr	r3, [pc, #12]	; (800c2f4 <MX_FATFS_Init+0x20>)
 800c2e6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800c2e8:	bf00      	nop
 800c2ea:	bd80      	pop	{r7, pc}
 800c2ec:	20000b78 	.word	0x20000b78
 800c2f0:	080282ec 	.word	0x080282ec
 800c2f4:	20000b74 	.word	0x20000b74

0800c2f8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b082      	sub	sp, #8
 800c2fc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c2fe:	2300      	movs	r3, #0
 800c300:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c302:	f000 f87b 	bl	800c3fc <BSP_SD_IsDetected>
 800c306:	4603      	mov	r3, r0
 800c308:	2b01      	cmp	r3, #1
 800c30a:	d001      	beq.n	800c310 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c30c:	2302      	movs	r3, #2
 800c30e:	e012      	b.n	800c336 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c310:	480b      	ldr	r0, [pc, #44]	; (800c340 <BSP_SD_Init+0x48>)
 800c312:	f7fc fad9 	bl	80088c8 <HAL_SD_Init>
 800c316:	4603      	mov	r3, r0
 800c318:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c31a:	79fb      	ldrb	r3, [r7, #7]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d109      	bne.n	800c334 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c320:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c324:	4806      	ldr	r0, [pc, #24]	; (800c340 <BSP_SD_Init+0x48>)
 800c326:	f7fc ff1b 	bl	8009160 <HAL_SD_ConfigWideBusOperation>
 800c32a:	4603      	mov	r3, r0
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d001      	beq.n	800c334 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c330:	2301      	movs	r3, #1
 800c332:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c334:	79fb      	ldrb	r3, [r7, #7]
}
 800c336:	4618      	mov	r0, r3
 800c338:	3708      	adds	r7, #8
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}
 800c33e:	bf00      	nop
 800c340:	200006e0 	.word	0x200006e0

0800c344 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b086      	sub	sp, #24
 800c348:	af00      	add	r7, sp, #0
 800c34a:	60f8      	str	r0, [r7, #12]
 800c34c:	60b9      	str	r1, [r7, #8]
 800c34e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c350:	2300      	movs	r3, #0
 800c352:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	68ba      	ldr	r2, [r7, #8]
 800c358:	68f9      	ldr	r1, [r7, #12]
 800c35a:	4806      	ldr	r0, [pc, #24]	; (800c374 <BSP_SD_ReadBlocks_DMA+0x30>)
 800c35c:	f7fc fb4c 	bl	80089f8 <HAL_SD_ReadBlocks_DMA>
 800c360:	4603      	mov	r3, r0
 800c362:	2b00      	cmp	r3, #0
 800c364:	d001      	beq.n	800c36a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c366:	2301      	movs	r3, #1
 800c368:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800c36a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	3718      	adds	r7, #24
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}
 800c374:	200006e0 	.word	0x200006e0

0800c378 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b086      	sub	sp, #24
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	60f8      	str	r0, [r7, #12]
 800c380:	60b9      	str	r1, [r7, #8]
 800c382:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c384:	2300      	movs	r3, #0
 800c386:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	68ba      	ldr	r2, [r7, #8]
 800c38c:	68f9      	ldr	r1, [r7, #12]
 800c38e:	4806      	ldr	r0, [pc, #24]	; (800c3a8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800c390:	f7fc fc1e 	bl	8008bd0 <HAL_SD_WriteBlocks_DMA>
 800c394:	4603      	mov	r3, r0
 800c396:	2b00      	cmp	r3, #0
 800c398:	d001      	beq.n	800c39e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c39a:	2301      	movs	r3, #1
 800c39c:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800c39e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	3718      	adds	r7, #24
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}
 800c3a8:	200006e0 	.word	0x200006e0

0800c3ac <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c3b0:	4805      	ldr	r0, [pc, #20]	; (800c3c8 <BSP_SD_GetCardState+0x1c>)
 800c3b2:	f7fc ff51 	bl	8009258 <HAL_SD_GetCardState>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	2b04      	cmp	r3, #4
 800c3ba:	bf14      	ite	ne
 800c3bc:	2301      	movne	r3, #1
 800c3be:	2300      	moveq	r3, #0
 800c3c0:	b2db      	uxtb	r3, r3
}
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	bd80      	pop	{r7, pc}
 800c3c6:	bf00      	nop
 800c3c8:	200006e0 	.word	0x200006e0

0800c3cc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b082      	sub	sp, #8
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c3d4:	6879      	ldr	r1, [r7, #4]
 800c3d6:	4803      	ldr	r0, [pc, #12]	; (800c3e4 <BSP_SD_GetCardInfo+0x18>)
 800c3d8:	f7fc fe96 	bl	8009108 <HAL_SD_GetCardInfo>
}
 800c3dc:	bf00      	nop
 800c3de:	3708      	adds	r7, #8
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}
 800c3e4:	200006e0 	.word	0x200006e0

0800c3e8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b082      	sub	sp, #8
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c3f0:	f000 f9b2 	bl	800c758 <BSP_SD_ReadCpltCallback>
}
 800c3f4:	bf00      	nop
 800c3f6:	3708      	adds	r7, #8
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}

0800c3fc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b082      	sub	sp, #8
 800c400:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c402:	2301      	movs	r3, #1
 800c404:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800c406:	f000 f80b 	bl	800c420 <BSP_PlatformIsDetected>
 800c40a:	4603      	mov	r3, r0
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d101      	bne.n	800c414 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c410:	2300      	movs	r3, #0
 800c412:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c414:	79fb      	ldrb	r3, [r7, #7]
 800c416:	b2db      	uxtb	r3, r3
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3708      	adds	r7, #8
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c420:	b580      	push	{r7, lr}
 800c422:	b082      	sub	sp, #8
 800c424:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c426:	2301      	movs	r3, #1
 800c428:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c42a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c42e:	4806      	ldr	r0, [pc, #24]	; (800c448 <BSP_PlatformIsDetected+0x28>)
 800c430:	f7f9 fe04 	bl	800603c <HAL_GPIO_ReadPin>
 800c434:	4603      	mov	r3, r0
 800c436:	2b00      	cmp	r3, #0
 800c438:	d001      	beq.n	800c43e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c43a:	2300      	movs	r3, #0
 800c43c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800c43e:	79fb      	ldrb	r3, [r7, #7]
}  
 800c440:	4618      	mov	r0, r3
 800c442:	3708      	adds	r7, #8
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}
 800c448:	40020800 	.word	0x40020800

0800c44c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b084      	sub	sp, #16
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800c454:	f000 fa26 	bl	800c8a4 <osKernelSysTick>
 800c458:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800c45a:	e006      	b.n	800c46a <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c45c:	f7ff ffa6 	bl	800c3ac <BSP_SD_GetCardState>
 800c460:	4603      	mov	r3, r0
 800c462:	2b00      	cmp	r3, #0
 800c464:	d101      	bne.n	800c46a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c466:	2300      	movs	r3, #0
 800c468:	e009      	b.n	800c47e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800c46a:	f000 fa1b 	bl	800c8a4 <osKernelSysTick>
 800c46e:	4602      	mov	r2, r0
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	1ad3      	subs	r3, r2, r3
 800c474:	687a      	ldr	r2, [r7, #4]
 800c476:	429a      	cmp	r2, r3
 800c478:	d8f0      	bhi.n	800c45c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c47a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3710      	adds	r7, #16
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
	...

0800c488 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b082      	sub	sp, #8
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	4603      	mov	r3, r0
 800c490:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c492:	4b0b      	ldr	r3, [pc, #44]	; (800c4c0 <SD_CheckStatus+0x38>)
 800c494:	2201      	movs	r2, #1
 800c496:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c498:	f7ff ff88 	bl	800c3ac <BSP_SD_GetCardState>
 800c49c:	4603      	mov	r3, r0
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d107      	bne.n	800c4b2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c4a2:	4b07      	ldr	r3, [pc, #28]	; (800c4c0 <SD_CheckStatus+0x38>)
 800c4a4:	781b      	ldrb	r3, [r3, #0]
 800c4a6:	b2db      	uxtb	r3, r3
 800c4a8:	f023 0301 	bic.w	r3, r3, #1
 800c4ac:	b2da      	uxtb	r2, r3
 800c4ae:	4b04      	ldr	r3, [pc, #16]	; (800c4c0 <SD_CheckStatus+0x38>)
 800c4b0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c4b2:	4b03      	ldr	r3, [pc, #12]	; (800c4c0 <SD_CheckStatus+0x38>)
 800c4b4:	781b      	ldrb	r3, [r3, #0]
 800c4b6:	b2db      	uxtb	r3, r3
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3708      	adds	r7, #8
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}
 800c4c0:	20000021 	.word	0x20000021

0800c4c4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c4c4:	b590      	push	{r4, r7, lr}
 800c4c6:	b087      	sub	sp, #28
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800c4ce:	4b20      	ldr	r3, [pc, #128]	; (800c550 <SD_initialize+0x8c>)
 800c4d0:	2201      	movs	r2, #1
 800c4d2:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800c4d4:	f000 f9da 	bl	800c88c <osKernelRunning>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d030      	beq.n	800c540 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800c4de:	f7ff ff0b 	bl	800c2f8 <BSP_SD_Init>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d107      	bne.n	800c4f8 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800c4e8:	79fb      	ldrb	r3, [r7, #7]
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7ff ffcc 	bl	800c488 <SD_CheckStatus>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	461a      	mov	r2, r3
 800c4f4:	4b16      	ldr	r3, [pc, #88]	; (800c550 <SD_initialize+0x8c>)
 800c4f6:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800c4f8:	4b15      	ldr	r3, [pc, #84]	; (800c550 <SD_initialize+0x8c>)
 800c4fa:	781b      	ldrb	r3, [r3, #0]
 800c4fc:	b2db      	uxtb	r3, r3
 800c4fe:	2b01      	cmp	r3, #1
 800c500:	d01e      	beq.n	800c540 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800c502:	4b14      	ldr	r3, [pc, #80]	; (800c554 <SD_initialize+0x90>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d10e      	bne.n	800c528 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800c50a:	4b13      	ldr	r3, [pc, #76]	; (800c558 <SD_initialize+0x94>)
 800c50c:	f107 0408 	add.w	r4, r7, #8
 800c510:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c512:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800c516:	f107 0308 	add.w	r3, r7, #8
 800c51a:	2100      	movs	r1, #0
 800c51c:	4618      	mov	r0, r3
 800c51e:	f000 fa31 	bl	800c984 <osMessageCreate>
 800c522:	4603      	mov	r3, r0
 800c524:	4a0b      	ldr	r2, [pc, #44]	; (800c554 <SD_initialize+0x90>)
 800c526:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800c528:	4b0a      	ldr	r3, [pc, #40]	; (800c554 <SD_initialize+0x90>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d107      	bne.n	800c540 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800c530:	4b07      	ldr	r3, [pc, #28]	; (800c550 <SD_initialize+0x8c>)
 800c532:	781b      	ldrb	r3, [r3, #0]
 800c534:	b2db      	uxtb	r3, r3
 800c536:	f043 0301 	orr.w	r3, r3, #1
 800c53a:	b2da      	uxtb	r2, r3
 800c53c:	4b04      	ldr	r3, [pc, #16]	; (800c550 <SD_initialize+0x8c>)
 800c53e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800c540:	4b03      	ldr	r3, [pc, #12]	; (800c550 <SD_initialize+0x8c>)
 800c542:	781b      	ldrb	r3, [r3, #0]
 800c544:	b2db      	uxtb	r3, r3
}
 800c546:	4618      	mov	r0, r3
 800c548:	371c      	adds	r7, #28
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd90      	pop	{r4, r7, pc}
 800c54e:	bf00      	nop
 800c550:	20000021 	.word	0x20000021
 800c554:	20000b7c 	.word	0x20000b7c
 800c558:	080278b4 	.word	0x080278b4

0800c55c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b082      	sub	sp, #8
 800c560:	af00      	add	r7, sp, #0
 800c562:	4603      	mov	r3, r0
 800c564:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c566:	79fb      	ldrb	r3, [r7, #7]
 800c568:	4618      	mov	r0, r3
 800c56a:	f7ff ff8d 	bl	800c488 <SD_CheckStatus>
 800c56e:	4603      	mov	r3, r0
}
 800c570:	4618      	mov	r0, r3
 800c572:	3708      	adds	r7, #8
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}

0800c578 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b08a      	sub	sp, #40	; 0x28
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	60b9      	str	r1, [r7, #8]
 800c580:	607a      	str	r2, [r7, #4]
 800c582:	603b      	str	r3, [r7, #0]
 800c584:	4603      	mov	r3, r0
 800c586:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c588:	2301      	movs	r3, #1
 800c58a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c58e:	f247 5030 	movw	r0, #30000	; 0x7530
 800c592:	f7ff ff5b 	bl	800c44c <SD_CheckStatusWithTimeout>
 800c596:	4603      	mov	r3, r0
 800c598:	2b00      	cmp	r3, #0
 800c59a:	da02      	bge.n	800c5a2 <SD_read+0x2a>
  {
    return res;
 800c59c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5a0:	e032      	b.n	800c608 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800c5a2:	683a      	ldr	r2, [r7, #0]
 800c5a4:	6879      	ldr	r1, [r7, #4]
 800c5a6:	68b8      	ldr	r0, [r7, #8]
 800c5a8:	f7ff fecc 	bl	800c344 <BSP_SD_ReadBlocks_DMA>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800c5b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d124      	bne.n	800c604 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800c5ba:	4b15      	ldr	r3, [pc, #84]	; (800c610 <SD_read+0x98>)
 800c5bc:	6819      	ldr	r1, [r3, #0]
 800c5be:	f107 0314 	add.w	r3, r7, #20
 800c5c2:	f247 5230 	movw	r2, #30000	; 0x7530
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f000 fa44 	bl	800ca54 <osMessageGet>

    if (event.status == osEventMessage)
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	2b10      	cmp	r3, #16
 800c5d0:	d118      	bne.n	800c604 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800c5d2:	69bb      	ldr	r3, [r7, #24]
 800c5d4:	2b01      	cmp	r3, #1
 800c5d6:	d115      	bne.n	800c604 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800c5d8:	f000 f964 	bl	800c8a4 <osKernelSysTick>
 800c5dc:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800c5de:	e008      	b.n	800c5f2 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c5e0:	f7ff fee4 	bl	800c3ac <BSP_SD_GetCardState>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d103      	bne.n	800c5f2 <SD_read+0x7a>
              {
                res = RES_OK;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800c5f0:	e008      	b.n	800c604 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800c5f2:	f000 f957 	bl	800c8a4 <osKernelSysTick>
 800c5f6:	4602      	mov	r2, r0
 800c5f8:	6a3b      	ldr	r3, [r7, #32]
 800c5fa:	1ad3      	subs	r3, r2, r3
 800c5fc:	f247 522f 	movw	r2, #29999	; 0x752f
 800c600:	4293      	cmp	r3, r2
 800c602:	d9ed      	bls.n	800c5e0 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800c604:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3728      	adds	r7, #40	; 0x28
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}
 800c610:	20000b7c 	.word	0x20000b7c

0800c614 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b08a      	sub	sp, #40	; 0x28
 800c618:	af00      	add	r7, sp, #0
 800c61a:	60b9      	str	r1, [r7, #8]
 800c61c:	607a      	str	r2, [r7, #4]
 800c61e:	603b      	str	r3, [r7, #0]
 800c620:	4603      	mov	r3, r0
 800c622:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c624:	2301      	movs	r3, #1
 800c626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c62a:	f247 5030 	movw	r0, #30000	; 0x7530
 800c62e:	f7ff ff0d 	bl	800c44c <SD_CheckStatusWithTimeout>
 800c632:	4603      	mov	r3, r0
 800c634:	2b00      	cmp	r3, #0
 800c636:	da02      	bge.n	800c63e <SD_write+0x2a>
  {
    return res;
 800c638:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c63c:	e02e      	b.n	800c69c <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800c63e:	683a      	ldr	r2, [r7, #0]
 800c640:	6879      	ldr	r1, [r7, #4]
 800c642:	68b8      	ldr	r0, [r7, #8]
 800c644:	f7ff fe98 	bl	800c378 <BSP_SD_WriteBlocks_DMA>
 800c648:	4603      	mov	r3, r0
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d124      	bne.n	800c698 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800c64e:	4b15      	ldr	r3, [pc, #84]	; (800c6a4 <SD_write+0x90>)
 800c650:	6819      	ldr	r1, [r3, #0]
 800c652:	f107 0314 	add.w	r3, r7, #20
 800c656:	f247 5230 	movw	r2, #30000	; 0x7530
 800c65a:	4618      	mov	r0, r3
 800c65c:	f000 f9fa 	bl	800ca54 <osMessageGet>

    if (event.status == osEventMessage)
 800c660:	697b      	ldr	r3, [r7, #20]
 800c662:	2b10      	cmp	r3, #16
 800c664:	d118      	bne.n	800c698 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800c666:	69bb      	ldr	r3, [r7, #24]
 800c668:	2b02      	cmp	r3, #2
 800c66a:	d115      	bne.n	800c698 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800c66c:	f000 f91a 	bl	800c8a4 <osKernelSysTick>
 800c670:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800c672:	e008      	b.n	800c686 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c674:	f7ff fe9a 	bl	800c3ac <BSP_SD_GetCardState>
 800c678:	4603      	mov	r3, r0
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d103      	bne.n	800c686 <SD_write+0x72>
          {
            res = RES_OK;
 800c67e:	2300      	movs	r3, #0
 800c680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c684:	e008      	b.n	800c698 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800c686:	f000 f90d 	bl	800c8a4 <osKernelSysTick>
 800c68a:	4602      	mov	r2, r0
 800c68c:	6a3b      	ldr	r3, [r7, #32]
 800c68e:	1ad3      	subs	r3, r2, r3
 800c690:	f247 522f 	movw	r2, #29999	; 0x752f
 800c694:	4293      	cmp	r3, r2
 800c696:	d9ed      	bls.n	800c674 <SD_write+0x60>
    }

  }
#endif

  return res;
 800c698:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	3728      	adds	r7, #40	; 0x28
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}
 800c6a4:	20000b7c 	.word	0x20000b7c

0800c6a8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b08c      	sub	sp, #48	; 0x30
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	603a      	str	r2, [r7, #0]
 800c6b2:	71fb      	strb	r3, [r7, #7]
 800c6b4:	460b      	mov	r3, r1
 800c6b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c6be:	4b25      	ldr	r3, [pc, #148]	; (800c754 <SD_ioctl+0xac>)
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	b2db      	uxtb	r3, r3
 800c6c4:	f003 0301 	and.w	r3, r3, #1
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d001      	beq.n	800c6d0 <SD_ioctl+0x28>
 800c6cc:	2303      	movs	r3, #3
 800c6ce:	e03c      	b.n	800c74a <SD_ioctl+0xa2>

  switch (cmd)
 800c6d0:	79bb      	ldrb	r3, [r7, #6]
 800c6d2:	2b03      	cmp	r3, #3
 800c6d4:	d834      	bhi.n	800c740 <SD_ioctl+0x98>
 800c6d6:	a201      	add	r2, pc, #4	; (adr r2, 800c6dc <SD_ioctl+0x34>)
 800c6d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6dc:	0800c6ed 	.word	0x0800c6ed
 800c6e0:	0800c6f5 	.word	0x0800c6f5
 800c6e4:	0800c70d 	.word	0x0800c70d
 800c6e8:	0800c727 	.word	0x0800c727
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c6f2:	e028      	b.n	800c746 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c6f4:	f107 030c 	add.w	r3, r7, #12
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f7ff fe67 	bl	800c3cc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c6fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c704:	2300      	movs	r3, #0
 800c706:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c70a:	e01c      	b.n	800c746 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c70c:	f107 030c 	add.w	r3, r7, #12
 800c710:	4618      	mov	r0, r3
 800c712:	f7ff fe5b 	bl	800c3cc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c718:	b29a      	uxth	r2, r3
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c71e:	2300      	movs	r3, #0
 800c720:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c724:	e00f      	b.n	800c746 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c726:	f107 030c 	add.w	r3, r7, #12
 800c72a:	4618      	mov	r0, r3
 800c72c:	f7ff fe4e 	bl	800c3cc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c732:	0a5a      	lsrs	r2, r3, #9
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c738:	2300      	movs	r3, #0
 800c73a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c73e:	e002      	b.n	800c746 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c740:	2304      	movs	r3, #4
 800c742:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c746:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3730      	adds	r7, #48	; 0x30
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}
 800c752:	bf00      	nop
 800c754:	20000021 	.word	0x20000021

0800c758 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800c75c:	4b04      	ldr	r3, [pc, #16]	; (800c770 <BSP_SD_ReadCpltCallback+0x18>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	2200      	movs	r2, #0
 800c762:	2101      	movs	r1, #1
 800c764:	4618      	mov	r0, r3
 800c766:	f000 f935 	bl	800c9d4 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800c76a:	bf00      	nop
 800c76c:	bd80      	pop	{r7, pc}
 800c76e:	bf00      	nop
 800c770:	20000b7c 	.word	0x20000b7c

0800c774 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c774:	b480      	push	{r7}
 800c776:	b087      	sub	sp, #28
 800c778:	af00      	add	r7, sp, #0
 800c77a:	60f8      	str	r0, [r7, #12]
 800c77c:	60b9      	str	r1, [r7, #8]
 800c77e:	4613      	mov	r3, r2
 800c780:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c782:	2301      	movs	r3, #1
 800c784:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c786:	2300      	movs	r3, #0
 800c788:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c78a:	4b1f      	ldr	r3, [pc, #124]	; (800c808 <FATFS_LinkDriverEx+0x94>)
 800c78c:	7a5b      	ldrb	r3, [r3, #9]
 800c78e:	b2db      	uxtb	r3, r3
 800c790:	2b00      	cmp	r3, #0
 800c792:	d131      	bne.n	800c7f8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c794:	4b1c      	ldr	r3, [pc, #112]	; (800c808 <FATFS_LinkDriverEx+0x94>)
 800c796:	7a5b      	ldrb	r3, [r3, #9]
 800c798:	b2db      	uxtb	r3, r3
 800c79a:	461a      	mov	r2, r3
 800c79c:	4b1a      	ldr	r3, [pc, #104]	; (800c808 <FATFS_LinkDriverEx+0x94>)
 800c79e:	2100      	movs	r1, #0
 800c7a0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c7a2:	4b19      	ldr	r3, [pc, #100]	; (800c808 <FATFS_LinkDriverEx+0x94>)
 800c7a4:	7a5b      	ldrb	r3, [r3, #9]
 800c7a6:	b2db      	uxtb	r3, r3
 800c7a8:	4a17      	ldr	r2, [pc, #92]	; (800c808 <FATFS_LinkDriverEx+0x94>)
 800c7aa:	009b      	lsls	r3, r3, #2
 800c7ac:	4413      	add	r3, r2
 800c7ae:	68fa      	ldr	r2, [r7, #12]
 800c7b0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c7b2:	4b15      	ldr	r3, [pc, #84]	; (800c808 <FATFS_LinkDriverEx+0x94>)
 800c7b4:	7a5b      	ldrb	r3, [r3, #9]
 800c7b6:	b2db      	uxtb	r3, r3
 800c7b8:	461a      	mov	r2, r3
 800c7ba:	4b13      	ldr	r3, [pc, #76]	; (800c808 <FATFS_LinkDriverEx+0x94>)
 800c7bc:	4413      	add	r3, r2
 800c7be:	79fa      	ldrb	r2, [r7, #7]
 800c7c0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c7c2:	4b11      	ldr	r3, [pc, #68]	; (800c808 <FATFS_LinkDriverEx+0x94>)
 800c7c4:	7a5b      	ldrb	r3, [r3, #9]
 800c7c6:	b2db      	uxtb	r3, r3
 800c7c8:	1c5a      	adds	r2, r3, #1
 800c7ca:	b2d1      	uxtb	r1, r2
 800c7cc:	4a0e      	ldr	r2, [pc, #56]	; (800c808 <FATFS_LinkDriverEx+0x94>)
 800c7ce:	7251      	strb	r1, [r2, #9]
 800c7d0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c7d2:	7dbb      	ldrb	r3, [r7, #22]
 800c7d4:	3330      	adds	r3, #48	; 0x30
 800c7d6:	b2da      	uxtb	r2, r3
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	3301      	adds	r3, #1
 800c7e0:	223a      	movs	r2, #58	; 0x3a
 800c7e2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	3302      	adds	r3, #2
 800c7e8:	222f      	movs	r2, #47	; 0x2f
 800c7ea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	3303      	adds	r3, #3
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c7f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	371c      	adds	r7, #28
 800c7fe:	46bd      	mov	sp, r7
 800c800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c804:	4770      	bx	lr
 800c806:	bf00      	nop
 800c808:	20000b80 	.word	0x20000b80

0800c80c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b082      	sub	sp, #8
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
 800c814:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c816:	2200      	movs	r2, #0
 800c818:	6839      	ldr	r1, [r7, #0]
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f7ff ffaa 	bl	800c774 <FATFS_LinkDriverEx>
 800c820:	4603      	mov	r3, r0
}
 800c822:	4618      	mov	r0, r3
 800c824:	3708      	adds	r7, #8
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}

0800c82a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c82a:	b480      	push	{r7}
 800c82c:	b085      	sub	sp, #20
 800c82e:	af00      	add	r7, sp, #0
 800c830:	4603      	mov	r3, r0
 800c832:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c834:	2300      	movs	r3, #0
 800c836:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c838:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c83c:	2b84      	cmp	r3, #132	; 0x84
 800c83e:	d005      	beq.n	800c84c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c840:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	4413      	add	r3, r2
 800c848:	3303      	adds	r3, #3
 800c84a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c84c:	68fb      	ldr	r3, [r7, #12]
}
 800c84e:	4618      	mov	r0, r3
 800c850:	3714      	adds	r7, #20
 800c852:	46bd      	mov	sp, r7
 800c854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c858:	4770      	bx	lr

0800c85a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c85a:	b480      	push	{r7}
 800c85c:	b083      	sub	sp, #12
 800c85e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c860:	f3ef 8305 	mrs	r3, IPSR
 800c864:	607b      	str	r3, [r7, #4]
  return(result);
 800c866:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c868:	2b00      	cmp	r3, #0
 800c86a:	bf14      	ite	ne
 800c86c:	2301      	movne	r3, #1
 800c86e:	2300      	moveq	r3, #0
 800c870:	b2db      	uxtb	r3, r3
}
 800c872:	4618      	mov	r0, r3
 800c874:	370c      	adds	r7, #12
 800c876:	46bd      	mov	sp, r7
 800c878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87c:	4770      	bx	lr

0800c87e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c87e:	b580      	push	{r7, lr}
 800c880:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c882:	f001 fb1d 	bl	800dec0 <vTaskStartScheduler>
  
  return osOK;
 800c886:	2300      	movs	r3, #0
}
 800c888:	4618      	mov	r0, r3
 800c88a:	bd80      	pop	{r7, pc}

0800c88c <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800c890:	f001 ff70 	bl	800e774 <xTaskGetSchedulerState>
 800c894:	4603      	mov	r3, r0
 800c896:	2b01      	cmp	r3, #1
 800c898:	d101      	bne.n	800c89e <osKernelRunning+0x12>
    return 0;
 800c89a:	2300      	movs	r3, #0
 800c89c:	e000      	b.n	800c8a0 <osKernelRunning+0x14>
  else
    return 1;
 800c89e:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	bd80      	pop	{r7, pc}

0800c8a4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800c8a8:	f7ff ffd7 	bl	800c85a <inHandlerMode>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d003      	beq.n	800c8ba <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800c8b2:	f001 fc25 	bl	800e100 <xTaskGetTickCountFromISR>
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	e002      	b.n	800c8c0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800c8ba:	f001 fc11 	bl	800e0e0 <xTaskGetTickCount>
 800c8be:	4603      	mov	r3, r0
  }
}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	bd80      	pop	{r7, pc}

0800c8c4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c8c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8c6:	b089      	sub	sp, #36	; 0x24
 800c8c8:	af04      	add	r7, sp, #16
 800c8ca:	6078      	str	r0, [r7, #4]
 800c8cc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	695b      	ldr	r3, [r3, #20]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d020      	beq.n	800c918 <osThreadCreate+0x54>
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	699b      	ldr	r3, [r3, #24]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d01c      	beq.n	800c918 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	685c      	ldr	r4, [r3, #4]
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	691e      	ldr	r6, [r3, #16]
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f7ff ff9a 	bl	800c82a <makeFreeRtosPriority>
 800c8f6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	695b      	ldr	r3, [r3, #20]
 800c8fc:	687a      	ldr	r2, [r7, #4]
 800c8fe:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c900:	9202      	str	r2, [sp, #8]
 800c902:	9301      	str	r3, [sp, #4]
 800c904:	9100      	str	r1, [sp, #0]
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	4632      	mov	r2, r6
 800c90a:	4629      	mov	r1, r5
 800c90c:	4620      	mov	r0, r4
 800c90e:	f001 f8fb 	bl	800db08 <xTaskCreateStatic>
 800c912:	4603      	mov	r3, r0
 800c914:	60fb      	str	r3, [r7, #12]
 800c916:	e01c      	b.n	800c952 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	685c      	ldr	r4, [r3, #4]
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c924:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c92c:	4618      	mov	r0, r3
 800c92e:	f7ff ff7c 	bl	800c82a <makeFreeRtosPriority>
 800c932:	4602      	mov	r2, r0
 800c934:	f107 030c 	add.w	r3, r7, #12
 800c938:	9301      	str	r3, [sp, #4]
 800c93a:	9200      	str	r2, [sp, #0]
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	4632      	mov	r2, r6
 800c940:	4629      	mov	r1, r5
 800c942:	4620      	mov	r0, r4
 800c944:	f001 f943 	bl	800dbce <xTaskCreate>
 800c948:	4603      	mov	r3, r0
 800c94a:	2b01      	cmp	r3, #1
 800c94c:	d001      	beq.n	800c952 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c94e:	2300      	movs	r3, #0
 800c950:	e000      	b.n	800c954 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c952:	68fb      	ldr	r3, [r7, #12]
}
 800c954:	4618      	mov	r0, r3
 800c956:	3714      	adds	r7, #20
 800c958:	46bd      	mov	sp, r7
 800c95a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c95c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b084      	sub	sp, #16
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d001      	beq.n	800c972 <osDelay+0x16>
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	e000      	b.n	800c974 <osDelay+0x18>
 800c972:	2301      	movs	r3, #1
 800c974:	4618      	mov	r0, r3
 800c976:	f001 fa6d 	bl	800de54 <vTaskDelay>
  
  return osOK;
 800c97a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3710      	adds	r7, #16
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}

0800c984 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c984:	b590      	push	{r4, r7, lr}
 800c986:	b085      	sub	sp, #20
 800c988:	af02      	add	r7, sp, #8
 800c98a:	6078      	str	r0, [r7, #4]
 800c98c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	689b      	ldr	r3, [r3, #8]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d011      	beq.n	800c9ba <osMessageCreate+0x36>
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	68db      	ldr	r3, [r3, #12]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d00d      	beq.n	800c9ba <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6818      	ldr	r0, [r3, #0]
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	6859      	ldr	r1, [r3, #4]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	689a      	ldr	r2, [r3, #8]
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	68db      	ldr	r3, [r3, #12]
 800c9ae:	2400      	movs	r4, #0
 800c9b0:	9400      	str	r4, [sp, #0]
 800c9b2:	f000 f9e1 	bl	800cd78 <xQueueGenericCreateStatic>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	e008      	b.n	800c9cc <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6818      	ldr	r0, [r3, #0]
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	685b      	ldr	r3, [r3, #4]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	4619      	mov	r1, r3
 800c9c6:	f000 fa59 	bl	800ce7c <xQueueGenericCreate>
 800c9ca:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	370c      	adds	r7, #12
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd90      	pop	{r4, r7, pc}

0800c9d4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b086      	sub	sp, #24
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	60f8      	str	r0, [r7, #12]
 800c9dc:	60b9      	str	r1, [r7, #8]
 800c9de:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d101      	bne.n	800c9f2 <osMessagePut+0x1e>
    ticks = 1;
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800c9f2:	f7ff ff32 	bl	800c85a <inHandlerMode>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d018      	beq.n	800ca2e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800c9fc:	f107 0210 	add.w	r2, r7, #16
 800ca00:	f107 0108 	add.w	r1, r7, #8
 800ca04:	2300      	movs	r3, #0
 800ca06:	68f8      	ldr	r0, [r7, #12]
 800ca08:	f000 fba0 	bl	800d14c <xQueueGenericSendFromISR>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	2b01      	cmp	r3, #1
 800ca10:	d001      	beq.n	800ca16 <osMessagePut+0x42>
      return osErrorOS;
 800ca12:	23ff      	movs	r3, #255	; 0xff
 800ca14:	e018      	b.n	800ca48 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d014      	beq.n	800ca46 <osMessagePut+0x72>
 800ca1c:	4b0c      	ldr	r3, [pc, #48]	; (800ca50 <osMessagePut+0x7c>)
 800ca1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca22:	601a      	str	r2, [r3, #0]
 800ca24:	f3bf 8f4f 	dsb	sy
 800ca28:	f3bf 8f6f 	isb	sy
 800ca2c:	e00b      	b.n	800ca46 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800ca2e:	f107 0108 	add.w	r1, r7, #8
 800ca32:	2300      	movs	r3, #0
 800ca34:	697a      	ldr	r2, [r7, #20]
 800ca36:	68f8      	ldr	r0, [r7, #12]
 800ca38:	f000 fa82 	bl	800cf40 <xQueueGenericSend>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	2b01      	cmp	r3, #1
 800ca40:	d001      	beq.n	800ca46 <osMessagePut+0x72>
      return osErrorOS;
 800ca42:	23ff      	movs	r3, #255	; 0xff
 800ca44:	e000      	b.n	800ca48 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800ca46:	2300      	movs	r3, #0
}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	3718      	adds	r7, #24
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}
 800ca50:	e000ed04 	.word	0xe000ed04

0800ca54 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800ca54:	b590      	push	{r4, r7, lr}
 800ca56:	b08b      	sub	sp, #44	; 0x2c
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	60f8      	str	r0, [r7, #12]
 800ca5c:	60b9      	str	r1, [r7, #8]
 800ca5e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800ca64:	2300      	movs	r3, #0
 800ca66:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d10a      	bne.n	800ca84 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800ca6e:	2380      	movs	r3, #128	; 0x80
 800ca70:	617b      	str	r3, [r7, #20]
    return event;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	461c      	mov	r4, r3
 800ca76:	f107 0314 	add.w	r3, r7, #20
 800ca7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ca7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ca82:	e054      	b.n	800cb2e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800ca84:	2300      	movs	r3, #0
 800ca86:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800ca88:	2300      	movs	r3, #0
 800ca8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca92:	d103      	bne.n	800ca9c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800ca94:	f04f 33ff 	mov.w	r3, #4294967295
 800ca98:	627b      	str	r3, [r7, #36]	; 0x24
 800ca9a:	e009      	b.n	800cab0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d006      	beq.n	800cab0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800caa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d101      	bne.n	800cab0 <osMessageGet+0x5c>
      ticks = 1;
 800caac:	2301      	movs	r3, #1
 800caae:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800cab0:	f7ff fed3 	bl	800c85a <inHandlerMode>
 800cab4:	4603      	mov	r3, r0
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d01c      	beq.n	800caf4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800caba:	f107 0220 	add.w	r2, r7, #32
 800cabe:	f107 0314 	add.w	r3, r7, #20
 800cac2:	3304      	adds	r3, #4
 800cac4:	4619      	mov	r1, r3
 800cac6:	68b8      	ldr	r0, [r7, #8]
 800cac8:	f000 fe70 	bl	800d7ac <xQueueReceiveFromISR>
 800cacc:	4603      	mov	r3, r0
 800cace:	2b01      	cmp	r3, #1
 800cad0:	d102      	bne.n	800cad8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800cad2:	2310      	movs	r3, #16
 800cad4:	617b      	str	r3, [r7, #20]
 800cad6:	e001      	b.n	800cadc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800cad8:	2300      	movs	r3, #0
 800cada:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cadc:	6a3b      	ldr	r3, [r7, #32]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d01d      	beq.n	800cb1e <osMessageGet+0xca>
 800cae2:	4b15      	ldr	r3, [pc, #84]	; (800cb38 <osMessageGet+0xe4>)
 800cae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cae8:	601a      	str	r2, [r3, #0]
 800caea:	f3bf 8f4f 	dsb	sy
 800caee:	f3bf 8f6f 	isb	sy
 800caf2:	e014      	b.n	800cb1e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800caf4:	f107 0314 	add.w	r3, r7, #20
 800caf8:	3304      	adds	r3, #4
 800cafa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cafc:	4619      	mov	r1, r3
 800cafe:	68b8      	ldr	r0, [r7, #8]
 800cb00:	f000 fc5a 	bl	800d3b8 <xQueueReceive>
 800cb04:	4603      	mov	r3, r0
 800cb06:	2b01      	cmp	r3, #1
 800cb08:	d102      	bne.n	800cb10 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800cb0a:	2310      	movs	r3, #16
 800cb0c:	617b      	str	r3, [r7, #20]
 800cb0e:	e006      	b.n	800cb1e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800cb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d101      	bne.n	800cb1a <osMessageGet+0xc6>
 800cb16:	2300      	movs	r3, #0
 800cb18:	e000      	b.n	800cb1c <osMessageGet+0xc8>
 800cb1a:	2340      	movs	r3, #64	; 0x40
 800cb1c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	461c      	mov	r4, r3
 800cb22:	f107 0314 	add.w	r3, r7, #20
 800cb26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cb2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800cb2e:	68f8      	ldr	r0, [r7, #12]
 800cb30:	372c      	adds	r7, #44	; 0x2c
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd90      	pop	{r4, r7, pc}
 800cb36:	bf00      	nop
 800cb38:	e000ed04 	.word	0xe000ed04

0800cb3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cb3c:	b480      	push	{r7}
 800cb3e:	b083      	sub	sp, #12
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f103 0208 	add.w	r2, r3, #8
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f04f 32ff 	mov.w	r2, #4294967295
 800cb54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f103 0208 	add.w	r2, r3, #8
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f103 0208 	add.w	r2, r3, #8
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cb70:	bf00      	nop
 800cb72:	370c      	adds	r7, #12
 800cb74:	46bd      	mov	sp, r7
 800cb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7a:	4770      	bx	lr

0800cb7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b083      	sub	sp, #12
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2200      	movs	r2, #0
 800cb88:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cb8a:	bf00      	nop
 800cb8c:	370c      	adds	r7, #12
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb94:	4770      	bx	lr

0800cb96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cb96:	b480      	push	{r7}
 800cb98:	b085      	sub	sp, #20
 800cb9a:	af00      	add	r7, sp, #0
 800cb9c:	6078      	str	r0, [r7, #4]
 800cb9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	685b      	ldr	r3, [r3, #4]
 800cba4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	68fa      	ldr	r2, [r7, #12]
 800cbaa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	689a      	ldr	r2, [r3, #8]
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	689b      	ldr	r3, [r3, #8]
 800cbb8:	683a      	ldr	r2, [r7, #0]
 800cbba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	683a      	ldr	r2, [r7, #0]
 800cbc0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	687a      	ldr	r2, [r7, #4]
 800cbc6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	1c5a      	adds	r2, r3, #1
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	601a      	str	r2, [r3, #0]
}
 800cbd2:	bf00      	nop
 800cbd4:	3714      	adds	r7, #20
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbdc:	4770      	bx	lr

0800cbde <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cbde:	b480      	push	{r7}
 800cbe0:	b085      	sub	sp, #20
 800cbe2:	af00      	add	r7, sp, #0
 800cbe4:	6078      	str	r0, [r7, #4]
 800cbe6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbf4:	d103      	bne.n	800cbfe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	691b      	ldr	r3, [r3, #16]
 800cbfa:	60fb      	str	r3, [r7, #12]
 800cbfc:	e00c      	b.n	800cc18 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	3308      	adds	r3, #8
 800cc02:	60fb      	str	r3, [r7, #12]
 800cc04:	e002      	b.n	800cc0c <vListInsert+0x2e>
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	685b      	ldr	r3, [r3, #4]
 800cc0a:	60fb      	str	r3, [r7, #12]
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	685b      	ldr	r3, [r3, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	68ba      	ldr	r2, [r7, #8]
 800cc14:	429a      	cmp	r2, r3
 800cc16:	d2f6      	bcs.n	800cc06 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	685a      	ldr	r2, [r3, #4]
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	685b      	ldr	r3, [r3, #4]
 800cc24:	683a      	ldr	r2, [r7, #0]
 800cc26:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	68fa      	ldr	r2, [r7, #12]
 800cc2c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	683a      	ldr	r2, [r7, #0]
 800cc32:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	687a      	ldr	r2, [r7, #4]
 800cc38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	1c5a      	adds	r2, r3, #1
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	601a      	str	r2, [r3, #0]
}
 800cc44:	bf00      	nop
 800cc46:	3714      	adds	r7, #20
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4e:	4770      	bx	lr

0800cc50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cc50:	b480      	push	{r7}
 800cc52:	b085      	sub	sp, #20
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	691b      	ldr	r3, [r3, #16]
 800cc5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	685b      	ldr	r3, [r3, #4]
 800cc62:	687a      	ldr	r2, [r7, #4]
 800cc64:	6892      	ldr	r2, [r2, #8]
 800cc66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	689b      	ldr	r3, [r3, #8]
 800cc6c:	687a      	ldr	r2, [r7, #4]
 800cc6e:	6852      	ldr	r2, [r2, #4]
 800cc70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	685b      	ldr	r3, [r3, #4]
 800cc76:	687a      	ldr	r2, [r7, #4]
 800cc78:	429a      	cmp	r2, r3
 800cc7a:	d103      	bne.n	800cc84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	689a      	ldr	r2, [r3, #8]
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2200      	movs	r2, #0
 800cc88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	1e5a      	subs	r2, r3, #1
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	681b      	ldr	r3, [r3, #0]
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3714      	adds	r7, #20
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca2:	4770      	bx	lr

0800cca4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b084      	sub	sp, #16
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d10c      	bne.n	800ccd2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ccb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccbc:	b672      	cpsid	i
 800ccbe:	f383 8811 	msr	BASEPRI, r3
 800ccc2:	f3bf 8f6f 	isb	sy
 800ccc6:	f3bf 8f4f 	dsb	sy
 800ccca:	b662      	cpsie	i
 800cccc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ccce:	bf00      	nop
 800ccd0:	e7fe      	b.n	800ccd0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800ccd2:	f002 f89b 	bl	800ee0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	681a      	ldr	r2, [r3, #0]
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccde:	68f9      	ldr	r1, [r7, #12]
 800cce0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cce2:	fb01 f303 	mul.w	r3, r1, r3
 800cce6:	441a      	add	r2, r3
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	2200      	movs	r2, #0
 800ccf0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	681a      	ldr	r2, [r3, #0]
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	681a      	ldr	r2, [r3, #0]
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd02:	3b01      	subs	r3, #1
 800cd04:	68f9      	ldr	r1, [r7, #12]
 800cd06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cd08:	fb01 f303 	mul.w	r3, r1, r3
 800cd0c:	441a      	add	r2, r3
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	22ff      	movs	r2, #255	; 0xff
 800cd16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	22ff      	movs	r2, #255	; 0xff
 800cd1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d114      	bne.n	800cd52 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	691b      	ldr	r3, [r3, #16]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d01a      	beq.n	800cd66 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	3310      	adds	r3, #16
 800cd34:	4618      	mov	r0, r3
 800cd36:	f001 fb57 	bl	800e3e8 <xTaskRemoveFromEventList>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d012      	beq.n	800cd66 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cd40:	4b0c      	ldr	r3, [pc, #48]	; (800cd74 <xQueueGenericReset+0xd0>)
 800cd42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd46:	601a      	str	r2, [r3, #0]
 800cd48:	f3bf 8f4f 	dsb	sy
 800cd4c:	f3bf 8f6f 	isb	sy
 800cd50:	e009      	b.n	800cd66 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	3310      	adds	r3, #16
 800cd56:	4618      	mov	r0, r3
 800cd58:	f7ff fef0 	bl	800cb3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	3324      	adds	r3, #36	; 0x24
 800cd60:	4618      	mov	r0, r3
 800cd62:	f7ff feeb 	bl	800cb3c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cd66:	f002 f885 	bl	800ee74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cd6a:	2301      	movs	r3, #1
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3710      	adds	r7, #16
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}
 800cd74:	e000ed04 	.word	0xe000ed04

0800cd78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b08e      	sub	sp, #56	; 0x38
 800cd7c:	af02      	add	r7, sp, #8
 800cd7e:	60f8      	str	r0, [r7, #12]
 800cd80:	60b9      	str	r1, [r7, #8]
 800cd82:	607a      	str	r2, [r7, #4]
 800cd84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d10c      	bne.n	800cda6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800cd8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd90:	b672      	cpsid	i
 800cd92:	f383 8811 	msr	BASEPRI, r3
 800cd96:	f3bf 8f6f 	isb	sy
 800cd9a:	f3bf 8f4f 	dsb	sy
 800cd9e:	b662      	cpsie	i
 800cda0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cda2:	bf00      	nop
 800cda4:	e7fe      	b.n	800cda4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d10c      	bne.n	800cdc6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800cdac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb0:	b672      	cpsid	i
 800cdb2:	f383 8811 	msr	BASEPRI, r3
 800cdb6:	f3bf 8f6f 	isb	sy
 800cdba:	f3bf 8f4f 	dsb	sy
 800cdbe:	b662      	cpsie	i
 800cdc0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cdc2:	bf00      	nop
 800cdc4:	e7fe      	b.n	800cdc4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d002      	beq.n	800cdd2 <xQueueGenericCreateStatic+0x5a>
 800cdcc:	68bb      	ldr	r3, [r7, #8]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d001      	beq.n	800cdd6 <xQueueGenericCreateStatic+0x5e>
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	e000      	b.n	800cdd8 <xQueueGenericCreateStatic+0x60>
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d10c      	bne.n	800cdf6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800cddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde0:	b672      	cpsid	i
 800cde2:	f383 8811 	msr	BASEPRI, r3
 800cde6:	f3bf 8f6f 	isb	sy
 800cdea:	f3bf 8f4f 	dsb	sy
 800cdee:	b662      	cpsie	i
 800cdf0:	623b      	str	r3, [r7, #32]
}
 800cdf2:	bf00      	nop
 800cdf4:	e7fe      	b.n	800cdf4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d102      	bne.n	800ce02 <xQueueGenericCreateStatic+0x8a>
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d101      	bne.n	800ce06 <xQueueGenericCreateStatic+0x8e>
 800ce02:	2301      	movs	r3, #1
 800ce04:	e000      	b.n	800ce08 <xQueueGenericCreateStatic+0x90>
 800ce06:	2300      	movs	r3, #0
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d10c      	bne.n	800ce26 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800ce0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce10:	b672      	cpsid	i
 800ce12:	f383 8811 	msr	BASEPRI, r3
 800ce16:	f3bf 8f6f 	isb	sy
 800ce1a:	f3bf 8f4f 	dsb	sy
 800ce1e:	b662      	cpsie	i
 800ce20:	61fb      	str	r3, [r7, #28]
}
 800ce22:	bf00      	nop
 800ce24:	e7fe      	b.n	800ce24 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ce26:	2348      	movs	r3, #72	; 0x48
 800ce28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ce2a:	697b      	ldr	r3, [r7, #20]
 800ce2c:	2b48      	cmp	r3, #72	; 0x48
 800ce2e:	d00c      	beq.n	800ce4a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800ce30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce34:	b672      	cpsid	i
 800ce36:	f383 8811 	msr	BASEPRI, r3
 800ce3a:	f3bf 8f6f 	isb	sy
 800ce3e:	f3bf 8f4f 	dsb	sy
 800ce42:	b662      	cpsie	i
 800ce44:	61bb      	str	r3, [r7, #24]
}
 800ce46:	bf00      	nop
 800ce48:	e7fe      	b.n	800ce48 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ce4a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ce50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d00d      	beq.n	800ce72 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ce56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce58:	2201      	movs	r2, #1
 800ce5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ce5e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ce62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce64:	9300      	str	r3, [sp, #0]
 800ce66:	4613      	mov	r3, r2
 800ce68:	687a      	ldr	r2, [r7, #4]
 800ce6a:	68b9      	ldr	r1, [r7, #8]
 800ce6c:	68f8      	ldr	r0, [r7, #12]
 800ce6e:	f000 f847 	bl	800cf00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ce72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3730      	adds	r7, #48	; 0x30
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b08a      	sub	sp, #40	; 0x28
 800ce80:	af02      	add	r7, sp, #8
 800ce82:	60f8      	str	r0, [r7, #12]
 800ce84:	60b9      	str	r1, [r7, #8]
 800ce86:	4613      	mov	r3, r2
 800ce88:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d10c      	bne.n	800ceaa <xQueueGenericCreate+0x2e>
	__asm volatile
 800ce90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce94:	b672      	cpsid	i
 800ce96:	f383 8811 	msr	BASEPRI, r3
 800ce9a:	f3bf 8f6f 	isb	sy
 800ce9e:	f3bf 8f4f 	dsb	sy
 800cea2:	b662      	cpsie	i
 800cea4:	613b      	str	r3, [r7, #16]
}
 800cea6:	bf00      	nop
 800cea8:	e7fe      	b.n	800cea8 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ceaa:	68bb      	ldr	r3, [r7, #8]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d102      	bne.n	800ceb6 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	61fb      	str	r3, [r7, #28]
 800ceb4:	e004      	b.n	800cec0 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	68ba      	ldr	r2, [r7, #8]
 800ceba:	fb02 f303 	mul.w	r3, r2, r3
 800cebe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cec0:	69fb      	ldr	r3, [r7, #28]
 800cec2:	3348      	adds	r3, #72	; 0x48
 800cec4:	4618      	mov	r0, r3
 800cec6:	f002 f8cd 	bl	800f064 <pvPortMalloc>
 800ceca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cecc:	69bb      	ldr	r3, [r7, #24]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d011      	beq.n	800cef6 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ced2:	69bb      	ldr	r3, [r7, #24]
 800ced4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ced6:	697b      	ldr	r3, [r7, #20]
 800ced8:	3348      	adds	r3, #72	; 0x48
 800ceda:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cedc:	69bb      	ldr	r3, [r7, #24]
 800cede:	2200      	movs	r2, #0
 800cee0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cee4:	79fa      	ldrb	r2, [r7, #7]
 800cee6:	69bb      	ldr	r3, [r7, #24]
 800cee8:	9300      	str	r3, [sp, #0]
 800ceea:	4613      	mov	r3, r2
 800ceec:	697a      	ldr	r2, [r7, #20]
 800ceee:	68b9      	ldr	r1, [r7, #8]
 800cef0:	68f8      	ldr	r0, [r7, #12]
 800cef2:	f000 f805 	bl	800cf00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cef6:	69bb      	ldr	r3, [r7, #24]
	}
 800cef8:	4618      	mov	r0, r3
 800cefa:	3720      	adds	r7, #32
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}

0800cf00 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b084      	sub	sp, #16
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	60f8      	str	r0, [r7, #12]
 800cf08:	60b9      	str	r1, [r7, #8]
 800cf0a:	607a      	str	r2, [r7, #4]
 800cf0c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cf0e:	68bb      	ldr	r3, [r7, #8]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d103      	bne.n	800cf1c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cf14:	69bb      	ldr	r3, [r7, #24]
 800cf16:	69ba      	ldr	r2, [r7, #24]
 800cf18:	601a      	str	r2, [r3, #0]
 800cf1a:	e002      	b.n	800cf22 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cf1c:	69bb      	ldr	r3, [r7, #24]
 800cf1e:	687a      	ldr	r2, [r7, #4]
 800cf20:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cf22:	69bb      	ldr	r3, [r7, #24]
 800cf24:	68fa      	ldr	r2, [r7, #12]
 800cf26:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cf28:	69bb      	ldr	r3, [r7, #24]
 800cf2a:	68ba      	ldr	r2, [r7, #8]
 800cf2c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cf2e:	2101      	movs	r1, #1
 800cf30:	69b8      	ldr	r0, [r7, #24]
 800cf32:	f7ff feb7 	bl	800cca4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cf36:	bf00      	nop
 800cf38:	3710      	adds	r7, #16
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}
	...

0800cf40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b08e      	sub	sp, #56	; 0x38
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	60f8      	str	r0, [r7, #12]
 800cf48:	60b9      	str	r1, [r7, #8]
 800cf4a:	607a      	str	r2, [r7, #4]
 800cf4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cf56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d10c      	bne.n	800cf76 <xQueueGenericSend+0x36>
	__asm volatile
 800cf5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf60:	b672      	cpsid	i
 800cf62:	f383 8811 	msr	BASEPRI, r3
 800cf66:	f3bf 8f6f 	isb	sy
 800cf6a:	f3bf 8f4f 	dsb	sy
 800cf6e:	b662      	cpsie	i
 800cf70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cf72:	bf00      	nop
 800cf74:	e7fe      	b.n	800cf74 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf76:	68bb      	ldr	r3, [r7, #8]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d103      	bne.n	800cf84 <xQueueGenericSend+0x44>
 800cf7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d101      	bne.n	800cf88 <xQueueGenericSend+0x48>
 800cf84:	2301      	movs	r3, #1
 800cf86:	e000      	b.n	800cf8a <xQueueGenericSend+0x4a>
 800cf88:	2300      	movs	r3, #0
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d10c      	bne.n	800cfa8 <xQueueGenericSend+0x68>
	__asm volatile
 800cf8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf92:	b672      	cpsid	i
 800cf94:	f383 8811 	msr	BASEPRI, r3
 800cf98:	f3bf 8f6f 	isb	sy
 800cf9c:	f3bf 8f4f 	dsb	sy
 800cfa0:	b662      	cpsie	i
 800cfa2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cfa4:	bf00      	nop
 800cfa6:	e7fe      	b.n	800cfa6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	2b02      	cmp	r3, #2
 800cfac:	d103      	bne.n	800cfb6 <xQueueGenericSend+0x76>
 800cfae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfb2:	2b01      	cmp	r3, #1
 800cfb4:	d101      	bne.n	800cfba <xQueueGenericSend+0x7a>
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	e000      	b.n	800cfbc <xQueueGenericSend+0x7c>
 800cfba:	2300      	movs	r3, #0
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d10c      	bne.n	800cfda <xQueueGenericSend+0x9a>
	__asm volatile
 800cfc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc4:	b672      	cpsid	i
 800cfc6:	f383 8811 	msr	BASEPRI, r3
 800cfca:	f3bf 8f6f 	isb	sy
 800cfce:	f3bf 8f4f 	dsb	sy
 800cfd2:	b662      	cpsie	i
 800cfd4:	623b      	str	r3, [r7, #32]
}
 800cfd6:	bf00      	nop
 800cfd8:	e7fe      	b.n	800cfd8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cfda:	f001 fbcb 	bl	800e774 <xTaskGetSchedulerState>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d102      	bne.n	800cfea <xQueueGenericSend+0xaa>
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d101      	bne.n	800cfee <xQueueGenericSend+0xae>
 800cfea:	2301      	movs	r3, #1
 800cfec:	e000      	b.n	800cff0 <xQueueGenericSend+0xb0>
 800cfee:	2300      	movs	r3, #0
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d10c      	bne.n	800d00e <xQueueGenericSend+0xce>
	__asm volatile
 800cff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff8:	b672      	cpsid	i
 800cffa:	f383 8811 	msr	BASEPRI, r3
 800cffe:	f3bf 8f6f 	isb	sy
 800d002:	f3bf 8f4f 	dsb	sy
 800d006:	b662      	cpsie	i
 800d008:	61fb      	str	r3, [r7, #28]
}
 800d00a:	bf00      	nop
 800d00c:	e7fe      	b.n	800d00c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d00e:	f001 fefd 	bl	800ee0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d014:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d01a:	429a      	cmp	r2, r3
 800d01c:	d302      	bcc.n	800d024 <xQueueGenericSend+0xe4>
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	2b02      	cmp	r3, #2
 800d022:	d129      	bne.n	800d078 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d024:	683a      	ldr	r2, [r7, #0]
 800d026:	68b9      	ldr	r1, [r7, #8]
 800d028:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d02a:	f000 fc5d 	bl	800d8e8 <prvCopyDataToQueue>
 800d02e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d034:	2b00      	cmp	r3, #0
 800d036:	d010      	beq.n	800d05a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d03a:	3324      	adds	r3, #36	; 0x24
 800d03c:	4618      	mov	r0, r3
 800d03e:	f001 f9d3 	bl	800e3e8 <xTaskRemoveFromEventList>
 800d042:	4603      	mov	r3, r0
 800d044:	2b00      	cmp	r3, #0
 800d046:	d013      	beq.n	800d070 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d048:	4b3f      	ldr	r3, [pc, #252]	; (800d148 <xQueueGenericSend+0x208>)
 800d04a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d04e:	601a      	str	r2, [r3, #0]
 800d050:	f3bf 8f4f 	dsb	sy
 800d054:	f3bf 8f6f 	isb	sy
 800d058:	e00a      	b.n	800d070 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d007      	beq.n	800d070 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d060:	4b39      	ldr	r3, [pc, #228]	; (800d148 <xQueueGenericSend+0x208>)
 800d062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d066:	601a      	str	r2, [r3, #0]
 800d068:	f3bf 8f4f 	dsb	sy
 800d06c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d070:	f001 ff00 	bl	800ee74 <vPortExitCritical>
				return pdPASS;
 800d074:	2301      	movs	r3, #1
 800d076:	e063      	b.n	800d140 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d103      	bne.n	800d086 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d07e:	f001 fef9 	bl	800ee74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d082:	2300      	movs	r3, #0
 800d084:	e05c      	b.n	800d140 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d106      	bne.n	800d09a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d08c:	f107 0314 	add.w	r3, r7, #20
 800d090:	4618      	mov	r0, r3
 800d092:	f001 fa0d 	bl	800e4b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d096:	2301      	movs	r3, #1
 800d098:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d09a:	f001 feeb 	bl	800ee74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d09e:	f000 ff73 	bl	800df88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d0a2:	f001 feb3 	bl	800ee0c <vPortEnterCritical>
 800d0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d0ac:	b25b      	sxtb	r3, r3
 800d0ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0b2:	d103      	bne.n	800d0bc <xQueueGenericSend+0x17c>
 800d0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d0c2:	b25b      	sxtb	r3, r3
 800d0c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0c8:	d103      	bne.n	800d0d2 <xQueueGenericSend+0x192>
 800d0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d0d2:	f001 fecf 	bl	800ee74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d0d6:	1d3a      	adds	r2, r7, #4
 800d0d8:	f107 0314 	add.w	r3, r7, #20
 800d0dc:	4611      	mov	r1, r2
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f001 f9fc 	bl	800e4dc <xTaskCheckForTimeOut>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d124      	bne.n	800d134 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d0ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0ec:	f000 fcf4 	bl	800dad8 <prvIsQueueFull>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d018      	beq.n	800d128 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0f8:	3310      	adds	r3, #16
 800d0fa:	687a      	ldr	r2, [r7, #4]
 800d0fc:	4611      	mov	r1, r2
 800d0fe:	4618      	mov	r0, r3
 800d100:	f001 f94c 	bl	800e39c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d104:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d106:	f000 fc7f 	bl	800da08 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d10a:	f000 ff4b 	bl	800dfa4 <xTaskResumeAll>
 800d10e:	4603      	mov	r3, r0
 800d110:	2b00      	cmp	r3, #0
 800d112:	f47f af7c 	bne.w	800d00e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800d116:	4b0c      	ldr	r3, [pc, #48]	; (800d148 <xQueueGenericSend+0x208>)
 800d118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d11c:	601a      	str	r2, [r3, #0]
 800d11e:	f3bf 8f4f 	dsb	sy
 800d122:	f3bf 8f6f 	isb	sy
 800d126:	e772      	b.n	800d00e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d128:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d12a:	f000 fc6d 	bl	800da08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d12e:	f000 ff39 	bl	800dfa4 <xTaskResumeAll>
 800d132:	e76c      	b.n	800d00e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d134:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d136:	f000 fc67 	bl	800da08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d13a:	f000 ff33 	bl	800dfa4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d13e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d140:	4618      	mov	r0, r3
 800d142:	3738      	adds	r7, #56	; 0x38
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}
 800d148:	e000ed04 	.word	0xe000ed04

0800d14c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b08e      	sub	sp, #56	; 0x38
 800d150:	af00      	add	r7, sp, #0
 800d152:	60f8      	str	r0, [r7, #12]
 800d154:	60b9      	str	r1, [r7, #8]
 800d156:	607a      	str	r2, [r7, #4]
 800d158:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d160:	2b00      	cmp	r3, #0
 800d162:	d10c      	bne.n	800d17e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800d164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d168:	b672      	cpsid	i
 800d16a:	f383 8811 	msr	BASEPRI, r3
 800d16e:	f3bf 8f6f 	isb	sy
 800d172:	f3bf 8f4f 	dsb	sy
 800d176:	b662      	cpsie	i
 800d178:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d17a:	bf00      	nop
 800d17c:	e7fe      	b.n	800d17c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d103      	bne.n	800d18c <xQueueGenericSendFromISR+0x40>
 800d184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d101      	bne.n	800d190 <xQueueGenericSendFromISR+0x44>
 800d18c:	2301      	movs	r3, #1
 800d18e:	e000      	b.n	800d192 <xQueueGenericSendFromISR+0x46>
 800d190:	2300      	movs	r3, #0
 800d192:	2b00      	cmp	r3, #0
 800d194:	d10c      	bne.n	800d1b0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800d196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d19a:	b672      	cpsid	i
 800d19c:	f383 8811 	msr	BASEPRI, r3
 800d1a0:	f3bf 8f6f 	isb	sy
 800d1a4:	f3bf 8f4f 	dsb	sy
 800d1a8:	b662      	cpsie	i
 800d1aa:	623b      	str	r3, [r7, #32]
}
 800d1ac:	bf00      	nop
 800d1ae:	e7fe      	b.n	800d1ae <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	2b02      	cmp	r3, #2
 800d1b4:	d103      	bne.n	800d1be <xQueueGenericSendFromISR+0x72>
 800d1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1ba:	2b01      	cmp	r3, #1
 800d1bc:	d101      	bne.n	800d1c2 <xQueueGenericSendFromISR+0x76>
 800d1be:	2301      	movs	r3, #1
 800d1c0:	e000      	b.n	800d1c4 <xQueueGenericSendFromISR+0x78>
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d10c      	bne.n	800d1e2 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800d1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1cc:	b672      	cpsid	i
 800d1ce:	f383 8811 	msr	BASEPRI, r3
 800d1d2:	f3bf 8f6f 	isb	sy
 800d1d6:	f3bf 8f4f 	dsb	sy
 800d1da:	b662      	cpsie	i
 800d1dc:	61fb      	str	r3, [r7, #28]
}
 800d1de:	bf00      	nop
 800d1e0:	e7fe      	b.n	800d1e0 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d1e2:	f001 fefb 	bl	800efdc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d1e6:	f3ef 8211 	mrs	r2, BASEPRI
 800d1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ee:	b672      	cpsid	i
 800d1f0:	f383 8811 	msr	BASEPRI, r3
 800d1f4:	f3bf 8f6f 	isb	sy
 800d1f8:	f3bf 8f4f 	dsb	sy
 800d1fc:	b662      	cpsie	i
 800d1fe:	61ba      	str	r2, [r7, #24]
 800d200:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d202:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d204:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d208:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d20c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d20e:	429a      	cmp	r2, r3
 800d210:	d302      	bcc.n	800d218 <xQueueGenericSendFromISR+0xcc>
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	2b02      	cmp	r3, #2
 800d216:	d12c      	bne.n	800d272 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d21a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d21e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d222:	683a      	ldr	r2, [r7, #0]
 800d224:	68b9      	ldr	r1, [r7, #8]
 800d226:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d228:	f000 fb5e 	bl	800d8e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d22c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d230:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d234:	d112      	bne.n	800d25c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d016      	beq.n	800d26c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d240:	3324      	adds	r3, #36	; 0x24
 800d242:	4618      	mov	r0, r3
 800d244:	f001 f8d0 	bl	800e3e8 <xTaskRemoveFromEventList>
 800d248:	4603      	mov	r3, r0
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d00e      	beq.n	800d26c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d00b      	beq.n	800d26c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2201      	movs	r2, #1
 800d258:	601a      	str	r2, [r3, #0]
 800d25a:	e007      	b.n	800d26c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d25c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d260:	3301      	adds	r3, #1
 800d262:	b2db      	uxtb	r3, r3
 800d264:	b25a      	sxtb	r2, r3
 800d266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d26c:	2301      	movs	r3, #1
 800d26e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d270:	e001      	b.n	800d276 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d272:	2300      	movs	r3, #0
 800d274:	637b      	str	r3, [r7, #52]	; 0x34
 800d276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d278:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d280:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d284:	4618      	mov	r0, r3
 800d286:	3738      	adds	r7, #56	; 0x38
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}

0800d28c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b08e      	sub	sp, #56	; 0x38
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d10c      	bne.n	800d2ba <xQueueGiveFromISR+0x2e>
	__asm volatile
 800d2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a4:	b672      	cpsid	i
 800d2a6:	f383 8811 	msr	BASEPRI, r3
 800d2aa:	f3bf 8f6f 	isb	sy
 800d2ae:	f3bf 8f4f 	dsb	sy
 800d2b2:	b662      	cpsie	i
 800d2b4:	623b      	str	r3, [r7, #32]
}
 800d2b6:	bf00      	nop
 800d2b8:	e7fe      	b.n	800d2b8 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d00c      	beq.n	800d2dc <xQueueGiveFromISR+0x50>
	__asm volatile
 800d2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c6:	b672      	cpsid	i
 800d2c8:	f383 8811 	msr	BASEPRI, r3
 800d2cc:	f3bf 8f6f 	isb	sy
 800d2d0:	f3bf 8f4f 	dsb	sy
 800d2d4:	b662      	cpsie	i
 800d2d6:	61fb      	str	r3, [r7, #28]
}
 800d2d8:	bf00      	nop
 800d2da:	e7fe      	b.n	800d2da <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d103      	bne.n	800d2ec <xQueueGiveFromISR+0x60>
 800d2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e6:	689b      	ldr	r3, [r3, #8]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d101      	bne.n	800d2f0 <xQueueGiveFromISR+0x64>
 800d2ec:	2301      	movs	r3, #1
 800d2ee:	e000      	b.n	800d2f2 <xQueueGiveFromISR+0x66>
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d10c      	bne.n	800d310 <xQueueGiveFromISR+0x84>
	__asm volatile
 800d2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2fa:	b672      	cpsid	i
 800d2fc:	f383 8811 	msr	BASEPRI, r3
 800d300:	f3bf 8f6f 	isb	sy
 800d304:	f3bf 8f4f 	dsb	sy
 800d308:	b662      	cpsie	i
 800d30a:	61bb      	str	r3, [r7, #24]
}
 800d30c:	bf00      	nop
 800d30e:	e7fe      	b.n	800d30e <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d310:	f001 fe64 	bl	800efdc <vPortValidateInterruptPriority>
	__asm volatile
 800d314:	f3ef 8211 	mrs	r2, BASEPRI
 800d318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d31c:	b672      	cpsid	i
 800d31e:	f383 8811 	msr	BASEPRI, r3
 800d322:	f3bf 8f6f 	isb	sy
 800d326:	f3bf 8f4f 	dsb	sy
 800d32a:	b662      	cpsie	i
 800d32c:	617a      	str	r2, [r7, #20]
 800d32e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d330:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d332:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d338:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d33c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d33e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d340:	429a      	cmp	r2, r3
 800d342:	d22b      	bcs.n	800d39c <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d346:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d34a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d350:	1c5a      	adds	r2, r3, #1
 800d352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d354:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d356:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d35a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d35e:	d112      	bne.n	800d386 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d364:	2b00      	cmp	r3, #0
 800d366:	d016      	beq.n	800d396 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d36a:	3324      	adds	r3, #36	; 0x24
 800d36c:	4618      	mov	r0, r3
 800d36e:	f001 f83b 	bl	800e3e8 <xTaskRemoveFromEventList>
 800d372:	4603      	mov	r3, r0
 800d374:	2b00      	cmp	r3, #0
 800d376:	d00e      	beq.n	800d396 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d00b      	beq.n	800d396 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	2201      	movs	r2, #1
 800d382:	601a      	str	r2, [r3, #0]
 800d384:	e007      	b.n	800d396 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d386:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d38a:	3301      	adds	r3, #1
 800d38c:	b2db      	uxtb	r3, r3
 800d38e:	b25a      	sxtb	r2, r3
 800d390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d392:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d396:	2301      	movs	r3, #1
 800d398:	637b      	str	r3, [r7, #52]	; 0x34
 800d39a:	e001      	b.n	800d3a0 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d39c:	2300      	movs	r3, #0
 800d39e:	637b      	str	r3, [r7, #52]	; 0x34
 800d3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	f383 8811 	msr	BASEPRI, r3
}
 800d3aa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d3ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	3738      	adds	r7, #56	; 0x38
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}
	...

0800d3b8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b08c      	sub	sp, #48	; 0x30
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	60f8      	str	r0, [r7, #12]
 800d3c0:	60b9      	str	r1, [r7, #8]
 800d3c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d10c      	bne.n	800d3ec <xQueueReceive+0x34>
	__asm volatile
 800d3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d6:	b672      	cpsid	i
 800d3d8:	f383 8811 	msr	BASEPRI, r3
 800d3dc:	f3bf 8f6f 	isb	sy
 800d3e0:	f3bf 8f4f 	dsb	sy
 800d3e4:	b662      	cpsie	i
 800d3e6:	623b      	str	r3, [r7, #32]
}
 800d3e8:	bf00      	nop
 800d3ea:	e7fe      	b.n	800d3ea <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d103      	bne.n	800d3fa <xQueueReceive+0x42>
 800d3f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d101      	bne.n	800d3fe <xQueueReceive+0x46>
 800d3fa:	2301      	movs	r3, #1
 800d3fc:	e000      	b.n	800d400 <xQueueReceive+0x48>
 800d3fe:	2300      	movs	r3, #0
 800d400:	2b00      	cmp	r3, #0
 800d402:	d10c      	bne.n	800d41e <xQueueReceive+0x66>
	__asm volatile
 800d404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d408:	b672      	cpsid	i
 800d40a:	f383 8811 	msr	BASEPRI, r3
 800d40e:	f3bf 8f6f 	isb	sy
 800d412:	f3bf 8f4f 	dsb	sy
 800d416:	b662      	cpsie	i
 800d418:	61fb      	str	r3, [r7, #28]
}
 800d41a:	bf00      	nop
 800d41c:	e7fe      	b.n	800d41c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d41e:	f001 f9a9 	bl	800e774 <xTaskGetSchedulerState>
 800d422:	4603      	mov	r3, r0
 800d424:	2b00      	cmp	r3, #0
 800d426:	d102      	bne.n	800d42e <xQueueReceive+0x76>
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d101      	bne.n	800d432 <xQueueReceive+0x7a>
 800d42e:	2301      	movs	r3, #1
 800d430:	e000      	b.n	800d434 <xQueueReceive+0x7c>
 800d432:	2300      	movs	r3, #0
 800d434:	2b00      	cmp	r3, #0
 800d436:	d10c      	bne.n	800d452 <xQueueReceive+0x9a>
	__asm volatile
 800d438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d43c:	b672      	cpsid	i
 800d43e:	f383 8811 	msr	BASEPRI, r3
 800d442:	f3bf 8f6f 	isb	sy
 800d446:	f3bf 8f4f 	dsb	sy
 800d44a:	b662      	cpsie	i
 800d44c:	61bb      	str	r3, [r7, #24]
}
 800d44e:	bf00      	nop
 800d450:	e7fe      	b.n	800d450 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d452:	f001 fcdb 	bl	800ee0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d45a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d01f      	beq.n	800d4a2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d462:	68b9      	ldr	r1, [r7, #8]
 800d464:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d466:	f000 faa9 	bl	800d9bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d46c:	1e5a      	subs	r2, r3, #1
 800d46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d470:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d474:	691b      	ldr	r3, [r3, #16]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d00f      	beq.n	800d49a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d47c:	3310      	adds	r3, #16
 800d47e:	4618      	mov	r0, r3
 800d480:	f000 ffb2 	bl	800e3e8 <xTaskRemoveFromEventList>
 800d484:	4603      	mov	r3, r0
 800d486:	2b00      	cmp	r3, #0
 800d488:	d007      	beq.n	800d49a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d48a:	4b3d      	ldr	r3, [pc, #244]	; (800d580 <xQueueReceive+0x1c8>)
 800d48c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d490:	601a      	str	r2, [r3, #0]
 800d492:	f3bf 8f4f 	dsb	sy
 800d496:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d49a:	f001 fceb 	bl	800ee74 <vPortExitCritical>
				return pdPASS;
 800d49e:	2301      	movs	r3, #1
 800d4a0:	e069      	b.n	800d576 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d103      	bne.n	800d4b0 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d4a8:	f001 fce4 	bl	800ee74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	e062      	b.n	800d576 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d106      	bne.n	800d4c4 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d4b6:	f107 0310 	add.w	r3, r7, #16
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f000 fff8 	bl	800e4b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d4c4:	f001 fcd6 	bl	800ee74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d4c8:	f000 fd5e 	bl	800df88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d4cc:	f001 fc9e 	bl	800ee0c <vPortEnterCritical>
 800d4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d4d6:	b25b      	sxtb	r3, r3
 800d4d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4dc:	d103      	bne.n	800d4e6 <xQueueReceive+0x12e>
 800d4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d4ec:	b25b      	sxtb	r3, r3
 800d4ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4f2:	d103      	bne.n	800d4fc <xQueueReceive+0x144>
 800d4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d4fc:	f001 fcba 	bl	800ee74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d500:	1d3a      	adds	r2, r7, #4
 800d502:	f107 0310 	add.w	r3, r7, #16
 800d506:	4611      	mov	r1, r2
 800d508:	4618      	mov	r0, r3
 800d50a:	f000 ffe7 	bl	800e4dc <xTaskCheckForTimeOut>
 800d50e:	4603      	mov	r3, r0
 800d510:	2b00      	cmp	r3, #0
 800d512:	d123      	bne.n	800d55c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d514:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d516:	f000 fac9 	bl	800daac <prvIsQueueEmpty>
 800d51a:	4603      	mov	r3, r0
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d017      	beq.n	800d550 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d522:	3324      	adds	r3, #36	; 0x24
 800d524:	687a      	ldr	r2, [r7, #4]
 800d526:	4611      	mov	r1, r2
 800d528:	4618      	mov	r0, r3
 800d52a:	f000 ff37 	bl	800e39c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d52e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d530:	f000 fa6a 	bl	800da08 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d534:	f000 fd36 	bl	800dfa4 <xTaskResumeAll>
 800d538:	4603      	mov	r3, r0
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d189      	bne.n	800d452 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800d53e:	4b10      	ldr	r3, [pc, #64]	; (800d580 <xQueueReceive+0x1c8>)
 800d540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d544:	601a      	str	r2, [r3, #0]
 800d546:	f3bf 8f4f 	dsb	sy
 800d54a:	f3bf 8f6f 	isb	sy
 800d54e:	e780      	b.n	800d452 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d552:	f000 fa59 	bl	800da08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d556:	f000 fd25 	bl	800dfa4 <xTaskResumeAll>
 800d55a:	e77a      	b.n	800d452 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d55c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d55e:	f000 fa53 	bl	800da08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d562:	f000 fd1f 	bl	800dfa4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d566:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d568:	f000 faa0 	bl	800daac <prvIsQueueEmpty>
 800d56c:	4603      	mov	r3, r0
 800d56e:	2b00      	cmp	r3, #0
 800d570:	f43f af6f 	beq.w	800d452 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d574:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d576:	4618      	mov	r0, r3
 800d578:	3730      	adds	r7, #48	; 0x30
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}
 800d57e:	bf00      	nop
 800d580:	e000ed04 	.word	0xe000ed04

0800d584 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b08e      	sub	sp, #56	; 0x38
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
 800d58c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d58e:	2300      	movs	r3, #0
 800d590:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d596:	2300      	movs	r3, #0
 800d598:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d10c      	bne.n	800d5ba <xQueueSemaphoreTake+0x36>
	__asm volatile
 800d5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a4:	b672      	cpsid	i
 800d5a6:	f383 8811 	msr	BASEPRI, r3
 800d5aa:	f3bf 8f6f 	isb	sy
 800d5ae:	f3bf 8f4f 	dsb	sy
 800d5b2:	b662      	cpsie	i
 800d5b4:	623b      	str	r3, [r7, #32]
}
 800d5b6:	bf00      	nop
 800d5b8:	e7fe      	b.n	800d5b8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d00c      	beq.n	800d5dc <xQueueSemaphoreTake+0x58>
	__asm volatile
 800d5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5c6:	b672      	cpsid	i
 800d5c8:	f383 8811 	msr	BASEPRI, r3
 800d5cc:	f3bf 8f6f 	isb	sy
 800d5d0:	f3bf 8f4f 	dsb	sy
 800d5d4:	b662      	cpsie	i
 800d5d6:	61fb      	str	r3, [r7, #28]
}
 800d5d8:	bf00      	nop
 800d5da:	e7fe      	b.n	800d5da <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d5dc:	f001 f8ca 	bl	800e774 <xTaskGetSchedulerState>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d102      	bne.n	800d5ec <xQueueSemaphoreTake+0x68>
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d101      	bne.n	800d5f0 <xQueueSemaphoreTake+0x6c>
 800d5ec:	2301      	movs	r3, #1
 800d5ee:	e000      	b.n	800d5f2 <xQueueSemaphoreTake+0x6e>
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d10c      	bne.n	800d610 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800d5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5fa:	b672      	cpsid	i
 800d5fc:	f383 8811 	msr	BASEPRI, r3
 800d600:	f3bf 8f6f 	isb	sy
 800d604:	f3bf 8f4f 	dsb	sy
 800d608:	b662      	cpsie	i
 800d60a:	61bb      	str	r3, [r7, #24]
}
 800d60c:	bf00      	nop
 800d60e:	e7fe      	b.n	800d60e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d610:	f001 fbfc 	bl	800ee0c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d618:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d024      	beq.n	800d66a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d622:	1e5a      	subs	r2, r3, #1
 800d624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d626:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d104      	bne.n	800d63a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d630:	f001 fa66 	bl	800eb00 <pvTaskIncrementMutexHeldCount>
 800d634:	4602      	mov	r2, r0
 800d636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d638:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d63c:	691b      	ldr	r3, [r3, #16]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d00f      	beq.n	800d662 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d644:	3310      	adds	r3, #16
 800d646:	4618      	mov	r0, r3
 800d648:	f000 fece 	bl	800e3e8 <xTaskRemoveFromEventList>
 800d64c:	4603      	mov	r3, r0
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d007      	beq.n	800d662 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d652:	4b55      	ldr	r3, [pc, #340]	; (800d7a8 <xQueueSemaphoreTake+0x224>)
 800d654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d658:	601a      	str	r2, [r3, #0]
 800d65a:	f3bf 8f4f 	dsb	sy
 800d65e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d662:	f001 fc07 	bl	800ee74 <vPortExitCritical>
				return pdPASS;
 800d666:	2301      	movs	r3, #1
 800d668:	e099      	b.n	800d79e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d113      	bne.n	800d698 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d672:	2b00      	cmp	r3, #0
 800d674:	d00c      	beq.n	800d690 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800d676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d67a:	b672      	cpsid	i
 800d67c:	f383 8811 	msr	BASEPRI, r3
 800d680:	f3bf 8f6f 	isb	sy
 800d684:	f3bf 8f4f 	dsb	sy
 800d688:	b662      	cpsie	i
 800d68a:	617b      	str	r3, [r7, #20]
}
 800d68c:	bf00      	nop
 800d68e:	e7fe      	b.n	800d68e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d690:	f001 fbf0 	bl	800ee74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d694:	2300      	movs	r3, #0
 800d696:	e082      	b.n	800d79e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d106      	bne.n	800d6ac <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d69e:	f107 030c 	add.w	r3, r7, #12
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f000 ff04 	bl	800e4b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d6a8:	2301      	movs	r3, #1
 800d6aa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d6ac:	f001 fbe2 	bl	800ee74 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d6b0:	f000 fc6a 	bl	800df88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d6b4:	f001 fbaa 	bl	800ee0c <vPortEnterCritical>
 800d6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d6be:	b25b      	sxtb	r3, r3
 800d6c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6c4:	d103      	bne.n	800d6ce <xQueueSemaphoreTake+0x14a>
 800d6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d6d4:	b25b      	sxtb	r3, r3
 800d6d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6da:	d103      	bne.n	800d6e4 <xQueueSemaphoreTake+0x160>
 800d6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6de:	2200      	movs	r2, #0
 800d6e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d6e4:	f001 fbc6 	bl	800ee74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d6e8:	463a      	mov	r2, r7
 800d6ea:	f107 030c 	add.w	r3, r7, #12
 800d6ee:	4611      	mov	r1, r2
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f000 fef3 	bl	800e4dc <xTaskCheckForTimeOut>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d132      	bne.n	800d762 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d6fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d6fe:	f000 f9d5 	bl	800daac <prvIsQueueEmpty>
 800d702:	4603      	mov	r3, r0
 800d704:	2b00      	cmp	r3, #0
 800d706:	d026      	beq.n	800d756 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d109      	bne.n	800d724 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800d710:	f001 fb7c 	bl	800ee0c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d716:	689b      	ldr	r3, [r3, #8]
 800d718:	4618      	mov	r0, r3
 800d71a:	f001 f849 	bl	800e7b0 <xTaskPriorityInherit>
 800d71e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d720:	f001 fba8 	bl	800ee74 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d726:	3324      	adds	r3, #36	; 0x24
 800d728:	683a      	ldr	r2, [r7, #0]
 800d72a:	4611      	mov	r1, r2
 800d72c:	4618      	mov	r0, r3
 800d72e:	f000 fe35 	bl	800e39c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d732:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d734:	f000 f968 	bl	800da08 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d738:	f000 fc34 	bl	800dfa4 <xTaskResumeAll>
 800d73c:	4603      	mov	r3, r0
 800d73e:	2b00      	cmp	r3, #0
 800d740:	f47f af66 	bne.w	800d610 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800d744:	4b18      	ldr	r3, [pc, #96]	; (800d7a8 <xQueueSemaphoreTake+0x224>)
 800d746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d74a:	601a      	str	r2, [r3, #0]
 800d74c:	f3bf 8f4f 	dsb	sy
 800d750:	f3bf 8f6f 	isb	sy
 800d754:	e75c      	b.n	800d610 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d756:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d758:	f000 f956 	bl	800da08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d75c:	f000 fc22 	bl	800dfa4 <xTaskResumeAll>
 800d760:	e756      	b.n	800d610 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d762:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d764:	f000 f950 	bl	800da08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d768:	f000 fc1c 	bl	800dfa4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d76c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d76e:	f000 f99d 	bl	800daac <prvIsQueueEmpty>
 800d772:	4603      	mov	r3, r0
 800d774:	2b00      	cmp	r3, #0
 800d776:	f43f af4b 	beq.w	800d610 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d00d      	beq.n	800d79c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800d780:	f001 fb44 	bl	800ee0c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d784:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d786:	f000 f897 	bl	800d8b8 <prvGetDisinheritPriorityAfterTimeout>
 800d78a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d78e:	689b      	ldr	r3, [r3, #8]
 800d790:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d792:	4618      	mov	r0, r3
 800d794:	f001 f916 	bl	800e9c4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d798:	f001 fb6c 	bl	800ee74 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d79c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3738      	adds	r7, #56	; 0x38
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}
 800d7a6:	bf00      	nop
 800d7a8:	e000ed04 	.word	0xe000ed04

0800d7ac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b08e      	sub	sp, #56	; 0x38
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	60f8      	str	r0, [r7, #12]
 800d7b4:	60b9      	str	r1, [r7, #8]
 800d7b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d10c      	bne.n	800d7dc <xQueueReceiveFromISR+0x30>
	__asm volatile
 800d7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c6:	b672      	cpsid	i
 800d7c8:	f383 8811 	msr	BASEPRI, r3
 800d7cc:	f3bf 8f6f 	isb	sy
 800d7d0:	f3bf 8f4f 	dsb	sy
 800d7d4:	b662      	cpsie	i
 800d7d6:	623b      	str	r3, [r7, #32]
}
 800d7d8:	bf00      	nop
 800d7da:	e7fe      	b.n	800d7da <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d103      	bne.n	800d7ea <xQueueReceiveFromISR+0x3e>
 800d7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d101      	bne.n	800d7ee <xQueueReceiveFromISR+0x42>
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	e000      	b.n	800d7f0 <xQueueReceiveFromISR+0x44>
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d10c      	bne.n	800d80e <xQueueReceiveFromISR+0x62>
	__asm volatile
 800d7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7f8:	b672      	cpsid	i
 800d7fa:	f383 8811 	msr	BASEPRI, r3
 800d7fe:	f3bf 8f6f 	isb	sy
 800d802:	f3bf 8f4f 	dsb	sy
 800d806:	b662      	cpsie	i
 800d808:	61fb      	str	r3, [r7, #28]
}
 800d80a:	bf00      	nop
 800d80c:	e7fe      	b.n	800d80c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d80e:	f001 fbe5 	bl	800efdc <vPortValidateInterruptPriority>
	__asm volatile
 800d812:	f3ef 8211 	mrs	r2, BASEPRI
 800d816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d81a:	b672      	cpsid	i
 800d81c:	f383 8811 	msr	BASEPRI, r3
 800d820:	f3bf 8f6f 	isb	sy
 800d824:	f3bf 8f4f 	dsb	sy
 800d828:	b662      	cpsie	i
 800d82a:	61ba      	str	r2, [r7, #24]
 800d82c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d82e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d830:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d836:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d02f      	beq.n	800d89e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d840:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d844:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d848:	68b9      	ldr	r1, [r7, #8]
 800d84a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d84c:	f000 f8b6 	bl	800d9bc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d852:	1e5a      	subs	r2, r3, #1
 800d854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d856:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d858:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d85c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d860:	d112      	bne.n	800d888 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d864:	691b      	ldr	r3, [r3, #16]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d016      	beq.n	800d898 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d86c:	3310      	adds	r3, #16
 800d86e:	4618      	mov	r0, r3
 800d870:	f000 fdba 	bl	800e3e8 <xTaskRemoveFromEventList>
 800d874:	4603      	mov	r3, r0
 800d876:	2b00      	cmp	r3, #0
 800d878:	d00e      	beq.n	800d898 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d00b      	beq.n	800d898 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2201      	movs	r2, #1
 800d884:	601a      	str	r2, [r3, #0]
 800d886:	e007      	b.n	800d898 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d88c:	3301      	adds	r3, #1
 800d88e:	b2db      	uxtb	r3, r3
 800d890:	b25a      	sxtb	r2, r3
 800d892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d898:	2301      	movs	r3, #1
 800d89a:	637b      	str	r3, [r7, #52]	; 0x34
 800d89c:	e001      	b.n	800d8a2 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800d89e:	2300      	movs	r3, #0
 800d8a0:	637b      	str	r3, [r7, #52]	; 0x34
 800d8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	f383 8811 	msr	BASEPRI, r3
}
 800d8ac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d8ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	3738      	adds	r7, #56	; 0x38
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}

0800d8b8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d8b8:	b480      	push	{r7}
 800d8ba:	b085      	sub	sp, #20
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d006      	beq.n	800d8d6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	f1c3 0307 	rsb	r3, r3, #7
 800d8d2:	60fb      	str	r3, [r7, #12]
 800d8d4:	e001      	b.n	800d8da <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d8da:	68fb      	ldr	r3, [r7, #12]
	}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	3714      	adds	r7, #20
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e6:	4770      	bx	lr

0800d8e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b086      	sub	sp, #24
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	60f8      	str	r0, [r7, #12]
 800d8f0:	60b9      	str	r1, [r7, #8]
 800d8f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d902:	2b00      	cmp	r3, #0
 800d904:	d10d      	bne.n	800d922 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d14d      	bne.n	800d9aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	689b      	ldr	r3, [r3, #8]
 800d912:	4618      	mov	r0, r3
 800d914:	f000 ffcc 	bl	800e8b0 <xTaskPriorityDisinherit>
 800d918:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	2200      	movs	r2, #0
 800d91e:	609a      	str	r2, [r3, #8]
 800d920:	e043      	b.n	800d9aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d119      	bne.n	800d95c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	6858      	ldr	r0, [r3, #4]
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d930:	461a      	mov	r2, r3
 800d932:	68b9      	ldr	r1, [r7, #8]
 800d934:	f019 fa24 	bl	8026d80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	685a      	ldr	r2, [r3, #4]
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d940:	441a      	add	r2, r3
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	685a      	ldr	r2, [r3, #4]
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	689b      	ldr	r3, [r3, #8]
 800d94e:	429a      	cmp	r2, r3
 800d950:	d32b      	bcc.n	800d9aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	681a      	ldr	r2, [r3, #0]
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	605a      	str	r2, [r3, #4]
 800d95a:	e026      	b.n	800d9aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	68d8      	ldr	r0, [r3, #12]
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d964:	461a      	mov	r2, r3
 800d966:	68b9      	ldr	r1, [r7, #8]
 800d968:	f019 fa0a 	bl	8026d80 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	68da      	ldr	r2, [r3, #12]
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d974:	425b      	negs	r3, r3
 800d976:	441a      	add	r2, r3
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	68da      	ldr	r2, [r3, #12]
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	429a      	cmp	r2, r3
 800d986:	d207      	bcs.n	800d998 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	689a      	ldr	r2, [r3, #8]
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d990:	425b      	negs	r3, r3
 800d992:	441a      	add	r2, r3
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2b02      	cmp	r3, #2
 800d99c:	d105      	bne.n	800d9aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d99e:	693b      	ldr	r3, [r7, #16]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d002      	beq.n	800d9aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d9a4:	693b      	ldr	r3, [r7, #16]
 800d9a6:	3b01      	subs	r3, #1
 800d9a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d9aa:	693b      	ldr	r3, [r7, #16]
 800d9ac:	1c5a      	adds	r2, r3, #1
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d9b2:	697b      	ldr	r3, [r7, #20]
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3718      	adds	r7, #24
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}

0800d9bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b082      	sub	sp, #8
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
 800d9c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d018      	beq.n	800da00 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	68da      	ldr	r2, [r3, #12]
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9d6:	441a      	add	r2, r3
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	68da      	ldr	r2, [r3, #12]
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	689b      	ldr	r3, [r3, #8]
 800d9e4:	429a      	cmp	r2, r3
 800d9e6:	d303      	bcc.n	800d9f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681a      	ldr	r2, [r3, #0]
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	68d9      	ldr	r1, [r3, #12]
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9f8:	461a      	mov	r2, r3
 800d9fa:	6838      	ldr	r0, [r7, #0]
 800d9fc:	f019 f9c0 	bl	8026d80 <memcpy>
	}
}
 800da00:	bf00      	nop
 800da02:	3708      	adds	r7, #8
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}

0800da08 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b084      	sub	sp, #16
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800da10:	f001 f9fc 	bl	800ee0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da1a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800da1c:	e011      	b.n	800da42 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da22:	2b00      	cmp	r3, #0
 800da24:	d012      	beq.n	800da4c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	3324      	adds	r3, #36	; 0x24
 800da2a:	4618      	mov	r0, r3
 800da2c:	f000 fcdc 	bl	800e3e8 <xTaskRemoveFromEventList>
 800da30:	4603      	mov	r3, r0
 800da32:	2b00      	cmp	r3, #0
 800da34:	d001      	beq.n	800da3a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800da36:	f000 fdb7 	bl	800e5a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800da3a:	7bfb      	ldrb	r3, [r7, #15]
 800da3c:	3b01      	subs	r3, #1
 800da3e:	b2db      	uxtb	r3, r3
 800da40:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800da42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da46:	2b00      	cmp	r3, #0
 800da48:	dce9      	bgt.n	800da1e <prvUnlockQueue+0x16>
 800da4a:	e000      	b.n	800da4e <prvUnlockQueue+0x46>
					break;
 800da4c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	22ff      	movs	r2, #255	; 0xff
 800da52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800da56:	f001 fa0d 	bl	800ee74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800da5a:	f001 f9d7 	bl	800ee0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da64:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800da66:	e011      	b.n	800da8c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	691b      	ldr	r3, [r3, #16]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d012      	beq.n	800da96 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	3310      	adds	r3, #16
 800da74:	4618      	mov	r0, r3
 800da76:	f000 fcb7 	bl	800e3e8 <xTaskRemoveFromEventList>
 800da7a:	4603      	mov	r3, r0
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d001      	beq.n	800da84 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800da80:	f000 fd92 	bl	800e5a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800da84:	7bbb      	ldrb	r3, [r7, #14]
 800da86:	3b01      	subs	r3, #1
 800da88:	b2db      	uxtb	r3, r3
 800da8a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800da8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800da90:	2b00      	cmp	r3, #0
 800da92:	dce9      	bgt.n	800da68 <prvUnlockQueue+0x60>
 800da94:	e000      	b.n	800da98 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800da96:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	22ff      	movs	r2, #255	; 0xff
 800da9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800daa0:	f001 f9e8 	bl	800ee74 <vPortExitCritical>
}
 800daa4:	bf00      	nop
 800daa6:	3710      	adds	r7, #16
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd80      	pop	{r7, pc}

0800daac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b084      	sub	sp, #16
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dab4:	f001 f9aa 	bl	800ee0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d102      	bne.n	800dac6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dac0:	2301      	movs	r3, #1
 800dac2:	60fb      	str	r3, [r7, #12]
 800dac4:	e001      	b.n	800daca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dac6:	2300      	movs	r3, #0
 800dac8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800daca:	f001 f9d3 	bl	800ee74 <vPortExitCritical>

	return xReturn;
 800dace:	68fb      	ldr	r3, [r7, #12]
}
 800dad0:	4618      	mov	r0, r3
 800dad2:	3710      	adds	r7, #16
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bd80      	pop	{r7, pc}

0800dad8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b084      	sub	sp, #16
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dae0:	f001 f994 	bl	800ee0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800daec:	429a      	cmp	r2, r3
 800daee:	d102      	bne.n	800daf6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800daf0:	2301      	movs	r3, #1
 800daf2:	60fb      	str	r3, [r7, #12]
 800daf4:	e001      	b.n	800dafa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800daf6:	2300      	movs	r3, #0
 800daf8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dafa:	f001 f9bb 	bl	800ee74 <vPortExitCritical>

	return xReturn;
 800dafe:	68fb      	ldr	r3, [r7, #12]
}
 800db00:	4618      	mov	r0, r3
 800db02:	3710      	adds	r7, #16
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}

0800db08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b08e      	sub	sp, #56	; 0x38
 800db0c:	af04      	add	r7, sp, #16
 800db0e:	60f8      	str	r0, [r7, #12]
 800db10:	60b9      	str	r1, [r7, #8]
 800db12:	607a      	str	r2, [r7, #4]
 800db14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800db16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d10c      	bne.n	800db36 <xTaskCreateStatic+0x2e>
	__asm volatile
 800db1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db20:	b672      	cpsid	i
 800db22:	f383 8811 	msr	BASEPRI, r3
 800db26:	f3bf 8f6f 	isb	sy
 800db2a:	f3bf 8f4f 	dsb	sy
 800db2e:	b662      	cpsie	i
 800db30:	623b      	str	r3, [r7, #32]
}
 800db32:	bf00      	nop
 800db34:	e7fe      	b.n	800db34 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800db36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d10c      	bne.n	800db56 <xTaskCreateStatic+0x4e>
	__asm volatile
 800db3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db40:	b672      	cpsid	i
 800db42:	f383 8811 	msr	BASEPRI, r3
 800db46:	f3bf 8f6f 	isb	sy
 800db4a:	f3bf 8f4f 	dsb	sy
 800db4e:	b662      	cpsie	i
 800db50:	61fb      	str	r3, [r7, #28]
}
 800db52:	bf00      	nop
 800db54:	e7fe      	b.n	800db54 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800db56:	2358      	movs	r3, #88	; 0x58
 800db58:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800db5a:	693b      	ldr	r3, [r7, #16]
 800db5c:	2b58      	cmp	r3, #88	; 0x58
 800db5e:	d00c      	beq.n	800db7a <xTaskCreateStatic+0x72>
	__asm volatile
 800db60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db64:	b672      	cpsid	i
 800db66:	f383 8811 	msr	BASEPRI, r3
 800db6a:	f3bf 8f6f 	isb	sy
 800db6e:	f3bf 8f4f 	dsb	sy
 800db72:	b662      	cpsie	i
 800db74:	61bb      	str	r3, [r7, #24]
}
 800db76:	bf00      	nop
 800db78:	e7fe      	b.n	800db78 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800db7a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800db7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d01e      	beq.n	800dbc0 <xTaskCreateStatic+0xb8>
 800db82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db84:	2b00      	cmp	r3, #0
 800db86:	d01b      	beq.n	800dbc0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800db88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db8a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800db8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db90:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800db92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db94:	2202      	movs	r2, #2
 800db96:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800db9a:	2300      	movs	r3, #0
 800db9c:	9303      	str	r3, [sp, #12]
 800db9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba0:	9302      	str	r3, [sp, #8]
 800dba2:	f107 0314 	add.w	r3, r7, #20
 800dba6:	9301      	str	r3, [sp, #4]
 800dba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbaa:	9300      	str	r3, [sp, #0]
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	687a      	ldr	r2, [r7, #4]
 800dbb0:	68b9      	ldr	r1, [r7, #8]
 800dbb2:	68f8      	ldr	r0, [r7, #12]
 800dbb4:	f000 f850 	bl	800dc58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dbb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dbba:	f000 f8e1 	bl	800dd80 <prvAddNewTaskToReadyList>
 800dbbe:	e001      	b.n	800dbc4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dbc4:	697b      	ldr	r3, [r7, #20]
	}
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	3728      	adds	r7, #40	; 0x28
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	bd80      	pop	{r7, pc}

0800dbce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dbce:	b580      	push	{r7, lr}
 800dbd0:	b08c      	sub	sp, #48	; 0x30
 800dbd2:	af04      	add	r7, sp, #16
 800dbd4:	60f8      	str	r0, [r7, #12]
 800dbd6:	60b9      	str	r1, [r7, #8]
 800dbd8:	603b      	str	r3, [r7, #0]
 800dbda:	4613      	mov	r3, r2
 800dbdc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dbde:	88fb      	ldrh	r3, [r7, #6]
 800dbe0:	009b      	lsls	r3, r3, #2
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f001 fa3e 	bl	800f064 <pvPortMalloc>
 800dbe8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dbea:	697b      	ldr	r3, [r7, #20]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d00e      	beq.n	800dc0e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dbf0:	2058      	movs	r0, #88	; 0x58
 800dbf2:	f001 fa37 	bl	800f064 <pvPortMalloc>
 800dbf6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dbf8:	69fb      	ldr	r3, [r7, #28]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d003      	beq.n	800dc06 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dbfe:	69fb      	ldr	r3, [r7, #28]
 800dc00:	697a      	ldr	r2, [r7, #20]
 800dc02:	631a      	str	r2, [r3, #48]	; 0x30
 800dc04:	e005      	b.n	800dc12 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dc06:	6978      	ldr	r0, [r7, #20]
 800dc08:	f001 fafc 	bl	800f204 <vPortFree>
 800dc0c:	e001      	b.n	800dc12 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dc12:	69fb      	ldr	r3, [r7, #28]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d017      	beq.n	800dc48 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dc18:	69fb      	ldr	r3, [r7, #28]
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dc20:	88fa      	ldrh	r2, [r7, #6]
 800dc22:	2300      	movs	r3, #0
 800dc24:	9303      	str	r3, [sp, #12]
 800dc26:	69fb      	ldr	r3, [r7, #28]
 800dc28:	9302      	str	r3, [sp, #8]
 800dc2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc2c:	9301      	str	r3, [sp, #4]
 800dc2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc30:	9300      	str	r3, [sp, #0]
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	68b9      	ldr	r1, [r7, #8]
 800dc36:	68f8      	ldr	r0, [r7, #12]
 800dc38:	f000 f80e 	bl	800dc58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dc3c:	69f8      	ldr	r0, [r7, #28]
 800dc3e:	f000 f89f 	bl	800dd80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dc42:	2301      	movs	r3, #1
 800dc44:	61bb      	str	r3, [r7, #24]
 800dc46:	e002      	b.n	800dc4e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dc48:	f04f 33ff 	mov.w	r3, #4294967295
 800dc4c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dc4e:	69bb      	ldr	r3, [r7, #24]
	}
 800dc50:	4618      	mov	r0, r3
 800dc52:	3720      	adds	r7, #32
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}

0800dc58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b088      	sub	sp, #32
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	60f8      	str	r0, [r7, #12]
 800dc60:	60b9      	str	r1, [r7, #8]
 800dc62:	607a      	str	r2, [r7, #4]
 800dc64:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dc66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc68:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	009b      	lsls	r3, r3, #2
 800dc6e:	461a      	mov	r2, r3
 800dc70:	21a5      	movs	r1, #165	; 0xa5
 800dc72:	f018 ffb6 	bl	8026be2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dc7a:	6879      	ldr	r1, [r7, #4]
 800dc7c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800dc80:	440b      	add	r3, r1
 800dc82:	009b      	lsls	r3, r3, #2
 800dc84:	4413      	add	r3, r2
 800dc86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dc88:	69bb      	ldr	r3, [r7, #24]
 800dc8a:	f023 0307 	bic.w	r3, r3, #7
 800dc8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dc90:	69bb      	ldr	r3, [r7, #24]
 800dc92:	f003 0307 	and.w	r3, r3, #7
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d00c      	beq.n	800dcb4 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800dc9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc9e:	b672      	cpsid	i
 800dca0:	f383 8811 	msr	BASEPRI, r3
 800dca4:	f3bf 8f6f 	isb	sy
 800dca8:	f3bf 8f4f 	dsb	sy
 800dcac:	b662      	cpsie	i
 800dcae:	617b      	str	r3, [r7, #20]
}
 800dcb0:	bf00      	nop
 800dcb2:	e7fe      	b.n	800dcb2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d01f      	beq.n	800dcfa <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dcba:	2300      	movs	r3, #0
 800dcbc:	61fb      	str	r3, [r7, #28]
 800dcbe:	e012      	b.n	800dce6 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dcc0:	68ba      	ldr	r2, [r7, #8]
 800dcc2:	69fb      	ldr	r3, [r7, #28]
 800dcc4:	4413      	add	r3, r2
 800dcc6:	7819      	ldrb	r1, [r3, #0]
 800dcc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcca:	69fb      	ldr	r3, [r7, #28]
 800dccc:	4413      	add	r3, r2
 800dcce:	3334      	adds	r3, #52	; 0x34
 800dcd0:	460a      	mov	r2, r1
 800dcd2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dcd4:	68ba      	ldr	r2, [r7, #8]
 800dcd6:	69fb      	ldr	r3, [r7, #28]
 800dcd8:	4413      	add	r3, r2
 800dcda:	781b      	ldrb	r3, [r3, #0]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d006      	beq.n	800dcee <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dce0:	69fb      	ldr	r3, [r7, #28]
 800dce2:	3301      	adds	r3, #1
 800dce4:	61fb      	str	r3, [r7, #28]
 800dce6:	69fb      	ldr	r3, [r7, #28]
 800dce8:	2b0f      	cmp	r3, #15
 800dcea:	d9e9      	bls.n	800dcc0 <prvInitialiseNewTask+0x68>
 800dcec:	e000      	b.n	800dcf0 <prvInitialiseNewTask+0x98>
			{
				break;
 800dcee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dcf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dcf8:	e003      	b.n	800dd02 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dcfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dd02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd04:	2b06      	cmp	r3, #6
 800dd06:	d901      	bls.n	800dd0c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dd08:	2306      	movs	r3, #6
 800dd0a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dd0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd10:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd16:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800dd18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd20:	3304      	adds	r3, #4
 800dd22:	4618      	mov	r0, r3
 800dd24:	f7fe ff2a 	bl	800cb7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dd28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd2a:	3318      	adds	r3, #24
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f7fe ff25 	bl	800cb7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dd32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd36:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd3a:	f1c3 0207 	rsb	r2, r3, #7
 800dd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd40:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dd42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd46:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800dd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd50:	2200      	movs	r2, #0
 800dd52:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dd54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd56:	2200      	movs	r2, #0
 800dd58:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dd5c:	683a      	ldr	r2, [r7, #0]
 800dd5e:	68f9      	ldr	r1, [r7, #12]
 800dd60:	69b8      	ldr	r0, [r7, #24]
 800dd62:	f000 ff47 	bl	800ebf4 <pxPortInitialiseStack>
 800dd66:	4602      	mov	r2, r0
 800dd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd6a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d002      	beq.n	800dd78 <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dd72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd76:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dd78:	bf00      	nop
 800dd7a:	3720      	adds	r7, #32
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}

0800dd80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b082      	sub	sp, #8
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dd88:	f001 f840 	bl	800ee0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dd8c:	4b2a      	ldr	r3, [pc, #168]	; (800de38 <prvAddNewTaskToReadyList+0xb8>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	3301      	adds	r3, #1
 800dd92:	4a29      	ldr	r2, [pc, #164]	; (800de38 <prvAddNewTaskToReadyList+0xb8>)
 800dd94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dd96:	4b29      	ldr	r3, [pc, #164]	; (800de3c <prvAddNewTaskToReadyList+0xbc>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d109      	bne.n	800ddb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dd9e:	4a27      	ldr	r2, [pc, #156]	; (800de3c <prvAddNewTaskToReadyList+0xbc>)
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dda4:	4b24      	ldr	r3, [pc, #144]	; (800de38 <prvAddNewTaskToReadyList+0xb8>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	2b01      	cmp	r3, #1
 800ddaa:	d110      	bne.n	800ddce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ddac:	f000 fc22 	bl	800e5f4 <prvInitialiseTaskLists>
 800ddb0:	e00d      	b.n	800ddce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ddb2:	4b23      	ldr	r3, [pc, #140]	; (800de40 <prvAddNewTaskToReadyList+0xc0>)
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d109      	bne.n	800ddce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ddba:	4b20      	ldr	r3, [pc, #128]	; (800de3c <prvAddNewTaskToReadyList+0xbc>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddc4:	429a      	cmp	r2, r3
 800ddc6:	d802      	bhi.n	800ddce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ddc8:	4a1c      	ldr	r2, [pc, #112]	; (800de3c <prvAddNewTaskToReadyList+0xbc>)
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ddce:	4b1d      	ldr	r3, [pc, #116]	; (800de44 <prvAddNewTaskToReadyList+0xc4>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	3301      	adds	r3, #1
 800ddd4:	4a1b      	ldr	r2, [pc, #108]	; (800de44 <prvAddNewTaskToReadyList+0xc4>)
 800ddd6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dddc:	2201      	movs	r2, #1
 800ddde:	409a      	lsls	r2, r3
 800dde0:	4b19      	ldr	r3, [pc, #100]	; (800de48 <prvAddNewTaskToReadyList+0xc8>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	4313      	orrs	r3, r2
 800dde6:	4a18      	ldr	r2, [pc, #96]	; (800de48 <prvAddNewTaskToReadyList+0xc8>)
 800dde8:	6013      	str	r3, [r2, #0]
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddee:	4613      	mov	r3, r2
 800ddf0:	009b      	lsls	r3, r3, #2
 800ddf2:	4413      	add	r3, r2
 800ddf4:	009b      	lsls	r3, r3, #2
 800ddf6:	4a15      	ldr	r2, [pc, #84]	; (800de4c <prvAddNewTaskToReadyList+0xcc>)
 800ddf8:	441a      	add	r2, r3
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	3304      	adds	r3, #4
 800ddfe:	4619      	mov	r1, r3
 800de00:	4610      	mov	r0, r2
 800de02:	f7fe fec8 	bl	800cb96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800de06:	f001 f835 	bl	800ee74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800de0a:	4b0d      	ldr	r3, [pc, #52]	; (800de40 <prvAddNewTaskToReadyList+0xc0>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d00e      	beq.n	800de30 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800de12:	4b0a      	ldr	r3, [pc, #40]	; (800de3c <prvAddNewTaskToReadyList+0xbc>)
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de1c:	429a      	cmp	r2, r3
 800de1e:	d207      	bcs.n	800de30 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800de20:	4b0b      	ldr	r3, [pc, #44]	; (800de50 <prvAddNewTaskToReadyList+0xd0>)
 800de22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de26:	601a      	str	r2, [r3, #0]
 800de28:	f3bf 8f4f 	dsb	sy
 800de2c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800de30:	bf00      	nop
 800de32:	3708      	adds	r7, #8
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}
 800de38:	20000c8c 	.word	0x20000c8c
 800de3c:	20000b8c 	.word	0x20000b8c
 800de40:	20000c98 	.word	0x20000c98
 800de44:	20000ca8 	.word	0x20000ca8
 800de48:	20000c94 	.word	0x20000c94
 800de4c:	20000b90 	.word	0x20000b90
 800de50:	e000ed04 	.word	0xe000ed04

0800de54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800de54:	b580      	push	{r7, lr}
 800de56:	b084      	sub	sp, #16
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800de5c:	2300      	movs	r3, #0
 800de5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d019      	beq.n	800de9a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800de66:	4b14      	ldr	r3, [pc, #80]	; (800deb8 <vTaskDelay+0x64>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d00c      	beq.n	800de88 <vTaskDelay+0x34>
	__asm volatile
 800de6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de72:	b672      	cpsid	i
 800de74:	f383 8811 	msr	BASEPRI, r3
 800de78:	f3bf 8f6f 	isb	sy
 800de7c:	f3bf 8f4f 	dsb	sy
 800de80:	b662      	cpsie	i
 800de82:	60bb      	str	r3, [r7, #8]
}
 800de84:	bf00      	nop
 800de86:	e7fe      	b.n	800de86 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800de88:	f000 f87e 	bl	800df88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800de8c:	2100      	movs	r1, #0
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	f000 fe4a 	bl	800eb28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800de94:	f000 f886 	bl	800dfa4 <xTaskResumeAll>
 800de98:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d107      	bne.n	800deb0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800dea0:	4b06      	ldr	r3, [pc, #24]	; (800debc <vTaskDelay+0x68>)
 800dea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dea6:	601a      	str	r2, [r3, #0]
 800dea8:	f3bf 8f4f 	dsb	sy
 800deac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800deb0:	bf00      	nop
 800deb2:	3710      	adds	r7, #16
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}
 800deb8:	20000cb4 	.word	0x20000cb4
 800debc:	e000ed04 	.word	0xe000ed04

0800dec0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b08a      	sub	sp, #40	; 0x28
 800dec4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dec6:	2300      	movs	r3, #0
 800dec8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800deca:	2300      	movs	r3, #0
 800decc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dece:	463a      	mov	r2, r7
 800ded0:	1d39      	adds	r1, r7, #4
 800ded2:	f107 0308 	add.w	r3, r7, #8
 800ded6:	4618      	mov	r0, r3
 800ded8:	f7f2 ff68 	bl	8000dac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dedc:	6839      	ldr	r1, [r7, #0]
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	68ba      	ldr	r2, [r7, #8]
 800dee2:	9202      	str	r2, [sp, #8]
 800dee4:	9301      	str	r3, [sp, #4]
 800dee6:	2300      	movs	r3, #0
 800dee8:	9300      	str	r3, [sp, #0]
 800deea:	2300      	movs	r3, #0
 800deec:	460a      	mov	r2, r1
 800deee:	4920      	ldr	r1, [pc, #128]	; (800df70 <vTaskStartScheduler+0xb0>)
 800def0:	4820      	ldr	r0, [pc, #128]	; (800df74 <vTaskStartScheduler+0xb4>)
 800def2:	f7ff fe09 	bl	800db08 <xTaskCreateStatic>
 800def6:	4603      	mov	r3, r0
 800def8:	4a1f      	ldr	r2, [pc, #124]	; (800df78 <vTaskStartScheduler+0xb8>)
 800defa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800defc:	4b1e      	ldr	r3, [pc, #120]	; (800df78 <vTaskStartScheduler+0xb8>)
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d002      	beq.n	800df0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800df04:	2301      	movs	r3, #1
 800df06:	617b      	str	r3, [r7, #20]
 800df08:	e001      	b.n	800df0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800df0a:	2300      	movs	r3, #0
 800df0c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	2b01      	cmp	r3, #1
 800df12:	d118      	bne.n	800df46 <vTaskStartScheduler+0x86>
	__asm volatile
 800df14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df18:	b672      	cpsid	i
 800df1a:	f383 8811 	msr	BASEPRI, r3
 800df1e:	f3bf 8f6f 	isb	sy
 800df22:	f3bf 8f4f 	dsb	sy
 800df26:	b662      	cpsie	i
 800df28:	613b      	str	r3, [r7, #16]
}
 800df2a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800df2c:	4b13      	ldr	r3, [pc, #76]	; (800df7c <vTaskStartScheduler+0xbc>)
 800df2e:	f04f 32ff 	mov.w	r2, #4294967295
 800df32:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800df34:	4b12      	ldr	r3, [pc, #72]	; (800df80 <vTaskStartScheduler+0xc0>)
 800df36:	2201      	movs	r2, #1
 800df38:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800df3a:	4b12      	ldr	r3, [pc, #72]	; (800df84 <vTaskStartScheduler+0xc4>)
 800df3c:	2200      	movs	r2, #0
 800df3e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800df40:	f000 fee6 	bl	800ed10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800df44:	e010      	b.n	800df68 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800df46:	697b      	ldr	r3, [r7, #20]
 800df48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df4c:	d10c      	bne.n	800df68 <vTaskStartScheduler+0xa8>
	__asm volatile
 800df4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df52:	b672      	cpsid	i
 800df54:	f383 8811 	msr	BASEPRI, r3
 800df58:	f3bf 8f6f 	isb	sy
 800df5c:	f3bf 8f4f 	dsb	sy
 800df60:	b662      	cpsie	i
 800df62:	60fb      	str	r3, [r7, #12]
}
 800df64:	bf00      	nop
 800df66:	e7fe      	b.n	800df66 <vTaskStartScheduler+0xa6>
}
 800df68:	bf00      	nop
 800df6a:	3718      	adds	r7, #24
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bd80      	pop	{r7, pc}
 800df70:	080278c4 	.word	0x080278c4
 800df74:	0800e5c1 	.word	0x0800e5c1
 800df78:	20000cb0 	.word	0x20000cb0
 800df7c:	20000cac 	.word	0x20000cac
 800df80:	20000c98 	.word	0x20000c98
 800df84:	20000c90 	.word	0x20000c90

0800df88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800df88:	b480      	push	{r7}
 800df8a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800df8c:	4b04      	ldr	r3, [pc, #16]	; (800dfa0 <vTaskSuspendAll+0x18>)
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	3301      	adds	r3, #1
 800df92:	4a03      	ldr	r2, [pc, #12]	; (800dfa0 <vTaskSuspendAll+0x18>)
 800df94:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800df96:	bf00      	nop
 800df98:	46bd      	mov	sp, r7
 800df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9e:	4770      	bx	lr
 800dfa0:	20000cb4 	.word	0x20000cb4

0800dfa4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b084      	sub	sp, #16
 800dfa8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dfaa:	2300      	movs	r3, #0
 800dfac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dfb2:	4b42      	ldr	r3, [pc, #264]	; (800e0bc <xTaskResumeAll+0x118>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d10c      	bne.n	800dfd4 <xTaskResumeAll+0x30>
	__asm volatile
 800dfba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfbe:	b672      	cpsid	i
 800dfc0:	f383 8811 	msr	BASEPRI, r3
 800dfc4:	f3bf 8f6f 	isb	sy
 800dfc8:	f3bf 8f4f 	dsb	sy
 800dfcc:	b662      	cpsie	i
 800dfce:	603b      	str	r3, [r7, #0]
}
 800dfd0:	bf00      	nop
 800dfd2:	e7fe      	b.n	800dfd2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dfd4:	f000 ff1a 	bl	800ee0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dfd8:	4b38      	ldr	r3, [pc, #224]	; (800e0bc <xTaskResumeAll+0x118>)
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	3b01      	subs	r3, #1
 800dfde:	4a37      	ldr	r2, [pc, #220]	; (800e0bc <xTaskResumeAll+0x118>)
 800dfe0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dfe2:	4b36      	ldr	r3, [pc, #216]	; (800e0bc <xTaskResumeAll+0x118>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d161      	bne.n	800e0ae <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dfea:	4b35      	ldr	r3, [pc, #212]	; (800e0c0 <xTaskResumeAll+0x11c>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d05d      	beq.n	800e0ae <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dff2:	e02e      	b.n	800e052 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dff4:	4b33      	ldr	r3, [pc, #204]	; (800e0c4 <xTaskResumeAll+0x120>)
 800dff6:	68db      	ldr	r3, [r3, #12]
 800dff8:	68db      	ldr	r3, [r3, #12]
 800dffa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	3318      	adds	r3, #24
 800e000:	4618      	mov	r0, r3
 800e002:	f7fe fe25 	bl	800cc50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	3304      	adds	r3, #4
 800e00a:	4618      	mov	r0, r3
 800e00c:	f7fe fe20 	bl	800cc50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e014:	2201      	movs	r2, #1
 800e016:	409a      	lsls	r2, r3
 800e018:	4b2b      	ldr	r3, [pc, #172]	; (800e0c8 <xTaskResumeAll+0x124>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	4313      	orrs	r3, r2
 800e01e:	4a2a      	ldr	r2, [pc, #168]	; (800e0c8 <xTaskResumeAll+0x124>)
 800e020:	6013      	str	r3, [r2, #0]
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e026:	4613      	mov	r3, r2
 800e028:	009b      	lsls	r3, r3, #2
 800e02a:	4413      	add	r3, r2
 800e02c:	009b      	lsls	r3, r3, #2
 800e02e:	4a27      	ldr	r2, [pc, #156]	; (800e0cc <xTaskResumeAll+0x128>)
 800e030:	441a      	add	r2, r3
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	3304      	adds	r3, #4
 800e036:	4619      	mov	r1, r3
 800e038:	4610      	mov	r0, r2
 800e03a:	f7fe fdac 	bl	800cb96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e042:	4b23      	ldr	r3, [pc, #140]	; (800e0d0 <xTaskResumeAll+0x12c>)
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e048:	429a      	cmp	r2, r3
 800e04a:	d302      	bcc.n	800e052 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e04c:	4b21      	ldr	r3, [pc, #132]	; (800e0d4 <xTaskResumeAll+0x130>)
 800e04e:	2201      	movs	r2, #1
 800e050:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e052:	4b1c      	ldr	r3, [pc, #112]	; (800e0c4 <xTaskResumeAll+0x120>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d1cc      	bne.n	800dff4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d001      	beq.n	800e064 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e060:	f000 fb68 	bl	800e734 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e064:	4b1c      	ldr	r3, [pc, #112]	; (800e0d8 <xTaskResumeAll+0x134>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d010      	beq.n	800e092 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e070:	f000 f858 	bl	800e124 <xTaskIncrementTick>
 800e074:	4603      	mov	r3, r0
 800e076:	2b00      	cmp	r3, #0
 800e078:	d002      	beq.n	800e080 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e07a:	4b16      	ldr	r3, [pc, #88]	; (800e0d4 <xTaskResumeAll+0x130>)
 800e07c:	2201      	movs	r2, #1
 800e07e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	3b01      	subs	r3, #1
 800e084:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d1f1      	bne.n	800e070 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800e08c:	4b12      	ldr	r3, [pc, #72]	; (800e0d8 <xTaskResumeAll+0x134>)
 800e08e:	2200      	movs	r2, #0
 800e090:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e092:	4b10      	ldr	r3, [pc, #64]	; (800e0d4 <xTaskResumeAll+0x130>)
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d009      	beq.n	800e0ae <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e09a:	2301      	movs	r3, #1
 800e09c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e09e:	4b0f      	ldr	r3, [pc, #60]	; (800e0dc <xTaskResumeAll+0x138>)
 800e0a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0a4:	601a      	str	r2, [r3, #0]
 800e0a6:	f3bf 8f4f 	dsb	sy
 800e0aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e0ae:	f000 fee1 	bl	800ee74 <vPortExitCritical>

	return xAlreadyYielded;
 800e0b2:	68bb      	ldr	r3, [r7, #8]
}
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	3710      	adds	r7, #16
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	bd80      	pop	{r7, pc}
 800e0bc:	20000cb4 	.word	0x20000cb4
 800e0c0:	20000c8c 	.word	0x20000c8c
 800e0c4:	20000c4c 	.word	0x20000c4c
 800e0c8:	20000c94 	.word	0x20000c94
 800e0cc:	20000b90 	.word	0x20000b90
 800e0d0:	20000b8c 	.word	0x20000b8c
 800e0d4:	20000ca0 	.word	0x20000ca0
 800e0d8:	20000c9c 	.word	0x20000c9c
 800e0dc:	e000ed04 	.word	0xe000ed04

0800e0e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e0e0:	b480      	push	{r7}
 800e0e2:	b083      	sub	sp, #12
 800e0e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e0e6:	4b05      	ldr	r3, [pc, #20]	; (800e0fc <xTaskGetTickCount+0x1c>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e0ec:	687b      	ldr	r3, [r7, #4]
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	370c      	adds	r7, #12
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f8:	4770      	bx	lr
 800e0fa:	bf00      	nop
 800e0fc:	20000c90 	.word	0x20000c90

0800e100 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b082      	sub	sp, #8
 800e104:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e106:	f000 ff69 	bl	800efdc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e10a:	2300      	movs	r3, #0
 800e10c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e10e:	4b04      	ldr	r3, [pc, #16]	; (800e120 <xTaskGetTickCountFromISR+0x20>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e114:	683b      	ldr	r3, [r7, #0]
}
 800e116:	4618      	mov	r0, r3
 800e118:	3708      	adds	r7, #8
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}
 800e11e:	bf00      	nop
 800e120:	20000c90 	.word	0x20000c90

0800e124 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b086      	sub	sp, #24
 800e128:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e12a:	2300      	movs	r3, #0
 800e12c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e12e:	4b4f      	ldr	r3, [pc, #316]	; (800e26c <xTaskIncrementTick+0x148>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	2b00      	cmp	r3, #0
 800e134:	f040 808a 	bne.w	800e24c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e138:	4b4d      	ldr	r3, [pc, #308]	; (800e270 <xTaskIncrementTick+0x14c>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	3301      	adds	r3, #1
 800e13e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e140:	4a4b      	ldr	r2, [pc, #300]	; (800e270 <xTaskIncrementTick+0x14c>)
 800e142:	693b      	ldr	r3, [r7, #16]
 800e144:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e146:	693b      	ldr	r3, [r7, #16]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d122      	bne.n	800e192 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800e14c:	4b49      	ldr	r3, [pc, #292]	; (800e274 <xTaskIncrementTick+0x150>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d00c      	beq.n	800e170 <xTaskIncrementTick+0x4c>
	__asm volatile
 800e156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e15a:	b672      	cpsid	i
 800e15c:	f383 8811 	msr	BASEPRI, r3
 800e160:	f3bf 8f6f 	isb	sy
 800e164:	f3bf 8f4f 	dsb	sy
 800e168:	b662      	cpsie	i
 800e16a:	603b      	str	r3, [r7, #0]
}
 800e16c:	bf00      	nop
 800e16e:	e7fe      	b.n	800e16e <xTaskIncrementTick+0x4a>
 800e170:	4b40      	ldr	r3, [pc, #256]	; (800e274 <xTaskIncrementTick+0x150>)
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	60fb      	str	r3, [r7, #12]
 800e176:	4b40      	ldr	r3, [pc, #256]	; (800e278 <xTaskIncrementTick+0x154>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	4a3e      	ldr	r2, [pc, #248]	; (800e274 <xTaskIncrementTick+0x150>)
 800e17c:	6013      	str	r3, [r2, #0]
 800e17e:	4a3e      	ldr	r2, [pc, #248]	; (800e278 <xTaskIncrementTick+0x154>)
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	6013      	str	r3, [r2, #0]
 800e184:	4b3d      	ldr	r3, [pc, #244]	; (800e27c <xTaskIncrementTick+0x158>)
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	3301      	adds	r3, #1
 800e18a:	4a3c      	ldr	r2, [pc, #240]	; (800e27c <xTaskIncrementTick+0x158>)
 800e18c:	6013      	str	r3, [r2, #0]
 800e18e:	f000 fad1 	bl	800e734 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e192:	4b3b      	ldr	r3, [pc, #236]	; (800e280 <xTaskIncrementTick+0x15c>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	693a      	ldr	r2, [r7, #16]
 800e198:	429a      	cmp	r2, r3
 800e19a:	d348      	bcc.n	800e22e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e19c:	4b35      	ldr	r3, [pc, #212]	; (800e274 <xTaskIncrementTick+0x150>)
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d104      	bne.n	800e1b0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1a6:	4b36      	ldr	r3, [pc, #216]	; (800e280 <xTaskIncrementTick+0x15c>)
 800e1a8:	f04f 32ff 	mov.w	r2, #4294967295
 800e1ac:	601a      	str	r2, [r3, #0]
					break;
 800e1ae:	e03e      	b.n	800e22e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1b0:	4b30      	ldr	r3, [pc, #192]	; (800e274 <xTaskIncrementTick+0x150>)
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	68db      	ldr	r3, [r3, #12]
 800e1b6:	68db      	ldr	r3, [r3, #12]
 800e1b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e1ba:	68bb      	ldr	r3, [r7, #8]
 800e1bc:	685b      	ldr	r3, [r3, #4]
 800e1be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e1c0:	693a      	ldr	r2, [r7, #16]
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	429a      	cmp	r2, r3
 800e1c6:	d203      	bcs.n	800e1d0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e1c8:	4a2d      	ldr	r2, [pc, #180]	; (800e280 <xTaskIncrementTick+0x15c>)
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e1ce:	e02e      	b.n	800e22e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	3304      	adds	r3, #4
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f7fe fd3b 	bl	800cc50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e1da:	68bb      	ldr	r3, [r7, #8]
 800e1dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d004      	beq.n	800e1ec <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e1e2:	68bb      	ldr	r3, [r7, #8]
 800e1e4:	3318      	adds	r3, #24
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	f7fe fd32 	bl	800cc50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e1ec:	68bb      	ldr	r3, [r7, #8]
 800e1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1f0:	2201      	movs	r2, #1
 800e1f2:	409a      	lsls	r2, r3
 800e1f4:	4b23      	ldr	r3, [pc, #140]	; (800e284 <xTaskIncrementTick+0x160>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	4313      	orrs	r3, r2
 800e1fa:	4a22      	ldr	r2, [pc, #136]	; (800e284 <xTaskIncrementTick+0x160>)
 800e1fc:	6013      	str	r3, [r2, #0]
 800e1fe:	68bb      	ldr	r3, [r7, #8]
 800e200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e202:	4613      	mov	r3, r2
 800e204:	009b      	lsls	r3, r3, #2
 800e206:	4413      	add	r3, r2
 800e208:	009b      	lsls	r3, r3, #2
 800e20a:	4a1f      	ldr	r2, [pc, #124]	; (800e288 <xTaskIncrementTick+0x164>)
 800e20c:	441a      	add	r2, r3
 800e20e:	68bb      	ldr	r3, [r7, #8]
 800e210:	3304      	adds	r3, #4
 800e212:	4619      	mov	r1, r3
 800e214:	4610      	mov	r0, r2
 800e216:	f7fe fcbe 	bl	800cb96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e21a:	68bb      	ldr	r3, [r7, #8]
 800e21c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e21e:	4b1b      	ldr	r3, [pc, #108]	; (800e28c <xTaskIncrementTick+0x168>)
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e224:	429a      	cmp	r2, r3
 800e226:	d3b9      	bcc.n	800e19c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800e228:	2301      	movs	r3, #1
 800e22a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e22c:	e7b6      	b.n	800e19c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e22e:	4b17      	ldr	r3, [pc, #92]	; (800e28c <xTaskIncrementTick+0x168>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e234:	4914      	ldr	r1, [pc, #80]	; (800e288 <xTaskIncrementTick+0x164>)
 800e236:	4613      	mov	r3, r2
 800e238:	009b      	lsls	r3, r3, #2
 800e23a:	4413      	add	r3, r2
 800e23c:	009b      	lsls	r3, r3, #2
 800e23e:	440b      	add	r3, r1
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	2b01      	cmp	r3, #1
 800e244:	d907      	bls.n	800e256 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800e246:	2301      	movs	r3, #1
 800e248:	617b      	str	r3, [r7, #20]
 800e24a:	e004      	b.n	800e256 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e24c:	4b10      	ldr	r3, [pc, #64]	; (800e290 <xTaskIncrementTick+0x16c>)
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	3301      	adds	r3, #1
 800e252:	4a0f      	ldr	r2, [pc, #60]	; (800e290 <xTaskIncrementTick+0x16c>)
 800e254:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e256:	4b0f      	ldr	r3, [pc, #60]	; (800e294 <xTaskIncrementTick+0x170>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d001      	beq.n	800e262 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800e25e:	2301      	movs	r3, #1
 800e260:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e262:	697b      	ldr	r3, [r7, #20]
}
 800e264:	4618      	mov	r0, r3
 800e266:	3718      	adds	r7, #24
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}
 800e26c:	20000cb4 	.word	0x20000cb4
 800e270:	20000c90 	.word	0x20000c90
 800e274:	20000c44 	.word	0x20000c44
 800e278:	20000c48 	.word	0x20000c48
 800e27c:	20000ca4 	.word	0x20000ca4
 800e280:	20000cac 	.word	0x20000cac
 800e284:	20000c94 	.word	0x20000c94
 800e288:	20000b90 	.word	0x20000b90
 800e28c:	20000b8c 	.word	0x20000b8c
 800e290:	20000c9c 	.word	0x20000c9c
 800e294:	20000ca0 	.word	0x20000ca0

0800e298 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b088      	sub	sp, #32
 800e29c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e29e:	4b3a      	ldr	r3, [pc, #232]	; (800e388 <vTaskSwitchContext+0xf0>)
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d003      	beq.n	800e2ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e2a6:	4b39      	ldr	r3, [pc, #228]	; (800e38c <vTaskSwitchContext+0xf4>)
 800e2a8:	2201      	movs	r2, #1
 800e2aa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e2ac:	e068      	b.n	800e380 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 800e2ae:	4b37      	ldr	r3, [pc, #220]	; (800e38c <vTaskSwitchContext+0xf4>)
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800e2b4:	4b36      	ldr	r3, [pc, #216]	; (800e390 <vTaskSwitchContext+0xf8>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2ba:	61fb      	str	r3, [r7, #28]
 800e2bc:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800e2c0:	61bb      	str	r3, [r7, #24]
 800e2c2:	69fb      	ldr	r3, [r7, #28]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	69ba      	ldr	r2, [r7, #24]
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d111      	bne.n	800e2f0 <vTaskSwitchContext+0x58>
 800e2cc:	69fb      	ldr	r3, [r7, #28]
 800e2ce:	3304      	adds	r3, #4
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	69ba      	ldr	r2, [r7, #24]
 800e2d4:	429a      	cmp	r2, r3
 800e2d6:	d10b      	bne.n	800e2f0 <vTaskSwitchContext+0x58>
 800e2d8:	69fb      	ldr	r3, [r7, #28]
 800e2da:	3308      	adds	r3, #8
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	69ba      	ldr	r2, [r7, #24]
 800e2e0:	429a      	cmp	r2, r3
 800e2e2:	d105      	bne.n	800e2f0 <vTaskSwitchContext+0x58>
 800e2e4:	69fb      	ldr	r3, [r7, #28]
 800e2e6:	330c      	adds	r3, #12
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	69ba      	ldr	r2, [r7, #24]
 800e2ec:	429a      	cmp	r2, r3
 800e2ee:	d008      	beq.n	800e302 <vTaskSwitchContext+0x6a>
 800e2f0:	4b27      	ldr	r3, [pc, #156]	; (800e390 <vTaskSwitchContext+0xf8>)
 800e2f2:	681a      	ldr	r2, [r3, #0]
 800e2f4:	4b26      	ldr	r3, [pc, #152]	; (800e390 <vTaskSwitchContext+0xf8>)
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	3334      	adds	r3, #52	; 0x34
 800e2fa:	4619      	mov	r1, r3
 800e2fc:	4610      	mov	r0, r2
 800e2fe:	f7f2 fd42 	bl	8000d86 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e302:	4b24      	ldr	r3, [pc, #144]	; (800e394 <vTaskSwitchContext+0xfc>)
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	fab3 f383 	clz	r3, r3
 800e30e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e310:	7afb      	ldrb	r3, [r7, #11]
 800e312:	f1c3 031f 	rsb	r3, r3, #31
 800e316:	617b      	str	r3, [r7, #20]
 800e318:	491f      	ldr	r1, [pc, #124]	; (800e398 <vTaskSwitchContext+0x100>)
 800e31a:	697a      	ldr	r2, [r7, #20]
 800e31c:	4613      	mov	r3, r2
 800e31e:	009b      	lsls	r3, r3, #2
 800e320:	4413      	add	r3, r2
 800e322:	009b      	lsls	r3, r3, #2
 800e324:	440b      	add	r3, r1
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d10c      	bne.n	800e346 <vTaskSwitchContext+0xae>
	__asm volatile
 800e32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e330:	b672      	cpsid	i
 800e332:	f383 8811 	msr	BASEPRI, r3
 800e336:	f3bf 8f6f 	isb	sy
 800e33a:	f3bf 8f4f 	dsb	sy
 800e33e:	b662      	cpsie	i
 800e340:	607b      	str	r3, [r7, #4]
}
 800e342:	bf00      	nop
 800e344:	e7fe      	b.n	800e344 <vTaskSwitchContext+0xac>
 800e346:	697a      	ldr	r2, [r7, #20]
 800e348:	4613      	mov	r3, r2
 800e34a:	009b      	lsls	r3, r3, #2
 800e34c:	4413      	add	r3, r2
 800e34e:	009b      	lsls	r3, r3, #2
 800e350:	4a11      	ldr	r2, [pc, #68]	; (800e398 <vTaskSwitchContext+0x100>)
 800e352:	4413      	add	r3, r2
 800e354:	613b      	str	r3, [r7, #16]
 800e356:	693b      	ldr	r3, [r7, #16]
 800e358:	685b      	ldr	r3, [r3, #4]
 800e35a:	685a      	ldr	r2, [r3, #4]
 800e35c:	693b      	ldr	r3, [r7, #16]
 800e35e:	605a      	str	r2, [r3, #4]
 800e360:	693b      	ldr	r3, [r7, #16]
 800e362:	685a      	ldr	r2, [r3, #4]
 800e364:	693b      	ldr	r3, [r7, #16]
 800e366:	3308      	adds	r3, #8
 800e368:	429a      	cmp	r2, r3
 800e36a:	d104      	bne.n	800e376 <vTaskSwitchContext+0xde>
 800e36c:	693b      	ldr	r3, [r7, #16]
 800e36e:	685b      	ldr	r3, [r3, #4]
 800e370:	685a      	ldr	r2, [r3, #4]
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	605a      	str	r2, [r3, #4]
 800e376:	693b      	ldr	r3, [r7, #16]
 800e378:	685b      	ldr	r3, [r3, #4]
 800e37a:	68db      	ldr	r3, [r3, #12]
 800e37c:	4a04      	ldr	r2, [pc, #16]	; (800e390 <vTaskSwitchContext+0xf8>)
 800e37e:	6013      	str	r3, [r2, #0]
}
 800e380:	bf00      	nop
 800e382:	3720      	adds	r7, #32
 800e384:	46bd      	mov	sp, r7
 800e386:	bd80      	pop	{r7, pc}
 800e388:	20000cb4 	.word	0x20000cb4
 800e38c:	20000ca0 	.word	0x20000ca0
 800e390:	20000b8c 	.word	0x20000b8c
 800e394:	20000c94 	.word	0x20000c94
 800e398:	20000b90 	.word	0x20000b90

0800e39c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b084      	sub	sp, #16
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
 800e3a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d10c      	bne.n	800e3c6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800e3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3b0:	b672      	cpsid	i
 800e3b2:	f383 8811 	msr	BASEPRI, r3
 800e3b6:	f3bf 8f6f 	isb	sy
 800e3ba:	f3bf 8f4f 	dsb	sy
 800e3be:	b662      	cpsie	i
 800e3c0:	60fb      	str	r3, [r7, #12]
}
 800e3c2:	bf00      	nop
 800e3c4:	e7fe      	b.n	800e3c4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e3c6:	4b07      	ldr	r3, [pc, #28]	; (800e3e4 <vTaskPlaceOnEventList+0x48>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	3318      	adds	r3, #24
 800e3cc:	4619      	mov	r1, r3
 800e3ce:	6878      	ldr	r0, [r7, #4]
 800e3d0:	f7fe fc05 	bl	800cbde <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e3d4:	2101      	movs	r1, #1
 800e3d6:	6838      	ldr	r0, [r7, #0]
 800e3d8:	f000 fba6 	bl	800eb28 <prvAddCurrentTaskToDelayedList>
}
 800e3dc:	bf00      	nop
 800e3de:	3710      	adds	r7, #16
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	bd80      	pop	{r7, pc}
 800e3e4:	20000b8c 	.word	0x20000b8c

0800e3e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b086      	sub	sp, #24
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	68db      	ldr	r3, [r3, #12]
 800e3f4:	68db      	ldr	r3, [r3, #12]
 800e3f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e3f8:	693b      	ldr	r3, [r7, #16]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d10c      	bne.n	800e418 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800e3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e402:	b672      	cpsid	i
 800e404:	f383 8811 	msr	BASEPRI, r3
 800e408:	f3bf 8f6f 	isb	sy
 800e40c:	f3bf 8f4f 	dsb	sy
 800e410:	b662      	cpsie	i
 800e412:	60fb      	str	r3, [r7, #12]
}
 800e414:	bf00      	nop
 800e416:	e7fe      	b.n	800e416 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e418:	693b      	ldr	r3, [r7, #16]
 800e41a:	3318      	adds	r3, #24
 800e41c:	4618      	mov	r0, r3
 800e41e:	f7fe fc17 	bl	800cc50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e422:	4b1d      	ldr	r3, [pc, #116]	; (800e498 <xTaskRemoveFromEventList+0xb0>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d11c      	bne.n	800e464 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e42a:	693b      	ldr	r3, [r7, #16]
 800e42c:	3304      	adds	r3, #4
 800e42e:	4618      	mov	r0, r3
 800e430:	f7fe fc0e 	bl	800cc50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e434:	693b      	ldr	r3, [r7, #16]
 800e436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e438:	2201      	movs	r2, #1
 800e43a:	409a      	lsls	r2, r3
 800e43c:	4b17      	ldr	r3, [pc, #92]	; (800e49c <xTaskRemoveFromEventList+0xb4>)
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	4313      	orrs	r3, r2
 800e442:	4a16      	ldr	r2, [pc, #88]	; (800e49c <xTaskRemoveFromEventList+0xb4>)
 800e444:	6013      	str	r3, [r2, #0]
 800e446:	693b      	ldr	r3, [r7, #16]
 800e448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e44a:	4613      	mov	r3, r2
 800e44c:	009b      	lsls	r3, r3, #2
 800e44e:	4413      	add	r3, r2
 800e450:	009b      	lsls	r3, r3, #2
 800e452:	4a13      	ldr	r2, [pc, #76]	; (800e4a0 <xTaskRemoveFromEventList+0xb8>)
 800e454:	441a      	add	r2, r3
 800e456:	693b      	ldr	r3, [r7, #16]
 800e458:	3304      	adds	r3, #4
 800e45a:	4619      	mov	r1, r3
 800e45c:	4610      	mov	r0, r2
 800e45e:	f7fe fb9a 	bl	800cb96 <vListInsertEnd>
 800e462:	e005      	b.n	800e470 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e464:	693b      	ldr	r3, [r7, #16]
 800e466:	3318      	adds	r3, #24
 800e468:	4619      	mov	r1, r3
 800e46a:	480e      	ldr	r0, [pc, #56]	; (800e4a4 <xTaskRemoveFromEventList+0xbc>)
 800e46c:	f7fe fb93 	bl	800cb96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e470:	693b      	ldr	r3, [r7, #16]
 800e472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e474:	4b0c      	ldr	r3, [pc, #48]	; (800e4a8 <xTaskRemoveFromEventList+0xc0>)
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e47a:	429a      	cmp	r2, r3
 800e47c:	d905      	bls.n	800e48a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e47e:	2301      	movs	r3, #1
 800e480:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e482:	4b0a      	ldr	r3, [pc, #40]	; (800e4ac <xTaskRemoveFromEventList+0xc4>)
 800e484:	2201      	movs	r2, #1
 800e486:	601a      	str	r2, [r3, #0]
 800e488:	e001      	b.n	800e48e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e48a:	2300      	movs	r3, #0
 800e48c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e48e:	697b      	ldr	r3, [r7, #20]
}
 800e490:	4618      	mov	r0, r3
 800e492:	3718      	adds	r7, #24
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}
 800e498:	20000cb4 	.word	0x20000cb4
 800e49c:	20000c94 	.word	0x20000c94
 800e4a0:	20000b90 	.word	0x20000b90
 800e4a4:	20000c4c 	.word	0x20000c4c
 800e4a8:	20000b8c 	.word	0x20000b8c
 800e4ac:	20000ca0 	.word	0x20000ca0

0800e4b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e4b0:	b480      	push	{r7}
 800e4b2:	b083      	sub	sp, #12
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e4b8:	4b06      	ldr	r3, [pc, #24]	; (800e4d4 <vTaskInternalSetTimeOutState+0x24>)
 800e4ba:	681a      	ldr	r2, [r3, #0]
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e4c0:	4b05      	ldr	r3, [pc, #20]	; (800e4d8 <vTaskInternalSetTimeOutState+0x28>)
 800e4c2:	681a      	ldr	r2, [r3, #0]
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	605a      	str	r2, [r3, #4]
}
 800e4c8:	bf00      	nop
 800e4ca:	370c      	adds	r7, #12
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d2:	4770      	bx	lr
 800e4d4:	20000ca4 	.word	0x20000ca4
 800e4d8:	20000c90 	.word	0x20000c90

0800e4dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b088      	sub	sp, #32
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
 800e4e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d10c      	bne.n	800e506 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800e4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4f0:	b672      	cpsid	i
 800e4f2:	f383 8811 	msr	BASEPRI, r3
 800e4f6:	f3bf 8f6f 	isb	sy
 800e4fa:	f3bf 8f4f 	dsb	sy
 800e4fe:	b662      	cpsie	i
 800e500:	613b      	str	r3, [r7, #16]
}
 800e502:	bf00      	nop
 800e504:	e7fe      	b.n	800e504 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d10c      	bne.n	800e526 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800e50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e510:	b672      	cpsid	i
 800e512:	f383 8811 	msr	BASEPRI, r3
 800e516:	f3bf 8f6f 	isb	sy
 800e51a:	f3bf 8f4f 	dsb	sy
 800e51e:	b662      	cpsie	i
 800e520:	60fb      	str	r3, [r7, #12]
}
 800e522:	bf00      	nop
 800e524:	e7fe      	b.n	800e524 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800e526:	f000 fc71 	bl	800ee0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e52a:	4b1d      	ldr	r3, [pc, #116]	; (800e5a0 <xTaskCheckForTimeOut+0xc4>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	685b      	ldr	r3, [r3, #4]
 800e534:	69ba      	ldr	r2, [r7, #24]
 800e536:	1ad3      	subs	r3, r2, r3
 800e538:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e53a:	683b      	ldr	r3, [r7, #0]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e542:	d102      	bne.n	800e54a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e544:	2300      	movs	r3, #0
 800e546:	61fb      	str	r3, [r7, #28]
 800e548:	e023      	b.n	800e592 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681a      	ldr	r2, [r3, #0]
 800e54e:	4b15      	ldr	r3, [pc, #84]	; (800e5a4 <xTaskCheckForTimeOut+0xc8>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	429a      	cmp	r2, r3
 800e554:	d007      	beq.n	800e566 <xTaskCheckForTimeOut+0x8a>
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	685b      	ldr	r3, [r3, #4]
 800e55a:	69ba      	ldr	r2, [r7, #24]
 800e55c:	429a      	cmp	r2, r3
 800e55e:	d302      	bcc.n	800e566 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e560:	2301      	movs	r3, #1
 800e562:	61fb      	str	r3, [r7, #28]
 800e564:	e015      	b.n	800e592 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	697a      	ldr	r2, [r7, #20]
 800e56c:	429a      	cmp	r2, r3
 800e56e:	d20b      	bcs.n	800e588 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	681a      	ldr	r2, [r3, #0]
 800e574:	697b      	ldr	r3, [r7, #20]
 800e576:	1ad2      	subs	r2, r2, r3
 800e578:	683b      	ldr	r3, [r7, #0]
 800e57a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e57c:	6878      	ldr	r0, [r7, #4]
 800e57e:	f7ff ff97 	bl	800e4b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e582:	2300      	movs	r3, #0
 800e584:	61fb      	str	r3, [r7, #28]
 800e586:	e004      	b.n	800e592 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800e588:	683b      	ldr	r3, [r7, #0]
 800e58a:	2200      	movs	r2, #0
 800e58c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e58e:	2301      	movs	r3, #1
 800e590:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e592:	f000 fc6f 	bl	800ee74 <vPortExitCritical>

	return xReturn;
 800e596:	69fb      	ldr	r3, [r7, #28]
}
 800e598:	4618      	mov	r0, r3
 800e59a:	3720      	adds	r7, #32
 800e59c:	46bd      	mov	sp, r7
 800e59e:	bd80      	pop	{r7, pc}
 800e5a0:	20000c90 	.word	0x20000c90
 800e5a4:	20000ca4 	.word	0x20000ca4

0800e5a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e5a8:	b480      	push	{r7}
 800e5aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e5ac:	4b03      	ldr	r3, [pc, #12]	; (800e5bc <vTaskMissedYield+0x14>)
 800e5ae:	2201      	movs	r2, #1
 800e5b0:	601a      	str	r2, [r3, #0]
}
 800e5b2:	bf00      	nop
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ba:	4770      	bx	lr
 800e5bc:	20000ca0 	.word	0x20000ca0

0800e5c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b082      	sub	sp, #8
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e5c8:	f000 f854 	bl	800e674 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e5cc:	4b07      	ldr	r3, [pc, #28]	; (800e5ec <prvIdleTask+0x2c>)
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	2b01      	cmp	r3, #1
 800e5d2:	d907      	bls.n	800e5e4 <prvIdleTask+0x24>
			{
				taskYIELD();
 800e5d4:	4b06      	ldr	r3, [pc, #24]	; (800e5f0 <prvIdleTask+0x30>)
 800e5d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5da:	601a      	str	r2, [r3, #0]
 800e5dc:	f3bf 8f4f 	dsb	sy
 800e5e0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800e5e4:	f7f2 fbc8 	bl	8000d78 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800e5e8:	e7ee      	b.n	800e5c8 <prvIdleTask+0x8>
 800e5ea:	bf00      	nop
 800e5ec:	20000b90 	.word	0x20000b90
 800e5f0:	e000ed04 	.word	0xe000ed04

0800e5f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b082      	sub	sp, #8
 800e5f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	607b      	str	r3, [r7, #4]
 800e5fe:	e00c      	b.n	800e61a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e600:	687a      	ldr	r2, [r7, #4]
 800e602:	4613      	mov	r3, r2
 800e604:	009b      	lsls	r3, r3, #2
 800e606:	4413      	add	r3, r2
 800e608:	009b      	lsls	r3, r3, #2
 800e60a:	4a12      	ldr	r2, [pc, #72]	; (800e654 <prvInitialiseTaskLists+0x60>)
 800e60c:	4413      	add	r3, r2
 800e60e:	4618      	mov	r0, r3
 800e610:	f7fe fa94 	bl	800cb3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	3301      	adds	r3, #1
 800e618:	607b      	str	r3, [r7, #4]
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	2b06      	cmp	r3, #6
 800e61e:	d9ef      	bls.n	800e600 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e620:	480d      	ldr	r0, [pc, #52]	; (800e658 <prvInitialiseTaskLists+0x64>)
 800e622:	f7fe fa8b 	bl	800cb3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e626:	480d      	ldr	r0, [pc, #52]	; (800e65c <prvInitialiseTaskLists+0x68>)
 800e628:	f7fe fa88 	bl	800cb3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e62c:	480c      	ldr	r0, [pc, #48]	; (800e660 <prvInitialiseTaskLists+0x6c>)
 800e62e:	f7fe fa85 	bl	800cb3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e632:	480c      	ldr	r0, [pc, #48]	; (800e664 <prvInitialiseTaskLists+0x70>)
 800e634:	f7fe fa82 	bl	800cb3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e638:	480b      	ldr	r0, [pc, #44]	; (800e668 <prvInitialiseTaskLists+0x74>)
 800e63a:	f7fe fa7f 	bl	800cb3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e63e:	4b0b      	ldr	r3, [pc, #44]	; (800e66c <prvInitialiseTaskLists+0x78>)
 800e640:	4a05      	ldr	r2, [pc, #20]	; (800e658 <prvInitialiseTaskLists+0x64>)
 800e642:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e644:	4b0a      	ldr	r3, [pc, #40]	; (800e670 <prvInitialiseTaskLists+0x7c>)
 800e646:	4a05      	ldr	r2, [pc, #20]	; (800e65c <prvInitialiseTaskLists+0x68>)
 800e648:	601a      	str	r2, [r3, #0]
}
 800e64a:	bf00      	nop
 800e64c:	3708      	adds	r7, #8
 800e64e:	46bd      	mov	sp, r7
 800e650:	bd80      	pop	{r7, pc}
 800e652:	bf00      	nop
 800e654:	20000b90 	.word	0x20000b90
 800e658:	20000c1c 	.word	0x20000c1c
 800e65c:	20000c30 	.word	0x20000c30
 800e660:	20000c4c 	.word	0x20000c4c
 800e664:	20000c60 	.word	0x20000c60
 800e668:	20000c78 	.word	0x20000c78
 800e66c:	20000c44 	.word	0x20000c44
 800e670:	20000c48 	.word	0x20000c48

0800e674 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b082      	sub	sp, #8
 800e678:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e67a:	e019      	b.n	800e6b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e67c:	f000 fbc6 	bl	800ee0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e680:	4b10      	ldr	r3, [pc, #64]	; (800e6c4 <prvCheckTasksWaitingTermination+0x50>)
 800e682:	68db      	ldr	r3, [r3, #12]
 800e684:	68db      	ldr	r3, [r3, #12]
 800e686:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	3304      	adds	r3, #4
 800e68c:	4618      	mov	r0, r3
 800e68e:	f7fe fadf 	bl	800cc50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e692:	4b0d      	ldr	r3, [pc, #52]	; (800e6c8 <prvCheckTasksWaitingTermination+0x54>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	3b01      	subs	r3, #1
 800e698:	4a0b      	ldr	r2, [pc, #44]	; (800e6c8 <prvCheckTasksWaitingTermination+0x54>)
 800e69a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e69c:	4b0b      	ldr	r3, [pc, #44]	; (800e6cc <prvCheckTasksWaitingTermination+0x58>)
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	3b01      	subs	r3, #1
 800e6a2:	4a0a      	ldr	r2, [pc, #40]	; (800e6cc <prvCheckTasksWaitingTermination+0x58>)
 800e6a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e6a6:	f000 fbe5 	bl	800ee74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e6aa:	6878      	ldr	r0, [r7, #4]
 800e6ac:	f000 f810 	bl	800e6d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e6b0:	4b06      	ldr	r3, [pc, #24]	; (800e6cc <prvCheckTasksWaitingTermination+0x58>)
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d1e1      	bne.n	800e67c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e6b8:	bf00      	nop
 800e6ba:	bf00      	nop
 800e6bc:	3708      	adds	r7, #8
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd80      	pop	{r7, pc}
 800e6c2:	bf00      	nop
 800e6c4:	20000c60 	.word	0x20000c60
 800e6c8:	20000c8c 	.word	0x20000c8c
 800e6cc:	20000c74 	.word	0x20000c74

0800e6d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b084      	sub	sp, #16
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d108      	bne.n	800e6f4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	f000 fd8c 	bl	800f204 <vPortFree>
				vPortFree( pxTCB );
 800e6ec:	6878      	ldr	r0, [r7, #4]
 800e6ee:	f000 fd89 	bl	800f204 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e6f2:	e01a      	b.n	800e72a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e6fa:	2b01      	cmp	r3, #1
 800e6fc:	d103      	bne.n	800e706 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e6fe:	6878      	ldr	r0, [r7, #4]
 800e700:	f000 fd80 	bl	800f204 <vPortFree>
	}
 800e704:	e011      	b.n	800e72a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e70c:	2b02      	cmp	r3, #2
 800e70e:	d00c      	beq.n	800e72a <prvDeleteTCB+0x5a>
	__asm volatile
 800e710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e714:	b672      	cpsid	i
 800e716:	f383 8811 	msr	BASEPRI, r3
 800e71a:	f3bf 8f6f 	isb	sy
 800e71e:	f3bf 8f4f 	dsb	sy
 800e722:	b662      	cpsie	i
 800e724:	60fb      	str	r3, [r7, #12]
}
 800e726:	bf00      	nop
 800e728:	e7fe      	b.n	800e728 <prvDeleteTCB+0x58>
	}
 800e72a:	bf00      	nop
 800e72c:	3710      	adds	r7, #16
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd80      	pop	{r7, pc}
	...

0800e734 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e734:	b480      	push	{r7}
 800e736:	b083      	sub	sp, #12
 800e738:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e73a:	4b0c      	ldr	r3, [pc, #48]	; (800e76c <prvResetNextTaskUnblockTime+0x38>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d104      	bne.n	800e74e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e744:	4b0a      	ldr	r3, [pc, #40]	; (800e770 <prvResetNextTaskUnblockTime+0x3c>)
 800e746:	f04f 32ff 	mov.w	r2, #4294967295
 800e74a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e74c:	e008      	b.n	800e760 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e74e:	4b07      	ldr	r3, [pc, #28]	; (800e76c <prvResetNextTaskUnblockTime+0x38>)
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	68db      	ldr	r3, [r3, #12]
 800e754:	68db      	ldr	r3, [r3, #12]
 800e756:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	685b      	ldr	r3, [r3, #4]
 800e75c:	4a04      	ldr	r2, [pc, #16]	; (800e770 <prvResetNextTaskUnblockTime+0x3c>)
 800e75e:	6013      	str	r3, [r2, #0]
}
 800e760:	bf00      	nop
 800e762:	370c      	adds	r7, #12
 800e764:	46bd      	mov	sp, r7
 800e766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76a:	4770      	bx	lr
 800e76c:	20000c44 	.word	0x20000c44
 800e770:	20000cac 	.word	0x20000cac

0800e774 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e774:	b480      	push	{r7}
 800e776:	b083      	sub	sp, #12
 800e778:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e77a:	4b0b      	ldr	r3, [pc, #44]	; (800e7a8 <xTaskGetSchedulerState+0x34>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d102      	bne.n	800e788 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e782:	2301      	movs	r3, #1
 800e784:	607b      	str	r3, [r7, #4]
 800e786:	e008      	b.n	800e79a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e788:	4b08      	ldr	r3, [pc, #32]	; (800e7ac <xTaskGetSchedulerState+0x38>)
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d102      	bne.n	800e796 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e790:	2302      	movs	r3, #2
 800e792:	607b      	str	r3, [r7, #4]
 800e794:	e001      	b.n	800e79a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e796:	2300      	movs	r3, #0
 800e798:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e79a:	687b      	ldr	r3, [r7, #4]
	}
 800e79c:	4618      	mov	r0, r3
 800e79e:	370c      	adds	r7, #12
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a6:	4770      	bx	lr
 800e7a8:	20000c98 	.word	0x20000c98
 800e7ac:	20000cb4 	.word	0x20000cb4

0800e7b0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b084      	sub	sp, #16
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e7bc:	2300      	movs	r3, #0
 800e7be:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d069      	beq.n	800e89a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e7c6:	68bb      	ldr	r3, [r7, #8]
 800e7c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7ca:	4b36      	ldr	r3, [pc, #216]	; (800e8a4 <xTaskPriorityInherit+0xf4>)
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7d0:	429a      	cmp	r2, r3
 800e7d2:	d259      	bcs.n	800e888 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e7d4:	68bb      	ldr	r3, [r7, #8]
 800e7d6:	699b      	ldr	r3, [r3, #24]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	db06      	blt.n	800e7ea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7dc:	4b31      	ldr	r3, [pc, #196]	; (800e8a4 <xTaskPriorityInherit+0xf4>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7e2:	f1c3 0207 	rsb	r2, r3, #7
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e7ea:	68bb      	ldr	r3, [r7, #8]
 800e7ec:	6959      	ldr	r1, [r3, #20]
 800e7ee:	68bb      	ldr	r3, [r7, #8]
 800e7f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7f2:	4613      	mov	r3, r2
 800e7f4:	009b      	lsls	r3, r3, #2
 800e7f6:	4413      	add	r3, r2
 800e7f8:	009b      	lsls	r3, r3, #2
 800e7fa:	4a2b      	ldr	r2, [pc, #172]	; (800e8a8 <xTaskPriorityInherit+0xf8>)
 800e7fc:	4413      	add	r3, r2
 800e7fe:	4299      	cmp	r1, r3
 800e800:	d13a      	bne.n	800e878 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	3304      	adds	r3, #4
 800e806:	4618      	mov	r0, r3
 800e808:	f7fe fa22 	bl	800cc50 <uxListRemove>
 800e80c:	4603      	mov	r3, r0
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d115      	bne.n	800e83e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e816:	4924      	ldr	r1, [pc, #144]	; (800e8a8 <xTaskPriorityInherit+0xf8>)
 800e818:	4613      	mov	r3, r2
 800e81a:	009b      	lsls	r3, r3, #2
 800e81c:	4413      	add	r3, r2
 800e81e:	009b      	lsls	r3, r3, #2
 800e820:	440b      	add	r3, r1
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d10a      	bne.n	800e83e <xTaskPriorityInherit+0x8e>
 800e828:	68bb      	ldr	r3, [r7, #8]
 800e82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e82c:	2201      	movs	r2, #1
 800e82e:	fa02 f303 	lsl.w	r3, r2, r3
 800e832:	43da      	mvns	r2, r3
 800e834:	4b1d      	ldr	r3, [pc, #116]	; (800e8ac <xTaskPriorityInherit+0xfc>)
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	4013      	ands	r3, r2
 800e83a:	4a1c      	ldr	r2, [pc, #112]	; (800e8ac <xTaskPriorityInherit+0xfc>)
 800e83c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e83e:	4b19      	ldr	r3, [pc, #100]	; (800e8a4 <xTaskPriorityInherit+0xf4>)
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e844:	68bb      	ldr	r3, [r7, #8]
 800e846:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e848:	68bb      	ldr	r3, [r7, #8]
 800e84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e84c:	2201      	movs	r2, #1
 800e84e:	409a      	lsls	r2, r3
 800e850:	4b16      	ldr	r3, [pc, #88]	; (800e8ac <xTaskPriorityInherit+0xfc>)
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	4313      	orrs	r3, r2
 800e856:	4a15      	ldr	r2, [pc, #84]	; (800e8ac <xTaskPriorityInherit+0xfc>)
 800e858:	6013      	str	r3, [r2, #0]
 800e85a:	68bb      	ldr	r3, [r7, #8]
 800e85c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e85e:	4613      	mov	r3, r2
 800e860:	009b      	lsls	r3, r3, #2
 800e862:	4413      	add	r3, r2
 800e864:	009b      	lsls	r3, r3, #2
 800e866:	4a10      	ldr	r2, [pc, #64]	; (800e8a8 <xTaskPriorityInherit+0xf8>)
 800e868:	441a      	add	r2, r3
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	3304      	adds	r3, #4
 800e86e:	4619      	mov	r1, r3
 800e870:	4610      	mov	r0, r2
 800e872:	f7fe f990 	bl	800cb96 <vListInsertEnd>
 800e876:	e004      	b.n	800e882 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e878:	4b0a      	ldr	r3, [pc, #40]	; (800e8a4 <xTaskPriorityInherit+0xf4>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e87e:	68bb      	ldr	r3, [r7, #8]
 800e880:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e882:	2301      	movs	r3, #1
 800e884:	60fb      	str	r3, [r7, #12]
 800e886:	e008      	b.n	800e89a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e888:	68bb      	ldr	r3, [r7, #8]
 800e88a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e88c:	4b05      	ldr	r3, [pc, #20]	; (800e8a4 <xTaskPriorityInherit+0xf4>)
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e892:	429a      	cmp	r2, r3
 800e894:	d201      	bcs.n	800e89a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e896:	2301      	movs	r3, #1
 800e898:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e89a:	68fb      	ldr	r3, [r7, #12]
	}
 800e89c:	4618      	mov	r0, r3
 800e89e:	3710      	adds	r7, #16
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bd80      	pop	{r7, pc}
 800e8a4:	20000b8c 	.word	0x20000b8c
 800e8a8:	20000b90 	.word	0x20000b90
 800e8ac:	20000c94 	.word	0x20000c94

0800e8b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b086      	sub	sp, #24
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e8bc:	2300      	movs	r3, #0
 800e8be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d072      	beq.n	800e9ac <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e8c6:	4b3c      	ldr	r3, [pc, #240]	; (800e9b8 <xTaskPriorityDisinherit+0x108>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	693a      	ldr	r2, [r7, #16]
 800e8cc:	429a      	cmp	r2, r3
 800e8ce:	d00c      	beq.n	800e8ea <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800e8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8d4:	b672      	cpsid	i
 800e8d6:	f383 8811 	msr	BASEPRI, r3
 800e8da:	f3bf 8f6f 	isb	sy
 800e8de:	f3bf 8f4f 	dsb	sy
 800e8e2:	b662      	cpsie	i
 800e8e4:	60fb      	str	r3, [r7, #12]
}
 800e8e6:	bf00      	nop
 800e8e8:	e7fe      	b.n	800e8e8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800e8ea:	693b      	ldr	r3, [r7, #16]
 800e8ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d10c      	bne.n	800e90c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800e8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8f6:	b672      	cpsid	i
 800e8f8:	f383 8811 	msr	BASEPRI, r3
 800e8fc:	f3bf 8f6f 	isb	sy
 800e900:	f3bf 8f4f 	dsb	sy
 800e904:	b662      	cpsie	i
 800e906:	60bb      	str	r3, [r7, #8]
}
 800e908:	bf00      	nop
 800e90a:	e7fe      	b.n	800e90a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800e90c:	693b      	ldr	r3, [r7, #16]
 800e90e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e910:	1e5a      	subs	r2, r3, #1
 800e912:	693b      	ldr	r3, [r7, #16]
 800e914:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e916:	693b      	ldr	r3, [r7, #16]
 800e918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e91a:	693b      	ldr	r3, [r7, #16]
 800e91c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e91e:	429a      	cmp	r2, r3
 800e920:	d044      	beq.n	800e9ac <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e926:	2b00      	cmp	r3, #0
 800e928:	d140      	bne.n	800e9ac <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	3304      	adds	r3, #4
 800e92e:	4618      	mov	r0, r3
 800e930:	f7fe f98e 	bl	800cc50 <uxListRemove>
 800e934:	4603      	mov	r3, r0
 800e936:	2b00      	cmp	r3, #0
 800e938:	d115      	bne.n	800e966 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e93a:	693b      	ldr	r3, [r7, #16]
 800e93c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e93e:	491f      	ldr	r1, [pc, #124]	; (800e9bc <xTaskPriorityDisinherit+0x10c>)
 800e940:	4613      	mov	r3, r2
 800e942:	009b      	lsls	r3, r3, #2
 800e944:	4413      	add	r3, r2
 800e946:	009b      	lsls	r3, r3, #2
 800e948:	440b      	add	r3, r1
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d10a      	bne.n	800e966 <xTaskPriorityDisinherit+0xb6>
 800e950:	693b      	ldr	r3, [r7, #16]
 800e952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e954:	2201      	movs	r2, #1
 800e956:	fa02 f303 	lsl.w	r3, r2, r3
 800e95a:	43da      	mvns	r2, r3
 800e95c:	4b18      	ldr	r3, [pc, #96]	; (800e9c0 <xTaskPriorityDisinherit+0x110>)
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	4013      	ands	r3, r2
 800e962:	4a17      	ldr	r2, [pc, #92]	; (800e9c0 <xTaskPriorityDisinherit+0x110>)
 800e964:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e966:	693b      	ldr	r3, [r7, #16]
 800e968:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e96a:	693b      	ldr	r3, [r7, #16]
 800e96c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e96e:	693b      	ldr	r3, [r7, #16]
 800e970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e972:	f1c3 0207 	rsb	r2, r3, #7
 800e976:	693b      	ldr	r3, [r7, #16]
 800e978:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e97a:	693b      	ldr	r3, [r7, #16]
 800e97c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e97e:	2201      	movs	r2, #1
 800e980:	409a      	lsls	r2, r3
 800e982:	4b0f      	ldr	r3, [pc, #60]	; (800e9c0 <xTaskPriorityDisinherit+0x110>)
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	4313      	orrs	r3, r2
 800e988:	4a0d      	ldr	r2, [pc, #52]	; (800e9c0 <xTaskPriorityDisinherit+0x110>)
 800e98a:	6013      	str	r3, [r2, #0]
 800e98c:	693b      	ldr	r3, [r7, #16]
 800e98e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e990:	4613      	mov	r3, r2
 800e992:	009b      	lsls	r3, r3, #2
 800e994:	4413      	add	r3, r2
 800e996:	009b      	lsls	r3, r3, #2
 800e998:	4a08      	ldr	r2, [pc, #32]	; (800e9bc <xTaskPriorityDisinherit+0x10c>)
 800e99a:	441a      	add	r2, r3
 800e99c:	693b      	ldr	r3, [r7, #16]
 800e99e:	3304      	adds	r3, #4
 800e9a0:	4619      	mov	r1, r3
 800e9a2:	4610      	mov	r0, r2
 800e9a4:	f7fe f8f7 	bl	800cb96 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e9a8:	2301      	movs	r3, #1
 800e9aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e9ac:	697b      	ldr	r3, [r7, #20]
	}
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	3718      	adds	r7, #24
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	bd80      	pop	{r7, pc}
 800e9b6:	bf00      	nop
 800e9b8:	20000b8c 	.word	0x20000b8c
 800e9bc:	20000b90 	.word	0x20000b90
 800e9c0:	20000c94 	.word	0x20000c94

0800e9c4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b088      	sub	sp, #32
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
 800e9cc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e9d2:	2301      	movs	r3, #1
 800e9d4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	f000 8087 	beq.w	800eaec <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e9de:	69bb      	ldr	r3, [r7, #24]
 800e9e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d10c      	bne.n	800ea00 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800e9e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ea:	b672      	cpsid	i
 800e9ec:	f383 8811 	msr	BASEPRI, r3
 800e9f0:	f3bf 8f6f 	isb	sy
 800e9f4:	f3bf 8f4f 	dsb	sy
 800e9f8:	b662      	cpsie	i
 800e9fa:	60fb      	str	r3, [r7, #12]
}
 800e9fc:	bf00      	nop
 800e9fe:	e7fe      	b.n	800e9fe <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ea00:	69bb      	ldr	r3, [r7, #24]
 800ea02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea04:	683a      	ldr	r2, [r7, #0]
 800ea06:	429a      	cmp	r2, r3
 800ea08:	d902      	bls.n	800ea10 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ea0a:	683b      	ldr	r3, [r7, #0]
 800ea0c:	61fb      	str	r3, [r7, #28]
 800ea0e:	e002      	b.n	800ea16 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ea10:	69bb      	ldr	r3, [r7, #24]
 800ea12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea14:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ea16:	69bb      	ldr	r3, [r7, #24]
 800ea18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea1a:	69fa      	ldr	r2, [r7, #28]
 800ea1c:	429a      	cmp	r2, r3
 800ea1e:	d065      	beq.n	800eaec <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ea20:	69bb      	ldr	r3, [r7, #24]
 800ea22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea24:	697a      	ldr	r2, [r7, #20]
 800ea26:	429a      	cmp	r2, r3
 800ea28:	d160      	bne.n	800eaec <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ea2a:	4b32      	ldr	r3, [pc, #200]	; (800eaf4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	69ba      	ldr	r2, [r7, #24]
 800ea30:	429a      	cmp	r2, r3
 800ea32:	d10c      	bne.n	800ea4e <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800ea34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea38:	b672      	cpsid	i
 800ea3a:	f383 8811 	msr	BASEPRI, r3
 800ea3e:	f3bf 8f6f 	isb	sy
 800ea42:	f3bf 8f4f 	dsb	sy
 800ea46:	b662      	cpsie	i
 800ea48:	60bb      	str	r3, [r7, #8]
}
 800ea4a:	bf00      	nop
 800ea4c:	e7fe      	b.n	800ea4c <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ea4e:	69bb      	ldr	r3, [r7, #24]
 800ea50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea52:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ea54:	69bb      	ldr	r3, [r7, #24]
 800ea56:	69fa      	ldr	r2, [r7, #28]
 800ea58:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ea5a:	69bb      	ldr	r3, [r7, #24]
 800ea5c:	699b      	ldr	r3, [r3, #24]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	db04      	blt.n	800ea6c <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea62:	69fb      	ldr	r3, [r7, #28]
 800ea64:	f1c3 0207 	rsb	r2, r3, #7
 800ea68:	69bb      	ldr	r3, [r7, #24]
 800ea6a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ea6c:	69bb      	ldr	r3, [r7, #24]
 800ea6e:	6959      	ldr	r1, [r3, #20]
 800ea70:	693a      	ldr	r2, [r7, #16]
 800ea72:	4613      	mov	r3, r2
 800ea74:	009b      	lsls	r3, r3, #2
 800ea76:	4413      	add	r3, r2
 800ea78:	009b      	lsls	r3, r3, #2
 800ea7a:	4a1f      	ldr	r2, [pc, #124]	; (800eaf8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ea7c:	4413      	add	r3, r2
 800ea7e:	4299      	cmp	r1, r3
 800ea80:	d134      	bne.n	800eaec <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ea82:	69bb      	ldr	r3, [r7, #24]
 800ea84:	3304      	adds	r3, #4
 800ea86:	4618      	mov	r0, r3
 800ea88:	f7fe f8e2 	bl	800cc50 <uxListRemove>
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d115      	bne.n	800eabe <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ea92:	69bb      	ldr	r3, [r7, #24]
 800ea94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea96:	4918      	ldr	r1, [pc, #96]	; (800eaf8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ea98:	4613      	mov	r3, r2
 800ea9a:	009b      	lsls	r3, r3, #2
 800ea9c:	4413      	add	r3, r2
 800ea9e:	009b      	lsls	r3, r3, #2
 800eaa0:	440b      	add	r3, r1
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d10a      	bne.n	800eabe <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800eaa8:	69bb      	ldr	r3, [r7, #24]
 800eaaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaac:	2201      	movs	r2, #1
 800eaae:	fa02 f303 	lsl.w	r3, r2, r3
 800eab2:	43da      	mvns	r2, r3
 800eab4:	4b11      	ldr	r3, [pc, #68]	; (800eafc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	4013      	ands	r3, r2
 800eaba:	4a10      	ldr	r2, [pc, #64]	; (800eafc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800eabc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800eabe:	69bb      	ldr	r3, [r7, #24]
 800eac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eac2:	2201      	movs	r2, #1
 800eac4:	409a      	lsls	r2, r3
 800eac6:	4b0d      	ldr	r3, [pc, #52]	; (800eafc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	4313      	orrs	r3, r2
 800eacc:	4a0b      	ldr	r2, [pc, #44]	; (800eafc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800eace:	6013      	str	r3, [r2, #0]
 800ead0:	69bb      	ldr	r3, [r7, #24]
 800ead2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ead4:	4613      	mov	r3, r2
 800ead6:	009b      	lsls	r3, r3, #2
 800ead8:	4413      	add	r3, r2
 800eada:	009b      	lsls	r3, r3, #2
 800eadc:	4a06      	ldr	r2, [pc, #24]	; (800eaf8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800eade:	441a      	add	r2, r3
 800eae0:	69bb      	ldr	r3, [r7, #24]
 800eae2:	3304      	adds	r3, #4
 800eae4:	4619      	mov	r1, r3
 800eae6:	4610      	mov	r0, r2
 800eae8:	f7fe f855 	bl	800cb96 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eaec:	bf00      	nop
 800eaee:	3720      	adds	r7, #32
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	bd80      	pop	{r7, pc}
 800eaf4:	20000b8c 	.word	0x20000b8c
 800eaf8:	20000b90 	.word	0x20000b90
 800eafc:	20000c94 	.word	0x20000c94

0800eb00 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800eb00:	b480      	push	{r7}
 800eb02:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800eb04:	4b07      	ldr	r3, [pc, #28]	; (800eb24 <pvTaskIncrementMutexHeldCount+0x24>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d004      	beq.n	800eb16 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800eb0c:	4b05      	ldr	r3, [pc, #20]	; (800eb24 <pvTaskIncrementMutexHeldCount+0x24>)
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eb12:	3201      	adds	r2, #1
 800eb14:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800eb16:	4b03      	ldr	r3, [pc, #12]	; (800eb24 <pvTaskIncrementMutexHeldCount+0x24>)
 800eb18:	681b      	ldr	r3, [r3, #0]
	}
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb22:	4770      	bx	lr
 800eb24:	20000b8c 	.word	0x20000b8c

0800eb28 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b084      	sub	sp, #16
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
 800eb30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800eb32:	4b29      	ldr	r3, [pc, #164]	; (800ebd8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eb38:	4b28      	ldr	r3, [pc, #160]	; (800ebdc <prvAddCurrentTaskToDelayedList+0xb4>)
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	3304      	adds	r3, #4
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f7fe f886 	bl	800cc50 <uxListRemove>
 800eb44:	4603      	mov	r3, r0
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d10b      	bne.n	800eb62 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800eb4a:	4b24      	ldr	r3, [pc, #144]	; (800ebdc <prvAddCurrentTaskToDelayedList+0xb4>)
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb50:	2201      	movs	r2, #1
 800eb52:	fa02 f303 	lsl.w	r3, r2, r3
 800eb56:	43da      	mvns	r2, r3
 800eb58:	4b21      	ldr	r3, [pc, #132]	; (800ebe0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	4013      	ands	r3, r2
 800eb5e:	4a20      	ldr	r2, [pc, #128]	; (800ebe0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800eb60:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb68:	d10a      	bne.n	800eb80 <prvAddCurrentTaskToDelayedList+0x58>
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d007      	beq.n	800eb80 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eb70:	4b1a      	ldr	r3, [pc, #104]	; (800ebdc <prvAddCurrentTaskToDelayedList+0xb4>)
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	3304      	adds	r3, #4
 800eb76:	4619      	mov	r1, r3
 800eb78:	481a      	ldr	r0, [pc, #104]	; (800ebe4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800eb7a:	f7fe f80c 	bl	800cb96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800eb7e:	e026      	b.n	800ebce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800eb80:	68fa      	ldr	r2, [r7, #12]
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	4413      	add	r3, r2
 800eb86:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800eb88:	4b14      	ldr	r3, [pc, #80]	; (800ebdc <prvAddCurrentTaskToDelayedList+0xb4>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	68ba      	ldr	r2, [r7, #8]
 800eb8e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800eb90:	68ba      	ldr	r2, [r7, #8]
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	429a      	cmp	r2, r3
 800eb96:	d209      	bcs.n	800ebac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eb98:	4b13      	ldr	r3, [pc, #76]	; (800ebe8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800eb9a:	681a      	ldr	r2, [r3, #0]
 800eb9c:	4b0f      	ldr	r3, [pc, #60]	; (800ebdc <prvAddCurrentTaskToDelayedList+0xb4>)
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	3304      	adds	r3, #4
 800eba2:	4619      	mov	r1, r3
 800eba4:	4610      	mov	r0, r2
 800eba6:	f7fe f81a 	bl	800cbde <vListInsert>
}
 800ebaa:	e010      	b.n	800ebce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ebac:	4b0f      	ldr	r3, [pc, #60]	; (800ebec <prvAddCurrentTaskToDelayedList+0xc4>)
 800ebae:	681a      	ldr	r2, [r3, #0]
 800ebb0:	4b0a      	ldr	r3, [pc, #40]	; (800ebdc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	3304      	adds	r3, #4
 800ebb6:	4619      	mov	r1, r3
 800ebb8:	4610      	mov	r0, r2
 800ebba:	f7fe f810 	bl	800cbde <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ebbe:	4b0c      	ldr	r3, [pc, #48]	; (800ebf0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	68ba      	ldr	r2, [r7, #8]
 800ebc4:	429a      	cmp	r2, r3
 800ebc6:	d202      	bcs.n	800ebce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ebc8:	4a09      	ldr	r2, [pc, #36]	; (800ebf0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ebca:	68bb      	ldr	r3, [r7, #8]
 800ebcc:	6013      	str	r3, [r2, #0]
}
 800ebce:	bf00      	nop
 800ebd0:	3710      	adds	r7, #16
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	bd80      	pop	{r7, pc}
 800ebd6:	bf00      	nop
 800ebd8:	20000c90 	.word	0x20000c90
 800ebdc:	20000b8c 	.word	0x20000b8c
 800ebe0:	20000c94 	.word	0x20000c94
 800ebe4:	20000c78 	.word	0x20000c78
 800ebe8:	20000c48 	.word	0x20000c48
 800ebec:	20000c44 	.word	0x20000c44
 800ebf0:	20000cac 	.word	0x20000cac

0800ebf4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ebf4:	b480      	push	{r7}
 800ebf6:	b085      	sub	sp, #20
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	60f8      	str	r0, [r7, #12]
 800ebfc:	60b9      	str	r1, [r7, #8]
 800ebfe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	3b04      	subs	r3, #4
 800ec04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ec0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	3b04      	subs	r3, #4
 800ec12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ec14:	68bb      	ldr	r3, [r7, #8]
 800ec16:	f023 0201 	bic.w	r2, r3, #1
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	3b04      	subs	r3, #4
 800ec22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ec24:	4a0c      	ldr	r2, [pc, #48]	; (800ec58 <pxPortInitialiseStack+0x64>)
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	3b14      	subs	r3, #20
 800ec2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ec30:	687a      	ldr	r2, [r7, #4]
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	3b04      	subs	r3, #4
 800ec3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	f06f 0202 	mvn.w	r2, #2
 800ec42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	3b20      	subs	r3, #32
 800ec48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
}
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	3714      	adds	r7, #20
 800ec50:	46bd      	mov	sp, r7
 800ec52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec56:	4770      	bx	lr
 800ec58:	0800ec5d 	.word	0x0800ec5d

0800ec5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ec5c:	b480      	push	{r7}
 800ec5e:	b085      	sub	sp, #20
 800ec60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ec62:	2300      	movs	r3, #0
 800ec64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ec66:	4b14      	ldr	r3, [pc, #80]	; (800ecb8 <prvTaskExitError+0x5c>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec6e:	d00c      	beq.n	800ec8a <prvTaskExitError+0x2e>
	__asm volatile
 800ec70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec74:	b672      	cpsid	i
 800ec76:	f383 8811 	msr	BASEPRI, r3
 800ec7a:	f3bf 8f6f 	isb	sy
 800ec7e:	f3bf 8f4f 	dsb	sy
 800ec82:	b662      	cpsie	i
 800ec84:	60fb      	str	r3, [r7, #12]
}
 800ec86:	bf00      	nop
 800ec88:	e7fe      	b.n	800ec88 <prvTaskExitError+0x2c>
	__asm volatile
 800ec8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec8e:	b672      	cpsid	i
 800ec90:	f383 8811 	msr	BASEPRI, r3
 800ec94:	f3bf 8f6f 	isb	sy
 800ec98:	f3bf 8f4f 	dsb	sy
 800ec9c:	b662      	cpsie	i
 800ec9e:	60bb      	str	r3, [r7, #8]
}
 800eca0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800eca2:	bf00      	nop
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d0fc      	beq.n	800eca4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ecaa:	bf00      	nop
 800ecac:	bf00      	nop
 800ecae:	3714      	adds	r7, #20
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb6:	4770      	bx	lr
 800ecb8:	20000024 	.word	0x20000024
 800ecbc:	00000000 	.word	0x00000000

0800ecc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ecc0:	4b07      	ldr	r3, [pc, #28]	; (800ece0 <pxCurrentTCBConst2>)
 800ecc2:	6819      	ldr	r1, [r3, #0]
 800ecc4:	6808      	ldr	r0, [r1, #0]
 800ecc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecca:	f380 8809 	msr	PSP, r0
 800ecce:	f3bf 8f6f 	isb	sy
 800ecd2:	f04f 0000 	mov.w	r0, #0
 800ecd6:	f380 8811 	msr	BASEPRI, r0
 800ecda:	4770      	bx	lr
 800ecdc:	f3af 8000 	nop.w

0800ece0 <pxCurrentTCBConst2>:
 800ece0:	20000b8c 	.word	0x20000b8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ece4:	bf00      	nop
 800ece6:	bf00      	nop

0800ece8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ece8:	4808      	ldr	r0, [pc, #32]	; (800ed0c <prvPortStartFirstTask+0x24>)
 800ecea:	6800      	ldr	r0, [r0, #0]
 800ecec:	6800      	ldr	r0, [r0, #0]
 800ecee:	f380 8808 	msr	MSP, r0
 800ecf2:	f04f 0000 	mov.w	r0, #0
 800ecf6:	f380 8814 	msr	CONTROL, r0
 800ecfa:	b662      	cpsie	i
 800ecfc:	b661      	cpsie	f
 800ecfe:	f3bf 8f4f 	dsb	sy
 800ed02:	f3bf 8f6f 	isb	sy
 800ed06:	df00      	svc	0
 800ed08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ed0a:	bf00      	nop
 800ed0c:	e000ed08 	.word	0xe000ed08

0800ed10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b084      	sub	sp, #16
 800ed14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ed16:	4b37      	ldr	r3, [pc, #220]	; (800edf4 <xPortStartScheduler+0xe4>)
 800ed18:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	781b      	ldrb	r3, [r3, #0]
 800ed1e:	b2db      	uxtb	r3, r3
 800ed20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	22ff      	movs	r2, #255	; 0xff
 800ed26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	781b      	ldrb	r3, [r3, #0]
 800ed2c:	b2db      	uxtb	r3, r3
 800ed2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ed30:	78fb      	ldrb	r3, [r7, #3]
 800ed32:	b2db      	uxtb	r3, r3
 800ed34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ed38:	b2da      	uxtb	r2, r3
 800ed3a:	4b2f      	ldr	r3, [pc, #188]	; (800edf8 <xPortStartScheduler+0xe8>)
 800ed3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ed3e:	4b2f      	ldr	r3, [pc, #188]	; (800edfc <xPortStartScheduler+0xec>)
 800ed40:	2207      	movs	r2, #7
 800ed42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ed44:	e009      	b.n	800ed5a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ed46:	4b2d      	ldr	r3, [pc, #180]	; (800edfc <xPortStartScheduler+0xec>)
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	3b01      	subs	r3, #1
 800ed4c:	4a2b      	ldr	r2, [pc, #172]	; (800edfc <xPortStartScheduler+0xec>)
 800ed4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ed50:	78fb      	ldrb	r3, [r7, #3]
 800ed52:	b2db      	uxtb	r3, r3
 800ed54:	005b      	lsls	r3, r3, #1
 800ed56:	b2db      	uxtb	r3, r3
 800ed58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ed5a:	78fb      	ldrb	r3, [r7, #3]
 800ed5c:	b2db      	uxtb	r3, r3
 800ed5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed62:	2b80      	cmp	r3, #128	; 0x80
 800ed64:	d0ef      	beq.n	800ed46 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ed66:	4b25      	ldr	r3, [pc, #148]	; (800edfc <xPortStartScheduler+0xec>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	f1c3 0307 	rsb	r3, r3, #7
 800ed6e:	2b04      	cmp	r3, #4
 800ed70:	d00c      	beq.n	800ed8c <xPortStartScheduler+0x7c>
	__asm volatile
 800ed72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed76:	b672      	cpsid	i
 800ed78:	f383 8811 	msr	BASEPRI, r3
 800ed7c:	f3bf 8f6f 	isb	sy
 800ed80:	f3bf 8f4f 	dsb	sy
 800ed84:	b662      	cpsie	i
 800ed86:	60bb      	str	r3, [r7, #8]
}
 800ed88:	bf00      	nop
 800ed8a:	e7fe      	b.n	800ed8a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ed8c:	4b1b      	ldr	r3, [pc, #108]	; (800edfc <xPortStartScheduler+0xec>)
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	021b      	lsls	r3, r3, #8
 800ed92:	4a1a      	ldr	r2, [pc, #104]	; (800edfc <xPortStartScheduler+0xec>)
 800ed94:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ed96:	4b19      	ldr	r3, [pc, #100]	; (800edfc <xPortStartScheduler+0xec>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ed9e:	4a17      	ldr	r2, [pc, #92]	; (800edfc <xPortStartScheduler+0xec>)
 800eda0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	b2da      	uxtb	r2, r3
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800edaa:	4b15      	ldr	r3, [pc, #84]	; (800ee00 <xPortStartScheduler+0xf0>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	4a14      	ldr	r2, [pc, #80]	; (800ee00 <xPortStartScheduler+0xf0>)
 800edb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800edb4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800edb6:	4b12      	ldr	r3, [pc, #72]	; (800ee00 <xPortStartScheduler+0xf0>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	4a11      	ldr	r2, [pc, #68]	; (800ee00 <xPortStartScheduler+0xf0>)
 800edbc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800edc0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800edc2:	f000 f8dd 	bl	800ef80 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800edc6:	4b0f      	ldr	r3, [pc, #60]	; (800ee04 <xPortStartScheduler+0xf4>)
 800edc8:	2200      	movs	r2, #0
 800edca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800edcc:	f000 f8fc 	bl	800efc8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800edd0:	4b0d      	ldr	r3, [pc, #52]	; (800ee08 <xPortStartScheduler+0xf8>)
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	4a0c      	ldr	r2, [pc, #48]	; (800ee08 <xPortStartScheduler+0xf8>)
 800edd6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800edda:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800eddc:	f7ff ff84 	bl	800ece8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ede0:	f7ff fa5a 	bl	800e298 <vTaskSwitchContext>
	prvTaskExitError();
 800ede4:	f7ff ff3a 	bl	800ec5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ede8:	2300      	movs	r3, #0
}
 800edea:	4618      	mov	r0, r3
 800edec:	3710      	adds	r7, #16
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}
 800edf2:	bf00      	nop
 800edf4:	e000e400 	.word	0xe000e400
 800edf8:	20000cb8 	.word	0x20000cb8
 800edfc:	20000cbc 	.word	0x20000cbc
 800ee00:	e000ed20 	.word	0xe000ed20
 800ee04:	20000024 	.word	0x20000024
 800ee08:	e000ef34 	.word	0xe000ef34

0800ee0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ee0c:	b480      	push	{r7}
 800ee0e:	b083      	sub	sp, #12
 800ee10:	af00      	add	r7, sp, #0
	__asm volatile
 800ee12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee16:	b672      	cpsid	i
 800ee18:	f383 8811 	msr	BASEPRI, r3
 800ee1c:	f3bf 8f6f 	isb	sy
 800ee20:	f3bf 8f4f 	dsb	sy
 800ee24:	b662      	cpsie	i
 800ee26:	607b      	str	r3, [r7, #4]
}
 800ee28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ee2a:	4b10      	ldr	r3, [pc, #64]	; (800ee6c <vPortEnterCritical+0x60>)
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	3301      	adds	r3, #1
 800ee30:	4a0e      	ldr	r2, [pc, #56]	; (800ee6c <vPortEnterCritical+0x60>)
 800ee32:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ee34:	4b0d      	ldr	r3, [pc, #52]	; (800ee6c <vPortEnterCritical+0x60>)
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	2b01      	cmp	r3, #1
 800ee3a:	d111      	bne.n	800ee60 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ee3c:	4b0c      	ldr	r3, [pc, #48]	; (800ee70 <vPortEnterCritical+0x64>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	b2db      	uxtb	r3, r3
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d00c      	beq.n	800ee60 <vPortEnterCritical+0x54>
	__asm volatile
 800ee46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee4a:	b672      	cpsid	i
 800ee4c:	f383 8811 	msr	BASEPRI, r3
 800ee50:	f3bf 8f6f 	isb	sy
 800ee54:	f3bf 8f4f 	dsb	sy
 800ee58:	b662      	cpsie	i
 800ee5a:	603b      	str	r3, [r7, #0]
}
 800ee5c:	bf00      	nop
 800ee5e:	e7fe      	b.n	800ee5e <vPortEnterCritical+0x52>
	}
}
 800ee60:	bf00      	nop
 800ee62:	370c      	adds	r7, #12
 800ee64:	46bd      	mov	sp, r7
 800ee66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6a:	4770      	bx	lr
 800ee6c:	20000024 	.word	0x20000024
 800ee70:	e000ed04 	.word	0xe000ed04

0800ee74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ee74:	b480      	push	{r7}
 800ee76:	b083      	sub	sp, #12
 800ee78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ee7a:	4b13      	ldr	r3, [pc, #76]	; (800eec8 <vPortExitCritical+0x54>)
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d10c      	bne.n	800ee9c <vPortExitCritical+0x28>
	__asm volatile
 800ee82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee86:	b672      	cpsid	i
 800ee88:	f383 8811 	msr	BASEPRI, r3
 800ee8c:	f3bf 8f6f 	isb	sy
 800ee90:	f3bf 8f4f 	dsb	sy
 800ee94:	b662      	cpsie	i
 800ee96:	607b      	str	r3, [r7, #4]
}
 800ee98:	bf00      	nop
 800ee9a:	e7fe      	b.n	800ee9a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800ee9c:	4b0a      	ldr	r3, [pc, #40]	; (800eec8 <vPortExitCritical+0x54>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	3b01      	subs	r3, #1
 800eea2:	4a09      	ldr	r2, [pc, #36]	; (800eec8 <vPortExitCritical+0x54>)
 800eea4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800eea6:	4b08      	ldr	r3, [pc, #32]	; (800eec8 <vPortExitCritical+0x54>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d105      	bne.n	800eeba <vPortExitCritical+0x46>
 800eeae:	2300      	movs	r3, #0
 800eeb0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	f383 8811 	msr	BASEPRI, r3
}
 800eeb8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800eeba:	bf00      	nop
 800eebc:	370c      	adds	r7, #12
 800eebe:	46bd      	mov	sp, r7
 800eec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec4:	4770      	bx	lr
 800eec6:	bf00      	nop
 800eec8:	20000024 	.word	0x20000024
 800eecc:	00000000 	.word	0x00000000

0800eed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800eed0:	f3ef 8009 	mrs	r0, PSP
 800eed4:	f3bf 8f6f 	isb	sy
 800eed8:	4b15      	ldr	r3, [pc, #84]	; (800ef30 <pxCurrentTCBConst>)
 800eeda:	681a      	ldr	r2, [r3, #0]
 800eedc:	f01e 0f10 	tst.w	lr, #16
 800eee0:	bf08      	it	eq
 800eee2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800eee6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eeea:	6010      	str	r0, [r2, #0]
 800eeec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800eef0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800eef4:	b672      	cpsid	i
 800eef6:	f380 8811 	msr	BASEPRI, r0
 800eefa:	f3bf 8f4f 	dsb	sy
 800eefe:	f3bf 8f6f 	isb	sy
 800ef02:	b662      	cpsie	i
 800ef04:	f7ff f9c8 	bl	800e298 <vTaskSwitchContext>
 800ef08:	f04f 0000 	mov.w	r0, #0
 800ef0c:	f380 8811 	msr	BASEPRI, r0
 800ef10:	bc09      	pop	{r0, r3}
 800ef12:	6819      	ldr	r1, [r3, #0]
 800ef14:	6808      	ldr	r0, [r1, #0]
 800ef16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef1a:	f01e 0f10 	tst.w	lr, #16
 800ef1e:	bf08      	it	eq
 800ef20:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ef24:	f380 8809 	msr	PSP, r0
 800ef28:	f3bf 8f6f 	isb	sy
 800ef2c:	4770      	bx	lr
 800ef2e:	bf00      	nop

0800ef30 <pxCurrentTCBConst>:
 800ef30:	20000b8c 	.word	0x20000b8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ef34:	bf00      	nop
 800ef36:	bf00      	nop

0800ef38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b082      	sub	sp, #8
 800ef3c:	af00      	add	r7, sp, #0
	__asm volatile
 800ef3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef42:	b672      	cpsid	i
 800ef44:	f383 8811 	msr	BASEPRI, r3
 800ef48:	f3bf 8f6f 	isb	sy
 800ef4c:	f3bf 8f4f 	dsb	sy
 800ef50:	b662      	cpsie	i
 800ef52:	607b      	str	r3, [r7, #4]
}
 800ef54:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ef56:	f7ff f8e5 	bl	800e124 <xTaskIncrementTick>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d003      	beq.n	800ef68 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ef60:	4b06      	ldr	r3, [pc, #24]	; (800ef7c <SysTick_Handler+0x44>)
 800ef62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef66:	601a      	str	r2, [r3, #0]
 800ef68:	2300      	movs	r3, #0
 800ef6a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ef6c:	683b      	ldr	r3, [r7, #0]
 800ef6e:	f383 8811 	msr	BASEPRI, r3
}
 800ef72:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ef74:	bf00      	nop
 800ef76:	3708      	adds	r7, #8
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	bd80      	pop	{r7, pc}
 800ef7c:	e000ed04 	.word	0xe000ed04

0800ef80 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ef80:	b480      	push	{r7}
 800ef82:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ef84:	4b0b      	ldr	r3, [pc, #44]	; (800efb4 <vPortSetupTimerInterrupt+0x34>)
 800ef86:	2200      	movs	r2, #0
 800ef88:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ef8a:	4b0b      	ldr	r3, [pc, #44]	; (800efb8 <vPortSetupTimerInterrupt+0x38>)
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ef90:	4b0a      	ldr	r3, [pc, #40]	; (800efbc <vPortSetupTimerInterrupt+0x3c>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	4a0a      	ldr	r2, [pc, #40]	; (800efc0 <vPortSetupTimerInterrupt+0x40>)
 800ef96:	fba2 2303 	umull	r2, r3, r2, r3
 800ef9a:	099b      	lsrs	r3, r3, #6
 800ef9c:	4a09      	ldr	r2, [pc, #36]	; (800efc4 <vPortSetupTimerInterrupt+0x44>)
 800ef9e:	3b01      	subs	r3, #1
 800efa0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800efa2:	4b04      	ldr	r3, [pc, #16]	; (800efb4 <vPortSetupTimerInterrupt+0x34>)
 800efa4:	2207      	movs	r2, #7
 800efa6:	601a      	str	r2, [r3, #0]
}
 800efa8:	bf00      	nop
 800efaa:	46bd      	mov	sp, r7
 800efac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb0:	4770      	bx	lr
 800efb2:	bf00      	nop
 800efb4:	e000e010 	.word	0xe000e010
 800efb8:	e000e018 	.word	0xe000e018
 800efbc:	20000018 	.word	0x20000018
 800efc0:	10624dd3 	.word	0x10624dd3
 800efc4:	e000e014 	.word	0xe000e014

0800efc8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800efc8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800efd8 <vPortEnableVFP+0x10>
 800efcc:	6801      	ldr	r1, [r0, #0]
 800efce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800efd2:	6001      	str	r1, [r0, #0]
 800efd4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800efd6:	bf00      	nop
 800efd8:	e000ed88 	.word	0xe000ed88

0800efdc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800efdc:	b480      	push	{r7}
 800efde:	b085      	sub	sp, #20
 800efe0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800efe2:	f3ef 8305 	mrs	r3, IPSR
 800efe6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	2b0f      	cmp	r3, #15
 800efec:	d916      	bls.n	800f01c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800efee:	4a19      	ldr	r2, [pc, #100]	; (800f054 <vPortValidateInterruptPriority+0x78>)
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	4413      	add	r3, r2
 800eff4:	781b      	ldrb	r3, [r3, #0]
 800eff6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800eff8:	4b17      	ldr	r3, [pc, #92]	; (800f058 <vPortValidateInterruptPriority+0x7c>)
 800effa:	781b      	ldrb	r3, [r3, #0]
 800effc:	7afa      	ldrb	r2, [r7, #11]
 800effe:	429a      	cmp	r2, r3
 800f000:	d20c      	bcs.n	800f01c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800f002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f006:	b672      	cpsid	i
 800f008:	f383 8811 	msr	BASEPRI, r3
 800f00c:	f3bf 8f6f 	isb	sy
 800f010:	f3bf 8f4f 	dsb	sy
 800f014:	b662      	cpsie	i
 800f016:	607b      	str	r3, [r7, #4]
}
 800f018:	bf00      	nop
 800f01a:	e7fe      	b.n	800f01a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f01c:	4b0f      	ldr	r3, [pc, #60]	; (800f05c <vPortValidateInterruptPriority+0x80>)
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f024:	4b0e      	ldr	r3, [pc, #56]	; (800f060 <vPortValidateInterruptPriority+0x84>)
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	429a      	cmp	r2, r3
 800f02a:	d90c      	bls.n	800f046 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800f02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f030:	b672      	cpsid	i
 800f032:	f383 8811 	msr	BASEPRI, r3
 800f036:	f3bf 8f6f 	isb	sy
 800f03a:	f3bf 8f4f 	dsb	sy
 800f03e:	b662      	cpsie	i
 800f040:	603b      	str	r3, [r7, #0]
}
 800f042:	bf00      	nop
 800f044:	e7fe      	b.n	800f044 <vPortValidateInterruptPriority+0x68>
	}
 800f046:	bf00      	nop
 800f048:	3714      	adds	r7, #20
 800f04a:	46bd      	mov	sp, r7
 800f04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f050:	4770      	bx	lr
 800f052:	bf00      	nop
 800f054:	e000e3f0 	.word	0xe000e3f0
 800f058:	20000cb8 	.word	0x20000cb8
 800f05c:	e000ed0c 	.word	0xe000ed0c
 800f060:	20000cbc 	.word	0x20000cbc

0800f064 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b08a      	sub	sp, #40	; 0x28
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f06c:	2300      	movs	r3, #0
 800f06e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f070:	f7fe ff8a 	bl	800df88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f074:	4b5e      	ldr	r3, [pc, #376]	; (800f1f0 <pvPortMalloc+0x18c>)
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d101      	bne.n	800f080 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f07c:	f000 f920 	bl	800f2c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f080:	4b5c      	ldr	r3, [pc, #368]	; (800f1f4 <pvPortMalloc+0x190>)
 800f082:	681a      	ldr	r2, [r3, #0]
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	4013      	ands	r3, r2
 800f088:	2b00      	cmp	r3, #0
 800f08a:	f040 8092 	bne.w	800f1b2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d01f      	beq.n	800f0d4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800f094:	2208      	movs	r2, #8
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	4413      	add	r3, r2
 800f09a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	f003 0307 	and.w	r3, r3, #7
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d016      	beq.n	800f0d4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	f023 0307 	bic.w	r3, r3, #7
 800f0ac:	3308      	adds	r3, #8
 800f0ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	f003 0307 	and.w	r3, r3, #7
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d00c      	beq.n	800f0d4 <pvPortMalloc+0x70>
	__asm volatile
 800f0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0be:	b672      	cpsid	i
 800f0c0:	f383 8811 	msr	BASEPRI, r3
 800f0c4:	f3bf 8f6f 	isb	sy
 800f0c8:	f3bf 8f4f 	dsb	sy
 800f0cc:	b662      	cpsie	i
 800f0ce:	617b      	str	r3, [r7, #20]
}
 800f0d0:	bf00      	nop
 800f0d2:	e7fe      	b.n	800f0d2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d06b      	beq.n	800f1b2 <pvPortMalloc+0x14e>
 800f0da:	4b47      	ldr	r3, [pc, #284]	; (800f1f8 <pvPortMalloc+0x194>)
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	687a      	ldr	r2, [r7, #4]
 800f0e0:	429a      	cmp	r2, r3
 800f0e2:	d866      	bhi.n	800f1b2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f0e4:	4b45      	ldr	r3, [pc, #276]	; (800f1fc <pvPortMalloc+0x198>)
 800f0e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f0e8:	4b44      	ldr	r3, [pc, #272]	; (800f1fc <pvPortMalloc+0x198>)
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f0ee:	e004      	b.n	800f0fa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800f0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0fc:	685b      	ldr	r3, [r3, #4]
 800f0fe:	687a      	ldr	r2, [r7, #4]
 800f100:	429a      	cmp	r2, r3
 800f102:	d903      	bls.n	800f10c <pvPortMalloc+0xa8>
 800f104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d1f1      	bne.n	800f0f0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f10c:	4b38      	ldr	r3, [pc, #224]	; (800f1f0 <pvPortMalloc+0x18c>)
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f112:	429a      	cmp	r2, r3
 800f114:	d04d      	beq.n	800f1b2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f116:	6a3b      	ldr	r3, [r7, #32]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	2208      	movs	r2, #8
 800f11c:	4413      	add	r3, r2
 800f11e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f122:	681a      	ldr	r2, [r3, #0]
 800f124:	6a3b      	ldr	r3, [r7, #32]
 800f126:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f12a:	685a      	ldr	r2, [r3, #4]
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	1ad2      	subs	r2, r2, r3
 800f130:	2308      	movs	r3, #8
 800f132:	005b      	lsls	r3, r3, #1
 800f134:	429a      	cmp	r2, r3
 800f136:	d921      	bls.n	800f17c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	4413      	add	r3, r2
 800f13e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f140:	69bb      	ldr	r3, [r7, #24]
 800f142:	f003 0307 	and.w	r3, r3, #7
 800f146:	2b00      	cmp	r3, #0
 800f148:	d00c      	beq.n	800f164 <pvPortMalloc+0x100>
	__asm volatile
 800f14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f14e:	b672      	cpsid	i
 800f150:	f383 8811 	msr	BASEPRI, r3
 800f154:	f3bf 8f6f 	isb	sy
 800f158:	f3bf 8f4f 	dsb	sy
 800f15c:	b662      	cpsie	i
 800f15e:	613b      	str	r3, [r7, #16]
}
 800f160:	bf00      	nop
 800f162:	e7fe      	b.n	800f162 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f166:	685a      	ldr	r2, [r3, #4]
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	1ad2      	subs	r2, r2, r3
 800f16c:	69bb      	ldr	r3, [r7, #24]
 800f16e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f172:	687a      	ldr	r2, [r7, #4]
 800f174:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f176:	69b8      	ldr	r0, [r7, #24]
 800f178:	f000 f904 	bl	800f384 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f17c:	4b1e      	ldr	r3, [pc, #120]	; (800f1f8 <pvPortMalloc+0x194>)
 800f17e:	681a      	ldr	r2, [r3, #0]
 800f180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f182:	685b      	ldr	r3, [r3, #4]
 800f184:	1ad3      	subs	r3, r2, r3
 800f186:	4a1c      	ldr	r2, [pc, #112]	; (800f1f8 <pvPortMalloc+0x194>)
 800f188:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f18a:	4b1b      	ldr	r3, [pc, #108]	; (800f1f8 <pvPortMalloc+0x194>)
 800f18c:	681a      	ldr	r2, [r3, #0]
 800f18e:	4b1c      	ldr	r3, [pc, #112]	; (800f200 <pvPortMalloc+0x19c>)
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	429a      	cmp	r2, r3
 800f194:	d203      	bcs.n	800f19e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f196:	4b18      	ldr	r3, [pc, #96]	; (800f1f8 <pvPortMalloc+0x194>)
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	4a19      	ldr	r2, [pc, #100]	; (800f200 <pvPortMalloc+0x19c>)
 800f19c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1a0:	685a      	ldr	r2, [r3, #4]
 800f1a2:	4b14      	ldr	r3, [pc, #80]	; (800f1f4 <pvPortMalloc+0x190>)
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	431a      	orrs	r2, r3
 800f1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f1b2:	f7fe fef7 	bl	800dfa4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800f1b6:	69fb      	ldr	r3, [r7, #28]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d101      	bne.n	800f1c0 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800f1bc:	f7f1 fdee 	bl	8000d9c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f1c0:	69fb      	ldr	r3, [r7, #28]
 800f1c2:	f003 0307 	and.w	r3, r3, #7
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d00c      	beq.n	800f1e4 <pvPortMalloc+0x180>
	__asm volatile
 800f1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1ce:	b672      	cpsid	i
 800f1d0:	f383 8811 	msr	BASEPRI, r3
 800f1d4:	f3bf 8f6f 	isb	sy
 800f1d8:	f3bf 8f4f 	dsb	sy
 800f1dc:	b662      	cpsie	i
 800f1de:	60fb      	str	r3, [r7, #12]
}
 800f1e0:	bf00      	nop
 800f1e2:	e7fe      	b.n	800f1e2 <pvPortMalloc+0x17e>
	return pvReturn;
 800f1e4:	69fb      	ldr	r3, [r7, #28]
}
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	3728      	adds	r7, #40	; 0x28
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	bd80      	pop	{r7, pc}
 800f1ee:	bf00      	nop
 800f1f0:	20008cc8 	.word	0x20008cc8
 800f1f4:	20008cd4 	.word	0x20008cd4
 800f1f8:	20008ccc 	.word	0x20008ccc
 800f1fc:	20008cc0 	.word	0x20008cc0
 800f200:	20008cd0 	.word	0x20008cd0

0800f204 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b086      	sub	sp, #24
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d04c      	beq.n	800f2b0 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f216:	2308      	movs	r3, #8
 800f218:	425b      	negs	r3, r3
 800f21a:	697a      	ldr	r2, [r7, #20]
 800f21c:	4413      	add	r3, r2
 800f21e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f220:	697b      	ldr	r3, [r7, #20]
 800f222:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f224:	693b      	ldr	r3, [r7, #16]
 800f226:	685a      	ldr	r2, [r3, #4]
 800f228:	4b23      	ldr	r3, [pc, #140]	; (800f2b8 <vPortFree+0xb4>)
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	4013      	ands	r3, r2
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d10c      	bne.n	800f24c <vPortFree+0x48>
	__asm volatile
 800f232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f236:	b672      	cpsid	i
 800f238:	f383 8811 	msr	BASEPRI, r3
 800f23c:	f3bf 8f6f 	isb	sy
 800f240:	f3bf 8f4f 	dsb	sy
 800f244:	b662      	cpsie	i
 800f246:	60fb      	str	r3, [r7, #12]
}
 800f248:	bf00      	nop
 800f24a:	e7fe      	b.n	800f24a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f24c:	693b      	ldr	r3, [r7, #16]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d00c      	beq.n	800f26e <vPortFree+0x6a>
	__asm volatile
 800f254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f258:	b672      	cpsid	i
 800f25a:	f383 8811 	msr	BASEPRI, r3
 800f25e:	f3bf 8f6f 	isb	sy
 800f262:	f3bf 8f4f 	dsb	sy
 800f266:	b662      	cpsie	i
 800f268:	60bb      	str	r3, [r7, #8]
}
 800f26a:	bf00      	nop
 800f26c:	e7fe      	b.n	800f26c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f26e:	693b      	ldr	r3, [r7, #16]
 800f270:	685a      	ldr	r2, [r3, #4]
 800f272:	4b11      	ldr	r3, [pc, #68]	; (800f2b8 <vPortFree+0xb4>)
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	4013      	ands	r3, r2
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d019      	beq.n	800f2b0 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f27c:	693b      	ldr	r3, [r7, #16]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d115      	bne.n	800f2b0 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f284:	693b      	ldr	r3, [r7, #16]
 800f286:	685a      	ldr	r2, [r3, #4]
 800f288:	4b0b      	ldr	r3, [pc, #44]	; (800f2b8 <vPortFree+0xb4>)
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	43db      	mvns	r3, r3
 800f28e:	401a      	ands	r2, r3
 800f290:	693b      	ldr	r3, [r7, #16]
 800f292:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f294:	f7fe fe78 	bl	800df88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f298:	693b      	ldr	r3, [r7, #16]
 800f29a:	685a      	ldr	r2, [r3, #4]
 800f29c:	4b07      	ldr	r3, [pc, #28]	; (800f2bc <vPortFree+0xb8>)
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	4413      	add	r3, r2
 800f2a2:	4a06      	ldr	r2, [pc, #24]	; (800f2bc <vPortFree+0xb8>)
 800f2a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f2a6:	6938      	ldr	r0, [r7, #16]
 800f2a8:	f000 f86c 	bl	800f384 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f2ac:	f7fe fe7a 	bl	800dfa4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f2b0:	bf00      	nop
 800f2b2:	3718      	adds	r7, #24
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	bd80      	pop	{r7, pc}
 800f2b8:	20008cd4 	.word	0x20008cd4
 800f2bc:	20008ccc 	.word	0x20008ccc

0800f2c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f2c0:	b480      	push	{r7}
 800f2c2:	b085      	sub	sp, #20
 800f2c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f2c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f2ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f2cc:	4b27      	ldr	r3, [pc, #156]	; (800f36c <prvHeapInit+0xac>)
 800f2ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	f003 0307 	and.w	r3, r3, #7
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d00c      	beq.n	800f2f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	3307      	adds	r3, #7
 800f2de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	f023 0307 	bic.w	r3, r3, #7
 800f2e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f2e8:	68ba      	ldr	r2, [r7, #8]
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	1ad3      	subs	r3, r2, r3
 800f2ee:	4a1f      	ldr	r2, [pc, #124]	; (800f36c <prvHeapInit+0xac>)
 800f2f0:	4413      	add	r3, r2
 800f2f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f2f8:	4a1d      	ldr	r2, [pc, #116]	; (800f370 <prvHeapInit+0xb0>)
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f2fe:	4b1c      	ldr	r3, [pc, #112]	; (800f370 <prvHeapInit+0xb0>)
 800f300:	2200      	movs	r2, #0
 800f302:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	68ba      	ldr	r2, [r7, #8]
 800f308:	4413      	add	r3, r2
 800f30a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f30c:	2208      	movs	r2, #8
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	1a9b      	subs	r3, r3, r2
 800f312:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	f023 0307 	bic.w	r3, r3, #7
 800f31a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	4a15      	ldr	r2, [pc, #84]	; (800f374 <prvHeapInit+0xb4>)
 800f320:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f322:	4b14      	ldr	r3, [pc, #80]	; (800f374 <prvHeapInit+0xb4>)
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	2200      	movs	r2, #0
 800f328:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f32a:	4b12      	ldr	r3, [pc, #72]	; (800f374 <prvHeapInit+0xb4>)
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	2200      	movs	r2, #0
 800f330:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f336:	683b      	ldr	r3, [r7, #0]
 800f338:	68fa      	ldr	r2, [r7, #12]
 800f33a:	1ad2      	subs	r2, r2, r3
 800f33c:	683b      	ldr	r3, [r7, #0]
 800f33e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f340:	4b0c      	ldr	r3, [pc, #48]	; (800f374 <prvHeapInit+0xb4>)
 800f342:	681a      	ldr	r2, [r3, #0]
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	685b      	ldr	r3, [r3, #4]
 800f34c:	4a0a      	ldr	r2, [pc, #40]	; (800f378 <prvHeapInit+0xb8>)
 800f34e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	685b      	ldr	r3, [r3, #4]
 800f354:	4a09      	ldr	r2, [pc, #36]	; (800f37c <prvHeapInit+0xbc>)
 800f356:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f358:	4b09      	ldr	r3, [pc, #36]	; (800f380 <prvHeapInit+0xc0>)
 800f35a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f35e:	601a      	str	r2, [r3, #0]
}
 800f360:	bf00      	nop
 800f362:	3714      	adds	r7, #20
 800f364:	46bd      	mov	sp, r7
 800f366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36a:	4770      	bx	lr
 800f36c:	20000cc0 	.word	0x20000cc0
 800f370:	20008cc0 	.word	0x20008cc0
 800f374:	20008cc8 	.word	0x20008cc8
 800f378:	20008cd0 	.word	0x20008cd0
 800f37c:	20008ccc 	.word	0x20008ccc
 800f380:	20008cd4 	.word	0x20008cd4

0800f384 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f384:	b480      	push	{r7}
 800f386:	b085      	sub	sp, #20
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f38c:	4b28      	ldr	r3, [pc, #160]	; (800f430 <prvInsertBlockIntoFreeList+0xac>)
 800f38e:	60fb      	str	r3, [r7, #12]
 800f390:	e002      	b.n	800f398 <prvInsertBlockIntoFreeList+0x14>
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	60fb      	str	r3, [r7, #12]
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	687a      	ldr	r2, [r7, #4]
 800f39e:	429a      	cmp	r2, r3
 800f3a0:	d8f7      	bhi.n	800f392 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	685b      	ldr	r3, [r3, #4]
 800f3aa:	68ba      	ldr	r2, [r7, #8]
 800f3ac:	4413      	add	r3, r2
 800f3ae:	687a      	ldr	r2, [r7, #4]
 800f3b0:	429a      	cmp	r2, r3
 800f3b2:	d108      	bne.n	800f3c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	685a      	ldr	r2, [r3, #4]
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	685b      	ldr	r3, [r3, #4]
 800f3bc:	441a      	add	r2, r3
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	685b      	ldr	r3, [r3, #4]
 800f3ce:	68ba      	ldr	r2, [r7, #8]
 800f3d0:	441a      	add	r2, r3
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	429a      	cmp	r2, r3
 800f3d8:	d118      	bne.n	800f40c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	681a      	ldr	r2, [r3, #0]
 800f3de:	4b15      	ldr	r3, [pc, #84]	; (800f434 <prvInsertBlockIntoFreeList+0xb0>)
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	429a      	cmp	r2, r3
 800f3e4:	d00d      	beq.n	800f402 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	685a      	ldr	r2, [r3, #4]
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	685b      	ldr	r3, [r3, #4]
 800f3f0:	441a      	add	r2, r3
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	681a      	ldr	r2, [r3, #0]
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	601a      	str	r2, [r3, #0]
 800f400:	e008      	b.n	800f414 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f402:	4b0c      	ldr	r3, [pc, #48]	; (800f434 <prvInsertBlockIntoFreeList+0xb0>)
 800f404:	681a      	ldr	r2, [r3, #0]
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	601a      	str	r2, [r3, #0]
 800f40a:	e003      	b.n	800f414 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	681a      	ldr	r2, [r3, #0]
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f414:	68fa      	ldr	r2, [r7, #12]
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	429a      	cmp	r2, r3
 800f41a:	d002      	beq.n	800f422 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	687a      	ldr	r2, [r7, #4]
 800f420:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f422:	bf00      	nop
 800f424:	3714      	adds	r7, #20
 800f426:	46bd      	mov	sp, r7
 800f428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42c:	4770      	bx	lr
 800f42e:	bf00      	nop
 800f430:	20008cc0 	.word	0x20008cc0
 800f434:	20008cc8 	.word	0x20008cc8

0800f438 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800f43c:	f006 ff92 	bl	8016364 <touchgfx_init>
}
 800f440:	bf00      	nop
 800f442:	bd80      	pop	{r7, pc}

0800f444 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800f444:	b580      	push	{r7, lr}
 800f446:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 800f448:	f006 ffb6 	bl	80163b8 <touchgfx_taskEntry>
}
 800f44c:	bf00      	nop
 800f44e:	bd80      	pop	{r7, pc}

0800f450 <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 800f450:	b480      	push	{r7}
 800f452:	b083      	sub	sp, #12
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
    {
 800f458:	4a04      	ldr	r2, [pc, #16]	; (800f46c <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	601a      	str	r2, [r3, #0]
    }
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	4618      	mov	r0, r3
 800f462:	370c      	adds	r7, #12
 800f464:	46bd      	mov	sp, r7
 800f466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46a:	4770      	bx	lr
 800f46c:	0802831c 	.word	0x0802831c

0800f470 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800f470:	b580      	push	{r7, lr}
 800f472:	b082      	sub	sp, #8
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
    }
 800f478:	6878      	ldr	r0, [r7, #4]
 800f47a:	f7ff ffe9 	bl	800f450 <_ZN8touchgfx12FontProviderD1Ev>
 800f47e:	2104      	movs	r1, #4
 800f480:	6878      	ldr	r0, [r7, #4]
 800f482:	f017 f98d 	bl	80267a0 <_ZdlPvj>
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	4618      	mov	r0, r3
 800f48a:	3708      	adds	r7, #8
 800f48c:	46bd      	mov	sp, r7
 800f48e:	bd80      	pop	{r7, pc}

0800f490 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b082      	sub	sp, #8
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
 800f498:	460b      	mov	r3, r1
 800f49a:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800f49c:	887b      	ldrh	r3, [r7, #2]
 800f49e:	2b07      	cmp	r3, #7
 800f4a0:	d83a      	bhi.n	800f518 <_ZN23ApplicationFontProvider7getFontEt+0x88>
 800f4a2:	a201      	add	r2, pc, #4	; (adr r2, 800f4a8 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 800f4a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4a8:	0800f4c9 	.word	0x0800f4c9
 800f4ac:	0800f4d3 	.word	0x0800f4d3
 800f4b0:	0800f4dd 	.word	0x0800f4dd
 800f4b4:	0800f4e7 	.word	0x0800f4e7
 800f4b8:	0800f4f1 	.word	0x0800f4f1
 800f4bc:	0800f4fb 	.word	0x0800f4fb
 800f4c0:	0800f505 	.word	0x0800f505
 800f4c4:	0800f50f 	.word	0x0800f50f
    {
    case Typography::DEFAULT:
        // Asap_Bold_14_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800f4c8:	f004 fdc8 	bl	801405c <_ZN17TypedTextDatabase8getFontsEv>
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	e023      	b.n	800f51a <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPMTEXT:
        // Asap_Bold_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800f4d2:	f004 fdc3 	bl	801405c <_ZN17TypedTextDatabase8getFontsEv>
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	685b      	ldr	r3, [r3, #4]
 800f4da:	e01e      	b.n	800f51a <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::VALUES:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800f4dc:	f004 fdbe 	bl	801405c <_ZN17TypedTextDatabase8getFontsEv>
 800f4e0:	4603      	mov	r3, r0
 800f4e2:	689b      	ldr	r3, [r3, #8]
 800f4e4:	e019      	b.n	800f51a <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LAMBDA:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800f4e6:	f004 fdb9 	bl	801405c <_ZN17TypedTextDatabase8getFontsEv>
 800f4ea:	4603      	mov	r3, r0
 800f4ec:	689b      	ldr	r3, [r3, #8]
 800f4ee:	e014      	b.n	800f51a <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::SMALL:
        // Asap_Bold_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800f4f0:	f004 fdb4 	bl	801405c <_ZN17TypedTextDatabase8getFontsEv>
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	68db      	ldr	r3, [r3, #12]
 800f4f8:	e00f      	b.n	800f51a <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LARGE:
        // Asap_Bold_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800f4fa:	f004 fdaf 	bl	801405c <_ZN17TypedTextDatabase8getFontsEv>
 800f4fe:	4603      	mov	r3, r0
 800f500:	691b      	ldr	r3, [r3, #16]
 800f502:	e00a      	b.n	800f51a <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_LETTERS:
        // Asap_Bold_21_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 800f504:	f004 fdaa 	bl	801405c <_ZN17TypedTextDatabase8getFontsEv>
 800f508:	4603      	mov	r3, r0
 800f50a:	695b      	ldr	r3, [r3, #20]
 800f50c:	e005      	b.n	800f51a <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_DESCRIPTOR:
        // Asap_Bold_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 800f50e:	f004 fda5 	bl	801405c <_ZN17TypedTextDatabase8getFontsEv>
 800f512:	4603      	mov	r3, r0
 800f514:	699b      	ldr	r3, [r3, #24]
 800f516:	e000      	b.n	800f51a <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    default:
        return 0;
 800f518:	2300      	movs	r3, #0
    }
}
 800f51a:	4618      	mov	r0, r3
 800f51c:	3708      	adds	r7, #8
 800f51e:	46bd      	mov	sp, r7
 800f520:	bd80      	pop	{r7, pc}
 800f522:	bf00      	nop

0800f524 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId RPM_LETTERS = 5;    // Asap_Bold_21_4bpp
    static const touchgfx::FontId RPM_DESCRIPTOR = 6; // Asap_Bold_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 7;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800f524:	b580      	push	{r7, lr}
 800f526:	b082      	sub	sp, #8
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
 800f52c:	4a05      	ldr	r2, [pc, #20]	; (800f544 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	601a      	str	r2, [r3, #0]
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	4618      	mov	r0, r3
 800f536:	f7ff ff8b 	bl	800f450 <_ZN8touchgfx12FontProviderD1Ev>
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	4618      	mov	r0, r3
 800f53e:	3708      	adds	r7, #8
 800f540:	46bd      	mov	sp, r7
 800f542:	bd80      	pop	{r7, pc}
 800f544:	08028308 	.word	0x08028308

0800f548 <_ZN23ApplicationFontProviderD0Ev>:
 800f548:	b580      	push	{r7, lr}
 800f54a:	b082      	sub	sp, #8
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
 800f550:	6878      	ldr	r0, [r7, #4]
 800f552:	f7ff ffe7 	bl	800f524 <_ZN23ApplicationFontProviderD1Ev>
 800f556:	2104      	movs	r1, #4
 800f558:	6878      	ldr	r0, [r7, #4]
 800f55a:	f017 f921 	bl	80267a0 <_ZdlPvj>
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	4618      	mov	r0, r3
 800f562:	3708      	adds	r7, #8
 800f564:	46bd      	mov	sp, r7
 800f566:	bd80      	pop	{r7, pc}

0800f568 <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 800f568:	b480      	push	{r7}
 800f56a:	b083      	sub	sp, #12
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
 800f570:	4a04      	ldr	r2, [pc, #16]	; (800f584 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	601a      	str	r2, [r3, #0]
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	4618      	mov	r0, r3
 800f57a:	370c      	adds	r7, #12
 800f57c:	46bd      	mov	sp, r7
 800f57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f582:	4770      	bx	lr
 800f584:	0802a344 	.word	0x0802a344

0800f588 <_ZN8touchgfx4FontD0Ev>:
 800f588:	b580      	push	{r7, lr}
 800f58a:	b082      	sub	sp, #8
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
 800f590:	6878      	ldr	r0, [r7, #4]
 800f592:	f7ff ffe9 	bl	800f568 <_ZN8touchgfx4FontD1Ev>
 800f596:	2110      	movs	r1, #16
 800f598:	6878      	ldr	r0, [r7, #4]
 800f59a:	f017 f901 	bl	80267a0 <_ZdlPvj>
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	3708      	adds	r7, #8
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	bd80      	pop	{r7, pc}

0800f5a8 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800f5a8:	b590      	push	{r4, r7, lr}
 800f5aa:	b087      	sub	sp, #28
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
 800f5b0:	460b      	mov	r3, r1
 800f5b2:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	3308      	adds	r3, #8
 800f5c2:	681c      	ldr	r4, [r3, #0]
 800f5c4:	f107 030f 	add.w	r3, r7, #15
 800f5c8:	f107 0210 	add.w	r2, r7, #16
 800f5cc:	8879      	ldrh	r1, [r7, #2]
 800f5ce:	6878      	ldr	r0, [r7, #4]
 800f5d0:	47a0      	blx	r4
 800f5d2:	6178      	str	r0, [r7, #20]
        return glyph;
 800f5d4:	697b      	ldr	r3, [r7, #20]
    }
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	371c      	adds	r7, #28
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	bd90      	pop	{r4, r7, pc}

0800f5de <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800f5de:	b480      	push	{r7}
 800f5e0:	b083      	sub	sp, #12
 800f5e2:	af00      	add	r7, sp, #0
 800f5e4:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	895b      	ldrh	r3, [r3, #10]
    }
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	370c      	adds	r7, #12
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f4:	4770      	bx	lr

0800f5f6 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800f5f6:	b480      	push	{r7}
 800f5f8:	b083      	sub	sp, #12
 800f5fa:	af00      	add	r7, sp, #0
 800f5fc:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	899b      	ldrh	r3, [r3, #12]
    }
 800f602:	4618      	mov	r0, r3
 800f604:	370c      	adds	r7, #12
 800f606:	46bd      	mov	sp, r7
 800f608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60c:	4770      	bx	lr

0800f60e <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 800f60e:	b480      	push	{r7}
 800f610:	b083      	sub	sp, #12
 800f612:	af00      	add	r7, sp, #0
 800f614:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	889b      	ldrh	r3, [r3, #4]
    }
 800f61a:	4618      	mov	r0, r3
 800f61c:	370c      	adds	r7, #12
 800f61e:	46bd      	mov	sp, r7
 800f620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f624:	4770      	bx	lr

0800f626 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 800f626:	b480      	push	{r7}
 800f628:	b083      	sub	sp, #12
 800f62a:	af00      	add	r7, sp, #0
 800f62c:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	889a      	ldrh	r2, [r3, #4]
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	799b      	ldrb	r3, [r3, #6]
 800f636:	b29b      	uxth	r3, r3
 800f638:	4413      	add	r3, r2
 800f63a:	b29b      	uxth	r3, r3
    }
 800f63c:	4618      	mov	r0, r3
 800f63e:	370c      	adds	r7, #12
 800f640:	46bd      	mov	sp, r7
 800f642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f646:	4770      	bx	lr

0800f648 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 800f648:	b480      	push	{r7}
 800f64a:	b083      	sub	sp, #12
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	79db      	ldrb	r3, [r3, #7]
 800f654:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800f658:	b2db      	uxtb	r3, r3
    }
 800f65a:	4618      	mov	r0, r3
 800f65c:	370c      	adds	r7, #12
 800f65e:	46bd      	mov	sp, r7
 800f660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f664:	4770      	bx	lr

0800f666 <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 800f666:	b480      	push	{r7}
 800f668:	b083      	sub	sp, #12
 800f66a:	af00      	add	r7, sp, #0
 800f66c:	6078      	str	r0, [r7, #4]
    {
        return a4;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	79db      	ldrb	r3, [r3, #7]
 800f672:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f676:	b2db      	uxtb	r3, r3
    }
 800f678:	4618      	mov	r0, r3
 800f67a:	370c      	adds	r7, #12
 800f67c:	46bd      	mov	sp, r7
 800f67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f682:	4770      	bx	lr

0800f684 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 800f684:	b580      	push	{r7, lr}
 800f686:	b082      	sub	sp, #8
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
 800f68c:	4a05      	ldr	r2, [pc, #20]	; (800f6a4 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	601a      	str	r2, [r3, #0]
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	4618      	mov	r0, r3
 800f696:	f7ff ff67 	bl	800f568 <_ZN8touchgfx4FontD1Ev>
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	4618      	mov	r0, r3
 800f69e:	3708      	adds	r7, #8
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	bd80      	pop	{r7, pc}
 800f6a4:	0802a3fc 	.word	0x0802a3fc

0800f6a8 <_ZN8touchgfx9ConstFontD0Ev>:
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b082      	sub	sp, #8
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
 800f6b0:	6878      	ldr	r0, [r7, #4]
 800f6b2:	f7ff ffe7 	bl	800f684 <_ZN8touchgfx9ConstFontD1Ev>
 800f6b6:	2118      	movs	r1, #24
 800f6b8:	6878      	ldr	r0, [r7, #4]
 800f6ba:	f017 f871 	bl	80267a0 <_ZdlPvj>
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	3708      	adds	r7, #8
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd80      	pop	{r7, pc}

0800f6c8 <_ZN8touchgfx13GeneratedFontD1Ev>:
 *        An GeneratedFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b082      	sub	sp, #8
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
 800f6d0:	4a05      	ldr	r2, [pc, #20]	; (800f6e8 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	601a      	str	r2, [r3, #0]
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	4618      	mov	r0, r3
 800f6da:	f7ff ffd3 	bl	800f684 <_ZN8touchgfx9ConstFontD1Ev>
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	3708      	adds	r7, #8
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	bd80      	pop	{r7, pc}
 800f6e8:	08028330 	.word	0x08028330

0800f6ec <_ZN8touchgfx13GeneratedFontD0Ev>:
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b082      	sub	sp, #8
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
 800f6f4:	6878      	ldr	r0, [r7, #4]
 800f6f6:	f7ff ffe7 	bl	800f6c8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f6fa:	2124      	movs	r1, #36	; 0x24
 800f6fc:	6878      	ldr	r0, [r7, #4]
 800f6fe:	f017 f84f 	bl	80267a0 <_ZdlPvj>
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	4618      	mov	r0, r3
 800f706:	3708      	adds	r7, #8
 800f708:	46bd      	mov	sp, r7
 800f70a:	bd80      	pop	{r7, pc}

0800f70c <_ZNK8touchgfx9TypedText7getFontEv>:
     *
     *        Gets the font associated with this TypedText.
     *
     * @return The font.
     */
    const Font* getFont() const
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b082      	sub	sp, #8
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800f714:	6878      	ldr	r0, [r7, #4]
 800f716:	f000 f82d 	bl	800f774 <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 800f71a:	4b08      	ldr	r3, [pc, #32]	; (800f73c <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 800f71c:	681a      	ldr	r2, [r3, #0]
 800f71e:	4b08      	ldr	r3, [pc, #32]	; (800f740 <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 800f720:	6819      	ldr	r1, [r3, #0]
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	881b      	ldrh	r3, [r3, #0]
 800f726:	005b      	lsls	r3, r3, #1
 800f728:	440b      	add	r3, r1
 800f72a:	781b      	ldrb	r3, [r3, #0]
 800f72c:	009b      	lsls	r3, r3, #2
 800f72e:	4413      	add	r3, r2
 800f730:	681b      	ldr	r3, [r3, #0]
    }
 800f732:	4618      	mov	r0, r3
 800f734:	3708      	adds	r7, #8
 800f736:	46bd      	mov	sp, r7
 800f738:	bd80      	pop	{r7, pc}
 800f73a:	bf00      	nop
 800f73c:	2000c724 	.word	0x2000c724
 800f740:	2000c71c 	.word	0x2000c71c

0800f744 <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
     *
     *        Gets the text direction associated with this TypedText.
     *
     * @return The alignment.
     */
    TextDirection getTextDirection() const
 800f744:	b580      	push	{r7, lr}
 800f746:	b082      	sub	sp, #8
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800f74c:	6878      	ldr	r0, [r7, #4]
 800f74e:	f000 f811 	bl	800f774 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 800f752:	4b07      	ldr	r3, [pc, #28]	; (800f770 <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 800f754:	681a      	ldr	r2, [r3, #0]
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	881b      	ldrh	r3, [r3, #0]
 800f75a:	005b      	lsls	r3, r3, #1
 800f75c:	4413      	add	r3, r2
 800f75e:	785b      	ldrb	r3, [r3, #1]
 800f760:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800f764:	b2db      	uxtb	r3, r3
    }
 800f766:	4618      	mov	r0, r3
 800f768:	3708      	adds	r7, #8
 800f76a:	46bd      	mov	sp, r7
 800f76c:	bd80      	pop	{r7, pc}
 800f76e:	bf00      	nop
 800f770:	2000c71c 	.word	0x2000c71c

0800f774 <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 800f774:	b580      	push	{r7, lr}
 800f776:	b082      	sub	sp, #8
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f77c:	4b0c      	ldr	r3, [pc, #48]	; (800f7b0 <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d105      	bne.n	800f790 <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 800f784:	4b0b      	ldr	r3, [pc, #44]	; (800f7b4 <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 800f786:	4a0c      	ldr	r2, [pc, #48]	; (800f7b8 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800f788:	21de      	movs	r1, #222	; 0xde
 800f78a:	480c      	ldr	r0, [pc, #48]	; (800f7bc <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800f78c:	f017 f836 	bl	80267fc <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	881a      	ldrh	r2, [r3, #0]
 800f794:	4b0a      	ldr	r3, [pc, #40]	; (800f7c0 <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 800f796:	881b      	ldrh	r3, [r3, #0]
 800f798:	429a      	cmp	r2, r3
 800f79a:	d305      	bcc.n	800f7a8 <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 800f79c:	4b09      	ldr	r3, [pc, #36]	; (800f7c4 <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 800f79e:	4a06      	ldr	r2, [pc, #24]	; (800f7b8 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800f7a0:	21df      	movs	r1, #223	; 0xdf
 800f7a2:	4806      	ldr	r0, [pc, #24]	; (800f7bc <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800f7a4:	f017 f82a 	bl	80267fc <__assert_func>
    }
 800f7a8:	bf00      	nop
 800f7aa:	3708      	adds	r7, #8
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	bd80      	pop	{r7, pc}
 800f7b0:	2000c71c 	.word	0x2000c71c
 800f7b4:	080278cc 	.word	0x080278cc
 800f7b8:	08027910 	.word	0x08027910
 800f7bc:	08027940 	.word	0x08027940
 800f7c0:	2000c720 	.word	0x2000c720
 800f7c4:	08027984 	.word	0x08027984

0800f7c8 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 800f7c8:	b480      	push	{r7}
 800f7ca:	b083      	sub	sp, #12
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	7b5b      	ldrb	r3, [r3, #13]
 800f7d4:	021b      	lsls	r3, r3, #8
 800f7d6:	b21b      	sxth	r3, r3
 800f7d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f7dc:	b21a      	sxth	r2, r3
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	7adb      	ldrb	r3, [r3, #11]
 800f7e2:	b21b      	sxth	r3, r3
 800f7e4:	4313      	orrs	r3, r2
 800f7e6:	b21b      	sxth	r3, r3
 800f7e8:	b29b      	uxth	r3, r3
    }
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	370c      	adds	r7, #12
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f4:	4770      	bx	lr

0800f7f6 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800f7f6:	b480      	push	{r7}
 800f7f8:	b083      	sub	sp, #12
 800f7fa:	af00      	add	r7, sp, #0
 800f7fc:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	6a1b      	ldr	r3, [r3, #32]
    }
 800f802:	4618      	mov	r0, r3
 800f804:	370c      	adds	r7, #12
 800f806:	46bd      	mov	sp, r7
 800f808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80c:	4770      	bx	lr
	...

0800f810 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800f810:	b580      	push	{r7, lr}
 800f812:	b08c      	sub	sp, #48	; 0x30
 800f814:	af08      	add	r7, sp, #32
 800f816:	60f8      	str	r0, [r7, #12]
 800f818:	60b9      	str	r1, [r7, #8]
 800f81a:	4611      	mov	r1, r2
 800f81c:	461a      	mov	r2, r3
 800f81e:	460b      	mov	r3, r1
 800f820:	80fb      	strh	r3, [r7, #6]
 800f822:	4613      	mov	r3, r2
 800f824:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800f826:	68f8      	ldr	r0, [r7, #12]
 800f828:	88b9      	ldrh	r1, [r7, #4]
 800f82a:	88fa      	ldrh	r2, [r7, #6]
 800f82c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f82e:	9306      	str	r3, [sp, #24]
 800f830:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f832:	9305      	str	r3, [sp, #20]
 800f834:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f838:	9304      	str	r3, [sp, #16]
 800f83a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f83e:	9303      	str	r3, [sp, #12]
 800f840:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f844:	9302      	str	r3, [sp, #8]
 800f846:	7f3b      	ldrb	r3, [r7, #28]
 800f848:	9301      	str	r3, [sp, #4]
 800f84a:	7e3b      	ldrb	r3, [r7, #24]
 800f84c:	9300      	str	r3, [sp, #0]
 800f84e:	460b      	mov	r3, r1
 800f850:	68b9      	ldr	r1, [r7, #8]
 800f852:	f00b fcc7 	bl	801b1e4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800f856:	4a08      	ldr	r2, [pc, #32]	; (800f878 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	601a      	str	r2, [r3, #0]
    glyphData(glyphDataInternalFlash),
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f860:	619a      	str	r2, [r3, #24]
    kerningData(kerningList),
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f866:	61da      	str	r2, [r3, #28]
    gsubTable(gsubData)
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f86c:	621a      	str	r2, [r3, #32]
{
}
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	4618      	mov	r0, r3
 800f872:	3710      	adds	r7, #16
 800f874:	46bd      	mov	sp, r7
 800f876:	bd80      	pop	{r7, pc}
 800f878:	08028330 	.word	0x08028330

0800f87c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800f87c:	b480      	push	{r7}
 800f87e:	b085      	sub	sp, #20
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
 800f884:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	699b      	ldr	r3, [r3, #24]
 800f88a:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800f88c:	683b      	ldr	r3, [r7, #0]
 800f88e:	889b      	ldrh	r3, [r3, #4]
 800f890:	0adb      	lsrs	r3, r3, #11
 800f892:	b29b      	uxth	r3, r3
 800f894:	009b      	lsls	r3, r3, #2
 800f896:	68fa      	ldr	r2, [r7, #12]
 800f898:	4413      	add	r3, r2
 800f89a:	681a      	ldr	r2, [r3, #0]
 800f89c:	683b      	ldr	r3, [r7, #0]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	4413      	add	r3, r2
}
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	3714      	adds	r7, #20
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ac:	4770      	bx	lr

0800f8ae <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800f8ae:	b580      	push	{r7, lr}
 800f8b0:	b086      	sub	sp, #24
 800f8b2:	af00      	add	r7, sp, #0
 800f8b4:	60f8      	str	r0, [r7, #12]
 800f8b6:	460b      	mov	r3, r1
 800f8b8:	607a      	str	r2, [r7, #4]
 800f8ba:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d003      	beq.n	800f8ca <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	7b1b      	ldrb	r3, [r3, #12]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d101      	bne.n	800f8ce <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	e023      	b.n	800f916 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 800f8ce:	6878      	ldr	r0, [r7, #4]
 800f8d0:	f7ff ff7a 	bl	800f7c8 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 800f8d4:	4603      	mov	r3, r0
 800f8d6:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800f8d8:	8abb      	ldrh	r3, [r7, #20]
 800f8da:	82fb      	strh	r3, [r7, #22]
 800f8dc:	e013      	b.n	800f906 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x58>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	69da      	ldr	r2, [r3, #28]
 800f8e2:	8afb      	ldrh	r3, [r7, #22]
 800f8e4:	009b      	lsls	r3, r3, #2
 800f8e6:	4413      	add	r3, r2
 800f8e8:	881b      	ldrh	r3, [r3, #0]
 800f8ea:	897a      	ldrh	r2, [r7, #10]
 800f8ec:	429a      	cmp	r2, r3
 800f8ee:	d107      	bne.n	800f900 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x52>
        {
            return kerningData[i].distance;
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	69da      	ldr	r2, [r3, #28]
 800f8f4:	8afb      	ldrh	r3, [r7, #22]
 800f8f6:	009b      	lsls	r3, r3, #2
 800f8f8:	4413      	add	r3, r2
 800f8fa:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f8fe:	e00a      	b.n	800f916 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800f900:	8afb      	ldrh	r3, [r7, #22]
 800f902:	3301      	adds	r3, #1
 800f904:	82fb      	strh	r3, [r7, #22]
 800f906:	8afa      	ldrh	r2, [r7, #22]
 800f908:	8abb      	ldrh	r3, [r7, #20]
 800f90a:	6879      	ldr	r1, [r7, #4]
 800f90c:	7b09      	ldrb	r1, [r1, #12]
 800f90e:	440b      	add	r3, r1
 800f910:	429a      	cmp	r2, r3
 800f912:	dbe4      	blt.n	800f8de <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x30>
        }
    }
    return 0;
 800f914:	2300      	movs	r3, #0
}
 800f916:	4618      	mov	r0, r3
 800f918:	3718      	adds	r7, #24
 800f91a:	46bd      	mov	sp, r7
 800f91c:	bd80      	pop	{r7, pc}
	...

0800f920 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_10_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 800f920:	b580      	push	{r7, lr}
 800f922:	af00      	add	r7, sp, #0
 800f924:	4801      	ldr	r0, [pc, #4]	; (800f92c <__tcf_0+0xc>)
 800f926:	f7ff fecf 	bl	800f6c8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f92a:	bd80      	pop	{r7, pc}
 800f92c:	20008cd8 	.word	0x20008cd8

0800f930 <_Z25getFont_Asap_Bold_10_4bppv>:
{
 800f930:	b580      	push	{r7, lr}
 800f932:	b08a      	sub	sp, #40	; 0x28
 800f934:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 800f936:	4b1e      	ldr	r3, [pc, #120]	; (800f9b0 <_Z25getFont_Asap_Bold_10_4bppv+0x80>)
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	f3bf 8f5b 	dmb	ish
 800f93e:	f003 0301 	and.w	r3, r3, #1
 800f942:	2b00      	cmp	r3, #0
 800f944:	bf0c      	ite	eq
 800f946:	2301      	moveq	r3, #1
 800f948:	2300      	movne	r3, #0
 800f94a:	b2db      	uxtb	r3, r3
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d02a      	beq.n	800f9a6 <_Z25getFont_Asap_Bold_10_4bppv+0x76>
 800f950:	4817      	ldr	r0, [pc, #92]	; (800f9b0 <_Z25getFont_Asap_Bold_10_4bppv+0x80>)
 800f952:	f016 ff27 	bl	80267a4 <__cxa_guard_acquire>
 800f956:	4603      	mov	r3, r0
 800f958:	2b00      	cmp	r3, #0
 800f95a:	bf14      	ite	ne
 800f95c:	2301      	movne	r3, #1
 800f95e:	2300      	moveq	r3, #0
 800f960:	b2db      	uxtb	r3, r3
 800f962:	2b00      	cmp	r3, #0
 800f964:	d01f      	beq.n	800f9a6 <_Z25getFont_Asap_Bold_10_4bppv+0x76>
 800f966:	2300      	movs	r3, #0
 800f968:	9309      	str	r3, [sp, #36]	; 0x24
 800f96a:	2300      	movs	r3, #0
 800f96c:	9308      	str	r3, [sp, #32]
 800f96e:	233f      	movs	r3, #63	; 0x3f
 800f970:	9307      	str	r3, [sp, #28]
 800f972:	4b10      	ldr	r3, [pc, #64]	; (800f9b4 <_Z25getFont_Asap_Bold_10_4bppv+0x84>)
 800f974:	9306      	str	r3, [sp, #24]
 800f976:	4b10      	ldr	r3, [pc, #64]	; (800f9b8 <_Z25getFont_Asap_Bold_10_4bppv+0x88>)
 800f978:	9305      	str	r3, [sp, #20]
 800f97a:	2301      	movs	r3, #1
 800f97c:	9304      	str	r3, [sp, #16]
 800f97e:	2300      	movs	r3, #0
 800f980:	9303      	str	r3, [sp, #12]
 800f982:	2301      	movs	r3, #1
 800f984:	9302      	str	r3, [sp, #8]
 800f986:	2304      	movs	r3, #4
 800f988:	9301      	str	r3, [sp, #4]
 800f98a:	2300      	movs	r3, #0
 800f98c:	9300      	str	r3, [sp, #0]
 800f98e:	230a      	movs	r3, #10
 800f990:	2204      	movs	r2, #4
 800f992:	490a      	ldr	r1, [pc, #40]	; (800f9bc <_Z25getFont_Asap_Bold_10_4bppv+0x8c>)
 800f994:	480a      	ldr	r0, [pc, #40]	; (800f9c0 <_Z25getFont_Asap_Bold_10_4bppv+0x90>)
 800f996:	f7ff ff3b 	bl	800f810 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f99a:	480a      	ldr	r0, [pc, #40]	; (800f9c4 <_Z25getFont_Asap_Bold_10_4bppv+0x94>)
 800f99c:	f016 ff4c 	bl	8026838 <atexit>
 800f9a0:	4803      	ldr	r0, [pc, #12]	; (800f9b0 <_Z25getFont_Asap_Bold_10_4bppv+0x80>)
 800f9a2:	f016 ff0b 	bl	80267bc <__cxa_guard_release>
    return Asap_Bold_10_4bpp;
 800f9a6:	4b06      	ldr	r3, [pc, #24]	; (800f9c0 <_Z25getFont_Asap_Bold_10_4bppv+0x90>)
}
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}
 800f9ae:	bf00      	nop
 800f9b0:	20008cfc 	.word	0x20008cfc
 800f9b4:	0802f808 	.word	0x0802f808
 800f9b8:	0802837c 	.word	0x0802837c
 800f9bc:	0802f830 	.word	0x0802f830
 800f9c0:	20008cd8 	.word	0x20008cd8
 800f9c4:	0800f921 	.word	0x0800f921

0800f9c8 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_12_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 12, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	af00      	add	r7, sp, #0
 800f9cc:	4801      	ldr	r0, [pc, #4]	; (800f9d4 <__tcf_0+0xc>)
 800f9ce:	f7ff fe7b 	bl	800f6c8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f9d2:	bd80      	pop	{r7, pc}
 800f9d4:	20008d00 	.word	0x20008d00

0800f9d8 <_Z25getFont_Asap_Bold_12_4bppv>:
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b08a      	sub	sp, #40	; 0x28
 800f9dc:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 12, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 800f9de:	4b1e      	ldr	r3, [pc, #120]	; (800fa58 <_Z25getFont_Asap_Bold_12_4bppv+0x80>)
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	f3bf 8f5b 	dmb	ish
 800f9e6:	f003 0301 	and.w	r3, r3, #1
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	bf0c      	ite	eq
 800f9ee:	2301      	moveq	r3, #1
 800f9f0:	2300      	movne	r3, #0
 800f9f2:	b2db      	uxtb	r3, r3
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d02a      	beq.n	800fa4e <_Z25getFont_Asap_Bold_12_4bppv+0x76>
 800f9f8:	4817      	ldr	r0, [pc, #92]	; (800fa58 <_Z25getFont_Asap_Bold_12_4bppv+0x80>)
 800f9fa:	f016 fed3 	bl	80267a4 <__cxa_guard_acquire>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	bf14      	ite	ne
 800fa04:	2301      	movne	r3, #1
 800fa06:	2300      	moveq	r3, #0
 800fa08:	b2db      	uxtb	r3, r3
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d01f      	beq.n	800fa4e <_Z25getFont_Asap_Bold_12_4bppv+0x76>
 800fa0e:	2300      	movs	r3, #0
 800fa10:	9309      	str	r3, [sp, #36]	; 0x24
 800fa12:	2300      	movs	r3, #0
 800fa14:	9308      	str	r3, [sp, #32]
 800fa16:	233f      	movs	r3, #63	; 0x3f
 800fa18:	9307      	str	r3, [sp, #28]
 800fa1a:	4b10      	ldr	r3, [pc, #64]	; (800fa5c <_Z25getFont_Asap_Bold_12_4bppv+0x84>)
 800fa1c:	9306      	str	r3, [sp, #24]
 800fa1e:	4b10      	ldr	r3, [pc, #64]	; (800fa60 <_Z25getFont_Asap_Bold_12_4bppv+0x88>)
 800fa20:	9305      	str	r3, [sp, #20]
 800fa22:	2301      	movs	r3, #1
 800fa24:	9304      	str	r3, [sp, #16]
 800fa26:	2300      	movs	r3, #0
 800fa28:	9303      	str	r3, [sp, #12]
 800fa2a:	2301      	movs	r3, #1
 800fa2c:	9302      	str	r3, [sp, #8]
 800fa2e:	2304      	movs	r3, #4
 800fa30:	9301      	str	r3, [sp, #4]
 800fa32:	2300      	movs	r3, #0
 800fa34:	9300      	str	r3, [sp, #0]
 800fa36:	230c      	movs	r3, #12
 800fa38:	220c      	movs	r2, #12
 800fa3a:	490a      	ldr	r1, [pc, #40]	; (800fa64 <_Z25getFont_Asap_Bold_12_4bppv+0x8c>)
 800fa3c:	480a      	ldr	r0, [pc, #40]	; (800fa68 <_Z25getFont_Asap_Bold_12_4bppv+0x90>)
 800fa3e:	f7ff fee7 	bl	800f810 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800fa42:	480a      	ldr	r0, [pc, #40]	; (800fa6c <_Z25getFont_Asap_Bold_12_4bppv+0x94>)
 800fa44:	f016 fef8 	bl	8026838 <atexit>
 800fa48:	4803      	ldr	r0, [pc, #12]	; (800fa58 <_Z25getFont_Asap_Bold_12_4bppv+0x80>)
 800fa4a:	f016 feb7 	bl	80267bc <__cxa_guard_release>
    return Asap_Bold_12_4bpp;
 800fa4e:	4b06      	ldr	r3, [pc, #24]	; (800fa68 <_Z25getFont_Asap_Bold_12_4bppv+0x90>)
}
 800fa50:	4618      	mov	r0, r3
 800fa52:	46bd      	mov	sp, r7
 800fa54:	bd80      	pop	{r7, pc}
 800fa56:	bf00      	nop
 800fa58:	20008d24 	.word	0x20008d24
 800fa5c:	0802f80c 	.word	0x0802f80c
 800fa60:	08028380 	.word	0x08028380
 800fa64:	0802f868 	.word	0x0802f868
 800fa68:	20008d00 	.word	0x20008d00
 800fa6c:	0800f9c9 	.word	0x0800f9c9

0800fa70 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_14_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_14_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_14_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_14_4bpp(glyphs_Asap_Bold_14_4bpp, 28, 14, 0, 4, 1, 0, 1, unicodes_Asap_Bold_14_4bpp, kerning_Asap_Bold_14_4bpp, 0, 0, 0);
 800fa70:	b580      	push	{r7, lr}
 800fa72:	af00      	add	r7, sp, #0
 800fa74:	4801      	ldr	r0, [pc, #4]	; (800fa7c <__tcf_0+0xc>)
 800fa76:	f7ff fe27 	bl	800f6c8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800fa7a:	bd80      	pop	{r7, pc}
 800fa7c:	20008d28 	.word	0x20008d28

0800fa80 <_Z25getFont_Asap_Bold_14_4bppv>:
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b08a      	sub	sp, #40	; 0x28
 800fa84:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_14_4bpp(glyphs_Asap_Bold_14_4bpp, 28, 14, 0, 4, 1, 0, 1, unicodes_Asap_Bold_14_4bpp, kerning_Asap_Bold_14_4bpp, 0, 0, 0);
 800fa86:	4b1e      	ldr	r3, [pc, #120]	; (800fb00 <_Z25getFont_Asap_Bold_14_4bppv+0x80>)
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	f3bf 8f5b 	dmb	ish
 800fa8e:	f003 0301 	and.w	r3, r3, #1
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	bf0c      	ite	eq
 800fa96:	2301      	moveq	r3, #1
 800fa98:	2300      	movne	r3, #0
 800fa9a:	b2db      	uxtb	r3, r3
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d02a      	beq.n	800faf6 <_Z25getFont_Asap_Bold_14_4bppv+0x76>
 800faa0:	4817      	ldr	r0, [pc, #92]	; (800fb00 <_Z25getFont_Asap_Bold_14_4bppv+0x80>)
 800faa2:	f016 fe7f 	bl	80267a4 <__cxa_guard_acquire>
 800faa6:	4603      	mov	r3, r0
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	bf14      	ite	ne
 800faac:	2301      	movne	r3, #1
 800faae:	2300      	moveq	r3, #0
 800fab0:	b2db      	uxtb	r3, r3
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d01f      	beq.n	800faf6 <_Z25getFont_Asap_Bold_14_4bppv+0x76>
 800fab6:	2300      	movs	r3, #0
 800fab8:	9309      	str	r3, [sp, #36]	; 0x24
 800faba:	2300      	movs	r3, #0
 800fabc:	9308      	str	r3, [sp, #32]
 800fabe:	2300      	movs	r3, #0
 800fac0:	9307      	str	r3, [sp, #28]
 800fac2:	4b10      	ldr	r3, [pc, #64]	; (800fb04 <_Z25getFont_Asap_Bold_14_4bppv+0x84>)
 800fac4:	9306      	str	r3, [sp, #24]
 800fac6:	4b10      	ldr	r3, [pc, #64]	; (800fb08 <_Z25getFont_Asap_Bold_14_4bppv+0x88>)
 800fac8:	9305      	str	r3, [sp, #20]
 800faca:	2301      	movs	r3, #1
 800facc:	9304      	str	r3, [sp, #16]
 800face:	2300      	movs	r3, #0
 800fad0:	9303      	str	r3, [sp, #12]
 800fad2:	2301      	movs	r3, #1
 800fad4:	9302      	str	r3, [sp, #8]
 800fad6:	2304      	movs	r3, #4
 800fad8:	9301      	str	r3, [sp, #4]
 800fada:	2300      	movs	r3, #0
 800fadc:	9300      	str	r3, [sp, #0]
 800fade:	230e      	movs	r3, #14
 800fae0:	221c      	movs	r2, #28
 800fae2:	490a      	ldr	r1, [pc, #40]	; (800fb0c <_Z25getFont_Asap_Bold_14_4bppv+0x8c>)
 800fae4:	480a      	ldr	r0, [pc, #40]	; (800fb10 <_Z25getFont_Asap_Bold_14_4bppv+0x90>)
 800fae6:	f7ff fe93 	bl	800f810 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800faea:	480a      	ldr	r0, [pc, #40]	; (800fb14 <_Z25getFont_Asap_Bold_14_4bppv+0x94>)
 800faec:	f016 fea4 	bl	8026838 <atexit>
 800faf0:	4803      	ldr	r0, [pc, #12]	; (800fb00 <_Z25getFont_Asap_Bold_14_4bppv+0x80>)
 800faf2:	f016 fe63 	bl	80267bc <__cxa_guard_release>
    return Asap_Bold_14_4bpp;
 800faf6:	4b06      	ldr	r3, [pc, #24]	; (800fb10 <_Z25getFont_Asap_Bold_14_4bppv+0x90>)
}
 800faf8:	4618      	mov	r0, r3
 800fafa:	46bd      	mov	sp, r7
 800fafc:	bd80      	pop	{r7, pc}
 800fafe:	bf00      	nop
 800fb00:	20008d4c 	.word	0x20008d4c
 800fb04:	0802f810 	.word	0x0802f810
 800fb08:	08028384 	.word	0x08028384
 800fb0c:	0802f910 	.word	0x0802f910
 800fb10:	20008d28 	.word	0x20008d28
 800fb14:	0800fa71 	.word	0x0800fa71

0800fb18 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_21_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	af00      	add	r7, sp, #0
 800fb1c:	4801      	ldr	r0, [pc, #4]	; (800fb24 <__tcf_0+0xc>)
 800fb1e:	f7ff fdd3 	bl	800f6c8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800fb22:	bd80      	pop	{r7, pc}
 800fb24:	20008d50 	.word	0x20008d50

0800fb28 <_Z25getFont_Asap_Bold_21_4bppv>:
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b08a      	sub	sp, #40	; 0x28
 800fb2c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 800fb2e:	4b1e      	ldr	r3, [pc, #120]	; (800fba8 <_Z25getFont_Asap_Bold_21_4bppv+0x80>)
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	f3bf 8f5b 	dmb	ish
 800fb36:	f003 0301 	and.w	r3, r3, #1
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	bf0c      	ite	eq
 800fb3e:	2301      	moveq	r3, #1
 800fb40:	2300      	movne	r3, #0
 800fb42:	b2db      	uxtb	r3, r3
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d02a      	beq.n	800fb9e <_Z25getFont_Asap_Bold_21_4bppv+0x76>
 800fb48:	4817      	ldr	r0, [pc, #92]	; (800fba8 <_Z25getFont_Asap_Bold_21_4bppv+0x80>)
 800fb4a:	f016 fe2b 	bl	80267a4 <__cxa_guard_acquire>
 800fb4e:	4603      	mov	r3, r0
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	bf14      	ite	ne
 800fb54:	2301      	movne	r3, #1
 800fb56:	2300      	moveq	r3, #0
 800fb58:	b2db      	uxtb	r3, r3
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d01f      	beq.n	800fb9e <_Z25getFont_Asap_Bold_21_4bppv+0x76>
 800fb5e:	2300      	movs	r3, #0
 800fb60:	9309      	str	r3, [sp, #36]	; 0x24
 800fb62:	2300      	movs	r3, #0
 800fb64:	9308      	str	r3, [sp, #32]
 800fb66:	233f      	movs	r3, #63	; 0x3f
 800fb68:	9307      	str	r3, [sp, #28]
 800fb6a:	4b10      	ldr	r3, [pc, #64]	; (800fbac <_Z25getFont_Asap_Bold_21_4bppv+0x84>)
 800fb6c:	9306      	str	r3, [sp, #24]
 800fb6e:	4b10      	ldr	r3, [pc, #64]	; (800fbb0 <_Z25getFont_Asap_Bold_21_4bppv+0x88>)
 800fb70:	9305      	str	r3, [sp, #20]
 800fb72:	2301      	movs	r3, #1
 800fb74:	9304      	str	r3, [sp, #16]
 800fb76:	2300      	movs	r3, #0
 800fb78:	9303      	str	r3, [sp, #12]
 800fb7a:	2301      	movs	r3, #1
 800fb7c:	9302      	str	r3, [sp, #8]
 800fb7e:	2304      	movs	r3, #4
 800fb80:	9301      	str	r3, [sp, #4]
 800fb82:	2300      	movs	r3, #0
 800fb84:	9300      	str	r3, [sp, #0]
 800fb86:	2315      	movs	r3, #21
 800fb88:	220d      	movs	r2, #13
 800fb8a:	490a      	ldr	r1, [pc, #40]	; (800fbb4 <_Z25getFont_Asap_Bold_21_4bppv+0x8c>)
 800fb8c:	480a      	ldr	r0, [pc, #40]	; (800fbb8 <_Z25getFont_Asap_Bold_21_4bppv+0x90>)
 800fb8e:	f7ff fe3f 	bl	800f810 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800fb92:	480a      	ldr	r0, [pc, #40]	; (800fbbc <_Z25getFont_Asap_Bold_21_4bppv+0x94>)
 800fb94:	f016 fe50 	bl	8026838 <atexit>
 800fb98:	4803      	ldr	r0, [pc, #12]	; (800fba8 <_Z25getFont_Asap_Bold_21_4bppv+0x80>)
 800fb9a:	f016 fe0f 	bl	80267bc <__cxa_guard_release>
    return Asap_Bold_21_4bpp;
 800fb9e:	4b06      	ldr	r3, [pc, #24]	; (800fbb8 <_Z25getFont_Asap_Bold_21_4bppv+0x90>)
}
 800fba0:	4618      	mov	r0, r3
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bd80      	pop	{r7, pc}
 800fba6:	bf00      	nop
 800fba8:	20008d74 	.word	0x20008d74
 800fbac:	0802f81c 	.word	0x0802f81c
 800fbb0:	08028388 	.word	0x08028388
 800fbb4:	0802fa98 	.word	0x0802fa98
 800fbb8:	20008d50 	.word	0x20008d50
 800fbbc:	0800fb19 	.word	0x0800fb19

0800fbc0 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_30_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 19, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	af00      	add	r7, sp, #0
 800fbc4:	4801      	ldr	r0, [pc, #4]	; (800fbcc <__tcf_0+0xc>)
 800fbc6:	f7ff fd7f 	bl	800f6c8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800fbca:	bd80      	pop	{r7, pc}
 800fbcc:	20008d78 	.word	0x20008d78

0800fbd0 <_Z25getFont_Asap_Bold_30_4bppv>:
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b08a      	sub	sp, #40	; 0x28
 800fbd4:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 19, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 800fbd6:	4b1e      	ldr	r3, [pc, #120]	; (800fc50 <_Z25getFont_Asap_Bold_30_4bppv+0x80>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	f3bf 8f5b 	dmb	ish
 800fbde:	f003 0301 	and.w	r3, r3, #1
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	bf0c      	ite	eq
 800fbe6:	2301      	moveq	r3, #1
 800fbe8:	2300      	movne	r3, #0
 800fbea:	b2db      	uxtb	r3, r3
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d02a      	beq.n	800fc46 <_Z25getFont_Asap_Bold_30_4bppv+0x76>
 800fbf0:	4817      	ldr	r0, [pc, #92]	; (800fc50 <_Z25getFont_Asap_Bold_30_4bppv+0x80>)
 800fbf2:	f016 fdd7 	bl	80267a4 <__cxa_guard_acquire>
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	bf14      	ite	ne
 800fbfc:	2301      	movne	r3, #1
 800fbfe:	2300      	moveq	r3, #0
 800fc00:	b2db      	uxtb	r3, r3
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d01f      	beq.n	800fc46 <_Z25getFont_Asap_Bold_30_4bppv+0x76>
 800fc06:	2300      	movs	r3, #0
 800fc08:	9309      	str	r3, [sp, #36]	; 0x24
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	9308      	str	r3, [sp, #32]
 800fc0e:	233f      	movs	r3, #63	; 0x3f
 800fc10:	9307      	str	r3, [sp, #28]
 800fc12:	4b10      	ldr	r3, [pc, #64]	; (800fc54 <_Z25getFont_Asap_Bold_30_4bppv+0x84>)
 800fc14:	9306      	str	r3, [sp, #24]
 800fc16:	4b10      	ldr	r3, [pc, #64]	; (800fc58 <_Z25getFont_Asap_Bold_30_4bppv+0x88>)
 800fc18:	9305      	str	r3, [sp, #20]
 800fc1a:	2301      	movs	r3, #1
 800fc1c:	9304      	str	r3, [sp, #16]
 800fc1e:	2300      	movs	r3, #0
 800fc20:	9303      	str	r3, [sp, #12]
 800fc22:	2301      	movs	r3, #1
 800fc24:	9302      	str	r3, [sp, #8]
 800fc26:	2304      	movs	r3, #4
 800fc28:	9301      	str	r3, [sp, #4]
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	9300      	str	r3, [sp, #0]
 800fc2e:	231e      	movs	r3, #30
 800fc30:	2213      	movs	r2, #19
 800fc32:	490a      	ldr	r1, [pc, #40]	; (800fc5c <_Z25getFont_Asap_Bold_30_4bppv+0x8c>)
 800fc34:	480a      	ldr	r0, [pc, #40]	; (800fc60 <_Z25getFont_Asap_Bold_30_4bppv+0x90>)
 800fc36:	f7ff fdeb 	bl	800f810 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800fc3a:	480a      	ldr	r0, [pc, #40]	; (800fc64 <_Z25getFont_Asap_Bold_30_4bppv+0x94>)
 800fc3c:	f016 fdfc 	bl	8026838 <atexit>
 800fc40:	4803      	ldr	r0, [pc, #12]	; (800fc50 <_Z25getFont_Asap_Bold_30_4bppv+0x80>)
 800fc42:	f016 fdbb 	bl	80267bc <__cxa_guard_release>
    return Asap_Bold_30_4bpp;
 800fc46:	4b06      	ldr	r3, [pc, #24]	; (800fc60 <_Z25getFont_Asap_Bold_30_4bppv+0x90>)
}
 800fc48:	4618      	mov	r0, r3
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	bd80      	pop	{r7, pc}
 800fc4e:	bf00      	nop
 800fc50:	20008d9c 	.word	0x20008d9c
 800fc54:	0802f820 	.word	0x0802f820
 800fc58:	0802838c 	.word	0x0802838c
 800fc5c:	0802fb50 	.word	0x0802fb50
 800fc60:	20008d78 	.word	0x20008d78
 800fc64:	0800fbc1 	.word	0x0800fbc1

0800fc68 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_40_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 13, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	af00      	add	r7, sp, #0
 800fc6c:	4801      	ldr	r0, [pc, #4]	; (800fc74 <__tcf_0+0xc>)
 800fc6e:	f7ff fd2b 	bl	800f6c8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800fc72:	bd80      	pop	{r7, pc}
 800fc74:	20008da0 	.word	0x20008da0

0800fc78 <_Z25getFont_Asap_Bold_40_4bppv>:
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b08a      	sub	sp, #40	; 0x28
 800fc7c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 13, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 800fc7e:	4b1e      	ldr	r3, [pc, #120]	; (800fcf8 <_Z25getFont_Asap_Bold_40_4bppv+0x80>)
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	f3bf 8f5b 	dmb	ish
 800fc86:	f003 0301 	and.w	r3, r3, #1
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	bf0c      	ite	eq
 800fc8e:	2301      	moveq	r3, #1
 800fc90:	2300      	movne	r3, #0
 800fc92:	b2db      	uxtb	r3, r3
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d02a      	beq.n	800fcee <_Z25getFont_Asap_Bold_40_4bppv+0x76>
 800fc98:	4817      	ldr	r0, [pc, #92]	; (800fcf8 <_Z25getFont_Asap_Bold_40_4bppv+0x80>)
 800fc9a:	f016 fd83 	bl	80267a4 <__cxa_guard_acquire>
 800fc9e:	4603      	mov	r3, r0
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	bf14      	ite	ne
 800fca4:	2301      	movne	r3, #1
 800fca6:	2300      	moveq	r3, #0
 800fca8:	b2db      	uxtb	r3, r3
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d01f      	beq.n	800fcee <_Z25getFont_Asap_Bold_40_4bppv+0x76>
 800fcae:	2300      	movs	r3, #0
 800fcb0:	9309      	str	r3, [sp, #36]	; 0x24
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	9308      	str	r3, [sp, #32]
 800fcb6:	233f      	movs	r3, #63	; 0x3f
 800fcb8:	9307      	str	r3, [sp, #28]
 800fcba:	4b10      	ldr	r3, [pc, #64]	; (800fcfc <_Z25getFont_Asap_Bold_40_4bppv+0x84>)
 800fcbc:	9306      	str	r3, [sp, #24]
 800fcbe:	4b10      	ldr	r3, [pc, #64]	; (800fd00 <_Z25getFont_Asap_Bold_40_4bppv+0x88>)
 800fcc0:	9305      	str	r3, [sp, #20]
 800fcc2:	2301      	movs	r3, #1
 800fcc4:	9304      	str	r3, [sp, #16]
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	9303      	str	r3, [sp, #12]
 800fcca:	2301      	movs	r3, #1
 800fccc:	9302      	str	r3, [sp, #8]
 800fcce:	2304      	movs	r3, #4
 800fcd0:	9301      	str	r3, [sp, #4]
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	9300      	str	r3, [sp, #0]
 800fcd6:	2328      	movs	r3, #40	; 0x28
 800fcd8:	220d      	movs	r2, #13
 800fcda:	490a      	ldr	r1, [pc, #40]	; (800fd04 <_Z25getFont_Asap_Bold_40_4bppv+0x8c>)
 800fcdc:	480a      	ldr	r0, [pc, #40]	; (800fd08 <_Z25getFont_Asap_Bold_40_4bppv+0x90>)
 800fcde:	f7ff fd97 	bl	800f810 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800fce2:	480a      	ldr	r0, [pc, #40]	; (800fd0c <_Z25getFont_Asap_Bold_40_4bppv+0x94>)
 800fce4:	f016 fda8 	bl	8026838 <atexit>
 800fce8:	4803      	ldr	r0, [pc, #12]	; (800fcf8 <_Z25getFont_Asap_Bold_40_4bppv+0x80>)
 800fcea:	f016 fd67 	bl	80267bc <__cxa_guard_release>
    return Asap_Bold_40_4bpp;
 800fcee:	4b06      	ldr	r3, [pc, #24]	; (800fd08 <_Z25getFont_Asap_Bold_40_4bppv+0x90>)
}
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	46bd      	mov	sp, r7
 800fcf4:	bd80      	pop	{r7, pc}
 800fcf6:	bf00      	nop
 800fcf8:	20008dc4 	.word	0x20008dc4
 800fcfc:	0802f828 	.word	0x0802f828
 800fd00:	08028390 	.word	0x08028390
 800fd04:	0802fc5c 	.word	0x0802fc5c
 800fd08:	20008da0 	.word	0x20008da0
 800fd0c:	0800fc69 	.word	0x0800fc69

0800fd10 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_60_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 13, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 800fd10:	b580      	push	{r7, lr}
 800fd12:	af00      	add	r7, sp, #0
 800fd14:	4801      	ldr	r0, [pc, #4]	; (800fd1c <__tcf_0+0xc>)
 800fd16:	f7ff fcd7 	bl	800f6c8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800fd1a:	bd80      	pop	{r7, pc}
 800fd1c:	20008dc8 	.word	0x20008dc8

0800fd20 <_Z25getFont_Asap_Bold_60_4bppv>:
{
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b08a      	sub	sp, #40	; 0x28
 800fd24:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 13, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 800fd26:	4b1e      	ldr	r3, [pc, #120]	; (800fda0 <_Z25getFont_Asap_Bold_60_4bppv+0x80>)
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	f3bf 8f5b 	dmb	ish
 800fd2e:	f003 0301 	and.w	r3, r3, #1
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	bf0c      	ite	eq
 800fd36:	2301      	moveq	r3, #1
 800fd38:	2300      	movne	r3, #0
 800fd3a:	b2db      	uxtb	r3, r3
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d02a      	beq.n	800fd96 <_Z25getFont_Asap_Bold_60_4bppv+0x76>
 800fd40:	4817      	ldr	r0, [pc, #92]	; (800fda0 <_Z25getFont_Asap_Bold_60_4bppv+0x80>)
 800fd42:	f016 fd2f 	bl	80267a4 <__cxa_guard_acquire>
 800fd46:	4603      	mov	r3, r0
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	bf14      	ite	ne
 800fd4c:	2301      	movne	r3, #1
 800fd4e:	2300      	moveq	r3, #0
 800fd50:	b2db      	uxtb	r3, r3
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d01f      	beq.n	800fd96 <_Z25getFont_Asap_Bold_60_4bppv+0x76>
 800fd56:	2300      	movs	r3, #0
 800fd58:	9309      	str	r3, [sp, #36]	; 0x24
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	9308      	str	r3, [sp, #32]
 800fd5e:	233f      	movs	r3, #63	; 0x3f
 800fd60:	9307      	str	r3, [sp, #28]
 800fd62:	4b10      	ldr	r3, [pc, #64]	; (800fda4 <_Z25getFont_Asap_Bold_60_4bppv+0x84>)
 800fd64:	9306      	str	r3, [sp, #24]
 800fd66:	4b10      	ldr	r3, [pc, #64]	; (800fda8 <_Z25getFont_Asap_Bold_60_4bppv+0x88>)
 800fd68:	9305      	str	r3, [sp, #20]
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	9304      	str	r3, [sp, #16]
 800fd6e:	2300      	movs	r3, #0
 800fd70:	9303      	str	r3, [sp, #12]
 800fd72:	2301      	movs	r3, #1
 800fd74:	9302      	str	r3, [sp, #8]
 800fd76:	2304      	movs	r3, #4
 800fd78:	9301      	str	r3, [sp, #4]
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	9300      	str	r3, [sp, #0]
 800fd7e:	233c      	movs	r3, #60	; 0x3c
 800fd80:	220d      	movs	r2, #13
 800fd82:	490a      	ldr	r1, [pc, #40]	; (800fdac <_Z25getFont_Asap_Bold_60_4bppv+0x8c>)
 800fd84:	480a      	ldr	r0, [pc, #40]	; (800fdb0 <_Z25getFont_Asap_Bold_60_4bppv+0x90>)
 800fd86:	f7ff fd43 	bl	800f810 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800fd8a:	480a      	ldr	r0, [pc, #40]	; (800fdb4 <_Z25getFont_Asap_Bold_60_4bppv+0x94>)
 800fd8c:	f016 fd54 	bl	8026838 <atexit>
 800fd90:	4803      	ldr	r0, [pc, #12]	; (800fda0 <_Z25getFont_Asap_Bold_60_4bppv+0x80>)
 800fd92:	f016 fd13 	bl	80267bc <__cxa_guard_release>
    return Asap_Bold_60_4bpp;
 800fd96:	4b06      	ldr	r3, [pc, #24]	; (800fdb0 <_Z25getFont_Asap_Bold_60_4bppv+0x90>)
}
 800fd98:	4618      	mov	r0, r3
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	bd80      	pop	{r7, pc}
 800fd9e:	bf00      	nop
 800fda0:	20008dec 	.word	0x20008dec
 800fda4:	0802f82c 	.word	0x0802f82c
 800fda8:	08028394 	.word	0x08028394
 800fdac:	0802fd14 	.word	0x0802fd14
 800fdb0:	20008dc8 	.word	0x20008dc8
 800fdb4:	0800fd11 	.word	0x0800fd11

0800fdb8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800fdb8:	b480      	push	{r7}
 800fdba:	b083      	sub	sp, #12
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
 800fdc0:	6039      	str	r1, [r7, #0]
 800fdc2:	683b      	ldr	r3, [r7, #0]
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	370c      	adds	r7, #12
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdce:	4770      	bx	lr

0800fdd0 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800fdd0:	b480      	push	{r7}
 800fdd2:	b083      	sub	sp, #12
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
 800fdd8:	6039      	str	r1, [r7, #0]
    {
    }
 800fdda:	bf00      	nop
 800fddc:	370c      	adds	r7, #12
 800fdde:	46bd      	mov	sp, r7
 800fde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde4:	4770      	bx	lr

0800fde6 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800fde6:	b480      	push	{r7}
 800fde8:	b083      	sub	sp, #12
 800fdea:	af00      	add	r7, sp, #0
 800fdec:	6078      	str	r0, [r7, #4]
 800fdee:	6039      	str	r1, [r7, #0]
    {
    }
 800fdf0:	bf00      	nop
 800fdf2:	370c      	adds	r7, #12
 800fdf4:	46bd      	mov	sp, r7
 800fdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdfa:	4770      	bx	lr

0800fdfc <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800fdfc:	b480      	push	{r7}
 800fdfe:	b083      	sub	sp, #12
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
 800fe04:	6039      	str	r1, [r7, #0]
    {
    }
 800fe06:	bf00      	nop
 800fe08:	370c      	adds	r7, #12
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe10:	4770      	bx	lr

0800fe12 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800fe12:	b480      	push	{r7}
 800fe14:	b083      	sub	sp, #12
 800fe16:	af00      	add	r7, sp, #0
 800fe18:	6078      	str	r0, [r7, #4]
 800fe1a:	460b      	mov	r3, r1
 800fe1c:	70fb      	strb	r3, [r7, #3]
    {
    }
 800fe1e:	bf00      	nop
 800fe20:	370c      	adds	r7, #12
 800fe22:	46bd      	mov	sp, r7
 800fe24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe28:	4770      	bx	lr

0800fe2a <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800fe2a:	b480      	push	{r7}
 800fe2c:	b083      	sub	sp, #12
 800fe2e:	af00      	add	r7, sp, #0
 800fe30:	6078      	str	r0, [r7, #4]
    {
    }
 800fe32:	bf00      	nop
 800fe34:	370c      	adds	r7, #12
 800fe36:	46bd      	mov	sp, r7
 800fe38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3c:	4770      	bx	lr

0800fe3e <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 800fe3e:	b480      	push	{r7}
 800fe40:	b083      	sub	sp, #12
 800fe42:	af00      	add	r7, sp, #0
 800fe44:	6078      	str	r0, [r7, #4]
    {
    }
 800fe46:	bf00      	nop
 800fe48:	370c      	adds	r7, #12
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe50:	4770      	bx	lr
	...

0800fe54 <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 800fe54:	b480      	push	{r7}
 800fe56:	b083      	sub	sp, #12
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
    {
 800fe5c:	4a04      	ldr	r2, [pc, #16]	; (800fe70 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	601a      	str	r2, [r3, #0]
    }
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	4618      	mov	r0, r3
 800fe66:	370c      	adds	r7, #12
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6e:	4770      	bx	lr
 800fe70:	08028488 	.word	0x08028488

0800fe74 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b082      	sub	sp, #8
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
    }
 800fe7c:	6878      	ldr	r0, [r7, #4]
 800fe7e:	f7ff ffe9 	bl	800fe54 <_ZN8touchgfx15UIEventListenerD1Ev>
 800fe82:	2104      	movs	r1, #4
 800fe84:	6878      	ldr	r0, [r7, #4]
 800fe86:	f016 fc8b 	bl	80267a0 <_ZdlPvj>
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	3708      	adds	r7, #8
 800fe90:	46bd      	mov	sp, r7
 800fe92:	bd80      	pop	{r7, pc}

0800fe94 <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 800fe94:	b480      	push	{r7}
 800fe96:	b083      	sub	sp, #12
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 800fe9c:	4a07      	ldr	r2, [pc, #28]	; (800febc <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	601a      	str	r2, [r3, #0]
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	2200      	movs	r2, #0
 800fea6:	605a      	str	r2, [r3, #4]
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	2200      	movs	r2, #0
 800feac:	721a      	strb	r2, [r3, #8]
    {
    }
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	4618      	mov	r0, r3
 800feb2:	370c      	adds	r7, #12
 800feb4:	46bd      	mov	sp, r7
 800feb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feba:	4770      	bx	lr
 800febc:	08028468 	.word	0x08028468

0800fec0 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 800fec0:	b480      	push	{r7}
 800fec2:	b083      	sub	sp, #12
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
    {
 800fec8:	4a04      	ldr	r2, [pc, #16]	; (800fedc <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	601a      	str	r2, [r3, #0]
    }
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	4618      	mov	r0, r3
 800fed2:	370c      	adds	r7, #12
 800fed4:	46bd      	mov	sp, r7
 800fed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feda:	4770      	bx	lr
 800fedc:	08028468 	.word	0x08028468

0800fee0 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b082      	sub	sp, #8
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	6078      	str	r0, [r7, #4]
    }
 800fee8:	6878      	ldr	r0, [r7, #4]
 800feea:	f7ff ffe9 	bl	800fec0 <_ZN8touchgfx10TransitionD1Ev>
 800feee:	210c      	movs	r1, #12
 800fef0:	6878      	ldr	r0, [r7, #4]
 800fef2:	f016 fc55 	bl	80267a0 <_ZdlPvj>
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	4618      	mov	r0, r3
 800fefa:	3708      	adds	r7, #8
 800fefc:	46bd      	mov	sp, r7
 800fefe:	bd80      	pop	{r7, pc}

0800ff00 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 800ff00:	b480      	push	{r7}
 800ff02:	b083      	sub	sp, #12
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
 800ff08:	bf00      	nop
 800ff0a:	370c      	adds	r7, #12
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff12:	4770      	bx	lr

0800ff14 <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 800ff14:	b480      	push	{r7}
 800ff16:	b083      	sub	sp, #12
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
 800ff1c:	bf00      	nop
 800ff1e:	370c      	adds	r7, #12
 800ff20:	46bd      	mov	sp, r7
 800ff22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff26:	4770      	bx	lr

0800ff28 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 800ff28:	b480      	push	{r7}
 800ff2a:	b083      	sub	sp, #12
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
 800ff30:	bf00      	nop
 800ff32:	370c      	adds	r7, #12
 800ff34:	46bd      	mov	sp, r7
 800ff36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3a:	4770      	bx	lr

0800ff3c <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800ff3c:	b480      	push	{r7}
 800ff3e:	b083      	sub	sp, #12
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
 800ff44:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	683a      	ldr	r2, [r7, #0]
 800ff4a:	605a      	str	r2, [r3, #4]
    }
 800ff4c:	bf00      	nop
 800ff4e:	370c      	adds	r7, #12
 800ff50:	46bd      	mov	sp, r7
 800ff52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff56:	4770      	bx	lr

0800ff58 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800ff58:	b480      	push	{r7}
 800ff5a:	b083      	sub	sp, #12
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
 800ff60:	460b      	mov	r3, r1
 800ff62:	70fb      	strb	r3, [r7, #3]
    {
    }
 800ff64:	bf00      	nop
 800ff66:	370c      	adds	r7, #12
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6e:	4770      	bx	lr

0800ff70 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 800ff70:	b480      	push	{r7}
 800ff72:	b083      	sub	sp, #12
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
    {
 800ff78:	4a04      	ldr	r2, [pc, #16]	; (800ff8c <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	601a      	str	r2, [r3, #0]
    }
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	4618      	mov	r0, r3
 800ff82:	370c      	adds	r7, #12
 800ff84:	46bd      	mov	sp, r7
 800ff86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8a:	4770      	bx	lr
 800ff8c:	08028450 	.word	0x08028450

0800ff90 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b082      	sub	sp, #8
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	6078      	str	r0, [r7, #4]
    }
 800ff98:	6878      	ldr	r0, [r7, #4]
 800ff9a:	f7ff ffe9 	bl	800ff70 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800ff9e:	2104      	movs	r1, #4
 800ffa0:	6878      	ldr	r0, [r7, #4]
 800ffa2:	f016 fbfd 	bl	80267a0 <_ZdlPvj>
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	3708      	adds	r7, #8
 800ffac:	46bd      	mov	sp, r7
 800ffae:	bd80      	pop	{r7, pc}

0800ffb0 <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800ffb0:	b480      	push	{r7}
 800ffb2:	af00      	add	r7, sp, #0
    {
        return instance;
 800ffb4:	4b03      	ldr	r3, [pc, #12]	; (800ffc4 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800ffb6:	681b      	ldr	r3, [r3, #0]
    }
 800ffb8:	4618      	mov	r0, r3
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc0:	4770      	bx	lr
 800ffc2:	bf00      	nop
 800ffc4:	2000c68c 	.word	0x2000c68c

0800ffc8 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800ffc8:	b480      	push	{r7}
 800ffca:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800ffcc:	4b0b      	ldr	r3, [pc, #44]	; (800fffc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d008      	beq.n	800ffea <_ZN8touchgfx3HAL3lcdEv+0x22>
 800ffd8:	4b08      	ldr	r3, [pc, #32]	; (800fffc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d003      	beq.n	800ffea <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800ffe2:	4b06      	ldr	r3, [pc, #24]	; (800fffc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ffe8:	e002      	b.n	800fff0 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800ffea:	4b04      	ldr	r3, [pc, #16]	; (800fffc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	689b      	ldr	r3, [r3, #8]
        }
    }
 800fff0:	4618      	mov	r0, r3
 800fff2:	46bd      	mov	sp, r7
 800fff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff8:	4770      	bx	lr
 800fffa:	bf00      	nop
 800fffc:	2000c68c 	.word	0x2000c68c

08010000 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8010000:	b580      	push	{r7, lr}
 8010002:	b082      	sub	sp, #8
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
 8010008:	4a05      	ldr	r2, [pc, #20]	; (8010020 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	601a      	str	r2, [r3, #0]
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	4618      	mov	r0, r3
 8010012:	f7ff ff1f 	bl	800fe54 <_ZN8touchgfx15UIEventListenerD1Ev>
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	4618      	mov	r0, r3
 801001a:	3708      	adds	r7, #8
 801001c:	46bd      	mov	sp, r7
 801001e:	bd80      	pop	{r7, pc}
 8010020:	0802a25c 	.word	0x0802a25c

08010024 <_ZN8touchgfx11ApplicationD0Ev>:
 8010024:	b580      	push	{r7, lr}
 8010026:	b082      	sub	sp, #8
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
 801002c:	6878      	ldr	r0, [r7, #4]
 801002e:	f7ff ffe7 	bl	8010000 <_ZN8touchgfx11ApplicationD1Ev>
 8010032:	f44f 7198 	mov.w	r1, #304	; 0x130
 8010036:	6878      	ldr	r0, [r7, #4]
 8010038:	f016 fbb2 	bl	80267a0 <_ZdlPvj>
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	4618      	mov	r0, r3
 8010040:	3708      	adds	r7, #8
 8010042:	46bd      	mov	sp, r7
 8010044:	bd80      	pop	{r7, pc}
	...

08010048 <_ZN8touchgfx14MVPApplicationC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    MVPApplication() :
 8010048:	b580      	push	{r7, lr}
 801004a:	b082      	sub	sp, #8
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
        currentPresenter(0),
        pendingScreenTransitionCallback(0)
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	4618      	mov	r0, r3
 8010054:	f00a fc00 	bl	801a858 <_ZN8touchgfx11ApplicationC1Ev>
 8010058:	4a09      	ldr	r2, [pc, #36]	; (8010080 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	601a      	str	r2, [r3, #0]
        currentPresenter(0),
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	2200      	movs	r2, #0
 8010062:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        pendingScreenTransitionCallback(0)
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	2200      	movs	r2, #0
 801006a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    {
        instance = this;
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	4a04      	ldr	r2, [pc, #16]	; (8010084 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8010072:	6013      	str	r3, [r2, #0]
    }
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	4618      	mov	r0, r3
 8010078:	3708      	adds	r7, #8
 801007a:	46bd      	mov	sp, r7
 801007c:	bd80      	pop	{r7, pc}
 801007e:	bf00      	nop
 8010080:	08028414 	.word	0x08028414
 8010084:	2000c718 	.word	0x2000c718

08010088 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 8010088:	b580      	push	{r7, lr}
 801008a:	b082      	sub	sp, #8
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
 8010090:	4a05      	ldr	r2, [pc, #20]	; (80100a8 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	601a      	str	r2, [r3, #0]
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	4618      	mov	r0, r3
 801009a:	f7ff ffb1 	bl	8010000 <_ZN8touchgfx11ApplicationD1Ev>
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	4618      	mov	r0, r3
 80100a2:	3708      	adds	r7, #8
 80100a4:	46bd      	mov	sp, r7
 80100a6:	bd80      	pop	{r7, pc}
 80100a8:	08028414 	.word	0x08028414

080100ac <_ZN8touchgfx14MVPApplicationD0Ev>:
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b082      	sub	sp, #8
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
 80100b4:	6878      	ldr	r0, [r7, #4]
 80100b6:	f7ff ffe7 	bl	8010088 <_ZN8touchgfx14MVPApplicationD1Ev>
 80100ba:	f44f 719c 	mov.w	r1, #312	; 0x138
 80100be:	6878      	ldr	r0, [r7, #4]
 80100c0:	f016 fb6e 	bl	80267a0 <_ZdlPvj>
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	4618      	mov	r0, r3
 80100c8:	3708      	adds	r7, #8
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}

080100ce <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80100ce:	b580      	push	{r7, lr}
 80100d0:	b082      	sub	sp, #8
 80100d2:	af00      	add	r7, sp, #0
 80100d4:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 80100d6:	6878      	ldr	r0, [r7, #4]
 80100d8:	f000 f804 	bl	80100e4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 80100dc:	bf00      	nop
 80100de:	3708      	adds	r7, #8
 80100e0:	46bd      	mov	sp, r7
 80100e2:	bd80      	pop	{r7, pc}

080100e4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b082      	sub	sp, #8
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d00f      	beq.n	8010116 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	330c      	adds	r3, #12
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	4610      	mov	r0, r2
 801010a:	4798      	blx	r3
 801010c:	4603      	mov	r3, r0
 801010e:	2b00      	cmp	r3, #0
 8010110:	d001      	beq.n	8010116 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8010112:	2301      	movs	r3, #1
 8010114:	e000      	b.n	8010118 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8010116:	2300      	movs	r3, #0
 8010118:	2b00      	cmp	r3, #0
 801011a:	d00e      	beq.n	801013a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	3308      	adds	r3, #8
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	4610      	mov	r0, r2
 8010130:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	2200      	movs	r2, #0
 8010136:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 801013a:	bf00      	nop
 801013c:	3708      	adds	r7, #8
 801013e:	46bd      	mov	sp, r7
 8010140:	bd80      	pop	{r7, pc}

08010142 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 8010142:	b580      	push	{r7, lr}
 8010144:	b084      	sub	sp, #16
 8010146:	af00      	add	r7, sp, #0
 8010148:	60f8      	str	r0, [r7, #12]
 801014a:	60b9      	str	r1, [r7, #8]
 801014c:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 801014e:	f00a fb61 	bl	801a814 <_ZN8touchgfx11Application11getInstanceEv>
 8010152:	4603      	mov	r3, r0
 8010154:	4618      	mov	r0, r3
 8010156:	f00a fb63 	bl	801a820 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d008      	beq.n	8010174 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681a      	ldr	r2, [r3, #0]
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	330c      	adds	r3, #12
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	4610      	mov	r0, r2
 8010172:	4798      	blx	r3
    }
    if (*currentTrans)
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d007      	beq.n	801018c <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	681a      	ldr	r2, [r3, #0]
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	4610      	mov	r0, r2
 801018a:	4798      	blx	r3
    }
    if (*currentScreen)
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d008      	beq.n	80101a6 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	681a      	ldr	r2, [r3, #0]
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	3314      	adds	r3, #20
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	4610      	mov	r0, r2
 80101a4:	4798      	blx	r3
    }
    if (*currentPresenter)
 80101a6:	68bb      	ldr	r3, [r7, #8]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d008      	beq.n	80101c0 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 80101ae:	68bb      	ldr	r3, [r7, #8]
 80101b0:	681a      	ldr	r2, [r3, #0]
 80101b2:	68bb      	ldr	r3, [r7, #8]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	3304      	adds	r3, #4
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	4610      	mov	r0, r2
 80101be:	4798      	blx	r3
    }
    if (*currentScreen)
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d007      	beq.n	80101d8 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	681a      	ldr	r2, [r3, #0]
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	4610      	mov	r0, r2
 80101d6:	4798      	blx	r3
    }
    if (*currentPresenter)
 80101d8:	68bb      	ldr	r3, [r7, #8]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d008      	beq.n	80101f2 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 80101e0:	68bb      	ldr	r3, [r7, #8]
 80101e2:	681a      	ldr	r2, [r3, #0]
 80101e4:	68bb      	ldr	r3, [r7, #8]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	3308      	adds	r3, #8
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	4610      	mov	r0, r2
 80101f0:	4798      	blx	r3
    }
}
 80101f2:	bf00      	nop
 80101f4:	3710      	adds	r7, #16
 80101f6:	46bd      	mov	sp, r7
 80101f8:	bd80      	pop	{r7, pc}

080101fa <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 80101fa:	b580      	push	{r7, lr}
 80101fc:	b084      	sub	sp, #16
 80101fe:	af00      	add	r7, sp, #0
 8010200:	60f8      	str	r0, [r7, #12]
 8010202:	60b9      	str	r1, [r7, #8]
 8010204:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	330c      	adds	r3, #12
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	68f8      	ldr	r0, [r7, #12]
 8010210:	4798      	blx	r3
    newPresenter->activate();
 8010212:	68bb      	ldr	r3, [r7, #8]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	68b8      	ldr	r0, [r7, #8]
 801021a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 801021c:	6879      	ldr	r1, [r7, #4]
 801021e:	68f8      	ldr	r0, [r7, #12]
 8010220:	f00b fc08 	bl	801ba34 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	3310      	adds	r3, #16
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	6878      	ldr	r0, [r7, #4]
 801022e:	4798      	blx	r3

    Application::getInstance()->draw();
 8010230:	f00a faf0 	bl	801a814 <_ZN8touchgfx11Application11getInstanceEv>
 8010234:	4603      	mov	r3, r0
 8010236:	681a      	ldr	r2, [r3, #0]
 8010238:	3228      	adds	r2, #40	; 0x28
 801023a:	6812      	ldr	r2, [r2, #0]
 801023c:	4618      	mov	r0, r3
 801023e:	4790      	blx	r2
}
 8010240:	bf00      	nop
 8010242:	3710      	adds	r7, #16
 8010244:	46bd      	mov	sp, r7
 8010246:	bd80      	pop	{r7, pc}

08010248 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 8010248:	b480      	push	{r7}
 801024a:	b083      	sub	sp, #12
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
 8010250:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	683a      	ldr	r2, [r7, #0]
 8010256:	601a      	str	r2, [r3, #0]
    }
 8010258:	bf00      	nop
 801025a:	370c      	adds	r7, #12
 801025c:	46bd      	mov	sp, r7
 801025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010262:	4770      	bx	lr

08010264 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8010264:	b580      	push	{r7, lr}
 8010266:	b082      	sub	sp, #8
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
 801026c:	4a08      	ldr	r2, [pc, #32]	; (8010290 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	601a      	str	r2, [r3, #0]
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8010278:	4618      	mov	r0, r3
 801027a:	f000 fa4d 	bl	8010718 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	4618      	mov	r0, r3
 8010282:	f7ff ff01 	bl	8010088 <_ZN8touchgfx14MVPApplicationD1Ev>
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	4618      	mov	r0, r3
 801028a:	3708      	adds	r7, #8
 801028c:	46bd      	mov	sp, r7
 801028e:	bd80      	pop	{r7, pc}
 8010290:	080283c0 	.word	0x080283c0

08010294 <_ZN23FrontendApplicationBaseD0Ev>:
 8010294:	b580      	push	{r7, lr}
 8010296:	b082      	sub	sp, #8
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
 801029c:	6878      	ldr	r0, [r7, #4]
 801029e:	f7ff ffe1 	bl	8010264 <_ZN23FrontendApplicationBaseD1Ev>
 80102a2:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80102a6:	6878      	ldr	r0, [r7, #4]
 80102a8:	f016 fa7a 	bl	80267a0 <_ZdlPvj>
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	4618      	mov	r0, r3
 80102b0:	3708      	adds	r7, #8
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}
	...

080102b8 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b082      	sub	sp, #8
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	4618      	mov	r0, r3
 80102c4:	f7ff fde6 	bl	800fe94 <_ZN8touchgfx10TransitionC1Ev>
 80102c8:	4a03      	ldr	r2, [pc, #12]	; (80102d8 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	601a      	str	r2, [r3, #0]
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	4618      	mov	r0, r3
 80102d2:	3708      	adds	r7, #8
 80102d4:	46bd      	mov	sp, r7
 80102d6:	bd80      	pop	{r7, pc}
 80102d8:	080283a0 	.word	0x080283a0

080102dc <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 80102dc:	b580      	push	{r7, lr}
 80102de:	b082      	sub	sp, #8
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]
 80102e4:	4a05      	ldr	r2, [pc, #20]	; (80102fc <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	601a      	str	r2, [r3, #0]
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	4618      	mov	r0, r3
 80102ee:	f7ff fde7 	bl	800fec0 <_ZN8touchgfx10TransitionD1Ev>
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	4618      	mov	r0, r3
 80102f6:	3708      	adds	r7, #8
 80102f8:	46bd      	mov	sp, r7
 80102fa:	bd80      	pop	{r7, pc}
 80102fc:	080283a0 	.word	0x080283a0

08010300 <_ZN8touchgfx12NoTransitionD0Ev>:
 8010300:	b580      	push	{r7, lr}
 8010302:	b082      	sub	sp, #8
 8010304:	af00      	add	r7, sp, #0
 8010306:	6078      	str	r0, [r7, #4]
 8010308:	6878      	ldr	r0, [r7, #4]
 801030a:	f7ff ffe7 	bl	80102dc <_ZN8touchgfx12NoTransitionD1Ev>
 801030e:	210c      	movs	r1, #12
 8010310:	6878      	ldr	r0, [r7, #4]
 8010312:	f016 fa45 	bl	80267a0 <_ZdlPvj>
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	4618      	mov	r0, r3
 801031a:	3708      	adds	r7, #8
 801031c:	46bd      	mov	sp, r7
 801031e:	bd80      	pop	{r7, pc}

08010320 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 8010320:	b480      	push	{r7}
 8010322:	b083      	sub	sp, #12
 8010324:	af00      	add	r7, sp, #0
 8010326:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	2201      	movs	r2, #1
 801032c:	721a      	strb	r2, [r3, #8]
    }
 801032e:	bf00      	nop
 8010330:	370c      	adds	r7, #12
 8010332:	46bd      	mov	sp, r7
 8010334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010338:	4770      	bx	lr

0801033a <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 801033a:	b480      	push	{r7}
 801033c:	b083      	sub	sp, #12
 801033e:	af00      	add	r7, sp, #0
 8010340:	6078      	str	r0, [r7, #4]
 8010342:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	683a      	ldr	r2, [r7, #0]
 8010348:	605a      	str	r2, [r3, #4]
    }
 801034a:	bf00      	nop
 801034c:	370c      	adds	r7, #12
 801034e:	46bd      	mov	sp, r7
 8010350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010354:	4770      	bx	lr
	...

08010358 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8010358:	b580      	push	{r7, lr}
 801035a:	b084      	sub	sp, #16
 801035c:	af00      	add	r7, sp, #0
 801035e:	60f8      	str	r0, [r7, #12]
 8010360:	60b9      	str	r1, [r7, #8]
 8010362:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	4618      	mov	r0, r3
 8010368:	f7ff fe6e 	bl	8010048 <_ZN8touchgfx14MVPApplicationC1Ev>
 801036c:	4a13      	ldr	r2, [pc, #76]	; (80103bc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8010378:	4618      	mov	r0, r3
 801037a:	f000 f89f 	bl	80104bc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	687a      	ldr	r2, [r7, #4]
 8010382:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
      model(m)
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	68ba      	ldr	r2, [r7, #8]
 801038a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 801038e:	f7ff fe0f 	bl	800ffb0 <_ZN8touchgfx3HAL11getInstanceEv>
 8010392:	4603      	mov	r3, r0
 8010394:	681a      	ldr	r2, [r3, #0]
 8010396:	3208      	adds	r2, #8
 8010398:	6812      	ldr	r2, [r2, #0]
 801039a:	2100      	movs	r1, #0
 801039c:	4618      	mov	r0, r3
 801039e:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 80103a0:	2000      	movs	r0, #0
 80103a2:	f003 fde3 	bl	8013f6c <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80103a6:	f7ff fe0f 	bl	800ffc8 <_ZN8touchgfx3HAL3lcdEv>
 80103aa:	4603      	mov	r3, r0
 80103ac:	4618      	mov	r0, r3
 80103ae:	f00f ff08 	bl	80201c2 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	4618      	mov	r0, r3
 80103b6:	3710      	adds	r7, #16
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}
 80103bc:	080283c0 	.word	0x080283c0

080103c0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 80103c0:	b480      	push	{r7}
 80103c2:	b083      	sub	sp, #12
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
 80103c8:	6039      	str	r1, [r7, #0]
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	4618      	mov	r0, r3
 80103ce:	370c      	adds	r7, #12
 80103d0:	46bd      	mov	sp, r7
 80103d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d6:	4770      	bx	lr

080103d8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80103d8:	b580      	push	{r7, lr}
 80103da:	b082      	sub	sp, #8
 80103dc:	af00      	add	r7, sp, #0
 80103de:	6078      	str	r0, [r7, #4]
 80103e0:	6039      	str	r1, [r7, #0]
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	683a      	ldr	r2, [r7, #0]
 80103e6:	4611      	mov	r1, r2
 80103e8:	4618      	mov	r0, r3
 80103ea:	f7ff ffe9 	bl	80103c0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 80103ee:	683b      	ldr	r3, [r7, #0]
 80103f0:	685a      	ldr	r2, [r3, #4]
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	605a      	str	r2, [r3, #4]
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	683a      	ldr	r2, [r7, #0]
 80103fa:	3308      	adds	r3, #8
 80103fc:	3208      	adds	r2, #8
 80103fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010402:	e883 0003 	stmia.w	r3, {r0, r1}
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	4618      	mov	r0, r3
 801040a:	3708      	adds	r7, #8
 801040c:	46bd      	mov	sp, r7
 801040e:	bd80      	pop	{r7, pc}

08010410 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 8010410:	b590      	push	{r4, r7, lr}
 8010412:	b089      	sub	sp, #36	; 0x24
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	f503 749c 	add.w	r4, r3, #312	; 0x138
 801041e:	4b10      	ldr	r3, [pc, #64]	; (8010460 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 8010420:	61bb      	str	r3, [r7, #24]
 8010422:	2300      	movs	r3, #0
 8010424:	61fb      	str	r3, [r7, #28]
 8010426:	f107 0008 	add.w	r0, r7, #8
 801042a:	f107 0318 	add.w	r3, r7, #24
 801042e:	cb0c      	ldmia	r3, {r2, r3}
 8010430:	6879      	ldr	r1, [r7, #4]
 8010432:	f000 f85f 	bl	80104f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8010436:	f107 0308 	add.w	r3, r7, #8
 801043a:	4619      	mov	r1, r3
 801043c:	4620      	mov	r0, r4
 801043e:	f7ff ffcb 	bl	80103d8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8010442:	f107 0308 	add.w	r3, r7, #8
 8010446:	4618      	mov	r0, r3
 8010448:	f000 f966 	bl	8010718 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8010458:	bf00      	nop
 801045a:	3724      	adds	r7, #36	; 0x24
 801045c:	46bd      	mov	sp, r7
 801045e:	bd90      	pop	{r4, r7, pc}
 8010460:	08010465 	.word	0x08010465

08010464 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b084      	sub	sp, #16
 8010468:	af02      	add	r7, sp, #8
 801046a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8010478:	461a      	mov	r2, r3
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8010480:	9300      	str	r3, [sp, #0]
 8010482:	4b04      	ldr	r3, [pc, #16]	; (8010494 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 8010484:	4804      	ldr	r0, [pc, #16]	; (8010498 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 8010486:	f000 f855 	bl	8010534 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801048a:	bf00      	nop
 801048c:	3708      	adds	r7, #8
 801048e:	46bd      	mov	sp, r7
 8010490:	bd80      	pop	{r7, pc}
 8010492:	bf00      	nop
 8010494:	2000c70c 	.word	0x2000c70c
 8010498:	2000c708 	.word	0x2000c708

0801049c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 801049c:	b480      	push	{r7}
 801049e:	b083      	sub	sp, #12
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
 80104a4:	4a04      	ldr	r2, [pc, #16]	; (80104b8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	601a      	str	r2, [r3, #0]
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	4618      	mov	r0, r3
 80104ae:	370c      	adds	r7, #12
 80104b0:	46bd      	mov	sp, r7
 80104b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b6:	4770      	bx	lr
 80104b8:	08028450 	.word	0x08028450

080104bc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Initializes an empty callback.
     */
    Callback() : pobject(0), pmemfun_0(0) { }
 80104bc:	b580      	push	{r7, lr}
 80104be:	b082      	sub	sp, #8
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	4618      	mov	r0, r3
 80104c8:	f7ff ffe8 	bl	801049c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80104cc:	4a08      	ldr	r2, [pc, #32]	; (80104f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	601a      	str	r2, [r3, #0]
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	2200      	movs	r2, #0
 80104d6:	605a      	str	r2, [r3, #4]
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	2200      	movs	r2, #0
 80104dc:	609a      	str	r2, [r3, #8]
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	2200      	movs	r2, #0
 80104e2:	60da      	str	r2, [r3, #12]
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	4618      	mov	r0, r3
 80104e8:	3708      	adds	r7, #8
 80104ea:	46bd      	mov	sp, r7
 80104ec:	bd80      	pop	{r7, pc}
 80104ee:	bf00      	nop
 80104f0:	080283fc 	.word	0x080283fc

080104f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function
     *                       takes zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 80104f4:	b580      	push	{r7, lr}
 80104f6:	b084      	sub	sp, #16
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	60f8      	str	r0, [r7, #12]
 80104fc:	60b9      	str	r1, [r7, #8]
 80104fe:	4639      	mov	r1, r7
 8010500:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	4618      	mov	r0, r3
 8010508:	f7ff ffc8 	bl	801049c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 801050c:	4a08      	ldr	r2, [pc, #32]	; (8010530 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	68ba      	ldr	r2, [r7, #8]
 8010516:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	3308      	adds	r3, #8
 801051c:	463a      	mov	r2, r7
 801051e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010522:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	4618      	mov	r0, r3
 801052a:	3710      	adds	r7, #16
 801052c:	46bd      	mov	sp, r7
 801052e:	bd80      	pop	{r7, pc}
 8010530:	080283fc 	.word	0x080283fc

08010534 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8010534:	b590      	push	{r4, r7, lr}
 8010536:	b089      	sub	sp, #36	; 0x24
 8010538:	af00      	add	r7, sp, #0
 801053a:	60f8      	str	r0, [r7, #12]
 801053c:	60b9      	str	r1, [r7, #8]
 801053e:	607a      	str	r2, [r7, #4]
 8010540:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	689a      	ldr	r2, [r3, #8]
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	689b      	ldr	r3, [r3, #8]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	3320      	adds	r3, #32
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	4610      	mov	r0, r2
 8010552:	4798      	blx	r3
 8010554:	4603      	mov	r3, r0
 8010556:	f642 02f7 	movw	r2, #10487	; 0x28f7
 801055a:	4293      	cmp	r3, r2
 801055c:	d805      	bhi.n	801056a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 801055e:	4b45      	ldr	r3, [pc, #276]	; (8010674 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 8010560:	4a45      	ldr	r2, [pc, #276]	; (8010678 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 8010562:	21c2      	movs	r1, #194	; 0xc2
 8010564:	4845      	ldr	r0, [pc, #276]	; (801067c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 8010566:	f016 f949 	bl	80267fc <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	685a      	ldr	r2, [r3, #4]
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	685b      	ldr	r3, [r3, #4]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	3320      	adds	r3, #32
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	4610      	mov	r0, r2
 801057a:	4798      	blx	r3
 801057c:	4603      	mov	r3, r0
 801057e:	2b0f      	cmp	r3, #15
 8010580:	d805      	bhi.n	801058e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8010582:	4b3f      	ldr	r3, [pc, #252]	; (8010680 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 8010584:	4a3c      	ldr	r2, [pc, #240]	; (8010678 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 8010586:	21c3      	movs	r1, #195	; 0xc3
 8010588:	483c      	ldr	r0, [pc, #240]	; (801067c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 801058a:	f016 f937 	bl	80267fc <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	68da      	ldr	r2, [r3, #12]
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	68db      	ldr	r3, [r3, #12]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	3320      	adds	r3, #32
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	4610      	mov	r0, r2
 801059e:	4798      	blx	r3
 80105a0:	4603      	mov	r3, r0
 80105a2:	2b0b      	cmp	r3, #11
 80105a4:	d805      	bhi.n	80105b2 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 80105a6:	4b37      	ldr	r3, [pc, #220]	; (8010684 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 80105a8:	4a33      	ldr	r2, [pc, #204]	; (8010678 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 80105aa:	21c4      	movs	r1, #196	; 0xc4
 80105ac:	4833      	ldr	r0, [pc, #204]	; (801067c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 80105ae:	f016 f925 	bl	80267fc <__assert_func>

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 80105b2:	683a      	ldr	r2, [r7, #0]
 80105b4:	68b9      	ldr	r1, [r7, #8]
 80105b6:	68f8      	ldr	r0, [r7, #12]
 80105b8:	f7ff fdc3 	bl	8010142 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	68db      	ldr	r3, [r3, #12]
 80105c0:	2100      	movs	r1, #0
 80105c2:	4618      	mov	r0, r3
 80105c4:	f000 f860 	bl	8010688 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80105c8:	4603      	mov	r3, r0
 80105ca:	4619      	mov	r1, r3
 80105cc:	200c      	movs	r0, #12
 80105ce:	f7ff fbf3 	bl	800fdb8 <_ZnwjPv>
 80105d2:	4604      	mov	r4, r0
 80105d4:	4620      	mov	r0, r4
 80105d6:	f7ff fe6f 	bl	80102b8 <_ZN8touchgfx12NoTransitionC1Ev>
 80105da:	61fc      	str	r4, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	689b      	ldr	r3, [r3, #8]
 80105e0:	2100      	movs	r1, #0
 80105e2:	4618      	mov	r0, r3
 80105e4:	f000 f863 	bl	80106ae <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 80105e8:	4603      	mov	r3, r0
 80105ea:	4619      	mov	r1, r3
 80105ec:	f642 00f8 	movw	r0, #10488	; 0x28f8
 80105f0:	f7ff fbe2 	bl	800fdb8 <_ZnwjPv>
 80105f4:	4604      	mov	r4, r0
 80105f6:	4620      	mov	r0, r4
 80105f8:	f003 ff40 	bl	801447c <_ZN8MainViewC1Ev>
 80105fc:	61bc      	str	r4, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	685b      	ldr	r3, [r3, #4]
 8010602:	2100      	movs	r1, #0
 8010604:	4618      	mov	r0, r3
 8010606:	f000 f865 	bl	80106d4 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 801060a:	4603      	mov	r3, r0
 801060c:	4619      	mov	r1, r3
 801060e:	2010      	movs	r0, #16
 8010610:	f7ff fbd2 	bl	800fdb8 <_ZnwjPv>
 8010614:	4604      	mov	r4, r0
 8010616:	69b9      	ldr	r1, [r7, #24]
 8010618:	4620      	mov	r0, r4
 801061a:	f003 fe75 	bl	8014308 <_ZN13MainPresenterC1ER8MainView>
 801061e:	617c      	str	r4, [r7, #20]
    *currentTrans = newTransition;
 8010620:	683b      	ldr	r3, [r7, #0]
 8010622:	69fa      	ldr	r2, [r7, #28]
 8010624:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8010626:	68bb      	ldr	r3, [r7, #8]
 8010628:	697a      	ldr	r2, [r7, #20]
 801062a:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	69ba      	ldr	r2, [r7, #24]
 8010630:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8010632:	697b      	ldr	r3, [r7, #20]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d002      	beq.n	801063e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10a>
 8010638:	697b      	ldr	r3, [r7, #20]
 801063a:	3304      	adds	r3, #4
 801063c:	e000      	b.n	8010640 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 801063e:	2300      	movs	r3, #0
 8010640:	4619      	mov	r1, r3
 8010642:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010644:	f7ff fe00 	bl	8010248 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8010648:	697b      	ldr	r3, [r7, #20]
 801064a:	3304      	adds	r3, #4
 801064c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801064e:	4618      	mov	r0, r3
 8010650:	f7ff fe73 	bl	801033a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8010654:	69bb      	ldr	r3, [r7, #24]
 8010656:	6979      	ldr	r1, [r7, #20]
 8010658:	4618      	mov	r0, r3
 801065a:	f000 f84e 	bl	80106fa <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 801065e:	69fa      	ldr	r2, [r7, #28]
 8010660:	6979      	ldr	r1, [r7, #20]
 8010662:	69b8      	ldr	r0, [r7, #24]
 8010664:	f7ff fdc9 	bl	80101fa <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 8010668:	697b      	ldr	r3, [r7, #20]
}
 801066a:	4618      	mov	r0, r3
 801066c:	3724      	adds	r7, #36	; 0x24
 801066e:	46bd      	mov	sp, r7
 8010670:	bd90      	pop	{r4, r7, pc}
 8010672:	bf00      	nop
 8010674:	080279d8 	.word	0x080279d8
 8010678:	08027a68 	.word	0x08027a68
 801067c:	08027b68 	.word	0x08027b68
 8010680:	08027bac 	.word	0x08027bac
 8010684:	08027c50 	.word	0x08027c50

08010688 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 8010688:	b580      	push	{r7, lr}
 801068a:	b082      	sub	sp, #8
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
 8010690:	460b      	mov	r3, r1
 8010692:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	3324      	adds	r3, #36	; 0x24
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	887a      	ldrh	r2, [r7, #2]
 801069e:	4611      	mov	r1, r2
 80106a0:	6878      	ldr	r0, [r7, #4]
 80106a2:	4798      	blx	r3
 80106a4:	4603      	mov	r3, r0
    }
 80106a6:	4618      	mov	r0, r3
 80106a8:	3708      	adds	r7, #8
 80106aa:	46bd      	mov	sp, r7
 80106ac:	bd80      	pop	{r7, pc}

080106ae <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 80106ae:	b580      	push	{r7, lr}
 80106b0:	b082      	sub	sp, #8
 80106b2:	af00      	add	r7, sp, #0
 80106b4:	6078      	str	r0, [r7, #4]
 80106b6:	460b      	mov	r3, r1
 80106b8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	3324      	adds	r3, #36	; 0x24
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	887a      	ldrh	r2, [r7, #2]
 80106c4:	4611      	mov	r1, r2
 80106c6:	6878      	ldr	r0, [r7, #4]
 80106c8:	4798      	blx	r3
 80106ca:	4603      	mov	r3, r0
    }
 80106cc:	4618      	mov	r0, r3
 80106ce:	3708      	adds	r7, #8
 80106d0:	46bd      	mov	sp, r7
 80106d2:	bd80      	pop	{r7, pc}

080106d4 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b082      	sub	sp, #8
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
 80106dc:	460b      	mov	r3, r1
 80106de:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	3324      	adds	r3, #36	; 0x24
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	887a      	ldrh	r2, [r7, #2]
 80106ea:	4611      	mov	r1, r2
 80106ec:	6878      	ldr	r0, [r7, #4]
 80106ee:	4798      	blx	r3
 80106f0:	4603      	mov	r3, r0
    }
 80106f2:	4618      	mov	r0, r3
 80106f4:	3708      	adds	r7, #8
 80106f6:	46bd      	mov	sp, r7
 80106f8:	bd80      	pop	{r7, pc}

080106fa <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 80106fa:	b480      	push	{r7}
 80106fc:	b083      	sub	sp, #12
 80106fe:	af00      	add	r7, sp, #0
 8010700:	6078      	str	r0, [r7, #4]
 8010702:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	683a      	ldr	r2, [r7, #0]
 8010708:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801070a:	bf00      	nop
 801070c:	370c      	adds	r7, #12
 801070e:	46bd      	mov	sp, r7
 8010710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010714:	4770      	bx	lr
	...

08010718 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8010718:	b580      	push	{r7, lr}
 801071a:	b082      	sub	sp, #8
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
 8010720:	4a05      	ldr	r2, [pc, #20]	; (8010738 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	601a      	str	r2, [r3, #0]
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	4618      	mov	r0, r3
 801072a:	f7ff fc21 	bl	800ff70 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	4618      	mov	r0, r3
 8010732:	3708      	adds	r7, #8
 8010734:	46bd      	mov	sp, r7
 8010736:	bd80      	pop	{r7, pc}
 8010738:	080283fc 	.word	0x080283fc

0801073c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 801073c:	b580      	push	{r7, lr}
 801073e:	b082      	sub	sp, #8
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
 8010744:	6878      	ldr	r0, [r7, #4]
 8010746:	f7ff ffe7 	bl	8010718 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 801074a:	2110      	movs	r1, #16
 801074c:	6878      	ldr	r0, [r7, #4]
 801074e:	f016 f827 	bl	80267a0 <_ZdlPvj>
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	4618      	mov	r0, r3
 8010756:	3708      	adds	r7, #8
 8010758:	46bd      	mov	sp, r7
 801075a:	bd80      	pop	{r7, pc}

0801075c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 801075c:	b580      	push	{r7, lr}
 801075e:	b082      	sub	sp, #8
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	685b      	ldr	r3, [r3, #4]
 8010768:	687a      	ldr	r2, [r7, #4]
 801076a:	68d2      	ldr	r2, [r2, #12]
 801076c:	1052      	asrs	r2, r2, #1
 801076e:	1899      	adds	r1, r3, r2
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	68db      	ldr	r3, [r3, #12]
 8010774:	f003 0301 	and.w	r3, r3, #1
 8010778:	2b00      	cmp	r3, #0
 801077a:	d102      	bne.n	8010782 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	689b      	ldr	r3, [r3, #8]
 8010780:	e00a      	b.n	8010798 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	685b      	ldr	r3, [r3, #4]
 8010786:	687a      	ldr	r2, [r7, #4]
 8010788:	68d2      	ldr	r2, [r2, #12]
 801078a:	1052      	asrs	r2, r2, #1
 801078c:	4413      	add	r3, r2
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	687a      	ldr	r2, [r7, #4]
 8010792:	6892      	ldr	r2, [r2, #8]
 8010794:	4413      	add	r3, r2
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	4608      	mov	r0, r1
 801079a:	4798      	blx	r3
    }
 801079c:	bf00      	nop
 801079e:	3708      	adds	r7, #8
 80107a0:	46bd      	mov	sp, r7
 80107a2:	bd80      	pop	{r7, pc}

080107a4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 80107a4:	b480      	push	{r7}
 80107a6:	b083      	sub	sp, #12
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	685b      	ldr	r3, [r3, #4]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d010      	beq.n	80107d6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	689b      	ldr	r3, [r3, #8]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d107      	bne.n	80107cc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	68db      	ldr	r3, [r3, #12]
 80107c0:	f003 0301 	and.w	r3, r3, #1
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d101      	bne.n	80107cc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80107c8:	2301      	movs	r3, #1
 80107ca:	e000      	b.n	80107ce <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 80107cc:	2300      	movs	r3, #0
 80107ce:	2b01      	cmp	r3, #1
 80107d0:	d001      	beq.n	80107d6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80107d2:	2301      	movs	r3, #1
 80107d4:	e000      	b.n	80107d8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 80107d6:	2300      	movs	r3, #0
    }
 80107d8:	4618      	mov	r0, r3
 80107da:	370c      	adds	r7, #12
 80107dc:	46bd      	mov	sp, r7
 80107de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e2:	4770      	bx	lr

080107e4 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param col The color.
     *
     * @see Color::getColorFrom24BitRGB()
     */
    colortype(uint32_t col)
 80107e4:	b480      	push	{r7}
 80107e6:	b083      	sub	sp, #12
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
 80107ec:	6039      	str	r1, [r7, #0]
    {
        color = col;
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	683a      	ldr	r2, [r7, #0]
 80107f2:	601a      	str	r2, [r3, #0]
    }
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	4618      	mov	r0, r3
 80107f8:	370c      	adds	r7, #12
 80107fa:	46bd      	mov	sp, r7
 80107fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010800:	4770      	bx	lr

08010802 <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 8010802:	b480      	push	{r7}
 8010804:	b083      	sub	sp, #12
 8010806:	af00      	add	r7, sp, #0
 8010808:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	2200      	movs	r2, #0
 801080e:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	2200      	movs	r2, #0
 8010814:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	2200      	movs	r2, #0
 801081a:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	2200      	movs	r2, #0
 8010820:	80da      	strh	r2, [r3, #6]
    }
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	4618      	mov	r0, r3
 8010826:	370c      	adds	r7, #12
 8010828:	46bd      	mov	sp, r7
 801082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082e:	4770      	bx	lr

08010830 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 8010830:	b480      	push	{r7}
 8010832:	b085      	sub	sp, #20
 8010834:	af00      	add	r7, sp, #0
 8010836:	60f8      	str	r0, [r7, #12]
 8010838:	4608      	mov	r0, r1
 801083a:	4611      	mov	r1, r2
 801083c:	461a      	mov	r2, r3
 801083e:	4603      	mov	r3, r0
 8010840:	817b      	strh	r3, [r7, #10]
 8010842:	460b      	mov	r3, r1
 8010844:	813b      	strh	r3, [r7, #8]
 8010846:	4613      	mov	r3, r2
 8010848:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	897a      	ldrh	r2, [r7, #10]
 801084e:	801a      	strh	r2, [r3, #0]
        this->y = y;
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	893a      	ldrh	r2, [r7, #8]
 8010854:	805a      	strh	r2, [r3, #2]
        this->width = width;
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	88fa      	ldrh	r2, [r7, #6]
 801085a:	809a      	strh	r2, [r3, #4]
        this->height = height;
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	8b3a      	ldrh	r2, [r7, #24]
 8010860:	80da      	strh	r2, [r3, #6]
    }
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	4618      	mov	r0, r3
 8010866:	3714      	adds	r7, #20
 8010868:	46bd      	mov	sp, r7
 801086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801086e:	4770      	bx	lr

08010870 <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 8010870:	b480      	push	{r7}
 8010872:	b083      	sub	sp, #12
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
 8010878:	460b      	mov	r3, r1
 801087a:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	887a      	ldrh	r2, [r7, #2]
 8010880:	801a      	strh	r2, [r3, #0]
    {
    }
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	4618      	mov	r0, r3
 8010886:	370c      	adds	r7, #12
 8010888:	46bd      	mov	sp, r7
 801088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088e:	4770      	bx	lr

08010890 <_ZN8touchgfx8DrawableC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Drawable() : rect(0, 0, 0, 0),
 8010890:	b580      	push	{r7, lr}
 8010892:	b084      	sub	sp, #16
 8010894:	af02      	add	r7, sp, #8
 8010896:	6078      	str	r0, [r7, #4]
        parent(0),
        nextSibling(0),
        nextDrawChainElement(0),
        touchable(false),
        visible(true)
 8010898:	4a13      	ldr	r2, [pc, #76]	; (80108e8 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	601a      	str	r2, [r3, #0]
    Drawable() : rect(0, 0, 0, 0),
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	1d18      	adds	r0, r3, #4
 80108a2:	2300      	movs	r3, #0
 80108a4:	9300      	str	r3, [sp, #0]
 80108a6:	2300      	movs	r3, #0
 80108a8:	2200      	movs	r2, #0
 80108aa:	2100      	movs	r1, #0
 80108ac:	f7ff ffc0 	bl	8010830 <_ZN8touchgfx4RectC1Essss>
        visible(true)
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	330c      	adds	r3, #12
 80108b4:	4618      	mov	r0, r3
 80108b6:	f7ff ffa4 	bl	8010802 <_ZN8touchgfx4RectC1Ev>
        parent(0),
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	2200      	movs	r2, #0
 80108be:	615a      	str	r2, [r3, #20]
        nextSibling(0),
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	2200      	movs	r2, #0
 80108c4:	619a      	str	r2, [r3, #24]
        nextDrawChainElement(0),
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	2200      	movs	r2, #0
 80108ca:	61da      	str	r2, [r3, #28]
        touchable(false),
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	2200      	movs	r2, #0
 80108d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        visible(true)
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	2201      	movs	r2, #1
 80108d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	4618      	mov	r0, r3
 80108e0:	3708      	adds	r7, #8
 80108e2:	46bd      	mov	sp, r7
 80108e4:	bd80      	pop	{r7, pc}
 80108e6:	bf00      	nop
 80108e8:	0802a394 	.word	0x0802a394

080108ec <_ZN8touchgfx8DrawableD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Drawable() { }
 80108ec:	b480      	push	{r7}
 80108ee:	b083      	sub	sp, #12
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
 80108f4:	4a04      	ldr	r2, [pc, #16]	; (8010908 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	601a      	str	r2, [r3, #0]
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	4618      	mov	r0, r3
 80108fe:	370c      	adds	r7, #12
 8010900:	46bd      	mov	sp, r7
 8010902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010906:	4770      	bx	lr
 8010908:	0802a394 	.word	0x0802a394

0801090c <_ZN8touchgfx8DrawableD0Ev>:
 801090c:	b580      	push	{r7, lr}
 801090e:	b082      	sub	sp, #8
 8010910:	af00      	add	r7, sp, #0
 8010912:	6078      	str	r0, [r7, #4]
 8010914:	6878      	ldr	r0, [r7, #4]
 8010916:	f7ff ffe9 	bl	80108ec <_ZN8touchgfx8DrawableD1Ev>
 801091a:	2128      	movs	r1, #40	; 0x28
 801091c:	6878      	ldr	r0, [r7, #4]
 801091e:	f015 ff3f 	bl	80267a0 <_ZdlPvj>
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	4618      	mov	r0, r3
 8010926:	3708      	adds	r7, #8
 8010928:	46bd      	mov	sp, r7
 801092a:	bd80      	pop	{r7, pc}

0801092c <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 801092c:	b580      	push	{r7, lr}
 801092e:	b084      	sub	sp, #16
 8010930:	af00      	add	r7, sp, #0
 8010932:	60f8      	str	r0, [r7, #12]
 8010934:	4608      	mov	r0, r1
 8010936:	4611      	mov	r1, r2
 8010938:	461a      	mov	r2, r3
 801093a:	4603      	mov	r3, r0
 801093c:	817b      	strh	r3, [r7, #10]
 801093e:	460b      	mov	r3, r1
 8010940:	813b      	strh	r3, [r7, #8]
 8010942:	4613      	mov	r3, r2
 8010944:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	3334      	adds	r3, #52	; 0x34
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8010952:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8010956:	68f8      	ldr	r0, [r7, #12]
 8010958:	4798      	blx	r3
        setWidth(width);
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	3338      	adds	r3, #56	; 0x38
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010966:	4611      	mov	r1, r2
 8010968:	68f8      	ldr	r0, [r7, #12]
 801096a:	4798      	blx	r3
        setHeight(height);
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	333c      	adds	r3, #60	; 0x3c
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8010978:	4611      	mov	r1, r2
 801097a:	68f8      	ldr	r0, [r7, #12]
 801097c:	4798      	blx	r3
    }
 801097e:	bf00      	nop
 8010980:	3710      	adds	r7, #16
 8010982:	46bd      	mov	sp, r7
 8010984:	bd80      	pop	{r7, pc}

08010986 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 8010986:	b480      	push	{r7}
 8010988:	b083      	sub	sp, #12
 801098a:	af00      	add	r7, sp, #0
 801098c:	6078      	str	r0, [r7, #4]
 801098e:	460b      	mov	r3, r1
 8010990:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	887a      	ldrh	r2, [r7, #2]
 8010996:	809a      	strh	r2, [r3, #4]
    }
 8010998:	bf00      	nop
 801099a:	370c      	adds	r7, #12
 801099c:	46bd      	mov	sp, r7
 801099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a2:	4770      	bx	lr

080109a4 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 80109a4:	b480      	push	{r7}
 80109a6:	b083      	sub	sp, #12
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	6078      	str	r0, [r7, #4]
 80109ac:	460b      	mov	r3, r1
 80109ae:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	887a      	ldrh	r2, [r7, #2]
 80109b4:	80da      	strh	r2, [r3, #6]
    }
 80109b6:	bf00      	nop
 80109b8:	370c      	adds	r7, #12
 80109ba:	46bd      	mov	sp, r7
 80109bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c0:	4770      	bx	lr

080109c2 <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 80109c2:	b580      	push	{r7, lr}
 80109c4:	b082      	sub	sp, #8
 80109c6:	af00      	add	r7, sp, #0
 80109c8:	6078      	str	r0, [r7, #4]
 80109ca:	460b      	mov	r3, r1
 80109cc:	807b      	strh	r3, [r7, #2]
 80109ce:	4613      	mov	r3, r2
 80109d0:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	332c      	adds	r3, #44	; 0x2c
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80109de:	4611      	mov	r1, r2
 80109e0:	6878      	ldr	r0, [r7, #4]
 80109e2:	4798      	blx	r3
        setY(y);
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	3330      	adds	r3, #48	; 0x30
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	f9b7 2000 	ldrsh.w	r2, [r7]
 80109f0:	4611      	mov	r1, r2
 80109f2:	6878      	ldr	r0, [r7, #4]
 80109f4:	4798      	blx	r3
    }
 80109f6:	bf00      	nop
 80109f8:	3708      	adds	r7, #8
 80109fa:	46bd      	mov	sp, r7
 80109fc:	bd80      	pop	{r7, pc}

080109fe <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 80109fe:	b480      	push	{r7}
 8010a00:	b083      	sub	sp, #12
 8010a02:	af00      	add	r7, sp, #0
 8010a04:	6078      	str	r0, [r7, #4]
 8010a06:	460b      	mov	r3, r1
 8010a08:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	887a      	ldrh	r2, [r7, #2]
 8010a0e:	811a      	strh	r2, [r3, #8]
    }
 8010a10:	bf00      	nop
 8010a12:	370c      	adds	r7, #12
 8010a14:	46bd      	mov	sp, r7
 8010a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1a:	4770      	bx	lr

08010a1c <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 8010a1c:	b480      	push	{r7}
 8010a1e:	b083      	sub	sp, #12
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
 8010a24:	460b      	mov	r3, r1
 8010a26:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	887a      	ldrh	r2, [r7, #2]
 8010a2c:	815a      	strh	r2, [r3, #10]
    }
 8010a2e:	bf00      	nop
 8010a30:	370c      	adds	r7, #12
 8010a32:	46bd      	mov	sp, r7
 8010a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a38:	4770      	bx	lr

08010a3a <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 8010a3a:	b480      	push	{r7}
 8010a3c:	b083      	sub	sp, #12
 8010a3e:	af00      	add	r7, sp, #0
 8010a40:	6078      	str	r0, [r7, #4]
 8010a42:	bf00      	nop
 8010a44:	370c      	adds	r7, #12
 8010a46:	46bd      	mov	sp, r7
 8010a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4c:	4770      	bx	lr

08010a4e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 8010a4e:	b480      	push	{r7}
 8010a50:	b083      	sub	sp, #12
 8010a52:	af00      	add	r7, sp, #0
 8010a54:	6078      	str	r0, [r7, #4]
 8010a56:	6039      	str	r1, [r7, #0]
 8010a58:	bf00      	nop
 8010a5a:	370c      	adds	r7, #12
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a62:	4770      	bx	lr

08010a64 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 8010a64:	b480      	push	{r7}
 8010a66:	b083      	sub	sp, #12
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
 8010a6c:	6039      	str	r1, [r7, #0]
 8010a6e:	bf00      	nop
 8010a70:	370c      	adds	r7, #12
 8010a72:	46bd      	mov	sp, r7
 8010a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a78:	4770      	bx	lr

08010a7a <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 8010a7a:	b480      	push	{r7}
 8010a7c:	b083      	sub	sp, #12
 8010a7e:	af00      	add	r7, sp, #0
 8010a80:	6078      	str	r0, [r7, #4]
 8010a82:	6039      	str	r1, [r7, #0]
 8010a84:	bf00      	nop
 8010a86:	370c      	adds	r7, #12
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a8e:	4770      	bx	lr

08010a90 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 8010a90:	b480      	push	{r7}
 8010a92:	b083      	sub	sp, #12
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
 8010a98:	bf00      	nop
 8010a9a:	370c      	adds	r7, #12
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa2:	4770      	bx	lr

08010aa4 <_ZN8touchgfx8Drawable10setVisibleEb>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param vis true if this Drawable should be visible. By default, drawables are visible unless
     *            this function has been called with false as argument.
     */
    void setVisible(bool vis)
 8010aa4:	b480      	push	{r7}
 8010aa6:	b083      	sub	sp, #12
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	6078      	str	r0, [r7, #4]
 8010aac:	460b      	mov	r3, r1
 8010aae:	70fb      	strb	r3, [r7, #3]
    {
        visible = vis;
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	78fa      	ldrb	r2, [r7, #3]
 8010ab4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8010ab8:	bf00      	nop
 8010aba:	370c      	adds	r7, #12
 8010abc:	46bd      	mov	sp, r7
 8010abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac2:	4770      	bx	lr

08010ac4 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8010ac4:	b480      	push	{r7}
 8010ac6:	b083      	sub	sp, #12
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	370c      	adds	r7, #12
 8010ad6:	46bd      	mov	sp, r7
 8010ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010adc:	4770      	bx	lr

08010ade <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8010ade:	b480      	push	{r7}
 8010ae0:	b083      	sub	sp, #12
 8010ae2:	af00      	add	r7, sp, #0
 8010ae4:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8010aec:	4618      	mov	r0, r3
 8010aee:	370c      	adds	r7, #12
 8010af0:	46bd      	mov	sp, r7
 8010af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af6:	4770      	bx	lr

08010af8 <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b082      	sub	sp, #8
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
 8010b00:	460b      	mov	r3, r1
 8010b02:	807b      	strh	r3, [r7, #2]
 8010b04:	4613      	mov	r3, r2
 8010b06:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	3354      	adds	r3, #84	; 0x54
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	8879      	ldrh	r1, [r7, #2]
 8010b12:	687a      	ldr	r2, [r7, #4]
 8010b14:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8010b18:	b292      	uxth	r2, r2
 8010b1a:	1a8a      	subs	r2, r1, r2
 8010b1c:	b292      	uxth	r2, r2
 8010b1e:	b210      	sxth	r0, r2
 8010b20:	8839      	ldrh	r1, [r7, #0]
 8010b22:	687a      	ldr	r2, [r7, #4]
 8010b24:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8010b28:	b292      	uxth	r2, r2
 8010b2a:	1a8a      	subs	r2, r1, r2
 8010b2c:	b292      	uxth	r2, r2
 8010b2e:	b212      	sxth	r2, r2
 8010b30:	4601      	mov	r1, r0
 8010b32:	6878      	ldr	r0, [r7, #4]
 8010b34:	4798      	blx	r3
    }
 8010b36:	bf00      	nop
 8010b38:	3708      	adds	r7, #8
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	bd80      	pop	{r7, pc}

08010b3e <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8010b3e:	b480      	push	{r7}
 8010b40:	b083      	sub	sp, #12
 8010b42:	af00      	add	r7, sp, #0
 8010b44:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b4c:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b54:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b5c:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8010b5e:	bf00      	nop
 8010b60:	370c      	adds	r7, #12
 8010b62:	46bd      	mov	sp, r7
 8010b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b68:	4770      	bx	lr

08010b6a <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8010b6a:	b580      	push	{r7, lr}
 8010b6c:	b084      	sub	sp, #16
 8010b6e:	af00      	add	r7, sp, #0
 8010b70:	60f8      	str	r0, [r7, #12]
 8010b72:	60b9      	str	r1, [r7, #8]
 8010b74:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8010b76:	68f8      	ldr	r0, [r7, #12]
 8010b78:	f7ff ffe1 	bl	8010b3e <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	681a      	ldr	r2, [r3, #0]
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	68fa      	ldr	r2, [r7, #12]
 8010b88:	601a      	str	r2, [r3, #0]
    }
 8010b8a:	bf00      	nop
 8010b8c:	3710      	adds	r7, #16
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	bd80      	pop	{r7, pc}
	...

08010b94 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 8010b94:	b580      	push	{r7, lr}
 8010b96:	b082      	sub	sp, #8
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	6078      	str	r0, [r7, #4]
 8010b9c:	4a05      	ldr	r2, [pc, #20]	; (8010bb4 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	601a      	str	r2, [r3, #0]
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	f7ff fea1 	bl	80108ec <_ZN8touchgfx8DrawableD1Ev>
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	4618      	mov	r0, r3
 8010bae:	3708      	adds	r7, #8
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	bd80      	pop	{r7, pc}
 8010bb4:	08029160 	.word	0x08029160

08010bb8 <_ZN8touchgfx9ContainerD0Ev>:
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b082      	sub	sp, #8
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
 8010bc0:	6878      	ldr	r0, [r7, #4]
 8010bc2:	f7ff ffe7 	bl	8010b94 <_ZN8touchgfx9ContainerD1Ev>
 8010bc6:	212c      	movs	r1, #44	; 0x2c
 8010bc8:	6878      	ldr	r0, [r7, #4]
 8010bca:	f015 fde9 	bl	80267a0 <_ZdlPvj>
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	3708      	adds	r7, #8
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	bd80      	pop	{r7, pc}

08010bd8 <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b082      	sub	sp, #8
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
 8010be0:	4a06      	ldr	r2, [pc, #24]	; (8010bfc <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	601a      	str	r2, [r3, #0]
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	3304      	adds	r3, #4
 8010bea:	4618      	mov	r0, r3
 8010bec:	f7ff ffd2 	bl	8010b94 <_ZN8touchgfx9ContainerD1Ev>
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	3708      	adds	r7, #8
 8010bf6:	46bd      	mov	sp, r7
 8010bf8:	bd80      	pop	{r7, pc}
 8010bfa:	bf00      	nop
 8010bfc:	0802a48c 	.word	0x0802a48c

08010c00 <_ZN8touchgfx6ScreenD0Ev>:
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b082      	sub	sp, #8
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
 8010c08:	6878      	ldr	r0, [r7, #4]
 8010c0a:	f7ff ffe5 	bl	8010bd8 <_ZN8touchgfx6ScreenD1Ev>
 8010c0e:	213c      	movs	r1, #60	; 0x3c
 8010c10:	6878      	ldr	r0, [r7, #4]
 8010c12:	f015 fdc5 	bl	80267a0 <_ZdlPvj>
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	4618      	mov	r0, r3
 8010c1a:	3708      	adds	r7, #8
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	bd80      	pop	{r7, pc}

08010c20 <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 8010c20:	b480      	push	{r7}
 8010c22:	b083      	sub	sp, #12
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
 8010c28:	bf00      	nop
 8010c2a:	370c      	adds	r7, #12
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c32:	4770      	bx	lr

08010c34 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 8010c34:	b480      	push	{r7}
 8010c36:	b083      	sub	sp, #12
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]
 8010c3c:	bf00      	nop
 8010c3e:	370c      	adds	r7, #12
 8010c40:	46bd      	mov	sp, r7
 8010c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c46:	4770      	bx	lr

08010c48 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 8010c48:	b480      	push	{r7}
 8010c4a:	b083      	sub	sp, #12
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	6078      	str	r0, [r7, #4]
 8010c50:	bf00      	nop
 8010c52:	370c      	adds	r7, #12
 8010c54:	46bd      	mov	sp, r7
 8010c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5a:	4770      	bx	lr

08010c5c <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8010c5c:	b480      	push	{r7}
 8010c5e:	b083      	sub	sp, #12
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	6078      	str	r0, [r7, #4]
    {
    }
 8010c64:	bf00      	nop
 8010c66:	370c      	adds	r7, #12
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6e:	4770      	bx	lr

08010c70 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8010c70:	b480      	push	{r7}
 8010c72:	b083      	sub	sp, #12
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
 8010c78:	460b      	mov	r3, r1
 8010c7a:	70fb      	strb	r3, [r7, #3]
    {
    }
 8010c7c:	bf00      	nop
 8010c7e:	370c      	adds	r7, #12
 8010c80:	46bd      	mov	sp, r7
 8010c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c86:	4770      	bx	lr

08010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 8010c88:	b580      	push	{r7, lr}
 8010c8a:	b082      	sub	sp, #8
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]
 8010c90:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	3304      	adds	r3, #4
 8010c96:	6839      	ldr	r1, [r7, #0]
 8010c98:	4618      	mov	r0, r3
 8010c9a:	f006 fc1f 	bl	80174dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8010c9e:	bf00      	nop
 8010ca0:	3708      	adds	r7, #8
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	bd80      	pop	{r7, pc}
	...

08010ca8 <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b082      	sub	sp, #8
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	f7ff fdec 	bl	8010890 <_ZN8touchgfx8DrawableC1Ev>
 8010cb8:	4a03      	ldr	r2, [pc, #12]	; (8010cc8 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	601a      	str	r2, [r3, #0]
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	3708      	adds	r7, #8
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	bd80      	pop	{r7, pc}
 8010cc8:	08028594 	.word	0x08028594

08010ccc <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 8010ccc:	b580      	push	{r7, lr}
 8010cce:	b082      	sub	sp, #8
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	6078      	str	r0, [r7, #4]
 8010cd4:	4a05      	ldr	r2, [pc, #20]	; (8010cec <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	601a      	str	r2, [r3, #0]
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	4618      	mov	r0, r3
 8010cde:	f7ff fe05 	bl	80108ec <_ZN8touchgfx8DrawableD1Ev>
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	3708      	adds	r7, #8
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	bd80      	pop	{r7, pc}
 8010cec:	08028594 	.word	0x08028594

08010cf0 <_ZN8touchgfx6WidgetD0Ev>:
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	b082      	sub	sp, #8
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	6078      	str	r0, [r7, #4]
 8010cf8:	6878      	ldr	r0, [r7, #4]
 8010cfa:	f7ff ffe7 	bl	8010ccc <_ZN8touchgfx6WidgetD1Ev>
 8010cfe:	2128      	movs	r1, #40	; 0x28
 8010d00:	6878      	ldr	r0, [r7, #4]
 8010d02:	f015 fd4d 	bl	80267a0 <_ZdlPvj>
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	4618      	mov	r0, r3
 8010d0a:	3708      	adds	r7, #8
 8010d0c:	46bd      	mov	sp, r7
 8010d0e:	bd80      	pop	{r7, pc}

08010d10 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b084      	sub	sp, #16
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	60f8      	str	r0, [r7, #12]
 8010d18:	607b      	str	r3, [r7, #4]
 8010d1a:	460b      	mov	r3, r1
 8010d1c:	817b      	strh	r3, [r7, #10]
 8010d1e:	4613      	mov	r3, r2
 8010d20:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	4618      	mov	r0, r3
 8010d26:	f7ff fecd 	bl	8010ac4 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d008      	beq.n	8010d42 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	4618      	mov	r0, r3
 8010d34:	f7ff fed3 	bl	8010ade <_ZNK8touchgfx8Drawable11isTouchableEv>
 8010d38:	4603      	mov	r3, r0
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d001      	beq.n	8010d42 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8010d3e:	2301      	movs	r3, #1
 8010d40:	e000      	b.n	8010d44 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8010d42:	2300      	movs	r3, #0
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d002      	beq.n	8010d4e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8010d48:	68fa      	ldr	r2, [r7, #12]
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	601a      	str	r2, [r3, #0]
        }
    }
 8010d4e:	bf00      	nop
 8010d50:	3710      	adds	r7, #16
 8010d52:	46bd      	mov	sp, r7
 8010d54:	bd80      	pop	{r7, pc}
	...

08010d58 <_ZN8touchgfx3BoxC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructs a new Box with a default alpha value of 255 (solid)
     */
    Box() : Widget(), alpha(255), color(0), reportAsSolid(false)
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b082      	sub	sp, #8
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	6078      	str	r0, [r7, #4]
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	4618      	mov	r0, r3
 8010d64:	f7ff ffa0 	bl	8010ca8 <_ZN8touchgfx6WidgetC1Ev>
 8010d68:	4a0a      	ldr	r2, [pc, #40]	; (8010d94 <_ZN8touchgfx3BoxC1Ev+0x3c>)
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	601a      	str	r2, [r3, #0]
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	22ff      	movs	r2, #255	; 0xff
 8010d72:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	3328      	adds	r3, #40	; 0x28
 8010d7a:	2100      	movs	r1, #0
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f7ff fd31 	bl	80107e4 <_ZN8touchgfx9colortypeC1Em>
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	2200      	movs	r2, #0
 8010d86:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	3708      	adds	r7, #8
 8010d90:	46bd      	mov	sp, r7
 8010d92:	bd80      	pop	{r7, pc}
 8010d94:	08029e98 	.word	0x08029e98

08010d98 <_ZN8touchgfx3BoxD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Box() {}
 8010d98:	b580      	push	{r7, lr}
 8010d9a:	b082      	sub	sp, #8
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	6078      	str	r0, [r7, #4]
 8010da0:	4a05      	ldr	r2, [pc, #20]	; (8010db8 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	601a      	str	r2, [r3, #0]
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	4618      	mov	r0, r3
 8010daa:	f7ff ff8f 	bl	8010ccc <_ZN8touchgfx6WidgetD1Ev>
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	4618      	mov	r0, r3
 8010db2:	3708      	adds	r7, #8
 8010db4:	46bd      	mov	sp, r7
 8010db6:	bd80      	pop	{r7, pc}
 8010db8:	08029e98 	.word	0x08029e98

08010dbc <_ZN8touchgfx3BoxD0Ev>:
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b082      	sub	sp, #8
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
 8010dc4:	6878      	ldr	r0, [r7, #4]
 8010dc6:	f7ff ffe7 	bl	8010d98 <_ZN8touchgfx3BoxD1Ev>
 8010dca:	2130      	movs	r1, #48	; 0x30
 8010dcc:	6878      	ldr	r0, [r7, #4]
 8010dce:	f015 fce7 	bl	80267a0 <_ZdlPvj>
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	3708      	adds	r7, #8
 8010dd8:	46bd      	mov	sp, r7
 8010dda:	bd80      	pop	{r7, pc}

08010ddc <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     *        Sets the color of the rectangle.
     *
     * @param color The color of the box.
     */
    void setColor(colortype color)
 8010ddc:	b480      	push	{r7}
 8010dde:	b083      	sub	sp, #12
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	6078      	str	r0, [r7, #4]
 8010de4:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	683a      	ldr	r2, [r7, #0]
 8010dea:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8010dec:	bf00      	nop
 8010dee:	370c      	adds	r7, #12
 8010df0:	46bd      	mov	sp, r7
 8010df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df6:	4770      	bx	lr

08010df8 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 8010df8:	b480      	push	{r7}
 8010dfa:	b083      	sub	sp, #12
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	6078      	str	r0, [r7, #4]
 8010e00:	460b      	mov	r3, r1
 8010e02:	807b      	strh	r3, [r7, #2]
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	887a      	ldrh	r2, [r7, #2]
 8010e08:	801a      	strh	r2, [r3, #0]
    }
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	370c      	adds	r7, #12
 8010e10:	46bd      	mov	sp, r7
 8010e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e16:	4770      	bx	lr

08010e18 <_ZNK8touchgfx9TypedText7getTextEv>:
    const Unicode::UnicodeChar* getText() const
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b082      	sub	sp, #8
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
        assertValid();
 8010e20:	6878      	ldr	r0, [r7, #4]
 8010e22:	f7fe fca7 	bl	800f774 <_ZNK8touchgfx9TypedText11assertValidEv>
        return texts->getText(typedTextId);
 8010e26:	4b06      	ldr	r3, [pc, #24]	; (8010e40 <_ZNK8touchgfx9TypedText7getTextEv+0x28>)
 8010e28:	681a      	ldr	r2, [r3, #0]
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	881b      	ldrh	r3, [r3, #0]
 8010e2e:	4619      	mov	r1, r3
 8010e30:	4610      	mov	r0, r2
 8010e32:	f003 f8f1 	bl	8014018 <_ZNK8touchgfx5Texts7getTextEt>
 8010e36:	4603      	mov	r3, r0
    }
 8010e38:	4618      	mov	r0, r3
 8010e3a:	3708      	adds	r7, #8
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	bd80      	pop	{r7, pc}
 8010e40:	2000c728 	.word	0x2000c728

08010e44 <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea()
 8010e44:	b580      	push	{r7, lr}
 8010e46:	b082      	sub	sp, #8
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	4618      	mov	r0, r3
 8010e50:	f7ff ff2a 	bl	8010ca8 <_ZN8touchgfx6WidgetC1Ev>
 8010e54:	4a13      	ldr	r2, [pc, #76]	; (8010ea4 <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	601a      	str	r2, [r3, #0]
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	3326      	adds	r3, #38	; 0x26
 8010e5e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010e62:	4618      	mov	r0, r3
 8010e64:	f7ff ffc8 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	3328      	adds	r3, #40	; 0x28
 8010e6c:	2100      	movs	r1, #0
 8010e6e:	4618      	mov	r0, r3
 8010e70:	f7ff fcb8 	bl	80107e4 <_ZN8touchgfx9colortypeC1Em>
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	2200      	movs	r2, #0
 8010e78:	859a      	strh	r2, [r3, #44]	; 0x2c
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	22ff      	movs	r2, #255	; 0xff
 8010e7e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	2200      	movs	r2, #0
 8010e86:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	2200      	movs	r2, #0
 8010e8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	2200      	movs	r2, #0
 8010e96:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    {
    }
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	3708      	adds	r7, #8
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	bd80      	pop	{r7, pc}
 8010ea4:	08029e1c 	.word	0x08029e1c

08010ea8 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
     *
     *        Gets solid rectangle.
     *
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
 8010ea8:	b580      	push	{r7, lr}
 8010eaa:	b084      	sub	sp, #16
 8010eac:	af02      	add	r7, sp, #8
 8010eae:	6078      	str	r0, [r7, #4]
 8010eb0:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	9300      	str	r3, [sp, #0]
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	2200      	movs	r2, #0
 8010eba:	2100      	movs	r1, #0
 8010ebc:	6878      	ldr	r0, [r7, #4]
 8010ebe:	f7ff fcb7 	bl	8010830 <_ZN8touchgfx4RectC1Essss>
    }
 8010ec2:	6878      	ldr	r0, [r7, #4]
 8010ec4:	3708      	adds	r7, #8
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	bd80      	pop	{r7, pc}

08010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 8010eca:	b480      	push	{r7}
 8010ecc:	b083      	sub	sp, #12
 8010ece:	af00      	add	r7, sp, #0
 8010ed0:	6078      	str	r0, [r7, #4]
 8010ed2:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	683a      	ldr	r2, [r7, #0]
 8010ed8:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8010eda:	bf00      	nop
 8010edc:	370c      	adds	r7, #12
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee4:	4770      	bx	lr

08010ee6 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *        changes you have to set the baseline again. Note that setTypedText must be called
     *        prior to setting the baseline.
     *
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 8010ee6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ee8:	b085      	sub	sp, #20
 8010eea:	af00      	add	r7, sp, #0
 8010eec:	6078      	str	r0, [r7, #4]
 8010eee:	460b      	mov	r3, r1
 8010ef0:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 8010ef2:	687e      	ldr	r6, [r7, #4]
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	3330      	adds	r3, #48	; 0x30
 8010efa:	681c      	ldr	r4, [r3, #0]
 8010efc:	887d      	ldrh	r5, [r7, #2]
 8010efe:	6878      	ldr	r0, [r7, #4]
 8010f00:	f000 f845 	bl	8010f8e <_ZNK8touchgfx8TextArea12getTypedTextEv>
 8010f04:	4603      	mov	r3, r0
 8010f06:	81bb      	strh	r3, [r7, #12]
 8010f08:	f107 030c 	add.w	r3, r7, #12
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	f7fe fbfd 	bl	800f70c <_ZNK8touchgfx9TypedText7getFontEv>
 8010f12:	4603      	mov	r3, r0
 8010f14:	681a      	ldr	r2, [r3, #0]
 8010f16:	322c      	adds	r2, #44	; 0x2c
 8010f18:	6812      	ldr	r2, [r2, #0]
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	4790      	blx	r2
 8010f1e:	4603      	mov	r3, r0
 8010f20:	1aeb      	subs	r3, r5, r3
 8010f22:	b29b      	uxth	r3, r3
 8010f24:	b21b      	sxth	r3, r3
 8010f26:	4619      	mov	r1, r3
 8010f28:	4630      	mov	r0, r6
 8010f2a:	47a0      	blx	r4
    }
 8010f2c:	bf00      	nop
 8010f2e:	3714      	adds	r7, #20
 8010f30:	46bd      	mov	sp, r7
 8010f32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010f34 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b082      	sub	sp, #8
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	6078      	str	r0, [r7, #4]
 8010f3c:	460b      	mov	r3, r1
 8010f3e:	807b      	strh	r3, [r7, #2]
 8010f40:	4613      	mov	r3, r2
 8010f42:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8010f44:	687a      	ldr	r2, [r7, #4]
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	332c      	adds	r3, #44	; 0x2c
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8010f52:	4610      	mov	r0, r2
 8010f54:	4798      	blx	r3
        setBaselineY(baselineY);
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	3360      	adds	r3, #96	; 0x60
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8010f62:	4611      	mov	r1, r2
 8010f64:	6878      	ldr	r0, [r7, #4]
 8010f66:	4798      	blx	r3
    }
 8010f68:	bf00      	nop
 8010f6a:	3708      	adds	r7, #8
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	bd80      	pop	{r7, pc}

08010f70 <_ZN8touchgfx8TextArea14setLinespacingEs>:
     *
     *        Sets the line spacing of the TextArea.
     *
     * @param space The line spacing of use in the TextArea.
     */
    inline void setLinespacing(int16_t space)
 8010f70:	b480      	push	{r7}
 8010f72:	b083      	sub	sp, #12
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
 8010f78:	460b      	mov	r3, r1
 8010f7a:	807b      	strh	r3, [r7, #2]
    {
        linespace = space;
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	887a      	ldrh	r2, [r7, #2]
 8010f80:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 8010f82:	bf00      	nop
 8010f84:	370c      	adds	r7, #12
 8010f86:	46bd      	mov	sp, r7
 8010f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8c:	4770      	bx	lr

08010f8e <_ZNK8touchgfx8TextArea12getTypedTextEv>:
     *
     *        Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 8010f8e:	b480      	push	{r7}
 8010f90:	b083      	sub	sp, #12
 8010f92:	af00      	add	r7, sp, #0
 8010f94:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    }
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	370c      	adds	r7, #12
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa4:	4770      	bx	lr
	...

08010fa8 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8010fa8:	b580      	push	{r7, lr}
 8010faa:	b082      	sub	sp, #8
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	6078      	str	r0, [r7, #4]
 8010fb0:	4a05      	ldr	r2, [pc, #20]	; (8010fc8 <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	601a      	str	r2, [r3, #0]
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	4618      	mov	r0, r3
 8010fba:	f7ff fe87 	bl	8010ccc <_ZN8touchgfx6WidgetD1Ev>
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	3708      	adds	r7, #8
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	bd80      	pop	{r7, pc}
 8010fc8:	08029e1c 	.word	0x08029e1c

08010fcc <_ZN8touchgfx8TextAreaD0Ev>:
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b082      	sub	sp, #8
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	6078      	str	r0, [r7, #4]
 8010fd4:	6878      	ldr	r0, [r7, #4]
 8010fd6:	f7ff ffe7 	bl	8010fa8 <_ZN8touchgfx8TextAreaD1Ev>
 8010fda:	2134      	movs	r1, #52	; 0x34
 8010fdc:	6878      	ldr	r0, [r7, #4]
 8010fde:	f015 fbdf 	bl	80267a0 <_ZdlPvj>
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	3708      	adds	r7, #8
 8010fe8:	46bd      	mov	sp, r7
 8010fea:	bd80      	pop	{r7, pc}

08010fec <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithWildcardBase()
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b082      	sub	sp, #8
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
        : TextArea()
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	f7ff ff24 	bl	8010e44 <_ZN8touchgfx8TextAreaC1Ev>
 8010ffc:	4a03      	ldr	r2, [pc, #12]	; (801100c <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	601a      	str	r2, [r3, #0]
    {
    }
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	4618      	mov	r0, r3
 8011006:	3708      	adds	r7, #8
 8011008:	46bd      	mov	sp, r7
 801100a:	bd80      	pop	{r7, pc}
 801100c:	08028518 	.word	0x08028518

08011010 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 8011010:	b580      	push	{r7, lr}
 8011012:	b082      	sub	sp, #8
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]
 8011018:	4a05      	ldr	r2, [pc, #20]	; (8011030 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	601a      	str	r2, [r3, #0]
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	4618      	mov	r0, r3
 8011022:	f7ff ffc1 	bl	8010fa8 <_ZN8touchgfx8TextAreaD1Ev>
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	4618      	mov	r0, r3
 801102a:	3708      	adds	r7, #8
 801102c:	46bd      	mov	sp, r7
 801102e:	bd80      	pop	{r7, pc}
 8011030:	08028518 	.word	0x08028518

08011034 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 8011034:	b580      	push	{r7, lr}
 8011036:	b082      	sub	sp, #8
 8011038:	af00      	add	r7, sp, #0
 801103a:	6078      	str	r0, [r7, #4]
 801103c:	6878      	ldr	r0, [r7, #4]
 801103e:	f7ff ffe7 	bl	8011010 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8011042:	2134      	movs	r1, #52	; 0x34
 8011044:	6878      	ldr	r0, [r7, #4]
 8011046:	f015 fbab 	bl	80267a0 <_ZdlPvj>
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	4618      	mov	r0, r3
 801104e:	3708      	adds	r7, #8
 8011050:	46bd      	mov	sp, r7
 8011052:	bd80      	pop	{r7, pc}

08011054 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithOneWildcard()
 8011054:	b580      	push	{r7, lr}
 8011056:	b082      	sub	sp, #8
 8011058:	af00      	add	r7, sp, #0
 801105a:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wildcard(0)
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	4618      	mov	r0, r3
 8011060:	f7ff ffc4 	bl	8010fec <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 8011064:	4a05      	ldr	r2, [pc, #20]	; (801107c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	601a      	str	r2, [r3, #0]
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	2200      	movs	r2, #0
 801106e:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	4618      	mov	r0, r3
 8011074:	3708      	adds	r7, #8
 8011076:	46bd      	mov	sp, r7
 8011078:	bd80      	pop	{r7, pc}
 801107a:	bf00      	nop
 801107c:	08029f84 	.word	0x08029f84

08011080 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     *
     *        Sets the wildcard in the text.Must be a zero-terminated UnicodeChar array.
     *
     * @param value A pointer to the UnicodeChar to set the wildcard to.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8011080:	b480      	push	{r7}
 8011082:	b083      	sub	sp, #12
 8011084:	af00      	add	r7, sp, #0
 8011086:	6078      	str	r0, [r7, #4]
 8011088:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	683a      	ldr	r2, [r7, #0]
 801108e:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8011090:	bf00      	nop
 8011092:	370c      	adds	r7, #12
 8011094:	46bd      	mov	sp, r7
 8011096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109a:	4770      	bx	lr

0801109c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 801109c:	b580      	push	{r7, lr}
 801109e:	b082      	sub	sp, #8
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
 80110a4:	6039      	str	r1, [r7, #0]
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	4618      	mov	r0, r3
 80110aa:	f7ff fdfd 	bl	8010ca8 <_ZN8touchgfx6WidgetC1Ev>
 80110ae:	4a0b      	ldr	r2, [pc, #44]	; (80110dc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	601a      	str	r2, [r3, #0]
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	3326      	adds	r3, #38	; 0x26
 80110b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80110bc:	4618      	mov	r0, r3
 80110be:	f7ff fbd7 	bl	8010870 <_ZN8touchgfx6BitmapC1Et>
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	22ff      	movs	r2, #255	; 0xff
 80110c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 80110ca:	6839      	ldr	r1, [r7, #0]
 80110cc:	6878      	ldr	r0, [r7, #4]
 80110ce:	f008 faf3 	bl	80196b8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	4618      	mov	r0, r3
 80110d6:	3708      	adds	r7, #8
 80110d8:	46bd      	mov	sp, r7
 80110da:	bd80      	pop	{r7, pc}
 80110dc:	0802a000 	.word	0x0802a000

080110e0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         *        Constructor from integer. No conversion is done - the integer is assumed to
         *        already be in Q5 format.
         *
         * @param i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i) : v(i) { }
 80110e0:	b480      	push	{r7}
 80110e2:	b083      	sub	sp, #12
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]
 80110e8:	6039      	str	r1, [r7, #0]
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	683a      	ldr	r2, [r7, #0]
 80110ee:	601a      	str	r2, [r3, #0]
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	4618      	mov	r0, r3
 80110f4:	370c      	adds	r7, #12
 80110f6:	46bd      	mov	sp, r7
 80110f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fc:	4770      	bx	lr

080110fe <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
         *
         *        Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 80110fe:	b480      	push	{r7}
 8011100:	b083      	sub	sp, #12
 8011102:	af00      	add	r7, sp, #0
 8011104:	6078      	str	r0, [r7, #4]
        {
            return v;
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	681b      	ldr	r3, [r3, #0]
        }
 801110a:	4618      	mov	r0, r3
 801110c:	370c      	adds	r7, #12
 801110e:	46bd      	mov	sp, r7
 8011110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011114:	4770      	bx	lr

08011116 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @note The area containing the Line is not invalidated.
     *
     * @see updateLineWidth
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 8011116:	b590      	push	{r4, r7, lr}
 8011118:	b083      	sub	sp, #12
 801111a:	af00      	add	r7, sp, #0
 801111c:	6078      	str	r0, [r7, #4]
 801111e:	6039      	str	r1, [r7, #0]
    {
        if (lineWidth == widthQ5)
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	3340      	adds	r3, #64	; 0x40
 8011124:	4618      	mov	r0, r3
 8011126:	f7ff ffea 	bl	80110fe <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 801112a:	4604      	mov	r4, r0
 801112c:	463b      	mov	r3, r7
 801112e:	4618      	mov	r0, r3
 8011130:	f7ff ffe5 	bl	80110fe <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8011134:	4603      	mov	r3, r0
 8011136:	429c      	cmp	r4, r3
 8011138:	bf0c      	ite	eq
 801113a:	2301      	moveq	r3, #1
 801113c:	2300      	movne	r3, #0
 801113e:	b2db      	uxtb	r3, r3
 8011140:	2b00      	cmp	r3, #0
 8011142:	d106      	bne.n	8011152 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidth = widthQ5;
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	683a      	ldr	r2, [r7, #0]
 8011148:	641a      	str	r2, [r3, #64]	; 0x40

        updateCachedShape();
 801114a:	6878      	ldr	r0, [r7, #4]
 801114c:	f007 fd2e 	bl	8018bac <_ZN8touchgfx4Line17updateCachedShapeEv>
 8011150:	e000      	b.n	8011154 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 8011152:	bf00      	nop
    }
 8011154:	370c      	adds	r7, #12
 8011156:	46bd      	mov	sp, r7
 8011158:	bd90      	pop	{r4, r7, pc}
	...

0801115c <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
    AbstractPainterRGB888()
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
    }

    virtual ~AbstractPainterRGB888() {}
 801115c:	b580      	push	{r7, lr}
 801115e:	b082      	sub	sp, #8
 8011160:	af00      	add	r7, sp, #0
 8011162:	6078      	str	r0, [r7, #4]
 8011164:	4a05      	ldr	r2, [pc, #20]	; (801117c <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	601a      	str	r2, [r3, #0]
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	4618      	mov	r0, r3
 801116e:	f007 fb31 	bl	80187d4 <_ZN8touchgfx15AbstractPainterD1Ev>
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	4618      	mov	r0, r3
 8011176:	3708      	adds	r7, #8
 8011178:	46bd      	mov	sp, r7
 801117a:	bd80      	pop	{r7, pc}
 801117c:	08029970 	.word	0x08029970

08011180 <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 8011180:	b580      	push	{r7, lr}
 8011182:	b082      	sub	sp, #8
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
 8011188:	6878      	ldr	r0, [r7, #4]
 801118a:	f7ff ffe7 	bl	801115c <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 801118e:	2114      	movs	r1, #20
 8011190:	6878      	ldr	r0, [r7, #4]
 8011192:	f015 fb05 	bl	80267a0 <_ZdlPvj>
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	4618      	mov	r0, r3
 801119a:	3708      	adds	r7, #8
 801119c:	46bd      	mov	sp, r7
 801119e:	bd80      	pop	{r7, pc}

080111a0 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b082      	sub	sp, #8
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	6078      	str	r0, [r7, #4]
 80111a8:	4a05      	ldr	r2, [pc, #20]	; (80111c0 <_ZN8touchgfx5ImageD1Ev+0x20>)
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	601a      	str	r2, [r3, #0]
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	4618      	mov	r0, r3
 80111b2:	f7ff fd8b 	bl	8010ccc <_ZN8touchgfx6WidgetD1Ev>
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	4618      	mov	r0, r3
 80111ba:	3708      	adds	r7, #8
 80111bc:	46bd      	mov	sp, r7
 80111be:	bd80      	pop	{r7, pc}
 80111c0:	0802a000 	.word	0x0802a000

080111c4 <_ZN8touchgfx5ImageD0Ev>:
 80111c4:	b580      	push	{r7, lr}
 80111c6:	b082      	sub	sp, #8
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	6078      	str	r0, [r7, #4]
 80111cc:	6878      	ldr	r0, [r7, #4]
 80111ce:	f7ff ffe7 	bl	80111a0 <_ZN8touchgfx5ImageD1Ev>
 80111d2:	212c      	movs	r1, #44	; 0x2c
 80111d4:	6878      	ldr	r0, [r7, #4]
 80111d6:	f015 fae3 	bl	80267a0 <_ZdlPvj>
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	4618      	mov	r0, r3
 80111de:	3708      	adds	r7, #8
 80111e0:	46bd      	mov	sp, r7
 80111e2:	bd80      	pop	{r7, pc}

080111e4 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 80111e4:	b580      	push	{r7, lr}
 80111e6:	b082      	sub	sp, #8
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	6078      	str	r0, [r7, #4]
 80111ec:	4a05      	ldr	r2, [pc, #20]	; (8011204 <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	601a      	str	r2, [r3, #0]
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	4618      	mov	r0, r3
 80111f6:	f7ff fcef 	bl	8010bd8 <_ZN8touchgfx6ScreenD1Ev>
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	4618      	mov	r0, r3
 80111fe:	3708      	adds	r7, #8
 8011200:	46bd      	mov	sp, r7
 8011202:	bd80      	pop	{r7, pc}
 8011204:	080284e4 	.word	0x080284e4

08011208 <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 8011208:	b580      	push	{r7, lr}
 801120a:	b082      	sub	sp, #8
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
 8011210:	6878      	ldr	r0, [r7, #4]
 8011212:	f7ff ffe7 	bl	80111e4 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8011216:	2140      	movs	r1, #64	; 0x40
 8011218:	6878      	ldr	r0, [r7, #4]
 801121a:	f015 fac1 	bl	80267a0 <_ZdlPvj>
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	4618      	mov	r0, r3
 8011222:	3708      	adds	r7, #8
 8011224:	46bd      	mov	sp, r7
 8011226:	bd80      	pop	{r7, pc}

08011228 <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 8011228:	b580      	push	{r7, lr}
 801122a:	b082      	sub	sp, #8
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
 8011230:	4a93      	ldr	r2, [pc, #588]	; (8011480 <_ZN12MainViewBaseD1Ev+0x258>)
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	601a      	str	r2, [r3, #0]
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	f603 33d4 	addw	r3, r3, #3028	; 0xbd4
 801123c:	4618      	mov	r0, r3
 801123e:	f002 fe01 	bl	8013e44 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8011248:	4618      	mov	r0, r3
 801124a:	f7ff fead 	bl	8010fa8 <_ZN8touchgfx8TextAreaD1Ev>
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	f603 336c 	addw	r3, r3, #2924	; 0xb6c
 8011254:	4618      	mov	r0, r3
 8011256:	f7ff fea7 	bl	8010fa8 <_ZN8touchgfx8TextAreaD1Ev>
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	f603 3338 	addw	r3, r3, #2872	; 0xb38
 8011260:	4618      	mov	r0, r3
 8011262:	f7ff fea1 	bl	8010fa8 <_ZN8touchgfx8TextAreaD1Ev>
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	f603 3304 	addw	r3, r3, #2820	; 0xb04
 801126c:	4618      	mov	r0, r3
 801126e:	f7ff fe9b 	bl	8010fa8 <_ZN8touchgfx8TextAreaD1Ev>
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	f603 23cc 	addw	r3, r3, #2764	; 0xacc
 8011278:	4618      	mov	r0, r3
 801127a:	f002 fde3 	bl	8013e44 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	f603 2394 	addw	r3, r3, #2708	; 0xa94
 8011284:	4618      	mov	r0, r3
 8011286:	f002 fddd 	bl	8013e44 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 8011290:	4618      	mov	r0, r3
 8011292:	f002 fdd7 	bl	8013e44 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	f603 2324 	addw	r3, r3, #2596	; 0xa24
 801129c:	4618      	mov	r0, r3
 801129e:	f002 fdd1 	bl	8013e44 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	f603 13ec 	addw	r3, r3, #2540	; 0x9ec
 80112a8:	4618      	mov	r0, r3
 80112aa:	f002 fdcb 	bl	8013e44 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	f603 13b4 	addw	r3, r3, #2484	; 0x9b4
 80112b4:	4618      	mov	r0, r3
 80112b6:	f002 fdc5 	bl	8013e44 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	f603 137c 	addw	r3, r3, #2428	; 0x97c
 80112c0:	4618      	mov	r0, r3
 80112c2:	f002 fdbf 	bl	8013e44 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	f603 1348 	addw	r3, r3, #2376	; 0x948
 80112cc:	4618      	mov	r0, r3
 80112ce:	f7ff fe6b 	bl	8010fa8 <_ZN8touchgfx8TextAreaD1Ev>
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 80112d8:	4618      	mov	r0, r3
 80112da:	f002 fdb3 	bl	8013e44 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	f603 03d8 	addw	r3, r3, #2264	; 0x8d8
 80112e4:	4618      	mov	r0, r3
 80112e6:	f002 fdad 	bl	8013e44 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 80112f0:	4618      	mov	r0, r3
 80112f2:	f7ff fe59 	bl	8010fa8 <_ZN8touchgfx8TextAreaD1Ev>
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	f603 036c 	addw	r3, r3, #2156	; 0x86c
 80112fc:	4618      	mov	r0, r3
 80112fe:	f002 fda1 	bl	8013e44 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8011308:	4618      	mov	r0, r3
 801130a:	f005 fdeb 	bl	8016ee4 <_ZN8touchgfx13ImageProgressD1Ev>
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	f203 7344 	addw	r3, r3, #1860	; 0x744
 8011314:	4618      	mov	r0, r3
 8011316:	f002 fd95 	bl	8013e44 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	f203 732c 	addw	r3, r3, #1836	; 0x72c
 8011320:	4618      	mov	r0, r3
 8011322:	f002 fdd3 	bl	8013ecc <_ZN8touchgfx13PainterRGB888D1Ev>
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 801132c:	4618      	mov	r0, r3
 801132e:	f002 fdab 	bl	8013e88 <_ZN8touchgfx4LineD1Ev>
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8011338:	4618      	mov	r0, r3
 801133a:	f002 fdc7 	bl	8013ecc <_ZN8touchgfx13PainterRGB888D1Ev>
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 8011344:	4618      	mov	r0, r3
 8011346:	f002 fd9f 	bl	8013e88 <_ZN8touchgfx4LineD1Ev>
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8011350:	4618      	mov	r0, r3
 8011352:	f005 fcc7 	bl	8016ce4 <_ZN8touchgfx11BoxProgressD1Ev>
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 801135c:	4618      	mov	r0, r3
 801135e:	f7ff fe23 	bl	8010fa8 <_ZN8touchgfx8TextAreaD1Ev>
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011368:	4618      	mov	r0, r3
 801136a:	f002 fd6b 	bl	8013e44 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8011374:	4618      	mov	r0, r3
 8011376:	f002 fd65 	bl	8013e44 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8011380:	4618      	mov	r0, r3
 8011382:	f7ff fe11 	bl	8010fa8 <_ZN8touchgfx8TextAreaD1Ev>
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 801138c:	4618      	mov	r0, r3
 801138e:	f7ff fe0b 	bl	8010fa8 <_ZN8touchgfx8TextAreaD1Ev>
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8011398:	4618      	mov	r0, r3
 801139a:	f002 fd53 	bl	8013e44 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 80113a4:	4618      	mov	r0, r3
 80113a6:	f7ff fdff 	bl	8010fa8 <_ZN8touchgfx8TextAreaD1Ev>
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 80113b0:	4618      	mov	r0, r3
 80113b2:	f002 fd8b 	bl	8013ecc <_ZN8touchgfx13PainterRGB888D1Ev>
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	f503 735a 	add.w	r3, r3, #872	; 0x368
 80113bc:	4618      	mov	r0, r3
 80113be:	f002 fd63 	bl	8013e88 <_ZN8touchgfx4LineD1Ev>
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	f503 734c 	add.w	r3, r3, #816	; 0x330
 80113c8:	4618      	mov	r0, r3
 80113ca:	f002 fd3b 	bl	8013e44 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 80113d4:	4618      	mov	r0, r3
 80113d6:	f002 fd35 	bl	8013e44 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80113e0:	4618      	mov	r0, r3
 80113e2:	f002 fd2f 	bl	8013e44 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80113ec:	4618      	mov	r0, r3
 80113ee:	f002 fd29 	bl	8013e44 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80113f8:	4618      	mov	r0, r3
 80113fa:	f002 fd23 	bl	8013e44 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8011404:	4618      	mov	r0, r3
 8011406:	f002 fd1d 	bl	8013e44 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8011410:	4618      	mov	r0, r3
 8011412:	f002 fd17 	bl	8013e44 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801141c:	4618      	mov	r0, r3
 801141e:	f002 fd11 	bl	8013e44 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8011428:	4618      	mov	r0, r3
 801142a:	f7ff feb9 	bl	80111a0 <_ZN8touchgfx5ImageD1Ev>
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011434:	4618      	mov	r0, r3
 8011436:	f002 fd05 	bl	8013e44 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8011440:	4618      	mov	r0, r3
 8011442:	f002 fcff 	bl	8013e44 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	33d8      	adds	r3, #216	; 0xd8
 801144a:	4618      	mov	r0, r3
 801144c:	f7ff fdac 	bl	8010fa8 <_ZN8touchgfx8TextAreaD1Ev>
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	33a4      	adds	r3, #164	; 0xa4
 8011454:	4618      	mov	r0, r3
 8011456:	f7ff fda7 	bl	8010fa8 <_ZN8touchgfx8TextAreaD1Ev>
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	3370      	adds	r3, #112	; 0x70
 801145e:	4618      	mov	r0, r3
 8011460:	f7ff fda2 	bl	8010fa8 <_ZN8touchgfx8TextAreaD1Ev>
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	3340      	adds	r3, #64	; 0x40
 8011468:	4618      	mov	r0, r3
 801146a:	f7ff fc95 	bl	8010d98 <_ZN8touchgfx3BoxD1Ev>
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	4618      	mov	r0, r3
 8011472:	f7ff feb7 	bl	80111e4 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	4618      	mov	r0, r3
 801147a:	3708      	adds	r7, #8
 801147c:	46bd      	mov	sp, r7
 801147e:	bd80      	pop	{r7, pc}
 8011480:	080284b0 	.word	0x080284b0

08011484 <_ZN12MainViewBaseD0Ev>:
 8011484:	b580      	push	{r7, lr}
 8011486:	b082      	sub	sp, #8
 8011488:	af00      	add	r7, sp, #0
 801148a:	6078      	str	r0, [r7, #4]
 801148c:	6878      	ldr	r0, [r7, #4]
 801148e:	f7ff fecb 	bl	8011228 <_ZN12MainViewBaseD1Ev>
 8011492:	f642 01f8 	movw	r1, #10488	; 0x28f8
 8011496:	6878      	ldr	r0, [r7, #4]
 8011498:	f015 f982 	bl	80267a0 <_ZdlPvj>
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	4618      	mov	r0, r3
 80114a0:	3708      	adds	r7, #8
 80114a2:	46bd      	mov	sp, r7
 80114a4:	bd80      	pop	{r7, pc}
	...

080114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     * @param green Value of the green part (0-255).
     * @param blue  Value of the blue part (0-255).
     *
     * @return The color representation depending on LCD color format.
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 80114a8:	b590      	push	{r4, r7, lr}
 80114aa:	b083      	sub	sp, #12
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	4603      	mov	r3, r0
 80114b0:	71fb      	strb	r3, [r7, #7]
 80114b2:	460b      	mov	r3, r1
 80114b4:	71bb      	strb	r3, [r7, #6]
 80114b6:	4613      	mov	r3, r2
 80114b8:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 80114ba:	f7fe fd79 	bl	800ffb0 <_ZN8touchgfx3HAL11getInstanceEv>
 80114be:	4603      	mov	r3, r0
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d105      	bne.n	80114d0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 80114c4:	4b09      	ldr	r3, [pc, #36]	; (80114ec <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x44>)
 80114c6:	4a0a      	ldr	r2, [pc, #40]	; (80114f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 80114c8:	2138      	movs	r1, #56	; 0x38
 80114ca:	480a      	ldr	r0, [pc, #40]	; (80114f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 80114cc:	f015 f996 	bl	80267fc <__assert_func>
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 80114d0:	f7fe fd7a 	bl	800ffc8 <_ZN8touchgfx3HAL3lcdEv>
 80114d4:	6803      	ldr	r3, [r0, #0]
 80114d6:	332c      	adds	r3, #44	; 0x2c
 80114d8:	681c      	ldr	r4, [r3, #0]
 80114da:	797b      	ldrb	r3, [r7, #5]
 80114dc:	79ba      	ldrb	r2, [r7, #6]
 80114de:	79f9      	ldrb	r1, [r7, #7]
 80114e0:	47a0      	blx	r4
 80114e2:	4603      	mov	r3, r0
    }
 80114e4:	4618      	mov	r0, r3
 80114e6:	370c      	adds	r7, #12
 80114e8:	46bd      	mov	sp, r7
 80114ea:	bd90      	pop	{r4, r7, pc}
 80114ec:	08027e00 	.word	0x08027e00
 80114f0:	08027e44 	.word	0x08027e44
 80114f4:	08027ea0 	.word	0x08027ea0

080114f8 <_ZN12MainViewBaseC1Ev>:
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

MainViewBase::MainViewBase()
 80114f8:	b590      	push	{r4, r7, lr}
 80114fa:	b0c9      	sub	sp, #292	; 0x124
 80114fc:	af02      	add	r7, sp, #8
 80114fe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011502:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011506:	6018      	str	r0, [r3, #0]
 8011508:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801150c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	4618      	mov	r0, r3
 8011514:	f002 fc1c 	bl	8013d50 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 8011518:	4ae6      	ldr	r2, [pc, #920]	; (80118b4 <_ZN12MainViewBaseC1Ev+0x3bc>)
 801151a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801151e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	601a      	str	r2, [r3, #0]
 8011526:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801152a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	3340      	adds	r3, #64	; 0x40
 8011532:	4618      	mov	r0, r3
 8011534:	f7ff fc10 	bl	8010d58 <_ZN8touchgfx3BoxC1Ev>
 8011538:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801153c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	3370      	adds	r3, #112	; 0x70
 8011544:	4618      	mov	r0, r3
 8011546:	f7ff fc7d 	bl	8010e44 <_ZN8touchgfx8TextAreaC1Ev>
 801154a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801154e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	33a4      	adds	r3, #164	; 0xa4
 8011556:	4618      	mov	r0, r3
 8011558:	f7ff fc74 	bl	8010e44 <_ZN8touchgfx8TextAreaC1Ev>
 801155c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011560:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	33d8      	adds	r3, #216	; 0xd8
 8011568:	4618      	mov	r0, r3
 801156a:	f7ff fc6b 	bl	8010e44 <_ZN8touchgfx8TextAreaC1Ev>
 801156e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011572:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 801157c:	4618      	mov	r0, r3
 801157e:	f7ff fd69 	bl	8011054 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011582:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011586:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011590:	4618      	mov	r0, r3
 8011592:	f7ff fd5f 	bl	8011054 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011596:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801159a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	f503 74be 	add.w	r4, r3, #380	; 0x17c
 80115a4:	f107 0308 	add.w	r3, r7, #8
 80115a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80115ac:	4618      	mov	r0, r3
 80115ae:	f7ff f95f 	bl	8010870 <_ZN8touchgfx6BitmapC1Et>
 80115b2:	f107 0308 	add.w	r3, r7, #8
 80115b6:	4619      	mov	r1, r3
 80115b8:	4620      	mov	r0, r4
 80115ba:	f7ff fd6f 	bl	801109c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80115be:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80115c2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80115cc:	4618      	mov	r0, r3
 80115ce:	f7ff fd41 	bl	8011054 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80115d2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80115d6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80115e0:	4618      	mov	r0, r3
 80115e2:	f7ff fd37 	bl	8011054 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80115e6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80115ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80115f4:	4618      	mov	r0, r3
 80115f6:	f7ff fd2d 	bl	8011054 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80115fa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80115fe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8011608:	4618      	mov	r0, r3
 801160a:	f7ff fd23 	bl	8011054 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801160e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011612:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801161c:	4618      	mov	r0, r3
 801161e:	f7ff fd19 	bl	8011054 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011622:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011626:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8011630:	4618      	mov	r0, r3
 8011632:	f7ff fd0f 	bl	8011054 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011636:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801163a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8011644:	4618      	mov	r0, r3
 8011646:	f7ff fd05 	bl	8011054 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801164a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801164e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8011658:	4618      	mov	r0, r3
 801165a:	f7ff fcfb 	bl	8011054 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801165e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011662:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	f503 735a 	add.w	r3, r3, #872	; 0x368
 801166c:	4618      	mov	r0, r3
 801166e:	f007 fa7d 	bl	8018b6c <_ZN8touchgfx4LineC1Ev>
 8011672:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011676:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	f503 7477 	add.w	r4, r3, #988	; 0x3dc
 8011680:	f107 030c 	add.w	r3, r7, #12
 8011684:	2100      	movs	r1, #0
 8011686:	4618      	mov	r0, r3
 8011688:	f7ff f8ac 	bl	80107e4 <_ZN8touchgfx9colortypeC1Em>
 801168c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011690:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011694:	22ff      	movs	r2, #255	; 0xff
 8011696:	6819      	ldr	r1, [r3, #0]
 8011698:	4620      	mov	r0, r4
 801169a:	f007 f859 	bl	8018750 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 801169e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80116a2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 80116ac:	4618      	mov	r0, r3
 80116ae:	f7ff fbc9 	bl	8010e44 <_ZN8touchgfx8TextAreaC1Ev>
 80116b2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80116b6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80116c0:	4618      	mov	r0, r3
 80116c2:	f7ff fcc7 	bl	8011054 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80116c6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80116ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 80116d4:	4618      	mov	r0, r3
 80116d6:	f7ff fbb5 	bl	8010e44 <_ZN8touchgfx8TextAreaC1Ev>
 80116da:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80116de:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80116e8:	4618      	mov	r0, r3
 80116ea:	f7ff fbab 	bl	8010e44 <_ZN8touchgfx8TextAreaC1Ev>
 80116ee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80116f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 80116fc:	4618      	mov	r0, r3
 80116fe:	f7ff fca9 	bl	8011054 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011702:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011706:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011710:	4618      	mov	r0, r3
 8011712:	f7ff fc9f 	bl	8011054 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011716:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801171a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8011724:	4618      	mov	r0, r3
 8011726:	f7ff fb8d 	bl	8010e44 <_ZN8touchgfx8TextAreaC1Ev>
 801172a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801172e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8011738:	4618      	mov	r0, r3
 801173a:	f005 fae7 	bl	8016d0c <_ZN8touchgfx11BoxProgressC1Ev>
 801173e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011742:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 801174c:	4618      	mov	r0, r3
 801174e:	f007 fa0d 	bl	8018b6c <_ZN8touchgfx4LineC1Ev>
 8011752:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011756:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	f503 64d4 	add.w	r4, r3, #1696	; 0x6a0
 8011760:	f107 0310 	add.w	r3, r7, #16
 8011764:	2100      	movs	r1, #0
 8011766:	4618      	mov	r0, r3
 8011768:	f7ff f83c 	bl	80107e4 <_ZN8touchgfx9colortypeC1Em>
 801176c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011770:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011774:	22ff      	movs	r2, #255	; 0xff
 8011776:	6819      	ldr	r1, [r3, #0]
 8011778:	4620      	mov	r0, r4
 801177a:	f006 ffe9 	bl	8018750 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 801177e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011782:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 801178c:	4618      	mov	r0, r3
 801178e:	f007 f9ed 	bl	8018b6c <_ZN8touchgfx4LineC1Ev>
 8011792:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011796:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	f203 742c 	addw	r4, r3, #1836	; 0x72c
 80117a0:	f107 0314 	add.w	r3, r7, #20
 80117a4:	2100      	movs	r1, #0
 80117a6:	4618      	mov	r0, r3
 80117a8:	f7ff f81c 	bl	80107e4 <_ZN8touchgfx9colortypeC1Em>
 80117ac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80117b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80117b4:	22ff      	movs	r2, #255	; 0xff
 80117b6:	6819      	ldr	r1, [r3, #0]
 80117b8:	4620      	mov	r0, r4
 80117ba:	f006 ffc9 	bl	8018750 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 80117be:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80117c2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	f203 7344 	addw	r3, r3, #1860	; 0x744
 80117cc:	4618      	mov	r0, r3
 80117ce:	f7ff fc41 	bl	8011054 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80117d2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80117d6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 80117e0:	4618      	mov	r0, r3
 80117e2:	f005 fba9 	bl	8016f38 <_ZN8touchgfx13ImageProgressC1Ev>
 80117e6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80117ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	f603 036c 	addw	r3, r3, #2156	; 0x86c
 80117f4:	4618      	mov	r0, r3
 80117f6:	f7ff fc2d 	bl	8011054 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80117fa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80117fe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 8011808:	4618      	mov	r0, r3
 801180a:	f7ff fb1b 	bl	8010e44 <_ZN8touchgfx8TextAreaC1Ev>
 801180e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011812:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	f603 03d8 	addw	r3, r3, #2264	; 0x8d8
 801181c:	4618      	mov	r0, r3
 801181e:	f7ff fc19 	bl	8011054 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011822:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011826:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8011830:	4618      	mov	r0, r3
 8011832:	f7ff fc0f 	bl	8011054 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011836:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801183a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8011844:	4618      	mov	r0, r3
 8011846:	f7ff fafd 	bl	8010e44 <_ZN8touchgfx8TextAreaC1Ev>
 801184a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801184e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	f603 137c 	addw	r3, r3, #2428	; 0x97c
 8011858:	4618      	mov	r0, r3
 801185a:	f7ff fbfb 	bl	8011054 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801185e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011862:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	f603 13b4 	addw	r3, r3, #2484	; 0x9b4
 801186c:	4618      	mov	r0, r3
 801186e:	f7ff fbf1 	bl	8011054 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011872:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011876:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	f603 13ec 	addw	r3, r3, #2540	; 0x9ec
 8011880:	4618      	mov	r0, r3
 8011882:	f7ff fbe7 	bl	8011054 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011886:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801188a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	f603 2324 	addw	r3, r3, #2596	; 0xa24
 8011894:	4618      	mov	r0, r3
 8011896:	f7ff fbdd 	bl	8011054 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801189a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801189e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 80118a8:	4618      	mov	r0, r3
 80118aa:	f7ff fbd3 	bl	8011054 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80118ae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80118b2:	e001      	b.n	80118b8 <_ZN12MainViewBaseC1Ev+0x3c0>
 80118b4:	080284b0 	.word	0x080284b0
 80118b8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	f603 2394 	addw	r3, r3, #2708	; 0xa94
 80118c2:	4618      	mov	r0, r3
 80118c4:	f7ff fbc6 	bl	8011054 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80118c8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80118cc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	f603 23cc 	addw	r3, r3, #2764	; 0xacc
 80118d6:	4618      	mov	r0, r3
 80118d8:	f7ff fbbc 	bl	8011054 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80118dc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80118e0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	f603 3304 	addw	r3, r3, #2820	; 0xb04
 80118ea:	4618      	mov	r0, r3
 80118ec:	f7ff faaa 	bl	8010e44 <_ZN8touchgfx8TextAreaC1Ev>
 80118f0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80118f4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	f603 3338 	addw	r3, r3, #2872	; 0xb38
 80118fe:	4618      	mov	r0, r3
 8011900:	f7ff faa0 	bl	8010e44 <_ZN8touchgfx8TextAreaC1Ev>
 8011904:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011908:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	f603 336c 	addw	r3, r3, #2924	; 0xb6c
 8011912:	4618      	mov	r0, r3
 8011914:	f7ff fa96 	bl	8010e44 <_ZN8touchgfx8TextAreaC1Ev>
 8011918:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801191c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8011926:	4618      	mov	r0, r3
 8011928:	f7ff fa8c 	bl	8010e44 <_ZN8touchgfx8TextAreaC1Ev>
 801192c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011930:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	f603 33d4 	addw	r3, r3, #3028	; 0xbd4
 801193a:	4618      	mov	r0, r3
 801193c:	f7ff fb8a 	bl	8011054 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8011940:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011944:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	f603 43d6 	addw	r3, r3, #3286	; 0xcd6
 801194e:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8011952:	4618      	mov	r0, r3
 8011954:	f007 ff1e 	bl	8019794 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    backgroundBox.setPosition(0, 0, 800, 480);
 8011958:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801195c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8011966:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801196a:	9300      	str	r3, [sp, #0]
 801196c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8011970:	2200      	movs	r2, #0
 8011972:	2100      	movs	r1, #0
 8011974:	f7fe ffda 	bl	801092c <_ZN8touchgfx8Drawable11setPositionEssss>
    backgroundBox.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8011978:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801197c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8011986:	2200      	movs	r2, #0
 8011988:	2100      	movs	r1, #0
 801198a:	2000      	movs	r0, #0
 801198c:	f7ff fd8c 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011990:	4603      	mov	r3, r0
 8011992:	4619      	mov	r1, r3
 8011994:	4620      	mov	r0, r4
 8011996:	f7ff fa21 	bl	8010ddc <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    CltDecsriptor.setXY(218, 220);
 801199a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801199e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	3370      	adds	r3, #112	; 0x70
 80119a6:	22dc      	movs	r2, #220	; 0xdc
 80119a8:	21da      	movs	r1, #218	; 0xda
 80119aa:	4618      	mov	r0, r3
 80119ac:	f7ff f809 	bl	80109c2 <_ZN8touchgfx8Drawable5setXYEss>
    CltDecsriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80119b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80119b4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80119be:	2200      	movs	r2, #0
 80119c0:	21dc      	movs	r1, #220	; 0xdc
 80119c2:	20ff      	movs	r0, #255	; 0xff
 80119c4:	f7ff fd70 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80119c8:	4603      	mov	r3, r0
 80119ca:	4619      	mov	r1, r3
 80119cc:	4620      	mov	r0, r4
 80119ce:	f7ff fa7c 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltDecsriptor.setLinespacing(0);
 80119d2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80119d6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	3370      	adds	r3, #112	; 0x70
 80119de:	2100      	movs	r1, #0
 80119e0:	4618      	mov	r0, r3
 80119e2:	f7ff fac5 	bl	8010f70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltDecsriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID41));
 80119e6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80119ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80119f4:	f107 0318 	add.w	r3, r7, #24
 80119f8:	2115      	movs	r1, #21
 80119fa:	4618      	mov	r0, r3
 80119fc:	f7ff f9fc 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 8011a00:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011a04:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8011a08:	8819      	ldrh	r1, [r3, #0]
 8011a0a:	4620      	mov	r0, r4
 8011a0c:	f007 fbb4 	bl	8019178 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaDescriptor.setXY(223, 139);
 8011a10:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011a14:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	33a4      	adds	r3, #164	; 0xa4
 8011a1c:	228b      	movs	r2, #139	; 0x8b
 8011a1e:	21df      	movs	r1, #223	; 0xdf
 8011a20:	4618      	mov	r0, r3
 8011a22:	f7fe ffce 	bl	80109c2 <_ZN8touchgfx8Drawable5setXYEss>
    LambdaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011a26:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011a2a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8011a34:	2200      	movs	r2, #0
 8011a36:	21dc      	movs	r1, #220	; 0xdc
 8011a38:	20ff      	movs	r0, #255	; 0xff
 8011a3a:	f7ff fd35 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011a3e:	4603      	mov	r3, r0
 8011a40:	4619      	mov	r1, r3
 8011a42:	4620      	mov	r0, r4
 8011a44:	f7ff fa41 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaDescriptor.setLinespacing(0);
 8011a48:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011a4c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	33a4      	adds	r3, #164	; 0xa4
 8011a54:	2100      	movs	r1, #0
 8011a56:	4618      	mov	r0, r3
 8011a58:	f7ff fa8a 	bl	8010f70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    LambdaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID33));
 8011a5c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011a60:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8011a6a:	f107 031c 	add.w	r3, r7, #28
 8011a6e:	210f      	movs	r1, #15
 8011a70:	4618      	mov	r0, r3
 8011a72:	f7ff f9c1 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 8011a76:	8bb9      	ldrh	r1, [r7, #28]
 8011a78:	4620      	mov	r0, r4
 8011a7a:	f007 fb7d 	bl	8019178 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtDescriptor.setXY(24, 136);
 8011a7e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011a82:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	33d8      	adds	r3, #216	; 0xd8
 8011a8a:	2288      	movs	r2, #136	; 0x88
 8011a8c:	2118      	movs	r1, #24
 8011a8e:	4618      	mov	r0, r3
 8011a90:	f7fe ff97 	bl	80109c2 <_ZN8touchgfx8Drawable5setXYEss>
    TrgtDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011a94:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011a98:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8011aa2:	2200      	movs	r2, #0
 8011aa4:	21dc      	movs	r1, #220	; 0xdc
 8011aa6:	20ff      	movs	r0, #255	; 0xff
 8011aa8:	f7ff fcfe 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011aac:	4603      	mov	r3, r0
 8011aae:	4619      	mov	r1, r3
 8011ab0:	4620      	mov	r0, r4
 8011ab2:	f7ff fa0a 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtDescriptor.setLinespacing(0);
 8011ab6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011aba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	33d8      	adds	r3, #216	; 0xd8
 8011ac2:	2100      	movs	r1, #0
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	f7ff fa53 	bl	8010f70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    TrgtDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID32));
 8011aca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011ace:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8011ad8:	f107 0320 	add.w	r3, r7, #32
 8011adc:	210e      	movs	r1, #14
 8011ade:	4618      	mov	r0, r3
 8011ae0:	f7ff f98a 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 8011ae4:	8c39      	ldrh	r1, [r7, #32]
 8011ae6:	4620      	mov	r0, r4
 8011ae8:	f007 fb46 	bl	8019178 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaValue.setPosition(187, 77, 114, 62);
 8011aec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011af0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	f503 7086 	add.w	r0, r3, #268	; 0x10c
 8011afa:	233e      	movs	r3, #62	; 0x3e
 8011afc:	9300      	str	r3, [sp, #0]
 8011afe:	2372      	movs	r3, #114	; 0x72
 8011b00:	224d      	movs	r2, #77	; 0x4d
 8011b02:	21bb      	movs	r1, #187	; 0xbb
 8011b04:	f7fe ff12 	bl	801092c <_ZN8touchgfx8Drawable11setPositionEssss>
    LambdaValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011b08:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011b0c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 8011b16:	22ff      	movs	r2, #255	; 0xff
 8011b18:	21ff      	movs	r1, #255	; 0xff
 8011b1a:	20ff      	movs	r0, #255	; 0xff
 8011b1c:	f7ff fcc4 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011b20:	4603      	mov	r3, r0
 8011b22:	4619      	mov	r1, r3
 8011b24:	4620      	mov	r0, r4
 8011b26:	f7ff f9d0 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaValue.setLinespacing(0);
 8011b2a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011b2e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8011b38:	2100      	movs	r1, #0
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	f7ff fa18 	bl	8010f70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID90).getText());
 8011b40:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011b44:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	f603 440c 	addw	r4, r3, #3084	; 0xc0c
 8011b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011b52:	2136      	movs	r1, #54	; 0x36
 8011b54:	4618      	mov	r0, r3
 8011b56:	f7ff f94f 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 8011b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011b5e:	4618      	mov	r0, r3
 8011b60:	f7ff f95a 	bl	8010e18 <_ZNK8touchgfx9TypedText7getTextEv>
 8011b64:	4603      	mov	r3, r0
 8011b66:	4ae7      	ldr	r2, [pc, #924]	; (8011f04 <_ZN12MainViewBaseC1Ev+0xa0c>)
 8011b68:	2105      	movs	r1, #5
 8011b6a:	4620      	mov	r0, r4
 8011b6c:	f00a feae 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    LambdaValue.setWildcard(LambdaValueBuffer);
 8011b70:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011b74:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	f503 7286 	add.w	r2, r3, #268	; 0x10c
 8011b7e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011b82:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	f603 430c 	addw	r3, r3, #3084	; 0xc0c
 8011b8c:	4619      	mov	r1, r3
 8011b8e:	4610      	mov	r0, r2
 8011b90:	f7ff fa76 	bl	8011080 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    LambdaValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID9));
 8011b94:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011b98:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 8011ba2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011ba6:	2102      	movs	r1, #2
 8011ba8:	4618      	mov	r0, r3
 8011baa:	f7ff f925 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 8011bae:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8011bb0:	4620      	mov	r0, r4
 8011bb2:	f007 fae1 	bl	8019178 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    SpeedValue.setPosition(23, 95, 71, 41);
 8011bb6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011bba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	f503 70a2 	add.w	r0, r3, #324	; 0x144
 8011bc4:	2329      	movs	r3, #41	; 0x29
 8011bc6:	9300      	str	r3, [sp, #0]
 8011bc8:	2347      	movs	r3, #71	; 0x47
 8011bca:	225f      	movs	r2, #95	; 0x5f
 8011bcc:	2117      	movs	r1, #23
 8011bce:	f7fe fead 	bl	801092c <_ZN8touchgfx8Drawable11setPositionEssss>
    SpeedValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011bd2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011bd6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 8011be0:	22ff      	movs	r2, #255	; 0xff
 8011be2:	21ff      	movs	r1, #255	; 0xff
 8011be4:	20ff      	movs	r0, #255	; 0xff
 8011be6:	f7ff fc5f 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011bea:	4603      	mov	r3, r0
 8011bec:	4619      	mov	r1, r3
 8011bee:	4620      	mov	r0, r4
 8011bf0:	f7ff f96b 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    SpeedValue.setLinespacing(0);
 8011bf4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011bf8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011c02:	2100      	movs	r1, #0
 8011c04:	4618      	mov	r0, r3
 8011c06:	f7ff f9b3 	bl	8010f70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(SpeedValueBuffer, SPEEDVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID8).getText());
 8011c0a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011c0e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	f603 4416 	addw	r4, r3, #3094	; 0xc16
 8011c18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011c1c:	2101      	movs	r1, #1
 8011c1e:	4618      	mov	r0, r3
 8011c20:	f7ff f8ea 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 8011c24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011c28:	4618      	mov	r0, r3
 8011c2a:	f7ff f8f5 	bl	8010e18 <_ZNK8touchgfx9TypedText7getTextEv>
 8011c2e:	4603      	mov	r3, r0
 8011c30:	4ab4      	ldr	r2, [pc, #720]	; (8011f04 <_ZN12MainViewBaseC1Ev+0xa0c>)
 8011c32:	2105      	movs	r1, #5
 8011c34:	4620      	mov	r0, r4
 8011c36:	f00a fe49 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    SpeedValue.setWildcard(SpeedValueBuffer);
 8011c3a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011c3e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 8011c48:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011c4c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	f603 4316 	addw	r3, r3, #3094	; 0xc16
 8011c56:	4619      	mov	r1, r3
 8011c58:	4610      	mov	r0, r2
 8011c5a:	f7ff fa11 	bl	8011080 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    SpeedValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 8011c5e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011c62:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 8011c6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011c70:	2100      	movs	r1, #0
 8011c72:	4618      	mov	r0, r3
 8011c74:	f7ff f8c0 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 8011c78:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8011c7a:	4620      	mov	r0, r4
 8011c7c:	f007 fa7c 	bl	8019178 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    backgroundImage.setXY(179, 63);
 8011c80:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011c84:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8011c8e:	223f      	movs	r2, #63	; 0x3f
 8011c90:	21b3      	movs	r1, #179	; 0xb3
 8011c92:	4618      	mov	r0, r3
 8011c94:	f7fe fe95 	bl	80109c2 <_ZN8touchgfx8Drawable5setXYEss>
    backgroundImage.setVisible(false);
 8011c98:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011c9c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8011ca6:	2100      	movs	r1, #0
 8011ca8:	4618      	mov	r0, r3
 8011caa:	f7fe fefb 	bl	8010aa4 <_ZN8touchgfx8Drawable10setVisibleEb>

    rpm1.setPosition(54, 64, 18, 14);
 8011cae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011cb2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	f503 70d4 	add.w	r0, r3, #424	; 0x1a8
 8011cbc:	230e      	movs	r3, #14
 8011cbe:	9300      	str	r3, [sp, #0]
 8011cc0:	2312      	movs	r3, #18
 8011cc2:	2240      	movs	r2, #64	; 0x40
 8011cc4:	2136      	movs	r1, #54	; 0x36
 8011cc6:	f7fe fe31 	bl	801092c <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011cca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011cce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 8011cd8:	22ff      	movs	r2, #255	; 0xff
 8011cda:	21ff      	movs	r1, #255	; 0xff
 8011cdc:	20ff      	movs	r0, #255	; 0xff
 8011cde:	f7ff fbe3 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	4619      	mov	r1, r3
 8011ce6:	4620      	mov	r0, r4
 8011ce8:	f7ff f8ef 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm1.setLinespacing(0);
 8011cec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011cf0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011cfa:	2100      	movs	r1, #0
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	f7ff f937 	bl	8010f70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm1Buffer, RPM1_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID60).getText());
 8011d02:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011d06:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	f503 6442 	add.w	r4, r3, #3104	; 0xc20
 8011d10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011d14:	211f      	movs	r1, #31
 8011d16:	4618      	mov	r0, r3
 8011d18:	f7ff f86e 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 8011d1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011d20:	4618      	mov	r0, r3
 8011d22:	f7ff f879 	bl	8010e18 <_ZNK8touchgfx9TypedText7getTextEv>
 8011d26:	4603      	mov	r3, r0
 8011d28:	4a76      	ldr	r2, [pc, #472]	; (8011f04 <_ZN12MainViewBaseC1Ev+0xa0c>)
 8011d2a:	2102      	movs	r1, #2
 8011d2c:	4620      	mov	r0, r4
 8011d2e:	f00a fdcd 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm1.setWildcard(rpm1Buffer);
 8011d32:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011d36:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 8011d40:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011d44:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	f503 6342 	add.w	r3, r3, #3104	; 0xc20
 8011d4e:	4619      	mov	r1, r3
 8011d50:	4610      	mov	r0, r2
 8011d52:	f7ff f995 	bl	8011080 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID11));
 8011d56:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011d5a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 8011d64:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011d68:	2103      	movs	r1, #3
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	f7ff f844 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 8011d70:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8011d72:	4620      	mov	r0, r4
 8011d74:	f007 fa00 	bl	8019178 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm2.setPosition(115, 64, 18, 14);
 8011d78:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011d7c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	f503 70f0 	add.w	r0, r3, #480	; 0x1e0
 8011d86:	230e      	movs	r3, #14
 8011d88:	9300      	str	r3, [sp, #0]
 8011d8a:	2312      	movs	r3, #18
 8011d8c:	2240      	movs	r2, #64	; 0x40
 8011d8e:	2173      	movs	r1, #115	; 0x73
 8011d90:	f7fe fdcc 	bl	801092c <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011d94:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011d98:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	f503 74f0 	add.w	r4, r3, #480	; 0x1e0
 8011da2:	22ff      	movs	r2, #255	; 0xff
 8011da4:	21ff      	movs	r1, #255	; 0xff
 8011da6:	20ff      	movs	r0, #255	; 0xff
 8011da8:	f7ff fb7e 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011dac:	4603      	mov	r3, r0
 8011dae:	4619      	mov	r1, r3
 8011db0:	4620      	mov	r0, r4
 8011db2:	f7ff f88a 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm2.setLinespacing(0);
 8011db6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011dba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8011dc4:	2100      	movs	r1, #0
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	f7ff f8d2 	bl	8010f70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm2Buffer, RPM2_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID61).getText());
 8011dcc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011dd0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	f603 4424 	addw	r4, r3, #3108	; 0xc24
 8011dda:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011dde:	2120      	movs	r1, #32
 8011de0:	4618      	mov	r0, r3
 8011de2:	f7ff f809 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 8011de6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011dea:	4618      	mov	r0, r3
 8011dec:	f7ff f814 	bl	8010e18 <_ZNK8touchgfx9TypedText7getTextEv>
 8011df0:	4603      	mov	r3, r0
 8011df2:	4a44      	ldr	r2, [pc, #272]	; (8011f04 <_ZN12MainViewBaseC1Ev+0xa0c>)
 8011df4:	2102      	movs	r1, #2
 8011df6:	4620      	mov	r0, r4
 8011df8:	f00a fd68 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm2.setWildcard(rpm2Buffer);
 8011dfc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011e00:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	f503 72f0 	add.w	r2, r3, #480	; 0x1e0
 8011e0a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011e0e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 8011e18:	4619      	mov	r1, r3
 8011e1a:	4610      	mov	r0, r2
 8011e1c:	f7ff f930 	bl	8011080 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID12));
 8011e20:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011e24:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	f503 74f0 	add.w	r4, r3, #480	; 0x1e0
 8011e2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011e32:	2104      	movs	r1, #4
 8011e34:	4618      	mov	r0, r3
 8011e36:	f7fe ffdf 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 8011e3a:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8011e3e:	4620      	mov	r0, r4
 8011e40:	f007 f99a 	bl	8019178 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm3.setPosition(173, 64, 18, 14);
 8011e44:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011e48:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	f503 7006 	add.w	r0, r3, #536	; 0x218
 8011e52:	230e      	movs	r3, #14
 8011e54:	9300      	str	r3, [sp, #0]
 8011e56:	2312      	movs	r3, #18
 8011e58:	2240      	movs	r2, #64	; 0x40
 8011e5a:	21ad      	movs	r1, #173	; 0xad
 8011e5c:	f7fe fd66 	bl	801092c <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm3.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011e60:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011e64:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	f503 7406 	add.w	r4, r3, #536	; 0x218
 8011e6e:	22ff      	movs	r2, #255	; 0xff
 8011e70:	21ff      	movs	r1, #255	; 0xff
 8011e72:	20ff      	movs	r0, #255	; 0xff
 8011e74:	f7ff fb18 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011e78:	4603      	mov	r3, r0
 8011e7a:	4619      	mov	r1, r3
 8011e7c:	4620      	mov	r0, r4
 8011e7e:	f7ff f824 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm3.setLinespacing(0);
 8011e82:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011e86:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8011e90:	2100      	movs	r1, #0
 8011e92:	4618      	mov	r0, r3
 8011e94:	f7ff f86c 	bl	8010f70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm3Buffer, RPM3_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID62).getText());
 8011e98:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011e9c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	f603 4428 	addw	r4, r3, #3112	; 0xc28
 8011ea6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011eaa:	2121      	movs	r1, #33	; 0x21
 8011eac:	4618      	mov	r0, r3
 8011eae:	f7fe ffa3 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 8011eb2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	f7fe ffae 	bl	8010e18 <_ZNK8touchgfx9TypedText7getTextEv>
 8011ebc:	4603      	mov	r3, r0
 8011ebe:	4a11      	ldr	r2, [pc, #68]	; (8011f04 <_ZN12MainViewBaseC1Ev+0xa0c>)
 8011ec0:	2102      	movs	r1, #2
 8011ec2:	4620      	mov	r0, r4
 8011ec4:	f00a fd02 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm3.setWildcard(rpm3Buffer);
 8011ec8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011ecc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	f503 7206 	add.w	r2, r3, #536	; 0x218
 8011ed6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011eda:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 8011ee4:	4619      	mov	r1, r3
 8011ee6:	4610      	mov	r0, r2
 8011ee8:	f7ff f8ca 	bl	8011080 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm3.setTypedText(touchgfx::TypedText(T_SINGLEUSEID13));
 8011eec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011ef0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	f503 7406 	add.w	r4, r3, #536	; 0x218
 8011efa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011efe:	2105      	movs	r1, #5
 8011f00:	4618      	mov	r0, r3
 8011f02:	e001      	b.n	8011f08 <_ZN12MainViewBaseC1Ev+0xa10>
 8011f04:	08027ee0 	.word	0x08027ee0
 8011f08:	f7fe ff76 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 8011f0c:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 8011f10:	4620      	mov	r0, r4
 8011f12:	f007 f931 	bl	8019178 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm4.setPosition(231, 64, 18, 14);
 8011f16:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011f1a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	f503 7014 	add.w	r0, r3, #592	; 0x250
 8011f24:	230e      	movs	r3, #14
 8011f26:	9300      	str	r3, [sp, #0]
 8011f28:	2312      	movs	r3, #18
 8011f2a:	2240      	movs	r2, #64	; 0x40
 8011f2c:	21e7      	movs	r1, #231	; 0xe7
 8011f2e:	f7fe fcfd 	bl	801092c <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm4.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011f32:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011f36:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	f503 7414 	add.w	r4, r3, #592	; 0x250
 8011f40:	22ff      	movs	r2, #255	; 0xff
 8011f42:	21ff      	movs	r1, #255	; 0xff
 8011f44:	20ff      	movs	r0, #255	; 0xff
 8011f46:	f7ff faaf 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011f4a:	4603      	mov	r3, r0
 8011f4c:	4619      	mov	r1, r3
 8011f4e:	4620      	mov	r0, r4
 8011f50:	f7fe ffbb 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm4.setLinespacing(0);
 8011f54:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011f58:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8011f62:	2100      	movs	r1, #0
 8011f64:	4618      	mov	r0, r3
 8011f66:	f7ff f803 	bl	8010f70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm4Buffer, RPM4_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID63).getText());
 8011f6a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011f6e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	f603 442c 	addw	r4, r3, #3116	; 0xc2c
 8011f78:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011f7c:	2122      	movs	r1, #34	; 0x22
 8011f7e:	4618      	mov	r0, r3
 8011f80:	f7fe ff3a 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 8011f84:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011f88:	4618      	mov	r0, r3
 8011f8a:	f7fe ff45 	bl	8010e18 <_ZNK8touchgfx9TypedText7getTextEv>
 8011f8e:	4603      	mov	r3, r0
 8011f90:	4ae8      	ldr	r2, [pc, #928]	; (8012334 <_ZN12MainViewBaseC1Ev+0xe3c>)
 8011f92:	2102      	movs	r1, #2
 8011f94:	4620      	mov	r0, r4
 8011f96:	f00a fc99 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm4.setWildcard(rpm4Buffer);
 8011f9a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011f9e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	f503 7214 	add.w	r2, r3, #592	; 0x250
 8011fa8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011fac:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	f603 432c 	addw	r3, r3, #3116	; 0xc2c
 8011fb6:	4619      	mov	r1, r3
 8011fb8:	4610      	mov	r0, r2
 8011fba:	f7ff f861 	bl	8011080 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm4.setTypedText(touchgfx::TypedText(T_SINGLEUSEID14));
 8011fbe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011fc2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	f503 7414 	add.w	r4, r3, #592	; 0x250
 8011fcc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011fd0:	2106      	movs	r1, #6
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	f7fe ff10 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 8011fd8:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8011fdc:	4620      	mov	r0, r4
 8011fde:	f007 f8cb 	bl	8019178 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm5.setPosition(292, 64, 18, 14);
 8011fe2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011fe6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	f503 7022 	add.w	r0, r3, #648	; 0x288
 8011ff0:	230e      	movs	r3, #14
 8011ff2:	9300      	str	r3, [sp, #0]
 8011ff4:	2312      	movs	r3, #18
 8011ff6:	2240      	movs	r2, #64	; 0x40
 8011ff8:	f44f 7192 	mov.w	r1, #292	; 0x124
 8011ffc:	f7fe fc96 	bl	801092c <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm5.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012000:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012004:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	f503 7422 	add.w	r4, r3, #648	; 0x288
 801200e:	22ff      	movs	r2, #255	; 0xff
 8012010:	21ff      	movs	r1, #255	; 0xff
 8012012:	20ff      	movs	r0, #255	; 0xff
 8012014:	f7ff fa48 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012018:	4603      	mov	r3, r0
 801201a:	4619      	mov	r1, r3
 801201c:	4620      	mov	r0, r4
 801201e:	f7fe ff54 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm5.setLinespacing(0);
 8012022:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012026:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8012030:	2100      	movs	r1, #0
 8012032:	4618      	mov	r0, r3
 8012034:	f7fe ff9c 	bl	8010f70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm5Buffer, RPM5_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID64).getText());
 8012038:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801203c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	f503 6443 	add.w	r4, r3, #3120	; 0xc30
 8012046:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801204a:	2123      	movs	r1, #35	; 0x23
 801204c:	4618      	mov	r0, r3
 801204e:	f7fe fed3 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 8012052:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012056:	4618      	mov	r0, r3
 8012058:	f7fe fede 	bl	8010e18 <_ZNK8touchgfx9TypedText7getTextEv>
 801205c:	4603      	mov	r3, r0
 801205e:	4ab5      	ldr	r2, [pc, #724]	; (8012334 <_ZN12MainViewBaseC1Ev+0xe3c>)
 8012060:	2102      	movs	r1, #2
 8012062:	4620      	mov	r0, r4
 8012064:	f00a fc32 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm5.setWildcard(rpm5Buffer);
 8012068:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801206c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	f503 7222 	add.w	r2, r3, #648	; 0x288
 8012076:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801207a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 8012084:	4619      	mov	r1, r3
 8012086:	4610      	mov	r0, r2
 8012088:	f7fe fffa 	bl	8011080 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm5.setTypedText(touchgfx::TypedText(T_SINGLEUSEID15));
 801208c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012090:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	f503 7422 	add.w	r4, r3, #648	; 0x288
 801209a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801209e:	2107      	movs	r1, #7
 80120a0:	4618      	mov	r0, r3
 80120a2:	f7fe fea9 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 80120a6:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
 80120aa:	4620      	mov	r0, r4
 80120ac:	f007 f864 	bl	8019178 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm6.setPosition(349, 64, 18, 14);
 80120b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80120b4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	f503 7030 	add.w	r0, r3, #704	; 0x2c0
 80120be:	230e      	movs	r3, #14
 80120c0:	9300      	str	r3, [sp, #0]
 80120c2:	2312      	movs	r3, #18
 80120c4:	2240      	movs	r2, #64	; 0x40
 80120c6:	f240 115d 	movw	r1, #349	; 0x15d
 80120ca:	f7fe fc2f 	bl	801092c <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm6.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80120ce:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80120d2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	f503 7430 	add.w	r4, r3, #704	; 0x2c0
 80120dc:	22ff      	movs	r2, #255	; 0xff
 80120de:	21ff      	movs	r1, #255	; 0xff
 80120e0:	20ff      	movs	r0, #255	; 0xff
 80120e2:	f7ff f9e1 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80120e6:	4603      	mov	r3, r0
 80120e8:	4619      	mov	r1, r3
 80120ea:	4620      	mov	r0, r4
 80120ec:	f7fe feed 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm6.setLinespacing(0);
 80120f0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80120f4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80120fe:	2100      	movs	r1, #0
 8012100:	4618      	mov	r0, r3
 8012102:	f7fe ff35 	bl	8010f70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm6Buffer, RPM6_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID65).getText());
 8012106:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801210a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	f603 4434 	addw	r4, r3, #3124	; 0xc34
 8012114:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012118:	2124      	movs	r1, #36	; 0x24
 801211a:	4618      	mov	r0, r3
 801211c:	f7fe fe6c 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 8012120:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012124:	4618      	mov	r0, r3
 8012126:	f7fe fe77 	bl	8010e18 <_ZNK8touchgfx9TypedText7getTextEv>
 801212a:	4603      	mov	r3, r0
 801212c:	4a81      	ldr	r2, [pc, #516]	; (8012334 <_ZN12MainViewBaseC1Ev+0xe3c>)
 801212e:	2102      	movs	r1, #2
 8012130:	4620      	mov	r0, r4
 8012132:	f00a fbcb 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm6.setWildcard(rpm6Buffer);
 8012136:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801213a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	f503 7230 	add.w	r2, r3, #704	; 0x2c0
 8012144:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012148:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	f603 4334 	addw	r3, r3, #3124	; 0xc34
 8012152:	4619      	mov	r1, r3
 8012154:	4610      	mov	r0, r2
 8012156:	f7fe ff93 	bl	8011080 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm6.setTypedText(touchgfx::TypedText(T_SINGLEUSEID16));
 801215a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801215e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	f503 7430 	add.w	r4, r3, #704	; 0x2c0
 8012168:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801216c:	2108      	movs	r1, #8
 801216e:	4618      	mov	r0, r3
 8012170:	f7fe fe42 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 8012174:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8012178:	4620      	mov	r0, r4
 801217a:	f006 fffd 	bl	8019178 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm7.setPosition(411, 64, 18, 15);
 801217e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012182:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
 801218c:	230f      	movs	r3, #15
 801218e:	9300      	str	r3, [sp, #0]
 8012190:	2312      	movs	r3, #18
 8012192:	2240      	movs	r2, #64	; 0x40
 8012194:	f240 119b 	movw	r1, #411	; 0x19b
 8012198:	f7fe fbc8 	bl	801092c <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm7.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801219c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80121a0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	f503 743e 	add.w	r4, r3, #760	; 0x2f8
 80121aa:	22ff      	movs	r2, #255	; 0xff
 80121ac:	21ff      	movs	r1, #255	; 0xff
 80121ae:	20ff      	movs	r0, #255	; 0xff
 80121b0:	f7ff f97a 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80121b4:	4603      	mov	r3, r0
 80121b6:	4619      	mov	r1, r3
 80121b8:	4620      	mov	r0, r4
 80121ba:	f7fe fe86 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm7.setLinespacing(0);
 80121be:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80121c2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 80121cc:	2100      	movs	r1, #0
 80121ce:	4618      	mov	r0, r3
 80121d0:	f7fe fece 	bl	8010f70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm7Buffer, RPM7_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID66).getText());
 80121d4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80121d8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	f603 4438 	addw	r4, r3, #3128	; 0xc38
 80121e2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80121e6:	2125      	movs	r1, #37	; 0x25
 80121e8:	4618      	mov	r0, r3
 80121ea:	f7fe fe05 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 80121ee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80121f2:	4618      	mov	r0, r3
 80121f4:	f7fe fe10 	bl	8010e18 <_ZNK8touchgfx9TypedText7getTextEv>
 80121f8:	4603      	mov	r3, r0
 80121fa:	4a4e      	ldr	r2, [pc, #312]	; (8012334 <_ZN12MainViewBaseC1Ev+0xe3c>)
 80121fc:	2102      	movs	r1, #2
 80121fe:	4620      	mov	r0, r4
 8012200:	f00a fb64 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm7.setWildcard(rpm7Buffer);
 8012204:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012208:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	f503 723e 	add.w	r2, r3, #760	; 0x2f8
 8012212:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012216:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	f603 4338 	addw	r3, r3, #3128	; 0xc38
 8012220:	4619      	mov	r1, r3
 8012222:	4610      	mov	r0, r2
 8012224:	f7fe ff2c 	bl	8011080 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm7.setTypedText(touchgfx::TypedText(T_SINGLEUSEID17));
 8012228:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801222c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	f503 743e 	add.w	r4, r3, #760	; 0x2f8
 8012236:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801223a:	2109      	movs	r1, #9
 801223c:	4618      	mov	r0, r3
 801223e:	f7fe fddb 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 8012242:	f8b7 1068 	ldrh.w	r1, [r7, #104]	; 0x68
 8012246:	4620      	mov	r0, r4
 8012248:	f006 ff96 	bl	8019178 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm8.setPosition(462, 64, 18, 14);
 801224c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012250:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	f503 704c 	add.w	r0, r3, #816	; 0x330
 801225a:	230e      	movs	r3, #14
 801225c:	9300      	str	r3, [sp, #0]
 801225e:	2312      	movs	r3, #18
 8012260:	2240      	movs	r2, #64	; 0x40
 8012262:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8012266:	f7fe fb61 	bl	801092c <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm8.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801226a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801226e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	f503 744c 	add.w	r4, r3, #816	; 0x330
 8012278:	22ff      	movs	r2, #255	; 0xff
 801227a:	21ff      	movs	r1, #255	; 0xff
 801227c:	20ff      	movs	r0, #255	; 0xff
 801227e:	f7ff f913 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012282:	4603      	mov	r3, r0
 8012284:	4619      	mov	r1, r3
 8012286:	4620      	mov	r0, r4
 8012288:	f7fe fe1f 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm8.setLinespacing(0);
 801228c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012290:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	f503 734c 	add.w	r3, r3, #816	; 0x330
 801229a:	2100      	movs	r1, #0
 801229c:	4618      	mov	r0, r3
 801229e:	f7fe fe67 	bl	8010f70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm8Buffer, RPM8_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID67).getText());
 80122a2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80122a6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	f603 443c 	addw	r4, r3, #3132	; 0xc3c
 80122b0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80122b4:	2126      	movs	r1, #38	; 0x26
 80122b6:	4618      	mov	r0, r3
 80122b8:	f7fe fd9e 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 80122bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80122c0:	4618      	mov	r0, r3
 80122c2:	f7fe fda9 	bl	8010e18 <_ZNK8touchgfx9TypedText7getTextEv>
 80122c6:	4603      	mov	r3, r0
 80122c8:	4a1a      	ldr	r2, [pc, #104]	; (8012334 <_ZN12MainViewBaseC1Ev+0xe3c>)
 80122ca:	2102      	movs	r1, #2
 80122cc:	4620      	mov	r0, r4
 80122ce:	f00a fafd 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm8.setWildcard(rpm8Buffer);
 80122d2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80122d6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	f503 724c 	add.w	r2, r3, #816	; 0x330
 80122e0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80122e4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	f603 433c 	addw	r3, r3, #3132	; 0xc3c
 80122ee:	4619      	mov	r1, r3
 80122f0:	4610      	mov	r0, r2
 80122f2:	f7fe fec5 	bl	8011080 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm8.setTypedText(touchgfx::TypedText(T_SINGLEUSEID18));
 80122f6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80122fa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	f503 744c 	add.w	r4, r3, #816	; 0x330
 8012304:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8012308:	210a      	movs	r1, #10
 801230a:	4618      	mov	r0, r3
 801230c:	f7fe fd74 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 8012310:	f8b7 1070 	ldrh.w	r1, [r7, #112]	; 0x70
 8012314:	4620      	mov	r0, r4
 8012316:	f006 ff2f 	bl	8019178 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    line11.setPosition(-2, 59, 490, 5);
 801231a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801231e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	f503 705a 	add.w	r0, r3, #872	; 0x368
 8012328:	2305      	movs	r3, #5
 801232a:	9300      	str	r3, [sp, #0]
 801232c:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
 8012330:	223b      	movs	r2, #59	; 0x3b
 8012332:	e001      	b.n	8012338 <_ZN12MainViewBaseC1Ev+0xe40>
 8012334:	08027ee0 	.word	0x08027ee0
 8012338:	f06f 0101 	mvn.w	r1, #1
 801233c:	f7fe faf6 	bl	801092c <_ZN8touchgfx8Drawable11setPositionEssss>
    line11Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012340:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012344:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	f503 7477 	add.w	r4, r3, #988	; 0x3dc
 801234e:	22ff      	movs	r2, #255	; 0xff
 8012350:	21ff      	movs	r1, #255	; 0xff
 8012352:	20ff      	movs	r0, #255	; 0xff
 8012354:	f7ff f8a8 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012358:	4603      	mov	r3, r0
 801235a:	22ff      	movs	r2, #255	; 0xff
 801235c:	4619      	mov	r1, r3
 801235e:	4620      	mov	r0, r4
 8012360:	f006 f9db 	bl	801871a <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line11.setPainter(line11Painter);
 8012364:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012368:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	f503 725a 	add.w	r2, r3, #872	; 0x368
 8012372:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012376:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 8012380:	4619      	mov	r1, r3
 8012382:	4610      	mov	r0, r2
 8012384:	f006 fa32 	bl	80187ec <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line11.setStart(0, 3);
 8012388:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801238c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	f503 735a 	add.w	r3, r3, #872	; 0x368
 8012396:	2203      	movs	r2, #3
 8012398:	2100      	movs	r1, #0
 801239a:	4618      	mov	r0, r3
 801239c:	f001 fcee 	bl	8013d7c <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line11.setEnd(490, 3);
 80123a0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80123a4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	f503 735a 	add.w	r3, r3, #872	; 0x368
 80123ae:	2203      	movs	r2, #3
 80123b0:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 80123b4:	4618      	mov	r0, r3
 80123b6:	f001 fd07 	bl	8013dc8 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line11.setLineWidth(2);
 80123ba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80123be:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	f503 735a 	add.w	r3, r3, #872	; 0x368
 80123c8:	2102      	movs	r1, #2
 80123ca:	4618      	mov	r0, r3
 80123cc:	f001 fd22 	bl	8013e14 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line11.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 80123d0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80123d4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	f503 735a 	add.w	r3, r3, #872	; 0x368
 80123de:	2101      	movs	r1, #1
 80123e0:	4618      	mov	r0, r3
 80123e2:	f006 fd1d 	bl	8018e20 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    IATDescriptor.setXY(132, 136);
 80123e6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80123ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 80123f4:	2288      	movs	r2, #136	; 0x88
 80123f6:	2184      	movs	r1, #132	; 0x84
 80123f8:	4618      	mov	r0, r3
 80123fa:	f7fe fae2 	bl	80109c2 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80123fe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012402:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	f503 747d 	add.w	r4, r3, #1012	; 0x3f4
 801240c:	2200      	movs	r2, #0
 801240e:	21dc      	movs	r1, #220	; 0xdc
 8012410:	20ff      	movs	r0, #255	; 0xff
 8012412:	f7ff f849 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012416:	4603      	mov	r3, r0
 8012418:	4619      	mov	r1, r3
 801241a:	4620      	mov	r0, r4
 801241c:	f7fe fd55 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor.setLinespacing(0);
 8012420:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012424:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 801242e:	2100      	movs	r1, #0
 8012430:	4618      	mov	r0, r3
 8012432:	f7fe fd9d 	bl	8010f70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID30));
 8012436:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801243a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	f503 747d 	add.w	r4, r3, #1012	; 0x3f4
 8012444:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8012448:	210d      	movs	r1, #13
 801244a:	4618      	mov	r0, r3
 801244c:	f7fe fcd4 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 8012450:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
 8012454:	4620      	mov	r0, r4
 8012456:	f006 fe8f 	bl	8019178 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATValue.setPosition(114, 95, 60, 42);
 801245a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801245e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	f503 6085 	add.w	r0, r3, #1064	; 0x428
 8012468:	232a      	movs	r3, #42	; 0x2a
 801246a:	9300      	str	r3, [sp, #0]
 801246c:	233c      	movs	r3, #60	; 0x3c
 801246e:	225f      	movs	r2, #95	; 0x5f
 8012470:	2172      	movs	r1, #114	; 0x72
 8012472:	f7fe fa5b 	bl	801092c <_ZN8touchgfx8Drawable11setPositionEssss>
    IATValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012476:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801247a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	f503 6485 	add.w	r4, r3, #1064	; 0x428
 8012484:	22ff      	movs	r2, #255	; 0xff
 8012486:	21ff      	movs	r1, #255	; 0xff
 8012488:	20ff      	movs	r0, #255	; 0xff
 801248a:	f7ff f80d 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801248e:	4603      	mov	r3, r0
 8012490:	4619      	mov	r1, r3
 8012492:	4620      	mov	r0, r4
 8012494:	f7fe fd19 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATValue.setLinespacing(0);
 8012498:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801249c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80124a6:	2100      	movs	r1, #0
 80124a8:	4618      	mov	r0, r3
 80124aa:	f7fe fd61 	bl	8010f70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID23).getText());
 80124ae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80124b2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	f503 6444 	add.w	r4, r3, #3136	; 0xc40
 80124bc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80124c0:	210c      	movs	r1, #12
 80124c2:	4618      	mov	r0, r3
 80124c4:	f7fe fc98 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 80124c8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80124cc:	4618      	mov	r0, r3
 80124ce:	f7fe fca3 	bl	8010e18 <_ZNK8touchgfx9TypedText7getTextEv>
 80124d2:	4603      	mov	r3, r0
 80124d4:	4aea      	ldr	r2, [pc, #936]	; (8012880 <_ZN12MainViewBaseC1Ev+0x1388>)
 80124d6:	2105      	movs	r1, #5
 80124d8:	4620      	mov	r0, r4
 80124da:	f00a f9f7 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    IATValue.setWildcard(IATValueBuffer);
 80124de:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80124e2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	f503 6285 	add.w	r2, r3, #1064	; 0x428
 80124ec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80124f0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 80124fa:	4619      	mov	r1, r3
 80124fc:	4610      	mov	r0, r2
 80124fe:	f7fe fdbf 	bl	8011080 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    IATValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID22));
 8012502:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012506:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	f503 6485 	add.w	r4, r3, #1064	; 0x428
 8012510:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8012514:	210b      	movs	r1, #11
 8012516:	4618      	mov	r0, r3
 8012518:	f7fe fc6e 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 801251c:	f8b7 107c 	ldrh.w	r1, [r7, #124]	; 0x7c
 8012520:	4620      	mov	r0, r4
 8012522:	f006 fe29 	bl	8019178 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1.setXY(116, 220);
 8012526:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801252a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8012534:	22dc      	movs	r2, #220	; 0xdc
 8012536:	2174      	movs	r1, #116	; 0x74
 8012538:	4618      	mov	r0, r3
 801253a:	f7fe fa42 	bl	80109c2 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 801253e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012542:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	f503 648c 	add.w	r4, r3, #1120	; 0x460
 801254c:	2200      	movs	r2, #0
 801254e:	21dc      	movs	r1, #220	; 0xdc
 8012550:	20ff      	movs	r0, #255	; 0xff
 8012552:	f7fe ffa9 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012556:	4603      	mov	r3, r0
 8012558:	4619      	mov	r1, r3
 801255a:	4620      	mov	r0, r4
 801255c:	f7fe fcb5 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1.setLinespacing(0);
 8012560:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012564:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 801256e:	2100      	movs	r1, #0
 8012570:	4618      	mov	r0, r3
 8012572:	f7fe fcfd 	bl	8010f70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID34));
 8012576:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801257a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	f503 648c 	add.w	r4, r3, #1120	; 0x460
 8012584:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012588:	2110      	movs	r1, #16
 801258a:	4618      	mov	r0, r3
 801258c:	f7fe fc34 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 8012590:	f8b7 1080 	ldrh.w	r1, [r7, #128]	; 0x80
 8012594:	4620      	mov	r0, r4
 8012596:	f006 fdef 	bl	8019178 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    ECTDescriptor_1.setXY(320, 137);
 801259a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801259e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80125a8:	2289      	movs	r2, #137	; 0x89
 80125aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80125ae:	4618      	mov	r0, r3
 80125b0:	f7fe fa07 	bl	80109c2 <_ZN8touchgfx8Drawable5setXYEss>
    ECTDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80125b4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80125b8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80125c2:	2200      	movs	r2, #0
 80125c4:	21dc      	movs	r1, #220	; 0xdc
 80125c6:	20ff      	movs	r0, #255	; 0xff
 80125c8:	f7fe ff6e 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80125cc:	4603      	mov	r3, r0
 80125ce:	4619      	mov	r1, r3
 80125d0:	4620      	mov	r0, r4
 80125d2:	f7fe fc7a 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    ECTDescriptor_1.setLinespacing(0);
 80125d6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80125da:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80125e4:	2100      	movs	r1, #0
 80125e6:	4618      	mov	r0, r3
 80125e8:	f7fe fcc2 	bl	8010f70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    ECTDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID35));
 80125ec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80125f0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80125fa:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80125fe:	2111      	movs	r1, #17
 8012600:	4618      	mov	r0, r3
 8012602:	f7fe fbf9 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 8012606:	f8b7 1084 	ldrh.w	r1, [r7, #132]	; 0x84
 801260a:	4620      	mov	r0, r4
 801260c:	f006 fdb4 	bl	8019178 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILTempValue.setPosition(107, 177, 75, 42);
 8012610:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012614:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	f503 6099 	add.w	r0, r3, #1224	; 0x4c8
 801261e:	232a      	movs	r3, #42	; 0x2a
 8012620:	9300      	str	r3, [sp, #0]
 8012622:	234b      	movs	r3, #75	; 0x4b
 8012624:	22b1      	movs	r2, #177	; 0xb1
 8012626:	216b      	movs	r1, #107	; 0x6b
 8012628:	f7fe f980 	bl	801092c <_ZN8touchgfx8Drawable11setPositionEssss>
    OILTempValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801262c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012630:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	f503 6499 	add.w	r4, r3, #1224	; 0x4c8
 801263a:	22ff      	movs	r2, #255	; 0xff
 801263c:	21ff      	movs	r1, #255	; 0xff
 801263e:	20ff      	movs	r0, #255	; 0xff
 8012640:	f7fe ff32 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012644:	4603      	mov	r3, r0
 8012646:	4619      	mov	r1, r3
 8012648:	4620      	mov	r0, r4
 801264a:	f7fe fc3e 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILTempValue.setLinespacing(0);
 801264e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012652:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 801265c:	2100      	movs	r1, #0
 801265e:	4618      	mov	r0, r3
 8012660:	f7fe fc86 	bl	8010f70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID37).getText());
 8012664:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012668:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	f603 444a 	addw	r4, r3, #3146	; 0xc4a
 8012672:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8012676:	2113      	movs	r1, #19
 8012678:	4618      	mov	r0, r3
 801267a:	f7fe fbbd 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 801267e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8012682:	4618      	mov	r0, r3
 8012684:	f7fe fbc8 	bl	8010e18 <_ZNK8touchgfx9TypedText7getTextEv>
 8012688:	4603      	mov	r3, r0
 801268a:	4a7d      	ldr	r2, [pc, #500]	; (8012880 <_ZN12MainViewBaseC1Ev+0x1388>)
 801268c:	2105      	movs	r1, #5
 801268e:	4620      	mov	r0, r4
 8012690:	f00a f91c 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILTempValue.setWildcard(OILTempValueBuffer);
 8012694:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012698:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	f503 6299 	add.w	r2, r3, #1224	; 0x4c8
 80126a2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80126a6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	f603 434a 	addw	r3, r3, #3146	; 0xc4a
 80126b0:	4619      	mov	r1, r3
 80126b2:	4610      	mov	r0, r2
 80126b4:	f7fe fce4 	bl	8011080 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILTempValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID36));
 80126b8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80126bc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	f503 6499 	add.w	r4, r3, #1224	; 0x4c8
 80126c6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80126ca:	2112      	movs	r1, #18
 80126cc:	4618      	mov	r0, r3
 80126ce:	f7fe fb93 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 80126d2:	f8b7 108c 	ldrh.w	r1, [r7, #140]	; 0x8c
 80126d6:	4620      	mov	r0, r4
 80126d8:	f006 fd4e 	bl	8019178 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILPressureValue.setPosition(312, 93, 71, 40);
 80126dc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80126e0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	f503 60a0 	add.w	r0, r3, #1280	; 0x500
 80126ea:	2328      	movs	r3, #40	; 0x28
 80126ec:	9300      	str	r3, [sp, #0]
 80126ee:	2347      	movs	r3, #71	; 0x47
 80126f0:	225d      	movs	r2, #93	; 0x5d
 80126f2:	f44f 719c 	mov.w	r1, #312	; 0x138
 80126f6:	f7fe f919 	bl	801092c <_ZN8touchgfx8Drawable11setPositionEssss>
    OILPressureValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80126fa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80126fe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 8012708:	22ff      	movs	r2, #255	; 0xff
 801270a:	21ff      	movs	r1, #255	; 0xff
 801270c:	20ff      	movs	r0, #255	; 0xff
 801270e:	f7fe fecb 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012712:	4603      	mov	r3, r0
 8012714:	4619      	mov	r1, r3
 8012716:	4620      	mov	r0, r4
 8012718:	f7fe fbd7 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILPressureValue.setLinespacing(0);
 801271c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012720:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801272a:	2100      	movs	r1, #0
 801272c:	4618      	mov	r0, r3
 801272e:	f7fe fc1f 	bl	8010f70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID57).getText());
 8012732:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012736:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	f603 4454 	addw	r4, r3, #3156	; 0xc54
 8012740:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8012744:	211e      	movs	r1, #30
 8012746:	4618      	mov	r0, r3
 8012748:	f7fe fb56 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 801274c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8012750:	4618      	mov	r0, r3
 8012752:	f7fe fb61 	bl	8010e18 <_ZNK8touchgfx9TypedText7getTextEv>
 8012756:	4603      	mov	r3, r0
 8012758:	4a49      	ldr	r2, [pc, #292]	; (8012880 <_ZN12MainViewBaseC1Ev+0x1388>)
 801275a:	2105      	movs	r1, #5
 801275c:	4620      	mov	r0, r4
 801275e:	f00a f8b5 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILPressureValue.setWildcard(OILPressureValueBuffer);
 8012762:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012766:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	f503 62a0 	add.w	r2, r3, #1280	; 0x500
 8012770:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012774:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	f603 4354 	addw	r3, r3, #3156	; 0xc54
 801277e:	4619      	mov	r1, r3
 8012780:	4610      	mov	r0, r2
 8012782:	f7fe fc7d 	bl	8011080 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILPressureValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID38));
 8012786:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801278a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 8012794:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8012798:	2114      	movs	r1, #20
 801279a:	4618      	mov	r0, r3
 801279c:	f7fe fb2c 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 80127a0:	f8b7 1094 	ldrh.w	r1, [r7, #148]	; 0x94
 80127a4:	4620      	mov	r0, r4
 80127a6:	f006 fce7 	bl	8019178 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1_1.setXY(407, 240);
 80127aa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80127ae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 80127b8:	22f0      	movs	r2, #240	; 0xf0
 80127ba:	f240 1197 	movw	r1, #407	; 0x197
 80127be:	4618      	mov	r0, r3
 80127c0:	f7fe f8ff 	bl	80109c2 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80127c4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80127c8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	f503 64a7 	add.w	r4, r3, #1336	; 0x538
 80127d2:	2200      	movs	r2, #0
 80127d4:	21dc      	movs	r1, #220	; 0xdc
 80127d6:	20ff      	movs	r0, #255	; 0xff
 80127d8:	f7fe fe66 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80127dc:	4603      	mov	r3, r0
 80127de:	4619      	mov	r1, r3
 80127e0:	4620      	mov	r0, r4
 80127e2:	f7fe fb72 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1_1.setLinespacing(0);
 80127e6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80127ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 80127f4:	2100      	movs	r1, #0
 80127f6:	4618      	mov	r0, r3
 80127f8:	f7fe fbba 	bl	8010f70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID42));
 80127fc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012800:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	f503 64a7 	add.w	r4, r3, #1336	; 0x538
 801280a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801280e:	2116      	movs	r1, #22
 8012810:	4618      	mov	r0, r3
 8012812:	f7fe faf1 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 8012816:	f8b7 1098 	ldrh.w	r1, [r7, #152]	; 0x98
 801281a:	4620      	mov	r0, r4
 801281c:	f006 fcac 	bl	8019178 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TPSProgress.setXY(367, 226);
 8012820:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012824:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 801282e:	22e2      	movs	r2, #226	; 0xe2
 8012830:	f240 116f 	movw	r1, #367	; 0x16f
 8012834:	4618      	mov	r0, r3
 8012836:	f7fe f8c4 	bl	80109c2 <_ZN8touchgfx8Drawable5setXYEss>
    TPSProgress.setProgressIndicatorPosition(2, 2, 100, 10);
 801283a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801283e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	f203 506c 	addw	r0, r3, #1388	; 0x56c
 8012848:	230a      	movs	r3, #10
 801284a:	9300      	str	r3, [sp, #0]
 801284c:	2364      	movs	r3, #100	; 0x64
 801284e:	2202      	movs	r2, #2
 8012850:	2102      	movs	r1, #2
 8012852:	f004 fa91 	bl	8016d78 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    TPSProgress.setRange(0, 100);
 8012856:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801285a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	f203 506c 	addw	r0, r3, #1388	; 0x56c
 8012864:	2300      	movs	r3, #0
 8012866:	9300      	str	r3, [sp, #0]
 8012868:	2300      	movs	r3, #0
 801286a:	2264      	movs	r2, #100	; 0x64
 801286c:	2100      	movs	r1, #0
 801286e:	f004 fd01 	bl	8017274 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    TPSProgress.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8012872:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012876:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	e002      	b.n	8012884 <_ZN12MainViewBaseC1Ev+0x138c>
 801287e:	bf00      	nop
 8012880:	08027ee0 	.word	0x08027ee0
 8012884:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8012888:	2100      	movs	r1, #0
 801288a:	4618      	mov	r0, r3
 801288c:	f004 fad4 	bl	8016e38 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    TPSProgress.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_SMALL_PROGRESS_INDICATOR_BG_SQUARE_0_DEGREES_ID));
 8012890:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012894:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	f203 546c 	addw	r4, r3, #1388	; 0x56c
 801289e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80128a2:	2100      	movs	r1, #0
 80128a4:	4618      	mov	r0, r3
 80128a6:	f7fd ffe3 	bl	8010870 <_ZN8touchgfx6BitmapC1Et>
 80128aa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80128ae:	4619      	mov	r1, r3
 80128b0:	4620      	mov	r0, r4
 80128b2:	f004 fcd4 	bl	801725e <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    TPSProgress.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80128b6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80128ba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	f203 546c 	addw	r4, r3, #1388	; 0x56c
 80128c4:	2200      	movs	r2, #0
 80128c6:	21dc      	movs	r1, #220	; 0xdc
 80128c8:	20ff      	movs	r0, #255	; 0xff
 80128ca:	f7fe fded 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80128ce:	4603      	mov	r3, r0
 80128d0:	4619      	mov	r1, r3
 80128d2:	4620      	mov	r0, r4
 80128d4:	f004 f9fa 	bl	8016ccc <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    TPSProgress.setValue(0);
 80128d8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80128dc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 80128e6:	2100      	movs	r1, #0
 80128e8:	4618      	mov	r0, r3
 80128ea:	f004 fa5d 	bl	8016da8 <_ZN8touchgfx11BoxProgress8setValueEi>

    line10.setPosition(14, 258, 180, 10);
 80128ee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80128f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	f203 602c 	addw	r0, r3, #1580	; 0x62c
 80128fc:	230a      	movs	r3, #10
 80128fe:	9300      	str	r3, [sp, #0]
 8012900:	23b4      	movs	r3, #180	; 0xb4
 8012902:	f44f 7281 	mov.w	r2, #258	; 0x102
 8012906:	210e      	movs	r1, #14
 8012908:	f7fe f810 	bl	801092c <_ZN8touchgfx8Drawable11setPositionEssss>
    line10Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801290c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012910:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	f503 64d4 	add.w	r4, r3, #1696	; 0x6a0
 801291a:	22ff      	movs	r2, #255	; 0xff
 801291c:	21ff      	movs	r1, #255	; 0xff
 801291e:	20ff      	movs	r0, #255	; 0xff
 8012920:	f7fe fdc2 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012924:	4603      	mov	r3, r0
 8012926:	22ff      	movs	r2, #255	; 0xff
 8012928:	4619      	mov	r1, r3
 801292a:	4620      	mov	r0, r4
 801292c:	f005 fef5 	bl	801871a <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10.setPainter(line10Painter);
 8012930:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012934:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	f203 622c 	addw	r2, r3, #1580	; 0x62c
 801293e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012942:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 801294c:	4619      	mov	r1, r3
 801294e:	4610      	mov	r0, r2
 8012950:	f005 ff4c 	bl	80187ec <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10.setStart(0, 5);
 8012954:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012958:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 8012962:	2205      	movs	r2, #5
 8012964:	2100      	movs	r1, #0
 8012966:	4618      	mov	r0, r3
 8012968:	f001 fa08 	bl	8013d7c <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10.setEnd(180, 5);
 801296c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012970:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 801297a:	2205      	movs	r2, #5
 801297c:	21b4      	movs	r1, #180	; 0xb4
 801297e:	4618      	mov	r0, r3
 8012980:	f001 fa22 	bl	8013dc8 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10.setLineWidth(2);
 8012984:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012988:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 8012992:	2102      	movs	r1, #2
 8012994:	4618      	mov	r0, r3
 8012996:	f001 fa3d 	bl	8013e14 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 801299a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801299e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 80129a8:	2100      	movs	r1, #0
 80129aa:	4618      	mov	r0, r3
 80129ac:	f006 fa38 	bl	8018e20 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    line10_1.setPosition(287, 258, 180, 10);
 80129b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80129b4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	f503 60d7 	add.w	r0, r3, #1720	; 0x6b8
 80129be:	230a      	movs	r3, #10
 80129c0:	9300      	str	r3, [sp, #0]
 80129c2:	23b4      	movs	r3, #180	; 0xb4
 80129c4:	f44f 7281 	mov.w	r2, #258	; 0x102
 80129c8:	f240 111f 	movw	r1, #287	; 0x11f
 80129cc:	f7fd ffae 	bl	801092c <_ZN8touchgfx8Drawable11setPositionEssss>
    line10_1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80129d0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80129d4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	f203 742c 	addw	r4, r3, #1836	; 0x72c
 80129de:	22ff      	movs	r2, #255	; 0xff
 80129e0:	21ff      	movs	r1, #255	; 0xff
 80129e2:	20ff      	movs	r0, #255	; 0xff
 80129e4:	f7fe fd60 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80129e8:	4603      	mov	r3, r0
 80129ea:	22ff      	movs	r2, #255	; 0xff
 80129ec:	4619      	mov	r1, r3
 80129ee:	4620      	mov	r0, r4
 80129f0:	f005 fe93 	bl	801871a <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10_1.setPainter(line10_1Painter);
 80129f4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80129f8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	f503 62d7 	add.w	r2, r3, #1720	; 0x6b8
 8012a02:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012a06:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	f203 732c 	addw	r3, r3, #1836	; 0x72c
 8012a10:	4619      	mov	r1, r3
 8012a12:	4610      	mov	r0, r2
 8012a14:	f005 feea 	bl	80187ec <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10_1.setStart(0, 5);
 8012a18:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012a1c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 8012a26:	2205      	movs	r2, #5
 8012a28:	2100      	movs	r1, #0
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	f001 f9a6 	bl	8013d7c <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10_1.setEnd(180, 5);
 8012a30:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012a34:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 8012a3e:	2205      	movs	r2, #5
 8012a40:	21b4      	movs	r1, #180	; 0xb4
 8012a42:	4618      	mov	r0, r3
 8012a44:	f001 f9c0 	bl	8013dc8 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10_1.setLineWidth(2);
 8012a48:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012a4c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 8012a56:	2102      	movs	r1, #2
 8012a58:	4618      	mov	r0, r3
 8012a5a:	f001 f9db 	bl	8013e14 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10_1.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8012a5e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012a62:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 8012a6c:	2100      	movs	r1, #0
 8012a6e:	4618      	mov	r0, r3
 8012a70:	f006 f9d6 	bl	8018e20 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    BatteryVoltage.setPosition(210, 253, 60, 21);
 8012a74:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012a78:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	f203 7044 	addw	r0, r3, #1860	; 0x744
 8012a82:	2315      	movs	r3, #21
 8012a84:	9300      	str	r3, [sp, #0]
 8012a86:	233c      	movs	r3, #60	; 0x3c
 8012a88:	22fd      	movs	r2, #253	; 0xfd
 8012a8a:	21d2      	movs	r1, #210	; 0xd2
 8012a8c:	f7fd ff4e 	bl	801092c <_ZN8touchgfx8Drawable11setPositionEssss>
    BatteryVoltage.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012a90:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012a94:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	f203 7444 	addw	r4, r3, #1860	; 0x744
 8012a9e:	22ff      	movs	r2, #255	; 0xff
 8012aa0:	21ff      	movs	r1, #255	; 0xff
 8012aa2:	20ff      	movs	r0, #255	; 0xff
 8012aa4:	f7fe fd00 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012aa8:	4603      	mov	r3, r0
 8012aaa:	4619      	mov	r1, r3
 8012aac:	4620      	mov	r0, r4
 8012aae:	f7fe fa0c 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    BatteryVoltage.setLinespacing(0);
 8012ab2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012ab6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	f203 7344 	addw	r3, r3, #1860	; 0x744
 8012ac0:	2100      	movs	r1, #0
 8012ac2:	4618      	mov	r0, r3
 8012ac4:	f7fe fa54 	bl	8010f70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID45).getText());
 8012ac8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012acc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	f603 445e 	addw	r4, r3, #3166	; 0xc5e
 8012ad6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8012ada:	2118      	movs	r1, #24
 8012adc:	4618      	mov	r0, r3
 8012ade:	f7fe f98b 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 8012ae2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	f7fe f996 	bl	8010e18 <_ZNK8touchgfx9TypedText7getTextEv>
 8012aec:	4603      	mov	r3, r0
 8012aee:	4ae9      	ldr	r2, [pc, #932]	; (8012e94 <_ZN12MainViewBaseC1Ev+0x199c>)
 8012af0:	2105      	movs	r1, #5
 8012af2:	4620      	mov	r0, r4
 8012af4:	f009 feea 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    BatteryVoltage.setWildcard(BatteryVoltageBuffer);
 8012af8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012afc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	f203 7244 	addw	r2, r3, #1860	; 0x744
 8012b06:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012b0a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	f603 435e 	addw	r3, r3, #3166	; 0xc5e
 8012b14:	4619      	mov	r1, r3
 8012b16:	4610      	mov	r0, r2
 8012b18:	f7fe fab2 	bl	8011080 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    BatteryVoltage.setTypedText(touchgfx::TypedText(T_SINGLEUSEID44));
 8012b1c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012b20:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	f203 7444 	addw	r4, r3, #1860	; 0x744
 8012b2a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8012b2e:	2117      	movs	r1, #23
 8012b30:	4618      	mov	r0, r3
 8012b32:	f7fe f961 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 8012b36:	f8b7 10a4 	ldrh.w	r1, [r7, #164]	; 0xa4
 8012b3a:	4620      	mov	r0, r4
 8012b3c:	f006 fb1c 	bl	8019178 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    RPMProgressBar.setXY(1, 2);
 8012b40:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012b44:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8012b4e:	2202      	movs	r2, #2
 8012b50:	2101      	movs	r1, #1
 8012b52:	4618      	mov	r0, r3
 8012b54:	f7fd ff35 	bl	80109c2 <_ZN8touchgfx8Drawable5setXYEss>
    RPMProgressBar.setProgressIndicatorPosition(2, 2, 478, 55);
 8012b58:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012b5c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	f203 707c 	addw	r0, r3, #1916	; 0x77c
 8012b66:	2337      	movs	r3, #55	; 0x37
 8012b68:	9300      	str	r3, [sp, #0]
 8012b6a:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 8012b6e:	2202      	movs	r2, #2
 8012b70:	2102      	movs	r1, #2
 8012b72:	f004 fa51 	bl	8017018 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>
    RPMProgressBar.setRange(0, 8000);
 8012b76:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012b7a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	f203 707c 	addw	r0, r3, #1916	; 0x77c
 8012b84:	2300      	movs	r3, #0
 8012b86:	9300      	str	r3, [sp, #0]
 8012b88:	2300      	movs	r3, #0
 8012b8a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8012b8e:	2100      	movs	r1, #0
 8012b90:	f004 fb70 	bl	8017274 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    RPMProgressBar.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8012b94:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012b98:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8012ba2:	2100      	movs	r1, #0
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	f004 f947 	bl	8016e38 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    RPMProgressBar.setBitmap(BITMAP_BLUE_PROGRESSINDICATORS_FILL_TILING_RED_YELLOW_FADEYELLOWRED_SMALL_TRANSPARENT_ID);
 8012baa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012bae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8012bb8:	2101      	movs	r1, #1
 8012bba:	4618      	mov	r0, r3
 8012bbc:	f004 f987 	bl	8016ece <_ZN8touchgfx13ImageProgress9setBitmapEt>
    RPMProgressBar.setValue(7200);
 8012bc0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012bc4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8012bce:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	f004 fa38 	bl	8017048 <_ZN8touchgfx13ImageProgress8setValueEi>
    RPMProgressBar.setAnchorAtZero(true);
 8012bd8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012bdc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8012be6:	2101      	movs	r1, #1
 8012be8:	4618      	mov	r0, r3
 8012bea:	f004 f959 	bl	8016ea0 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>

    RPMValue.setPosition(11, 4, 55, 22);
 8012bee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012bf2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	f603 006c 	addw	r0, r3, #2156	; 0x86c
 8012bfc:	2316      	movs	r3, #22
 8012bfe:	9300      	str	r3, [sp, #0]
 8012c00:	2337      	movs	r3, #55	; 0x37
 8012c02:	2204      	movs	r2, #4
 8012c04:	210b      	movs	r1, #11
 8012c06:	f7fd fe91 	bl	801092c <_ZN8touchgfx8Drawable11setPositionEssss>
    RPMValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012c0a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012c0e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	f603 046c 	addw	r4, r3, #2156	; 0x86c
 8012c18:	22ff      	movs	r2, #255	; 0xff
 8012c1a:	21ff      	movs	r1, #255	; 0xff
 8012c1c:	20ff      	movs	r0, #255	; 0xff
 8012c1e:	f7fe fc43 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012c22:	4603      	mov	r3, r0
 8012c24:	4619      	mov	r1, r3
 8012c26:	4620      	mov	r0, r4
 8012c28:	f7fe f94f 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    RPMValue.setLinespacing(0);
 8012c2c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012c30:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	f603 036c 	addw	r3, r3, #2156	; 0x86c
 8012c3a:	2100      	movs	r1, #0
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	f7fe f997 	bl	8010f70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID47).getText());
 8012c42:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012c46:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	f603 4468 	addw	r4, r3, #3176	; 0xc68
 8012c50:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8012c54:	211a      	movs	r1, #26
 8012c56:	4618      	mov	r0, r3
 8012c58:	f7fe f8ce 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 8012c5c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8012c60:	4618      	mov	r0, r3
 8012c62:	f7fe f8d9 	bl	8010e18 <_ZNK8touchgfx9TypedText7getTextEv>
 8012c66:	4603      	mov	r3, r0
 8012c68:	4a8a      	ldr	r2, [pc, #552]	; (8012e94 <_ZN12MainViewBaseC1Ev+0x199c>)
 8012c6a:	2105      	movs	r1, #5
 8012c6c:	4620      	mov	r0, r4
 8012c6e:	f009 fe2d 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    RPMValue.setWildcard(RPMValueBuffer);
 8012c72:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012c76:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	f603 026c 	addw	r2, r3, #2156	; 0x86c
 8012c80:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012c84:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	f603 4368 	addw	r3, r3, #3176	; 0xc68
 8012c8e:	4619      	mov	r1, r3
 8012c90:	4610      	mov	r0, r2
 8012c92:	f7fe f9f5 	bl	8011080 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    RPMValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID46));
 8012c96:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012c9a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	f603 046c 	addw	r4, r3, #2156	; 0x86c
 8012ca4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8012ca8:	2119      	movs	r1, #25
 8012caa:	4618      	mov	r0, r3
 8012cac:	f7fe f8a4 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 8012cb0:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8012cb4:	4620      	mov	r0, r4
 8012cb6:	f006 fa5f 	bl	8019178 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltValue_1_1.setXY(61, 15);
 8012cba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012cbe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 8012cc8:	220f      	movs	r2, #15
 8012cca:	213d      	movs	r1, #61	; 0x3d
 8012ccc:	4618      	mov	r0, r3
 8012cce:	f7fd fe78 	bl	80109c2 <_ZN8touchgfx8Drawable5setXYEss>
    CltValue_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012cd2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012cd6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	f603 04a4 	addw	r4, r3, #2212	; 0x8a4
 8012ce0:	22ff      	movs	r2, #255	; 0xff
 8012ce2:	21ff      	movs	r1, #255	; 0xff
 8012ce4:	20ff      	movs	r0, #255	; 0xff
 8012ce6:	f7fe fbdf 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012cea:	4603      	mov	r3, r0
 8012cec:	4619      	mov	r1, r3
 8012cee:	4620      	mov	r0, r4
 8012cf0:	f7fe f8eb 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltValue_1_1.setLinespacing(0);
 8012cf4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012cf8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 8012d02:	2100      	movs	r1, #0
 8012d04:	4618      	mov	r0, r3
 8012d06:	f7fe f933 	bl	8010f70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltValue_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID50));
 8012d0a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012d0e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	f603 04a4 	addw	r4, r3, #2212	; 0x8a4
 8012d18:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8012d1c:	211b      	movs	r1, #27
 8012d1e:	4618      	mov	r0, r3
 8012d20:	f7fe f86a 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 8012d24:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	; 0xb0
 8012d28:	4620      	mov	r0, r4
 8012d2a:	f006 fa25 	bl	8019178 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CLTValue.setPosition(195, 158, 96, 60);
 8012d2e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012d32:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	f603 00d8 	addw	r0, r3, #2264	; 0x8d8
 8012d3c:	233c      	movs	r3, #60	; 0x3c
 8012d3e:	9300      	str	r3, [sp, #0]
 8012d40:	2360      	movs	r3, #96	; 0x60
 8012d42:	229e      	movs	r2, #158	; 0x9e
 8012d44:	21c3      	movs	r1, #195	; 0xc3
 8012d46:	f7fd fdf1 	bl	801092c <_ZN8touchgfx8Drawable11setPositionEssss>
    CLTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012d4a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012d4e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	f603 04d8 	addw	r4, r3, #2264	; 0x8d8
 8012d58:	22ff      	movs	r2, #255	; 0xff
 8012d5a:	21ff      	movs	r1, #255	; 0xff
 8012d5c:	20ff      	movs	r0, #255	; 0xff
 8012d5e:	f7fe fba3 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012d62:	4603      	mov	r3, r0
 8012d64:	4619      	mov	r1, r3
 8012d66:	4620      	mov	r0, r4
 8012d68:	f7fe f8af 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CLTValue.setLinespacing(0);
 8012d6c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012d70:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	f603 03d8 	addw	r3, r3, #2264	; 0x8d8
 8012d7a:	2100      	movs	r1, #0
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	f7fe f8f7 	bl	8010f70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID56).getText());
 8012d82:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012d86:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	f603 4472 	addw	r4, r3, #3186	; 0xc72
 8012d90:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8012d94:	211d      	movs	r1, #29
 8012d96:	4618      	mov	r0, r3
 8012d98:	f7fe f82e 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 8012d9c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8012da0:	4618      	mov	r0, r3
 8012da2:	f7fe f839 	bl	8010e18 <_ZNK8touchgfx9TypedText7getTextEv>
 8012da6:	4603      	mov	r3, r0
 8012da8:	4a3a      	ldr	r2, [pc, #232]	; (8012e94 <_ZN12MainViewBaseC1Ev+0x199c>)
 8012daa:	2105      	movs	r1, #5
 8012dac:	4620      	mov	r0, r4
 8012dae:	f009 fd8d 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    CLTValue.setWildcard(CLTValueBuffer);
 8012db2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012db6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	f603 02d8 	addw	r2, r3, #2264	; 0x8d8
 8012dc0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012dc4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	f603 4372 	addw	r3, r3, #3186	; 0xc72
 8012dce:	4619      	mov	r1, r3
 8012dd0:	4610      	mov	r0, r2
 8012dd2:	f7fe f955 	bl	8011080 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    CLTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID55));
 8012dd6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012dda:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	f603 04d8 	addw	r4, r3, #2264	; 0x8d8
 8012de4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8012de8:	211c      	movs	r1, #28
 8012dea:	4618      	mov	r0, r3
 8012dec:	f7fe f804 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 8012df0:	f8b7 10b8 	ldrh.w	r1, [r7, #184]	; 0xb8
 8012df4:	4620      	mov	r0, r4
 8012df6:	f006 f9bf 	bl	8019178 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    FuelPValue.setPosition(398, 94, 68, 42);
 8012dfa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012dfe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	f503 6011 	add.w	r0, r3, #2320	; 0x910
 8012e08:	232a      	movs	r3, #42	; 0x2a
 8012e0a:	9300      	str	r3, [sp, #0]
 8012e0c:	2344      	movs	r3, #68	; 0x44
 8012e0e:	225e      	movs	r2, #94	; 0x5e
 8012e10:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8012e14:	f7fd fd8a 	bl	801092c <_ZN8touchgfx8Drawable11setPositionEssss>
    FuelPValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012e18:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012e1c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	f503 6411 	add.w	r4, r3, #2320	; 0x910
 8012e26:	22ff      	movs	r2, #255	; 0xff
 8012e28:	21ff      	movs	r1, #255	; 0xff
 8012e2a:	20ff      	movs	r0, #255	; 0xff
 8012e2c:	f7fe fb3c 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012e30:	4603      	mov	r3, r0
 8012e32:	4619      	mov	r1, r3
 8012e34:	4620      	mov	r0, r4
 8012e36:	f7fe f848 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    FuelPValue.setLinespacing(0);
 8012e3a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012e3e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8012e48:	2100      	movs	r1, #0
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	f7fe f890 	bl	8010f70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(FuelPValueBuffer, FUELPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID72).getText());
 8012e50:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012e54:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	f603 447c 	addw	r4, r3, #3196	; 0xc7c
 8012e5e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8012e62:	2128      	movs	r1, #40	; 0x28
 8012e64:	4618      	mov	r0, r3
 8012e66:	f7fd ffc7 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 8012e6a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8012e6e:	4618      	mov	r0, r3
 8012e70:	f7fd ffd2 	bl	8010e18 <_ZNK8touchgfx9TypedText7getTextEv>
 8012e74:	4603      	mov	r3, r0
 8012e76:	4a07      	ldr	r2, [pc, #28]	; (8012e94 <_ZN12MainViewBaseC1Ev+0x199c>)
 8012e78:	2105      	movs	r1, #5
 8012e7a:	4620      	mov	r0, r4
 8012e7c:	f009 fd26 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    FuelPValue.setWildcard(FuelPValueBuffer);
 8012e80:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012e84:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	f503 6211 	add.w	r2, r3, #2320	; 0x910
 8012e8e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012e92:	e001      	b.n	8012e98 <_ZN12MainViewBaseC1Ev+0x19a0>
 8012e94:	08027ee0 	.word	0x08027ee0
 8012e98:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	f603 437c 	addw	r3, r3, #3196	; 0xc7c
 8012ea2:	4619      	mov	r1, r3
 8012ea4:	4610      	mov	r0, r2
 8012ea6:	f7fe f8eb 	bl	8011080 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    FuelPValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID71));
 8012eaa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012eae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	f503 6411 	add.w	r4, r3, #2320	; 0x910
 8012eb8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8012ebc:	2127      	movs	r1, #39	; 0x27
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	f7fd ff9a 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 8012ec4:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	; 0xc0
 8012ec8:	4620      	mov	r0, r4
 8012eca:	f006 f955 	bl	8019178 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    FuelPDescriptor.setXY(395, 137);
 8012ece:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012ed2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8012edc:	2289      	movs	r2, #137	; 0x89
 8012ede:	f240 118b 	movw	r1, #395	; 0x18b
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	f7fd fd6d 	bl	80109c2 <_ZN8touchgfx8Drawable5setXYEss>
    FuelPDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8012ee8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012eec:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	f603 1448 	addw	r4, r3, #2376	; 0x948
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	21dc      	movs	r1, #220	; 0xdc
 8012efa:	20ff      	movs	r0, #255	; 0xff
 8012efc:	f7fe fad4 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012f00:	4603      	mov	r3, r0
 8012f02:	4619      	mov	r1, r3
 8012f04:	4620      	mov	r0, r4
 8012f06:	f7fd ffe0 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    FuelPDescriptor.setLinespacing(0);
 8012f0a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012f0e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8012f18:	2100      	movs	r1, #0
 8012f1a:	4618      	mov	r0, r3
 8012f1c:	f7fe f828 	bl	8010f70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    FuelPDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID73));
 8012f20:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012f24:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	f603 1448 	addw	r4, r3, #2376	; 0x948
 8012f2e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8012f32:	2129      	movs	r1, #41	; 0x29
 8012f34:	4618      	mov	r0, r3
 8012f36:	f7fd ff5f 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 8012f3a:	f8b7 10c4 	ldrh.w	r1, [r7, #196]	; 0xc4
 8012f3e:	4620      	mov	r0, r4
 8012f40:	f006 f91a 	bl	8019178 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TpsNumberValue.setPosition(408, 226, 19, 17);
 8012f44:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012f48:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	f603 107c 	addw	r0, r3, #2428	; 0x97c
 8012f52:	2311      	movs	r3, #17
 8012f54:	9300      	str	r3, [sp, #0]
 8012f56:	2313      	movs	r3, #19
 8012f58:	22e2      	movs	r2, #226	; 0xe2
 8012f5a:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8012f5e:	f7fd fce5 	bl	801092c <_ZN8touchgfx8Drawable11setPositionEssss>
    TpsNumberValue.setColor(touchgfx::Color::getColorFrom24BitRGB(13, 13, 13));
 8012f62:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012f66:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	f603 147c 	addw	r4, r3, #2428	; 0x97c
 8012f70:	220d      	movs	r2, #13
 8012f72:	210d      	movs	r1, #13
 8012f74:	200d      	movs	r0, #13
 8012f76:	f7fe fa97 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012f7a:	4603      	mov	r3, r0
 8012f7c:	4619      	mov	r1, r3
 8012f7e:	4620      	mov	r0, r4
 8012f80:	f7fd ffa3 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TpsNumberValue.setLinespacing(0);
 8012f84:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012f88:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	f603 137c 	addw	r3, r3, #2428	; 0x97c
 8012f92:	2100      	movs	r1, #0
 8012f94:	4618      	mov	r0, r3
 8012f96:	f7fd ffeb 	bl	8010f70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TpsNumberValueBuffer, TPSNUMBERVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID75).getText());
 8012f9a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012f9e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012fa2:	681b      	ldr	r3, [r3, #0]
 8012fa4:	f603 4486 	addw	r4, r3, #3206	; 0xc86
 8012fa8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8012fac:	212b      	movs	r1, #43	; 0x2b
 8012fae:	4618      	mov	r0, r3
 8012fb0:	f7fd ff22 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 8012fb4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8012fb8:	4618      	mov	r0, r3
 8012fba:	f7fd ff2d 	bl	8010e18 <_ZNK8touchgfx9TypedText7getTextEv>
 8012fbe:	4603      	mov	r3, r0
 8012fc0:	4ae9      	ldr	r2, [pc, #932]	; (8013368 <_ZN12MainViewBaseC1Ev+0x1e70>)
 8012fc2:	2105      	movs	r1, #5
 8012fc4:	4620      	mov	r0, r4
 8012fc6:	f009 fc81 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TpsNumberValue.setWildcard(TpsNumberValueBuffer);
 8012fca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012fce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	f603 127c 	addw	r2, r3, #2428	; 0x97c
 8012fd8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012fdc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	f603 4386 	addw	r3, r3, #3206	; 0xc86
 8012fe6:	4619      	mov	r1, r3
 8012fe8:	4610      	mov	r0, r2
 8012fea:	f7fe f849 	bl	8011080 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TpsNumberValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID74));
 8012fee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012ff2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012ff6:	681b      	ldr	r3, [r3, #0]
 8012ff8:	f603 147c 	addw	r4, r3, #2428	; 0x97c
 8012ffc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8013000:	212a      	movs	r1, #42	; 0x2a
 8013002:	4618      	mov	r0, r3
 8013004:	f7fd fef8 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 8013008:	f8b7 10cc 	ldrh.w	r1, [r7, #204]	; 0xcc
 801300c:	4620      	mov	r0, r4
 801300e:	f006 f8b3 	bl	8019178 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MinFuelPValue.setPosition(430, 137, 43, 19);
 8013012:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013016:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	f603 10b4 	addw	r0, r3, #2484	; 0x9b4
 8013020:	2313      	movs	r3, #19
 8013022:	9300      	str	r3, [sp, #0]
 8013024:	232b      	movs	r3, #43	; 0x2b
 8013026:	2289      	movs	r2, #137	; 0x89
 8013028:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801302c:	f7fd fc7e 	bl	801092c <_ZN8touchgfx8Drawable11setPositionEssss>
    MinFuelPValue.setColor(touchgfx::Color::getColorFrom24BitRGB(185, 184, 184));
 8013030:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013034:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	f603 14b4 	addw	r4, r3, #2484	; 0x9b4
 801303e:	22b8      	movs	r2, #184	; 0xb8
 8013040:	21b8      	movs	r1, #184	; 0xb8
 8013042:	20b9      	movs	r0, #185	; 0xb9
 8013044:	f7fe fa30 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013048:	4603      	mov	r3, r0
 801304a:	4619      	mov	r1, r3
 801304c:	4620      	mov	r0, r4
 801304e:	f7fd ff3c 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MinFuelPValue.setLinespacing(0);
 8013052:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013056:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	f603 13b4 	addw	r3, r3, #2484	; 0x9b4
 8013060:	2100      	movs	r1, #0
 8013062:	4618      	mov	r0, r3
 8013064:	f7fd ff84 	bl	8010f70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MinFuelPValueBuffer, MINFUELPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID77).getText());
 8013068:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801306c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	f503 6449 	add.w	r4, r3, #3216	; 0xc90
 8013076:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801307a:	212d      	movs	r1, #45	; 0x2d
 801307c:	4618      	mov	r0, r3
 801307e:	f7fd febb 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 8013082:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8013086:	4618      	mov	r0, r3
 8013088:	f7fd fec6 	bl	8010e18 <_ZNK8touchgfx9TypedText7getTextEv>
 801308c:	4603      	mov	r3, r0
 801308e:	4ab6      	ldr	r2, [pc, #728]	; (8013368 <_ZN12MainViewBaseC1Ev+0x1e70>)
 8013090:	2105      	movs	r1, #5
 8013092:	4620      	mov	r0, r4
 8013094:	f009 fc1a 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MinFuelPValue.setWildcard(MinFuelPValueBuffer);
 8013098:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801309c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	f603 12b4 	addw	r2, r3, #2484	; 0x9b4
 80130a6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80130aa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	f503 6349 	add.w	r3, r3, #3216	; 0xc90
 80130b4:	4619      	mov	r1, r3
 80130b6:	4610      	mov	r0, r2
 80130b8:	f7fd ffe2 	bl	8011080 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MinFuelPValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID76));
 80130bc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80130c0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	f603 14b4 	addw	r4, r3, #2484	; 0x9b4
 80130ca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80130ce:	212c      	movs	r1, #44	; 0x2c
 80130d0:	4618      	mov	r0, r3
 80130d2:	f7fd fe91 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 80130d6:	f8b7 10d4 	ldrh.w	r1, [r7, #212]	; 0xd4
 80130da:	4620      	mov	r0, r4
 80130dc:	f006 f84c 	bl	8019178 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MaxOilTValue.setPosition(144, 220, 43, 20);
 80130e0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80130e4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	f603 10ec 	addw	r0, r3, #2540	; 0x9ec
 80130ee:	2314      	movs	r3, #20
 80130f0:	9300      	str	r3, [sp, #0]
 80130f2:	232b      	movs	r3, #43	; 0x2b
 80130f4:	22dc      	movs	r2, #220	; 0xdc
 80130f6:	2190      	movs	r1, #144	; 0x90
 80130f8:	f7fd fc18 	bl	801092c <_ZN8touchgfx8Drawable11setPositionEssss>
    MaxOilTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(185, 184, 184));
 80130fc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013100:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	f603 14ec 	addw	r4, r3, #2540	; 0x9ec
 801310a:	22b8      	movs	r2, #184	; 0xb8
 801310c:	21b8      	movs	r1, #184	; 0xb8
 801310e:	20b9      	movs	r0, #185	; 0xb9
 8013110:	f7fe f9ca 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013114:	4603      	mov	r3, r0
 8013116:	4619      	mov	r1, r3
 8013118:	4620      	mov	r0, r4
 801311a:	f7fd fed6 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MaxOilTValue.setLinespacing(0);
 801311e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013122:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	f603 13ec 	addw	r3, r3, #2540	; 0x9ec
 801312c:	2100      	movs	r1, #0
 801312e:	4618      	mov	r0, r3
 8013130:	f7fd ff1e 	bl	8010f70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MaxOilTValueBuffer, MAXOILTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID81).getText());
 8013134:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013138:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	f603 449a 	addw	r4, r3, #3226	; 0xc9a
 8013142:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8013146:	212f      	movs	r1, #47	; 0x2f
 8013148:	4618      	mov	r0, r3
 801314a:	f7fd fe55 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 801314e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8013152:	4618      	mov	r0, r3
 8013154:	f7fd fe60 	bl	8010e18 <_ZNK8touchgfx9TypedText7getTextEv>
 8013158:	4603      	mov	r3, r0
 801315a:	4a83      	ldr	r2, [pc, #524]	; (8013368 <_ZN12MainViewBaseC1Ev+0x1e70>)
 801315c:	2105      	movs	r1, #5
 801315e:	4620      	mov	r0, r4
 8013160:	f009 fbb4 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MaxOilTValue.setWildcard(MaxOilTValueBuffer);
 8013164:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013168:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	f603 12ec 	addw	r2, r3, #2540	; 0x9ec
 8013172:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013176:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	f603 439a 	addw	r3, r3, #3226	; 0xc9a
 8013180:	4619      	mov	r1, r3
 8013182:	4610      	mov	r0, r2
 8013184:	f7fd ff7c 	bl	8011080 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MaxOilTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID80));
 8013188:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801318c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	f603 14ec 	addw	r4, r3, #2540	; 0x9ec
 8013196:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801319a:	212e      	movs	r1, #46	; 0x2e
 801319c:	4618      	mov	r0, r3
 801319e:	f7fd fe2b 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 80131a2:	f8b7 10dc 	ldrh.w	r1, [r7, #220]	; 0xdc
 80131a6:	4620      	mov	r0, r4
 80131a8:	f005 ffe6 	bl	8019178 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MaxCltValue.setPosition(233, 220, 43, 20);
 80131ac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80131b0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	f603 2024 	addw	r0, r3, #2596	; 0xa24
 80131ba:	2314      	movs	r3, #20
 80131bc:	9300      	str	r3, [sp, #0]
 80131be:	232b      	movs	r3, #43	; 0x2b
 80131c0:	22dc      	movs	r2, #220	; 0xdc
 80131c2:	21e9      	movs	r1, #233	; 0xe9
 80131c4:	f7fd fbb2 	bl	801092c <_ZN8touchgfx8Drawable11setPositionEssss>
    MaxCltValue.setColor(touchgfx::Color::getColorFrom24BitRGB(185, 184, 184));
 80131c8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80131cc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	f603 2424 	addw	r4, r3, #2596	; 0xa24
 80131d6:	22b8      	movs	r2, #184	; 0xb8
 80131d8:	21b8      	movs	r1, #184	; 0xb8
 80131da:	20b9      	movs	r0, #185	; 0xb9
 80131dc:	f7fe f964 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80131e0:	4603      	mov	r3, r0
 80131e2:	4619      	mov	r1, r3
 80131e4:	4620      	mov	r0, r4
 80131e6:	f7fd fe70 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MaxCltValue.setLinespacing(0);
 80131ea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80131ee:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	f603 2324 	addw	r3, r3, #2596	; 0xa24
 80131f8:	2100      	movs	r1, #0
 80131fa:	4618      	mov	r0, r3
 80131fc:	f7fd feb8 	bl	8010f70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MaxCltValueBuffer, MAXCLTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID83).getText());
 8013200:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013204:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	f603 44a4 	addw	r4, r3, #3236	; 0xca4
 801320e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8013212:	2131      	movs	r1, #49	; 0x31
 8013214:	4618      	mov	r0, r3
 8013216:	f7fd fdef 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 801321a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801321e:	4618      	mov	r0, r3
 8013220:	f7fd fdfa 	bl	8010e18 <_ZNK8touchgfx9TypedText7getTextEv>
 8013224:	4603      	mov	r3, r0
 8013226:	4a50      	ldr	r2, [pc, #320]	; (8013368 <_ZN12MainViewBaseC1Ev+0x1e70>)
 8013228:	2105      	movs	r1, #5
 801322a:	4620      	mov	r0, r4
 801322c:	f009 fb4e 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MaxCltValue.setWildcard(MaxCltValueBuffer);
 8013230:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013234:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	f603 2224 	addw	r2, r3, #2596	; 0xa24
 801323e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013242:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	f603 43a4 	addw	r3, r3, #3236	; 0xca4
 801324c:	4619      	mov	r1, r3
 801324e:	4610      	mov	r0, r2
 8013250:	f7fd ff16 	bl	8011080 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MaxCltValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID82));
 8013254:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013258:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	f603 2424 	addw	r4, r3, #2596	; 0xa24
 8013262:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8013266:	2130      	movs	r1, #48	; 0x30
 8013268:	4618      	mov	r0, r3
 801326a:	f7fd fdc5 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 801326e:	f8b7 10e4 	ldrh.w	r1, [r7, #228]	; 0xe4
 8013272:	4620      	mov	r0, r4
 8013274:	f005 ff80 	bl	8019178 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MaxRPMValue.setPosition(85, 14, 36, 13);
 8013278:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801327c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	f603 205c 	addw	r0, r3, #2652	; 0xa5c
 8013286:	230d      	movs	r3, #13
 8013288:	9300      	str	r3, [sp, #0]
 801328a:	2324      	movs	r3, #36	; 0x24
 801328c:	220e      	movs	r2, #14
 801328e:	2155      	movs	r1, #85	; 0x55
 8013290:	f7fd fb4c 	bl	801092c <_ZN8touchgfx8Drawable11setPositionEssss>
    MaxRPMValue.setColor(touchgfx::Color::getColorFrom24BitRGB(230, 230, 230));
 8013294:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013298:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	f603 245c 	addw	r4, r3, #2652	; 0xa5c
 80132a2:	22e6      	movs	r2, #230	; 0xe6
 80132a4:	21e6      	movs	r1, #230	; 0xe6
 80132a6:	20e6      	movs	r0, #230	; 0xe6
 80132a8:	f7fe f8fe 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80132ac:	4603      	mov	r3, r0
 80132ae:	4619      	mov	r1, r3
 80132b0:	4620      	mov	r0, r4
 80132b2:	f7fd fe0a 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MaxRPMValue.setLinespacing(0);
 80132b6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80132ba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 80132c4:	2100      	movs	r1, #0
 80132c6:	4618      	mov	r0, r3
 80132c8:	f7fd fe52 	bl	8010f70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MaxRPMValueBuffer, MAXRPMVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID85).getText());
 80132cc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80132d0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	f603 44ae 	addw	r4, r3, #3246	; 0xcae
 80132da:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80132de:	2133      	movs	r1, #51	; 0x33
 80132e0:	4618      	mov	r0, r3
 80132e2:	f7fd fd89 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 80132e6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80132ea:	4618      	mov	r0, r3
 80132ec:	f7fd fd94 	bl	8010e18 <_ZNK8touchgfx9TypedText7getTextEv>
 80132f0:	4603      	mov	r3, r0
 80132f2:	4a1d      	ldr	r2, [pc, #116]	; (8013368 <_ZN12MainViewBaseC1Ev+0x1e70>)
 80132f4:	2105      	movs	r1, #5
 80132f6:	4620      	mov	r0, r4
 80132f8:	f009 fae8 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MaxRPMValue.setWildcard(MaxRPMValueBuffer);
 80132fc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013300:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	f603 225c 	addw	r2, r3, #2652	; 0xa5c
 801330a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801330e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	f603 43ae 	addw	r3, r3, #3246	; 0xcae
 8013318:	4619      	mov	r1, r3
 801331a:	4610      	mov	r0, r2
 801331c:	f7fd feb0 	bl	8011080 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MaxRPMValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID84));
 8013320:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013324:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	f603 245c 	addw	r4, r3, #2652	; 0xa5c
 801332e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8013332:	2132      	movs	r1, #50	; 0x32
 8013334:	4618      	mov	r0, r3
 8013336:	f7fd fd5f 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 801333a:	f8b7 10ec 	ldrh.w	r1, [r7, #236]	; 0xec
 801333e:	4620      	mov	r0, r4
 8013340:	f005 ff1a 	bl	8019178 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MaxSpeedValue.setPosition(61, 136, 43, 20);
 8013344:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013348:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	f603 2094 	addw	r0, r3, #2708	; 0xa94
 8013352:	2314      	movs	r3, #20
 8013354:	9300      	str	r3, [sp, #0]
 8013356:	232b      	movs	r3, #43	; 0x2b
 8013358:	2288      	movs	r2, #136	; 0x88
 801335a:	213d      	movs	r1, #61	; 0x3d
 801335c:	f7fd fae6 	bl	801092c <_ZN8touchgfx8Drawable11setPositionEssss>
    MaxSpeedValue.setColor(touchgfx::Color::getColorFrom24BitRGB(185, 184, 184));
 8013360:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013364:	e002      	b.n	801336c <_ZN12MainViewBaseC1Ev+0x1e74>
 8013366:	bf00      	nop
 8013368:	08027ee0 	.word	0x08027ee0
 801336c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	f603 2494 	addw	r4, r3, #2708	; 0xa94
 8013376:	22b8      	movs	r2, #184	; 0xb8
 8013378:	21b8      	movs	r1, #184	; 0xb8
 801337a:	20b9      	movs	r0, #185	; 0xb9
 801337c:	f7fe f894 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013380:	4603      	mov	r3, r0
 8013382:	4619      	mov	r1, r3
 8013384:	4620      	mov	r0, r4
 8013386:	f7fd fda0 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MaxSpeedValue.setLinespacing(0);
 801338a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801338e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	f603 2394 	addw	r3, r3, #2708	; 0xa94
 8013398:	2100      	movs	r1, #0
 801339a:	4618      	mov	r0, r3
 801339c:	f7fd fde8 	bl	8010f70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MaxSpeedValueBuffer, MAXSPEEDVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID89).getText());
 80133a0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80133a4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	f603 44b8 	addw	r4, r3, #3256	; 0xcb8
 80133ae:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80133b2:	2135      	movs	r1, #53	; 0x35
 80133b4:	4618      	mov	r0, r3
 80133b6:	f7fd fd1f 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 80133ba:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80133be:	4618      	mov	r0, r3
 80133c0:	f7fd fd2a 	bl	8010e18 <_ZNK8touchgfx9TypedText7getTextEv>
 80133c4:	4603      	mov	r3, r0
 80133c6:	4aeb      	ldr	r2, [pc, #940]	; (8013774 <_ZN12MainViewBaseC1Ev+0x227c>)
 80133c8:	2105      	movs	r1, #5
 80133ca:	4620      	mov	r0, r4
 80133cc:	f009 fa7e 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MaxSpeedValue.setWildcard(MaxSpeedValueBuffer);
 80133d0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80133d4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	f603 2294 	addw	r2, r3, #2708	; 0xa94
 80133de:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80133e2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80133ec:	4619      	mov	r1, r3
 80133ee:	4610      	mov	r0, r2
 80133f0:	f7fd fe46 	bl	8011080 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MaxSpeedValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID88));
 80133f4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80133f8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	f603 2494 	addw	r4, r3, #2708	; 0xa94
 8013402:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8013406:	2134      	movs	r1, #52	; 0x34
 8013408:	4618      	mov	r0, r3
 801340a:	f7fd fcf5 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 801340e:	f8b7 10f4 	ldrh.w	r1, [r7, #244]	; 0xf4
 8013412:	4620      	mov	r0, r4
 8013414:	f005 feb0 	bl	8019178 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    FuelTValue.setPosition(25, 177, 68, 42);
 8013418:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801341c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	f603 20cc 	addw	r0, r3, #2764	; 0xacc
 8013426:	232a      	movs	r3, #42	; 0x2a
 8013428:	9300      	str	r3, [sp, #0]
 801342a:	2344      	movs	r3, #68	; 0x44
 801342c:	22b1      	movs	r2, #177	; 0xb1
 801342e:	2119      	movs	r1, #25
 8013430:	f7fd fa7c 	bl	801092c <_ZN8touchgfx8Drawable11setPositionEssss>
    FuelTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013434:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013438:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	f603 24cc 	addw	r4, r3, #2764	; 0xacc
 8013442:	22ff      	movs	r2, #255	; 0xff
 8013444:	21ff      	movs	r1, #255	; 0xff
 8013446:	20ff      	movs	r0, #255	; 0xff
 8013448:	f7fe f82e 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801344c:	4603      	mov	r3, r0
 801344e:	4619      	mov	r1, r3
 8013450:	4620      	mov	r0, r4
 8013452:	f7fd fd3a 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    FuelTValue.setLinespacing(0);
 8013456:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801345a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	f603 23cc 	addw	r3, r3, #2764	; 0xacc
 8013464:	2100      	movs	r1, #0
 8013466:	4618      	mov	r0, r3
 8013468:	f7fd fd82 	bl	8010f70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(FuelTValueBuffer, FUELTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID92).getText());
 801346c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013470:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	f603 44c2 	addw	r4, r3, #3266	; 0xcc2
 801347a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801347e:	2138      	movs	r1, #56	; 0x38
 8013480:	4618      	mov	r0, r3
 8013482:	f7fd fcb9 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 8013486:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801348a:	4618      	mov	r0, r3
 801348c:	f7fd fcc4 	bl	8010e18 <_ZNK8touchgfx9TypedText7getTextEv>
 8013490:	4603      	mov	r3, r0
 8013492:	4ab8      	ldr	r2, [pc, #736]	; (8013774 <_ZN12MainViewBaseC1Ev+0x227c>)
 8013494:	2105      	movs	r1, #5
 8013496:	4620      	mov	r0, r4
 8013498:	f009 fa18 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    FuelTValue.setWildcard(FuelTValueBuffer);
 801349c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80134a0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	f603 22cc 	addw	r2, r3, #2764	; 0xacc
 80134aa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80134ae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	f603 43c2 	addw	r3, r3, #3266	; 0xcc2
 80134b8:	4619      	mov	r1, r3
 80134ba:	4610      	mov	r0, r2
 80134bc:	f7fd fde0 	bl	8011080 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    FuelTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID91));
 80134c0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80134c4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	f603 24cc 	addw	r4, r3, #2764	; 0xacc
 80134ce:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80134d2:	2137      	movs	r1, #55	; 0x37
 80134d4:	4618      	mov	r0, r3
 80134d6:	f7fd fc8f 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 80134da:	f8b7 10fc 	ldrh.w	r1, [r7, #252]	; 0xfc
 80134de:	4620      	mov	r0, r4
 80134e0:	f005 fe4a 	bl	8019178 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    FuelTDescriptor.setXY(35, 220);
 80134e4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80134e8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	f603 3304 	addw	r3, r3, #2820	; 0xb04
 80134f2:	22dc      	movs	r2, #220	; 0xdc
 80134f4:	2123      	movs	r1, #35	; 0x23
 80134f6:	4618      	mov	r0, r3
 80134f8:	f7fd fa63 	bl	80109c2 <_ZN8touchgfx8Drawable5setXYEss>
    FuelTDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80134fc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013500:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	f603 3404 	addw	r4, r3, #2820	; 0xb04
 801350a:	2200      	movs	r2, #0
 801350c:	21dc      	movs	r1, #220	; 0xdc
 801350e:	20ff      	movs	r0, #255	; 0xff
 8013510:	f7fd ffca 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013514:	4603      	mov	r3, r0
 8013516:	4619      	mov	r1, r3
 8013518:	4620      	mov	r0, r4
 801351a:	f7fd fcd6 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    FuelTDescriptor.setLinespacing(0);
 801351e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013522:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	f603 3304 	addw	r3, r3, #2820	; 0xb04
 801352c:	2100      	movs	r1, #0
 801352e:	4618      	mov	r0, r3
 8013530:	f7fd fd1e 	bl	8010f70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    FuelTDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID93));
 8013534:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013538:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	f603 3404 	addw	r4, r3, #2820	; 0xb04
 8013542:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8013546:	2139      	movs	r1, #57	; 0x39
 8013548:	4618      	mov	r0, r3
 801354a:	f7fd fc55 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 801354e:	f8b7 1100 	ldrh.w	r1, [r7, #256]	; 0x100
 8013552:	4620      	mov	r0, r4
 8013554:	f005 fe10 	bl	8019178 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    BatIndicator.setXY(236, -1);
 8013558:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801355c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	f603 3338 	addw	r3, r3, #2872	; 0xb38
 8013566:	f04f 32ff 	mov.w	r2, #4294967295
 801356a:	21ec      	movs	r1, #236	; 0xec
 801356c:	4618      	mov	r0, r3
 801356e:	f7fd fa28 	bl	80109c2 <_ZN8touchgfx8Drawable5setXYEss>
    BatIndicator.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 3, 3));
 8013572:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013576:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	f603 3438 	addw	r4, r3, #2872	; 0xb38
 8013580:	2203      	movs	r2, #3
 8013582:	2103      	movs	r1, #3
 8013584:	20ff      	movs	r0, #255	; 0xff
 8013586:	f7fd ff8f 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801358a:	4603      	mov	r3, r0
 801358c:	4619      	mov	r1, r3
 801358e:	4620      	mov	r0, r4
 8013590:	f7fd fc9b 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    BatIndicator.setLinespacing(0);
 8013594:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013598:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	f603 3338 	addw	r3, r3, #2872	; 0xb38
 80135a2:	2100      	movs	r1, #0
 80135a4:	4618      	mov	r0, r3
 80135a6:	f7fd fce3 	bl	8010f70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    BatIndicator.setTypedText(touchgfx::TypedText(T_SINGLEUSEID94));
 80135aa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80135ae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	f603 3438 	addw	r4, r3, #2872	; 0xb38
 80135b8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80135bc:	213a      	movs	r1, #58	; 0x3a
 80135be:	4618      	mov	r0, r3
 80135c0:	f7fd fc1a 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 80135c4:	f8b7 1104 	ldrh.w	r1, [r7, #260]	; 0x104
 80135c8:	4620      	mov	r0, r4
 80135ca:	f005 fdd5 	bl	8019178 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MilIndicator.setXY(125, -1);
 80135ce:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80135d2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	f603 336c 	addw	r3, r3, #2924	; 0xb6c
 80135dc:	f04f 32ff 	mov.w	r2, #4294967295
 80135e0:	217d      	movs	r1, #125	; 0x7d
 80135e2:	4618      	mov	r0, r3
 80135e4:	f7fd f9ed 	bl	80109c2 <_ZN8touchgfx8Drawable5setXYEss>
    MilIndicator.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 0));
 80135e8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80135ec:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	f603 346c 	addw	r4, r3, #2924	; 0xb6c
 80135f6:	2200      	movs	r2, #0
 80135f8:	21ff      	movs	r1, #255	; 0xff
 80135fa:	20ff      	movs	r0, #255	; 0xff
 80135fc:	f7fd ff54 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013600:	4603      	mov	r3, r0
 8013602:	4619      	mov	r1, r3
 8013604:	4620      	mov	r0, r4
 8013606:	f7fd fc60 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MilIndicator.setLinespacing(0);
 801360a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801360e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	f603 336c 	addw	r3, r3, #2924	; 0xb6c
 8013618:	2100      	movs	r1, #0
 801361a:	4618      	mov	r0, r3
 801361c:	f7fd fca8 	bl	8010f70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    MilIndicator.setTypedText(touchgfx::TypedText(T_SINGLEUSEID95));
 8013620:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013624:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	f603 346c 	addw	r4, r3, #2924	; 0xb6c
 801362e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013632:	213b      	movs	r1, #59	; 0x3b
 8013634:	4618      	mov	r0, r3
 8013636:	f7fd fbdf 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 801363a:	f8b7 1108 	ldrh.w	r1, [r7, #264]	; 0x108
 801363e:	4620      	mov	r0, r4
 8013640:	f005 fd9a 	bl	8019178 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OilIndicator.setXY(182, -1);
 8013644:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013648:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8013652:	f04f 32ff 	mov.w	r2, #4294967295
 8013656:	21b6      	movs	r1, #182	; 0xb6
 8013658:	4618      	mov	r0, r3
 801365a:	f7fd f9b2 	bl	80109c2 <_ZN8touchgfx8Drawable5setXYEss>
    OilIndicator.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 0));
 801365e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013662:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	f503 643a 	add.w	r4, r3, #2976	; 0xba0
 801366c:	2200      	movs	r2, #0
 801366e:	2100      	movs	r1, #0
 8013670:	20ff      	movs	r0, #255	; 0xff
 8013672:	f7fd ff19 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013676:	4603      	mov	r3, r0
 8013678:	4619      	mov	r1, r3
 801367a:	4620      	mov	r0, r4
 801367c:	f7fd fc25 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OilIndicator.setLinespacing(0);
 8013680:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013684:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 801368e:	2100      	movs	r1, #0
 8013690:	4618      	mov	r0, r3
 8013692:	f7fd fc6d 	bl	8010f70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    OilIndicator.setTypedText(touchgfx::TypedText(T_SINGLEUSEID96));
 8013696:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801369a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	f503 643a 	add.w	r4, r3, #2976	; 0xba0
 80136a4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80136a8:	213c      	movs	r1, #60	; 0x3c
 80136aa:	4618      	mov	r0, r3
 80136ac:	f7fd fba4 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 80136b0:	f8b7 110c 	ldrh.w	r1, [r7, #268]	; 0x10c
 80136b4:	4620      	mov	r0, r4
 80136b6:	f005 fd5f 	bl	8019178 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MinOilPValue.setPosition(347, 137, 43, 20);
 80136ba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80136be:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	f603 30d4 	addw	r0, r3, #3028	; 0xbd4
 80136c8:	2314      	movs	r3, #20
 80136ca:	9300      	str	r3, [sp, #0]
 80136cc:	232b      	movs	r3, #43	; 0x2b
 80136ce:	2289      	movs	r2, #137	; 0x89
 80136d0:	f240 115b 	movw	r1, #347	; 0x15b
 80136d4:	f7fd f92a 	bl	801092c <_ZN8touchgfx8Drawable11setPositionEssss>
    MinOilPValue.setColor(touchgfx::Color::getColorFrom24BitRGB(185, 184, 184));
 80136d8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80136dc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	f603 34d4 	addw	r4, r3, #3028	; 0xbd4
 80136e6:	22b8      	movs	r2, #184	; 0xb8
 80136e8:	21b8      	movs	r1, #184	; 0xb8
 80136ea:	20b9      	movs	r0, #185	; 0xb9
 80136ec:	f7fd fedc 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80136f0:	4603      	mov	r3, r0
 80136f2:	4619      	mov	r1, r3
 80136f4:	4620      	mov	r0, r4
 80136f6:	f7fd fbe8 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MinOilPValue.setLinespacing(0);
 80136fa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80136fe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	f603 33d4 	addw	r3, r3, #3028	; 0xbd4
 8013708:	2100      	movs	r1, #0
 801370a:	4618      	mov	r0, r3
 801370c:	f7fd fc30 	bl	8010f70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MinOilPValueBuffer, MINOILPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID98).getText());
 8013710:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013714:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	f603 44cc 	addw	r4, r3, #3276	; 0xccc
 801371e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013722:	213e      	movs	r1, #62	; 0x3e
 8013724:	4618      	mov	r0, r3
 8013726:	f7fd fb67 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 801372a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801372e:	4618      	mov	r0, r3
 8013730:	f7fd fb72 	bl	8010e18 <_ZNK8touchgfx9TypedText7getTextEv>
 8013734:	4603      	mov	r3, r0
 8013736:	4a0f      	ldr	r2, [pc, #60]	; (8013774 <_ZN12MainViewBaseC1Ev+0x227c>)
 8013738:	2105      	movs	r1, #5
 801373a:	4620      	mov	r0, r4
 801373c:	f009 f8c6 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MinOilPValue.setWildcard(MinOilPValueBuffer);
 8013740:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013744:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	f603 32d4 	addw	r2, r3, #3028	; 0xbd4
 801374e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013752:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	f603 43cc 	addw	r3, r3, #3276	; 0xccc
 801375c:	4619      	mov	r1, r3
 801375e:	4610      	mov	r0, r2
 8013760:	f7fd fc8e 	bl	8011080 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MinOilPValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID97));
 8013764:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013768:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	f603 34d4 	addw	r4, r3, #3028	; 0xbd4
 8013772:	e001      	b.n	8013778 <_ZN12MainViewBaseC1Ev+0x2280>
 8013774:	08027ee0 	.word	0x08027ee0
 8013778:	f507 738a 	add.w	r3, r7, #276	; 0x114
 801377c:	213d      	movs	r1, #61	; 0x3d
 801377e:	4618      	mov	r0, r3
 8013780:	f7fd fb3a 	bl	8010df8 <_ZN8touchgfx9TypedTextC1Et>
 8013784:	f8b7 1114 	ldrh.w	r1, [r7, #276]	; 0x114
 8013788:	4620      	mov	r0, r4
 801378a:	f005 fcf5 	bl	8019178 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    add(backgroundBox);
 801378e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013792:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013796:	681a      	ldr	r2, [r3, #0]
 8013798:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801379c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	3340      	adds	r3, #64	; 0x40
 80137a4:	4619      	mov	r1, r3
 80137a6:	4610      	mov	r0, r2
 80137a8:	f7fd fa6e 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltDecsriptor);
 80137ac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80137b0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80137b4:	681a      	ldr	r2, [r3, #0]
 80137b6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80137ba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	3370      	adds	r3, #112	; 0x70
 80137c2:	4619      	mov	r1, r3
 80137c4:	4610      	mov	r0, r2
 80137c6:	f7fd fa5f 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaDescriptor);
 80137ca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80137ce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80137d2:	681a      	ldr	r2, [r3, #0]
 80137d4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80137d8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	33a4      	adds	r3, #164	; 0xa4
 80137e0:	4619      	mov	r1, r3
 80137e2:	4610      	mov	r0, r2
 80137e4:	f7fd fa50 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtDescriptor);
 80137e8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80137ec:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80137f0:	681a      	ldr	r2, [r3, #0]
 80137f2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80137f6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	33d8      	adds	r3, #216	; 0xd8
 80137fe:	4619      	mov	r1, r3
 8013800:	4610      	mov	r0, r2
 8013802:	f7fd fa41 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaValue);
 8013806:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801380a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801380e:	681a      	ldr	r2, [r3, #0]
 8013810:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013814:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 801381e:	4619      	mov	r1, r3
 8013820:	4610      	mov	r0, r2
 8013822:	f7fd fa31 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(SpeedValue);
 8013826:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801382a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801382e:	681a      	ldr	r2, [r3, #0]
 8013830:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013834:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801383e:	4619      	mov	r1, r3
 8013840:	4610      	mov	r0, r2
 8013842:	f7fd fa21 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(backgroundImage);
 8013846:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801384a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801384e:	681a      	ldr	r2, [r3, #0]
 8013850:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013854:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 801385e:	4619      	mov	r1, r3
 8013860:	4610      	mov	r0, r2
 8013862:	f7fd fa11 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm1);
 8013866:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801386a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801386e:	681a      	ldr	r2, [r3, #0]
 8013870:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013874:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801387e:	4619      	mov	r1, r3
 8013880:	4610      	mov	r0, r2
 8013882:	f7fd fa01 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm2);
 8013886:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801388a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801388e:	681a      	ldr	r2, [r3, #0]
 8013890:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013894:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 801389e:	4619      	mov	r1, r3
 80138a0:	4610      	mov	r0, r2
 80138a2:	f7fd f9f1 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm3);
 80138a6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80138aa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80138ae:	681a      	ldr	r2, [r3, #0]
 80138b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80138b4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80138be:	4619      	mov	r1, r3
 80138c0:	4610      	mov	r0, r2
 80138c2:	f7fd f9e1 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm4);
 80138c6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80138ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80138ce:	681a      	ldr	r2, [r3, #0]
 80138d0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80138d4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80138d8:	681b      	ldr	r3, [r3, #0]
 80138da:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80138de:	4619      	mov	r1, r3
 80138e0:	4610      	mov	r0, r2
 80138e2:	f7fd f9d1 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm5);
 80138e6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80138ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80138ee:	681a      	ldr	r2, [r3, #0]
 80138f0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80138f4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80138fe:	4619      	mov	r1, r3
 8013900:	4610      	mov	r0, r2
 8013902:	f7fd f9c1 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm6);
 8013906:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801390a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801390e:	681a      	ldr	r2, [r3, #0]
 8013910:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013914:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 801391e:	4619      	mov	r1, r3
 8013920:	4610      	mov	r0, r2
 8013922:	f7fd f9b1 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm7);
 8013926:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801392a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801392e:	681a      	ldr	r2, [r3, #0]
 8013930:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013934:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 801393e:	4619      	mov	r1, r3
 8013940:	4610      	mov	r0, r2
 8013942:	f7fd f9a1 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm8);
 8013946:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801394a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801394e:	681a      	ldr	r2, [r3, #0]
 8013950:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013954:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	f503 734c 	add.w	r3, r3, #816	; 0x330
 801395e:	4619      	mov	r1, r3
 8013960:	4610      	mov	r0, r2
 8013962:	f7fd f991 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line11);
 8013966:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801396a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801396e:	681a      	ldr	r2, [r3, #0]
 8013970:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013974:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	f503 735a 	add.w	r3, r3, #872	; 0x368
 801397e:	4619      	mov	r1, r3
 8013980:	4610      	mov	r0, r2
 8013982:	f7fd f981 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor);
 8013986:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801398a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801398e:	681a      	ldr	r2, [r3, #0]
 8013990:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013994:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 801399e:	4619      	mov	r1, r3
 80139a0:	4610      	mov	r0, r2
 80139a2:	f7fd f971 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATValue);
 80139a6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80139aa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80139ae:	681a      	ldr	r2, [r3, #0]
 80139b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80139b4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80139be:	4619      	mov	r1, r3
 80139c0:	4610      	mov	r0, r2
 80139c2:	f7fd f961 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1);
 80139c6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80139ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80139ce:	681a      	ldr	r2, [r3, #0]
 80139d0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80139d4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 80139de:	4619      	mov	r1, r3
 80139e0:	4610      	mov	r0, r2
 80139e2:	f7fd f951 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ECTDescriptor_1);
 80139e6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80139ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80139ee:	681a      	ldr	r2, [r3, #0]
 80139f0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80139f4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80139fe:	4619      	mov	r1, r3
 8013a00:	4610      	mov	r0, r2
 8013a02:	f7fd f941 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILTempValue);
 8013a06:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013a0a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013a0e:	681a      	ldr	r2, [r3, #0]
 8013a10:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013a14:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8013a1e:	4619      	mov	r1, r3
 8013a20:	4610      	mov	r0, r2
 8013a22:	f7fd f931 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILPressureValue);
 8013a26:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013a2a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013a2e:	681a      	ldr	r2, [r3, #0]
 8013a30:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013a34:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013a3e:	4619      	mov	r1, r3
 8013a40:	4610      	mov	r0, r2
 8013a42:	f7fd f921 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1_1);
 8013a46:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013a4a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013a4e:	681a      	ldr	r2, [r3, #0]
 8013a50:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013a54:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8013a5e:	4619      	mov	r1, r3
 8013a60:	4610      	mov	r0, r2
 8013a62:	f7fd f911 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TPSProgress);
 8013a66:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013a6a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013a6e:	681a      	ldr	r2, [r3, #0]
 8013a70:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013a74:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8013a7e:	4619      	mov	r1, r3
 8013a80:	4610      	mov	r0, r2
 8013a82:	f7fd f901 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10);
 8013a86:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013a8a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013a8e:	681a      	ldr	r2, [r3, #0]
 8013a90:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013a94:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 8013a9e:	4619      	mov	r1, r3
 8013aa0:	4610      	mov	r0, r2
 8013aa2:	f7fd f8f1 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10_1);
 8013aa6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013aaa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013aae:	681a      	ldr	r2, [r3, #0]
 8013ab0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013ab4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 8013abe:	4619      	mov	r1, r3
 8013ac0:	4610      	mov	r0, r2
 8013ac2:	f7fd f8e1 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BatteryVoltage);
 8013ac6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013aca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013ace:	681a      	ldr	r2, [r3, #0]
 8013ad0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013ad4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	f203 7344 	addw	r3, r3, #1860	; 0x744
 8013ade:	4619      	mov	r1, r3
 8013ae0:	4610      	mov	r0, r2
 8013ae2:	f7fd f8d1 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMProgressBar);
 8013ae6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013aea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013aee:	681a      	ldr	r2, [r3, #0]
 8013af0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013af4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8013afe:	4619      	mov	r1, r3
 8013b00:	4610      	mov	r0, r2
 8013b02:	f7fd f8c1 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMValue);
 8013b06:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013b0a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013b0e:	681a      	ldr	r2, [r3, #0]
 8013b10:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013b14:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	f603 036c 	addw	r3, r3, #2156	; 0x86c
 8013b1e:	4619      	mov	r1, r3
 8013b20:	4610      	mov	r0, r2
 8013b22:	f7fd f8b1 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltValue_1_1);
 8013b26:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013b2a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013b2e:	681a      	ldr	r2, [r3, #0]
 8013b30:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013b34:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 8013b3e:	4619      	mov	r1, r3
 8013b40:	4610      	mov	r0, r2
 8013b42:	f7fd f8a1 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CLTValue);
 8013b46:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013b4a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013b4e:	681a      	ldr	r2, [r3, #0]
 8013b50:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013b54:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	f603 03d8 	addw	r3, r3, #2264	; 0x8d8
 8013b5e:	4619      	mov	r1, r3
 8013b60:	4610      	mov	r0, r2
 8013b62:	f7fd f891 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(FuelPValue);
 8013b66:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013b6a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013b6e:	681a      	ldr	r2, [r3, #0]
 8013b70:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013b74:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8013b7e:	4619      	mov	r1, r3
 8013b80:	4610      	mov	r0, r2
 8013b82:	f7fd f881 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(FuelPDescriptor);
 8013b86:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013b8a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013b8e:	681a      	ldr	r2, [r3, #0]
 8013b90:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013b94:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8013b9e:	4619      	mov	r1, r3
 8013ba0:	4610      	mov	r0, r2
 8013ba2:	f7fd f871 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TpsNumberValue);
 8013ba6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013baa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013bae:	681a      	ldr	r2, [r3, #0]
 8013bb0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013bb4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	f603 137c 	addw	r3, r3, #2428	; 0x97c
 8013bbe:	4619      	mov	r1, r3
 8013bc0:	4610      	mov	r0, r2
 8013bc2:	f7fd f861 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MinFuelPValue);
 8013bc6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013bca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013bce:	681a      	ldr	r2, [r3, #0]
 8013bd0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013bd4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	f603 13b4 	addw	r3, r3, #2484	; 0x9b4
 8013bde:	4619      	mov	r1, r3
 8013be0:	4610      	mov	r0, r2
 8013be2:	f7fd f851 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MaxOilTValue);
 8013be6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013bea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013bee:	681a      	ldr	r2, [r3, #0]
 8013bf0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013bf4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	f603 13ec 	addw	r3, r3, #2540	; 0x9ec
 8013bfe:	4619      	mov	r1, r3
 8013c00:	4610      	mov	r0, r2
 8013c02:	f7fd f841 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MaxCltValue);
 8013c06:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013c0a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013c0e:	681a      	ldr	r2, [r3, #0]
 8013c10:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013c14:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	f603 2324 	addw	r3, r3, #2596	; 0xa24
 8013c1e:	4619      	mov	r1, r3
 8013c20:	4610      	mov	r0, r2
 8013c22:	f7fd f831 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MaxRPMValue);
 8013c26:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013c2a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013c2e:	681a      	ldr	r2, [r3, #0]
 8013c30:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013c34:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 8013c3e:	4619      	mov	r1, r3
 8013c40:	4610      	mov	r0, r2
 8013c42:	f7fd f821 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MaxSpeedValue);
 8013c46:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013c4a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013c4e:	681a      	ldr	r2, [r3, #0]
 8013c50:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013c54:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	f603 2394 	addw	r3, r3, #2708	; 0xa94
 8013c5e:	4619      	mov	r1, r3
 8013c60:	4610      	mov	r0, r2
 8013c62:	f7fd f811 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(FuelTValue);
 8013c66:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013c6a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013c6e:	681a      	ldr	r2, [r3, #0]
 8013c70:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013c74:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	f603 23cc 	addw	r3, r3, #2764	; 0xacc
 8013c7e:	4619      	mov	r1, r3
 8013c80:	4610      	mov	r0, r2
 8013c82:	f7fd f801 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(FuelTDescriptor);
 8013c86:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013c8a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013c8e:	681a      	ldr	r2, [r3, #0]
 8013c90:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013c94:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	f603 3304 	addw	r3, r3, #2820	; 0xb04
 8013c9e:	4619      	mov	r1, r3
 8013ca0:	4610      	mov	r0, r2
 8013ca2:	f7fc fff1 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BatIndicator);
 8013ca6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013caa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013cae:	681a      	ldr	r2, [r3, #0]
 8013cb0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013cb4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	f603 3338 	addw	r3, r3, #2872	; 0xb38
 8013cbe:	4619      	mov	r1, r3
 8013cc0:	4610      	mov	r0, r2
 8013cc2:	f7fc ffe1 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MilIndicator);
 8013cc6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013cca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013cce:	681a      	ldr	r2, [r3, #0]
 8013cd0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013cd4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	f603 336c 	addw	r3, r3, #2924	; 0xb6c
 8013cde:	4619      	mov	r1, r3
 8013ce0:	4610      	mov	r0, r2
 8013ce2:	f7fc ffd1 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OilIndicator);
 8013ce6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013cea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013cee:	681a      	ldr	r2, [r3, #0]
 8013cf0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013cf4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8013cfe:	4619      	mov	r1, r3
 8013d00:	4610      	mov	r0, r2
 8013d02:	f7fc ffc1 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MinOilPValue);
 8013d06:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013d0a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013d0e:	681a      	ldr	r2, [r3, #0]
 8013d10:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013d14:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013d18:	681b      	ldr	r3, [r3, #0]
 8013d1a:	f603 33d4 	addw	r3, r3, #3028	; 0xbd4
 8013d1e:	4619      	mov	r1, r3
 8013d20:	4610      	mov	r0, r2
 8013d22:	f7fc ffb1 	bl	8010c88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8013d26:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013d2a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	4618      	mov	r0, r3
 8013d32:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8013d36:	46bd      	mov	sp, r7
 8013d38:	bd90      	pop	{r4, r7, pc}
 8013d3a:	bf00      	nop

08013d3c <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 8013d3c:	b480      	push	{r7}
 8013d3e:	b083      	sub	sp, #12
 8013d40:	af00      	add	r7, sp, #0
 8013d42:	6078      	str	r0, [r7, #4]

}
 8013d44:	bf00      	nop
 8013d46:	370c      	adds	r7, #12
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d4e:	4770      	bx	lr

08013d50 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View() : presenter(0)
 8013d50:	b580      	push	{r7, lr}
 8013d52:	b082      	sub	sp, #8
 8013d54:	af00      	add	r7, sp, #0
 8013d56:	6078      	str	r0, [r7, #4]
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	4618      	mov	r0, r3
 8013d5c:	f007 fcf0 	bl	801b740 <_ZN8touchgfx6ScreenC1Ev>
 8013d60:	4a05      	ldr	r2, [pc, #20]	; (8013d78 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	601a      	str	r2, [r3, #0]
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	2200      	movs	r2, #0
 8013d6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	4618      	mov	r0, r3
 8013d70:	3708      	adds	r7, #8
 8013d72:	46bd      	mov	sp, r7
 8013d74:	bd80      	pop	{r7, pc}
 8013d76:	bf00      	nop
 8013d78:	080284e4 	.word	0x080284e4

08013d7c <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 8013d7c:	b590      	push	{r4, r7, lr}
 8013d7e:	b089      	sub	sp, #36	; 0x24
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	60f8      	str	r0, [r7, #12]
 8013d84:	60b9      	str	r1, [r7, #8]
 8013d86:	607a      	str	r2, [r7, #4]
 8013d88:	68bb      	ldr	r3, [r7, #8]
 8013d8a:	61bb      	str	r3, [r7, #24]
#ifndef  __ICCARM__
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8013d8c:	69bb      	ldr	r3, [r7, #24]
 8013d8e:	015a      	lsls	r2, r3, #5
 8013d90:	f107 0314 	add.w	r3, r7, #20
 8013d94:	4611      	mov	r1, r2
 8013d96:	4618      	mov	r0, r3
 8013d98:	f7fd f9a2 	bl	80110e0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8013d9c:	697b      	ldr	r3, [r7, #20]
 8013d9e:	461c      	mov	r4, r3
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	61fb      	str	r3, [r7, #28]
 8013da4:	69fb      	ldr	r3, [r7, #28]
 8013da6:	015a      	lsls	r2, r3, #5
 8013da8:	f107 0310 	add.w	r3, r7, #16
 8013dac:	4611      	mov	r1, r2
 8013dae:	4618      	mov	r0, r3
 8013db0:	f7fd f996 	bl	80110e0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8013db4:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8013db6:	461a      	mov	r2, r3
 8013db8:	4621      	mov	r1, r4
 8013dba:	68f8      	ldr	r0, [r7, #12]
 8013dbc:	f005 f81a 	bl	8018df4 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 8013dc0:	bf00      	nop
 8013dc2:	3724      	adds	r7, #36	; 0x24
 8013dc4:	46bd      	mov	sp, r7
 8013dc6:	bd90      	pop	{r4, r7, pc}

08013dc8 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 8013dc8:	b590      	push	{r4, r7, lr}
 8013dca:	b089      	sub	sp, #36	; 0x24
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	60f8      	str	r0, [r7, #12]
 8013dd0:	60b9      	str	r1, [r7, #8]
 8013dd2:	607a      	str	r2, [r7, #4]
 8013dd4:	68bb      	ldr	r3, [r7, #8]
 8013dd6:	61bb      	str	r3, [r7, #24]
 8013dd8:	69bb      	ldr	r3, [r7, #24]
 8013dda:	015a      	lsls	r2, r3, #5
 8013ddc:	f107 0314 	add.w	r3, r7, #20
 8013de0:	4611      	mov	r1, r2
 8013de2:	4618      	mov	r0, r3
 8013de4:	f7fd f97c 	bl	80110e0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8013de8:	697b      	ldr	r3, [r7, #20]
 8013dea:	461c      	mov	r4, r3
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	61fb      	str	r3, [r7, #28]
 8013df0:	69fb      	ldr	r3, [r7, #28]
 8013df2:	015a      	lsls	r2, r3, #5
 8013df4:	f107 0310 	add.w	r3, r7, #16
 8013df8:	4611      	mov	r1, r2
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	f7fd f970 	bl	80110e0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8013e00:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8013e02:	461a      	mov	r2, r3
 8013e04:	4621      	mov	r1, r4
 8013e06:	68f8      	ldr	r0, [r7, #12]
 8013e08:	f004 ffff 	bl	8018e0a <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 8013e0c:	bf00      	nop
 8013e0e:	3724      	adds	r7, #36	; 0x24
 8013e10:	46bd      	mov	sp, r7
 8013e12:	bd90      	pop	{r4, r7, pc}

08013e14 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 8013e14:	b580      	push	{r7, lr}
 8013e16:	b084      	sub	sp, #16
 8013e18:	af00      	add	r7, sp, #0
 8013e1a:	6078      	str	r0, [r7, #4]
 8013e1c:	6039      	str	r1, [r7, #0]
 8013e1e:	683b      	ldr	r3, [r7, #0]
 8013e20:	60fb      	str	r3, [r7, #12]
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	015a      	lsls	r2, r3, #5
 8013e26:	f107 0308 	add.w	r3, r7, #8
 8013e2a:	4611      	mov	r1, r2
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	f7fd f957 	bl	80110e0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8013e32:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 8013e34:	4619      	mov	r1, r3
 8013e36:	6878      	ldr	r0, [r7, #4]
 8013e38:	f7fd f96d 	bl	8011116 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 8013e3c:	bf00      	nop
 8013e3e:	3710      	adds	r7, #16
 8013e40:	46bd      	mov	sp, r7
 8013e42:	bd80      	pop	{r7, pc}

08013e44 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8013e44:	b580      	push	{r7, lr}
 8013e46:	b082      	sub	sp, #8
 8013e48:	af00      	add	r7, sp, #0
 8013e4a:	6078      	str	r0, [r7, #4]
 8013e4c:	4a05      	ldr	r2, [pc, #20]	; (8013e64 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	601a      	str	r2, [r3, #0]
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	4618      	mov	r0, r3
 8013e56:	f7fd f8db 	bl	8011010 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	4618      	mov	r0, r3
 8013e5e:	3708      	adds	r7, #8
 8013e60:	46bd      	mov	sp, r7
 8013e62:	bd80      	pop	{r7, pc}
 8013e64:	08029f84 	.word	0x08029f84

08013e68 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8013e68:	b580      	push	{r7, lr}
 8013e6a:	b082      	sub	sp, #8
 8013e6c:	af00      	add	r7, sp, #0
 8013e6e:	6078      	str	r0, [r7, #4]
 8013e70:	6878      	ldr	r0, [r7, #4]
 8013e72:	f7ff ffe7 	bl	8013e44 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8013e76:	2138      	movs	r1, #56	; 0x38
 8013e78:	6878      	ldr	r0, [r7, #4]
 8013e7a:	f012 fc91 	bl	80267a0 <_ZdlPvj>
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	4618      	mov	r0, r3
 8013e82:	3708      	adds	r7, #8
 8013e84:	46bd      	mov	sp, r7
 8013e86:	bd80      	pop	{r7, pc}

08013e88 <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 8013e88:	b580      	push	{r7, lr}
 8013e8a:	b082      	sub	sp, #8
 8013e8c:	af00      	add	r7, sp, #0
 8013e8e:	6078      	str	r0, [r7, #4]
 8013e90:	4a05      	ldr	r2, [pc, #20]	; (8013ea8 <_ZN8touchgfx4LineD1Ev+0x20>)
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	601a      	str	r2, [r3, #0]
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	4618      	mov	r0, r3
 8013e9a:	f004 fd85 	bl	80189a8 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	4618      	mov	r0, r3
 8013ea2:	3708      	adds	r7, #8
 8013ea4:	46bd      	mov	sp, r7
 8013ea6:	bd80      	pop	{r7, pc}
 8013ea8:	08029d30 	.word	0x08029d30

08013eac <_ZN8touchgfx4LineD0Ev>:
 8013eac:	b580      	push	{r7, lr}
 8013eae:	b082      	sub	sp, #8
 8013eb0:	af00      	add	r7, sp, #0
 8013eb2:	6078      	str	r0, [r7, #4]
 8013eb4:	6878      	ldr	r0, [r7, #4]
 8013eb6:	f7ff ffe7 	bl	8013e88 <_ZN8touchgfx4LineD1Ev>
 8013eba:	2174      	movs	r1, #116	; 0x74
 8013ebc:	6878      	ldr	r0, [r7, #4]
 8013ebe:	f012 fc6f 	bl	80267a0 <_ZdlPvj>
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	4618      	mov	r0, r3
 8013ec6:	3708      	adds	r7, #8
 8013ec8:	46bd      	mov	sp, r7
 8013eca:	bd80      	pop	{r7, pc}

08013ecc <_ZN8touchgfx13PainterRGB888D1Ev>:
 *        The PainterRGB888 class allows a shape to be filled with a given color and alpha
 *        value. This allows transparent, anti-aliased elements to be drawn.
 *
 * @see AbstractPainter
 */
class PainterRGB888 : public AbstractPainterRGB888
 8013ecc:	b580      	push	{r7, lr}
 8013ece:	b082      	sub	sp, #8
 8013ed0:	af00      	add	r7, sp, #0
 8013ed2:	6078      	str	r0, [r7, #4]
 8013ed4:	4a05      	ldr	r2, [pc, #20]	; (8013eec <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	601a      	str	r2, [r3, #0]
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	4618      	mov	r0, r3
 8013ede:	f7fd f93d 	bl	801115c <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	3708      	adds	r7, #8
 8013ee8:	46bd      	mov	sp, r7
 8013eea:	bd80      	pop	{r7, pc}
 8013eec:	08029a34 	.word	0x08029a34

08013ef0 <_ZN8touchgfx13PainterRGB888D0Ev>:
 8013ef0:	b580      	push	{r7, lr}
 8013ef2:	b082      	sub	sp, #8
 8013ef4:	af00      	add	r7, sp, #0
 8013ef6:	6078      	str	r0, [r7, #4]
 8013ef8:	6878      	ldr	r0, [r7, #4]
 8013efa:	f7ff ffe7 	bl	8013ecc <_ZN8touchgfx13PainterRGB888D1Ev>
 8013efe:	2118      	movs	r1, #24
 8013f00:	6878      	ldr	r0, [r7, #4]
 8013f02:	f012 fc4d 	bl	80267a0 <_ZdlPvj>
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	4618      	mov	r0, r3
 8013f0a:	3708      	adds	r7, #8
 8013f0c:	46bd      	mov	sp, r7
 8013f0e:	bd80      	pop	{r7, pc}

08013f10 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8013f10:	b480      	push	{r7}
 8013f12:	af00      	add	r7, sp, #0
    return bitmap_database;
 8013f14:	4b02      	ldr	r3, [pc, #8]	; (8013f20 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8013f16:	4618      	mov	r0, r3
 8013f18:	46bd      	mov	sp, r7
 8013f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f1e:	4770      	bx	lr
 8013f20:	080285f4 	.word	0x080285f4

08013f24 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8013f24:	b480      	push	{r7}
 8013f26:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8013f28:	2303      	movs	r3, #3
}
 8013f2a:	4618      	mov	r0, r3
 8013f2c:	46bd      	mov	sp, r7
 8013f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f32:	4770      	bx	lr

08013f34 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8013f34:	b480      	push	{r7}
 8013f36:	b085      	sub	sp, #20
 8013f38:	af00      	add	r7, sp, #0
 8013f3a:	60f8      	str	r0, [r7, #12]
 8013f3c:	60b9      	str	r1, [r7, #8]
 8013f3e:	4613      	mov	r3, r2
 8013f40:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8013f42:	4a07      	ldr	r2, [pc, #28]	; (8013f60 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8013f44:	68fb      	ldr	r3, [r7, #12]
 8013f46:	6013      	str	r3, [r2, #0]
        fonts = f;
 8013f48:	4a06      	ldr	r2, [pc, #24]	; (8013f64 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8013f4a:	68bb      	ldr	r3, [r7, #8]
 8013f4c:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8013f4e:	4a06      	ldr	r2, [pc, #24]	; (8013f68 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8013f50:	88fb      	ldrh	r3, [r7, #6]
 8013f52:	8013      	strh	r3, [r2, #0]
    }
 8013f54:	bf00      	nop
 8013f56:	3714      	adds	r7, #20
 8013f58:	46bd      	mov	sp, r7
 8013f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f5e:	4770      	bx	lr
 8013f60:	2000c71c 	.word	0x2000c71c
 8013f64:	2000c724 	.word	0x2000c724
 8013f68:	2000c720 	.word	0x2000c720

08013f6c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8013f6c:	b590      	push	{r4, r7, lr}
 8013f6e:	b085      	sub	sp, #20
 8013f70:	af00      	add	r7, sp, #0
 8013f72:	4603      	mov	r3, r0
 8013f74:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8013f76:	2300      	movs	r3, #0
 8013f78:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8013f7a:	88fb      	ldrh	r3, [r7, #6]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d127      	bne.n	8013fd0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8013f80:	88fb      	ldrh	r3, [r7, #6]
 8013f82:	4a1e      	ldr	r2, [pc, #120]	; (8013ffc <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8013f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d016      	beq.n	8013fba <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8013f8c:	88fb      	ldrh	r3, [r7, #6]
 8013f8e:	4a1b      	ldr	r2, [pc, #108]	; (8013ffc <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8013f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013f94:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8013f96:	68bb      	ldr	r3, [r7, #8]
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	68ba      	ldr	r2, [r7, #8]
 8013f9c:	4413      	add	r3, r2
 8013f9e:	4a18      	ldr	r2, [pc, #96]	; (8014000 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8013fa0:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8013fa2:	68bb      	ldr	r3, [r7, #8]
 8013fa4:	685b      	ldr	r3, [r3, #4]
 8013fa6:	68ba      	ldr	r2, [r7, #8]
 8013fa8:	4413      	add	r3, r2
 8013faa:	4a16      	ldr	r2, [pc, #88]	; (8014004 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8013fac:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8013fae:	68bb      	ldr	r3, [r7, #8]
 8013fb0:	689b      	ldr	r3, [r3, #8]
 8013fb2:	68ba      	ldr	r2, [r7, #8]
 8013fb4:	4413      	add	r3, r2
 8013fb6:	60fb      	str	r3, [r7, #12]
 8013fb8:	e00a      	b.n	8013fd0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8013fba:	4b11      	ldr	r3, [pc, #68]	; (8014000 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8013fbc:	4a12      	ldr	r2, [pc, #72]	; (8014008 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8013fbe:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8013fc0:	4a12      	ldr	r2, [pc, #72]	; (801400c <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8013fc2:	4b10      	ldr	r3, [pc, #64]	; (8014004 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8013fc4:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8013fc6:	88fb      	ldrh	r3, [r7, #6]
 8013fc8:	4a11      	ldr	r2, [pc, #68]	; (8014010 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8013fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013fce:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d00d      	beq.n	8013ff2 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8013fd6:	4a0f      	ldr	r2, [pc, #60]	; (8014014 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8013fd8:	88fb      	ldrh	r3, [r7, #6]
 8013fda:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8013fdc:	f000 f83e 	bl	801405c <_ZN17TypedTextDatabase8getFontsEv>
 8013fe0:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8013fe2:	f000 f833 	bl	801404c <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8013fe6:	4603      	mov	r3, r0
 8013fe8:	461a      	mov	r2, r3
 8013fea:	4621      	mov	r1, r4
 8013fec:	68f8      	ldr	r0, [r7, #12]
 8013fee:	f7ff ffa1 	bl	8013f34 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8013ff2:	bf00      	nop
 8013ff4:	3714      	adds	r7, #20
 8013ff6:	46bd      	mov	sp, r7
 8013ff8:	bd90      	pop	{r4, r7, pc}
 8013ffa:	bf00      	nop
 8013ffc:	20008e00 	.word	0x20008e00
 8014000:	20008e08 	.word	0x20008e08
 8014004:	20008e0c 	.word	0x20008e0c
 8014008:	080633c0 	.word	0x080633c0
 801400c:	080632c4 	.word	0x080632c4
 8014010:	08063500 	.word	0x08063500
 8014014:	20008e04 	.word	0x20008e04

08014018 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8014018:	b480      	push	{r7}
 801401a:	b083      	sub	sp, #12
 801401c:	af00      	add	r7, sp, #0
 801401e:	6078      	str	r0, [r7, #4]
 8014020:	460b      	mov	r3, r1
 8014022:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8014024:	4b07      	ldr	r3, [pc, #28]	; (8014044 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8014026:	681a      	ldr	r2, [r3, #0]
 8014028:	4b07      	ldr	r3, [pc, #28]	; (8014048 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 801402a:	6819      	ldr	r1, [r3, #0]
 801402c:	887b      	ldrh	r3, [r7, #2]
 801402e:	009b      	lsls	r3, r3, #2
 8014030:	440b      	add	r3, r1
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	005b      	lsls	r3, r3, #1
 8014036:	4413      	add	r3, r2
}
 8014038:	4618      	mov	r0, r3
 801403a:	370c      	adds	r7, #12
 801403c:	46bd      	mov	sp, r7
 801403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014042:	4770      	bx	lr
 8014044:	20008e08 	.word	0x20008e08
 8014048:	20008e0c 	.word	0x20008e0c

0801404c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 801404c:	b480      	push	{r7}
 801404e:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8014050:	233f      	movs	r3, #63	; 0x3f
}
 8014052:	4618      	mov	r0, r3
 8014054:	46bd      	mov	sp, r7
 8014056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801405a:	4770      	bx	lr

0801405c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 801405c:	b480      	push	{r7}
 801405e:	af00      	add	r7, sp, #0
    return _fonts;
 8014060:	4b02      	ldr	r3, [pc, #8]	; (801406c <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8014062:	4618      	mov	r0, r3
 8014064:	46bd      	mov	sp, r7
 8014066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801406a:	4770      	bx	lr
 801406c:	20008e10 	.word	0x20008e10

08014070 <_Z41__static_initialization_and_destruction_0ii>:
    case 6:
        _fonts[6] = &(getFont_Asap_Bold_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 8014070:	b580      	push	{r7, lr}
 8014072:	b082      	sub	sp, #8
 8014074:	af00      	add	r7, sp, #0
 8014076:	6078      	str	r0, [r7, #4]
 8014078:	6039      	str	r1, [r7, #0]
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	2b01      	cmp	r3, #1
 801407e:	d127      	bne.n	80140d0 <_Z41__static_initialization_and_destruction_0ii+0x60>
 8014080:	683b      	ldr	r3, [r7, #0]
 8014082:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014086:	4293      	cmp	r3, r2
 8014088:	d122      	bne.n	80140d0 <_Z41__static_initialization_and_destruction_0ii+0x60>
    &(getFont_Asap_Bold_14_4bpp()),
 801408a:	f7fb fcf9 	bl	800fa80 <_Z25getFont_Asap_Bold_14_4bppv>
 801408e:	4603      	mov	r3, r0
};
 8014090:	4a11      	ldr	r2, [pc, #68]	; (80140d8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8014092:	6013      	str	r3, [r2, #0]
    &(getFont_Asap_Bold_40_4bpp()),
 8014094:	f7fb fdf0 	bl	800fc78 <_Z25getFont_Asap_Bold_40_4bppv>
 8014098:	4603      	mov	r3, r0
};
 801409a:	4a0f      	ldr	r2, [pc, #60]	; (80140d8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 801409c:	6053      	str	r3, [r2, #4]
    &(getFont_Asap_Bold_30_4bpp()),
 801409e:	f7fb fd97 	bl	800fbd0 <_Z25getFont_Asap_Bold_30_4bppv>
 80140a2:	4603      	mov	r3, r0
};
 80140a4:	4a0c      	ldr	r2, [pc, #48]	; (80140d8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80140a6:	6093      	str	r3, [r2, #8]
    &(getFont_Asap_Bold_12_4bpp()),
 80140a8:	f7fb fc96 	bl	800f9d8 <_Z25getFont_Asap_Bold_12_4bppv>
 80140ac:	4603      	mov	r3, r0
};
 80140ae:	4a0a      	ldr	r2, [pc, #40]	; (80140d8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80140b0:	60d3      	str	r3, [r2, #12]
    &(getFont_Asap_Bold_60_4bpp()),
 80140b2:	f7fb fe35 	bl	800fd20 <_Z25getFont_Asap_Bold_60_4bppv>
 80140b6:	4603      	mov	r3, r0
};
 80140b8:	4a07      	ldr	r2, [pc, #28]	; (80140d8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80140ba:	6113      	str	r3, [r2, #16]
    &(getFont_Asap_Bold_21_4bpp()),
 80140bc:	f7fb fd34 	bl	800fb28 <_Z25getFont_Asap_Bold_21_4bppv>
 80140c0:	4603      	mov	r3, r0
};
 80140c2:	4a05      	ldr	r2, [pc, #20]	; (80140d8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80140c4:	6153      	str	r3, [r2, #20]
    &(getFont_Asap_Bold_10_4bpp())
 80140c6:	f7fb fc33 	bl	800f930 <_Z25getFont_Asap_Bold_10_4bppv>
 80140ca:	4603      	mov	r3, r0
};
 80140cc:	4a02      	ldr	r2, [pc, #8]	; (80140d8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80140ce:	6193      	str	r3, [r2, #24]
}  // namespace TypedTextDatabase
 80140d0:	bf00      	nop
 80140d2:	3708      	adds	r7, #8
 80140d4:	46bd      	mov	sp, r7
 80140d6:	bd80      	pop	{r7, pc}
 80140d8:	20008e10 	.word	0x20008e10

080140dc <_GLOBAL__sub_I__fonts>:
 80140dc:	b580      	push	{r7, lr}
 80140de:	af00      	add	r7, sp, #0
 80140e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80140e4:	2001      	movs	r0, #1
 80140e6:	f7ff ffc3 	bl	8014070 <_Z41__static_initialization_and_destruction_0ii>
 80140ea:	bd80      	pop	{r7, pc}

080140ec <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80140ec:	b580      	push	{r7, lr}
 80140ee:	b082      	sub	sp, #8
 80140f0:	af00      	add	r7, sp, #0
 80140f2:	6078      	str	r0, [r7, #4]
 80140f4:	4a05      	ldr	r2, [pc, #20]	; (801410c <_ZN19FrontendApplicationD1Ev+0x20>)
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	601a      	str	r2, [r3, #0]
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	4618      	mov	r0, r3
 80140fe:	f7fc f8b1 	bl	8010264 <_ZN23FrontendApplicationBaseD1Ev>
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	4618      	mov	r0, r3
 8014106:	3708      	adds	r7, #8
 8014108:	46bd      	mov	sp, r7
 801410a:	bd80      	pop	{r7, pc}
 801410c:	08028638 	.word	0x08028638

08014110 <_ZN19FrontendApplicationD0Ev>:
 8014110:	b580      	push	{r7, lr}
 8014112:	b082      	sub	sp, #8
 8014114:	af00      	add	r7, sp, #0
 8014116:	6078      	str	r0, [r7, #4]
 8014118:	6878      	ldr	r0, [r7, #4]
 801411a:	f7ff ffe7 	bl	80140ec <_ZN19FrontendApplicationD1Ev>
 801411e:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8014122:	6878      	ldr	r0, [r7, #4]
 8014124:	f012 fb3c 	bl	80267a0 <_ZdlPvj>
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	4618      	mov	r0, r3
 801412c:	3708      	adds	r7, #8
 801412e:	46bd      	mov	sp, r7
 8014130:	bd80      	pop	{r7, pc}

08014132 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8014132:	b580      	push	{r7, lr}
 8014134:	b082      	sub	sp, #8
 8014136:	af00      	add	r7, sp, #0
 8014138:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8014140:	4618      	mov	r0, r3
 8014142:	f000 fe85 	bl	8014e50 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	4618      	mov	r0, r3
 801414a:	f006 fa7d 	bl	801a648 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 801414e:	bf00      	nop
 8014150:	3708      	adds	r7, #8
 8014152:	46bd      	mov	sp, r7
 8014154:	bd80      	pop	{r7, pc}
	...

08014158 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8014158:	b580      	push	{r7, lr}
 801415a:	b084      	sub	sp, #16
 801415c:	af00      	add	r7, sp, #0
 801415e:	60f8      	str	r0, [r7, #12]
 8014160:	60b9      	str	r1, [r7, #8]
 8014162:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	687a      	ldr	r2, [r7, #4]
 8014168:	68b9      	ldr	r1, [r7, #8]
 801416a:	4618      	mov	r0, r3
 801416c:	f7fc f8f4 	bl	8010358 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8014170:	4a03      	ldr	r2, [pc, #12]	; (8014180 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	601a      	str	r2, [r3, #0]
{
}
 8014176:	68fb      	ldr	r3, [r7, #12]
 8014178:	4618      	mov	r0, r3
 801417a:	3710      	adds	r7, #16
 801417c:	46bd      	mov	sp, r7
 801417e:	bd80      	pop	{r7, pc}
 8014180:	08028638 	.word	0x08028638

08014184 <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8014184:	b480      	push	{r7}
 8014186:	b083      	sub	sp, #12
 8014188:	af00      	add	r7, sp, #0
 801418a:	6078      	str	r0, [r7, #4]
    {
    }
 801418c:	bf00      	nop
 801418e:	370c      	adds	r7, #12
 8014190:	46bd      	mov	sp, r7
 8014192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014196:	4770      	bx	lr

08014198 <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8014198:	b480      	push	{r7}
 801419a:	b083      	sub	sp, #12
 801419c:	af00      	add	r7, sp, #0
 801419e:	6078      	str	r0, [r7, #4]
    {
    }
 80141a0:	bf00      	nop
 80141a2:	370c      	adds	r7, #12
 80141a4:	46bd      	mov	sp, r7
 80141a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141aa:	4770      	bx	lr

080141ac <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 80141ac:	b480      	push	{r7}
 80141ae:	b083      	sub	sp, #12
 80141b0:	af00      	add	r7, sp, #0
 80141b2:	6078      	str	r0, [r7, #4]
    {
 80141b4:	4a04      	ldr	r2, [pc, #16]	; (80141c8 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	601a      	str	r2, [r3, #0]
    }
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	4618      	mov	r0, r3
 80141be:	370c      	adds	r7, #12
 80141c0:	46bd      	mov	sp, r7
 80141c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141c6:	4770      	bx	lr
 80141c8:	080286c4 	.word	0x080286c4

080141cc <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 80141cc:	b580      	push	{r7, lr}
 80141ce:	b082      	sub	sp, #8
 80141d0:	af00      	add	r7, sp, #0
 80141d2:	6078      	str	r0, [r7, #4]
    }
 80141d4:	6878      	ldr	r0, [r7, #4]
 80141d6:	f7ff ffe9 	bl	80141ac <_ZN8touchgfx9PresenterD1Ev>
 80141da:	2104      	movs	r1, #4
 80141dc:	6878      	ldr	r0, [r7, #4]
 80141de:	f012 fadf 	bl	80267a0 <_ZdlPvj>
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	4618      	mov	r0, r3
 80141e6:	3708      	adds	r7, #8
 80141e8:	46bd      	mov	sp, r7
 80141ea:	bd80      	pop	{r7, pc}

080141ec <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 80141ec:	b480      	push	{r7}
 80141ee:	b083      	sub	sp, #12
 80141f0:	af00      	add	r7, sp, #0
 80141f2:	6078      	str	r0, [r7, #4]
    {
 80141f4:	4a04      	ldr	r2, [pc, #16]	; (8014208 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	601a      	str	r2, [r3, #0]
    }
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	4618      	mov	r0, r3
 80141fe:	370c      	adds	r7, #12
 8014200:	46bd      	mov	sp, r7
 8014202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014206:	4770      	bx	lr
 8014208:	080286c4 	.word	0x080286c4

0801420c <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 801420c:	b480      	push	{r7}
 801420e:	b083      	sub	sp, #12
 8014210:	af00      	add	r7, sp, #0
 8014212:	6078      	str	r0, [r7, #4]
 8014214:	4a06      	ldr	r2, [pc, #24]	; (8014230 <_ZN13ModelListenerC1Ev+0x24>)
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	601a      	str	r2, [r3, #0]
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	2200      	movs	r2, #0
 801421e:	605a      	str	r2, [r3, #4]
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	4618      	mov	r0, r3
 8014224:	370c      	adds	r7, #12
 8014226:	46bd      	mov	sp, r7
 8014228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801422c:	4770      	bx	lr
 801422e:	bf00      	nop
 8014230:	080286ac 	.word	0x080286ac

08014234 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8014234:	b480      	push	{r7}
 8014236:	b083      	sub	sp, #12
 8014238:	af00      	add	r7, sp, #0
 801423a:	6078      	str	r0, [r7, #4]
 801423c:	4a04      	ldr	r2, [pc, #16]	; (8014250 <_ZN13ModelListenerD1Ev+0x1c>)
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	601a      	str	r2, [r3, #0]
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	4618      	mov	r0, r3
 8014246:	370c      	adds	r7, #12
 8014248:	46bd      	mov	sp, r7
 801424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801424e:	4770      	bx	lr
 8014250:	080286ac 	.word	0x080286ac

08014254 <_ZN13ModelListenerD0Ev>:
 8014254:	b580      	push	{r7, lr}
 8014256:	b082      	sub	sp, #8
 8014258:	af00      	add	r7, sp, #0
 801425a:	6078      	str	r0, [r7, #4]
 801425c:	6878      	ldr	r0, [r7, #4]
 801425e:	f7ff ffe9 	bl	8014234 <_ZN13ModelListenerD1Ev>
 8014262:	2108      	movs	r1, #8
 8014264:	6878      	ldr	r0, [r7, #4]
 8014266:	f012 fa9b 	bl	80267a0 <_ZdlPvj>
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	4618      	mov	r0, r3
 801426e:	3708      	adds	r7, #8
 8014270:	46bd      	mov	sp, r7
 8014272:	bd80      	pop	{r7, pc}

08014274 <_ZN13ModelListener11setNewValueEPh>:

    virtual void setNewValue(uint8_t* newValue){}
 8014274:	b480      	push	{r7}
 8014276:	b083      	sub	sp, #12
 8014278:	af00      	add	r7, sp, #0
 801427a:	6078      	str	r0, [r7, #4]
 801427c:	6039      	str	r1, [r7, #0]
 801427e:	bf00      	nop
 8014280:	370c      	adds	r7, #12
 8014282:	46bd      	mov	sp, r7
 8014284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014288:	4770      	bx	lr

0801428a <_ZN13ModelListener21updateDisplaySettingsEPh>:
    virtual void updateDisplaySettings(uint8_t* settings){}
 801428a:	b480      	push	{r7}
 801428c:	b083      	sub	sp, #12
 801428e:	af00      	add	r7, sp, #0
 8014290:	6078      	str	r0, [r7, #4]
 8014292:	6039      	str	r1, [r7, #0]
 8014294:	bf00      	nop
 8014296:	370c      	adds	r7, #12
 8014298:	46bd      	mov	sp, r7
 801429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801429e:	4770      	bx	lr

080142a0 <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 80142a0:	b580      	push	{r7, lr}
 80142a2:	b082      	sub	sp, #8
 80142a4:	af00      	add	r7, sp, #0
 80142a6:	6078      	str	r0, [r7, #4]
 80142a8:	4a09      	ldr	r2, [pc, #36]	; (80142d0 <_ZN13MainPresenterD1Ev+0x30>)
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	601a      	str	r2, [r3, #0]
 80142ae:	4a09      	ldr	r2, [pc, #36]	; (80142d4 <_ZN13MainPresenterD1Ev+0x34>)
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	605a      	str	r2, [r3, #4]
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	3304      	adds	r3, #4
 80142b8:	4618      	mov	r0, r3
 80142ba:	f7ff ffbb 	bl	8014234 <_ZN13ModelListenerD1Ev>
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	4618      	mov	r0, r3
 80142c2:	f7ff ff73 	bl	80141ac <_ZN8touchgfx9PresenterD1Ev>
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	4618      	mov	r0, r3
 80142ca:	3708      	adds	r7, #8
 80142cc:	46bd      	mov	sp, r7
 80142ce:	bd80      	pop	{r7, pc}
 80142d0:	08028674 	.word	0x08028674
 80142d4:	08028694 	.word	0x08028694

080142d8 <_ZThn4_N13MainPresenterD1Ev>:
 80142d8:	f1a0 0004 	sub.w	r0, r0, #4
 80142dc:	e7e0      	b.n	80142a0 <_ZN13MainPresenterD1Ev>
 80142de:	bf00      	nop

080142e0 <_ZN13MainPresenterD0Ev>:
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b082      	sub	sp, #8
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	6078      	str	r0, [r7, #4]
 80142e8:	6878      	ldr	r0, [r7, #4]
 80142ea:	f7ff ffd9 	bl	80142a0 <_ZN13MainPresenterD1Ev>
 80142ee:	2110      	movs	r1, #16
 80142f0:	6878      	ldr	r0, [r7, #4]
 80142f2:	f012 fa55 	bl	80267a0 <_ZdlPvj>
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	4618      	mov	r0, r3
 80142fa:	3708      	adds	r7, #8
 80142fc:	46bd      	mov	sp, r7
 80142fe:	bd80      	pop	{r7, pc}

08014300 <_ZThn4_N13MainPresenterD0Ev>:
 8014300:	f1a0 0004 	sub.w	r0, r0, #4
 8014304:	e7ec      	b.n	80142e0 <_ZN13MainPresenterD0Ev>
	...

08014308 <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 8014308:	b580      	push	{r7, lr}
 801430a:	b082      	sub	sp, #8
 801430c:	af00      	add	r7, sp, #0
 801430e:	6078      	str	r0, [r7, #4]
 8014310:	6039      	str	r1, [r7, #0]
    : view(v)
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	4618      	mov	r0, r3
 8014316:	f7ff ff69 	bl	80141ec <_ZN8touchgfx9PresenterC1Ev>
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	3304      	adds	r3, #4
 801431e:	4618      	mov	r0, r3
 8014320:	f7ff ff74 	bl	801420c <_ZN13ModelListenerC1Ev>
 8014324:	4a06      	ldr	r2, [pc, #24]	; (8014340 <_ZN13MainPresenterC1ER8MainView+0x38>)
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	601a      	str	r2, [r3, #0]
 801432a:	4a06      	ldr	r2, [pc, #24]	; (8014344 <_ZN13MainPresenterC1ER8MainView+0x3c>)
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	605a      	str	r2, [r3, #4]
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	683a      	ldr	r2, [r7, #0]
 8014334:	60da      	str	r2, [r3, #12]
{
}
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	4618      	mov	r0, r3
 801433a:	3708      	adds	r7, #8
 801433c:	46bd      	mov	sp, r7
 801433e:	bd80      	pop	{r7, pc}
 8014340:	08028674 	.word	0x08028674
 8014344:	08028694 	.word	0x08028694

08014348 <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 8014348:	b480      	push	{r7}
 801434a:	b083      	sub	sp, #12
 801434c:	af00      	add	r7, sp, #0
 801434e:	6078      	str	r0, [r7, #4]
}
 8014350:	bf00      	nop
 8014352:	370c      	adds	r7, #12
 8014354:	46bd      	mov	sp, r7
 8014356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801435a:	4770      	bx	lr

0801435c <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 801435c:	b480      	push	{r7}
 801435e:	b083      	sub	sp, #12
 8014360:	af00      	add	r7, sp, #0
 8014362:	6078      	str	r0, [r7, #4]
}
 8014364:	bf00      	nop
 8014366:	370c      	adds	r7, #12
 8014368:	46bd      	mov	sp, r7
 801436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801436e:	4770      	bx	lr

08014370 <_ZN13MainPresenter11setNewValueEPh>:

void MainPresenter::setNewValue(uint8_t* newValue)
{
 8014370:	b580      	push	{r7, lr}
 8014372:	b082      	sub	sp, #8
 8014374:	af00      	add	r7, sp, #0
 8014376:	6078      	str	r0, [r7, #4]
 8014378:	6039      	str	r1, [r7, #0]
	view.updateVal(newValue);
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	68db      	ldr	r3, [r3, #12]
 801437e:	6839      	ldr	r1, [r7, #0]
 8014380:	4618      	mov	r0, r3
 8014382:	f000 f9f7 	bl	8014774 <_ZN8MainView9updateValEPh>
}
 8014386:	bf00      	nop
 8014388:	3708      	adds	r7, #8
 801438a:	46bd      	mov	sp, r7
 801438c:	bd80      	pop	{r7, pc}

0801438e <_ZThn4_N13MainPresenter11setNewValueEPh>:

    void setNewValue(uint8_t* newValue);
 801438e:	f1a0 0004 	sub.w	r0, r0, #4
 8014392:	f7ff bfed 	b.w	8014370 <_ZN13MainPresenter11setNewValueEPh>

08014396 <_ZN13MainPresenter21updateDisplaySettingsEPh>:

void MainPresenter::updateDisplaySettings(uint8_t* settings)
{
 8014396:	b580      	push	{r7, lr}
 8014398:	b082      	sub	sp, #8
 801439a:	af00      	add	r7, sp, #0
 801439c:	6078      	str	r0, [r7, #4]
 801439e:	6039      	str	r1, [r7, #0]
	view.updateSettings(settings);
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	68db      	ldr	r3, [r3, #12]
 80143a4:	6839      	ldr	r1, [r7, #0]
 80143a6:	4618      	mov	r0, r3
 80143a8:	f000 f908 	bl	80145bc <_ZN8MainView14updateSettingsEPh>
}
 80143ac:	bf00      	nop
 80143ae:	3708      	adds	r7, #8
 80143b0:	46bd      	mov	sp, r7
 80143b2:	bd80      	pop	{r7, pc}

080143b4 <_ZThn4_N13MainPresenter21updateDisplaySettingsEPh>:
    void updateDisplaySettings(uint8_t* settings);
 80143b4:	f1a0 0004 	sub.w	r0, r0, #4
 80143b8:	f7ff bfed 	b.w	8014396 <_ZN13MainPresenter21updateDisplaySettingsEPh>

080143bc <_ZN8touchgfx9colortypeC1Ev>:
    colortype() : color(0) {}
 80143bc:	b480      	push	{r7}
 80143be:	b083      	sub	sp, #12
 80143c0:	af00      	add	r7, sp, #0
 80143c2:	6078      	str	r0, [r7, #4]
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	2200      	movs	r2, #0
 80143c8:	601a      	str	r2, [r3, #0]
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	4618      	mov	r0, r3
 80143ce:	370c      	adds	r7, #12
 80143d0:	46bd      	mov	sp, r7
 80143d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143d6:	4770      	bx	lr

080143d8 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>:
     *          touchgfx::Unicode::snprintfFloats(dst, dstSize, tmpfmt, values);
     *          \endcode
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
 80143d8:	b580      	push	{r7, lr}
 80143da:	b084      	sub	sp, #16
 80143dc:	af00      	add	r7, sp, #0
 80143de:	60f8      	str	r0, [r7, #12]
 80143e0:	460b      	mov	r3, r1
 80143e2:	607a      	str	r2, [r7, #4]
 80143e4:	ed87 0a00 	vstr	s0, [r7]
 80143e8:	817b      	strh	r3, [r7, #10]
    {
        return snprintfFloats(dst, dstSize, format, &value);
 80143ea:	463b      	mov	r3, r7
 80143ec:	8979      	ldrh	r1, [r7, #10]
 80143ee:	687a      	ldr	r2, [r7, #4]
 80143f0:	68f8      	ldr	r0, [r7, #12]
 80143f2:	f008 fbc5 	bl	801cb80 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
 80143f6:	4603      	mov	r3, r0
    }
 80143f8:	4618      	mov	r0, r3
 80143fa:	3710      	adds	r7, #16
 80143fc:	46bd      	mov	sp, r7
 80143fe:	bd80      	pop	{r7, pc}

08014400 <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 8014400:	b480      	push	{r7}
 8014402:	b083      	sub	sp, #12
 8014404:	af00      	add	r7, sp, #0
 8014406:	6078      	str	r0, [r7, #4]
        return rect.width;
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 801440e:	4618      	mov	r0, r3
 8014410:	370c      	adds	r7, #12
 8014412:	46bd      	mov	sp, r7
 8014414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014418:	4770      	bx	lr

0801441a <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 801441a:	b480      	push	{r7}
 801441c:	b083      	sub	sp, #12
 801441e:	af00      	add	r7, sp, #0
 8014420:	6078      	str	r0, [r7, #4]
        return rect.height;
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 8014428:	4618      	mov	r0, r3
 801442a:	370c      	adds	r7, #12
 801442c:	46bd      	mov	sp, r7
 801442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014432:	4770      	bx	lr

08014434 <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 8014434:	b580      	push	{r7, lr}
 8014436:	b082      	sub	sp, #8
 8014438:	af00      	add	r7, sp, #0
 801443a:	6078      	str	r0, [r7, #4]
 801443c:	4a05      	ldr	r2, [pc, #20]	; (8014454 <_ZN8MainViewD1Ev+0x20>)
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	601a      	str	r2, [r3, #0]
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	4618      	mov	r0, r3
 8014446:	f7fc feef 	bl	8011228 <_ZN12MainViewBaseD1Ev>
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	4618      	mov	r0, r3
 801444e:	3708      	adds	r7, #8
 8014450:	46bd      	mov	sp, r7
 8014452:	bd80      	pop	{r7, pc}
 8014454:	080286dc 	.word	0x080286dc

08014458 <_ZN8MainViewD0Ev>:
 8014458:	b580      	push	{r7, lr}
 801445a:	b082      	sub	sp, #8
 801445c:	af00      	add	r7, sp, #0
 801445e:	6078      	str	r0, [r7, #4]
 8014460:	6878      	ldr	r0, [r7, #4]
 8014462:	f7ff ffe7 	bl	8014434 <_ZN8MainViewD1Ev>
 8014466:	f642 01f8 	movw	r1, #10488	; 0x28f8
 801446a:	6878      	ldr	r0, [r7, #4]
 801446c:	f012 f998 	bl	80267a0 <_ZdlPvj>
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	4618      	mov	r0, r3
 8014474:	3708      	adds	r7, #8
 8014476:	46bd      	mov	sp, r7
 8014478:	bd80      	pop	{r7, pc}
	...

0801447c <_ZN8MainViewC1Ev>:

static bool prev_mil_indicator = true;
static bool prev_oil_indicator = true;
static bool prev_bat_indicator = true;

MainView::MainView()
 801447c:	b590      	push	{r4, r7, lr}
 801447e:	b083      	sub	sp, #12
 8014480:	af00      	add	r7, sp, #0
 8014482:	6078      	str	r0, [r7, #4]
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	4618      	mov	r0, r3
 8014488:	f7fd f836 	bl	80114f8 <_ZN12MainViewBaseC1Ev>
 801448c:	4a15      	ldr	r2, [pc, #84]	; (80144e4 <_ZN8MainViewC1Ev+0x68>)
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	601a      	str	r2, [r3, #0]
{
    // Support of larger displays for this example
    // is handled by showing a black box in the
    // unused part of the display.
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 8014492:	4b15      	ldr	r3, [pc, #84]	; (80144e8 <_ZN8MainViewC1Ev+0x6c>)
 8014494:	881b      	ldrh	r3, [r3, #0]
 8014496:	461c      	mov	r4, r3
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 801449e:	4618      	mov	r0, r3
 80144a0:	f7ff ffae 	bl	8014400 <_ZNK8touchgfx8Drawable8getWidthEv>
 80144a4:	4603      	mov	r3, r0
 80144a6:	429c      	cmp	r4, r3
 80144a8:	dc0b      	bgt.n	80144c2 <_ZN8MainViewC1Ev+0x46>
            HAL::DISPLAY_HEIGHT > backgroundImage.getHeight())
 80144aa:	4b10      	ldr	r3, [pc, #64]	; (80144ec <_ZN8MainViewC1Ev+0x70>)
 80144ac:	881b      	ldrh	r3, [r3, #0]
 80144ae:	461c      	mov	r4, r3
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80144b6:	4618      	mov	r0, r3
 80144b8:	f7ff ffaf 	bl	801441a <_ZNK8touchgfx8Drawable9getHeightEv>
 80144bc:	4603      	mov	r3, r0
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 80144be:	429c      	cmp	r4, r3
 80144c0:	dd01      	ble.n	80144c6 <_ZN8MainViewC1Ev+0x4a>
 80144c2:	2301      	movs	r3, #1
 80144c4:	e000      	b.n	80144c8 <_ZN8MainViewC1Ev+0x4c>
 80144c6:	2300      	movs	r3, #0
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d005      	beq.n	80144d8 <_ZN8MainViewC1Ev+0x5c>
    {
        backgroundBox.setVisible(true);
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	3340      	adds	r3, #64	; 0x40
 80144d0:	2101      	movs	r1, #1
 80144d2:	4618      	mov	r0, r3
 80144d4:	f7fc fae6 	bl	8010aa4 <_ZN8touchgfx8Drawable10setVisibleEb>
    }
}
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	4618      	mov	r0, r3
 80144dc:	370c      	adds	r7, #12
 80144de:	46bd      	mov	sp, r7
 80144e0:	bd90      	pop	{r4, r7, pc}
 80144e2:	bf00      	nop
 80144e4:	080286dc 	.word	0x080286dc
 80144e8:	2000c680 	.word	0x2000c680
 80144ec:	2000c682 	.word	0x2000c682

080144f0 <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen()
{
 80144f0:	b480      	push	{r7}
 80144f2:	b083      	sub	sp, #12
 80144f4:	af00      	add	r7, sp, #0
 80144f6:	6078      	str	r0, [r7, #4]
}
 80144f8:	bf00      	nop
 80144fa:	370c      	adds	r7, #12
 80144fc:	46bd      	mov	sp, r7
 80144fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014502:	4770      	bx	lr

08014504 <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen()
{
 8014504:	b480      	push	{r7}
 8014506:	b083      	sub	sp, #12
 8014508:	af00      	add	r7, sp, #0
 801450a:	6078      	str	r0, [r7, #4]
}
 801450c:	bf00      	nop
 801450e:	370c      	adds	r7, #12
 8014510:	46bd      	mov	sp, r7
 8014512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014516:	4770      	bx	lr

08014518 <_ZL13getBlackColorv>:

static colortype getBlackColor()
{
 8014518:	b580      	push	{r7, lr}
 801451a:	b082      	sub	sp, #8
 801451c:	af00      	add	r7, sp, #0
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0,0,0);
 801451e:	2200      	movs	r2, #0
 8014520:	2100      	movs	r1, #0
 8014522:	2000      	movs	r0, #0
 8014524:	f7fc ffc0 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014528:	4603      	mov	r3, r0
 801452a:	607b      	str	r3, [r7, #4]
}
 801452c:	bf00      	nop
 801452e:	4618      	mov	r0, r3
 8014530:	3708      	adds	r7, #8
 8014532:	46bd      	mov	sp, r7
 8014534:	bd80      	pop	{r7, pc}
	...

08014538 <_ZL20getColorFromRevLimitv>:

static colortype getColorFromRevLimit()
{
 8014538:	b580      	push	{r7, lr}
 801453a:	b084      	sub	sp, #16
 801453c:	af00      	add	r7, sp, #0

	color_index ++;
 801453e:	4b1e      	ldr	r3, [pc, #120]	; (80145b8 <_ZL20getColorFromRevLimitv+0x80>)
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	3301      	adds	r3, #1
 8014544:	4a1c      	ldr	r2, [pc, #112]	; (80145b8 <_ZL20getColorFromRevLimitv+0x80>)
 8014546:	6013      	str	r3, [r2, #0]
	if(color_index >= 3)
 8014548:	4b1b      	ldr	r3, [pc, #108]	; (80145b8 <_ZL20getColorFromRevLimitv+0x80>)
 801454a:	681b      	ldr	r3, [r3, #0]
 801454c:	2b02      	cmp	r3, #2
 801454e:	dd02      	ble.n	8014556 <_ZL20getColorFromRevLimitv+0x1e>
	{
		color_index = 0;
 8014550:	4b19      	ldr	r3, [pc, #100]	; (80145b8 <_ZL20getColorFromRevLimitv+0x80>)
 8014552:	2200      	movs	r2, #0
 8014554:	601a      	str	r2, [r3, #0]
	}

	colortype red_color = touchgfx::Color::getColorFrom24BitRGB(255,0,0);
 8014556:	2200      	movs	r2, #0
 8014558:	2100      	movs	r1, #0
 801455a:	20ff      	movs	r0, #255	; 0xff
 801455c:	f7fc ffa4 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014560:	4603      	mov	r3, r0
 8014562:	60fb      	str	r3, [r7, #12]
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0,0,0);
 8014564:	2200      	movs	r2, #0
 8014566:	2100      	movs	r1, #0
 8014568:	2000      	movs	r0, #0
 801456a:	f7fc ff9d 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801456e:	4603      	mov	r3, r0
 8014570:	60bb      	str	r3, [r7, #8]
	colortype white_color = touchgfx::Color::getColorFrom24BitRGB(255,255,255);
 8014572:	22ff      	movs	r2, #255	; 0xff
 8014574:	21ff      	movs	r1, #255	; 0xff
 8014576:	20ff      	movs	r0, #255	; 0xff
 8014578:	f7fc ff96 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801457c:	4603      	mov	r3, r0
 801457e:	607b      	str	r3, [r7, #4]

	colortype color_to_set;
 8014580:	463b      	mov	r3, r7
 8014582:	4618      	mov	r0, r3
 8014584:	f7ff ff1a 	bl	80143bc <_ZN8touchgfx9colortypeC1Ev>

	if(color_index == 0)
 8014588:	4b0b      	ldr	r3, [pc, #44]	; (80145b8 <_ZL20getColorFromRevLimitv+0x80>)
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	2b00      	cmp	r3, #0
 801458e:	d101      	bne.n	8014594 <_ZL20getColorFromRevLimitv+0x5c>
	{
		color_to_set = red_color;
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	603b      	str	r3, [r7, #0]
	}
	if(color_index == 1)
 8014594:	4b08      	ldr	r3, [pc, #32]	; (80145b8 <_ZL20getColorFromRevLimitv+0x80>)
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	2b01      	cmp	r3, #1
 801459a:	d101      	bne.n	80145a0 <_ZL20getColorFromRevLimitv+0x68>
	{
		color_to_set = black_color;
 801459c:	68bb      	ldr	r3, [r7, #8]
 801459e:	603b      	str	r3, [r7, #0]
	}
	if(color_index == 2)
 80145a0:	4b05      	ldr	r3, [pc, #20]	; (80145b8 <_ZL20getColorFromRevLimitv+0x80>)
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	2b02      	cmp	r3, #2
 80145a6:	d101      	bne.n	80145ac <_ZL20getColorFromRevLimitv+0x74>
	{
		color_to_set = white_color;
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	603b      	str	r3, [r7, #0]
	}

	return color_to_set;
 80145ac:	683b      	ldr	r3, [r7, #0]
}
 80145ae:	4618      	mov	r0, r3
 80145b0:	3710      	adds	r7, #16
 80145b2:	46bd      	mov	sp, r7
 80145b4:	bd80      	pop	{r7, pc}
 80145b6:	bf00      	nop
 80145b8:	20008e2c 	.word	0x20008e2c

080145bc <_ZN8MainView14updateSettingsEPh>:

void MainView::updateSettings(uint8_t* settings)
{
 80145bc:	b580      	push	{r7, lr}
 80145be:	b086      	sub	sp, #24
 80145c0:	af02      	add	r7, sp, #8
 80145c2:	6078      	str	r0, [r7, #4]
 80145c4:	6039      	str	r1, [r7, #0]
	settings_message* new_settings = (settings_message*) settings;
 80145c6:	683b      	ldr	r3, [r7, #0]
 80145c8:	60fb      	str	r3, [r7, #12]

	rev_limit = (int)new_settings->rpm_limit;
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	4a66      	ldr	r2, [pc, #408]	; (8014768 <_ZN8MainView14updateSettingsEPh+0x1ac>)
 80145d0:	6013      	str	r3, [r2, #0]

	RPMProgressBar.setRange(0, (int)(new_settings->rpm8*1000.0f), 0, 0);
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	f203 707c 	addw	r0, r3, #1916	; 0x77c
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	6a1b      	ldr	r3, [r3, #32]
 80145dc:	ee07 3a90 	vmov	s15, r3
 80145e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80145e4:	ed9f 7a61 	vldr	s14, [pc, #388]	; 801476c <_ZN8MainView14updateSettingsEPh+0x1b0>
 80145e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80145ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80145f0:	ee17 3a90 	vmov	r3, s15
 80145f4:	b21a      	sxth	r2, r3
 80145f6:	2300      	movs	r3, #0
 80145f8:	9300      	str	r3, [sp, #0]
 80145fa:	2300      	movs	r3, #0
 80145fc:	2100      	movs	r1, #0
 80145fe:	f002 fe39 	bl	8017274 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
	RPMProgressBar.invalidate();
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8014608:	4618      	mov	r0, r3
 801460a:	f006 fd31 	bl	801b070 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(rpm1Buffer, RPM1_SIZE, "%d", new_settings->rpm1);
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	f503 6042 	add.w	r0, r3, #3104	; 0xc20
 8014614:	68fb      	ldr	r3, [r7, #12]
 8014616:	685b      	ldr	r3, [r3, #4]
 8014618:	4a55      	ldr	r2, [pc, #340]	; (8014770 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 801461a:	2102      	movs	r1, #2
 801461c:	f008 f956 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm1.resizeToCurrentText();
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014626:	4618      	mov	r0, r3
 8014628:	f004 fd7c 	bl	8019124 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm1.invalidate();
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014632:	4618      	mov	r0, r3
 8014634:	f006 fd1c 	bl	801b070 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm2Buffer, RPM2_SIZE, "%d", new_settings->rpm2);
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	f603 4024 	addw	r0, r3, #3108	; 0xc24
 801463e:	68fb      	ldr	r3, [r7, #12]
 8014640:	689b      	ldr	r3, [r3, #8]
 8014642:	4a4b      	ldr	r2, [pc, #300]	; (8014770 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8014644:	2102      	movs	r1, #2
 8014646:	f008 f941 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm2.resizeToCurrentText();
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8014650:	4618      	mov	r0, r3
 8014652:	f004 fd67 	bl	8019124 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm2.invalidate();
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 801465c:	4618      	mov	r0, r3
 801465e:	f006 fd07 	bl	801b070 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm3Buffer, RPM3_SIZE, "%d", new_settings->rpm3);
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	f603 4028 	addw	r0, r3, #3112	; 0xc28
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	68db      	ldr	r3, [r3, #12]
 801466c:	4a40      	ldr	r2, [pc, #256]	; (8014770 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 801466e:	2102      	movs	r1, #2
 8014670:	f008 f92c 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm3.resizeToCurrentText();
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	f503 7306 	add.w	r3, r3, #536	; 0x218
 801467a:	4618      	mov	r0, r3
 801467c:	f004 fd52 	bl	8019124 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm3.invalidate();
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8014686:	4618      	mov	r0, r3
 8014688:	f006 fcf2 	bl	801b070 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm4Buffer, RPM4_SIZE, "%d", new_settings->rpm4);
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	f603 402c 	addw	r0, r3, #3116	; 0xc2c
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	691b      	ldr	r3, [r3, #16]
 8014696:	4a36      	ldr	r2, [pc, #216]	; (8014770 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8014698:	2102      	movs	r1, #2
 801469a:	f008 f917 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm4.resizeToCurrentText();
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80146a4:	4618      	mov	r0, r3
 80146a6:	f004 fd3d 	bl	8019124 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm4.invalidate();
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80146b0:	4618      	mov	r0, r3
 80146b2:	f006 fcdd 	bl	801b070 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm5Buffer, RPM5_SIZE, "%d", new_settings->rpm5);
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	f503 6043 	add.w	r0, r3, #3120	; 0xc30
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	695b      	ldr	r3, [r3, #20]
 80146c0:	4a2b      	ldr	r2, [pc, #172]	; (8014770 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 80146c2:	2102      	movs	r1, #2
 80146c4:	f008 f902 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm5.resizeToCurrentText();
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80146ce:	4618      	mov	r0, r3
 80146d0:	f004 fd28 	bl	8019124 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm5.invalidate();
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80146da:	4618      	mov	r0, r3
 80146dc:	f006 fcc8 	bl	801b070 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm6Buffer, RPM6_SIZE, "%d", new_settings->rpm6);
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	f603 4034 	addw	r0, r3, #3124	; 0xc34
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	699b      	ldr	r3, [r3, #24]
 80146ea:	4a21      	ldr	r2, [pc, #132]	; (8014770 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 80146ec:	2102      	movs	r1, #2
 80146ee:	f008 f8ed 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm6.resizeToCurrentText();
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80146f8:	4618      	mov	r0, r3
 80146fa:	f004 fd13 	bl	8019124 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm6.invalidate();
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8014704:	4618      	mov	r0, r3
 8014706:	f006 fcb3 	bl	801b070 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm7Buffer, RPM7_SIZE, "%d", new_settings->rpm7);
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	f603 4038 	addw	r0, r3, #3128	; 0xc38
 8014710:	68fb      	ldr	r3, [r7, #12]
 8014712:	69db      	ldr	r3, [r3, #28]
 8014714:	4a16      	ldr	r2, [pc, #88]	; (8014770 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8014716:	2102      	movs	r1, #2
 8014718:	f008 f8d8 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm7.resizeToCurrentText();
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8014722:	4618      	mov	r0, r3
 8014724:	f004 fcfe 	bl	8019124 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm7.invalidate();
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 801472e:	4618      	mov	r0, r3
 8014730:	f006 fc9e 	bl	801b070 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm8Buffer, RPM8_SIZE, "%d", new_settings->rpm8);
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	f603 403c 	addw	r0, r3, #3132	; 0xc3c
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	6a1b      	ldr	r3, [r3, #32]
 801473e:	4a0c      	ldr	r2, [pc, #48]	; (8014770 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8014740:	2102      	movs	r1, #2
 8014742:	f008 f8c3 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm8.resizeToCurrentText();
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	f503 734c 	add.w	r3, r3, #816	; 0x330
 801474c:	4618      	mov	r0, r3
 801474e:	f004 fce9 	bl	8019124 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm8.invalidate();
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8014758:	4618      	mov	r0, r3
 801475a:	f006 fc89 	bl	801b070 <_ZNK8touchgfx8Drawable10invalidateEv>

}
 801475e:	bf00      	nop
 8014760:	3710      	adds	r7, #16
 8014762:	46bd      	mov	sp, r7
 8014764:	bd80      	pop	{r7, pc}
 8014766:	bf00      	nop
 8014768:	20000038 	.word	0x20000038
 801476c:	447a0000 	.word	0x447a0000
 8014770:	080280d0 	.word	0x080280d0

08014774 <_ZN8MainView9updateValEPh>:

void MainView::updateVal(uint8_t* newValue)
{
 8014774:	b590      	push	{r4, r7, lr}
 8014776:	b085      	sub	sp, #20
 8014778:	af00      	add	r7, sp, #0
 801477a:	6078      	str	r0, [r7, #4]
 801477c:	6039      	str	r1, [r7, #0]

	static bool background_is_black = false;
	display_values* values = (display_values*) newValue;
 801477e:	683b      	ldr	r3, [r7, #0]
 8014780:	60fb      	str	r3, [r7, #12]

	bool on_rev_limiter = values->rpm >= rev_limit;
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	681a      	ldr	r2, [r3, #0]
 8014786:	4b4e      	ldr	r3, [pc, #312]	; (80148c0 <_ZN8MainView9updateValEPh+0x14c>)
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	429a      	cmp	r2, r3
 801478c:	bfac      	ite	ge
 801478e:	2301      	movge	r3, #1
 8014790:	2300      	movlt	r3, #0
 8014792:	72fb      	strb	r3, [r7, #11]
	if(on_rev_limiter)
 8014794:	7afb      	ldrb	r3, [r7, #11]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d012      	beq.n	80147c0 <_ZN8MainView9updateValEPh+0x4c>
	{
		background_is_black = false;
 801479a:	4b4a      	ldr	r3, [pc, #296]	; (80148c4 <_ZN8MainView9updateValEPh+0x150>)
 801479c:	2200      	movs	r2, #0
 801479e:	701a      	strb	r2, [r3, #0]
		backgroundBox.setColor(getColorFromRevLimit());
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80147a6:	f7ff fec7 	bl	8014538 <_ZL20getColorFromRevLimitv>
 80147aa:	4603      	mov	r3, r0
 80147ac:	4619      	mov	r1, r3
 80147ae:	4620      	mov	r0, r4
 80147b0:	f7fc fb14 	bl	8010ddc <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	3340      	adds	r3, #64	; 0x40
 80147b8:	4618      	mov	r0, r3
 80147ba:	f006 fc59 	bl	801b070 <_ZNK8touchgfx8Drawable10invalidateEv>
 80147be:	e018      	b.n	80147f2 <_ZN8MainView9updateValEPh+0x7e>
	}
	else if(!background_is_black){
 80147c0:	4b40      	ldr	r3, [pc, #256]	; (80148c4 <_ZN8MainView9updateValEPh+0x150>)
 80147c2:	781b      	ldrb	r3, [r3, #0]
 80147c4:	f083 0301 	eor.w	r3, r3, #1
 80147c8:	b2db      	uxtb	r3, r3
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d011      	beq.n	80147f2 <_ZN8MainView9updateValEPh+0x7e>
		backgroundBox.setColor(getBlackColor());
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80147d4:	f7ff fea0 	bl	8014518 <_ZL13getBlackColorv>
 80147d8:	4603      	mov	r3, r0
 80147da:	4619      	mov	r1, r3
 80147dc:	4620      	mov	r0, r4
 80147de:	f7fc fafd 	bl	8010ddc <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	3340      	adds	r3, #64	; 0x40
 80147e6:	4618      	mov	r0, r3
 80147e8:	f006 fc42 	bl	801b070 <_ZNK8touchgfx8Drawable10invalidateEv>
		background_is_black = true;
 80147ec:	4b35      	ldr	r3, [pc, #212]	; (80148c4 <_ZN8MainView9updateValEPh+0x150>)
 80147ee:	2201      	movs	r2, #1
 80147f0:	701a      	strb	r2, [r3, #0]
	}

	if(values->rpm != prev_rpm) {
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	681a      	ldr	r2, [r3, #0]
 80147f6:	4b34      	ldr	r3, [pc, #208]	; (80148c8 <_ZN8MainView9updateValEPh+0x154>)
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	429a      	cmp	r2, r3
 80147fc:	d021      	beq.n	8014842 <_ZN8MainView9updateValEPh+0xce>
		prev_rpm = values->rpm;
 80147fe:	68fb      	ldr	r3, [r7, #12]
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	4a31      	ldr	r2, [pc, #196]	; (80148c8 <_ZN8MainView9updateValEPh+0x154>)
 8014804:	6013      	str	r3, [r2, #0]
		RPMProgressBar.setValue(values->rpm);
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	f203 727c 	addw	r2, r3, #1916	; 0x77c
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	681b      	ldr	r3, [r3, #0]
 8014810:	4619      	mov	r1, r3
 8014812:	4610      	mov	r0, r2
 8014814:	f002 fc18 	bl	8017048 <_ZN8touchgfx13ImageProgress8setValueEi>
		RPMProgressBar.invalidate();
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 801481e:	4618      	mov	r0, r3
 8014820:	f006 fc26 	bl	801b070 <_ZNK8touchgfx8Drawable10invalidateEv>

		Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%d", values->rpm);
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	f603 4068 	addw	r0, r3, #3176	; 0xc68
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	4a27      	ldr	r2, [pc, #156]	; (80148cc <_ZN8MainView9updateValEPh+0x158>)
 8014830:	2105      	movs	r1, #5
 8014832:	f008 f84b 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		RPMValue.invalidate();
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	f603 036c 	addw	r3, r3, #2156	; 0x86c
 801483c:	4618      	mov	r0, r3
 801483e:	f006 fc17 	bl	801b070 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->max_rpm != prev_max_rpm) {
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	685a      	ldr	r2, [r3, #4]
 8014846:	4b22      	ldr	r3, [pc, #136]	; (80148d0 <_ZN8MainView9updateValEPh+0x15c>)
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	429a      	cmp	r2, r3
 801484c:	d012      	beq.n	8014874 <_ZN8MainView9updateValEPh+0x100>
		prev_max_rpm = values->max_rpm;
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	685b      	ldr	r3, [r3, #4]
 8014852:	4a1f      	ldr	r2, [pc, #124]	; (80148d0 <_ZN8MainView9updateValEPh+0x15c>)
 8014854:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(MaxRPMValueBuffer, MAXRPMVALUE_SIZE, "%d", prev_max_rpm);
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	f603 40ae 	addw	r0, r3, #3246	; 0xcae
 801485c:	4b1c      	ldr	r3, [pc, #112]	; (80148d0 <_ZN8MainView9updateValEPh+0x15c>)
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	4a1a      	ldr	r2, [pc, #104]	; (80148cc <_ZN8MainView9updateValEPh+0x158>)
 8014862:	2105      	movs	r1, #5
 8014864:	f008 f832 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		MaxRPMValue.invalidate();
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 801486e:	4618      	mov	r0, r3
 8014870:	f006 fbfe 	bl	801b070 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->clt != prev_clt) {
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	689a      	ldr	r2, [r3, #8]
 8014878:	4b16      	ldr	r3, [pc, #88]	; (80148d4 <_ZN8MainView9updateValEPh+0x160>)
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	429a      	cmp	r2, r3
 801487e:	d03e      	beq.n	80148fe <_ZN8MainView9updateValEPh+0x18a>
		prev_clt = values->clt;
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	689b      	ldr	r3, [r3, #8]
 8014884:	4a13      	ldr	r2, [pc, #76]	; (80148d4 <_ZN8MainView9updateValEPh+0x160>)
 8014886:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%d", values->clt);
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	f603 4072 	addw	r0, r3, #3186	; 0xc72
 801488e:	68fb      	ldr	r3, [r7, #12]
 8014890:	689b      	ldr	r3, [r3, #8]
 8014892:	4a0e      	ldr	r2, [pc, #56]	; (80148cc <_ZN8MainView9updateValEPh+0x158>)
 8014894:	2105      	movs	r1, #5
 8014896:	f008 f819 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		if(values->clt >= 100){
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	689b      	ldr	r3, [r3, #8]
 801489e:	2b63      	cmp	r3, #99	; 0x63
 80148a0:	dd1a      	ble.n	80148d8 <_ZN8MainView9updateValEPh+0x164>
			CLTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255,0,0));
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	f603 04d8 	addw	r4, r3, #2264	; 0x8d8
 80148a8:	2200      	movs	r2, #0
 80148aa:	2100      	movs	r1, #0
 80148ac:	20ff      	movs	r0, #255	; 0xff
 80148ae:	f7fc fdfb 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80148b2:	4603      	mov	r3, r0
 80148b4:	4619      	mov	r1, r3
 80148b6:	4620      	mov	r0, r4
 80148b8:	f7fc fb07 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
 80148bc:	e019      	b.n	80148f2 <_ZN8MainView9updateValEPh+0x17e>
 80148be:	bf00      	nop
 80148c0:	20000038 	.word	0x20000038
 80148c4:	20008e68 	.word	0x20008e68
 80148c8:	2000003c 	.word	0x2000003c
 80148cc:	080280d0 	.word	0x080280d0
 80148d0:	20000040 	.word	0x20000040
 80148d4:	20008e38 	.word	0x20008e38
		} else {
			CLTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255,255,255));
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	f603 04d8 	addw	r4, r3, #2264	; 0x8d8
 80148de:	22ff      	movs	r2, #255	; 0xff
 80148e0:	21ff      	movs	r1, #255	; 0xff
 80148e2:	20ff      	movs	r0, #255	; 0xff
 80148e4:	f7fc fde0 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80148e8:	4603      	mov	r3, r0
 80148ea:	4619      	mov	r1, r3
 80148ec:	4620      	mov	r0, r4
 80148ee:	f7fc faec 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
		}
		CLTValue.invalidate();
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	f603 03d8 	addw	r3, r3, #2264	; 0x8d8
 80148f8:	4618      	mov	r0, r3
 80148fa:	f006 fbb9 	bl	801b070 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->max_clt != prev_max_clt) {
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	68da      	ldr	r2, [r3, #12]
 8014902:	4bb2      	ldr	r3, [pc, #712]	; (8014bcc <_ZN8MainView9updateValEPh+0x458>)
 8014904:	681b      	ldr	r3, [r3, #0]
 8014906:	429a      	cmp	r2, r3
 8014908:	d023      	beq.n	8014952 <_ZN8MainView9updateValEPh+0x1de>
		prev_max_clt = values->max_clt;
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	68db      	ldr	r3, [r3, #12]
 801490e:	4aaf      	ldr	r2, [pc, #700]	; (8014bcc <_ZN8MainView9updateValEPh+0x458>)
 8014910:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(MaxCltValueBuffer, MAXCLTVALUE_SIZE, "%d", values->max_clt);
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	f603 40a4 	addw	r0, r3, #3236	; 0xca4
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	68db      	ldr	r3, [r3, #12]
 801491c:	4aac      	ldr	r2, [pc, #688]	; (8014bd0 <_ZN8MainView9updateValEPh+0x45c>)
 801491e:	2105      	movs	r1, #5
 8014920:	f007 ffd4 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		if(values->max_clt >= 100){
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	68db      	ldr	r3, [r3, #12]
 8014928:	2b63      	cmp	r3, #99	; 0x63
 801492a:	dd0c      	ble.n	8014946 <_ZN8MainView9updateValEPh+0x1d2>
			MaxCltValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255,0,0));
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	f603 2424 	addw	r4, r3, #2596	; 0xa24
 8014932:	2200      	movs	r2, #0
 8014934:	2100      	movs	r1, #0
 8014936:	20ff      	movs	r0, #255	; 0xff
 8014938:	f7fc fdb6 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801493c:	4603      	mov	r3, r0
 801493e:	4619      	mov	r1, r3
 8014940:	4620      	mov	r0, r4
 8014942:	f7fc fac2 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
		}
		MaxCltValue.invalidate();
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	f603 2324 	addw	r3, r3, #2596	; 0xa24
 801494c:	4618      	mov	r0, r3
 801494e:	f006 fb8f 	bl	801b070 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->lambda != prev_lambda) {
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	ed93 7a06 	vldr	s14, [r3, #24]
 8014958:	4b9e      	ldr	r3, [pc, #632]	; (8014bd4 <_ZN8MainView9updateValEPh+0x460>)
 801495a:	edd3 7a00 	vldr	s15, [r3]
 801495e:	eeb4 7a67 	vcmp.f32	s14, s15
 8014962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014966:	d015      	beq.n	8014994 <_ZN8MainView9updateValEPh+0x220>
		prev_lambda = values->lambda;
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	699b      	ldr	r3, [r3, #24]
 801496c:	4a99      	ldr	r2, [pc, #612]	; (8014bd4 <_ZN8MainView9updateValEPh+0x460>)
 801496e:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%.2f",values->lambda);
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	f603 400c 	addw	r0, r3, #3084	; 0xc0c
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	edd3 7a06 	vldr	s15, [r3, #24]
 801497c:	eeb0 0a67 	vmov.f32	s0, s15
 8014980:	4a95      	ldr	r2, [pc, #596]	; (8014bd8 <_ZN8MainView9updateValEPh+0x464>)
 8014982:	2105      	movs	r1, #5
 8014984:	f7ff fd28 	bl	80143d8 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		LambdaValue.invalidate();
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 801498e:	4618      	mov	r0, r3
 8014990:	f006 fb6e 	bl	801b070 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->oil_tmp != prev_oil_tmp) {
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	69da      	ldr	r2, [r3, #28]
 8014998:	4b90      	ldr	r3, [pc, #576]	; (8014bdc <_ZN8MainView9updateValEPh+0x468>)
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	429a      	cmp	r2, r3
 801499e:	d012      	beq.n	80149c6 <_ZN8MainView9updateValEPh+0x252>
		prev_oil_tmp = values->oil_tmp;
 80149a0:	68fb      	ldr	r3, [r7, #12]
 80149a2:	69db      	ldr	r3, [r3, #28]
 80149a4:	4a8d      	ldr	r2, [pc, #564]	; (8014bdc <_ZN8MainView9updateValEPh+0x468>)
 80149a6:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%d",values->oil_tmp);
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	f603 404a 	addw	r0, r3, #3146	; 0xc4a
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	69db      	ldr	r3, [r3, #28]
 80149b2:	4a87      	ldr	r2, [pc, #540]	; (8014bd0 <_ZN8MainView9updateValEPh+0x45c>)
 80149b4:	2105      	movs	r1, #5
 80149b6:	f007 ff89 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		OILTempValue.invalidate();
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 80149c0:	4618      	mov	r0, r3
 80149c2:	f006 fb55 	bl	801b070 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->max_oil_tmp != prev_max_oil_tmp) {
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	6a1a      	ldr	r2, [r3, #32]
 80149ca:	4b85      	ldr	r3, [pc, #532]	; (8014be0 <_ZN8MainView9updateValEPh+0x46c>)
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	429a      	cmp	r2, r3
 80149d0:	d012      	beq.n	80149f8 <_ZN8MainView9updateValEPh+0x284>
		prev_max_oil_tmp = values->max_oil_tmp;
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	6a1b      	ldr	r3, [r3, #32]
 80149d6:	4a82      	ldr	r2, [pc, #520]	; (8014be0 <_ZN8MainView9updateValEPh+0x46c>)
 80149d8:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(MaxOilTValueBuffer, MAXOILTVALUE_SIZE, "%d",values->max_oil_tmp);
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	f603 409a 	addw	r0, r3, #3226	; 0xc9a
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	6a1b      	ldr	r3, [r3, #32]
 80149e4:	4a7a      	ldr	r2, [pc, #488]	; (8014bd0 <_ZN8MainView9updateValEPh+0x45c>)
 80149e6:	2105      	movs	r1, #5
 80149e8:	f007 ff70 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		MaxOilTValue.invalidate();
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	f603 13ec 	addw	r3, r3, #2540	; 0x9ec
 80149f2:	4618      	mov	r0, r3
 80149f4:	f006 fb3c 	bl	801b070 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->oil_press != prev_oil_press) {
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80149fe:	4b79      	ldr	r3, [pc, #484]	; (8014be4 <_ZN8MainView9updateValEPh+0x470>)
 8014a00:	edd3 7a00 	vldr	s15, [r3]
 8014a04:	eeb4 7a67 	vcmp.f32	s14, s15
 8014a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a0c:	d015      	beq.n	8014a3a <_ZN8MainView9updateValEPh+0x2c6>
		prev_oil_press = values->oil_press;
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a12:	4a74      	ldr	r2, [pc, #464]	; (8014be4 <_ZN8MainView9updateValEPh+0x470>)
 8014a14:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%.1f",values->oil_press);
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	f603 4054 	addw	r0, r3, #3156	; 0xc54
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8014a22:	eeb0 0a67 	vmov.f32	s0, s15
 8014a26:	4a70      	ldr	r2, [pc, #448]	; (8014be8 <_ZN8MainView9updateValEPh+0x474>)
 8014a28:	2105      	movs	r1, #5
 8014a2a:	f7ff fcd5 	bl	80143d8 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		OILPressureValue.invalidate();
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014a34:	4618      	mov	r0, r3
 8014a36:	f006 fb1b 	bl	801b070 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->min_oil_press != prev_min_oil_press) {
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8014a40:	4b6a      	ldr	r3, [pc, #424]	; (8014bec <_ZN8MainView9updateValEPh+0x478>)
 8014a42:	edd3 7a00 	vldr	s15, [r3]
 8014a46:	eeb4 7a67 	vcmp.f32	s14, s15
 8014a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a4e:	d02c      	beq.n	8014aaa <_ZN8MainView9updateValEPh+0x336>
		prev_min_oil_press = values->min_oil_press;
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a54:	4a65      	ldr	r2, [pc, #404]	; (8014bec <_ZN8MainView9updateValEPh+0x478>)
 8014a56:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(MinOilPValueBuffer, MINOILPVALUE_SIZE, "%.1f",values->min_oil_press);
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	f603 40cc 	addw	r0, r3, #3276	; 0xccc
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8014a64:	eeb0 0a67 	vmov.f32	s0, s15
 8014a68:	4a5f      	ldr	r2, [pc, #380]	; (8014be8 <_ZN8MainView9updateValEPh+0x474>)
 8014a6a:	2105      	movs	r1, #5
 8014a6c:	f7ff fcb4 	bl	80143d8 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		if(values->min_oil_press < 3){
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8014a76:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8014a7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a82:	d50c      	bpl.n	8014a9e <_ZN8MainView9updateValEPh+0x32a>
			MinOilPValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255,0,0));
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	f603 34d4 	addw	r4, r3, #3028	; 0xbd4
 8014a8a:	2200      	movs	r2, #0
 8014a8c:	2100      	movs	r1, #0
 8014a8e:	20ff      	movs	r0, #255	; 0xff
 8014a90:	f7fc fd0a 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014a94:	4603      	mov	r3, r0
 8014a96:	4619      	mov	r1, r3
 8014a98:	4620      	mov	r0, r4
 8014a9a:	f7fc fa16 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
		}
		MinOilPValue.invalidate();
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	f603 33d4 	addw	r3, r3, #3028	; 0xbd4
 8014aa4:	4618      	mov	r0, r3
 8014aa6:	f006 fae3 	bl	801b070 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->fuel_tmp != prev_fuel_tmp) {
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014aae:	4b50      	ldr	r3, [pc, #320]	; (8014bf0 <_ZN8MainView9updateValEPh+0x47c>)
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	429a      	cmp	r2, r3
 8014ab4:	d012      	beq.n	8014adc <_ZN8MainView9updateValEPh+0x368>
		prev_fuel_tmp = values->fuel_tmp;
 8014ab6:	68fb      	ldr	r3, [r7, #12]
 8014ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014aba:	4a4d      	ldr	r2, [pc, #308]	; (8014bf0 <_ZN8MainView9updateValEPh+0x47c>)
 8014abc:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(FuelTValueBuffer, FUELTVALUE_SIZE, "%d",values->fuel_tmp);
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	f603 40c2 	addw	r0, r3, #3266	; 0xcc2
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ac8:	4a41      	ldr	r2, [pc, #260]	; (8014bd0 <_ZN8MainView9updateValEPh+0x45c>)
 8014aca:	2105      	movs	r1, #5
 8014acc:	f007 fefe 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		FuelTValue.invalidate();
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	f603 23cc 	addw	r3, r3, #2764	; 0xacc
 8014ad6:	4618      	mov	r0, r3
 8014ad8:	f006 faca 	bl	801b070 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->fuel_press != prev_fuel_press) {
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8014ae2:	4b44      	ldr	r3, [pc, #272]	; (8014bf4 <_ZN8MainView9updateValEPh+0x480>)
 8014ae4:	edd3 7a00 	vldr	s15, [r3]
 8014ae8:	eeb4 7a67 	vcmp.f32	s14, s15
 8014aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014af0:	d015      	beq.n	8014b1e <_ZN8MainView9updateValEPh+0x3aa>
		prev_fuel_press = values->fuel_press;
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014af6:	4a3f      	ldr	r2, [pc, #252]	; (8014bf4 <_ZN8MainView9updateValEPh+0x480>)
 8014af8:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(FuelPValueBuffer, FUELPVALUE_SIZE, "%.1f",values->fuel_press);
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	f603 407c 	addw	r0, r3, #3196	; 0xc7c
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8014b06:	eeb0 0a67 	vmov.f32	s0, s15
 8014b0a:	4a37      	ldr	r2, [pc, #220]	; (8014be8 <_ZN8MainView9updateValEPh+0x474>)
 8014b0c:	2105      	movs	r1, #5
 8014b0e:	f7ff fc63 	bl	80143d8 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		FuelPValue.invalidate();
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8014b18:	4618      	mov	r0, r3
 8014b1a:	f006 faa9 	bl	801b070 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->min_fuel_press != prev_min_fuel_press) {
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8014b24:	4b34      	ldr	r3, [pc, #208]	; (8014bf8 <_ZN8MainView9updateValEPh+0x484>)
 8014b26:	edd3 7a00 	vldr	s15, [r3]
 8014b2a:	eeb4 7a67 	vcmp.f32	s14, s15
 8014b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b32:	d02c      	beq.n	8014b8e <_ZN8MainView9updateValEPh+0x41a>
		prev_min_fuel_press = values->min_fuel_press;
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014b38:	4a2f      	ldr	r2, [pc, #188]	; (8014bf8 <_ZN8MainView9updateValEPh+0x484>)
 8014b3a:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(MinFuelPValueBuffer, MINFUELPVALUE_SIZE, "%.1f",values->min_fuel_press);
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	f503 6049 	add.w	r0, r3, #3216	; 0xc90
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8014b48:	eeb0 0a67 	vmov.f32	s0, s15
 8014b4c:	4a26      	ldr	r2, [pc, #152]	; (8014be8 <_ZN8MainView9updateValEPh+0x474>)
 8014b4e:	2105      	movs	r1, #5
 8014b50:	f7ff fc42 	bl	80143d8 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		if(values->min_fuel_press < 3){
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8014b5a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8014b5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b66:	d50c      	bpl.n	8014b82 <_ZN8MainView9updateValEPh+0x40e>
			MinFuelPValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255,0,0));
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	f603 14b4 	addw	r4, r3, #2484	; 0x9b4
 8014b6e:	2200      	movs	r2, #0
 8014b70:	2100      	movs	r1, #0
 8014b72:	20ff      	movs	r0, #255	; 0xff
 8014b74:	f7fc fc98 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014b78:	4603      	mov	r3, r0
 8014b7a:	4619      	mov	r1, r3
 8014b7c:	4620      	mov	r0, r4
 8014b7e:	f7fc f9a4 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
		}
		MinFuelPValue.invalidate();
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	f603 13b4 	addw	r3, r3, #2484	; 0x9b4
 8014b88:	4618      	mov	r0, r3
 8014b8a:	f006 fa71 	bl	801b070 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->speed != prev_speed) {
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	691a      	ldr	r2, [r3, #16]
 8014b92:	4b1a      	ldr	r3, [pc, #104]	; (8014bfc <_ZN8MainView9updateValEPh+0x488>)
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	429a      	cmp	r2, r3
 8014b98:	d012      	beq.n	8014bc0 <_ZN8MainView9updateValEPh+0x44c>
		prev_speed = values->speed;
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	691b      	ldr	r3, [r3, #16]
 8014b9e:	4a17      	ldr	r2, [pc, #92]	; (8014bfc <_ZN8MainView9updateValEPh+0x488>)
 8014ba0:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(SpeedValueBuffer, SPEEDVALUE_SIZE, "%d",values->speed);
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	f603 4016 	addw	r0, r3, #3094	; 0xc16
 8014ba8:	68fb      	ldr	r3, [r7, #12]
 8014baa:	691b      	ldr	r3, [r3, #16]
 8014bac:	4a08      	ldr	r2, [pc, #32]	; (8014bd0 <_ZN8MainView9updateValEPh+0x45c>)
 8014bae:	2105      	movs	r1, #5
 8014bb0:	f007 fe8c 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		SpeedValue.invalidate();
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014bba:	4618      	mov	r0, r3
 8014bbc:	f006 fa58 	bl	801b070 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->max_speed != prev_max_speed) {
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	695a      	ldr	r2, [r3, #20]
 8014bc4:	4b0e      	ldr	r3, [pc, #56]	; (8014c00 <_ZN8MainView9updateValEPh+0x48c>)
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	429a      	cmp	r2, r3
 8014bca:	e01b      	b.n	8014c04 <_ZN8MainView9updateValEPh+0x490>
 8014bcc:	20008e3c 	.word	0x20008e3c
 8014bd0:	080280d0 	.word	0x080280d0
 8014bd4:	20000044 	.word	0x20000044
 8014bd8:	080280d4 	.word	0x080280d4
 8014bdc:	20008e40 	.word	0x20008e40
 8014be0:	20008e44 	.word	0x20008e44
 8014be4:	20008e48 	.word	0x20008e48
 8014be8:	080280dc 	.word	0x080280dc
 8014bec:	20008e4c 	.word	0x20008e4c
 8014bf0:	20008e50 	.word	0x20008e50
 8014bf4:	20008e54 	.word	0x20008e54
 8014bf8:	20008e58 	.word	0x20008e58
 8014bfc:	20008e30 	.word	0x20008e30
 8014c00:	20008e34 	.word	0x20008e34
 8014c04:	d012      	beq.n	8014c2c <_ZN8MainView9updateValEPh+0x4b8>
		prev_max_speed = values->max_speed;
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	695b      	ldr	r3, [r3, #20]
 8014c0a:	4a78      	ldr	r2, [pc, #480]	; (8014dec <_ZN8MainView9updateValEPh+0x678>)
 8014c0c:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(MaxSpeedValueBuffer, MAXSPEEDVALUE_SIZE, "%d",values->max_speed);
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	f603 40b8 	addw	r0, r3, #3256	; 0xcb8
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	695b      	ldr	r3, [r3, #20]
 8014c18:	4a75      	ldr	r2, [pc, #468]	; (8014df0 <_ZN8MainView9updateValEPh+0x67c>)
 8014c1a:	2105      	movs	r1, #5
 8014c1c:	f007 fe56 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		MaxSpeedValue.invalidate();
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	f603 2394 	addw	r3, r3, #2708	; 0xa94
 8014c26:	4618      	mov	r0, r3
 8014c28:	f006 fa22 	bl	801b070 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->iat != prev_iat) {
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014c30:	4b70      	ldr	r3, [pc, #448]	; (8014df4 <_ZN8MainView9updateValEPh+0x680>)
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	429a      	cmp	r2, r3
 8014c36:	d012      	beq.n	8014c5e <_ZN8MainView9updateValEPh+0x4ea>
		prev_iat = values->iat;
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c3c:	4a6d      	ldr	r2, [pc, #436]	; (8014df4 <_ZN8MainView9updateValEPh+0x680>)
 8014c3e:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%d",values->iat);
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	f503 6044 	add.w	r0, r3, #3136	; 0xc40
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c4a:	4a69      	ldr	r2, [pc, #420]	; (8014df0 <_ZN8MainView9updateValEPh+0x67c>)
 8014c4c:	2105      	movs	r1, #5
 8014c4e:	f007 fe3d 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		IATValue.invalidate();
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8014c58:	4618      	mov	r0, r3
 8014c5a:	f006 fa09 	bl	801b070 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->tps != prev_tps) {
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014c62:	4b65      	ldr	r3, [pc, #404]	; (8014df8 <_ZN8MainView9updateValEPh+0x684>)
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	429a      	cmp	r2, r3
 8014c68:	d021      	beq.n	8014cae <_ZN8MainView9updateValEPh+0x53a>
		prev_tps = values->tps;
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014c6e:	4a62      	ldr	r2, [pc, #392]	; (8014df8 <_ZN8MainView9updateValEPh+0x684>)
 8014c70:	6013      	str	r3, [r2, #0]
		TPSProgress.setValue(values->tps);
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	f203 526c 	addw	r2, r3, #1388	; 0x56c
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014c7c:	4619      	mov	r1, r3
 8014c7e:	4610      	mov	r0, r2
 8014c80:	f002 f892 	bl	8016da8 <_ZN8touchgfx11BoxProgress8setValueEi>
		RPMProgressBar.invalidate();
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8014c8a:	4618      	mov	r0, r3
 8014c8c:	f006 f9f0 	bl	801b070 <_ZNK8touchgfx8Drawable10invalidateEv>
		Unicode::snprintf(TpsNumberValueBuffer, TPSNUMBERVALUE_SIZE, "%d",values->tps);
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	f603 4086 	addw	r0, r3, #3206	; 0xc86
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014c9a:	4a55      	ldr	r2, [pc, #340]	; (8014df0 <_ZN8MainView9updateValEPh+0x67c>)
 8014c9c:	2105      	movs	r1, #5
 8014c9e:	f007 fe15 	bl	801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		TpsNumberValue.invalidate();
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	f603 137c 	addw	r3, r3, #2428	; 0x97c
 8014ca8:	4618      	mov	r0, r3
 8014caa:	f006 f9e1 	bl	801b070 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->batt_v != prev_batt_v) {
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8014cb4:	4b51      	ldr	r3, [pc, #324]	; (8014dfc <_ZN8MainView9updateValEPh+0x688>)
 8014cb6:	edd3 7a00 	vldr	s15, [r3]
 8014cba:	eeb4 7a67 	vcmp.f32	s14, s15
 8014cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cc2:	d03a      	beq.n	8014d3a <_ZN8MainView9updateValEPh+0x5c6>
		prev_batt_v = values->batt_v;
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014cc8:	4a4c      	ldr	r2, [pc, #304]	; (8014dfc <_ZN8MainView9updateValEPh+0x688>)
 8014cca:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%.2f",values->batt_v);
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	f603 405e 	addw	r0, r3, #3166	; 0xc5e
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8014cd8:	eeb0 0a67 	vmov.f32	s0, s15
 8014cdc:	4a48      	ldr	r2, [pc, #288]	; (8014e00 <_ZN8MainView9updateValEPh+0x68c>)
 8014cde:	2105      	movs	r1, #5
 8014ce0:	f7ff fb7a 	bl	80143d8 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		if(values->batt_v < 13){
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8014cea:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 8014cee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cf6:	d50d      	bpl.n	8014d14 <_ZN8MainView9updateValEPh+0x5a0>
			BatteryVoltage.setColor(touchgfx::Color::getColorFrom24BitRGB(255,0,0));
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	f203 7444 	addw	r4, r3, #1860	; 0x744
 8014cfe:	2200      	movs	r2, #0
 8014d00:	2100      	movs	r1, #0
 8014d02:	20ff      	movs	r0, #255	; 0xff
 8014d04:	f7fc fbd0 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014d08:	4603      	mov	r3, r0
 8014d0a:	4619      	mov	r1, r3
 8014d0c:	4620      	mov	r0, r4
 8014d0e:	f7fc f8dc 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
 8014d12:	e00c      	b.n	8014d2e <_ZN8MainView9updateValEPh+0x5ba>
		} else {
			BatteryVoltage.setColor(touchgfx::Color::getColorFrom24BitRGB(255,255,255));
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	f203 7444 	addw	r4, r3, #1860	; 0x744
 8014d1a:	22ff      	movs	r2, #255	; 0xff
 8014d1c:	21ff      	movs	r1, #255	; 0xff
 8014d1e:	20ff      	movs	r0, #255	; 0xff
 8014d20:	f7fc fbc2 	bl	80114a8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014d24:	4603      	mov	r3, r0
 8014d26:	4619      	mov	r1, r3
 8014d28:	4620      	mov	r0, r4
 8014d2a:	f7fc f8ce 	bl	8010eca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
		}
		BatteryVoltage.invalidate();
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	f203 7344 	addw	r3, r3, #1860	; 0x744
 8014d34:	4618      	mov	r0, r3
 8014d36:	f006 f99b 	bl	801b070 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->mil_indicator != prev_mil_indicator) {
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8014d40:	4b30      	ldr	r3, [pc, #192]	; (8014e04 <_ZN8MainView9updateValEPh+0x690>)
 8014d42:	781b      	ldrb	r3, [r3, #0]
 8014d44:	429a      	cmp	r2, r3
 8014d46:	d014      	beq.n	8014d72 <_ZN8MainView9updateValEPh+0x5fe>
		prev_mil_indicator = values->mil_indicator;
 8014d48:	68fb      	ldr	r3, [r7, #12]
 8014d4a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8014d4e:	4b2d      	ldr	r3, [pc, #180]	; (8014e04 <_ZN8MainView9updateValEPh+0x690>)
 8014d50:	701a      	strb	r2, [r3, #0]
		MilIndicator.setVisible(values->mil_indicator);
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	f603 326c 	addw	r2, r3, #2924	; 0xb6c
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8014d5e:	4619      	mov	r1, r3
 8014d60:	4610      	mov	r0, r2
 8014d62:	f7fb fe9f 	bl	8010aa4 <_ZN8touchgfx8Drawable10setVisibleEb>
		MilIndicator.invalidate();
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	f603 336c 	addw	r3, r3, #2924	; 0xb6c
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	f006 f97f 	bl	801b070 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->oil_indicator != prev_oil_indicator) {
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8014d78:	4b23      	ldr	r3, [pc, #140]	; (8014e08 <_ZN8MainView9updateValEPh+0x694>)
 8014d7a:	781b      	ldrb	r3, [r3, #0]
 8014d7c:	429a      	cmp	r2, r3
 8014d7e:	d014      	beq.n	8014daa <_ZN8MainView9updateValEPh+0x636>
		prev_oil_indicator = values->oil_indicator;
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8014d86:	4b20      	ldr	r3, [pc, #128]	; (8014e08 <_ZN8MainView9updateValEPh+0x694>)
 8014d88:	701a      	strb	r2, [r3, #0]
		OilIndicator.setVisible(values->oil_indicator);
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	f503 623a 	add.w	r2, r3, #2976	; 0xba0
 8014d90:	68fb      	ldr	r3, [r7, #12]
 8014d92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014d96:	4619      	mov	r1, r3
 8014d98:	4610      	mov	r0, r2
 8014d9a:	f7fb fe83 	bl	8010aa4 <_ZN8touchgfx8Drawable10setVisibleEb>
		OilIndicator.invalidate();
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8014da4:	4618      	mov	r0, r3
 8014da6:	f006 f963 	bl	801b070 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->bat_indicator != prev_bat_indicator) {
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8014db0:	4b16      	ldr	r3, [pc, #88]	; (8014e0c <_ZN8MainView9updateValEPh+0x698>)
 8014db2:	781b      	ldrb	r3, [r3, #0]
 8014db4:	429a      	cmp	r2, r3
 8014db6:	d014      	beq.n	8014de2 <_ZN8MainView9updateValEPh+0x66e>
		prev_bat_indicator = values->bat_indicator;
 8014db8:	68fb      	ldr	r3, [r7, #12]
 8014dba:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8014dbe:	4b13      	ldr	r3, [pc, #76]	; (8014e0c <_ZN8MainView9updateValEPh+0x698>)
 8014dc0:	701a      	strb	r2, [r3, #0]
		BatIndicator.setVisible(values->bat_indicator);
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	f603 3238 	addw	r2, r3, #2872	; 0xb38
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014dce:	4619      	mov	r1, r3
 8014dd0:	4610      	mov	r0, r2
 8014dd2:	f7fb fe67 	bl	8010aa4 <_ZN8touchgfx8Drawable10setVisibleEb>
		BatIndicator.invalidate();
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	f603 3338 	addw	r3, r3, #2872	; 0xb38
 8014ddc:	4618      	mov	r0, r3
 8014dde:	f006 f947 	bl	801b070 <_ZNK8touchgfx8Drawable10invalidateEv>
	}
}
 8014de2:	bf00      	nop
 8014de4:	3714      	adds	r7, #20
 8014de6:	46bd      	mov	sp, r7
 8014de8:	bd90      	pop	{r4, r7, pc}
 8014dea:	bf00      	nop
 8014dec:	20008e34 	.word	0x20008e34
 8014df0:	080280d0 	.word	0x080280d0
 8014df4:	20008e5c 	.word	0x20008e5c
 8014df8:	20008e60 	.word	0x20008e60
 8014dfc:	20008e64 	.word	0x20008e64
 8014e00:	080280d4 	.word	0x080280d4
 8014e04:	20000048 	.word	0x20000048
 8014e08:	20000049 	.word	0x20000049
 8014e0c:	2000004a 	.word	0x2000004a

08014e10 <_ZN5ModelC1Ev>:
{
	xQueueHandle messageQ;
	xQueueHandle settingsMessageQ;
}

Model::Model() : modelListener(0)
 8014e10:	b580      	push	{r7, lr}
 8014e12:	b082      	sub	sp, #8
 8014e14:	af00      	add	r7, sp, #0
 8014e16:	6078      	str	r0, [r7, #4]
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	2200      	movs	r2, #0
 8014e1c:	601a      	str	r2, [r3, #0]
{
	messageQ = xQueueGenericCreate(1, sizeof(display_values), 0);
 8014e1e:	2200      	movs	r2, #0
 8014e20:	2148      	movs	r1, #72	; 0x48
 8014e22:	2001      	movs	r0, #1
 8014e24:	f7f8 f82a 	bl	800ce7c <xQueueGenericCreate>
 8014e28:	4603      	mov	r3, r0
 8014e2a:	4a07      	ldr	r2, [pc, #28]	; (8014e48 <_ZN5ModelC1Ev+0x38>)
 8014e2c:	6013      	str	r3, [r2, #0]
	settingsMessageQ = xQueueGenericCreate(1, sizeof(settings_message), 0);
 8014e2e:	2200      	movs	r2, #0
 8014e30:	2128      	movs	r1, #40	; 0x28
 8014e32:	2001      	movs	r0, #1
 8014e34:	f7f8 f822 	bl	800ce7c <xQueueGenericCreate>
 8014e38:	4603      	mov	r3, r0
 8014e3a:	4a04      	ldr	r2, [pc, #16]	; (8014e4c <_ZN5ModelC1Ev+0x3c>)
 8014e3c:	6013      	str	r3, [r2, #0]
}
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	4618      	mov	r0, r3
 8014e42:	3708      	adds	r7, #8
 8014e44:	46bd      	mov	sp, r7
 8014e46:	bd80      	pop	{r7, pc}
 8014e48:	20008edc 	.word	0x20008edc
 8014e4c:	20008ee0 	.word	0x20008ee0

08014e50 <_ZN5Model4tickEv>:

void Model::tick()
{
 8014e50:	b580      	push	{r7, lr}
 8014e52:	b082      	sub	sp, #8
 8014e54:	af00      	add	r7, sp, #0
 8014e56:	6078      	str	r0, [r7, #4]
	if(xQueueReceive(messageQ, &values , 0) == pdTRUE)
 8014e58:	4b1a      	ldr	r3, [pc, #104]	; (8014ec4 <_ZN5Model4tickEv+0x74>)
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	2200      	movs	r2, #0
 8014e5e:	491a      	ldr	r1, [pc, #104]	; (8014ec8 <_ZN5Model4tickEv+0x78>)
 8014e60:	4618      	mov	r0, r3
 8014e62:	f7f8 faa9 	bl	800d3b8 <xQueueReceive>
 8014e66:	4603      	mov	r3, r0
 8014e68:	2b01      	cmp	r3, #1
 8014e6a:	bf0c      	ite	eq
 8014e6c:	2301      	moveq	r3, #1
 8014e6e:	2300      	movne	r3, #0
 8014e70:	b2db      	uxtb	r3, r3
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d009      	beq.n	8014e8a <_ZN5Model4tickEv+0x3a>
	{
		modelListener->setNewValue(values);
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	681a      	ldr	r2, [r3, #0]
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	681b      	ldr	r3, [r3, #0]
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	3308      	adds	r3, #8
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	4910      	ldr	r1, [pc, #64]	; (8014ec8 <_ZN5Model4tickEv+0x78>)
 8014e86:	4610      	mov	r0, r2
 8014e88:	4798      	blx	r3
	}

	if(xQueueReceive(settingsMessageQ, &settings_value , 0) == pdTRUE)
 8014e8a:	4b10      	ldr	r3, [pc, #64]	; (8014ecc <_ZN5Model4tickEv+0x7c>)
 8014e8c:	681b      	ldr	r3, [r3, #0]
 8014e8e:	2200      	movs	r2, #0
 8014e90:	490f      	ldr	r1, [pc, #60]	; (8014ed0 <_ZN5Model4tickEv+0x80>)
 8014e92:	4618      	mov	r0, r3
 8014e94:	f7f8 fa90 	bl	800d3b8 <xQueueReceive>
 8014e98:	4603      	mov	r3, r0
 8014e9a:	2b01      	cmp	r3, #1
 8014e9c:	bf0c      	ite	eq
 8014e9e:	2301      	moveq	r3, #1
 8014ea0:	2300      	movne	r3, #0
 8014ea2:	b2db      	uxtb	r3, r3
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d009      	beq.n	8014ebc <_ZN5Model4tickEv+0x6c>
	{
		modelListener->updateDisplaySettings(settings_value);
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	681a      	ldr	r2, [r3, #0]
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	681b      	ldr	r3, [r3, #0]
 8014eb2:	330c      	adds	r3, #12
 8014eb4:	681b      	ldr	r3, [r3, #0]
 8014eb6:	4906      	ldr	r1, [pc, #24]	; (8014ed0 <_ZN5Model4tickEv+0x80>)
 8014eb8:	4610      	mov	r0, r2
 8014eba:	4798      	blx	r3
	}
}
 8014ebc:	bf00      	nop
 8014ebe:	3708      	adds	r7, #8
 8014ec0:	46bd      	mov	sp, r7
 8014ec2:	bd80      	pop	{r7, pc}
 8014ec4:	20008edc 	.word	0x20008edc
 8014ec8:	20008e6c 	.word	0x20008e6c
 8014ecc:	20008ee0 	.word	0x20008ee0
 8014ed0:	20008eb4 	.word	0x20008eb4

08014ed4 <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 8014ed4:	b480      	push	{r7}
 8014ed6:	b083      	sub	sp, #12
 8014ed8:	af00      	add	r7, sp, #0
 8014eda:	6078      	str	r0, [r7, #4]
    {
 8014edc:	4a04      	ldr	r2, [pc, #16]	; (8014ef0 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	601a      	str	r2, [r3, #0]
    }
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	4618      	mov	r0, r3
 8014ee6:	370c      	adds	r7, #12
 8014ee8:	46bd      	mov	sp, r7
 8014eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eee:	4770      	bx	lr
 8014ef0:	08028728 	.word	0x08028728

08014ef4 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8014ef4:	b580      	push	{r7, lr}
 8014ef6:	b082      	sub	sp, #8
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	6078      	str	r0, [r7, #4]
    }
 8014efc:	6878      	ldr	r0, [r7, #4]
 8014efe:	f7ff ffe9 	bl	8014ed4 <_ZN8touchgfx15TouchControllerD1Ev>
 8014f02:	2104      	movs	r1, #4
 8014f04:	6878      	ldr	r0, [r7, #4]
 8014f06:	f011 fc4b 	bl	80267a0 <_ZdlPvj>
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	4618      	mov	r0, r3
 8014f0e:	3708      	adds	r7, #8
 8014f10:	46bd      	mov	sp, r7
 8014f12:	bd80      	pop	{r7, pc}

08014f14 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8014f14:	b480      	push	{r7}
 8014f16:	b083      	sub	sp, #12
 8014f18:	af00      	add	r7, sp, #0
 8014f1a:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8014f1c:	bf00      	nop
 8014f1e:	370c      	adds	r7, #12
 8014f20:	46bd      	mov	sp, r7
 8014f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f26:	4770      	bx	lr

08014f28 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8014f28:	b480      	push	{r7}
 8014f2a:	b085      	sub	sp, #20
 8014f2c:	af00      	add	r7, sp, #0
 8014f2e:	60f8      	str	r0, [r7, #12]
 8014f30:	60b9      	str	r1, [r7, #8]
 8014f32:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8014f34:	2300      	movs	r3, #0
}
 8014f36:	4618      	mov	r0, r3
 8014f38:	3714      	adds	r7, #20
 8014f3a:	46bd      	mov	sp, r7
 8014f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f40:	4770      	bx	lr
	...

08014f44 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8014f44:	b580      	push	{r7, lr}
 8014f46:	b082      	sub	sp, #8
 8014f48:	af00      	add	r7, sp, #0
 8014f4a:	6078      	str	r0, [r7, #4]
 8014f4c:	4a05      	ldr	r2, [pc, #20]	; (8014f64 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	601a      	str	r2, [r3, #0]
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	4618      	mov	r0, r3
 8014f56:	f7ff ffbd 	bl	8014ed4 <_ZN8touchgfx15TouchControllerD1Ev>
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	4618      	mov	r0, r3
 8014f5e:	3708      	adds	r7, #8
 8014f60:	46bd      	mov	sp, r7
 8014f62:	bd80      	pop	{r7, pc}
 8014f64:	08028710 	.word	0x08028710

08014f68 <_ZN20STM32TouchControllerD0Ev>:
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	b082      	sub	sp, #8
 8014f6c:	af00      	add	r7, sp, #0
 8014f6e:	6078      	str	r0, [r7, #4]
 8014f70:	6878      	ldr	r0, [r7, #4]
 8014f72:	f7ff ffe7 	bl	8014f44 <_ZN20STM32TouchControllerD1Ev>
 8014f76:	2104      	movs	r1, #4
 8014f78:	6878      	ldr	r0, [r7, #4]
 8014f7a:	f011 fc11 	bl	80267a0 <_ZdlPvj>
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	4618      	mov	r0, r3
 8014f82:	3708      	adds	r7, #8
 8014f84:	46bd      	mov	sp, r7
 8014f86:	bd80      	pop	{r7, pc}

08014f88 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8014f88:	b480      	push	{r7}
 8014f8a:	b083      	sub	sp, #12
 8014f8c:	af00      	add	r7, sp, #0
 8014f8e:	4603      	mov	r3, r0
 8014f90:	71fb      	strb	r3, [r7, #7]

}
 8014f92:	bf00      	nop
 8014f94:	370c      	adds	r7, #12
 8014f96:	46bd      	mov	sp, r7
 8014f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f9c:	4770      	bx	lr

08014f9e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8014f9e:	b480      	push	{r7}
 8014fa0:	b083      	sub	sp, #12
 8014fa2:	af00      	add	r7, sp, #0
 8014fa4:	4603      	mov	r3, r0
 8014fa6:	71fb      	strb	r3, [r7, #7]

}
 8014fa8:	bf00      	nop
 8014faa:	370c      	adds	r7, #12
 8014fac:	46bd      	mov	sp, r7
 8014fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fb2:	4770      	bx	lr

08014fb4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8014fb4:	b480      	push	{r7}
 8014fb6:	b083      	sub	sp, #12
 8014fb8:	af00      	add	r7, sp, #0
 8014fba:	4603      	mov	r3, r0
 8014fbc:	71fb      	strb	r3, [r7, #7]

}
 8014fbe:	bf00      	nop
 8014fc0:	370c      	adds	r7, #12
 8014fc2:	46bd      	mov	sp, r7
 8014fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fc8:	4770      	bx	lr
	...

08014fcc <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8014fcc:	b480      	push	{r7}
 8014fce:	b083      	sub	sp, #12
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	6078      	str	r0, [r7, #4]
    {
 8014fd4:	4a04      	ldr	r2, [pc, #16]	; (8014fe8 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	601a      	str	r2, [r3, #0]
    }
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	4618      	mov	r0, r3
 8014fde:	370c      	adds	r7, #12
 8014fe0:	46bd      	mov	sp, r7
 8014fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fe6:	4770      	bx	lr
 8014fe8:	08029408 	.word	0x08029408

08014fec <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8014fec:	b580      	push	{r7, lr}
 8014fee:	b082      	sub	sp, #8
 8014ff0:	af00      	add	r7, sp, #0
 8014ff2:	6078      	str	r0, [r7, #4]
    }
 8014ff4:	6878      	ldr	r0, [r7, #4]
 8014ff6:	f7ff ffe9 	bl	8014fcc <_ZN8touchgfx3HALD1Ev>
 8014ffa:	2178      	movs	r1, #120	; 0x78
 8014ffc:	6878      	ldr	r0, [r7, #4]
 8014ffe:	f011 fbcf 	bl	80267a0 <_ZdlPvj>
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	4618      	mov	r0, r3
 8015006:	3708      	adds	r7, #8
 8015008:	46bd      	mov	sp, r7
 801500a:	bd80      	pop	{r7, pc}

0801500c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 801500c:	b480      	push	{r7}
 801500e:	b083      	sub	sp, #12
 8015010:	af00      	add	r7, sp, #0
 8015012:	6078      	str	r0, [r7, #4]
 8015014:	460b      	mov	r3, r1
 8015016:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	78fa      	ldrb	r2, [r7, #3]
 801501c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	2201      	movs	r2, #1
 8015024:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8015028:	bf00      	nop
 801502a:	370c      	adds	r7, #12
 801502c:	46bd      	mov	sp, r7
 801502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015032:	4770      	bx	lr

08015034 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *        As default, will return whatever blitcaps are reported by the associated DMA
     *        object.
     *
     * @return a bitmask of the supported blitcaps.
     */
    virtual BlitOperations getBlitCaps()
 8015034:	b580      	push	{r7, lr}
 8015036:	b082      	sub	sp, #8
 8015038:	af00      	add	r7, sp, #0
 801503a:	6078      	str	r0, [r7, #4]
    {
        return dma.getBlitCaps();
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	685a      	ldr	r2, [r3, #4]
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	685b      	ldr	r3, [r3, #4]
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	4610      	mov	r0, r2
 801504a:	4798      	blx	r3
 801504c:	4603      	mov	r3, r0
    }
 801504e:	4618      	mov	r0, r3
 8015050:	3708      	adds	r7, #8
 8015052:	46bd      	mov	sp, r7
 8015054:	bd80      	pop	{r7, pc}

08015056 <_ZN8touchgfx3HAL15backPorchExitedEv>:
     * @brief Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     *        Has to be called from within the LCD IRQ rutine when the Back Porch Exit is
     *        reached.
     */
    virtual void backPorchExited()
 8015056:	b580      	push	{r7, lr}
 8015058:	b082      	sub	sp, #8
 801505a:	af00      	add	r7, sp, #0
 801505c:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 801505e:	6878      	ldr	r0, [r7, #4]
 8015060:	f003 f8fc 	bl	801825c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	681b      	ldr	r3, [r3, #0]
 8015068:	3390      	adds	r3, #144	; 0x90
 801506a:	681b      	ldr	r3, [r3, #0]
 801506c:	6878      	ldr	r0, [r7, #4]
 801506e:	4798      	blx	r3
    }
 8015070:	bf00      	nop
 8015072:	3708      	adds	r7, #8
 8015074:	46bd      	mov	sp, r7
 8015076:	bd80      	pop	{r7, pc}

08015078 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8015078:	b480      	push	{r7}
 801507a:	b083      	sub	sp, #12
 801507c:	af00      	add	r7, sp, #0
 801507e:	6078      	str	r0, [r7, #4]
 8015080:	6039      	str	r1, [r7, #0]
    {
        return false;
 8015082:	2300      	movs	r3, #0
    }
 8015084:	4618      	mov	r0, r3
 8015086:	370c      	adds	r7, #12
 8015088:	46bd      	mov	sp, r7
 801508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801508e:	4770      	bx	lr

08015090 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useDoubleBuffering  (Optional) If true, reserve memory for an extra frame buffer.
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation storage.
     *
     * @deprecated Use the setFramaBufferStartAddress with 'format' parameter instead of 'depth'
     */
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 8015090:	b590      	push	{r4, r7, lr}
 8015092:	b08b      	sub	sp, #44	; 0x2c
 8015094:	af00      	add	r7, sp, #0
 8015096:	60f8      	str	r0, [r7, #12]
 8015098:	60b9      	str	r1, [r7, #8]
 801509a:	4611      	mov	r1, r2
 801509c:	461a      	mov	r2, r3
 801509e:	460b      	mov	r3, r1
 80150a0:	80fb      	strh	r3, [r7, #6]
 80150a2:	4613      	mov	r3, r2
 80150a4:	717b      	strb	r3, [r7, #5]
    {
        uint16_t stride = lcd().framebufferStride();
 80150a6:	f7fa ff8f 	bl	800ffc8 <_ZN8touchgfx3HAL3lcdEv>
 80150aa:	4603      	mov	r3, r0
 80150ac:	681a      	ldr	r2, [r3, #0]
 80150ae:	3228      	adds	r2, #40	; 0x28
 80150b0:	6812      	ldr	r2, [r2, #0]
 80150b2:	4618      	mov	r0, r3
 80150b4:	4790      	blx	r2
 80150b6:	4603      	mov	r3, r0
 80150b8:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 80150ba:	8b7b      	ldrh	r3, [r7, #26]
 80150bc:	4a25      	ldr	r2, [pc, #148]	; (8015154 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xc4>)
 80150be:	8812      	ldrh	r2, [r2, #0]
 80150c0:	fb02 f303 	mul.w	r3, r2, r3
 80150c4:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 80150c6:	68bb      	ldr	r3, [r7, #8]
 80150c8:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 80150ca:	2300      	movs	r3, #0
 80150cc:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 80150ce:	2300      	movs	r3, #0
 80150d0:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 80150d2:	797b      	ldrb	r3, [r7, #5]
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d005      	beq.n	80150e4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 80150d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80150da:	697b      	ldr	r3, [r7, #20]
 80150dc:	4413      	add	r3, r2
 80150de:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 80150e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150e2:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 80150e4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d005      	beq.n	80150f8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 80150ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80150ee:	697b      	ldr	r3, [r7, #20]
 80150f0:	4413      	add	r3, r2
 80150f2:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 80150f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150f6:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 80150f8:	88fb      	ldrh	r3, [r7, #6]
 80150fa:	2b02      	cmp	r3, #2
 80150fc:	dc10      	bgt.n	8015120 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x90>
 80150fe:	2b00      	cmp	r3, #0
 8015100:	dc13      	bgt.n	801512a <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x9a>
 8015102:	e01c      	b.n	801513e <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xae>
 8015104:	3b04      	subs	r3, #4
 8015106:	4a14      	ldr	r2, [pc, #80]	; (8015158 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xc8>)
 8015108:	fa22 f303 	lsr.w	r3, r2, r3
 801510c:	f003 0301 	and.w	r3, r3, #1
 8015110:	2b00      	cmp	r3, #0
 8015112:	bf14      	ite	ne
 8015114:	2301      	movne	r3, #1
 8015116:	2300      	moveq	r3, #0
 8015118:	b2db      	uxtb	r3, r3
 801511a:	2b00      	cmp	r3, #0
 801511c:	d105      	bne.n	801512a <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x9a>
 801511e:	e00e      	b.n	801513e <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xae>
 8015120:	2b20      	cmp	r3, #32
 8015122:	dc0c      	bgt.n	801513e <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xae>
 8015124:	2b04      	cmp	r3, #4
 8015126:	daed      	bge.n	8015104 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x74>
 8015128:	e009      	b.n	801513e <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xae>
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	681b      	ldr	r3, [r3, #0]
 801512e:	3374      	adds	r3, #116	; 0x74
 8015130:	681c      	ldr	r4, [r3, #0]
 8015132:	69fb      	ldr	r3, [r7, #28]
 8015134:	6a3a      	ldr	r2, [r7, #32]
 8015136:	68b9      	ldr	r1, [r7, #8]
 8015138:	68f8      	ldr	r0, [r7, #12]
 801513a:	47a0      	blx	r4
            break;
 801513c:	e006      	b.n	801514c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xbc>
        default:
            assert(0 && "Unsupported bit depth");
 801513e:	4b07      	ldr	r3, [pc, #28]	; (801515c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xcc>)
 8015140:	4a07      	ldr	r2, [pc, #28]	; (8015160 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xd0>)
 8015142:	f240 3125 	movw	r1, #805	; 0x325
 8015146:	4807      	ldr	r0, [pc, #28]	; (8015164 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xd4>)
 8015148:	f011 fb58 	bl	80267fc <__assert_func>
            break;
        }
    }
 801514c:	bf00      	nop
 801514e:	372c      	adds	r7, #44	; 0x2c
 8015150:	46bd      	mov	sp, r7
 8015152:	bd90      	pop	{r4, r7, pc}
 8015154:	2000c688 	.word	0x2000c688
 8015158:	10101011 	.word	0x10101011
 801515c:	080280e4 	.word	0x080280e4
 8015160:	08028104 	.word	0x08028104
 8015164:	08028158 	.word	0x08028158

08015168 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     *
     * @param [in] frameBuffer      Buffer for frame buffer data, must be non-null.
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8015168:	b580      	push	{r7, lr}
 801516a:	b084      	sub	sp, #16
 801516c:	af00      	add	r7, sp, #0
 801516e:	60f8      	str	r0, [r7, #12]
 8015170:	60b9      	str	r1, [r7, #8]
 8015172:	607a      	str	r2, [r7, #4]
 8015174:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8015176:	68bb      	ldr	r3, [r7, #8]
 8015178:	2b00      	cmp	r3, #0
 801517a:	d106      	bne.n	801518a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 801517c:	4b11      	ldr	r3, [pc, #68]	; (80151c4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 801517e:	4a12      	ldr	r2, [pc, #72]	; (80151c8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8015180:	f240 3137 	movw	r1, #823	; 0x337
 8015184:	4811      	ldr	r0, [pc, #68]	; (80151cc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8015186:	f011 fb39 	bl	80267fc <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	68ba      	ldr	r2, [r7, #8]
 801518e:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	687a      	ldr	r2, [r7, #4]
 8015194:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	683a      	ldr	r2, [r7, #0]
 801519a:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	2b00      	cmp	r3, #0
 80151a0:	bf14      	ite	ne
 80151a2:	2301      	movne	r3, #1
 80151a4:	2300      	moveq	r3, #0
 80151a6:	b2da      	uxtb	r2, r3
 80151a8:	4b09      	ldr	r3, [pc, #36]	; (80151d0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 80151aa:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80151ac:	683b      	ldr	r3, [r7, #0]
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	bf14      	ite	ne
 80151b2:	2301      	movne	r3, #1
 80151b4:	2300      	moveq	r3, #0
 80151b6:	b2da      	uxtb	r2, r3
 80151b8:	4b06      	ldr	r3, [pc, #24]	; (80151d4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 80151ba:	701a      	strb	r2, [r3, #0]
    }
 80151bc:	bf00      	nop
 80151be:	3710      	adds	r7, #16
 80151c0:	46bd      	mov	sp, r7
 80151c2:	bd80      	pop	{r7, pc}
 80151c4:	0802819c 	.word	0x0802819c
 80151c8:	080281d4 	.word	0x080281d4
 80151cc:	08028158 	.word	0x08028158
 80151d0:	2000c68a 	.word	0x2000c68a
 80151d4:	2000c68b 	.word	0x2000c68b

080151d8 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 80151d8:	b580      	push	{r7, lr}
 80151da:	b082      	sub	sp, #8
 80151dc:	af00      	add	r7, sp, #0
 80151de:	6078      	str	r0, [r7, #4]
 80151e0:	460b      	mov	r3, r1
 80151e2:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d004      	beq.n	80151f6 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80151f0:	887a      	ldrh	r2, [r7, #2]
 80151f2:	4610      	mov	r0, r2
 80151f4:	4798      	blx	r3
        }
    }
 80151f6:	bf00      	nop
 80151f8:	3708      	adds	r7, #8
 80151fa:	46bd      	mov	sp, r7
 80151fc:	bd80      	pop	{r7, pc}

080151fe <_ZN8touchgfx3HAL10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 80151fe:	b580      	push	{r7, lr}
 8015200:	b082      	sub	sp, #8
 8015202:	af00      	add	r7, sp, #0
 8015204:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	685a      	ldr	r2, [r3, #4]
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	685b      	ldr	r3, [r3, #4]
 801520e:	681b      	ldr	r3, [r3, #0]
 8015210:	3318      	adds	r3, #24
 8015212:	681b      	ldr	r3, [r3, #0]
 8015214:	4610      	mov	r0, r2
 8015216:	4798      	blx	r3
 8015218:	4603      	mov	r3, r0
    }
 801521a:	4618      	mov	r0, r3
 801521c:	3708      	adds	r7, #8
 801521e:	46bd      	mov	sp, r7
 8015220:	bd80      	pop	{r7, pc}
	...

08015224 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 8015224:	b480      	push	{r7}
 8015226:	b083      	sub	sp, #12
 8015228:	af00      	add	r7, sp, #0
 801522a:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015238:	429a      	cmp	r2, r3
 801523a:	d017      	beq.n	801526c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 801523c:	4b1a      	ldr	r3, [pc, #104]	; (80152a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801523e:	781b      	ldrb	r3, [r3, #0]
 8015240:	2b00      	cmp	r3, #0
 8015242:	d12a      	bne.n	801529a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8015244:	4b19      	ldr	r3, [pc, #100]	; (80152ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8015246:	881a      	ldrh	r2, [r3, #0]
 8015248:	4b19      	ldr	r3, [pc, #100]	; (80152b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801524a:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 801524c:	4b19      	ldr	r3, [pc, #100]	; (80152b4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801524e:	881a      	ldrh	r2, [r3, #0]
 8015250:	4b19      	ldr	r3, [pc, #100]	; (80152b8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8015252:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8015254:	4b16      	ldr	r3, [pc, #88]	; (80152b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8015256:	881a      	ldrh	r2, [r3, #0]
 8015258:	4b16      	ldr	r3, [pc, #88]	; (80152b4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801525a:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 801525c:	4b16      	ldr	r3, [pc, #88]	; (80152b8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801525e:	881a      	ldrh	r2, [r3, #0]
 8015260:	4b12      	ldr	r3, [pc, #72]	; (80152ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8015262:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8015264:	4b10      	ldr	r3, [pc, #64]	; (80152a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8015266:	2201      	movs	r2, #1
 8015268:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 801526a:	e016      	b.n	801529a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 801526c:	4b0e      	ldr	r3, [pc, #56]	; (80152a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801526e:	781b      	ldrb	r3, [r3, #0]
 8015270:	2b00      	cmp	r3, #0
 8015272:	d012      	beq.n	801529a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8015274:	4b0f      	ldr	r3, [pc, #60]	; (80152b4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8015276:	881a      	ldrh	r2, [r3, #0]
 8015278:	4b0d      	ldr	r3, [pc, #52]	; (80152b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801527a:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 801527c:	4b0b      	ldr	r3, [pc, #44]	; (80152ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801527e:	881a      	ldrh	r2, [r3, #0]
 8015280:	4b0d      	ldr	r3, [pc, #52]	; (80152b8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8015282:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8015284:	4b0c      	ldr	r3, [pc, #48]	; (80152b8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8015286:	881a      	ldrh	r2, [r3, #0]
 8015288:	4b0a      	ldr	r3, [pc, #40]	; (80152b4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801528a:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 801528c:	4b08      	ldr	r3, [pc, #32]	; (80152b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801528e:	881a      	ldrh	r2, [r3, #0]
 8015290:	4b06      	ldr	r3, [pc, #24]	; (80152ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8015292:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8015294:	4b04      	ldr	r3, [pc, #16]	; (80152a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8015296:	2200      	movs	r2, #0
 8015298:	701a      	strb	r2, [r3, #0]
    }
 801529a:	bf00      	nop
 801529c:	370c      	adds	r7, #12
 801529e:	46bd      	mov	sp, r7
 80152a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a4:	4770      	bx	lr
 80152a6:	bf00      	nop
 80152a8:	2000c684 	.word	0x2000c684
 80152ac:	2000c680 	.word	0x2000c680
 80152b0:	2000c686 	.word	0x2000c686
 80152b4:	2000c682 	.word	0x2000c682
 80152b8:	2000c688 	.word	0x2000c688

080152bc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80152bc:	b580      	push	{r7, lr}
 80152be:	b082      	sub	sp, #8
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	4618      	mov	r0, r3
 80152c8:	f002 fa4a 	bl	8017760 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 80152cc:	bf00      	nop
 80152ce:	3708      	adds	r7, #8
 80152d0:	46bd      	mov	sp, r7
 80152d2:	bd80      	pop	{r7, pc}

080152d4 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80152d4:	b580      	push	{r7, lr}
 80152d6:	b082      	sub	sp, #8
 80152d8:	af00      	add	r7, sp, #0
 80152da:	6078      	str	r0, [r7, #4]
 80152dc:	4a05      	ldr	r2, [pc, #20]	; (80152f4 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	601a      	str	r2, [r3, #0]
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	4618      	mov	r0, r3
 80152e6:	f7ff fe71 	bl	8014fcc <_ZN8touchgfx3HALD1Ev>
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	4618      	mov	r0, r3
 80152ee:	3708      	adds	r7, #8
 80152f0:	46bd      	mov	sp, r7
 80152f2:	bd80      	pop	{r7, pc}
 80152f4:	0802893c 	.word	0x0802893c

080152f8 <_ZN20TouchGFXGeneratedHALD0Ev>:
 80152f8:	b580      	push	{r7, lr}
 80152fa:	b082      	sub	sp, #8
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	6078      	str	r0, [r7, #4]
 8015300:	6878      	ldr	r0, [r7, #4]
 8015302:	f7ff ffe7 	bl	80152d4 <_ZN20TouchGFXGeneratedHALD1Ev>
 8015306:	2178      	movs	r1, #120	; 0x78
 8015308:	6878      	ldr	r0, [r7, #4]
 801530a:	f011 fa49 	bl	80267a0 <_ZdlPvj>
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	4618      	mov	r0, r3
 8015312:	3708      	adds	r7, #8
 8015314:	46bd      	mov	sp, r7
 8015316:	bd80      	pop	{r7, pc}

08015318 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8015318:	b580      	push	{r7, lr}
 801531a:	b082      	sub	sp, #8
 801531c:	af00      	add	r7, sp, #0
 801531e:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	4618      	mov	r0, r3
 8015324:	f7ff ffca 	bl	80152bc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8015328:	bf00      	nop
 801532a:	3708      	adds	r7, #8
 801532c:	46bd      	mov	sp, r7
 801532e:	bd80      	pop	{r7, pc}

08015330 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8015330:	b580      	push	{r7, lr}
 8015332:	b082      	sub	sp, #8
 8015334:	af00      	add	r7, sp, #0
 8015336:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	4618      	mov	r0, r3
 801533c:	f001 fb18 	bl	8016970 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8015340:	bf00      	nop
 8015342:	3708      	adds	r7, #8
 8015344:	46bd      	mov	sp, r7
 8015346:	bd80      	pop	{r7, pc}

08015348 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8015348:	b580      	push	{r7, lr}
 801534a:	b082      	sub	sp, #8
 801534c:	af00      	add	r7, sp, #0
 801534e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	4618      	mov	r0, r3
 8015354:	f001 fb98 	bl	8016a88 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8015358:	4603      	mov	r3, r0
}
 801535a:	4618      	mov	r0, r3
 801535c:	3708      	adds	r7, #8
 801535e:	46bd      	mov	sp, r7
 8015360:	bd80      	pop	{r7, pc}

08015362 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8015362:	b580      	push	{r7, lr}
 8015364:	b082      	sub	sp, #8
 8015366:	af00      	add	r7, sp, #0
 8015368:	6078      	str	r0, [r7, #4]
 801536a:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	6839      	ldr	r1, [r7, #0]
 8015370:	4618      	mov	r0, r3
 8015372:	f001 fb97 	bl	8016aa4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8015376:	bf00      	nop
 8015378:	3708      	adds	r7, #8
 801537a:	46bd      	mov	sp, r7
 801537c:	bd80      	pop	{r7, pc}

0801537e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801537e:	b580      	push	{r7, lr}
 8015380:	b082      	sub	sp, #8
 8015382:	af00      	add	r7, sp, #0
 8015384:	6078      	str	r0, [r7, #4]
 8015386:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	6839      	ldr	r1, [r7, #0]
 801538c:	4618      	mov	r0, r3
 801538e:	f001 fb9f 	bl	8016ad0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
}
 8015392:	bf00      	nop
 8015394:	3708      	adds	r7, #8
 8015396:	46bd      	mov	sp, r7
 8015398:	bd80      	pop	{r7, pc}

0801539a <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 801539a:	b580      	push	{r7, lr}
 801539c:	b082      	sub	sp, #8
 801539e:	af00      	add	r7, sp, #0
 80153a0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	4618      	mov	r0, r3
 80153a6:	f001 fb15 	bl	80169d4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 80153aa:	bf00      	nop
 80153ac:	3708      	adds	r7, #8
 80153ae:	46bd      	mov	sp, r7
 80153b0:	bd80      	pop	{r7, pc}

080153b2 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 80153b2:	b580      	push	{r7, lr}
 80153b4:	b082      	sub	sp, #8
 80153b6:	af00      	add	r7, sp, #0
 80153b8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	4618      	mov	r0, r3
 80153be:	f001 fb19 	bl	80169f4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80153c2:	bf00      	nop
 80153c4:	3708      	adds	r7, #8
 80153c6:	46bd      	mov	sp, r7
 80153c8:	bd80      	pop	{r7, pc}

080153ca <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 80153ca:	b580      	push	{r7, lr}
 80153cc:	b082      	sub	sp, #8
 80153ce:	af00      	add	r7, sp, #0
 80153d0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	4618      	mov	r0, r3
 80153d6:	f001 fb1b 	bl	8016a10 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80153da:	bf00      	nop
 80153dc:	3708      	adds	r7, #8
 80153de:	46bd      	mov	sp, r7
 80153e0:	bd80      	pop	{r7, pc}

080153e2 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 80153e2:	b580      	push	{r7, lr}
 80153e4:	b082      	sub	sp, #8
 80153e6:	af00      	add	r7, sp, #0
 80153e8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	4618      	mov	r0, r3
 80153ee:	f001 fb1d 	bl	8016a2c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80153f2:	bf00      	nop
 80153f4:	3708      	adds	r7, #8
 80153f6:	46bd      	mov	sp, r7
 80153f8:	bd80      	pop	{r7, pc}
	...

080153fc <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80153fc:	b580      	push	{r7, lr}
 80153fe:	b082      	sub	sp, #8
 8015400:	af00      	add	r7, sp, #0
 8015402:	6078      	str	r0, [r7, #4]
 8015404:	4a05      	ldr	r2, [pc, #20]	; (801541c <_ZN11TouchGFXHALD1Ev+0x20>)
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	601a      	str	r2, [r3, #0]
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	4618      	mov	r0, r3
 801540e:	f7ff ff61 	bl	80152d4 <_ZN20TouchGFXGeneratedHALD1Ev>
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	4618      	mov	r0, r3
 8015416:	3708      	adds	r7, #8
 8015418:	46bd      	mov	sp, r7
 801541a:	bd80      	pop	{r7, pc}
 801541c:	08028740 	.word	0x08028740

08015420 <_ZN11TouchGFXHALD0Ev>:
 8015420:	b580      	push	{r7, lr}
 8015422:	b082      	sub	sp, #8
 8015424:	af00      	add	r7, sp, #0
 8015426:	6078      	str	r0, [r7, #4]
 8015428:	6878      	ldr	r0, [r7, #4]
 801542a:	f7ff ffe7 	bl	80153fc <_ZN11TouchGFXHALD1Ev>
 801542e:	2178      	movs	r1, #120	; 0x78
 8015430:	6878      	ldr	r0, [r7, #4]
 8015432:	f011 f9b5 	bl	80267a0 <_ZdlPvj>
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	4618      	mov	r0, r3
 801543a:	3708      	adds	r7, #8
 801543c:	46bd      	mov	sp, r7
 801543e:	bd80      	pop	{r7, pc}

08015440 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8015440:	b580      	push	{r7, lr}
 8015442:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 8015444:	2203      	movs	r2, #3
 8015446:	2100      	movs	r1, #0
 8015448:	2001      	movs	r0, #1
 801544a:	f7f7 fd17 	bl	800ce7c <xQueueGenericCreate>
 801544e:	4603      	mov	r3, r0
 8015450:	4a0b      	ldr	r2, [pc, #44]	; (8015480 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8015452:	6013      	str	r3, [r2, #0]
 8015454:	4b0a      	ldr	r3, [pc, #40]	; (8015480 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	2b00      	cmp	r3, #0
 801545a:	d006      	beq.n	801546a <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 801545c:	4b08      	ldr	r3, [pc, #32]	; (8015480 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 801545e:	6818      	ldr	r0, [r3, #0]
 8015460:	2300      	movs	r3, #0
 8015462:	2200      	movs	r2, #0
 8015464:	2100      	movs	r1, #0
 8015466:	f7f7 fd6b 	bl	800cf40 <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 801546a:	2200      	movs	r2, #0
 801546c:	2101      	movs	r1, #1
 801546e:	2001      	movs	r0, #1
 8015470:	f7f7 fd04 	bl	800ce7c <xQueueGenericCreate>
 8015474:	4603      	mov	r3, r0
 8015476:	4a03      	ldr	r2, [pc, #12]	; (8015484 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8015478:	6013      	str	r3, [r2, #0]
}
 801547a:	bf00      	nop
 801547c:	bd80      	pop	{r7, pc}
 801547e:	bf00      	nop
 8015480:	20008ee4 	.word	0x20008ee4
 8015484:	20008ee8 	.word	0x20008ee8

08015488 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8015488:	b580      	push	{r7, lr}
 801548a:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 801548c:	4b04      	ldr	r3, [pc, #16]	; (80154a0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 801548e:	681b      	ldr	r3, [r3, #0]
 8015490:	f04f 31ff 	mov.w	r1, #4294967295
 8015494:	4618      	mov	r0, r3
 8015496:	f7f8 f875 	bl	800d584 <xQueueSemaphoreTake>
}
 801549a:	bf00      	nop
 801549c:	bd80      	pop	{r7, pc}
 801549e:	bf00      	nop
 80154a0:	20008ee4 	.word	0x20008ee4

080154a4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80154a4:	b580      	push	{r7, lr}
 80154a6:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 80154a8:	4b04      	ldr	r3, [pc, #16]	; (80154bc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 80154aa:	6818      	ldr	r0, [r3, #0]
 80154ac:	2300      	movs	r3, #0
 80154ae:	2200      	movs	r2, #0
 80154b0:	2100      	movs	r1, #0
 80154b2:	f7f7 fd45 	bl	800cf40 <xQueueGenericSend>
}
 80154b6:	bf00      	nop
 80154b8:	bd80      	pop	{r7, pc}
 80154ba:	bf00      	nop
 80154bc:	20008ee4 	.word	0x20008ee4

080154c0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80154c0:	b580      	push	{r7, lr}
 80154c2:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 80154c4:	4b03      	ldr	r3, [pc, #12]	; (80154d4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 80154c6:	681b      	ldr	r3, [r3, #0]
 80154c8:	2100      	movs	r1, #0
 80154ca:	4618      	mov	r0, r3
 80154cc:	f7f8 f85a 	bl	800d584 <xQueueSemaphoreTake>
}
 80154d0:	bf00      	nop
 80154d2:	bd80      	pop	{r7, pc}
 80154d4:	20008ee4 	.word	0x20008ee4

080154d8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80154d8:	b580      	push	{r7, lr}
 80154da:	b082      	sub	sp, #8
 80154dc:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 80154de:	2300      	movs	r3, #0
 80154e0:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 80154e2:	4b0b      	ldr	r3, [pc, #44]	; (8015510 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 80154e4:	681b      	ldr	r3, [r3, #0]
 80154e6:	1d3a      	adds	r2, r7, #4
 80154e8:	4611      	mov	r1, r2
 80154ea:	4618      	mov	r0, r3
 80154ec:	f7f7 fece 	bl	800d28c <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	d007      	beq.n	8015506 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 80154f6:	4b07      	ldr	r3, [pc, #28]	; (8015514 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 80154f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80154fc:	601a      	str	r2, [r3, #0]
 80154fe:	f3bf 8f4f 	dsb	sy
 8015502:	f3bf 8f6f 	isb	sy
}
 8015506:	bf00      	nop
 8015508:	3708      	adds	r7, #8
 801550a:	46bd      	mov	sp, r7
 801550c:	bd80      	pop	{r7, pc}
 801550e:	bf00      	nop
 8015510:	20008ee4 	.word	0x20008ee4
 8015514:	e000ed04 	.word	0xe000ed04

08015518 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8015518:	b580      	push	{r7, lr}
 801551a:	b082      	sub	sp, #8
 801551c:	af00      	add	r7, sp, #0
    if (vsync_q)
 801551e:	4b0e      	ldr	r3, [pc, #56]	; (8015558 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8015520:	681b      	ldr	r3, [r3, #0]
 8015522:	2b00      	cmp	r3, #0
 8015524:	d013      	beq.n	801554e <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 8015526:	2300      	movs	r3, #0
 8015528:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 801552a:	4b0b      	ldr	r3, [pc, #44]	; (8015558 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 801552c:	6818      	ldr	r0, [r3, #0]
 801552e:	1d3a      	adds	r2, r7, #4
 8015530:	2300      	movs	r3, #0
 8015532:	490a      	ldr	r1, [pc, #40]	; (801555c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 8015534:	f7f7 fe0a 	bl	800d14c <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	2b00      	cmp	r3, #0
 801553c:	d007      	beq.n	801554e <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 801553e:	4b08      	ldr	r3, [pc, #32]	; (8015560 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 8015540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015544:	601a      	str	r2, [r3, #0]
 8015546:	f3bf 8f4f 	dsb	sy
 801554a:	f3bf 8f6f 	isb	sy
    }
}
 801554e:	bf00      	nop
 8015550:	3708      	adds	r7, #8
 8015552:	46bd      	mov	sp, r7
 8015554:	bd80      	pop	{r7, pc}
 8015556:	bf00      	nop
 8015558:	20008ee8 	.word	0x20008ee8
 801555c:	2000004b 	.word	0x2000004b
 8015560:	e000ed04 	.word	0xe000ed04

08015564 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8015564:	b580      	push	{r7, lr}
 8015566:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 8015568:	4b08      	ldr	r3, [pc, #32]	; (801558c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 801556a:	681b      	ldr	r3, [r3, #0]
 801556c:	2200      	movs	r2, #0
 801556e:	4908      	ldr	r1, [pc, #32]	; (8015590 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8015570:	4618      	mov	r0, r3
 8015572:	f7f7 ff21 	bl	800d3b8 <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 8015576:	4b05      	ldr	r3, [pc, #20]	; (801558c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8015578:	681b      	ldr	r3, [r3, #0]
 801557a:	f04f 32ff 	mov.w	r2, #4294967295
 801557e:	4904      	ldr	r1, [pc, #16]	; (8015590 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8015580:	4618      	mov	r0, r3
 8015582:	f7f7 ff19 	bl	800d3b8 <xQueueReceive>
}
 8015586:	bf00      	nop
 8015588:	bd80      	pop	{r7, pc}
 801558a:	bf00      	nop
 801558c:	20008ee8 	.word	0x20008ee8
 8015590:	2000004b 	.word	0x2000004b

08015594 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8015594:	b580      	push	{r7, lr}
 8015596:	b082      	sub	sp, #8
 8015598:	af00      	add	r7, sp, #0
 801559a:	4603      	mov	r3, r0
 801559c:	80fb      	strh	r3, [r7, #6]
    vTaskDelay(ms);
 801559e:	88fb      	ldrh	r3, [r7, #6]
 80155a0:	4618      	mov	r0, r3
 80155a2:	f7f8 fc57 	bl	800de54 <vTaskDelay>
}
 80155a6:	bf00      	nop
 80155a8:	3708      	adds	r7, #8
 80155aa:	46bd      	mov	sp, r7
 80155ac:	bd80      	pop	{r7, pc}
	...

080155b0 <__NVIC_EnableIRQ>:
{
 80155b0:	b480      	push	{r7}
 80155b2:	b083      	sub	sp, #12
 80155b4:	af00      	add	r7, sp, #0
 80155b6:	4603      	mov	r3, r0
 80155b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80155ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80155be:	2b00      	cmp	r3, #0
 80155c0:	db0b      	blt.n	80155da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80155c2:	79fb      	ldrb	r3, [r7, #7]
 80155c4:	f003 021f 	and.w	r2, r3, #31
 80155c8:	4907      	ldr	r1, [pc, #28]	; (80155e8 <__NVIC_EnableIRQ+0x38>)
 80155ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80155ce:	095b      	lsrs	r3, r3, #5
 80155d0:	2001      	movs	r0, #1
 80155d2:	fa00 f202 	lsl.w	r2, r0, r2
 80155d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80155da:	bf00      	nop
 80155dc:	370c      	adds	r7, #12
 80155de:	46bd      	mov	sp, r7
 80155e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155e4:	4770      	bx	lr
 80155e6:	bf00      	nop
 80155e8:	e000e100 	.word	0xe000e100

080155ec <__NVIC_DisableIRQ>:
{
 80155ec:	b480      	push	{r7}
 80155ee:	b083      	sub	sp, #12
 80155f0:	af00      	add	r7, sp, #0
 80155f2:	4603      	mov	r3, r0
 80155f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80155f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	db12      	blt.n	8015624 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80155fe:	79fb      	ldrb	r3, [r7, #7]
 8015600:	f003 021f 	and.w	r2, r3, #31
 8015604:	490a      	ldr	r1, [pc, #40]	; (8015630 <__NVIC_DisableIRQ+0x44>)
 8015606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801560a:	095b      	lsrs	r3, r3, #5
 801560c:	2001      	movs	r0, #1
 801560e:	fa00 f202 	lsl.w	r2, r0, r2
 8015612:	3320      	adds	r3, #32
 8015614:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8015618:	f3bf 8f4f 	dsb	sy
}
 801561c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801561e:	f3bf 8f6f 	isb	sy
}
 8015622:	bf00      	nop
}
 8015624:	bf00      	nop
 8015626:	370c      	adds	r7, #12
 8015628:	46bd      	mov	sp, r7
 801562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801562e:	4770      	bx	lr
 8015630:	e000e100 	.word	0xe000e100

08015634 <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 8015634:	b480      	push	{r7}
 8015636:	b083      	sub	sp, #12
 8015638:	af00      	add	r7, sp, #0
 801563a:	6078      	str	r0, [r7, #4]
        return color;
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	681b      	ldr	r3, [r3, #0]
    }
 8015640:	4618      	mov	r0, r3
 8015642:	370c      	adds	r7, #12
 8015644:	46bd      	mov	sp, r7
 8015646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801564a:	4770      	bx	lr

0801564c <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 801564c:	b480      	push	{r7}
 801564e:	b083      	sub	sp, #12
 8015650:	af00      	add	r7, sp, #0
 8015652:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	b29b      	uxth	r3, r3
    }
 801565a:	4618      	mov	r0, r3
 801565c:	370c      	adds	r7, #12
 801565e:	46bd      	mov	sp, r7
 8015660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015664:	4770      	bx	lr
	...

08015668 <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 8015668:	b480      	push	{r7}
 801566a:	b083      	sub	sp, #12
 801566c:	af00      	add	r7, sp, #0
 801566e:	6078      	str	r0, [r7, #4]
    {
 8015670:	4a04      	ldr	r2, [pc, #16]	; (8015684 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	601a      	str	r2, [r3, #0]
    }
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	4618      	mov	r0, r3
 801567a:	370c      	adds	r7, #12
 801567c:	46bd      	mov	sp, r7
 801567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015682:	4770      	bx	lr
 8015684:	08028844 	.word	0x08028844

08015688 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8015688:	b580      	push	{r7, lr}
 801568a:	b082      	sub	sp, #8
 801568c:	af00      	add	r7, sp, #0
 801568e:	6078      	str	r0, [r7, #4]
    }
 8015690:	6878      	ldr	r0, [r7, #4]
 8015692:	f7ff ffe9 	bl	8015668 <_ZN8touchgfx9DMA_QueueD1Ev>
 8015696:	2104      	movs	r1, #4
 8015698:	6878      	ldr	r0, [r7, #4]
 801569a:	f011 f881 	bl	80267a0 <_ZdlPvj>
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	4618      	mov	r0, r3
 80156a2:	3708      	adds	r7, #8
 80156a4:	46bd      	mov	sp, r7
 80156a6:	bd80      	pop	{r7, pc}

080156a8 <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 80156a8:	b580      	push	{r7, lr}
 80156aa:	b082      	sub	sp, #8
 80156ac:	af00      	add	r7, sp, #0
 80156ae:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	681b      	ldr	r3, [r3, #0]
 80156b4:	3344      	adds	r3, #68	; 0x44
 80156b6:	681b      	ldr	r3, [r3, #0]
 80156b8:	6878      	ldr	r0, [r7, #4]
 80156ba:	4798      	blx	r3
    }
 80156bc:	bf00      	nop
 80156be:	3708      	adds	r7, #8
 80156c0:	46bd      	mov	sp, r7
 80156c2:	bd80      	pop	{r7, pc}

080156c4 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 80156c4:	b480      	push	{r7}
 80156c6:	b083      	sub	sp, #12
 80156c8:	af00      	add	r7, sp, #0
 80156ca:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 80156cc:	2300      	movs	r3, #0
    }
 80156ce:	4618      	mov	r0, r3
 80156d0:	370c      	adds	r7, #12
 80156d2:	46bd      	mov	sp, r7
 80156d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d8:	4770      	bx	lr
	...

080156dc <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 80156dc:	b480      	push	{r7}
 80156de:	b083      	sub	sp, #12
 80156e0:	af00      	add	r7, sp, #0
 80156e2:	6078      	str	r0, [r7, #4]
    {
 80156e4:	4a04      	ldr	r2, [pc, #16]	; (80156f8 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	601a      	str	r2, [r3, #0]
    }
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	4618      	mov	r0, r3
 80156ee:	370c      	adds	r7, #12
 80156f0:	46bd      	mov	sp, r7
 80156f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f6:	4770      	bx	lr
 80156f8:	0802984c 	.word	0x0802984c

080156fc <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 80156fc:	b580      	push	{r7, lr}
 80156fe:	b082      	sub	sp, #8
 8015700:	af00      	add	r7, sp, #0
 8015702:	6078      	str	r0, [r7, #4]
    }
 8015704:	6878      	ldr	r0, [r7, #4]
 8015706:	f7ff ffe9 	bl	80156dc <_ZN8touchgfx13DMA_InterfaceD1Ev>
 801570a:	210c      	movs	r1, #12
 801570c:	6878      	ldr	r0, [r7, #4]
 801570e:	f011 f847 	bl	80267a0 <_ZdlPvj>
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	4618      	mov	r0, r3
 8015716:	3708      	adds	r7, #8
 8015718:	46bd      	mov	sp, r7
 801571a:	bd80      	pop	{r7, pc}

0801571c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 801571c:	b480      	push	{r7}
 801571e:	b083      	sub	sp, #12
 8015720:	af00      	add	r7, sp, #0
 8015722:	6078      	str	r0, [r7, #4]
 8015724:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8015726:	4a09      	ldr	r2, [pc, #36]	; (801574c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	601a      	str	r2, [r3, #0]
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	683a      	ldr	r2, [r7, #0]
 8015730:	605a      	str	r2, [r3, #4]
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	2200      	movs	r2, #0
 8015736:	721a      	strb	r2, [r3, #8]
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	2200      	movs	r2, #0
 801573c:	725a      	strb	r2, [r3, #9]
    {
    }
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	4618      	mov	r0, r3
 8015742:	370c      	adds	r7, #12
 8015744:	46bd      	mov	sp, r7
 8015746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801574a:	4770      	bx	lr
 801574c:	0802984c 	.word	0x0802984c

08015750 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8015750:	b580      	push	{r7, lr}
 8015752:	b082      	sub	sp, #8
 8015754:	af00      	add	r7, sp, #0
 8015756:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	685a      	ldr	r2, [r3, #4]
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	685b      	ldr	r3, [r3, #4]
 8015760:	681b      	ldr	r3, [r3, #0]
 8015762:	3314      	adds	r3, #20
 8015764:	681b      	ldr	r3, [r3, #0]
 8015766:	4610      	mov	r0, r2
 8015768:	4798      	blx	r3
    }
 801576a:	bf00      	nop
 801576c:	3708      	adds	r7, #8
 801576e:	46bd      	mov	sp, r7
 8015770:	bd80      	pop	{r7, pc}

08015772 <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8015772:	b580      	push	{r7, lr}
 8015774:	b082      	sub	sp, #8
 8015776:	af00      	add	r7, sp, #0
 8015778:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 801577a:	687a      	ldr	r2, [r7, #4]
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	681b      	ldr	r3, [r3, #0]
 8015780:	3328      	adds	r3, #40	; 0x28
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	4610      	mov	r0, r2
 8015786:	4798      	blx	r3
    }
 8015788:	bf00      	nop
 801578a:	3708      	adds	r7, #8
 801578c:	46bd      	mov	sp, r7
 801578e:	bd80      	pop	{r7, pc}

08015790 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 8015790:	b480      	push	{r7}
 8015792:	b085      	sub	sp, #20
 8015794:	af00      	add	r7, sp, #0
 8015796:	60f8      	str	r0, [r7, #12]
 8015798:	60b9      	str	r1, [r7, #8]
 801579a:	607a      	str	r2, [r7, #4]
 801579c:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80157a8:	68fb      	ldr	r3, [r7, #12]
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	68ba      	ldr	r2, [r7, #8]
 80157ae:	430a      	orrs	r2, r1
 80157b0:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	681b      	ldr	r3, [r3, #0]
 80157b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80157b8:	f023 0107 	bic.w	r1, r3, #7
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	681b      	ldr	r3, [r3, #0]
 80157c0:	687a      	ldr	r2, [r7, #4]
 80157c2:	430a      	orrs	r2, r1
 80157c4:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 80157c6:	68fb      	ldr	r3, [r7, #12]
 80157c8:	681b      	ldr	r3, [r3, #0]
 80157ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80157cc:	4b06      	ldr	r3, [pc, #24]	; (80157e8 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 80157ce:	4013      	ands	r3, r2
 80157d0:	68fa      	ldr	r2, [r7, #12]
 80157d2:	6812      	ldr	r2, [r2, #0]
 80157d4:	6839      	ldr	r1, [r7, #0]
 80157d6:	430b      	orrs	r3, r1
 80157d8:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 80157da:	2300      	movs	r3, #0
}
 80157dc:	4618      	mov	r0, r3
 80157de:	3714      	adds	r7, #20
 80157e0:	46bd      	mov	sp, r7
 80157e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157e6:	4770      	bx	lr
 80157e8:	ffffc000 	.word	0xffffc000

080157ec <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b082      	sub	sp, #8
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	6078      	str	r0, [r7, #4]
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END DMA2D_XferCpltCallback */

    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 80157f4:	f7fa fbdc 	bl	800ffb0 <_ZN8touchgfx3HAL11getInstanceEv>
 80157f8:	4603      	mov	r3, r0
 80157fa:	4618      	mov	r0, r3
 80157fc:	f7ff ffa8 	bl	8015750 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 8015800:	bf00      	nop
 8015802:	3708      	adds	r7, #8
 8015804:	46bd      	mov	sp, r7
 8015806:	bd80      	pop	{r7, pc}

08015808 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 8015808:	b580      	push	{r7, lr}
 801580a:	b082      	sub	sp, #8
 801580c:	af00      	add	r7, sp, #0
 801580e:	6078      	str	r0, [r7, #4]
    assert(0);
 8015810:	4b02      	ldr	r3, [pc, #8]	; (801581c <DMA2D_XferErrorCallback+0x14>)
 8015812:	4a03      	ldr	r2, [pc, #12]	; (8015820 <DMA2D_XferErrorCallback+0x18>)
 8015814:	213e      	movs	r1, #62	; 0x3e
 8015816:	4803      	ldr	r0, [pc, #12]	; (8015824 <DMA2D_XferErrorCallback+0x1c>)
 8015818:	f010 fff0 	bl	80267fc <__assert_func>
 801581c:	08028224 	.word	0x08028224
 8015820:	08028228 	.word	0x08028228
 8015824:	0802825c 	.word	0x0802825c

08015828 <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 8015828:	b580      	push	{r7, lr}
 801582a:	b082      	sub	sp, #8
 801582c:	af00      	add	r7, sp, #0
 801582e:	6078      	str	r0, [r7, #4]
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	3318      	adds	r3, #24
 8015834:	4618      	mov	r0, r3
 8015836:	f7fe fdc1 	bl	80143bc <_ZN8touchgfx9colortypeC1Ev>
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	4618      	mov	r0, r3
 801583e:	3708      	adds	r7, #8
 8015840:	46bd      	mov	sp, r7
 8015842:	bd80      	pop	{r7, pc}

08015844 <_ZN10STM32F7DMAC1Ev>:
}

}

STM32F7DMA::STM32F7DMA()
 8015844:	b5b0      	push	{r4, r5, r7, lr}
 8015846:	b082      	sub	sp, #8
 8015848:	af00      	add	r7, sp, #0
 801584a:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 801584c:	687a      	ldr	r2, [r7, #4]
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	330c      	adds	r3, #12
 8015852:	4619      	mov	r1, r3
 8015854:	4610      	mov	r0, r2
 8015856:	f7ff ff61 	bl	801571c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 801585a:	4a0e      	ldr	r2, [pc, #56]	; (8015894 <_ZN10STM32F7DMAC1Ev+0x50>)
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	601a      	str	r2, [r3, #0]
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	f103 000c 	add.w	r0, r3, #12
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	3320      	adds	r3, #32
 801586a:	2260      	movs	r2, #96	; 0x60
 801586c:	4619      	mov	r1, r3
 801586e:	f002 fe1b 	bl	80184a8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	3320      	adds	r3, #32
 8015876:	245f      	movs	r4, #95	; 0x5f
 8015878:	461d      	mov	r5, r3
 801587a:	e004      	b.n	8015886 <_ZN10STM32F7DMAC1Ev+0x42>
 801587c:	4628      	mov	r0, r5
 801587e:	f7ff ffd3 	bl	8015828 <_ZN8touchgfx6BlitOpC1Ev>
 8015882:	3520      	adds	r5, #32
 8015884:	3c01      	subs	r4, #1
 8015886:	2c00      	cmp	r4, #0
 8015888:	daf8      	bge.n	801587c <_ZN10STM32F7DMAC1Ev+0x38>
{}
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	4618      	mov	r0, r3
 801588e:	3708      	adds	r7, #8
 8015890:	46bd      	mov	sp, r7
 8015892:	bdb0      	pop	{r4, r5, r7, pc}
 8015894:	080287f4 	.word	0x080287f4

08015898 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8015898:	b580      	push	{r7, lr}
 801589a:	b082      	sub	sp, #8
 801589c:	af00      	add	r7, sp, #0
 801589e:	6078      	str	r0, [r7, #4]
 80158a0:	4a0b      	ldr	r2, [pc, #44]	; (80158d0 <_ZN10STM32F7DMAD1Ev+0x38>)
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 80158a6:	480b      	ldr	r0, [pc, #44]	; (80158d4 <_ZN10STM32F7DMAD1Ev+0x3c>)
 80158a8:	f7ef fe6e 	bl	8005588 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 80158ac:	205a      	movs	r0, #90	; 0x5a
 80158ae:	f7ff fe9d 	bl	80155ec <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	330c      	adds	r3, #12
 80158b6:	4618      	mov	r0, r3
 80158b8:	f000 faa8 	bl	8015e0c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	4618      	mov	r0, r3
 80158c0:	f7ff ff0c 	bl	80156dc <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	4618      	mov	r0, r3
 80158c8:	3708      	adds	r7, #8
 80158ca:	46bd      	mov	sp, r7
 80158cc:	bd80      	pop	{r7, pc}
 80158ce:	bf00      	nop
 80158d0:	080287f4 	.word	0x080287f4
 80158d4:	20000484 	.word	0x20000484

080158d8 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 80158d8:	b580      	push	{r7, lr}
 80158da:	b082      	sub	sp, #8
 80158dc:	af00      	add	r7, sp, #0
 80158de:	6078      	str	r0, [r7, #4]
}
 80158e0:	6878      	ldr	r0, [r7, #4]
 80158e2:	f7ff ffd9 	bl	8015898 <_ZN10STM32F7DMAD1Ev>
 80158e6:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 80158ea:	6878      	ldr	r0, [r7, #4]
 80158ec:	f010 ff58 	bl	80267a0 <_ZdlPvj>
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	4618      	mov	r0, r3
 80158f4:	3708      	adds	r7, #8
 80158f6:	46bd      	mov	sp, r7
 80158f8:	bd80      	pop	{r7, pc}
	...

080158fc <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 80158fc:	b580      	push	{r7, lr}
 80158fe:	b082      	sub	sp, #8
 8015900:	af00      	add	r7, sp, #0
 8015902:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 8015904:	4b09      	ldr	r3, [pc, #36]	; (801592c <_ZN10STM32F7DMA10initializeEv+0x30>)
 8015906:	4a0a      	ldr	r2, [pc, #40]	; (8015930 <_ZN10STM32F7DMA10initializeEv+0x34>)
 8015908:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 801590a:	4808      	ldr	r0, [pc, #32]	; (801592c <_ZN10STM32F7DMA10initializeEv+0x30>)
 801590c:	f7ef fdf2 	bl	80054f4 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8015910:	4b06      	ldr	r3, [pc, #24]	; (801592c <_ZN10STM32F7DMA10initializeEv+0x30>)
 8015912:	4a08      	ldr	r2, [pc, #32]	; (8015934 <_ZN10STM32F7DMA10initializeEv+0x38>)
 8015914:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8015916:	4b05      	ldr	r3, [pc, #20]	; (801592c <_ZN10STM32F7DMA10initializeEv+0x30>)
 8015918:	4a07      	ldr	r2, [pc, #28]	; (8015938 <_ZN10STM32F7DMA10initializeEv+0x3c>)
 801591a:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 801591c:	205a      	movs	r0, #90	; 0x5a
 801591e:	f7ff fe47 	bl	80155b0 <__NVIC_EnableIRQ>
}
 8015922:	bf00      	nop
 8015924:	3708      	adds	r7, #8
 8015926:	46bd      	mov	sp, r7
 8015928:	bd80      	pop	{r7, pc}
 801592a:	bf00      	nop
 801592c:	20000484 	.word	0x20000484
 8015930:	4002b000 	.word	0x4002b000
 8015934:	080157ed 	.word	0x080157ed
 8015938:	08015809 	.word	0x08015809

0801593c <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 801593c:	b480      	push	{r7}
 801593e:	b083      	sub	sp, #12
 8015940:	af00      	add	r7, sp, #0
 8015942:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 8015944:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 8015948:	4618      	mov	r0, r3
 801594a:	370c      	adds	r7, #12
 801594c:	46bd      	mov	sp, r7
 801594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015952:	4770      	bx	lr

08015954 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 8015954:	b590      	push	{r4, r7, lr}
 8015956:	b08d      	sub	sp, #52	; 0x34
 8015958:	af02      	add	r7, sp, #8
 801595a:	6078      	str	r0, [r7, #4]
 801595c:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 801595e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8015962:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 8015964:	2300      	movs	r3, #0
 8015966:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8015968:	683b      	ldr	r3, [r7, #0]
 801596a:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 801596c:	2b20      	cmp	r3, #32
 801596e:	d007      	beq.n	8015980 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 8015970:	683b      	ldr	r3, [r7, #0]
 8015972:	681b      	ldr	r3, [r3, #0]
 8015974:	2b40      	cmp	r3, #64	; 0x40
 8015976:	d003      	beq.n	8015980 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8015978:	683b      	ldr	r3, [r7, #0]
 801597a:	681b      	ldr	r3, [r3, #0]
 801597c:	2b04      	cmp	r3, #4
 801597e:	d101      	bne.n	8015984 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 8015980:	2301      	movs	r3, #1
 8015982:	e000      	b.n	8015986 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 8015984:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8015986:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8015988:	683b      	ldr	r3, [r7, #0]
 801598a:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 801598c:	2b80      	cmp	r3, #128	; 0x80
 801598e:	d004      	beq.n	801599a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 8015990:	683b      	ldr	r3, [r7, #0]
 8015992:	681b      	ldr	r3, [r3, #0]
 8015994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015998:	d101      	bne.n	801599e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 801599a:	2301      	movs	r3, #1
 801599c:	e000      	b.n	80159a0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 801599e:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 80159a0:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 80159a2:	f7fa fb11 	bl	800ffc8 <_ZN8touchgfx3HAL3lcdEv>
 80159a6:	4603      	mov	r3, r0
 80159a8:	681a      	ldr	r2, [r3, #0]
 80159aa:	3220      	adds	r2, #32
 80159ac:	6812      	ldr	r2, [r2, #0]
 80159ae:	4618      	mov	r0, r3
 80159b0:	4790      	blx	r2
 80159b2:	4603      	mov	r3, r0
 80159b4:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 80159b6:	683b      	ldr	r3, [r7, #0]
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80159be:	d012      	beq.n	80159e6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
 80159c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80159c4:	d820      	bhi.n	8015a08 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb4>
 80159c6:	2b80      	cmp	r3, #128	; 0x80
 80159c8:	d00a      	beq.n	80159e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
 80159ca:	2b80      	cmp	r3, #128	; 0x80
 80159cc:	d81c      	bhi.n	8015a08 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb4>
 80159ce:	2b40      	cmp	r3, #64	; 0x40
 80159d0:	d017      	beq.n	8015a02 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xae>
 80159d2:	2b40      	cmp	r3, #64	; 0x40
 80159d4:	d818      	bhi.n	8015a08 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb4>
 80159d6:	2b04      	cmp	r3, #4
 80159d8:	d008      	beq.n	80159ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x98>
 80159da:	2b20      	cmp	r3, #32
 80159dc:	d011      	beq.n	8015a02 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xae>
 80159de:	e013      	b.n	8015a08 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb4>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 80159e0:	230a      	movs	r3, #10
 80159e2:	623b      	str	r3, [r7, #32]
        break;
 80159e4:	e01a      	b.n	8015a1c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc8>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 80159e6:	2309      	movs	r3, #9
 80159e8:	623b      	str	r3, [r7, #32]
        break;
 80159ea:	e017      	b.n	8015a1c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc8>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 80159ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80159f0:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80159f2:	7f7b      	ldrb	r3, [r7, #29]
 80159f4:	2b10      	cmp	r3, #16
 80159f6:	d101      	bne.n	80159fc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
 80159f8:	2302      	movs	r3, #2
 80159fa:	e000      	b.n	80159fe <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xaa>
 80159fc:	2301      	movs	r3, #1
 80159fe:	623b      	str	r3, [r7, #32]
        break;
 8015a00:	e00c      	b.n	8015a1c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc8>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 8015a02:	2300      	movs	r3, #0
 8015a04:	623b      	str	r3, [r7, #32]
        break;
 8015a06:	e009      	b.n	8015a1c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc8>
    default:
        dma2dTransferMode = DMA2D_M2M;
 8015a08:	2300      	movs	r3, #0
 8015a0a:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8015a0c:	7f7b      	ldrb	r3, [r7, #29]
 8015a0e:	2b10      	cmp	r3, #16
 8015a10:	d101      	bne.n	8015a16 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc2>
 8015a12:	2302      	movs	r3, #2
 8015a14:	e000      	b.n	8015a18 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc4>
 8015a16:	2301      	movs	r3, #1
 8015a18:	623b      	str	r3, [r7, #32]
        break;
 8015a1a:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8015a1c:	4a77      	ldr	r2, [pc, #476]	; (8015bfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a20:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8015a22:	7f7b      	ldrb	r3, [r7, #29]
 8015a24:	2b10      	cmp	r3, #16
 8015a26:	d101      	bne.n	8015a2c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd8>
 8015a28:	2302      	movs	r3, #2
 8015a2a:	e000      	b.n	8015a2e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xda>
 8015a2c:	2301      	movs	r3, #1
 8015a2e:	4a73      	ldr	r2, [pc, #460]	; (8015bfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015a30:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8015a32:	683b      	ldr	r3, [r7, #0]
 8015a34:	8adb      	ldrh	r3, [r3, #22]
 8015a36:	461a      	mov	r2, r3
 8015a38:	683b      	ldr	r3, [r7, #0]
 8015a3a:	8a1b      	ldrh	r3, [r3, #16]
 8015a3c:	1ad3      	subs	r3, r2, r3
 8015a3e:	461a      	mov	r2, r3
 8015a40:	4b6e      	ldr	r3, [pc, #440]	; (8015bfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015a42:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8015a44:	7f7b      	ldrb	r3, [r7, #29]
 8015a46:	2b10      	cmp	r3, #16
 8015a48:	d101      	bne.n	8015a4e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
 8015a4a:	2202      	movs	r2, #2
 8015a4c:	e000      	b.n	8015a50 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfc>
 8015a4e:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8015a50:	683b      	ldr	r3, [r7, #0]
 8015a52:	8adb      	ldrh	r3, [r3, #22]
 8015a54:	4619      	mov	r1, r3
 8015a56:	683b      	ldr	r3, [r7, #0]
 8015a58:	8a1b      	ldrh	r3, [r3, #16]
 8015a5a:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8015a5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015a5e:	4867      	ldr	r0, [pc, #412]	; (8015bfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015a60:	f7ff fe96 	bl	8015790 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8015a64:	4a65      	ldr	r2, [pc, #404]	; (8015bfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015a66:	6a3b      	ldr	r3, [r7, #32]
 8015a68:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 8015a6a:	683b      	ldr	r3, [r7, #0]
 8015a6c:	8a9b      	ldrh	r3, [r3, #20]
 8015a6e:	461a      	mov	r2, r3
 8015a70:	683b      	ldr	r3, [r7, #0]
 8015a72:	8a1b      	ldrh	r3, [r3, #16]
 8015a74:	1ad3      	subs	r3, r2, r3
 8015a76:	461a      	mov	r2, r3
 8015a78:	4b60      	ldr	r3, [pc, #384]	; (8015bfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015a7a:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 8015a7c:	7ffb      	ldrb	r3, [r7, #31]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d103      	bne.n	8015a8a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 8015a82:	7fbb      	ldrb	r3, [r7, #30]
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	f000 8084 	beq.w	8015b92 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23e>
    {
        if (blitOp.alpha < 255)
 8015a8a:	683b      	ldr	r3, [r7, #0]
 8015a8c:	7f1b      	ldrb	r3, [r3, #28]
 8015a8e:	2bff      	cmp	r3, #255	; 0xff
 8015a90:	d008      	beq.n	8015aa4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 8015a92:	4b5a      	ldr	r3, [pc, #360]	; (8015bfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015a94:	2202      	movs	r2, #2
 8015a96:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 8015a98:	683b      	ldr	r3, [r7, #0]
 8015a9a:	7f1b      	ldrb	r3, [r3, #28]
 8015a9c:	461a      	mov	r2, r3
 8015a9e:	4b57      	ldr	r3, [pc, #348]	; (8015bfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015aa0:	635a      	str	r2, [r3, #52]	; 0x34
 8015aa2:	e002      	b.n	8015aaa <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x156>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8015aa4:	4b55      	ldr	r3, [pc, #340]	; (8015bfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015aa6:	2200      	movs	r2, #0
 8015aa8:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 8015aaa:	7fbb      	ldrb	r3, [r7, #30]
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d05b      	beq.n	8015b68 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>
        {
            if (bitDepth == 16)
 8015ab0:	7f7b      	ldrb	r3, [r7, #29]
 8015ab2:	2b10      	cmp	r3, #16
 8015ab4:	d14c      	bne.n	8015b50 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1fc>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8015ab6:	683b      	ldr	r3, [r7, #0]
 8015ab8:	3318      	adds	r3, #24
 8015aba:	4618      	mov	r0, r3
 8015abc:	f7ff fdc6 	bl	801564c <_ZNK8touchgfx9colortypecvtEv>
 8015ac0:	4603      	mov	r3, r0
 8015ac2:	0adb      	lsrs	r3, r3, #11
 8015ac4:	b29b      	uxth	r3, r3
 8015ac6:	f003 021f 	and.w	r2, r3, #31
 8015aca:	4613      	mov	r3, r2
 8015acc:	021b      	lsls	r3, r3, #8
 8015ace:	1a9b      	subs	r3, r3, r2
 8015ad0:	4a4b      	ldr	r2, [pc, #300]	; (8015c00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8015ad2:	fb82 1203 	smull	r1, r2, r2, r3
 8015ad6:	441a      	add	r2, r3
 8015ad8:	1112      	asrs	r2, r2, #4
 8015ada:	17db      	asrs	r3, r3, #31
 8015adc:	1ad3      	subs	r3, r2, r3
 8015ade:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8015ae0:	683b      	ldr	r3, [r7, #0]
 8015ae2:	3318      	adds	r3, #24
 8015ae4:	4618      	mov	r0, r3
 8015ae6:	f7ff fdb1 	bl	801564c <_ZNK8touchgfx9colortypecvtEv>
 8015aea:	4603      	mov	r3, r0
 8015aec:	095b      	lsrs	r3, r3, #5
 8015aee:	b29b      	uxth	r3, r3
 8015af0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8015af4:	4613      	mov	r3, r2
 8015af6:	021b      	lsls	r3, r3, #8
 8015af8:	1a9b      	subs	r3, r3, r2
 8015afa:	4a42      	ldr	r2, [pc, #264]	; (8015c04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8015afc:	fb82 1203 	smull	r1, r2, r2, r3
 8015b00:	441a      	add	r2, r3
 8015b02:	1152      	asrs	r2, r2, #5
 8015b04:	17db      	asrs	r3, r3, #31
 8015b06:	1ad3      	subs	r3, r2, r3
 8015b08:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8015b0a:	683b      	ldr	r3, [r7, #0]
 8015b0c:	3318      	adds	r3, #24
 8015b0e:	4618      	mov	r0, r3
 8015b10:	f7ff fd9c 	bl	801564c <_ZNK8touchgfx9colortypecvtEv>
 8015b14:	4603      	mov	r3, r0
 8015b16:	f003 021f 	and.w	r2, r3, #31
 8015b1a:	4613      	mov	r3, r2
 8015b1c:	021b      	lsls	r3, r3, #8
 8015b1e:	1a9b      	subs	r3, r3, r2
 8015b20:	4a37      	ldr	r2, [pc, #220]	; (8015c00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8015b22:	fb82 1203 	smull	r1, r2, r2, r3
 8015b26:	441a      	add	r2, r3
 8015b28:	1112      	asrs	r2, r2, #4
 8015b2a:	17db      	asrs	r3, r3, #31
 8015b2c:	1ad3      	subs	r3, r2, r3
 8015b2e:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 8015b30:	683b      	ldr	r3, [r7, #0]
 8015b32:	7f1b      	ldrb	r3, [r3, #28]
 8015b34:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8015b36:	68fb      	ldr	r3, [r7, #12]
 8015b38:	061a      	lsls	r2, r3, #24
 8015b3a:	69bb      	ldr	r3, [r7, #24]
 8015b3c:	041b      	lsls	r3, r3, #16
 8015b3e:	431a      	orrs	r2, r3
 8015b40:	697b      	ldr	r3, [r7, #20]
 8015b42:	021b      	lsls	r3, r3, #8
 8015b44:	431a      	orrs	r2, r3
 8015b46:	693b      	ldr	r3, [r7, #16]
 8015b48:	4313      	orrs	r3, r2
 8015b4a:	4a2c      	ldr	r2, [pc, #176]	; (8015bfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015b4c:	6353      	str	r3, [r2, #52]	; 0x34
 8015b4e:	e00b      	b.n	8015b68 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 8015b50:	683b      	ldr	r3, [r7, #0]
 8015b52:	3318      	adds	r3, #24
 8015b54:	4618      	mov	r0, r3
 8015b56:	f7ff fd6d 	bl	8015634 <_ZNK8touchgfx9colortype10getColor32Ev>
 8015b5a:	4602      	mov	r2, r0
 8015b5c:	683b      	ldr	r3, [r7, #0]
 8015b5e:	7f1b      	ldrb	r3, [r3, #28]
 8015b60:	061b      	lsls	r3, r3, #24
 8015b62:	4313      	orrs	r3, r2
 8015b64:	4a25      	ldr	r2, [pc, #148]	; (8015bfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015b66:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8015b68:	683b      	ldr	r3, [r7, #0]
 8015b6a:	8adb      	ldrh	r3, [r3, #22]
 8015b6c:	461a      	mov	r2, r3
 8015b6e:	683b      	ldr	r3, [r7, #0]
 8015b70:	8a1b      	ldrh	r3, [r3, #16]
 8015b72:	1ad3      	subs	r3, r2, r3
 8015b74:	461a      	mov	r2, r3
 8015b76:	4b21      	ldr	r3, [pc, #132]	; (8015bfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015b78:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8015b7a:	7f7b      	ldrb	r3, [r7, #29]
 8015b7c:	2b10      	cmp	r3, #16
 8015b7e:	d101      	bne.n	8015b84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
 8015b80:	2302      	movs	r3, #2
 8015b82:	e000      	b.n	8015b86 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
 8015b84:	2301      	movs	r3, #1
 8015b86:	4a1d      	ldr	r2, [pc, #116]	; (8015bfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015b88:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8015b8a:	2100      	movs	r1, #0
 8015b8c:	481b      	ldr	r0, [pc, #108]	; (8015bfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015b8e:	f7ef ff7b 	bl	8005a88 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8015b92:	2101      	movs	r1, #1
 8015b94:	4819      	ldr	r0, [pc, #100]	; (8015bfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015b96:	f7ef ff77 	bl	8005a88 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataCopy cache invalidation */

    if (blendingImage || blendingText)
 8015b9a:	7ffb      	ldrb	r3, [r7, #31]
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d102      	bne.n	8015ba6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x252>
 8015ba0:	7fbb      	ldrb	r3, [r7, #30]
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d015      	beq.n	8015bd2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27e>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 8015ba6:	683b      	ldr	r3, [r7, #0]
 8015ba8:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8015baa:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8015bac:	683b      	ldr	r3, [r7, #0]
 8015bae:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8015bb0:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8015bb2:	683b      	ldr	r3, [r7, #0]
 8015bb4:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8015bb6:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8015bb8:	683b      	ldr	r3, [r7, #0]
 8015bba:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8015bbc:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8015bbe:	683b      	ldr	r3, [r7, #0]
 8015bc0:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8015bc2:	9301      	str	r3, [sp, #4]
 8015bc4:	9200      	str	r2, [sp, #0]
 8015bc6:	4623      	mov	r3, r4
 8015bc8:	4602      	mov	r2, r0
 8015bca:	480c      	ldr	r0, [pc, #48]	; (8015bfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015bcc:	f7ef fd7f 	bl	80056ce <HAL_DMA2D_BlendingStart_IT>
 8015bd0:	e010      	b.n	8015bf4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 8015bd2:	683b      	ldr	r3, [r7, #0]
 8015bd4:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 8015bd6:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 8015bd8:	683b      	ldr	r3, [r7, #0]
 8015bda:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 8015bdc:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8015bde:	683b      	ldr	r3, [r7, #0]
 8015be0:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 8015be2:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 8015be4:	683b      	ldr	r3, [r7, #0]
 8015be6:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 8015be8:	9300      	str	r3, [sp, #0]
 8015bea:	4603      	mov	r3, r0
 8015bec:	4803      	ldr	r0, [pc, #12]	; (8015bfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015bee:	f7ef fd3b 	bl	8005668 <HAL_DMA2D_Start_IT>
    }
}
 8015bf2:	bf00      	nop
 8015bf4:	bf00      	nop
 8015bf6:	372c      	adds	r7, #44	; 0x2c
 8015bf8:	46bd      	mov	sp, r7
 8015bfa:	bd90      	pop	{r4, r7, pc}
 8015bfc:	20000484 	.word	0x20000484
 8015c00:	84210843 	.word	0x84210843
 8015c04:	82082083 	.word	0x82082083

08015c08 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8015c08:	b590      	push	{r4, r7, lr}
 8015c0a:	b08d      	sub	sp, #52	; 0x34
 8015c0c:	af02      	add	r7, sp, #8
 8015c0e:	6078      	str	r0, [r7, #4]
 8015c10:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8015c12:	f7fa f9d9 	bl	800ffc8 <_ZN8touchgfx3HAL3lcdEv>
 8015c16:	4603      	mov	r3, r0
 8015c18:	681a      	ldr	r2, [r3, #0]
 8015c1a:	3220      	adds	r2, #32
 8015c1c:	6812      	ldr	r2, [r2, #0]
 8015c1e:	4618      	mov	r0, r3
 8015c20:	4790      	blx	r2
 8015c22:	4603      	mov	r3, r0
 8015c24:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8015c26:	7ffb      	ldrb	r3, [r7, #31]
 8015c28:	2b10      	cmp	r3, #16
 8015c2a:	d101      	bne.n	8015c30 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 8015c2c:	2302      	movs	r3, #2
 8015c2e:	e000      	b.n	8015c32 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 8015c30:	2301      	movs	r3, #1
 8015c32:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 8015c34:	2300      	movs	r3, #0
 8015c36:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 8015c38:	7ffb      	ldrb	r3, [r7, #31]
 8015c3a:	2b10      	cmp	r3, #16
 8015c3c:	d14b      	bne.n	8015cd6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xce>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8015c3e:	683b      	ldr	r3, [r7, #0]
 8015c40:	3318      	adds	r3, #24
 8015c42:	4618      	mov	r0, r3
 8015c44:	f7ff fd02 	bl	801564c <_ZNK8touchgfx9colortypecvtEv>
 8015c48:	4603      	mov	r3, r0
 8015c4a:	0adb      	lsrs	r3, r3, #11
 8015c4c:	b29b      	uxth	r3, r3
 8015c4e:	f003 021f 	and.w	r2, r3, #31
 8015c52:	4613      	mov	r3, r2
 8015c54:	021b      	lsls	r3, r3, #8
 8015c56:	1a9b      	subs	r3, r3, r2
 8015c58:	4a69      	ldr	r2, [pc, #420]	; (8015e00 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 8015c5a:	fb82 1203 	smull	r1, r2, r2, r3
 8015c5e:	441a      	add	r2, r3
 8015c60:	1112      	asrs	r2, r2, #4
 8015c62:	17db      	asrs	r3, r3, #31
 8015c64:	1ad3      	subs	r3, r2, r3
 8015c66:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8015c68:	683b      	ldr	r3, [r7, #0]
 8015c6a:	3318      	adds	r3, #24
 8015c6c:	4618      	mov	r0, r3
 8015c6e:	f7ff fced 	bl	801564c <_ZNK8touchgfx9colortypecvtEv>
 8015c72:	4603      	mov	r3, r0
 8015c74:	095b      	lsrs	r3, r3, #5
 8015c76:	b29b      	uxth	r3, r3
 8015c78:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8015c7c:	4613      	mov	r3, r2
 8015c7e:	021b      	lsls	r3, r3, #8
 8015c80:	1a9b      	subs	r3, r3, r2
 8015c82:	4a60      	ldr	r2, [pc, #384]	; (8015e04 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8015c84:	fb82 1203 	smull	r1, r2, r2, r3
 8015c88:	441a      	add	r2, r3
 8015c8a:	1152      	asrs	r2, r2, #5
 8015c8c:	17db      	asrs	r3, r3, #31
 8015c8e:	1ad3      	subs	r3, r2, r3
 8015c90:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8015c92:	683b      	ldr	r3, [r7, #0]
 8015c94:	3318      	adds	r3, #24
 8015c96:	4618      	mov	r0, r3
 8015c98:	f7ff fcd8 	bl	801564c <_ZNK8touchgfx9colortypecvtEv>
 8015c9c:	4603      	mov	r3, r0
 8015c9e:	f003 021f 	and.w	r2, r3, #31
 8015ca2:	4613      	mov	r3, r2
 8015ca4:	021b      	lsls	r3, r3, #8
 8015ca6:	1a9b      	subs	r3, r3, r2
 8015ca8:	4a55      	ldr	r2, [pc, #340]	; (8015e00 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 8015caa:	fb82 1203 	smull	r1, r2, r2, r3
 8015cae:	441a      	add	r2, r3
 8015cb0:	1112      	asrs	r2, r2, #4
 8015cb2:	17db      	asrs	r3, r3, #31
 8015cb4:	1ad3      	subs	r3, r2, r3
 8015cb6:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 8015cb8:	683b      	ldr	r3, [r7, #0]
 8015cba:	7f1b      	ldrb	r3, [r3, #28]
 8015cbc:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8015cbe:	68bb      	ldr	r3, [r7, #8]
 8015cc0:	061a      	lsls	r2, r3, #24
 8015cc2:	697b      	ldr	r3, [r7, #20]
 8015cc4:	041b      	lsls	r3, r3, #16
 8015cc6:	431a      	orrs	r2, r3
 8015cc8:	693b      	ldr	r3, [r7, #16]
 8015cca:	021b      	lsls	r3, r3, #8
 8015ccc:	4313      	orrs	r3, r2
 8015cce:	68fa      	ldr	r2, [r7, #12]
 8015cd0:	4313      	orrs	r3, r2
 8015cd2:	623b      	str	r3, [r7, #32]
 8015cd4:	e00b      	b.n	8015cee <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe6>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8015cd6:	683b      	ldr	r3, [r7, #0]
 8015cd8:	7f1b      	ldrb	r3, [r3, #28]
 8015cda:	061b      	lsls	r3, r3, #24
 8015cdc:	461c      	mov	r4, r3
 8015cde:	683b      	ldr	r3, [r7, #0]
 8015ce0:	3318      	adds	r3, #24
 8015ce2:	4618      	mov	r0, r3
 8015ce4:	f7ff fca6 	bl	8015634 <_ZNK8touchgfx9colortype10getColor32Ev>
 8015ce8:	4603      	mov	r3, r0
 8015cea:	4323      	orrs	r3, r4
 8015cec:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 8015cee:	683b      	ldr	r3, [r7, #0]
 8015cf0:	681b      	ldr	r3, [r3, #0]
 8015cf2:	2b08      	cmp	r3, #8
 8015cf4:	d103      	bne.n	8015cfe <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf6>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8015cf6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8015cfa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8015cfc:	e003      	b.n	8015d06 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
    default:
        dma2dTransferMode = DMA2D_R2M;
 8015cfe:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8015d02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8015d04:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8015d06:	4a40      	ldr	r2, [pc, #256]	; (8015e08 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8015d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d0a:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8015d0c:	7ffb      	ldrb	r3, [r7, #31]
 8015d0e:	2b10      	cmp	r3, #16
 8015d10:	d101      	bne.n	8015d16 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10e>
 8015d12:	2302      	movs	r3, #2
 8015d14:	e000      	b.n	8015d18 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>
 8015d16:	2301      	movs	r3, #1
 8015d18:	4a3b      	ldr	r2, [pc, #236]	; (8015e08 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8015d1a:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8015d1c:	683b      	ldr	r3, [r7, #0]
 8015d1e:	8adb      	ldrh	r3, [r3, #22]
 8015d20:	461a      	mov	r2, r3
 8015d22:	683b      	ldr	r3, [r7, #0]
 8015d24:	8a1b      	ldrh	r3, [r3, #16]
 8015d26:	1ad3      	subs	r3, r2, r3
 8015d28:	461a      	mov	r2, r3
 8015d2a:	4b37      	ldr	r3, [pc, #220]	; (8015e08 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8015d2c:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8015d2e:	7ffb      	ldrb	r3, [r7, #31]
 8015d30:	2b10      	cmp	r3, #16
 8015d32:	d101      	bne.n	8015d38 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x130>
 8015d34:	2202      	movs	r2, #2
 8015d36:	e000      	b.n	8015d3a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x132>
 8015d38:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8015d3a:	683b      	ldr	r3, [r7, #0]
 8015d3c:	8adb      	ldrh	r3, [r3, #22]
 8015d3e:	4619      	mov	r1, r3
 8015d40:	683b      	ldr	r3, [r7, #0]
 8015d42:	8a1b      	ldrh	r3, [r3, #16]
 8015d44:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8015d46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015d48:	482f      	ldr	r0, [pc, #188]	; (8015e08 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8015d4a:	f7ff fd21 	bl	8015790 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 8015d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8015d54:	d11e      	bne.n	8015d94 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x18c>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8015d56:	4b2c      	ldr	r3, [pc, #176]	; (8015e08 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8015d58:	2201      	movs	r2, #1
 8015d5a:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8015d5c:	4a2a      	ldr	r2, [pc, #168]	; (8015e08 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8015d5e:	6a3b      	ldr	r3, [r7, #32]
 8015d60:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 8015d62:	4b29      	ldr	r3, [pc, #164]	; (8015e08 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8015d64:	2209      	movs	r2, #9
 8015d66:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8015d68:	683b      	ldr	r3, [r7, #0]
 8015d6a:	8adb      	ldrh	r3, [r3, #22]
 8015d6c:	461a      	mov	r2, r3
 8015d6e:	683b      	ldr	r3, [r7, #0]
 8015d70:	8a1b      	ldrh	r3, [r3, #16]
 8015d72:	1ad3      	subs	r3, r2, r3
 8015d74:	461a      	mov	r2, r3
 8015d76:	4b24      	ldr	r3, [pc, #144]	; (8015e08 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8015d78:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8015d7a:	7ffb      	ldrb	r3, [r7, #31]
 8015d7c:	2b10      	cmp	r3, #16
 8015d7e:	d101      	bne.n	8015d84 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17c>
 8015d80:	2302      	movs	r3, #2
 8015d82:	e000      	b.n	8015d86 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17e>
 8015d84:	2301      	movs	r3, #1
 8015d86:	4a20      	ldr	r2, [pc, #128]	; (8015e08 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8015d88:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8015d8a:	2100      	movs	r1, #0
 8015d8c:	481e      	ldr	r0, [pc, #120]	; (8015e08 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8015d8e:	f7ef fe7b 	bl	8005a88 <HAL_DMA2D_ConfigLayer>
 8015d92:	e005      	b.n	8015da0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x198>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8015d94:	4a1c      	ldr	r2, [pc, #112]	; (8015e08 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8015d96:	69bb      	ldr	r3, [r7, #24]
 8015d98:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 8015d9a:	4b1b      	ldr	r3, [pc, #108]	; (8015e08 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8015d9c:	2200      	movs	r2, #0
 8015d9e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8015da0:	2101      	movs	r1, #1
 8015da2:	4819      	ldr	r0, [pc, #100]	; (8015e08 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8015da4:	f7ef fe70 	bl	8005a88 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataFill cache invalidation */

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8015da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015daa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8015dae:	d115      	bne.n	8015ddc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d4>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 8015db0:	683b      	ldr	r3, [r7, #0]
 8015db2:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8015db4:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8015db6:	683b      	ldr	r3, [r7, #0]
 8015db8:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8015dba:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8015dbc:	683b      	ldr	r3, [r7, #0]
 8015dbe:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8015dc0:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8015dc2:	683b      	ldr	r3, [r7, #0]
 8015dc4:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8015dc6:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8015dc8:	683b      	ldr	r3, [r7, #0]
 8015dca:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8015dcc:	9301      	str	r3, [sp, #4]
 8015dce:	9200      	str	r2, [sp, #0]
 8015dd0:	4623      	mov	r3, r4
 8015dd2:	4602      	mov	r2, r0
 8015dd4:	480c      	ldr	r0, [pc, #48]	; (8015e08 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8015dd6:	f7ef fc7a 	bl	80056ce <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8015dda:	e00d      	b.n	8015df8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f0>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8015ddc:	683b      	ldr	r3, [r7, #0]
 8015dde:	68db      	ldr	r3, [r3, #12]
 8015de0:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8015de2:	683b      	ldr	r3, [r7, #0]
 8015de4:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8015de6:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8015de8:	683b      	ldr	r3, [r7, #0]
 8015dea:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8015dec:	9300      	str	r3, [sp, #0]
 8015dee:	460b      	mov	r3, r1
 8015df0:	6a39      	ldr	r1, [r7, #32]
 8015df2:	4805      	ldr	r0, [pc, #20]	; (8015e08 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8015df4:	f7ef fc38 	bl	8005668 <HAL_DMA2D_Start_IT>
}
 8015df8:	bf00      	nop
 8015dfa:	372c      	adds	r7, #44	; 0x2c
 8015dfc:	46bd      	mov	sp, r7
 8015dfe:	bd90      	pop	{r4, r7, pc}
 8015e00:	84210843 	.word	0x84210843
 8015e04:	82082083 	.word	0x82082083
 8015e08:	20000484 	.word	0x20000484

08015e0c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8015e0c:	b580      	push	{r7, lr}
 8015e0e:	b082      	sub	sp, #8
 8015e10:	af00      	add	r7, sp, #0
 8015e12:	6078      	str	r0, [r7, #4]
 8015e14:	4a05      	ldr	r2, [pc, #20]	; (8015e2c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	601a      	str	r2, [r3, #0]
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	4618      	mov	r0, r3
 8015e1e:	f7ff fc23 	bl	8015668 <_ZN8touchgfx9DMA_QueueD1Ev>
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	4618      	mov	r0, r3
 8015e26:	3708      	adds	r7, #8
 8015e28:	46bd      	mov	sp, r7
 8015e2a:	bd80      	pop	{r7, pc}
 8015e2c:	0802989c 	.word	0x0802989c

08015e30 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8015e30:	b580      	push	{r7, lr}
 8015e32:	b082      	sub	sp, #8
 8015e34:	af00      	add	r7, sp, #0
 8015e36:	6078      	str	r0, [r7, #4]
 8015e38:	6878      	ldr	r0, [r7, #4]
 8015e3a:	f7ff ffe7 	bl	8015e0c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8015e3e:	2114      	movs	r1, #20
 8015e40:	6878      	ldr	r0, [r7, #4]
 8015e42:	f010 fcad 	bl	80267a0 <_ZdlPvj>
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	4618      	mov	r0, r3
 8015e4a:	3708      	adds	r7, #8
 8015e4c:	46bd      	mov	sp, r7
 8015e4e:	bd80      	pop	{r7, pc}

08015e50 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 8015e50:	b480      	push	{r7}
 8015e52:	b083      	sub	sp, #12
 8015e54:	af00      	add	r7, sp, #0
 8015e56:	6078      	str	r0, [r7, #4]
        texts = t;
 8015e58:	4a04      	ldr	r2, [pc, #16]	; (8015e6c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	6013      	str	r3, [r2, #0]
    }
 8015e5e:	bf00      	nop
 8015e60:	370c      	adds	r7, #12
 8015e62:	46bd      	mov	sp, r7
 8015e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e68:	4770      	bx	lr
 8015e6a:	bf00      	nop
 8015e6c:	2000c728 	.word	0x2000c728

08015e70 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8015e70:	b480      	push	{r7}
 8015e72:	b085      	sub	sp, #20
 8015e74:	af00      	add	r7, sp, #0
 8015e76:	60f8      	str	r0, [r7, #12]
 8015e78:	60b9      	str	r1, [r7, #8]
 8015e7a:	607a      	str	r2, [r7, #4]
 8015e7c:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 8015e7e:	4a0b      	ldr	r2, [pc, #44]	; (8015eac <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	601a      	str	r2, [r3, #0]
            MVPApplication& app) : presenterStorage(pres),
 8015e84:	68fb      	ldr	r3, [r7, #12]
 8015e86:	68ba      	ldr	r2, [r7, #8]
 8015e88:	605a      	str	r2, [r3, #4]
        screenStorage(scr),
 8015e8a:	68fb      	ldr	r3, [r7, #12]
 8015e8c:	687a      	ldr	r2, [r7, #4]
 8015e8e:	609a      	str	r2, [r3, #8]
        transitionStorage(tra),
 8015e90:	68fb      	ldr	r3, [r7, #12]
 8015e92:	683a      	ldr	r2, [r7, #0]
 8015e94:	60da      	str	r2, [r3, #12]
        frontendApplication(app)
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	69ba      	ldr	r2, [r7, #24]
 8015e9a:	611a      	str	r2, [r3, #16]
    {
    }
 8015e9c:	68fb      	ldr	r3, [r7, #12]
 8015e9e:	4618      	mov	r0, r3
 8015ea0:	3714      	adds	r7, #20
 8015ea2:	46bd      	mov	sp, r7
 8015ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ea8:	4770      	bx	lr
 8015eaa:	bf00      	nop
 8015eac:	0802892c 	.word	0x0802892c

08015eb0 <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 8015eb0:	b480      	push	{r7}
 8015eb2:	b083      	sub	sp, #12
 8015eb4:	af00      	add	r7, sp, #0
 8015eb6:	6078      	str	r0, [r7, #4]
    {
 8015eb8:	4a04      	ldr	r2, [pc, #16]	; (8015ecc <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	601a      	str	r2, [r3, #0]
    }
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	4618      	mov	r0, r3
 8015ec2:	370c      	adds	r7, #12
 8015ec4:	46bd      	mov	sp, r7
 8015ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eca:	4770      	bx	lr
 8015ecc:	0802892c 	.word	0x0802892c

08015ed0 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8015ed0:	b580      	push	{r7, lr}
 8015ed2:	b082      	sub	sp, #8
 8015ed4:	af00      	add	r7, sp, #0
 8015ed6:	6078      	str	r0, [r7, #4]
    }
 8015ed8:	6878      	ldr	r0, [r7, #4]
 8015eda:	f7ff ffe9 	bl	8015eb0 <_ZN8touchgfx7MVPHeapD1Ev>
 8015ede:	2114      	movs	r1, #20
 8015ee0:	6878      	ldr	r0, [r7, #4]
 8015ee2:	f010 fc5d 	bl	80267a0 <_ZdlPvj>
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	4618      	mov	r0, r3
 8015eea:	3708      	adds	r7, #8
 8015eec:	46bd      	mov	sp, r7
 8015eee:	bd80      	pop	{r7, pc}

08015ef0 <_ZN8touchgfx3LCDD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~LCD()
 8015ef0:	b480      	push	{r7}
 8015ef2:	b083      	sub	sp, #12
 8015ef4:	af00      	add	r7, sp, #0
 8015ef6:	6078      	str	r0, [r7, #4]
    {
 8015ef8:	4a04      	ldr	r2, [pc, #16]	; (8015f0c <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	601a      	str	r2, [r3, #0]
    }
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	4618      	mov	r0, r3
 8015f02:	370c      	adds	r7, #12
 8015f04:	46bd      	mov	sp, r7
 8015f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f0a:	4770      	bx	lr
 8015f0c:	0802a180 	.word	0x0802a180

08015f10 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8015f10:	b580      	push	{r7, lr}
 8015f12:	b082      	sub	sp, #8
 8015f14:	af00      	add	r7, sp, #0
 8015f16:	6078      	str	r0, [r7, #4]
    }
 8015f18:	6878      	ldr	r0, [r7, #4]
 8015f1a:	f7ff ffe9 	bl	8015ef0 <_ZN8touchgfx3LCDD1Ev>
 8015f1e:	2108      	movs	r1, #8
 8015f20:	6878      	ldr	r0, [r7, #4]
 8015f22:	f010 fc3d 	bl	80267a0 <_ZdlPvj>
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	4618      	mov	r0, r3
 8015f2a:	3708      	adds	r7, #8
 8015f2c:	46bd      	mov	sp, r7
 8015f2e:	bd80      	pop	{r7, pc}

08015f30 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 8015f30:	b480      	push	{r7}
 8015f32:	b083      	sub	sp, #12
 8015f34:	af00      	add	r7, sp, #0
 8015f36:	6078      	str	r0, [r7, #4]
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	2200      	movs	r2, #0
 8015f3c:	801a      	strh	r2, [r3, #0]
            startY(0),
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	2200      	movs	r2, #0
 8015f42:	805a      	strh	r2, [r3, #2]
            downX(0),
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	2200      	movs	r2, #0
 8015f48:	809a      	strh	r2, [r3, #4]
            downY(0),
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	2200      	movs	r2, #0
 8015f4e:	80da      	strh	r2, [r3, #6]
            tickCount(0),
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	2200      	movs	r2, #0
 8015f54:	811a      	strh	r2, [r3, #8]
            velocityX(0),
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	2200      	movs	r2, #0
 8015f5a:	815a      	strh	r2, [r3, #10]
            velocityY(0),
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	2200      	movs	r2, #0
 8015f60:	819a      	strh	r2, [r3, #12]
            inProgress(false)
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	2200      	movs	r2, #0
 8015f66:	739a      	strb	r2, [r3, #14]
        {
        }
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	4618      	mov	r0, r3
 8015f6c:	370c      	adds	r7, #12
 8015f6e:	46bd      	mov	sp, r7
 8015f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f74:	4770      	bx	lr

08015f76 <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 8015f76:	b580      	push	{r7, lr}
 8015f78:	b082      	sub	sp, #8
 8015f7a:	af00      	add	r7, sp, #0
 8015f7c:	6078      	str	r0, [r7, #4]
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	4618      	mov	r0, r3
 8015f82:	f7ff ffd5 	bl	8015f30 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	2200      	movs	r2, #0
 8015f8a:	611a      	str	r2, [r3, #16]
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	2200      	movs	r2, #0
 8015f90:	829a      	strh	r2, [r3, #20]
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	4618      	mov	r0, r3
 8015f96:	3708      	adds	r7, #8
 8015f98:	46bd      	mov	sp, r7
 8015f9a:	bd80      	pop	{r7, pc}

08015f9c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 8015f9c:	b580      	push	{r7, lr}
 8015f9e:	b084      	sub	sp, #16
 8015fa0:	af00      	add	r7, sp, #0
 8015fa2:	60f8      	str	r0, [r7, #12]
 8015fa4:	60b9      	str	r1, [r7, #8]
 8015fa6:	607a      	str	r2, [r7, #4]
 8015fa8:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 8015faa:	4a44      	ldr	r2, [pc, #272]	; (80160bc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 8015fac:	68fb      	ldr	r3, [r7, #12]
 8015fae:	601a      	str	r2, [r3, #0]
        dma(dmaInterface),
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	68ba      	ldr	r2, [r7, #8]
 8015fb4:	605a      	str	r2, [r3, #4]
        lcdRef(display),
 8015fb6:	68fb      	ldr	r3, [r7, #12]
 8015fb8:	687a      	ldr	r2, [r7, #4]
 8015fba:	609a      	str	r2, [r3, #8]
        touchController(touchCtrl),
 8015fbc:	68fb      	ldr	r3, [r7, #12]
 8015fbe:	683a      	ldr	r2, [r7, #0]
 8015fc0:	60da      	str	r2, [r3, #12]
        mcuInstrumentation(0),
 8015fc2:	68fb      	ldr	r3, [r7, #12]
 8015fc4:	2200      	movs	r2, #0
 8015fc6:	611a      	str	r2, [r3, #16]
        buttonController(0),
 8015fc8:	68fb      	ldr	r3, [r7, #12]
 8015fca:	2200      	movs	r2, #0
 8015fcc:	615a      	str	r2, [r3, #20]
        frameBufferAllocator(0),
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	2200      	movs	r2, #0
 8015fd2:	619a      	str	r2, [r3, #24]
        displayOrientationChangeRequested(false)
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	331c      	adds	r3, #28
 8015fd8:	4618      	mov	r0, r3
 8015fda:	f7ff ffcc 	bl	8015f76 <_ZN8touchgfx8GesturesC1Ev>
        taskDelayFunc(0),
 8015fde:	68fb      	ldr	r3, [r7, #12]
 8015fe0:	2200      	movs	r2, #0
 8015fe2:	639a      	str	r2, [r3, #56]	; 0x38
        frameBuffer0(0),
 8015fe4:	68fb      	ldr	r3, [r7, #12]
 8015fe6:	2200      	movs	r2, #0
 8015fe8:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1(0),
 8015fea:	68fb      	ldr	r3, [r7, #12]
 8015fec:	2200      	movs	r2, #0
 8015fee:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2(0),
 8015ff0:	68fb      	ldr	r3, [r7, #12]
 8015ff2:	2200      	movs	r2, #0
 8015ff4:	645a      	str	r2, [r3, #68]	; 0x44
        refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	2200      	movs	r2, #0
 8015ffa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        fingerSize(1),
 8015ffe:	68fb      	ldr	r3, [r7, #12]
 8016000:	2201      	movs	r2, #1
 8016002:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
        lockDMAToPorch(true),
 8016006:	68fb      	ldr	r3, [r7, #12]
 8016008:	2201      	movs	r2, #1
 801600a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
        auxiliaryLCD(0),
 801600e:	68fb      	ldr	r3, [r7, #12]
 8016010:	2200      	movs	r2, #0
 8016012:	64da      	str	r2, [r3, #76]	; 0x4c
        displayOrientationChangeRequested(false)
 8016014:	68fb      	ldr	r3, [r7, #12]
 8016016:	3350      	adds	r3, #80	; 0x50
 8016018:	4618      	mov	r0, r3
 801601a:	f7fa fbf2 	bl	8010802 <_ZN8touchgfx4RectC1Ev>
        touchSampleRate(1),
 801601e:	68fb      	ldr	r3, [r7, #12]
 8016020:	2201      	movs	r2, #1
 8016022:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        mcuLoadPct(0),
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	2200      	movs	r2, #0
 801602a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        vSyncCnt(0),
 801602e:	68fb      	ldr	r3, [r7, #12]
 8016030:	2200      	movs	r2, #0
 8016032:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
        vSyncForFrame(1),
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	2201      	movs	r2, #1
 801603a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
        vSyncCompensationEnabled(false),
 801603e:	68fb      	ldr	r3, [r7, #12]
 8016040:	2200      	movs	r2, #0
 8016042:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        clientDirty(false),
 8016046:	68fb      	ldr	r3, [r7, #12]
 8016048:	2200      	movs	r2, #0
 801604a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        swapRequested(false),
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	2200      	movs	r2, #0
 8016052:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        lastTouched(false),
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	2200      	movs	r2, #0
 801605a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
        updateMCULoad(0),
 801605e:	68fb      	ldr	r3, [r7, #12]
 8016060:	2200      	movs	r2, #0
 8016062:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        cc_begin(0),
 8016066:	68fb      	ldr	r3, [r7, #12]
 8016068:	2200      	movs	r2, #0
 801606a:	671a      	str	r2, [r3, #112]	; 0x70
        displayOrientationChangeRequested(false)
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	2200      	movs	r2, #0
 8016070:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 8016074:	4a12      	ldr	r2, [pc, #72]	; (80160c0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 8016076:	68fb      	ldr	r3, [r7, #12]
 8016078:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 801607a:	4a12      	ldr	r2, [pc, #72]	; (80160c4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 801607c:	8b3b      	ldrh	r3, [r7, #24]
 801607e:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8016080:	4a11      	ldr	r2, [pc, #68]	; (80160c8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8016082:	8bbb      	ldrh	r3, [r7, #28]
 8016084:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8016086:	4b11      	ldr	r3, [pc, #68]	; (80160cc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 8016088:	2200      	movs	r2, #0
 801608a:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 801608c:	4b0d      	ldr	r3, [pc, #52]	; (80160c4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 801608e:	881a      	ldrh	r2, [r3, #0]
 8016090:	4b0f      	ldr	r3, [pc, #60]	; (80160d0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 8016092:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8016094:	4b0c      	ldr	r3, [pc, #48]	; (80160c8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8016096:	881a      	ldrh	r2, [r3, #0]
 8016098:	4b0e      	ldr	r3, [pc, #56]	; (80160d4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 801609a:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 801609c:	8b3a      	ldrh	r2, [r7, #24]
 801609e:	8bbb      	ldrh	r3, [r7, #28]
 80160a0:	429a      	cmp	r2, r3
 80160a2:	bf34      	ite	cc
 80160a4:	2301      	movcc	r3, #1
 80160a6:	2300      	movcs	r3, #0
 80160a8:	b2db      	uxtb	r3, r3
 80160aa:	461a      	mov	r2, r3
 80160ac:	68fb      	ldr	r3, [r7, #12]
 80160ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 80160b2:	68fb      	ldr	r3, [r7, #12]
 80160b4:	4618      	mov	r0, r3
 80160b6:	3710      	adds	r7, #16
 80160b8:	46bd      	mov	sp, r7
 80160ba:	bd80      	pop	{r7, pc}
 80160bc:	08029408 	.word	0x08029408
 80160c0:	2000c68c 	.word	0x2000c68c
 80160c4:	2000c680 	.word	0x2000c680
 80160c8:	2000c682 	.word	0x2000c682
 80160cc:	2000c684 	.word	0x2000c684
 80160d0:	2000c686 	.word	0x2000c686
 80160d4:	2000c688 	.word	0x2000c688

080160d8 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 80160d8:	b580      	push	{r7, lr}
 80160da:	b082      	sub	sp, #8
 80160dc:	af00      	add	r7, sp, #0
 80160de:	6078      	str	r0, [r7, #4]
 80160e0:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 80160e2:	683b      	ldr	r3, [r7, #0]
 80160e4:	4618      	mov	r0, r3
 80160e6:	f7fa f993 	bl	8010410 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 80160ea:	bf00      	nop
 80160ec:	3708      	adds	r7, #8
 80160ee:	46bd      	mov	sp, r7
 80160f0:	bd80      	pop	{r7, pc}
	...

080160f4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 80160f4:	b580      	push	{r7, lr}
 80160f6:	b086      	sub	sp, #24
 80160f8:	af02      	add	r7, sp, #8
 80160fa:	60f8      	str	r0, [r7, #12]
 80160fc:	60b9      	str	r1, [r7, #8]
 80160fe:	607a      	str	r2, [r7, #4]
 8016100:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8016102:	68f8      	ldr	r0, [r7, #12]
 8016104:	69bb      	ldr	r3, [r7, #24]
 8016106:	9300      	str	r3, [sp, #0]
 8016108:	683b      	ldr	r3, [r7, #0]
 801610a:	687a      	ldr	r2, [r7, #4]
 801610c:	68b9      	ldr	r1, [r7, #8]
 801610e:	f7ff feaf 	bl	8015e70 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8016112:	4a04      	ldr	r2, [pc, #16]	; (8016124 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8016114:	68fb      	ldr	r3, [r7, #12]
 8016116:	601a      	str	r2, [r3, #0]
    {

    }
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	4618      	mov	r0, r3
 801611c:	3710      	adds	r7, #16
 801611e:	46bd      	mov	sp, r7
 8016120:	bd80      	pop	{r7, pc}
 8016122:	bf00      	nop
 8016124:	08028918 	.word	0x08028918

08016128 <__tcf_0>:
            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8016128:	b580      	push	{r7, lr}
 801612a:	af00      	add	r7, sp, #0
 801612c:	4801      	ldr	r0, [pc, #4]	; (8016134 <__tcf_0+0xc>)
 801612e:	f000 f9eb 	bl	8016508 <_ZN12FrontendHeapD1Ev>
 8016132:	bd80      	pop	{r7, pc}
 8016134:	20008eec 	.word	0x20008eec

08016138 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8016138:	b580      	push	{r7, lr}
 801613a:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 801613c:	4b11      	ldr	r3, [pc, #68]	; (8016184 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	f3bf 8f5b 	dmb	ish
 8016144:	f003 0301 	and.w	r3, r3, #1
 8016148:	2b00      	cmp	r3, #0
 801614a:	bf0c      	ite	eq
 801614c:	2301      	moveq	r3, #1
 801614e:	2300      	movne	r3, #0
 8016150:	b2db      	uxtb	r3, r3
 8016152:	2b00      	cmp	r3, #0
 8016154:	d013      	beq.n	801617e <_ZN12FrontendHeap11getInstanceEv+0x46>
 8016156:	480b      	ldr	r0, [pc, #44]	; (8016184 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8016158:	f010 fb24 	bl	80267a4 <__cxa_guard_acquire>
 801615c:	4603      	mov	r3, r0
 801615e:	2b00      	cmp	r3, #0
 8016160:	bf14      	ite	ne
 8016162:	2301      	movne	r3, #1
 8016164:	2300      	moveq	r3, #0
 8016166:	b2db      	uxtb	r3, r3
 8016168:	2b00      	cmp	r3, #0
 801616a:	d008      	beq.n	801617e <_ZN12FrontendHeap11getInstanceEv+0x46>
 801616c:	4806      	ldr	r0, [pc, #24]	; (8016188 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 801616e:	f000 f831 	bl	80161d4 <_ZN12FrontendHeapC1Ev>
 8016172:	4806      	ldr	r0, [pc, #24]	; (801618c <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8016174:	f010 fb60 	bl	8026838 <atexit>
 8016178:	4802      	ldr	r0, [pc, #8]	; (8016184 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 801617a:	f010 fb1f 	bl	80267bc <__cxa_guard_release>
        return instance;
 801617e:	4b02      	ldr	r3, [pc, #8]	; (8016188 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 8016180:	4618      	mov	r0, r3
 8016182:	bd80      	pop	{r7, pc}
 8016184:	2000b980 	.word	0x2000b980
 8016188:	20008eec 	.word	0x20008eec
 801618c:	08016129 	.word	0x08016129

08016190 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8016190:	b580      	push	{r7, lr}
 8016192:	b082      	sub	sp, #8
 8016194:	af00      	add	r7, sp, #0
 8016196:	6078      	str	r0, [r7, #4]
 8016198:	4a05      	ldr	r2, [pc, #20]	; (80161b0 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	601a      	str	r2, [r3, #0]
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	4618      	mov	r0, r3
 80161a2:	f7ff fe85 	bl	8015eb0 <_ZN8touchgfx7MVPHeapD1Ev>
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	4618      	mov	r0, r3
 80161aa:	3708      	adds	r7, #8
 80161ac:	46bd      	mov	sp, r7
 80161ae:	bd80      	pop	{r7, pc}
 80161b0:	08028918 	.word	0x08028918

080161b4 <_ZN16FrontendHeapBaseD0Ev>:
 80161b4:	b580      	push	{r7, lr}
 80161b6:	b082      	sub	sp, #8
 80161b8:	af00      	add	r7, sp, #0
 80161ba:	6078      	str	r0, [r7, #4]
 80161bc:	6878      	ldr	r0, [r7, #4]
 80161be:	f7ff ffe7 	bl	8016190 <_ZN16FrontendHeapBaseD1Ev>
 80161c2:	2114      	movs	r1, #20
 80161c4:	6878      	ldr	r0, [r7, #4]
 80161c6:	f010 faeb 	bl	80267a0 <_ZdlPvj>
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	4618      	mov	r0, r3
 80161ce:	3708      	adds	r7, #8
 80161d0:	46bd      	mov	sp, r7
 80161d2:	bd80      	pop	{r7, pc}

080161d4 <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80161d4:	b590      	push	{r4, r7, lr}
 80161d6:	b085      	sub	sp, #20
 80161d8:	af02      	add	r7, sp, #8
 80161da:	6078      	str	r0, [r7, #4]
        app(model, *this)
 80161dc:	6878      	ldr	r0, [r7, #4]
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	f103 0114 	add.w	r1, r3, #20
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80161ea:	687a      	ldr	r2, [r7, #4]
 80161ec:	f642 132c 	movw	r3, #10540	; 0x292c
 80161f0:	4413      	add	r3, r2
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80161f2:	687a      	ldr	r2, [r7, #4]
 80161f4:	f502 5225 	add.w	r2, r2, #10560	; 0x2940
        app(model, *this)
 80161f8:	9200      	str	r2, [sp, #0]
 80161fa:	4622      	mov	r2, r4
 80161fc:	f7ff ff7a 	bl	80160f4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8016200:	4a19      	ldr	r2, [pc, #100]	; (8016268 <_ZN12FrontendHeapC1Ev+0x94>)
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	601a      	str	r2, [r3, #0]
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	3314      	adds	r3, #20
 801620a:	4618      	mov	r0, r3
 801620c:	f000 f8de 	bl	80163cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	332c      	adds	r3, #44	; 0x2c
 8016214:	4618      	mov	r0, r3
 8016216:	f000 f90d 	bl	8016434 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801621a:	687a      	ldr	r2, [r7, #4]
 801621c:	f642 132c 	movw	r3, #10540	; 0x292c
 8016220:	4413      	add	r3, r2
 8016222:	4618      	mov	r0, r3
 8016224:	f000 f93c 	bl	80164a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	f503 5025 	add.w	r0, r3, #10560	; 0x2940
 801622e:	687a      	ldr	r2, [r7, #4]
 8016230:	f642 2390 	movw	r3, #10896	; 0x2a90
 8016234:	4413      	add	r3, r2
 8016236:	687a      	ldr	r2, [r7, #4]
 8016238:	4619      	mov	r1, r3
 801623a:	f7fd ff8d 	bl	8014158 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 801623e:	687a      	ldr	r2, [r7, #4]
 8016240:	f642 2390 	movw	r3, #10896	; 0x2a90
 8016244:	4413      	add	r3, r2
 8016246:	4618      	mov	r0, r3
 8016248:	f7fe fde2 	bl	8014e10 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 801624c:	687a      	ldr	r2, [r7, #4]
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	f503 5325 	add.w	r3, r3, #10560	; 0x2940
 8016254:	4619      	mov	r1, r3
 8016256:	4610      	mov	r0, r2
 8016258:	f7ff ff3e 	bl	80160d8 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	4618      	mov	r0, r3
 8016260:	370c      	adds	r7, #12
 8016262:	46bd      	mov	sp, r7
 8016264:	bd90      	pop	{r4, r7, pc}
 8016266:	bf00      	nop
 8016268:	08028868 	.word	0x08028868

0801626c <_ZN8touchgfx8LCD24bppD1Ev>:
class LCD24bpp : public LCD
{
public:
    LCD24bpp();

    virtual ~LCD24bpp()
 801626c:	b580      	push	{r7, lr}
 801626e:	b082      	sub	sp, #8
 8016270:	af00      	add	r7, sp, #0
 8016272:	6078      	str	r0, [r7, #4]
    {
 8016274:	4a05      	ldr	r2, [pc, #20]	; (801628c <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	601a      	str	r2, [r3, #0]
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	4618      	mov	r0, r3
 801627e:	f7ff fe37 	bl	8015ef0 <_ZN8touchgfx3LCDD1Ev>
    }
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	4618      	mov	r0, r3
 8016286:	3708      	adds	r7, #8
 8016288:	46bd      	mov	sp, r7
 801628a:	bd80      	pop	{r7, pc}
 801628c:	0802b55c 	.word	0x0802b55c

08016290 <_ZN8touchgfx8LCD24bppD0Ev>:
    virtual ~LCD24bpp()
 8016290:	b580      	push	{r7, lr}
 8016292:	b082      	sub	sp, #8
 8016294:	af00      	add	r7, sp, #0
 8016296:	6078      	str	r0, [r7, #4]
    }
 8016298:	6878      	ldr	r0, [r7, #4]
 801629a:	f7ff ffe7 	bl	801626c <_ZN8touchgfx8LCD24bppD1Ev>
 801629e:	2158      	movs	r1, #88	; 0x58
 80162a0:	6878      	ldr	r0, [r7, #4]
 80162a2:	f010 fa7d 	bl	80267a0 <_ZdlPvj>
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	4618      	mov	r0, r3
 80162aa:	3708      	adds	r7, #8
 80162ac:	46bd      	mov	sp, r7
 80162ae:	bd80      	pop	{r7, pc}

080162b0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 80162b0:	b580      	push	{r7, lr}
 80162b2:	b086      	sub	sp, #24
 80162b4:	af02      	add	r7, sp, #8
 80162b6:	60f8      	str	r0, [r7, #12]
 80162b8:	60b9      	str	r1, [r7, #8]
 80162ba:	607a      	str	r2, [r7, #4]
 80162bc:	603b      	str	r3, [r7, #0]
 80162be:	68f8      	ldr	r0, [r7, #12]
 80162c0:	8bbb      	ldrh	r3, [r7, #28]
 80162c2:	9301      	str	r3, [sp, #4]
 80162c4:	8b3b      	ldrh	r3, [r7, #24]
 80162c6:	9300      	str	r3, [sp, #0]
 80162c8:	683b      	ldr	r3, [r7, #0]
 80162ca:	687a      	ldr	r2, [r7, #4]
 80162cc:	68b9      	ldr	r1, [r7, #8]
 80162ce:	f7ff fe65 	bl	8015f9c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80162d2:	4a04      	ldr	r2, [pc, #16]	; (80162e4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	601a      	str	r2, [r3, #0]
    }
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	4618      	mov	r0, r3
 80162dc:	3710      	adds	r7, #16
 80162de:	46bd      	mov	sp, r7
 80162e0:	bd80      	pop	{r7, pc}
 80162e2:	bf00      	nop
 80162e4:	0802893c 	.word	0x0802893c

080162e8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80162e8:	b580      	push	{r7, lr}
 80162ea:	b086      	sub	sp, #24
 80162ec:	af02      	add	r7, sp, #8
 80162ee:	60f8      	str	r0, [r7, #12]
 80162f0:	60b9      	str	r1, [r7, #8]
 80162f2:	607a      	str	r2, [r7, #4]
 80162f4:	603b      	str	r3, [r7, #0]
 80162f6:	68f8      	ldr	r0, [r7, #12]
 80162f8:	8bbb      	ldrh	r3, [r7, #28]
 80162fa:	9301      	str	r3, [sp, #4]
 80162fc:	8b3b      	ldrh	r3, [r7, #24]
 80162fe:	9300      	str	r3, [sp, #0]
 8016300:	683b      	ldr	r3, [r7, #0]
 8016302:	687a      	ldr	r2, [r7, #4]
 8016304:	68b9      	ldr	r1, [r7, #8]
 8016306:	f7ff ffd3 	bl	80162b0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 801630a:	4a04      	ldr	r2, [pc, #16]	; (801631c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	601a      	str	r2, [r3, #0]
    }
 8016310:	68fb      	ldr	r3, [r7, #12]
 8016312:	4618      	mov	r0, r3
 8016314:	3710      	adds	r7, #16
 8016316:	46bd      	mov	sp, r7
 8016318:	bd80      	pop	{r7, pc}
 801631a:	bf00      	nop
 801631c:	08028740 	.word	0x08028740

08016320 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8016320:	b480      	push	{r7}
 8016322:	b083      	sub	sp, #12
 8016324:	af00      	add	r7, sp, #0
 8016326:	6078      	str	r0, [r7, #4]
 8016328:	4a04      	ldr	r2, [pc, #16]	; (801633c <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	601a      	str	r2, [r3, #0]
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	4618      	mov	r0, r3
 8016332:	370c      	adds	r7, #12
 8016334:	46bd      	mov	sp, r7
 8016336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801633a:	4770      	bx	lr
 801633c:	08028728 	.word	0x08028728

08016340 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8016340:	b580      	push	{r7, lr}
 8016342:	b082      	sub	sp, #8
 8016344:	af00      	add	r7, sp, #0
 8016346:	6078      	str	r0, [r7, #4]
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	4618      	mov	r0, r3
 801634c:	f7ff ffe8 	bl	8016320 <_ZN8touchgfx15TouchControllerC1Ev>
 8016350:	4a03      	ldr	r2, [pc, #12]	; (8016360 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	601a      	str	r2, [r3, #0]
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	4618      	mov	r0, r3
 801635a:	3708      	adds	r7, #8
 801635c:	46bd      	mov	sp, r7
 801635e:	bd80      	pop	{r7, pc}
 8016360:	08028710 	.word	0x08028710

08016364 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8016364:	b590      	push	{r4, r7, lr}
 8016366:	b085      	sub	sp, #20
 8016368:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 801636a:	f7fd fdd1 	bl	8013f10 <_ZN14BitmapDatabase11getInstanceEv>
 801636e:	4604      	mov	r4, r0
 8016370:	f7fd fdd8 	bl	8013f24 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8016374:	4603      	mov	r3, r0
 8016376:	4619      	mov	r1, r3
 8016378:	2300      	movs	r3, #0
 801637a:	9300      	str	r3, [sp, #0]
 801637c:	2300      	movs	r3, #0
 801637e:	2200      	movs	r2, #0
 8016380:	4620      	mov	r0, r4
 8016382:	f006 fcd5 	bl	801cd30 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 8016386:	4809      	ldr	r0, [pc, #36]	; (80163ac <touchgfx_init+0x48>)
 8016388:	f7ff fd62 	bl	8015e50 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 801638c:	2000      	movs	r0, #0
 801638e:	f7fd fded 	bl	8013f6c <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 8016392:	4807      	ldr	r0, [pc, #28]	; (80163b0 <touchgfx_init+0x4c>)
 8016394:	f006 fc1a 	bl	801cbcc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 8016398:	f7ff fece 	bl	8016138 <_ZN12FrontendHeap11getInstanceEv>
 801639c:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 801639e:	4805      	ldr	r0, [pc, #20]	; (80163b4 <touchgfx_init+0x50>)
 80163a0:	f7fe ffc6 	bl	8015330 <_ZN11TouchGFXHAL10initializeEv>
}
 80163a4:	bf00      	nop
 80163a6:	370c      	adds	r7, #12
 80163a8:	46bd      	mov	sp, r7
 80163aa:	bd90      	pop	{r4, r7, pc}
 80163ac:	2000c600 	.word	0x2000c600
 80163b0:	2000004c 	.word	0x2000004c
 80163b4:	2000c604 	.word	0x2000c604

080163b8 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80163b8:	b580      	push	{r7, lr}
 80163ba:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 80163bc:	4802      	ldr	r0, [pc, #8]	; (80163c8 <touchgfx_taskEntry+0x10>)
 80163be:	f001 fa00 	bl	80177c2 <_ZN8touchgfx3HAL9taskEntryEv>
}
 80163c2:	bf00      	nop
 80163c4:	bd80      	pop	{r7, pc}
 80163c6:	bf00      	nop
 80163c8:	2000c604 	.word	0x2000c604

080163cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 80163cc:	b580      	push	{r7, lr}
 80163ce:	b082      	sub	sp, #8
 80163d0:	af00      	add	r7, sp, #0
 80163d2:	6078      	str	r0, [r7, #4]
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	4618      	mov	r0, r3
 80163d8:	f000 fc70 	bl	8016cbc <_ZN8touchgfx17AbstractPartitionC1Ev>
 80163dc:	4a03      	ldr	r2, [pc, #12]	; (80163ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	601a      	str	r2, [r3, #0]
    {
    }
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	4618      	mov	r0, r3
 80163e6:	3708      	adds	r7, #8
 80163e8:	46bd      	mov	sp, r7
 80163ea:	bd80      	pop	{r7, pc}
 80163ec:	080288e4 	.word	0x080288e4

080163f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 80163f0:	b580      	push	{r7, lr}
 80163f2:	b082      	sub	sp, #8
 80163f4:	af00      	add	r7, sp, #0
 80163f6:	6078      	str	r0, [r7, #4]
    {
    }
 80163f8:	4a05      	ldr	r2, [pc, #20]	; (8016410 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	601a      	str	r2, [r3, #0]
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	4618      	mov	r0, r3
 8016402:	f000 fc59 	bl	8016cb8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	4618      	mov	r0, r3
 801640a:	3708      	adds	r7, #8
 801640c:	46bd      	mov	sp, r7
 801640e:	bd80      	pop	{r7, pc}
 8016410:	080288e4 	.word	0x080288e4

08016414 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8016414:	b580      	push	{r7, lr}
 8016416:	b082      	sub	sp, #8
 8016418:	af00      	add	r7, sp, #0
 801641a:	6078      	str	r0, [r7, #4]
    }
 801641c:	6878      	ldr	r0, [r7, #4]
 801641e:	f7ff ffe7 	bl	80163f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8016422:	2118      	movs	r1, #24
 8016424:	6878      	ldr	r0, [r7, #4]
 8016426:	f010 f9bb 	bl	80267a0 <_ZdlPvj>
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	4618      	mov	r0, r3
 801642e:	3708      	adds	r7, #8
 8016430:	46bd      	mov	sp, r7
 8016432:	bd80      	pop	{r7, pc}

08016434 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8016434:	b580      	push	{r7, lr}
 8016436:	b082      	sub	sp, #8
 8016438:	af00      	add	r7, sp, #0
 801643a:	6078      	str	r0, [r7, #4]
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	4618      	mov	r0, r3
 8016440:	f000 fc3c 	bl	8016cbc <_ZN8touchgfx17AbstractPartitionC1Ev>
 8016444:	4a03      	ldr	r2, [pc, #12]	; (8016454 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	601a      	str	r2, [r3, #0]
    }
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	4618      	mov	r0, r3
 801644e:	3708      	adds	r7, #8
 8016450:	46bd      	mov	sp, r7
 8016452:	bd80      	pop	{r7, pc}
 8016454:	080288b0 	.word	0x080288b0

08016458 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8016458:	b580      	push	{r7, lr}
 801645a:	b082      	sub	sp, #8
 801645c:	af00      	add	r7, sp, #0
 801645e:	6078      	str	r0, [r7, #4]
    }
 8016460:	4a05      	ldr	r2, [pc, #20]	; (8016478 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	601a      	str	r2, [r3, #0]
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	4618      	mov	r0, r3
 801646a:	f000 fc25 	bl	8016cb8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	4618      	mov	r0, r3
 8016472:	3708      	adds	r7, #8
 8016474:	46bd      	mov	sp, r7
 8016476:	bd80      	pop	{r7, pc}
 8016478:	080288b0 	.word	0x080288b0

0801647c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 801647c:	b580      	push	{r7, lr}
 801647e:	b082      	sub	sp, #8
 8016480:	af00      	add	r7, sp, #0
 8016482:	6078      	str	r0, [r7, #4]
    }
 8016484:	6878      	ldr	r0, [r7, #4]
 8016486:	f7ff ffe7 	bl	8016458 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801648a:	f44f 5124 	mov.w	r1, #10496	; 0x2900
 801648e:	6878      	ldr	r0, [r7, #4]
 8016490:	f010 f986 	bl	80267a0 <_ZdlPvj>
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	4618      	mov	r0, r3
 8016498:	3708      	adds	r7, #8
 801649a:	46bd      	mov	sp, r7
 801649c:	bd80      	pop	{r7, pc}
	...

080164a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 80164a0:	b580      	push	{r7, lr}
 80164a2:	b082      	sub	sp, #8
 80164a4:	af00      	add	r7, sp, #0
 80164a6:	6078      	str	r0, [r7, #4]
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	4618      	mov	r0, r3
 80164ac:	f000 fc06 	bl	8016cbc <_ZN8touchgfx17AbstractPartitionC1Ev>
 80164b0:	4a03      	ldr	r2, [pc, #12]	; (80164c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	601a      	str	r2, [r3, #0]
    }
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	4618      	mov	r0, r3
 80164ba:	3708      	adds	r7, #8
 80164bc:	46bd      	mov	sp, r7
 80164be:	bd80      	pop	{r7, pc}
 80164c0:	0802887c 	.word	0x0802887c

080164c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 80164c4:	b580      	push	{r7, lr}
 80164c6:	b082      	sub	sp, #8
 80164c8:	af00      	add	r7, sp, #0
 80164ca:	6078      	str	r0, [r7, #4]
    }
 80164cc:	4a05      	ldr	r2, [pc, #20]	; (80164e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	601a      	str	r2, [r3, #0]
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	4618      	mov	r0, r3
 80164d6:	f000 fbef 	bl	8016cb8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	4618      	mov	r0, r3
 80164de:	3708      	adds	r7, #8
 80164e0:	46bd      	mov	sp, r7
 80164e2:	bd80      	pop	{r7, pc}
 80164e4:	0802887c 	.word	0x0802887c

080164e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 80164e8:	b580      	push	{r7, lr}
 80164ea:	b082      	sub	sp, #8
 80164ec:	af00      	add	r7, sp, #0
 80164ee:	6078      	str	r0, [r7, #4]
    }
 80164f0:	6878      	ldr	r0, [r7, #4]
 80164f2:	f7ff ffe7 	bl	80164c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80164f6:	2114      	movs	r1, #20
 80164f8:	6878      	ldr	r0, [r7, #4]
 80164fa:	f010 f951 	bl	80267a0 <_ZdlPvj>
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	4618      	mov	r0, r3
 8016502:	3708      	adds	r7, #8
 8016504:	46bd      	mov	sp, r7
 8016506:	bd80      	pop	{r7, pc}

08016508 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8016508:	b580      	push	{r7, lr}
 801650a:	b082      	sub	sp, #8
 801650c:	af00      	add	r7, sp, #0
 801650e:	6078      	str	r0, [r7, #4]
 8016510:	4a11      	ldr	r2, [pc, #68]	; (8016558 <_ZN12FrontendHeapD1Ev+0x50>)
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	601a      	str	r2, [r3, #0]
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	f503 5325 	add.w	r3, r3, #10560	; 0x2940
 801651c:	4618      	mov	r0, r3
 801651e:	f7fd fde5 	bl	80140ec <_ZN19FrontendApplicationD1Ev>
 8016522:	687a      	ldr	r2, [r7, #4]
 8016524:	f642 132c 	movw	r3, #10540	; 0x292c
 8016528:	4413      	add	r3, r2
 801652a:	4618      	mov	r0, r3
 801652c:	f7ff ffca 	bl	80164c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	332c      	adds	r3, #44	; 0x2c
 8016534:	4618      	mov	r0, r3
 8016536:	f7ff ff8f 	bl	8016458 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	3314      	adds	r3, #20
 801653e:	4618      	mov	r0, r3
 8016540:	f7ff ff56 	bl	80163f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	4618      	mov	r0, r3
 8016548:	f7ff fe22 	bl	8016190 <_ZN16FrontendHeapBaseD1Ev>
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	4618      	mov	r0, r3
 8016550:	3708      	adds	r7, #8
 8016552:	46bd      	mov	sp, r7
 8016554:	bd80      	pop	{r7, pc}
 8016556:	bf00      	nop
 8016558:	08028868 	.word	0x08028868

0801655c <_ZN12FrontendHeapD0Ev>:
 801655c:	b580      	push	{r7, lr}
 801655e:	b082      	sub	sp, #8
 8016560:	af00      	add	r7, sp, #0
 8016562:	6078      	str	r0, [r7, #4]
 8016564:	6878      	ldr	r0, [r7, #4]
 8016566:	f7ff ffcf 	bl	8016508 <_ZN12FrontendHeapD1Ev>
 801656a:	f642 2194 	movw	r1, #10900	; 0x2a94
 801656e:	6878      	ldr	r0, [r7, #4]
 8016570:	f010 f916 	bl	80267a0 <_ZdlPvj>
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	4618      	mov	r0, r3
 8016578:	3708      	adds	r7, #8
 801657a:	46bd      	mov	sp, r7
 801657c:	bd80      	pop	{r7, pc}
	...

08016580 <_Z41__static_initialization_and_destruction_0ii>:
 8016580:	b580      	push	{r7, lr}
 8016582:	b084      	sub	sp, #16
 8016584:	af02      	add	r7, sp, #8
 8016586:	6078      	str	r0, [r7, #4]
 8016588:	6039      	str	r1, [r7, #0]
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	2b01      	cmp	r3, #1
 801658e:	d119      	bne.n	80165c4 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8016590:	683b      	ldr	r3, [r7, #0]
 8016592:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016596:	4293      	cmp	r3, r2
 8016598:	d114      	bne.n	80165c4 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 801659a:	4818      	ldr	r0, [pc, #96]	; (80165fc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801659c:	f7ff fed0 	bl	8016340 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 80165a0:	4817      	ldr	r0, [pc, #92]	; (8016600 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80165a2:	f7ff f94f 	bl	8015844 <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 80165a6:	4817      	ldr	r0, [pc, #92]	; (8016604 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80165a8:	f008 fde8 	bl	801f17c <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 80165ac:	f44f 7388 	mov.w	r3, #272	; 0x110
 80165b0:	9301      	str	r3, [sp, #4]
 80165b2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80165b6:	9300      	str	r3, [sp, #0]
 80165b8:	4b10      	ldr	r3, [pc, #64]	; (80165fc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80165ba:	4a12      	ldr	r2, [pc, #72]	; (8016604 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80165bc:	4910      	ldr	r1, [pc, #64]	; (8016600 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80165be:	4812      	ldr	r0, [pc, #72]	; (8016608 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80165c0:	f7ff fe92 	bl	80162e8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d113      	bne.n	80165f2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80165ca:	683b      	ldr	r3, [r7, #0]
 80165cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80165d0:	4293      	cmp	r3, r2
 80165d2:	d10e      	bne.n	80165f2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80165d4:	480c      	ldr	r0, [pc, #48]	; (8016608 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80165d6:	f7fe ff11 	bl	80153fc <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80165da:	480c      	ldr	r0, [pc, #48]	; (801660c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80165dc:	f7f8 ffa2 	bl	800f524 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 80165e0:	4808      	ldr	r0, [pc, #32]	; (8016604 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80165e2:	f7ff fe43 	bl	801626c <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 80165e6:	4806      	ldr	r0, [pc, #24]	; (8016600 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80165e8:	f7ff f956 	bl	8015898 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 80165ec:	4803      	ldr	r0, [pc, #12]	; (80165fc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80165ee:	f7fe fca9 	bl	8014f44 <_ZN20STM32TouchControllerD1Ev>
}
 80165f2:	bf00      	nop
 80165f4:	3708      	adds	r7, #8
 80165f6:	46bd      	mov	sp, r7
 80165f8:	bd80      	pop	{r7, pc}
 80165fa:	bf00      	nop
 80165fc:	2000b984 	.word	0x2000b984
 8016600:	2000b988 	.word	0x2000b988
 8016604:	2000c5a8 	.word	0x2000c5a8
 8016608:	2000c604 	.word	0x2000c604
 801660c:	2000004c 	.word	0x2000004c

08016610 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 8016610:	b480      	push	{r7}
 8016612:	b083      	sub	sp, #12
 8016614:	af00      	add	r7, sp, #0
 8016616:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8016618:	2301      	movs	r3, #1
    }
 801661a:	4618      	mov	r0, r3
 801661c:	370c      	adds	r7, #12
 801661e:	46bd      	mov	sp, r7
 8016620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016624:	4770      	bx	lr

08016626 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 8016626:	b480      	push	{r7}
 8016628:	b083      	sub	sp, #12
 801662a:	af00      	add	r7, sp, #0
 801662c:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 801662e:	230c      	movs	r3, #12
    }
 8016630:	4618      	mov	r0, r3
 8016632:	370c      	adds	r7, #12
 8016634:	46bd      	mov	sp, r7
 8016636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801663a:	4770      	bx	lr

0801663c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 801663c:	b480      	push	{r7}
 801663e:	b083      	sub	sp, #12
 8016640:	af00      	add	r7, sp, #0
 8016642:	6078      	str	r0, [r7, #4]
 8016644:	460b      	mov	r3, r1
 8016646:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8016648:	887a      	ldrh	r2, [r7, #2]
 801664a:	4613      	mov	r3, r2
 801664c:	005b      	lsls	r3, r3, #1
 801664e:	4413      	add	r3, r2
 8016650:	009b      	lsls	r3, r3, #2
 8016652:	3308      	adds	r3, #8
 8016654:	687a      	ldr	r2, [r7, #4]
 8016656:	4413      	add	r3, r2
    }
 8016658:	4618      	mov	r0, r3
 801665a:	370c      	adds	r7, #12
 801665c:	46bd      	mov	sp, r7
 801665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016662:	4770      	bx	lr

08016664 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 8016664:	b480      	push	{r7}
 8016666:	b083      	sub	sp, #12
 8016668:	af00      	add	r7, sp, #0
 801666a:	6078      	str	r0, [r7, #4]
 801666c:	460b      	mov	r3, r1
 801666e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8016670:	887a      	ldrh	r2, [r7, #2]
 8016672:	4613      	mov	r3, r2
 8016674:	005b      	lsls	r3, r3, #1
 8016676:	4413      	add	r3, r2
 8016678:	009b      	lsls	r3, r3, #2
 801667a:	3308      	adds	r3, #8
 801667c:	687a      	ldr	r2, [r7, #4]
 801667e:	4413      	add	r3, r2
    }
 8016680:	4618      	mov	r0, r3
 8016682:	370c      	adds	r7, #12
 8016684:	46bd      	mov	sp, r7
 8016686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801668a:	4770      	bx	lr

0801668c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801668c:	b480      	push	{r7}
 801668e:	b083      	sub	sp, #12
 8016690:	af00      	add	r7, sp, #0
 8016692:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8016694:	2301      	movs	r3, #1
    }
 8016696:	4618      	mov	r0, r3
 8016698:	370c      	adds	r7, #12
 801669a:	46bd      	mov	sp, r7
 801669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166a0:	4770      	bx	lr

080166a2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80166a2:	b480      	push	{r7}
 80166a4:	b083      	sub	sp, #12
 80166a6:	af00      	add	r7, sp, #0
 80166a8:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80166aa:	f642 03f8 	movw	r3, #10488	; 0x28f8
    }
 80166ae:	4618      	mov	r0, r3
 80166b0:	370c      	adds	r7, #12
 80166b2:	46bd      	mov	sp, r7
 80166b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166b8:	4770      	bx	lr

080166ba <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80166ba:	b480      	push	{r7}
 80166bc:	b083      	sub	sp, #12
 80166be:	af00      	add	r7, sp, #0
 80166c0:	6078      	str	r0, [r7, #4]
 80166c2:	460b      	mov	r3, r1
 80166c4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80166c6:	887b      	ldrh	r3, [r7, #2]
 80166c8:	f642 02f8 	movw	r2, #10488	; 0x28f8
 80166cc:	fb02 f303 	mul.w	r3, r2, r3
 80166d0:	3308      	adds	r3, #8
 80166d2:	687a      	ldr	r2, [r7, #4]
 80166d4:	4413      	add	r3, r2
    }
 80166d6:	4618      	mov	r0, r3
 80166d8:	370c      	adds	r7, #12
 80166da:	46bd      	mov	sp, r7
 80166dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166e0:	4770      	bx	lr

080166e2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80166e2:	b480      	push	{r7}
 80166e4:	b083      	sub	sp, #12
 80166e6:	af00      	add	r7, sp, #0
 80166e8:	6078      	str	r0, [r7, #4]
 80166ea:	460b      	mov	r3, r1
 80166ec:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80166ee:	887b      	ldrh	r3, [r7, #2]
 80166f0:	f642 02f8 	movw	r2, #10488	; 0x28f8
 80166f4:	fb02 f303 	mul.w	r3, r2, r3
 80166f8:	3308      	adds	r3, #8
 80166fa:	687a      	ldr	r2, [r7, #4]
 80166fc:	4413      	add	r3, r2
    }
 80166fe:	4618      	mov	r0, r3
 8016700:	370c      	adds	r7, #12
 8016702:	46bd      	mov	sp, r7
 8016704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016708:	4770      	bx	lr

0801670a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801670a:	b480      	push	{r7}
 801670c:	b083      	sub	sp, #12
 801670e:	af00      	add	r7, sp, #0
 8016710:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8016712:	2301      	movs	r3, #1
    }
 8016714:	4618      	mov	r0, r3
 8016716:	370c      	adds	r7, #12
 8016718:	46bd      	mov	sp, r7
 801671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801671e:	4770      	bx	lr

08016720 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8016720:	b480      	push	{r7}
 8016722:	b083      	sub	sp, #12
 8016724:	af00      	add	r7, sp, #0
 8016726:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8016728:	2310      	movs	r3, #16
    }
 801672a:	4618      	mov	r0, r3
 801672c:	370c      	adds	r7, #12
 801672e:	46bd      	mov	sp, r7
 8016730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016734:	4770      	bx	lr

08016736 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8016736:	b480      	push	{r7}
 8016738:	b083      	sub	sp, #12
 801673a:	af00      	add	r7, sp, #0
 801673c:	6078      	str	r0, [r7, #4]
 801673e:	460b      	mov	r3, r1
 8016740:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8016742:	887b      	ldrh	r3, [r7, #2]
 8016744:	011b      	lsls	r3, r3, #4
 8016746:	3308      	adds	r3, #8
 8016748:	687a      	ldr	r2, [r7, #4]
 801674a:	4413      	add	r3, r2
    }
 801674c:	4618      	mov	r0, r3
 801674e:	370c      	adds	r7, #12
 8016750:	46bd      	mov	sp, r7
 8016752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016756:	4770      	bx	lr

08016758 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8016758:	b480      	push	{r7}
 801675a:	b083      	sub	sp, #12
 801675c:	af00      	add	r7, sp, #0
 801675e:	6078      	str	r0, [r7, #4]
 8016760:	460b      	mov	r3, r1
 8016762:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8016764:	887b      	ldrh	r3, [r7, #2]
 8016766:	011b      	lsls	r3, r3, #4
 8016768:	3308      	adds	r3, #8
 801676a:	687a      	ldr	r2, [r7, #4]
 801676c:	4413      	add	r3, r2
    }
 801676e:	4618      	mov	r0, r3
 8016770:	370c      	adds	r7, #12
 8016772:	46bd      	mov	sp, r7
 8016774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016778:	4770      	bx	lr

0801677a <_GLOBAL__sub_I_touchgfx_init>:
 801677a:	b580      	push	{r7, lr}
 801677c:	af00      	add	r7, sp, #0
 801677e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016782:	2001      	movs	r0, #1
 8016784:	f7ff fefc 	bl	8016580 <_Z41__static_initialization_and_destruction_0ii>
 8016788:	bd80      	pop	{r7, pc}

0801678a <_GLOBAL__sub_D_touchgfx_init>:
 801678a:	b580      	push	{r7, lr}
 801678c:	af00      	add	r7, sp, #0
 801678e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016792:	2000      	movs	r0, #0
 8016794:	f7ff fef4 	bl	8016580 <_Z41__static_initialization_and_destruction_0ii>
 8016798:	bd80      	pop	{r7, pc}

0801679a <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 801679a:	b580      	push	{r7, lr}
 801679c:	b082      	sub	sp, #8
 801679e:	af00      	add	r7, sp, #0
 80167a0:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	681b      	ldr	r3, [r3, #0]
 80167a6:	3318      	adds	r3, #24
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	6878      	ldr	r0, [r7, #4]
 80167ac:	4798      	blx	r3
    }
 80167ae:	bf00      	nop
 80167b0:	3708      	adds	r7, #8
 80167b2:	46bd      	mov	sp, r7
 80167b4:	bd80      	pop	{r7, pc}

080167b6 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 80167b6:	b480      	push	{r7}
 80167b8:	b083      	sub	sp, #12
 80167ba:	af00      	add	r7, sp, #0
 80167bc:	6078      	str	r0, [r7, #4]
 80167be:	460b      	mov	r3, r1
 80167c0:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	78fa      	ldrb	r2, [r7, #3]
 80167c6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 80167ca:	bf00      	nop
 80167cc:	370c      	adds	r7, #12
 80167ce:	46bd      	mov	sp, r7
 80167d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167d4:	4770      	bx	lr

080167d6 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 80167d6:	b480      	push	{r7}
 80167d8:	b083      	sub	sp, #12
 80167da:	af00      	add	r7, sp, #0
 80167dc:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80167e4:	3301      	adds	r3, #1
 80167e6:	b2da      	uxtb	r2, r3
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 80167ee:	bf00      	nop
 80167f0:	370c      	adds	r7, #12
 80167f2:	46bd      	mov	sp, r7
 80167f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167f8:	4770      	bx	lr
	...

080167fc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 80167fc:	b580      	push	{r7, lr}
 80167fe:	b082      	sub	sp, #8
 8016800:	af00      	add	r7, sp, #0
 8016802:	6078      	str	r0, [r7, #4]
 8016804:	460b      	mov	r3, r1
 8016806:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8016808:	78fb      	ldrb	r3, [r7, #3]
 801680a:	2b00      	cmp	r3, #0
 801680c:	d002      	beq.n	8016814 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 801680e:	78fb      	ldrb	r3, [r7, #3]
 8016810:	2b02      	cmp	r3, #2
 8016812:	d105      	bne.n	8016820 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	78fa      	ldrb	r2, [r7, #3]
 8016818:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 801681c:	2301      	movs	r3, #1
 801681e:	e027      	b.n	8016870 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8016820:	78fb      	ldrb	r3, [r7, #3]
 8016822:	2b01      	cmp	r3, #1
 8016824:	d123      	bne.n	801686e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801682a:	2b00      	cmp	r3, #0
 801682c:	d014      	beq.n	8016858 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	681b      	ldr	r3, [r3, #0]
 8016832:	3380      	adds	r3, #128	; 0x80
 8016834:	681b      	ldr	r3, [r3, #0]
 8016836:	6878      	ldr	r0, [r7, #4]
 8016838:	4798      	blx	r3
 801683a:	4603      	mov	r3, r0
 801683c:	461a      	mov	r2, r3
 801683e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016842:	429a      	cmp	r2, r3
 8016844:	d008      	beq.n	8016858 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8016846:	4b0c      	ldr	r3, [pc, #48]	; (8016878 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8016848:	781b      	ldrb	r3, [r3, #0]
 801684a:	f083 0301 	eor.w	r3, r3, #1
 801684e:	b2db      	uxtb	r3, r3
 8016850:	2b00      	cmp	r3, #0
 8016852:	d001      	beq.n	8016858 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8016854:	2301      	movs	r3, #1
 8016856:	e000      	b.n	801685a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8016858:	2300      	movs	r3, #0
 801685a:	2b00      	cmp	r3, #0
 801685c:	d005      	beq.n	801686a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	78fa      	ldrb	r2, [r7, #3]
 8016862:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 8016866:	2301      	movs	r3, #1
 8016868:	e002      	b.n	8016870 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 801686a:	2300      	movs	r3, #0
 801686c:	e000      	b.n	8016870 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 801686e:	2300      	movs	r3, #0
    }
 8016870:	4618      	mov	r0, r3
 8016872:	3708      	adds	r7, #8
 8016874:	46bd      	mov	sp, r7
 8016876:	bd80      	pop	{r7, pc}
 8016878:	2000c68a 	.word	0x2000c68a

0801687c <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void(*delayF)(uint16_t))
 801687c:	b480      	push	{r7}
 801687e:	b083      	sub	sp, #12
 8016880:	af00      	add	r7, sp, #0
 8016882:	6078      	str	r0, [r7, #4]
 8016884:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	683a      	ldr	r2, [r7, #0]
 801688a:	639a      	str	r2, [r3, #56]	; 0x38
    }
 801688c:	bf00      	nop
 801688e:	370c      	adds	r7, #12
 8016890:	46bd      	mov	sp, r7
 8016892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016896:	4770      	bx	lr

08016898 <__NVIC_EnableIRQ>:
{
 8016898:	b480      	push	{r7}
 801689a:	b083      	sub	sp, #12
 801689c:	af00      	add	r7, sp, #0
 801689e:	4603      	mov	r3, r0
 80168a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80168a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	db0b      	blt.n	80168c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80168aa:	79fb      	ldrb	r3, [r7, #7]
 80168ac:	f003 021f 	and.w	r2, r3, #31
 80168b0:	4907      	ldr	r1, [pc, #28]	; (80168d0 <__NVIC_EnableIRQ+0x38>)
 80168b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80168b6:	095b      	lsrs	r3, r3, #5
 80168b8:	2001      	movs	r0, #1
 80168ba:	fa00 f202 	lsl.w	r2, r0, r2
 80168be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80168c2:	bf00      	nop
 80168c4:	370c      	adds	r7, #12
 80168c6:	46bd      	mov	sp, r7
 80168c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168cc:	4770      	bx	lr
 80168ce:	bf00      	nop
 80168d0:	e000e100 	.word	0xe000e100

080168d4 <__NVIC_DisableIRQ>:
{
 80168d4:	b480      	push	{r7}
 80168d6:	b083      	sub	sp, #12
 80168d8:	af00      	add	r7, sp, #0
 80168da:	4603      	mov	r3, r0
 80168dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80168de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	db12      	blt.n	801690c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80168e6:	79fb      	ldrb	r3, [r7, #7]
 80168e8:	f003 021f 	and.w	r2, r3, #31
 80168ec:	490a      	ldr	r1, [pc, #40]	; (8016918 <__NVIC_DisableIRQ+0x44>)
 80168ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80168f2:	095b      	lsrs	r3, r3, #5
 80168f4:	2001      	movs	r0, #1
 80168f6:	fa00 f202 	lsl.w	r2, r0, r2
 80168fa:	3320      	adds	r3, #32
 80168fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8016900:	f3bf 8f4f 	dsb	sy
}
 8016904:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8016906:	f3bf 8f6f 	isb	sy
}
 801690a:	bf00      	nop
}
 801690c:	bf00      	nop
 801690e:	370c      	adds	r7, #12
 8016910:	46bd      	mov	sp, r7
 8016912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016916:	4770      	bx	lr
 8016918:	e000e100 	.word	0xe000e100

0801691c <__NVIC_SetPriority>:
{
 801691c:	b480      	push	{r7}
 801691e:	b083      	sub	sp, #12
 8016920:	af00      	add	r7, sp, #0
 8016922:	4603      	mov	r3, r0
 8016924:	6039      	str	r1, [r7, #0]
 8016926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801692c:	2b00      	cmp	r3, #0
 801692e:	db0a      	blt.n	8016946 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016930:	683b      	ldr	r3, [r7, #0]
 8016932:	b2da      	uxtb	r2, r3
 8016934:	490c      	ldr	r1, [pc, #48]	; (8016968 <__NVIC_SetPriority+0x4c>)
 8016936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801693a:	0112      	lsls	r2, r2, #4
 801693c:	b2d2      	uxtb	r2, r2
 801693e:	440b      	add	r3, r1
 8016940:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8016944:	e00a      	b.n	801695c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016946:	683b      	ldr	r3, [r7, #0]
 8016948:	b2da      	uxtb	r2, r3
 801694a:	4908      	ldr	r1, [pc, #32]	; (801696c <__NVIC_SetPriority+0x50>)
 801694c:	79fb      	ldrb	r3, [r7, #7]
 801694e:	f003 030f 	and.w	r3, r3, #15
 8016952:	3b04      	subs	r3, #4
 8016954:	0112      	lsls	r2, r2, #4
 8016956:	b2d2      	uxtb	r2, r2
 8016958:	440b      	add	r3, r1
 801695a:	761a      	strb	r2, [r3, #24]
}
 801695c:	bf00      	nop
 801695e:	370c      	adds	r7, #12
 8016960:	46bd      	mov	sp, r7
 8016962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016966:	4770      	bx	lr
 8016968:	e000e100 	.word	0xe000e100
 801696c:	e000ed00 	.word	0xe000ed00

08016970 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8016970:	b5b0      	push	{r4, r5, r7, lr}
 8016972:	b082      	sub	sp, #8
 8016974:	af00      	add	r7, sp, #0
 8016976:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	4618      	mov	r0, r3
 801697c:	f001 f9e6 	bl	8017d4c <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(touchgfx::Application::getInstance()));
 8016980:	687d      	ldr	r5, [r7, #4]
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	681b      	ldr	r3, [r3, #0]
 8016986:	334c      	adds	r3, #76	; 0x4c
 8016988:	681c      	ldr	r4, [r3, #0]
 801698a:	f003 ff43 	bl	801a814 <_ZN8touchgfx11Application11getInstanceEv>
 801698e:	4603      	mov	r3, r0
 8016990:	4619      	mov	r1, r3
 8016992:	4628      	mov	r0, r5
 8016994:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	490d      	ldr	r1, [pc, #52]	; (80169d0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 801699a:	4618      	mov	r0, r3
 801699c:	f7ff ff6e 	bl	801687c <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	2101      	movs	r1, #1
 80169a4:	4618      	mov	r0, r3
 80169a6:	f7ff ff29 	bl	80167fc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>

    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 80169aa:	6878      	ldr	r0, [r7, #4]
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	3374      	adds	r3, #116	; 0x74
 80169b2:	681c      	ldr	r4, [r3, #0]
 80169b4:	2300      	movs	r3, #0
 80169b6:	2200      	movs	r2, #0
 80169b8:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80169bc:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	2101      	movs	r1, #1
 80169c2:	4618      	mov	r0, r3
 80169c4:	f7ff fef7 	bl	80167b6 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 80169c8:	bf00      	nop
 80169ca:	3708      	adds	r7, #8
 80169cc:	46bd      	mov	sp, r7
 80169ce:	bdb0      	pop	{r4, r5, r7, pc}
 80169d0:	08015595 	.word	0x08015595

080169d4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 80169d4:	b580      	push	{r7, lr}
 80169d6:	b082      	sub	sp, #8
 80169d8:	af00      	add	r7, sp, #0
 80169da:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 80169dc:	2109      	movs	r1, #9
 80169de:	205a      	movs	r0, #90	; 0x5a
 80169e0:	f7ff ff9c 	bl	801691c <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 80169e4:	2109      	movs	r1, #9
 80169e6:	2058      	movs	r0, #88	; 0x58
 80169e8:	f7ff ff98 	bl	801691c <__NVIC_SetPriority>
}
 80169ec:	bf00      	nop
 80169ee:	3708      	adds	r7, #8
 80169f0:	46bd      	mov	sp, r7
 80169f2:	bd80      	pop	{r7, pc}

080169f4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 80169f4:	b580      	push	{r7, lr}
 80169f6:	b082      	sub	sp, #8
 80169f8:	af00      	add	r7, sp, #0
 80169fa:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 80169fc:	205a      	movs	r0, #90	; 0x5a
 80169fe:	f7ff ff4b 	bl	8016898 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8016a02:	2058      	movs	r0, #88	; 0x58
 8016a04:	f7ff ff48 	bl	8016898 <__NVIC_EnableIRQ>
}
 8016a08:	bf00      	nop
 8016a0a:	3708      	adds	r7, #8
 8016a0c:	46bd      	mov	sp, r7
 8016a0e:	bd80      	pop	{r7, pc}

08016a10 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8016a10:	b580      	push	{r7, lr}
 8016a12:	b082      	sub	sp, #8
 8016a14:	af00      	add	r7, sp, #0
 8016a16:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8016a18:	205a      	movs	r0, #90	; 0x5a
 8016a1a:	f7ff ff5b 	bl	80168d4 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8016a1e:	2058      	movs	r0, #88	; 0x58
 8016a20:	f7ff ff58 	bl	80168d4 <__NVIC_DisableIRQ>
}
 8016a24:	bf00      	nop
 8016a26:	3708      	adds	r7, #8
 8016a28:	46bd      	mov	sp, r7
 8016a2a:	bd80      	pop	{r7, pc}

08016a2c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8016a2c:	b480      	push	{r7}
 8016a2e:	b083      	sub	sp, #12
 8016a30:	af00      	add	r7, sp, #0
 8016a32:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8016a34:	4b11      	ldr	r3, [pc, #68]	; (8016a7c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8016a36:	68db      	ldr	r3, [r3, #12]
 8016a38:	b29b      	uxth	r3, r3
 8016a3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016a3e:	b29b      	uxth	r3, r3
 8016a40:	3b01      	subs	r3, #1
 8016a42:	b29a      	uxth	r2, r3
 8016a44:	4b0e      	ldr	r3, [pc, #56]	; (8016a80 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8016a46:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8016a48:	4b0c      	ldr	r3, [pc, #48]	; (8016a7c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8016a4a:	691b      	ldr	r3, [r3, #16]
 8016a4c:	b29b      	uxth	r3, r3
 8016a4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016a52:	b29b      	uxth	r3, r3
 8016a54:	3b01      	subs	r3, #1
 8016a56:	b29a      	uxth	r2, r3
 8016a58:	4b0a      	ldr	r3, [pc, #40]	; (8016a84 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8016a5a:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8016a5c:	4b08      	ldr	r3, [pc, #32]	; (8016a80 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8016a5e:	881a      	ldrh	r2, [r3, #0]
 8016a60:	4b06      	ldr	r3, [pc, #24]	; (8016a7c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8016a62:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8016a64:	4b05      	ldr	r3, [pc, #20]	; (8016a7c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8016a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016a68:	4a04      	ldr	r2, [pc, #16]	; (8016a7c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8016a6a:	f043 0301 	orr.w	r3, r3, #1
 8016a6e:	6353      	str	r3, [r2, #52]	; 0x34
}
 8016a70:	bf00      	nop
 8016a72:	370c      	adds	r7, #12
 8016a74:	46bd      	mov	sp, r7
 8016a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a7a:	4770      	bx	lr
 8016a7c:	40016800 	.word	0x40016800
 8016a80:	2000c67c 	.word	0x2000c67c
 8016a84:	2000c67e 	.word	0x2000c67e

08016a88 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8016a88:	b480      	push	{r7}
 8016a8a:	b083      	sub	sp, #12
 8016a8c:	af00      	add	r7, sp, #0
 8016a8e:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8016a90:	4b03      	ldr	r3, [pc, #12]	; (8016aa0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8016a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8016a94:	4618      	mov	r0, r3
 8016a96:	370c      	adds	r7, #12
 8016a98:	46bd      	mov	sp, r7
 8016a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a9e:	4770      	bx	lr
 8016aa0:	40016884 	.word	0x40016884

08016aa4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8016aa4:	b480      	push	{r7}
 8016aa6:	b083      	sub	sp, #12
 8016aa8:	af00      	add	r7, sp, #0
 8016aaa:	6078      	str	r0, [r7, #4]
 8016aac:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8016aae:	4a06      	ldr	r2, [pc, #24]	; (8016ac8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8016ab0:	683b      	ldr	r3, [r7, #0]
 8016ab2:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8016ab4:	4b05      	ldr	r3, [pc, #20]	; (8016acc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8016ab6:	2201      	movs	r2, #1
 8016ab8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8016aba:	bf00      	nop
 8016abc:	370c      	adds	r7, #12
 8016abe:	46bd      	mov	sp, r7
 8016ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ac4:	4770      	bx	lr
 8016ac6:	bf00      	nop
 8016ac8:	40016884 	.word	0x40016884
 8016acc:	40016800 	.word	0x40016800

08016ad0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8016ad0:	b580      	push	{r7, lr}
 8016ad2:	b082      	sub	sp, #8
 8016ad4:	af00      	add	r7, sp, #0
 8016ad6:	6078      	str	r0, [r7, #4]
 8016ad8:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	6839      	ldr	r1, [r7, #0]
 8016ade:	4618      	mov	r0, r3
 8016ae0:	f000 fe44 	bl	801776c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8016ae4:	bf00      	nop
 8016ae6:	3708      	adds	r7, #8
 8016ae8:	46bd      	mov	sp, r7
 8016aea:	bd80      	pop	{r7, pc}

08016aec <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8016aec:	b480      	push	{r7}
 8016aee:	b085      	sub	sp, #20
 8016af0:	af00      	add	r7, sp, #0
 8016af2:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8016af4:	4b0d      	ldr	r3, [pc, #52]	; (8016b2c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8016af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016af8:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8016afa:	4b0c      	ldr	r3, [pc, #48]	; (8016b2c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8016afc:	68db      	ldr	r3, [r3, #12]
 8016afe:	b29b      	uxth	r3, r3
 8016b00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016b04:	b29b      	uxth	r3, r3
 8016b06:	3301      	adds	r3, #1
 8016b08:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 8016b0a:	89fa      	ldrh	r2, [r7, #14]
 8016b0c:	89bb      	ldrh	r3, [r7, #12]
 8016b0e:	429a      	cmp	r2, r3
 8016b10:	d201      	bcs.n	8016b16 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 8016b12:	2300      	movs	r3, #0
 8016b14:	e003      	b.n	8016b1e <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 8016b16:	89fa      	ldrh	r2, [r7, #14]
 8016b18:	89bb      	ldrh	r3, [r7, #12]
 8016b1a:	1ad3      	subs	r3, r2, r3
 8016b1c:	b29b      	uxth	r3, r3
    }
}
 8016b1e:	4618      	mov	r0, r3
 8016b20:	3714      	adds	r7, #20
 8016b22:	46bd      	mov	sp, r7
 8016b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b28:	4770      	bx	lr
 8016b2a:	bf00      	nop
 8016b2c:	40016800 	.word	0x40016800

08016b30 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 8016b30:	b580      	push	{r7, lr}
 8016b32:	b082      	sub	sp, #8
 8016b34:	af00      	add	r7, sp, #0
 8016b36:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8016b38:	4b1a      	ldr	r3, [pc, #104]	; (8016ba4 <HAL_LTDC_LineEventCallback+0x74>)
 8016b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b3c:	4a1a      	ldr	r2, [pc, #104]	; (8016ba8 <HAL_LTDC_LineEventCallback+0x78>)
 8016b3e:	8812      	ldrh	r2, [r2, #0]
 8016b40:	4293      	cmp	r3, r2
 8016b42:	bf0c      	ite	eq
 8016b44:	2301      	moveq	r3, #1
 8016b46:	2300      	movne	r3, #0
 8016b48:	b2db      	uxtb	r3, r3
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d017      	beq.n	8016b7e <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8016b4e:	4b17      	ldr	r3, [pc, #92]	; (8016bac <HAL_LTDC_LineEventCallback+0x7c>)
 8016b50:	881b      	ldrh	r3, [r3, #0]
 8016b52:	4619      	mov	r1, r3
 8016b54:	6878      	ldr	r0, [r7, #4]
 8016b56:	f7ef fc69 	bl	800642c <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8016b5a:	f7f9 fa29 	bl	800ffb0 <_ZN8touchgfx3HAL11getInstanceEv>
 8016b5e:	4603      	mov	r3, r0
 8016b60:	4618      	mov	r0, r3
 8016b62:	f7ff fe38 	bl	80167d6 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8016b66:	f7fe fcd7 	bl	8015518 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8016b6a:	f7f9 fa21 	bl	800ffb0 <_ZN8touchgfx3HAL11getInstanceEv>
 8016b6e:	4603      	mov	r3, r0
 8016b70:	4618      	mov	r0, r3
 8016b72:	f001 fb73 	bl	801825c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8016b76:	2000      	movs	r0, #0
 8016b78:	f7fe fa06 	bl	8014f88 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8016b7c:	e00e      	b.n	8016b9c <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8016b7e:	4b0a      	ldr	r3, [pc, #40]	; (8016ba8 <HAL_LTDC_LineEventCallback+0x78>)
 8016b80:	881b      	ldrh	r3, [r3, #0]
 8016b82:	4619      	mov	r1, r3
 8016b84:	6878      	ldr	r0, [r7, #4]
 8016b86:	f7ef fc51 	bl	800642c <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8016b8a:	2000      	movs	r0, #0
 8016b8c:	f7fe fa07 	bl	8014f9e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8016b90:	f7f9 fa0e 	bl	800ffb0 <_ZN8touchgfx3HAL11getInstanceEv>
 8016b94:	4603      	mov	r3, r0
 8016b96:	4618      	mov	r0, r3
 8016b98:	f7ff fdff 	bl	801679a <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8016b9c:	bf00      	nop
 8016b9e:	3708      	adds	r7, #8
 8016ba0:	46bd      	mov	sp, r7
 8016ba2:	bd80      	pop	{r7, pc}
 8016ba4:	40016800 	.word	0x40016800
 8016ba8:	2000c67c 	.word	0x2000c67c
 8016bac:	2000c67e 	.word	0x2000c67e

08016bb0 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8016bb0:	8880      	ldrh	r0, [r0, #4]
 8016bb2:	4770      	bx	lr

08016bb4 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8016bb4:	2300      	movs	r3, #0
 8016bb6:	8083      	strh	r3, [r0, #4]
 8016bb8:	4770      	bx	lr
	...

08016bbc <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8016bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bbe:	6803      	ldr	r3, [r0, #0]
 8016bc0:	460e      	mov	r6, r1
 8016bc2:	2100      	movs	r1, #0
 8016bc4:	4605      	mov	r5, r0
 8016bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016bc8:	4798      	blx	r3
 8016bca:	4604      	mov	r4, r0
 8016bcc:	682b      	ldr	r3, [r5, #0]
 8016bce:	4628      	mov	r0, r5
 8016bd0:	1b34      	subs	r4, r6, r4
 8016bd2:	6a1b      	ldr	r3, [r3, #32]
 8016bd4:	b2a4      	uxth	r4, r4
 8016bd6:	4798      	blx	r3
 8016bd8:	88ab      	ldrh	r3, [r5, #4]
 8016bda:	fbb4 f4f0 	udiv	r4, r4, r0
 8016bde:	42a3      	cmp	r3, r4
 8016be0:	d805      	bhi.n	8016bee <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8016be2:	4b0e      	ldr	r3, [pc, #56]	; (8016c1c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8016be4:	211e      	movs	r1, #30
 8016be6:	4a0e      	ldr	r2, [pc, #56]	; (8016c20 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8016be8:	480e      	ldr	r0, [pc, #56]	; (8016c24 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8016bea:	f00f fe07 	bl	80267fc <__assert_func>
 8016bee:	682b      	ldr	r3, [r5, #0]
 8016bf0:	2100      	movs	r1, #0
 8016bf2:	4628      	mov	r0, r5
 8016bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016bf6:	4798      	blx	r3
 8016bf8:	682b      	ldr	r3, [r5, #0]
 8016bfa:	4607      	mov	r7, r0
 8016bfc:	4628      	mov	r0, r5
 8016bfe:	6a1b      	ldr	r3, [r3, #32]
 8016c00:	4798      	blx	r3
 8016c02:	1bf3      	subs	r3, r6, r7
 8016c04:	b29b      	uxth	r3, r3
 8016c06:	fbb3 f2f0 	udiv	r2, r3, r0
 8016c0a:	fb02 3010 	mls	r0, r2, r0, r3
 8016c0e:	b118      	cbz	r0, 8016c18 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8016c10:	4b05      	ldr	r3, [pc, #20]	; (8016c28 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8016c12:	211f      	movs	r1, #31
 8016c14:	4a02      	ldr	r2, [pc, #8]	; (8016c20 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8016c16:	e7e7      	b.n	8016be8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8016c18:	4620      	mov	r0, r4
 8016c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c1c:	080289e8 	.word	0x080289e8
 8016c20:	08028b56 	.word	0x08028b56
 8016c24:	080289fd 	.word	0x080289fd
 8016c28:	08028a2b 	.word	0x08028a2b

08016c2c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8016c2c:	b538      	push	{r3, r4, r5, lr}
 8016c2e:	6803      	ldr	r3, [r0, #0]
 8016c30:	460d      	mov	r5, r1
 8016c32:	4604      	mov	r4, r0
 8016c34:	6a1b      	ldr	r3, [r3, #32]
 8016c36:	4798      	blx	r3
 8016c38:	4285      	cmp	r5, r0
 8016c3a:	d905      	bls.n	8016c48 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8016c3c:	4b0c      	ldr	r3, [pc, #48]	; (8016c70 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8016c3e:	212f      	movs	r1, #47	; 0x2f
 8016c40:	4a0c      	ldr	r2, [pc, #48]	; (8016c74 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8016c42:	480d      	ldr	r0, [pc, #52]	; (8016c78 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8016c44:	f00f fdda 	bl	80267fc <__assert_func>
 8016c48:	6823      	ldr	r3, [r4, #0]
 8016c4a:	4620      	mov	r0, r4
 8016c4c:	88a5      	ldrh	r5, [r4, #4]
 8016c4e:	69db      	ldr	r3, [r3, #28]
 8016c50:	4798      	blx	r3
 8016c52:	4285      	cmp	r5, r0
 8016c54:	d303      	bcc.n	8016c5e <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8016c56:	4b09      	ldr	r3, [pc, #36]	; (8016c7c <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8016c58:	2130      	movs	r1, #48	; 0x30
 8016c5a:	4a06      	ldr	r2, [pc, #24]	; (8016c74 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8016c5c:	e7f1      	b.n	8016c42 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8016c5e:	6823      	ldr	r3, [r4, #0]
 8016c60:	4620      	mov	r0, r4
 8016c62:	88a1      	ldrh	r1, [r4, #4]
 8016c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c66:	4798      	blx	r3
 8016c68:	88a3      	ldrh	r3, [r4, #4]
 8016c6a:	3301      	adds	r3, #1
 8016c6c:	80a3      	strh	r3, [r4, #4]
 8016c6e:	bd38      	pop	{r3, r4, r5, pc}
 8016c70:	08028aa5 	.word	0x08028aa5
 8016c74:	08028b99 	.word	0x08028b99
 8016c78:	080289fd 	.word	0x080289fd
 8016c7c:	08028abc 	.word	0x08028abc

08016c80 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8016c80:	b570      	push	{r4, r5, r6, lr}
 8016c82:	6803      	ldr	r3, [r0, #0]
 8016c84:	4616      	mov	r6, r2
 8016c86:	4604      	mov	r4, r0
 8016c88:	460d      	mov	r5, r1
 8016c8a:	6a1b      	ldr	r3, [r3, #32]
 8016c8c:	4798      	blx	r3
 8016c8e:	4286      	cmp	r6, r0
 8016c90:	d905      	bls.n	8016c9e <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8016c92:	4b06      	ldr	r3, [pc, #24]	; (8016cac <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8016c94:	2139      	movs	r1, #57	; 0x39
 8016c96:	4a06      	ldr	r2, [pc, #24]	; (8016cb0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8016c98:	4806      	ldr	r0, [pc, #24]	; (8016cb4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8016c9a:	f00f fdaf 	bl	80267fc <__assert_func>
 8016c9e:	6823      	ldr	r3, [r4, #0]
 8016ca0:	4629      	mov	r1, r5
 8016ca2:	4620      	mov	r0, r4
 8016ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ca6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016caa:	4718      	bx	r3
 8016cac:	08028aa5 	.word	0x08028aa5
 8016cb0:	08028b0c 	.word	0x08028b0c
 8016cb4:	080289fd 	.word	0x080289fd

08016cb8 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8016cb8:	4770      	bx	lr
	...

08016cbc <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8016cbc:	4a02      	ldr	r2, [pc, #8]	; (8016cc8 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8016cbe:	6002      	str	r2, [r0, #0]
 8016cc0:	2200      	movs	r2, #0
 8016cc2:	8082      	strh	r2, [r0, #4]
 8016cc4:	4770      	bx	lr
 8016cc6:	bf00      	nop
 8016cc8:	08028ae0 	.word	0x08028ae0

08016ccc <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>:
 8016ccc:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
 8016cd0:	4770      	bx	lr

08016cd2 <_ZNK8touchgfx11BoxProgress8getColorEv>:
 8016cd2:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 8016cd6:	4770      	bx	lr

08016cd8 <_ZN8touchgfx11BoxProgress8setAlphaEh>:
 8016cd8:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
 8016cdc:	4770      	bx	lr

08016cde <_ZNK8touchgfx11BoxProgress8getAlphaEv>:
 8016cde:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
 8016ce2:	4770      	bx	lr

08016ce4 <_ZN8touchgfx11BoxProgressD1Ev>:
 8016ce4:	4b03      	ldr	r3, [pc, #12]	; (8016cf4 <_ZN8touchgfx11BoxProgressD1Ev+0x10>)
 8016ce6:	b510      	push	{r4, lr}
 8016ce8:	4604      	mov	r4, r0
 8016cea:	6003      	str	r3, [r0, #0]
 8016cec:	f000 f8b6 	bl	8016e5c <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8016cf0:	4620      	mov	r0, r4
 8016cf2:	bd10      	pop	{r4, pc}
 8016cf4:	08028be0 	.word	0x08028be0

08016cf8 <_ZN8touchgfx11BoxProgressD0Ev>:
 8016cf8:	b510      	push	{r4, lr}
 8016cfa:	4604      	mov	r4, r0
 8016cfc:	f7ff fff2 	bl	8016ce4 <_ZN8touchgfx11BoxProgressD1Ev>
 8016d00:	21c0      	movs	r1, #192	; 0xc0
 8016d02:	4620      	mov	r0, r4
 8016d04:	f00f fd4c 	bl	80267a0 <_ZdlPvj>
 8016d08:	4620      	mov	r0, r4
 8016d0a:	bd10      	pop	{r4, pc}

08016d0c <_ZN8touchgfx11BoxProgressC1Ev>:
 8016d0c:	b510      	push	{r4, lr}
 8016d0e:	4604      	mov	r4, r0
 8016d10:	f000 f8b8 	bl	8016e84 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 8016d14:	2201      	movs	r2, #1
 8016d16:	4b16      	ldr	r3, [pc, #88]	; (8016d70 <_ZN8touchgfx11BoxProgressC1Ev+0x64>)
 8016d18:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016d1c:	f104 0190 	add.w	r1, r4, #144	; 0x90
 8016d20:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
 8016d24:	4a13      	ldr	r2, [pc, #76]	; (8016d74 <_ZN8touchgfx11BoxProgressC1Ev+0x68>)
 8016d26:	6023      	str	r3, [r4, #0]
 8016d28:	2300      	movs	r3, #0
 8016d2a:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8016d2e:	22ff      	movs	r2, #255	; 0xff
 8016d30:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
 8016d34:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
 8016d38:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
 8016d3c:	f8a4 309a 	strh.w	r3, [r4, #154]	; 0x9a
 8016d40:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
 8016d44:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8016d48:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 8016d4c:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 8016d50:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 8016d54:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8016d58:	f884 20b6 	strb.w	r2, [r4, #182]	; 0xb6
 8016d5c:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8016d60:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 8016d64:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 8016d68:	f000 fbb8 	bl	80174dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016d6c:	4620      	mov	r0, r4
 8016d6e:	bd10      	pop	{r4, pc}
 8016d70:	08028be0 	.word	0x08028be0
 8016d74:	08029e98 	.word	0x08029e98

08016d78 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>:
 8016d78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016d7c:	4617      	mov	r7, r2
 8016d7e:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 8016d82:	2200      	movs	r2, #0
 8016d84:	4604      	mov	r4, r0
 8016d86:	460e      	mov	r6, r1
 8016d88:	4698      	mov	r8, r3
 8016d8a:	4611      	mov	r1, r2
 8016d8c:	9500      	str	r5, [sp, #0]
 8016d8e:	3090      	adds	r0, #144	; 0x90
 8016d90:	f7f9 fdcc 	bl	801092c <_ZN8touchgfx8Drawable11setPositionEssss>
 8016d94:	4643      	mov	r3, r8
 8016d96:	463a      	mov	r2, r7
 8016d98:	4631      	mov	r1, r6
 8016d9a:	4620      	mov	r0, r4
 8016d9c:	9508      	str	r5, [sp, #32]
 8016d9e:	b002      	add	sp, #8
 8016da0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016da4:	f000 b9fa 	b.w	801719c <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08016da8 <_ZN8touchgfx11BoxProgress8setValueEi>:
 8016da8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016daa:	4604      	mov	r4, r0
 8016dac:	f000 fa40 	bl	8017230 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8016db0:	f104 0590 	add.w	r5, r4, #144	; 0x90
 8016db4:	4628      	mov	r0, r5
 8016db6:	f004 f95b 	bl	801b070 <_ZNK8touchgfx8Drawable10invalidateEv>
 8016dba:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8016dbe:	2b03      	cmp	r3, #3
 8016dc0:	d814      	bhi.n	8016dec <_ZN8touchgfx11BoxProgress8setValueEi+0x44>
 8016dc2:	e8df f003 	tbb	[pc, r3]
 8016dc6:	0202      	.short	0x0202
 8016dc8:	1010      	.short	0x1010
 8016dca:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8016dce:	4620      	mov	r0, r4
 8016dd0:	f000 fa88 	bl	80172e4 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8016dd4:	b200      	sxth	r0, r0
 8016dd6:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8016dda:	2b03      	cmp	r3, #3
 8016ddc:	d81a      	bhi.n	8016e14 <_ZN8touchgfx11BoxProgress8setValueEi+0x6c>
 8016dde:	e8df f003 	tbb	[pc, r3]
 8016de2:	0e07      	.short	0x0e07
 8016de4:	231f      	.short	0x231f
 8016de6:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 8016dea:	e7f0      	b.n	8016dce <_ZN8touchgfx11BoxProgress8setValueEi+0x26>
 8016dec:	2000      	movs	r0, #0
 8016dee:	e7f2      	b.n	8016dd6 <_ZN8touchgfx11BoxProgress8setValueEi+0x2e>
 8016df0:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8016df4:	9300      	str	r3, [sp, #0]
 8016df6:	4603      	mov	r3, r0
 8016df8:	2200      	movs	r2, #0
 8016dfa:	2100      	movs	r1, #0
 8016dfc:	e007      	b.n	8016e0e <_ZN8touchgfx11BoxProgress8setValueEi+0x66>
 8016dfe:	8921      	ldrh	r1, [r4, #8]
 8016e00:	2200      	movs	r2, #0
 8016e02:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8016e06:	1a09      	subs	r1, r1, r0
 8016e08:	9300      	str	r3, [sp, #0]
 8016e0a:	4603      	mov	r3, r0
 8016e0c:	b209      	sxth	r1, r1
 8016e0e:	4628      	mov	r0, r5
 8016e10:	f7f9 fd8c 	bl	801092c <_ZN8touchgfx8Drawable11setPositionEssss>
 8016e14:	4628      	mov	r0, r5
 8016e16:	b003      	add	sp, #12
 8016e18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016e1c:	f004 b928 	b.w	801b070 <_ZNK8touchgfx8Drawable10invalidateEv>
 8016e20:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016e24:	9000      	str	r0, [sp, #0]
 8016e26:	e7e7      	b.n	8016df8 <_ZN8touchgfx11BoxProgress8setValueEi+0x50>
 8016e28:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8016e2c:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016e30:	1a12      	subs	r2, r2, r0
 8016e32:	9000      	str	r0, [sp, #0]
 8016e34:	b212      	sxth	r2, r2
 8016e36:	e7e0      	b.n	8016dfa <_ZN8touchgfx11BoxProgress8setValueEi+0x52>

08016e38 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 8016e38:	b570      	push	{r4, r5, r6, lr}
 8016e3a:	6803      	ldr	r3, [r0, #0]
 8016e3c:	4604      	mov	r4, r0
 8016e3e:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
 8016e42:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 8016e46:	4798      	blx	r3
 8016e48:	4601      	mov	r1, r0
 8016e4a:	462b      	mov	r3, r5
 8016e4c:	4620      	mov	r0, r4
 8016e4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016e52:	4718      	bx	r3

08016e54 <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 8016e54:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
 8016e58:	4770      	bx	lr
	...

08016e5c <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
 8016e5c:	4b03      	ldr	r3, [pc, #12]	; (8016e6c <_ZN8touchgfx25AbstractDirectionProgressD1Ev+0x10>)
 8016e5e:	b510      	push	{r4, lr}
 8016e60:	4604      	mov	r4, r0
 8016e62:	6003      	str	r3, [r0, #0]
 8016e64:	f000 f999 	bl	801719a <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8016e68:	4620      	mov	r0, r4
 8016e6a:	bd10      	pop	{r4, pc}
 8016e6c:	08028cb8 	.word	0x08028cb8

08016e70 <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 8016e70:	b510      	push	{r4, lr}
 8016e72:	4604      	mov	r4, r0
 8016e74:	f7ff fff2 	bl	8016e5c <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8016e78:	2190      	movs	r1, #144	; 0x90
 8016e7a:	4620      	mov	r0, r4
 8016e7c:	f00f fc90 	bl	80267a0 <_ZdlPvj>
 8016e80:	4620      	mov	r0, r4
 8016e82:	bd10      	pop	{r4, pc}

08016e84 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 8016e84:	b510      	push	{r4, lr}
 8016e86:	4604      	mov	r4, r0
 8016e88:	f000 fa4c 	bl	8017324 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 8016e8c:	4b03      	ldr	r3, [pc, #12]	; (8016e9c <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 8016e8e:	2100      	movs	r1, #0
 8016e90:	4620      	mov	r0, r4
 8016e92:	6023      	str	r3, [r4, #0]
 8016e94:	f7ff ffd0 	bl	8016e38 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
 8016e98:	4620      	mov	r0, r4
 8016e9a:	bd10      	pop	{r4, pc}
 8016e9c:	08028cb8 	.word	0x08028cb8

08016ea0 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>:
 8016ea0:	b570      	push	{r4, r5, r6, lr}
 8016ea2:	6803      	ldr	r3, [r0, #0]
 8016ea4:	4604      	mov	r4, r0
 8016ea6:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
 8016eaa:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 8016eae:	4798      	blx	r3
 8016eb0:	4601      	mov	r1, r0
 8016eb2:	462b      	mov	r3, r5
 8016eb4:	4620      	mov	r0, r4
 8016eb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016eba:	4718      	bx	r3

08016ebc <_ZNK8touchgfx13ImageProgress15getAnchorAtZeroEv>:
 8016ebc:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
 8016ec0:	4770      	bx	lr

08016ec2 <_ZN8touchgfx13ImageProgress8setAlphaEh>:
 8016ec2:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
 8016ec6:	4770      	bx	lr

08016ec8 <_ZNK8touchgfx13ImageProgress8getAlphaEv>:
 8016ec8:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
 8016ecc:	4770      	bx	lr

08016ece <_ZN8touchgfx13ImageProgress9setBitmapEt>:
 8016ece:	b507      	push	{r0, r1, r2, lr}
 8016ed0:	ab02      	add	r3, sp, #8
 8016ed2:	30bc      	adds	r0, #188	; 0xbc
 8016ed4:	f823 1d04 	strh.w	r1, [r3, #-4]!
 8016ed8:	4619      	mov	r1, r3
 8016eda:	f002 f9a9 	bl	8019230 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
 8016ede:	b003      	add	sp, #12
 8016ee0:	f85d fb04 	ldr.w	pc, [sp], #4

08016ee4 <_ZN8touchgfx13ImageProgressD1Ev>:
 8016ee4:	4b03      	ldr	r3, [pc, #12]	; (8016ef4 <_ZN8touchgfx13ImageProgressD1Ev+0x10>)
 8016ee6:	b510      	push	{r4, lr}
 8016ee8:	4604      	mov	r4, r0
 8016eea:	6003      	str	r3, [r0, #0]
 8016eec:	f7ff ffb6 	bl	8016e5c <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8016ef0:	4620      	mov	r0, r4
 8016ef2:	bd10      	pop	{r4, pc}
 8016ef4:	08028de4 	.word	0x08028de4

08016ef8 <_ZN8touchgfx13ImageProgressD0Ev>:
 8016ef8:	b510      	push	{r4, lr}
 8016efa:	4604      	mov	r4, r0
 8016efc:	f7ff fff2 	bl	8016ee4 <_ZN8touchgfx13ImageProgressD1Ev>
 8016f00:	21f0      	movs	r1, #240	; 0xf0
 8016f02:	4620      	mov	r0, r4
 8016f04:	f00f fc4c 	bl	80267a0 <_ZdlPvj>
 8016f08:	4620      	mov	r0, r4
 8016f0a:	bd10      	pop	{r4, pc}

08016f0c <_ZNK8touchgfx13ImageProgress9getBitmapEv>:
 8016f0c:	b508      	push	{r3, lr}
 8016f0e:	4b06      	ldr	r3, [pc, #24]	; (8016f28 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x1c>)
 8016f10:	681b      	ldr	r3, [r3, #0]
 8016f12:	b92b      	cbnz	r3, 8016f20 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x14>
 8016f14:	4b05      	ldr	r3, [pc, #20]	; (8016f2c <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x20>)
 8016f16:	21b8      	movs	r1, #184	; 0xb8
 8016f18:	4a05      	ldr	r2, [pc, #20]	; (8016f30 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x24>)
 8016f1a:	4806      	ldr	r0, [pc, #24]	; (8016f34 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x28>)
 8016f1c:	f00f fc6e 	bl	80267fc <__assert_func>
 8016f20:	f8b0 00e2 	ldrh.w	r0, [r0, #226]	; 0xe2
 8016f24:	bd08      	pop	{r3, pc}
 8016f26:	bf00      	nop
 8016f28:	2000c754 	.word	0x2000c754
 8016f2c:	08028d78 	.word	0x08028d78
 8016f30:	08028ebc 	.word	0x08028ebc
 8016f34:	08028db4 	.word	0x08028db4

08016f38 <_ZN8touchgfx13ImageProgressC1Ev>:
 8016f38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016f3c:	4604      	mov	r4, r0
 8016f3e:	f7ff ffa1 	bl	8016e84 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 8016f42:	4b31      	ldr	r3, [pc, #196]	; (8017008 <_ZN8touchgfx13ImageProgressC1Ev+0xd0>)
 8016f44:	a902      	add	r1, sp, #8
 8016f46:	4626      	mov	r6, r4
 8016f48:	f104 08bc 	add.w	r8, r4, #188	; 0xbc
 8016f4c:	2500      	movs	r5, #0
 8016f4e:	4a2f      	ldr	r2, [pc, #188]	; (801700c <_ZN8touchgfx13ImageProgressC1Ev+0xd4>)
 8016f50:	f846 3b90 	str.w	r3, [r6], #144
 8016f54:	2701      	movs	r7, #1
 8016f56:	4b2e      	ldr	r3, [pc, #184]	; (8017010 <_ZN8touchgfx13ImageProgressC1Ev+0xd8>)
 8016f58:	4640      	mov	r0, r8
 8016f5a:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
 8016f5e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8016f62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016f66:	f8a4 5094 	strh.w	r5, [r4, #148]	; 0x94
 8016f6a:	f821 3d04 	strh.w	r3, [r1, #-4]!
 8016f6e:	f8a4 30e2 	strh.w	r3, [r4, #226]	; 0xe2
 8016f72:	f8a4 5096 	strh.w	r5, [r4, #150]	; 0x96
 8016f76:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
 8016f7a:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
 8016f7e:	f8a4 509c 	strh.w	r5, [r4, #156]	; 0x9c
 8016f82:	f8a4 509e 	strh.w	r5, [r4, #158]	; 0x9e
 8016f86:	f8a4 50a0 	strh.w	r5, [r4, #160]	; 0xa0
 8016f8a:	f8a4 50a2 	strh.w	r5, [r4, #162]	; 0xa2
 8016f8e:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
 8016f92:	f884 50b4 	strb.w	r5, [r4, #180]	; 0xb4
 8016f96:	f884 70b5 	strb.w	r7, [r4, #181]	; 0xb5
 8016f9a:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
 8016f9e:	f8a4 50c0 	strh.w	r5, [r4, #192]	; 0xc0
 8016fa2:	f8a4 50c2 	strh.w	r5, [r4, #194]	; 0xc2
 8016fa6:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
 8016faa:	f8a4 50c6 	strh.w	r5, [r4, #198]	; 0xc6
 8016fae:	f8a4 50c8 	strh.w	r5, [r4, #200]	; 0xc8
 8016fb2:	f8a4 50ca 	strh.w	r5, [r4, #202]	; 0xca
 8016fb6:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
 8016fba:	f8a4 50ce 	strh.w	r5, [r4, #206]	; 0xce
 8016fbe:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
 8016fc2:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
 8016fc6:	f884 70e1 	strb.w	r7, [r4, #225]	; 0xe1
 8016fca:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8016fce:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
 8016fd2:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
 8016fd6:	f002 fb6f 	bl	80196b8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8016fda:	4b0e      	ldr	r3, [pc, #56]	; (8017014 <_ZN8touchgfx13ImageProgressC1Ev+0xdc>)
 8016fdc:	4641      	mov	r1, r8
 8016fde:	4630      	mov	r0, r6
 8016fe0:	f8a4 50e6 	strh.w	r5, [r4, #230]	; 0xe6
 8016fe4:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 8016fe8:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
 8016fec:	f884 70ec 	strb.w	r7, [r4, #236]	; 0xec
 8016ff0:	f000 fa74 	bl	80174dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016ff4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016ff8:	4631      	mov	r1, r6
 8016ffa:	f000 fa6f 	bl	80174dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016ffe:	4620      	mov	r0, r4
 8017000:	b002      	add	sp, #8
 8017002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017006:	bf00      	nop
 8017008:	08028de4 	.word	0x08028de4
 801700c:	0802a000 	.word	0x0802a000
 8017010:	08029160 	.word	0x08029160
 8017014:	08029f00 	.word	0x08029f00

08017018 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>:
 8017018:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801701c:	4617      	mov	r7, r2
 801701e:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 8017022:	2200      	movs	r2, #0
 8017024:	4604      	mov	r4, r0
 8017026:	460e      	mov	r6, r1
 8017028:	4698      	mov	r8, r3
 801702a:	4611      	mov	r1, r2
 801702c:	9500      	str	r5, [sp, #0]
 801702e:	3090      	adds	r0, #144	; 0x90
 8017030:	f7f9 fc7c 	bl	801092c <_ZN8touchgfx8Drawable11setPositionEssss>
 8017034:	4643      	mov	r3, r8
 8017036:	463a      	mov	r2, r7
 8017038:	4631      	mov	r1, r6
 801703a:	4620      	mov	r0, r4
 801703c:	9508      	str	r5, [sp, #32]
 801703e:	b002      	add	sp, #8
 8017040:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017044:	f000 b8aa 	b.w	801719c <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08017048 <_ZN8touchgfx13ImageProgress8setValueEi>:
 8017048:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801704a:	4604      	mov	r4, r0
 801704c:	f000 f8f0 	bl	8017230 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8017050:	f104 0790 	add.w	r7, r4, #144	; 0x90
 8017054:	4638      	mov	r0, r7
 8017056:	f004 f80b 	bl	801b070 <_ZNK8touchgfx8Drawable10invalidateEv>
 801705a:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 801705e:	4620      	mov	r0, r4
 8017060:	2b01      	cmp	r3, #1
 8017062:	bf94      	ite	ls
 8017064:	f8b4 1060 	ldrhls.w	r1, [r4, #96]	; 0x60
 8017068:	f8b4 1062 	ldrhhi.w	r1, [r4, #98]	; 0x62
 801706c:	f000 f93a 	bl	80172e4 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8017070:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
 8017074:	4606      	mov	r6, r0
 8017076:	b205      	sxth	r5, r0
 8017078:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 801707c:	2a00      	cmp	r2, #0
 801707e:	d056      	beq.n	801712e <_ZN8touchgfx13ImageProgress8setValueEi+0xe6>
 8017080:	2b03      	cmp	r3, #3
 8017082:	d82c      	bhi.n	80170de <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 8017084:	e8df f003 	tbb	[pc, r3]
 8017088:	3d311202 	.word	0x3d311202
 801708c:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8017090:	2200      	movs	r2, #0
 8017092:	9300      	str	r3, [sp, #0]
 8017094:	4611      	mov	r1, r2
 8017096:	462b      	mov	r3, r5
 8017098:	4638      	mov	r0, r7
 801709a:	f7f9 fc47 	bl	801092c <_ZN8touchgfx8Drawable11setPositionEssss>
 801709e:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 80170a2:	9300      	str	r3, [sp, #0]
 80170a4:	462b      	mov	r3, r5
 80170a6:	2200      	movs	r2, #0
 80170a8:	4611      	mov	r1, r2
 80170aa:	e014      	b.n	80170d6 <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 80170ac:	8921      	ldrh	r1, [r4, #8]
 80170ae:	2200      	movs	r2, #0
 80170b0:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 80170b4:	1a09      	subs	r1, r1, r0
 80170b6:	4638      	mov	r0, r7
 80170b8:	9300      	str	r3, [sp, #0]
 80170ba:	462b      	mov	r3, r5
 80170bc:	b209      	sxth	r1, r1
 80170be:	f7f9 fc35 	bl	801092c <_ZN8touchgfx8Drawable11setPositionEssss>
 80170c2:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
 80170c6:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80170ca:	4249      	negs	r1, r1
 80170cc:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	; 0x62
 80170d0:	9200      	str	r2, [sp, #0]
 80170d2:	b209      	sxth	r1, r1
 80170d4:	2200      	movs	r2, #0
 80170d6:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 80170da:	f7f9 fc27 	bl	801092c <_ZN8touchgfx8Drawable11setPositionEssss>
 80170de:	4638      	mov	r0, r7
 80170e0:	b003      	add	sp, #12
 80170e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80170e6:	f003 bfc3 	b.w	801b070 <_ZNK8touchgfx8Drawable10invalidateEv>
 80170ea:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80170ee:	2200      	movs	r2, #0
 80170f0:	9500      	str	r5, [sp, #0]
 80170f2:	2100      	movs	r1, #0
 80170f4:	4638      	mov	r0, r7
 80170f6:	f7f9 fc19 	bl	801092c <_ZN8touchgfx8Drawable11setPositionEssss>
 80170fa:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80170fe:	9500      	str	r5, [sp, #0]
 8017100:	e7d1      	b.n	80170a6 <_ZN8touchgfx13ImageProgress8setValueEi+0x5e>
 8017102:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8017106:	2100      	movs	r1, #0
 8017108:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801710c:	1a12      	subs	r2, r2, r0
 801710e:	9500      	str	r5, [sp, #0]
 8017110:	4638      	mov	r0, r7
 8017112:	b212      	sxth	r2, r2
 8017114:	f7f9 fc0a 	bl	801092c <_ZN8touchgfx8Drawable11setPositionEssss>
 8017118:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
 801711c:	f9b4 1062 	ldrsh.w	r1, [r4, #98]	; 0x62
 8017120:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8017124:	4252      	negs	r2, r2
 8017126:	9100      	str	r1, [sp, #0]
 8017128:	b212      	sxth	r2, r2
 801712a:	2100      	movs	r1, #0
 801712c:	e7d3      	b.n	80170d6 <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 801712e:	2b03      	cmp	r3, #3
 8017130:	d8d5      	bhi.n	80170de <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 8017132:	e8df f003 	tbb	[pc, r3]
 8017136:	1102      	.short	0x1102
 8017138:	2a1b      	.short	0x2a1b
 801713a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801713e:	2200      	movs	r2, #0
 8017140:	4638      	mov	r0, r7
 8017142:	4611      	mov	r1, r2
 8017144:	9300      	str	r3, [sp, #0]
 8017146:	462b      	mov	r3, r5
 8017148:	f7f9 fbf0 	bl	801092c <_ZN8touchgfx8Drawable11setPositionEssss>
 801714c:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8017150:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8017154:	1af1      	subs	r1, r6, r3
 8017156:	e7bb      	b.n	80170d0 <_ZN8touchgfx13ImageProgress8setValueEi+0x88>
 8017158:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 801715c:	2200      	movs	r2, #0
 801715e:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8017162:	1a09      	subs	r1, r1, r0
 8017164:	9300      	str	r3, [sp, #0]
 8017166:	462b      	mov	r3, r5
 8017168:	b209      	sxth	r1, r1
 801716a:	e795      	b.n	8017098 <_ZN8touchgfx13ImageProgress8setValueEi+0x50>
 801716c:	2200      	movs	r2, #0
 801716e:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8017172:	4638      	mov	r0, r7
 8017174:	9500      	str	r5, [sp, #0]
 8017176:	4611      	mov	r1, r2
 8017178:	f7f9 fbd8 	bl	801092c <_ZN8touchgfx8Drawable11setPositionEssss>
 801717c:	f9b4 0062 	ldrsh.w	r0, [r4, #98]	; 0x62
 8017180:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8017184:	1a32      	subs	r2, r6, r0
 8017186:	9000      	str	r0, [sp, #0]
 8017188:	e7ce      	b.n	8017128 <_ZN8touchgfx13ImageProgress8setValueEi+0xe0>
 801718a:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 801718e:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8017192:	1a12      	subs	r2, r2, r0
 8017194:	9500      	str	r5, [sp, #0]
 8017196:	b212      	sxth	r2, r2
 8017198:	e7ab      	b.n	80170f2 <_ZN8touchgfx13ImageProgress8setValueEi+0xaa>

0801719a <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 801719a:	4770      	bx	lr

0801719c <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 801719c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80171a0:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 80171a4:	4604      	mov	r4, r0
 80171a6:	460e      	mov	r6, r1
 80171a8:	4698      	mov	r8, r3
 80171aa:	9700      	str	r7, [sp, #0]
 80171ac:	3058      	adds	r0, #88	; 0x58
 80171ae:	4615      	mov	r5, r2
 80171b0:	f7f9 fbbc 	bl	801092c <_ZN8touchgfx8Drawable11setPositionEssss>
 80171b4:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80171b8:	eb06 0308 	add.w	r3, r6, r8
 80171bc:	429a      	cmp	r2, r3
 80171be:	eb05 0207 	add.w	r2, r5, r7
 80171c2:	bfb8      	it	lt
 80171c4:	8123      	strhlt	r3, [r4, #8]
 80171c6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80171ca:	4293      	cmp	r3, r2
 80171cc:	bfb8      	it	lt
 80171ce:	8162      	strhlt	r2, [r4, #10]
 80171d0:	b002      	add	sp, #8
 80171d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080171d6 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 80171d6:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 80171da:	4770      	bx	lr

080171dc <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 80171dc:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 80171e0:	4770      	bx	lr

080171e2 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 80171e2:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 80171e6:	4770      	bx	lr

080171e8 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 80171e8:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 80171ec:	4770      	bx	lr

080171ee <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_RtS2_>:
 80171ee:	b510      	push	{r4, lr}
 80171f0:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 80171f4:	800c      	strh	r4, [r1, #0]
 80171f6:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 80171fa:	8011      	strh	r1, [r2, #0]
 80171fc:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 8017200:	801a      	strh	r2, [r3, #0]
 8017202:	9b02      	ldr	r3, [sp, #8]
 8017204:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
 8017208:	801a      	strh	r2, [r3, #0]
 801720a:	bd10      	pop	{r4, pc}

0801720c <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_Rt>:
 801720c:	b510      	push	{r4, lr}
 801720e:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 8017212:	800c      	strh	r4, [r1, #0]
 8017214:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 8017218:	8011      	strh	r1, [r2, #0]
 801721a:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 801721e:	801a      	strh	r2, [r3, #0]
 8017220:	bd10      	pop	{r4, pc}

08017222 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_>:
 8017222:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 8017226:	800b      	strh	r3, [r1, #0]
 8017228:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 801722c:	8013      	strh	r3, [r2, #0]
 801722e:	4770      	bx	lr

08017230 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 8017230:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 8017234:	4299      	cmp	r1, r3
 8017236:	bfb8      	it	lt
 8017238:	4619      	movlt	r1, r3
 801723a:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 801723e:	4299      	cmp	r1, r3
 8017240:	bfa8      	it	ge
 8017242:	4619      	movge	r1, r3
 8017244:	f8a0 1088 	strh.w	r1, [r0, #136]	; 0x88
 8017248:	4770      	bx	lr

0801724a <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 801724a:	f8b0 0088 	ldrh.w	r0, [r0, #136]	; 0x88
 801724e:	4770      	bx	lr

08017250 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 8017250:	b510      	push	{r4, lr}
 8017252:	4604      	mov	r4, r0
 8017254:	2190      	movs	r1, #144	; 0x90
 8017256:	f00f faa3 	bl	80267a0 <_ZdlPvj>
 801725a:	4620      	mov	r0, r4
 801725c:	bd10      	pop	{r4, pc}

0801725e <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 801725e:	b510      	push	{r4, lr}
 8017260:	4604      	mov	r4, r0
 8017262:	302c      	adds	r0, #44	; 0x2c
 8017264:	f002 fa28 	bl	80196b8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8017268:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801726a:	8123      	strh	r3, [r4, #8]
 801726c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801726e:	8163      	strh	r3, [r4, #10]
 8017270:	bd10      	pop	{r4, pc}
	...

08017274 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>:
 8017274:	4291      	cmp	r1, r2
 8017276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801727a:	4604      	mov	r4, r0
 801727c:	460e      	mov	r6, r1
 801727e:	4615      	mov	r5, r2
 8017280:	4698      	mov	r8, r3
 8017282:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8017286:	db05      	blt.n	8017294 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x20>
 8017288:	4b12      	ldr	r3, [pc, #72]	; (80172d4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x60>)
 801728a:	214d      	movs	r1, #77	; 0x4d
 801728c:	4a12      	ldr	r2, [pc, #72]	; (80172d8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 801728e:	4813      	ldr	r0, [pc, #76]	; (80172dc <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x68>)
 8017290:	f00f fab4 	bl	80267fc <__assert_func>
 8017294:	f8a4 1084 	strh.w	r1, [r4, #132]	; 0x84
 8017298:	f8a4 2086 	strh.w	r2, [r4, #134]	; 0x86
 801729c:	6803      	ldr	r3, [r0, #0]
 801729e:	f8b0 1088 	ldrh.w	r1, [r0, #136]	; 0x88
 80172a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80172a6:	4798      	blx	r3
 80172a8:	f1b8 0f00 	cmp.w	r8, #0
 80172ac:	d10c      	bne.n	80172c8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x54>
 80172ae:	1bad      	subs	r5, r5, r6
 80172b0:	f8a4 508a 	strh.w	r5, [r4, #138]	; 0x8a
 80172b4:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
 80172b8:	f8a4 708c 	strh.w	r7, [r4, #140]	; 0x8c
 80172bc:	42bb      	cmp	r3, r7
 80172be:	d806      	bhi.n	80172ce <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x5a>
 80172c0:	4b07      	ldr	r3, [pc, #28]	; (80172e0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x6c>)
 80172c2:	215a      	movs	r1, #90	; 0x5a
 80172c4:	4a04      	ldr	r2, [pc, #16]	; (80172d8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 80172c6:	e7e2      	b.n	801728e <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x1a>
 80172c8:	f8a4 808a 	strh.w	r8, [r4, #138]	; 0x8a
 80172cc:	e7f2      	b.n	80172b4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x40>
 80172ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172d2:	bf00      	nop
 80172d4:	08028eef 	.word	0x08028eef
 80172d8:	0802902c 	.word	0x0802902c
 80172dc:	08028ef9 	.word	0x08028ef9
 80172e0:	08028f50 	.word	0x08028f50

080172e4 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 80172e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80172e6:	4604      	mov	r4, r0
 80172e8:	460d      	mov	r5, r1
 80172ea:	b1b9      	cbz	r1, 801731c <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x38>
 80172ec:	f8b0 608c 	ldrh.w	r6, [r0, #140]	; 0x8c
 80172f0:	ab01      	add	r3, sp, #4
 80172f2:	f9b0 0084 	ldrsh.w	r0, [r0, #132]	; 0x84
 80172f6:	f9b4 2086 	ldrsh.w	r2, [r4, #134]	; 0x86
 80172fa:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
 80172fe:	f8b4 7088 	ldrh.w	r7, [r4, #136]	; 0x88
 8017302:	1a12      	subs	r2, r2, r0
 8017304:	1b89      	subs	r1, r1, r6
 8017306:	1a38      	subs	r0, r7, r0
 8017308:	f003 fff3 	bl	801b2f2 <_ZN8touchgfx6muldivElllRl>
 801730c:	4629      	mov	r1, r5
 801730e:	ab01      	add	r3, sp, #4
 8017310:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
 8017314:	4430      	add	r0, r6
 8017316:	f003 ffec 	bl	801b2f2 <_ZN8touchgfx6muldivElllRl>
 801731a:	b285      	uxth	r5, r0
 801731c:	4628      	mov	r0, r5
 801731e:	b003      	add	sp, #12
 8017320:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08017324 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8017324:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8017328:	4604      	mov	r4, r0
 801732a:	2600      	movs	r6, #0
 801732c:	f7f9 fab0 	bl	8010890 <_ZN8touchgfx8DrawableC1Ev>
 8017330:	4b1b      	ldr	r3, [pc, #108]	; (80173a0 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x7c>)
 8017332:	4625      	mov	r5, r4
 8017334:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8017338:	af02      	add	r7, sp, #8
 801733a:	62a6      	str	r6, [r4, #40]	; 0x28
 801733c:	f845 3b2c 	str.w	r3, [r5], #44
 8017340:	4628      	mov	r0, r5
 8017342:	f827 8d04 	strh.w	r8, [r7, #-4]!
 8017346:	f7f9 faa3 	bl	8010890 <_ZN8touchgfx8DrawableC1Ev>
 801734a:	4b16      	ldr	r3, [pc, #88]	; (80173a4 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x80>)
 801734c:	4639      	mov	r1, r7
 801734e:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8017352:	4628      	mov	r0, r5
 8017354:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017356:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
 801735a:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
 801735e:	f002 f9ab 	bl	80196b8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8017362:	4638      	mov	r0, r7
 8017364:	f7f9 fa94 	bl	8010890 <_ZN8touchgfx8DrawableC1Ev>
 8017368:	4b0f      	ldr	r3, [pc, #60]	; (80173a8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x84>)
 801736a:	4632      	mov	r2, r6
 801736c:	4631      	mov	r1, r6
 801736e:	65a3      	str	r3, [r4, #88]	; 0x58
 8017370:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8017374:	4628      	mov	r0, r5
 8017376:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 801737a:	f8a4 608c 	strh.w	r6, [r4, #140]	; 0x8c
 801737e:	e9c4 3321 	strd	r3, r3, [r4, #132]	; 0x84
 8017382:	f7f9 fb1e 	bl	80109c2 <_ZN8touchgfx8Drawable5setXYEss>
 8017386:	4629      	mov	r1, r5
 8017388:	4620      	mov	r0, r4
 801738a:	f000 f8a7 	bl	80174dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801738e:	4620      	mov	r0, r4
 8017390:	4639      	mov	r1, r7
 8017392:	f000 f8a3 	bl	80174dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8017396:	4620      	mov	r0, r4
 8017398:	b002      	add	sp, #8
 801739a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801739e:	bf00      	nop
 80173a0:	08028f74 	.word	0x08028f74
 80173a4:	0802a000 	.word	0x0802a000
 80173a8:	08029160 	.word	0x08029160

080173ac <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80173ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80173ae:	2000      	movs	r0, #0
 80173b0:	b12b      	cbz	r3, 80173be <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80173b2:	b920      	cbnz	r0, 80173be <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80173b4:	1a5a      	subs	r2, r3, r1
 80173b6:	699b      	ldr	r3, [r3, #24]
 80173b8:	4250      	negs	r0, r2
 80173ba:	4150      	adcs	r0, r2
 80173bc:	e7f8      	b.n	80173b0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80173be:	4770      	bx	lr

080173c0 <_ZN8touchgfx9Container9removeAllEv>:
 80173c0:	2200      	movs	r2, #0
 80173c2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80173c4:	b123      	cbz	r3, 80173d0 <_ZN8touchgfx9Container9removeAllEv+0x10>
 80173c6:	6999      	ldr	r1, [r3, #24]
 80173c8:	6281      	str	r1, [r0, #40]	; 0x28
 80173ca:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80173ce:	e7f8      	b.n	80173c2 <_ZN8touchgfx9Container9removeAllEv+0x2>
 80173d0:	4770      	bx	lr

080173d2 <_ZN8touchgfx9Container6unlinkEv>:
 80173d2:	2300      	movs	r3, #0
 80173d4:	6283      	str	r3, [r0, #40]	; 0x28
 80173d6:	4770      	bx	lr

080173d8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80173d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173dc:	461f      	mov	r7, r3
 80173de:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80173e2:	460d      	mov	r5, r1
 80173e4:	4616      	mov	r6, r2
 80173e6:	b103      	cbz	r3, 80173ea <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80173e8:	6038      	str	r0, [r7, #0]
 80173ea:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80173ec:	b314      	cbz	r4, 8017434 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80173ee:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80173f2:	b1eb      	cbz	r3, 8017430 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80173f4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80173f8:	428d      	cmp	r5, r1
 80173fa:	db19      	blt.n	8017430 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80173fc:	b289      	uxth	r1, r1
 80173fe:	8923      	ldrh	r3, [r4, #8]
 8017400:	440b      	add	r3, r1
 8017402:	b21b      	sxth	r3, r3
 8017404:	429d      	cmp	r5, r3
 8017406:	da13      	bge.n	8017430 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017408:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801740c:	4296      	cmp	r6, r2
 801740e:	db0f      	blt.n	8017430 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017410:	b292      	uxth	r2, r2
 8017412:	8963      	ldrh	r3, [r4, #10]
 8017414:	4413      	add	r3, r2
 8017416:	b21b      	sxth	r3, r3
 8017418:	429e      	cmp	r6, r3
 801741a:	da09      	bge.n	8017430 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801741c:	6823      	ldr	r3, [r4, #0]
 801741e:	1ab2      	subs	r2, r6, r2
 8017420:	1a69      	subs	r1, r5, r1
 8017422:	4620      	mov	r0, r4
 8017424:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8017428:	b212      	sxth	r2, r2
 801742a:	463b      	mov	r3, r7
 801742c:	b209      	sxth	r1, r1
 801742e:	47c0      	blx	r8
 8017430:	69a4      	ldr	r4, [r4, #24]
 8017432:	e7db      	b.n	80173ec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8017434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017438 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8017438:	2200      	movs	r2, #0
 801743a:	8002      	strh	r2, [r0, #0]
 801743c:	8042      	strh	r2, [r0, #2]
 801743e:	8082      	strh	r2, [r0, #4]
 8017440:	80c2      	strh	r2, [r0, #6]
 8017442:	4770      	bx	lr

08017444 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8017444:	b570      	push	{r4, r5, r6, lr}
 8017446:	460d      	mov	r5, r1
 8017448:	4616      	mov	r6, r2
 801744a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801744c:	b13c      	cbz	r4, 801745e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 801744e:	6823      	ldr	r3, [r4, #0]
 8017450:	4620      	mov	r0, r4
 8017452:	4632      	mov	r2, r6
 8017454:	4629      	mov	r1, r5
 8017456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017458:	4798      	blx	r3
 801745a:	69a4      	ldr	r4, [r4, #24]
 801745c:	e7f6      	b.n	801744c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 801745e:	bd70      	pop	{r4, r5, r6, pc}

08017460 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8017460:	b538      	push	{r3, r4, r5, lr}
 8017462:	460d      	mov	r5, r1
 8017464:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017466:	b134      	cbz	r4, 8017476 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8017468:	682b      	ldr	r3, [r5, #0]
 801746a:	4621      	mov	r1, r4
 801746c:	4628      	mov	r0, r5
 801746e:	689b      	ldr	r3, [r3, #8]
 8017470:	4798      	blx	r3
 8017472:	69a4      	ldr	r4, [r4, #24]
 8017474:	e7f7      	b.n	8017466 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8017476:	bd38      	pop	{r3, r4, r5, pc}

08017478 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8017478:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801747a:	b19b      	cbz	r3, 80174a4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801747c:	428b      	cmp	r3, r1
 801747e:	d109      	bne.n	8017494 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8017480:	699a      	ldr	r2, [r3, #24]
 8017482:	2100      	movs	r1, #0
 8017484:	6159      	str	r1, [r3, #20]
 8017486:	6282      	str	r2, [r0, #40]	; 0x28
 8017488:	b902      	cbnz	r2, 801748c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 801748a:	4770      	bx	lr
 801748c:	6199      	str	r1, [r3, #24]
 801748e:	4770      	bx	lr
 8017490:	4613      	mov	r3, r2
 8017492:	b13a      	cbz	r2, 80174a4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8017494:	699a      	ldr	r2, [r3, #24]
 8017496:	428a      	cmp	r2, r1
 8017498:	d1fa      	bne.n	8017490 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 801749a:	698a      	ldr	r2, [r1, #24]
 801749c:	619a      	str	r2, [r3, #24]
 801749e:	2300      	movs	r3, #0
 80174a0:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80174a4:	4770      	bx	lr

080174a6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80174a6:	b410      	push	{r4}
 80174a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80174aa:	4604      	mov	r4, r0
 80174ac:	b92b      	cbnz	r3, 80174ba <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80174ae:	6803      	ldr	r3, [r0, #0]
 80174b0:	4611      	mov	r1, r2
 80174b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80174b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80174b8:	4718      	bx	r3
 80174ba:	b941      	cbnz	r1, 80174ce <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80174bc:	6193      	str	r3, [r2, #24]
 80174be:	6282      	str	r2, [r0, #40]	; 0x28
 80174c0:	6154      	str	r4, [r2, #20]
 80174c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80174c6:	4770      	bx	lr
 80174c8:	4603      	mov	r3, r0
 80174ca:	2800      	cmp	r0, #0
 80174cc:	d0f9      	beq.n	80174c2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80174ce:	4299      	cmp	r1, r3
 80174d0:	6998      	ldr	r0, [r3, #24]
 80174d2:	d1f9      	bne.n	80174c8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80174d4:	6190      	str	r0, [r2, #24]
 80174d6:	618a      	str	r2, [r1, #24]
 80174d8:	e7f2      	b.n	80174c0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

080174dc <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80174dc:	4288      	cmp	r0, r1
 80174de:	b508      	push	{r3, lr}
 80174e0:	d105      	bne.n	80174ee <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 80174e2:	4b11      	ldr	r3, [pc, #68]	; (8017528 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 80174e4:	2123      	movs	r1, #35	; 0x23
 80174e6:	4a11      	ldr	r2, [pc, #68]	; (801752c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80174e8:	4811      	ldr	r0, [pc, #68]	; (8017530 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 80174ea:	f00f f987 	bl	80267fc <__assert_func>
 80174ee:	694b      	ldr	r3, [r1, #20]
 80174f0:	b11b      	cbz	r3, 80174fa <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 80174f2:	4b10      	ldr	r3, [pc, #64]	; (8017534 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 80174f4:	2124      	movs	r1, #36	; 0x24
 80174f6:	4a0d      	ldr	r2, [pc, #52]	; (801752c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80174f8:	e7f6      	b.n	80174e8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80174fa:	e9c1 0305 	strd	r0, r3, [r1, #20]
 80174fe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017500:	b913      	cbnz	r3, 8017508 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8017502:	6281      	str	r1, [r0, #40]	; 0x28
 8017504:	bd08      	pop	{r3, pc}
 8017506:	4613      	mov	r3, r2
 8017508:	699a      	ldr	r2, [r3, #24]
 801750a:	b12a      	cbz	r2, 8017518 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 801750c:	428b      	cmp	r3, r1
 801750e:	d1fa      	bne.n	8017506 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8017510:	4b09      	ldr	r3, [pc, #36]	; (8017538 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8017512:	2135      	movs	r1, #53	; 0x35
 8017514:	4a05      	ldr	r2, [pc, #20]	; (801752c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017516:	e7e7      	b.n	80174e8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8017518:	428b      	cmp	r3, r1
 801751a:	d103      	bne.n	8017524 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 801751c:	4b06      	ldr	r3, [pc, #24]	; (8017538 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801751e:	2138      	movs	r1, #56	; 0x38
 8017520:	4a02      	ldr	r2, [pc, #8]	; (801752c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017522:	e7e1      	b.n	80174e8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8017524:	6199      	str	r1, [r3, #24]
 8017526:	e7ed      	b.n	8017504 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8017528:	0802908d 	.word	0x0802908d
 801752c:	080291e4 	.word	0x080291e4
 8017530:	080290b9 	.word	0x080290b9
 8017534:	080290ec 	.word	0x080290ec
 8017538:	08029122 	.word	0x08029122

0801753c <_ZN8touchgfx4RectaNERKS0_>:
 801753c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017540:	888b      	ldrh	r3, [r1, #4]
 8017542:	f9b1 9000 	ldrsh.w	r9, [r1]
 8017546:	f9b0 a000 	ldrsh.w	sl, [r0]
 801754a:	444b      	add	r3, r9
 801754c:	b29b      	uxth	r3, r3
 801754e:	fa0f f883 	sxth.w	r8, r3
 8017552:	45c2      	cmp	sl, r8
 8017554:	da30      	bge.n	80175b8 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8017556:	8882      	ldrh	r2, [r0, #4]
 8017558:	4452      	add	r2, sl
 801755a:	b292      	uxth	r2, r2
 801755c:	fa0f fe82 	sxth.w	lr, r2
 8017560:	45f1      	cmp	r9, lr
 8017562:	da29      	bge.n	80175b8 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8017564:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8017568:	88cc      	ldrh	r4, [r1, #6]
 801756a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801756e:	442c      	add	r4, r5
 8017570:	b224      	sxth	r4, r4
 8017572:	42a6      	cmp	r6, r4
 8017574:	da20      	bge.n	80175b8 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8017576:	88c7      	ldrh	r7, [r0, #6]
 8017578:	4437      	add	r7, r6
 801757a:	b2bf      	uxth	r7, r7
 801757c:	fa0f fc87 	sxth.w	ip, r7
 8017580:	4565      	cmp	r5, ip
 8017582:	da19      	bge.n	80175b8 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8017584:	45ca      	cmp	sl, r9
 8017586:	4654      	mov	r4, sl
 8017588:	bfb8      	it	lt
 801758a:	464c      	movlt	r4, r9
 801758c:	42b5      	cmp	r5, r6
 801758e:	bfb8      	it	lt
 8017590:	4635      	movlt	r5, r6
 8017592:	45f0      	cmp	r8, lr
 8017594:	bfc8      	it	gt
 8017596:	4613      	movgt	r3, r2
 8017598:	1b1b      	subs	r3, r3, r4
 801759a:	8083      	strh	r3, [r0, #4]
 801759c:	88ca      	ldrh	r2, [r1, #6]
 801759e:	884b      	ldrh	r3, [r1, #2]
 80175a0:	8004      	strh	r4, [r0, #0]
 80175a2:	4413      	add	r3, r2
 80175a4:	8045      	strh	r5, [r0, #2]
 80175a6:	b29b      	uxth	r3, r3
 80175a8:	b21a      	sxth	r2, r3
 80175aa:	4594      	cmp	ip, r2
 80175ac:	bfb8      	it	lt
 80175ae:	463b      	movlt	r3, r7
 80175b0:	1b5b      	subs	r3, r3, r5
 80175b2:	80c3      	strh	r3, [r0, #6]
 80175b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175b8:	2300      	movs	r3, #0
 80175ba:	8003      	strh	r3, [r0, #0]
 80175bc:	8043      	strh	r3, [r0, #2]
 80175be:	8083      	strh	r3, [r0, #4]
 80175c0:	80c3      	strh	r3, [r0, #6]
 80175c2:	e7f7      	b.n	80175b4 <_ZN8touchgfx4RectaNERKS0_+0x78>

080175c4 <_ZNK8touchgfx4Rect7isEmptyEv>:
 80175c4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80175c8:	b12b      	cbz	r3, 80175d6 <_ZNK8touchgfx4Rect7isEmptyEv+0x12>
 80175ca:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80175ce:	fab0 f080 	clz	r0, r0
 80175d2:	0940      	lsrs	r0, r0, #5
 80175d4:	4770      	bx	lr
 80175d6:	2001      	movs	r0, #1
 80175d8:	4770      	bx	lr

080175da <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80175da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175de:	2300      	movs	r3, #0
 80175e0:	4604      	mov	r4, r0
 80175e2:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80175e4:	8003      	strh	r3, [r0, #0]
 80175e6:	8043      	strh	r3, [r0, #2]
 80175e8:	8083      	strh	r3, [r0, #4]
 80175ea:	80c3      	strh	r3, [r0, #6]
 80175ec:	2d00      	cmp	r5, #0
 80175ee:	d040      	beq.n	8017672 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80175f0:	1d28      	adds	r0, r5, #4
 80175f2:	f7ff ffe7 	bl	80175c4 <_ZNK8touchgfx4Rect7isEmptyEv>
 80175f6:	b988      	cbnz	r0, 801761c <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80175f8:	4620      	mov	r0, r4
 80175fa:	f7ff ffe3 	bl	80175c4 <_ZNK8touchgfx4Rect7isEmptyEv>
 80175fe:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8017602:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8017606:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 801760a:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 801760e:	b138      	cbz	r0, 8017620 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8017610:	8022      	strh	r2, [r4, #0]
 8017612:	8063      	strh	r3, [r4, #2]
 8017614:	f8a4 e004 	strh.w	lr, [r4, #4]
 8017618:	f8a4 c006 	strh.w	ip, [r4, #6]
 801761c:	69ad      	ldr	r5, [r5, #24]
 801761e:	e7e5      	b.n	80175ec <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8017620:	f9b4 0000 	ldrsh.w	r0, [r4]
 8017624:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017628:	4290      	cmp	r0, r2
 801762a:	4607      	mov	r7, r0
 801762c:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8017630:	460e      	mov	r6, r1
 8017632:	bfa8      	it	ge
 8017634:	4617      	movge	r7, r2
 8017636:	4299      	cmp	r1, r3
 8017638:	4472      	add	r2, lr
 801763a:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 801763e:	bfa8      	it	ge
 8017640:	461e      	movge	r6, r3
 8017642:	4440      	add	r0, r8
 8017644:	4471      	add	r1, lr
 8017646:	4463      	add	r3, ip
 8017648:	b200      	sxth	r0, r0
 801764a:	8027      	strh	r7, [r4, #0]
 801764c:	b212      	sxth	r2, r2
 801764e:	8066      	strh	r6, [r4, #2]
 8017650:	b209      	sxth	r1, r1
 8017652:	b21b      	sxth	r3, r3
 8017654:	4290      	cmp	r0, r2
 8017656:	bfac      	ite	ge
 8017658:	ebc7 0200 	rsbge	r2, r7, r0
 801765c:	ebc7 0202 	rsblt	r2, r7, r2
 8017660:	4299      	cmp	r1, r3
 8017662:	bfac      	ite	ge
 8017664:	ebc6 0301 	rsbge	r3, r6, r1
 8017668:	ebc6 0303 	rsblt	r3, r6, r3
 801766c:	80a2      	strh	r2, [r4, #4]
 801766e:	80e3      	strh	r3, [r4, #6]
 8017670:	e7d4      	b.n	801761c <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8017672:	4620      	mov	r0, r4
 8017674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017678 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8017678:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801767c:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8017680:	b383      	cbz	r3, 80176e4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8017682:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017684:	b374      	cbz	r4, 80176e4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8017686:	f9b1 5000 	ldrsh.w	r5, [r1]
 801768a:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801768e:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8017692:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8017696:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801769a:	b303      	cbz	r3, 80176de <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801769c:	4668      	mov	r0, sp
 801769e:	1d21      	adds	r1, r4, #4
 80176a0:	f8ad 5000 	strh.w	r5, [sp]
 80176a4:	f8ad 6002 	strh.w	r6, [sp, #2]
 80176a8:	f8ad 7004 	strh.w	r7, [sp, #4]
 80176ac:	f8ad 8006 	strh.w	r8, [sp, #6]
 80176b0:	f7ff ff44 	bl	801753c <_ZN8touchgfx4RectaNERKS0_>
 80176b4:	4668      	mov	r0, sp
 80176b6:	f7ff ff85 	bl	80175c4 <_ZNK8touchgfx4Rect7isEmptyEv>
 80176ba:	b980      	cbnz	r0, 80176de <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80176bc:	f8bd 3000 	ldrh.w	r3, [sp]
 80176c0:	4669      	mov	r1, sp
 80176c2:	88a2      	ldrh	r2, [r4, #4]
 80176c4:	4620      	mov	r0, r4
 80176c6:	1a9b      	subs	r3, r3, r2
 80176c8:	88e2      	ldrh	r2, [r4, #6]
 80176ca:	f8ad 3000 	strh.w	r3, [sp]
 80176ce:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80176d2:	1a9b      	subs	r3, r3, r2
 80176d4:	f8ad 3002 	strh.w	r3, [sp, #2]
 80176d8:	6823      	ldr	r3, [r4, #0]
 80176da:	689b      	ldr	r3, [r3, #8]
 80176dc:	4798      	blx	r3
 80176de:	69a4      	ldr	r4, [r4, #24]
 80176e0:	2c00      	cmp	r4, #0
 80176e2:	d1d8      	bne.n	8017696 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80176e4:	b002      	add	sp, #8
 80176e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080176ea <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80176ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80176ec:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80176f0:	460d      	mov	r5, r1
 80176f2:	4616      	mov	r6, r2
 80176f4:	b323      	cbz	r3, 8017740 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80176f6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80176f8:	b314      	cbz	r4, 8017740 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80176fa:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80176fe:	b1eb      	cbz	r3, 801773c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8017700:	6828      	ldr	r0, [r5, #0]
 8017702:	466b      	mov	r3, sp
 8017704:	6869      	ldr	r1, [r5, #4]
 8017706:	c303      	stmia	r3!, {r0, r1}
 8017708:	4668      	mov	r0, sp
 801770a:	1d21      	adds	r1, r4, #4
 801770c:	f7ff ff16 	bl	801753c <_ZN8touchgfx4RectaNERKS0_>
 8017710:	4668      	mov	r0, sp
 8017712:	f7ff ff57 	bl	80175c4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017716:	b988      	cbnz	r0, 801773c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8017718:	f8bd 3000 	ldrh.w	r3, [sp]
 801771c:	4669      	mov	r1, sp
 801771e:	88a2      	ldrh	r2, [r4, #4]
 8017720:	4620      	mov	r0, r4
 8017722:	1a9b      	subs	r3, r3, r2
 8017724:	88e2      	ldrh	r2, [r4, #6]
 8017726:	f8ad 3000 	strh.w	r3, [sp]
 801772a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801772e:	1a9b      	subs	r3, r3, r2
 8017730:	4632      	mov	r2, r6
 8017732:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017736:	6823      	ldr	r3, [r4, #0]
 8017738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801773a:	4798      	blx	r3
 801773c:	69a4      	ldr	r4, [r4, #24]
 801773e:	e7db      	b.n	80176f8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8017740:	b002      	add	sp, #8
 8017742:	bd70      	pop	{r4, r5, r6, pc}

08017744 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8017744:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017748:	4770      	bx	lr

0801774a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801774a:	6803      	ldr	r3, [r0, #0]
 801774c:	b513      	push	{r0, r1, r4, lr}
 801774e:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8017752:	2300      	movs	r3, #0
 8017754:	e9cd 3300 	strd	r3, r3, [sp]
 8017758:	466b      	mov	r3, sp
 801775a:	47a0      	blx	r4
 801775c:	b002      	add	sp, #8
 801775e:	bd10      	pop	{r4, pc}

08017760 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8017760:	2301      	movs	r3, #1
 8017762:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8017766:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801776a:	4770      	bx	lr

0801776c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801776c:	2301      	movs	r3, #1
 801776e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8017772:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8017776:	4770      	bx	lr

08017778 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8017778:	6843      	ldr	r3, [r0, #4]
 801777a:	2201      	movs	r2, #1
 801777c:	725a      	strb	r2, [r3, #9]
 801777e:	6840      	ldr	r0, [r0, #4]
 8017780:	6803      	ldr	r3, [r0, #0]
 8017782:	691b      	ldr	r3, [r3, #16]
 8017784:	4718      	bx	r3

08017786 <_ZN8touchgfx3HAL8flushDMAEv>:
 8017786:	6840      	ldr	r0, [r0, #4]
 8017788:	6803      	ldr	r3, [r0, #0]
 801778a:	689b      	ldr	r3, [r3, #8]
 801778c:	4718      	bx	r3
	...

08017790 <_ZN8touchgfx3HAL10beginFrameEv>:
 8017790:	4b04      	ldr	r3, [pc, #16]	; (80177a4 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8017792:	781b      	ldrb	r3, [r3, #0]
 8017794:	b123      	cbz	r3, 80177a0 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8017796:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 801779a:	f080 0001 	eor.w	r0, r0, #1
 801779e:	4770      	bx	lr
 80177a0:	2001      	movs	r0, #1
 80177a2:	4770      	bx	lr
 80177a4:	2000c68a 	.word	0x2000c68a

080177a8 <_ZN8touchgfx3HAL8endFrameEv>:
 80177a8:	b510      	push	{r4, lr}
 80177aa:	4604      	mov	r4, r0
 80177ac:	6840      	ldr	r0, [r0, #4]
 80177ae:	6803      	ldr	r3, [r0, #0]
 80177b0:	689b      	ldr	r3, [r3, #8]
 80177b2:	4798      	blx	r3
 80177b4:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80177b8:	b113      	cbz	r3, 80177c0 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80177ba:	2301      	movs	r3, #1
 80177bc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80177c0:	bd10      	pop	{r4, pc}

080177c2 <_ZN8touchgfx3HAL9taskEntryEv>:
 80177c2:	b508      	push	{r3, lr}
 80177c4:	6803      	ldr	r3, [r0, #0]
 80177c6:	4604      	mov	r4, r0
 80177c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80177ca:	4798      	blx	r3
 80177cc:	6823      	ldr	r3, [r4, #0]
 80177ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80177d0:	4620      	mov	r0, r4
 80177d2:	4798      	blx	r3
 80177d4:	f7fd fec6 	bl	8015564 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80177d8:	6823      	ldr	r3, [r4, #0]
 80177da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80177dc:	e7f8      	b.n	80177d0 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

080177e0 <_ZN8touchgfx3HAL4tickEv>:
 80177e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80177e2:	6803      	ldr	r3, [r0, #0]
 80177e4:	4604      	mov	r4, r0
 80177e6:	4d5c      	ldr	r5, [pc, #368]	; (8017958 <_ZN8touchgfx3HAL4tickEv+0x178>)
 80177e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80177ec:	4798      	blx	r3
 80177ee:	2800      	cmp	r0, #0
 80177f0:	f000 8097 	beq.w	8017922 <_ZN8touchgfx3HAL4tickEv+0x142>
 80177f4:	2001      	movs	r0, #1
 80177f6:	2600      	movs	r6, #0
 80177f8:	f7fd fbc6 	bl	8014f88 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80177fc:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8017800:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8017804:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8017808:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 801780c:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8017810:	b133      	cbz	r3, 8017820 <_ZN8touchgfx3HAL4tickEv+0x40>
 8017812:	6823      	ldr	r3, [r4, #0]
 8017814:	4620      	mov	r0, r4
 8017816:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801781a:	4798      	blx	r3
 801781c:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8017820:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8017824:	2601      	movs	r6, #1
 8017826:	6862      	ldr	r2, [r4, #4]
 8017828:	f083 0301 	eor.w	r3, r3, #1
 801782c:	702e      	strb	r6, [r5, #0]
 801782e:	7253      	strb	r3, [r2, #9]
 8017830:	f002 fff0 	bl	801a814 <_ZN8touchgfx11Application11getInstanceEv>
 8017834:	6803      	ldr	r3, [r0, #0]
 8017836:	4631      	mov	r1, r6
 8017838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801783a:	4798      	blx	r3
 801783c:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8017840:	b90b      	cbnz	r3, 8017846 <_ZN8touchgfx3HAL4tickEv+0x66>
 8017842:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8017846:	f002 ffe5 	bl	801a814 <_ZN8touchgfx11Application11getInstanceEv>
 801784a:	6803      	ldr	r3, [r0, #0]
 801784c:	695b      	ldr	r3, [r3, #20]
 801784e:	4798      	blx	r3
 8017850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017852:	6803      	ldr	r3, [r0, #0]
 8017854:	691b      	ldr	r3, [r3, #16]
 8017856:	4798      	blx	r3
 8017858:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801785c:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8017860:	3b01      	subs	r3, #1
 8017862:	b2db      	uxtb	r3, r3
 8017864:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8017868:	b10a      	cbz	r2, 801786e <_ZN8touchgfx3HAL4tickEv+0x8e>
 801786a:	2b00      	cmp	r3, #0
 801786c:	d1eb      	bne.n	8017846 <_ZN8touchgfx3HAL4tickEv+0x66>
 801786e:	4a3b      	ldr	r2, [pc, #236]	; (801795c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8017870:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8017874:	7813      	ldrb	r3, [r2, #0]
 8017876:	3301      	adds	r3, #1
 8017878:	b25b      	sxtb	r3, r3
 801787a:	4299      	cmp	r1, r3
 801787c:	7013      	strb	r3, [r2, #0]
 801787e:	dc10      	bgt.n	80178a2 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8017880:	2300      	movs	r3, #0
 8017882:	68e0      	ldr	r0, [r4, #12]
 8017884:	a902      	add	r1, sp, #8
 8017886:	7013      	strb	r3, [r2, #0]
 8017888:	aa03      	add	r2, sp, #12
 801788a:	6803      	ldr	r3, [r0, #0]
 801788c:	68db      	ldr	r3, [r3, #12]
 801788e:	4798      	blx	r3
 8017890:	6823      	ldr	r3, [r4, #0]
 8017892:	2800      	cmp	r0, #0
 8017894:	d051      	beq.n	801793a <_ZN8touchgfx3HAL4tickEv+0x15a>
 8017896:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801789a:	4620      	mov	r0, r4
 801789c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80178a0:	4798      	blx	r3
 80178a2:	2300      	movs	r3, #0
 80178a4:	6960      	ldr	r0, [r4, #20]
 80178a6:	f88d 3007 	strb.w	r3, [sp, #7]
 80178aa:	b158      	cbz	r0, 80178c4 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80178ac:	6803      	ldr	r3, [r0, #0]
 80178ae:	f10d 0107 	add.w	r1, sp, #7
 80178b2:	68db      	ldr	r3, [r3, #12]
 80178b4:	4798      	blx	r3
 80178b6:	b128      	cbz	r0, 80178c4 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80178b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80178ba:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80178be:	6803      	ldr	r3, [r0, #0]
 80178c0:	68db      	ldr	r3, [r3, #12]
 80178c2:	4798      	blx	r3
 80178c4:	f104 001c 	add.w	r0, r4, #28
 80178c8:	f00d facc 	bl	8024e64 <_ZN8touchgfx8Gestures4tickEv>
 80178cc:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80178d0:	b30b      	cbz	r3, 8017916 <_ZN8touchgfx3HAL4tickEv+0x136>
 80178d2:	6920      	ldr	r0, [r4, #16]
 80178d4:	6803      	ldr	r3, [r0, #0]
 80178d6:	691b      	ldr	r3, [r3, #16]
 80178d8:	4798      	blx	r3
 80178da:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80178dc:	4606      	mov	r6, r0
 80178de:	b903      	cbnz	r3, 80178e2 <_ZN8touchgfx3HAL4tickEv+0x102>
 80178e0:	6720      	str	r0, [r4, #112]	; 0x70
 80178e2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80178e4:	4a1e      	ldr	r2, [pc, #120]	; (8017960 <_ZN8touchgfx3HAL4tickEv+0x180>)
 80178e6:	1af3      	subs	r3, r6, r3
 80178e8:	4293      	cmp	r3, r2
 80178ea:	d914      	bls.n	8017916 <_ZN8touchgfx3HAL4tickEv+0x136>
 80178ec:	6920      	ldr	r0, [r4, #16]
 80178ee:	6803      	ldr	r3, [r0, #0]
 80178f0:	699b      	ldr	r3, [r3, #24]
 80178f2:	4798      	blx	r3
 80178f4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80178f6:	2264      	movs	r2, #100	; 0x64
 80178f8:	1af3      	subs	r3, r6, r3
 80178fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80178fe:	fbb0 f0f3 	udiv	r0, r0, r3
 8017902:	2800      	cmp	r0, #0
 8017904:	dc1e      	bgt.n	8017944 <_ZN8touchgfx3HAL4tickEv+0x164>
 8017906:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 801790a:	6920      	ldr	r0, [r4, #16]
 801790c:	2100      	movs	r1, #0
 801790e:	6803      	ldr	r3, [r0, #0]
 8017910:	69db      	ldr	r3, [r3, #28]
 8017912:	4798      	blx	r3
 8017914:	6726      	str	r6, [r4, #112]	; 0x70
 8017916:	f002 ff7d 	bl	801a814 <_ZN8touchgfx11Application11getInstanceEv>
 801791a:	6803      	ldr	r3, [r0, #0]
 801791c:	2100      	movs	r1, #0
 801791e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017920:	4798      	blx	r3
 8017922:	6823      	ldr	r3, [r4, #0]
 8017924:	4620      	mov	r0, r4
 8017926:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801792a:	4798      	blx	r3
 801792c:	2001      	movs	r0, #1
 801792e:	f7fd fb36 	bl	8014f9e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8017932:	2300      	movs	r3, #0
 8017934:	702b      	strb	r3, [r5, #0]
 8017936:	b004      	add	sp, #16
 8017938:	bd70      	pop	{r4, r5, r6, pc}
 801793a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801793e:	4620      	mov	r0, r4
 8017940:	4798      	blx	r3
 8017942:	e7ae      	b.n	80178a2 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8017944:	2863      	cmp	r0, #99	; 0x63
 8017946:	bfcb      	itete	gt
 8017948:	2300      	movgt	r3, #0
 801794a:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801794e:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8017952:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8017956:	e7d8      	b.n	801790a <_ZN8touchgfx3HAL4tickEv+0x12a>
 8017958:	2000c690 	.word	0x2000c690
 801795c:	2000c691 	.word	0x2000c691
 8017960:	05f5e100 	.word	0x05f5e100

08017964 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8017964:	f7fd bd9e 	b.w	80154a4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08017968 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8017968:	6581      	str	r1, [r0, #88]	; 0x58
 801796a:	301c      	adds	r0, #28
 801796c:	f00d ba78 	b.w	8024e60 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08017970 <_ZN8touchgfx3HAL5touchEll>:
 8017970:	b530      	push	{r4, r5, lr}
 8017972:	b087      	sub	sp, #28
 8017974:	4604      	mov	r4, r0
 8017976:	a804      	add	r0, sp, #16
 8017978:	e9cd 1204 	strd	r1, r2, [sp, #16]
 801797c:	f002 fd4e 	bl	801a41c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8017980:	9b04      	ldr	r3, [sp, #16]
 8017982:	a906      	add	r1, sp, #24
 8017984:	a803      	add	r0, sp, #12
 8017986:	f8ad 300c 	strh.w	r3, [sp, #12]
 801798a:	9b05      	ldr	r3, [sp, #20]
 801798c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8017990:	f002 fd92 	bl	801a4b8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8017994:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8017998:	f104 001c 	add.w	r0, r4, #28
 801799c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80179a0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80179a4:	b189      	cbz	r1, 80179ca <_ZN8touchgfx3HAL5touchEll+0x5a>
 80179a6:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80179aa:	9300      	str	r3, [sp, #0]
 80179ac:	4613      	mov	r3, r2
 80179ae:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80179b2:	462a      	mov	r2, r5
 80179b4:	f00d fa64 	bl	8024e80 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80179b8:	b128      	cbz	r0, 80179c6 <_ZN8touchgfx3HAL5touchEll+0x56>
 80179ba:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80179be:	65e3      	str	r3, [r4, #92]	; 0x5c
 80179c0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80179c4:	6623      	str	r3, [r4, #96]	; 0x60
 80179c6:	b007      	add	sp, #28
 80179c8:	bd30      	pop	{r4, r5, pc}
 80179ca:	f00d fa9d 	bl	8024f08 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80179ce:	2301      	movs	r3, #1
 80179d0:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80179d4:	e7f1      	b.n	80179ba <_ZN8touchgfx3HAL5touchEll+0x4a>

080179d6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80179d6:	b570      	push	{r4, r5, r6, lr}
 80179d8:	2b00      	cmp	r3, #0
 80179da:	d050      	beq.n	8017a7e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80179dc:	ea81 0002 	eor.w	r0, r1, r2
 80179e0:	07c6      	lsls	r6, r0, #31
 80179e2:	d508      	bpl.n	80179f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80179e4:	3a01      	subs	r2, #1
 80179e6:	18cc      	adds	r4, r1, r3
 80179e8:	42a1      	cmp	r1, r4
 80179ea:	d048      	beq.n	8017a7e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80179ec:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80179f0:	f801 0b01 	strb.w	r0, [r1], #1
 80179f4:	e7f8      	b.n	80179e8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80179f6:	07d5      	lsls	r5, r2, #31
 80179f8:	bf42      	ittt	mi
 80179fa:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80179fe:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8017a02:	f801 0b01 	strbmi.w	r0, [r1], #1
 8017a06:	2b01      	cmp	r3, #1
 8017a08:	d915      	bls.n	8017a36 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8017a0a:	ea82 0001 	eor.w	r0, r2, r1
 8017a0e:	0784      	lsls	r4, r0, #30
 8017a10:	d02d      	beq.n	8017a6e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 8017a12:	1e94      	subs	r4, r2, #2
 8017a14:	4608      	mov	r0, r1
 8017a16:	18ce      	adds	r6, r1, r3
 8017a18:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8017a1c:	f820 5b02 	strh.w	r5, [r0], #2
 8017a20:	1a35      	subs	r5, r6, r0
 8017a22:	2d01      	cmp	r5, #1
 8017a24:	d8f8      	bhi.n	8017a18 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8017a26:	1e98      	subs	r0, r3, #2
 8017a28:	f003 0301 	and.w	r3, r3, #1
 8017a2c:	f020 0001 	bic.w	r0, r0, #1
 8017a30:	3002      	adds	r0, #2
 8017a32:	4401      	add	r1, r0
 8017a34:	4402      	add	r2, r0
 8017a36:	1f14      	subs	r4, r2, #4
 8017a38:	4608      	mov	r0, r1
 8017a3a:	18ce      	adds	r6, r1, r3
 8017a3c:	1a35      	subs	r5, r6, r0
 8017a3e:	2d03      	cmp	r5, #3
 8017a40:	d810      	bhi.n	8017a64 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 8017a42:	089c      	lsrs	r4, r3, #2
 8017a44:	00a0      	lsls	r0, r4, #2
 8017a46:	4401      	add	r1, r0
 8017a48:	3801      	subs	r0, #1
 8017a4a:	4402      	add	r2, r0
 8017a4c:	f06f 0003 	mvn.w	r0, #3
 8017a50:	fb00 3404 	mla	r4, r0, r4, r3
 8017a54:	440c      	add	r4, r1
 8017a56:	42a1      	cmp	r1, r4
 8017a58:	d011      	beq.n	8017a7e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8017a5a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8017a5e:	f801 3b01 	strb.w	r3, [r1], #1
 8017a62:	e7f8      	b.n	8017a56 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8017a64:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8017a68:	f840 5b04 	str.w	r5, [r0], #4
 8017a6c:	e7e6      	b.n	8017a3c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 8017a6e:	0790      	lsls	r0, r2, #30
 8017a70:	d0e1      	beq.n	8017a36 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8017a72:	f832 0b02 	ldrh.w	r0, [r2], #2
 8017a76:	3b02      	subs	r3, #2
 8017a78:	f821 0b02 	strh.w	r0, [r1], #2
 8017a7c:	e7db      	b.n	8017a36 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8017a7e:	2001      	movs	r0, #1
 8017a80:	bd70      	pop	{r4, r5, r6, pc}

08017a82 <_ZN8touchgfx3HAL7noTouchEv>:
 8017a82:	b510      	push	{r4, lr}
 8017a84:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8017a88:	4604      	mov	r4, r0
 8017a8a:	b153      	cbz	r3, 8017aa2 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8017a8c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8017a90:	2101      	movs	r1, #1
 8017a92:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8017a96:	301c      	adds	r0, #28
 8017a98:	f00d fa36 	bl	8024f08 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8017a9c:	2300      	movs	r3, #0
 8017a9e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8017aa2:	bd10      	pop	{r4, pc}

08017aa4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8017aa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017aa8:	4605      	mov	r5, r0
 8017aaa:	6980      	ldr	r0, [r0, #24]
 8017aac:	b085      	sub	sp, #20
 8017aae:	460f      	mov	r7, r1
 8017ab0:	4690      	mov	r8, r2
 8017ab2:	4699      	mov	r9, r3
 8017ab4:	b930      	cbnz	r0, 8017ac4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8017ab6:	4b1f      	ldr	r3, [pc, #124]	; (8017b34 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8017ab8:	f44f 7198 	mov.w	r1, #304	; 0x130
 8017abc:	4a1e      	ldr	r2, [pc, #120]	; (8017b38 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8017abe:	481f      	ldr	r0, [pc, #124]	; (8017b3c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 8017ac0:	f00e fe9c 	bl	80267fc <__assert_func>
 8017ac4:	ac04      	add	r4, sp, #16
 8017ac6:	2600      	movs	r6, #0
 8017ac8:	f844 6d04 	str.w	r6, [r4, #-4]!
 8017acc:	6806      	ldr	r6, [r0, #0]
 8017ace:	9401      	str	r4, [sp, #4]
 8017ad0:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8017ad4:	9400      	str	r4, [sp, #0]
 8017ad6:	6834      	ldr	r4, [r6, #0]
 8017ad8:	47a0      	blx	r4
 8017ada:	4c19      	ldr	r4, [pc, #100]	; (8017b40 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 8017adc:	4606      	mov	r6, r0
 8017ade:	f8a4 9000 	strh.w	r9, [r4]
 8017ae2:	f7f8 fa71 	bl	800ffc8 <_ZN8touchgfx3HAL3lcdEv>
 8017ae6:	6803      	ldr	r3, [r0, #0]
 8017ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017aea:	4798      	blx	r3
 8017aec:	280c      	cmp	r0, #12
 8017aee:	d80f      	bhi.n	8017b10 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8017af0:	e8df f000 	tbb	[pc, r0]
 8017af4:	1b1b1207 	.word	0x1b1b1207
 8017af8:	1b1b1b1b 	.word	0x1b1b1b1b
 8017afc:	1b1b1b1b 	.word	0x1b1b1b1b
 8017b00:	1b          	.byte	0x1b
 8017b01:	00          	.byte	0x00
 8017b02:	8823      	ldrh	r3, [r4, #0]
 8017b04:	fb08 7203 	mla	r2, r8, r3, r7
 8017b08:	9b03      	ldr	r3, [sp, #12]
 8017b0a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8017b0e:	63eb      	str	r3, [r5, #60]	; 0x3c
 8017b10:	4630      	mov	r0, r6
 8017b12:	b005      	add	sp, #20
 8017b14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017b18:	8822      	ldrh	r2, [r4, #0]
 8017b1a:	9b03      	ldr	r3, [sp, #12]
 8017b1c:	fb08 7202 	mla	r2, r8, r2, r7
 8017b20:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017b24:	1a9a      	subs	r2, r3, r2
 8017b26:	63ea      	str	r2, [r5, #60]	; 0x3c
 8017b28:	e7f2      	b.n	8017b10 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8017b2a:	4b06      	ldr	r3, [pc, #24]	; (8017b44 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 8017b2c:	f240 114d 	movw	r1, #333	; 0x14d
 8017b30:	4a01      	ldr	r2, [pc, #4]	; (8017b38 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8017b32:	e7c4      	b.n	8017abe <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8017b34:	0802928d 	.word	0x0802928d
 8017b38:	0802959e 	.word	0x0802959e
 8017b3c:	080292d2 	.word	0x080292d2
 8017b40:	2000c686 	.word	0x2000c686
 8017b44:	080292f8 	.word	0x080292f8

08017b48 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8017b48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017b4c:	4698      	mov	r8, r3
 8017b4e:	6803      	ldr	r3, [r0, #0]
 8017b50:	b087      	sub	sp, #28
 8017b52:	460e      	mov	r6, r1
 8017b54:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8017b56:	4617      	mov	r7, r2
 8017b58:	4b0d      	ldr	r3, [pc, #52]	; (8017b90 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 8017b5a:	4604      	mov	r4, r0
 8017b5c:	f8b3 9000 	ldrh.w	r9, [r3]
 8017b60:	f7f8 fa32 	bl	800ffc8 <_ZN8touchgfx3HAL3lcdEv>
 8017b64:	6803      	ldr	r3, [r0, #0]
 8017b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b68:	4798      	blx	r3
 8017b6a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8017b6e:	463a      	mov	r2, r7
 8017b70:	4631      	mov	r1, r6
 8017b72:	9302      	str	r3, [sp, #8]
 8017b74:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8017b78:	9301      	str	r3, [sp, #4]
 8017b7a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8017b7e:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8017b82:	9300      	str	r3, [sp, #0]
 8017b84:	4620      	mov	r0, r4
 8017b86:	4643      	mov	r3, r8
 8017b88:	47a8      	blx	r5
 8017b8a:	b007      	add	sp, #28
 8017b8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017b90:	2000c686 	.word	0x2000c686

08017b94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8017b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b98:	4606      	mov	r6, r0
 8017b9a:	b089      	sub	sp, #36	; 0x24
 8017b9c:	4610      	mov	r0, r2
 8017b9e:	460c      	mov	r4, r1
 8017ba0:	4691      	mov	r9, r2
 8017ba2:	4698      	mov	r8, r3
 8017ba4:	f005 f818 	bl	801cbd8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8017ba8:	2800      	cmp	r0, #0
 8017baa:	f000 8092 	beq.w	8017cd2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13e>
 8017bae:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8017cec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 8017bb2:	ad08      	add	r5, sp, #32
 8017bb4:	f8df b138 	ldr.w	fp, [pc, #312]	; 8017cf0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 8017bb8:	f8da 0000 	ldr.w	r0, [sl]
 8017bbc:	4f4a      	ldr	r7, [pc, #296]	; (8017ce8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 8017bbe:	6802      	ldr	r2, [r0, #0]
 8017bc0:	6a12      	ldr	r2, [r2, #32]
 8017bc2:	4790      	blx	r2
 8017bc4:	f8da 0000 	ldr.w	r0, [sl]
 8017bc8:	6802      	ldr	r2, [r0, #0]
 8017bca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8017bcc:	4790      	blx	r2
 8017bce:	f8bb 3000 	ldrh.w	r3, [fp]
 8017bd2:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 8017bd6:	4628      	mov	r0, r5
 8017bd8:	9300      	str	r3, [sp, #0]
 8017bda:	883b      	ldrh	r3, [r7, #0]
 8017bdc:	9301      	str	r3, [sp, #4]
 8017bde:	f005 f8bb 	bl	801cd58 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017be2:	f8ab 0000 	strh.w	r0, [fp]
 8017be6:	4628      	mov	r0, r5
 8017be8:	f005 f8f0 	bl	801cdcc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017bec:	f8da b000 	ldr.w	fp, [sl]
 8017bf0:	8038      	strh	r0, [r7, #0]
 8017bf2:	4648      	mov	r0, r9
 8017bf4:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8017bf8:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 8017bfc:	9302      	str	r3, [sp, #8]
 8017bfe:	f004 ffeb 	bl	801cbd8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8017c02:	f8da 2000 	ldr.w	r2, [sl]
 8017c06:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 8017c0a:	63d0      	str	r0, [r2, #60]	; 0x3c
 8017c0c:	4620      	mov	r0, r4
 8017c0e:	6822      	ldr	r2, [r4, #0]
 8017c10:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 8017c14:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8017c16:	2200      	movs	r2, #0
 8017c18:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 8017c1c:	4611      	mov	r1, r2
 8017c1e:	4798      	blx	r3
 8017c20:	2201      	movs	r2, #1
 8017c22:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 8017c26:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8017c2a:	1d22      	adds	r2, r4, #4
 8017c2c:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 8017c30:	2900      	cmp	r1, #0
 8017c32:	d051      	beq.n	8017cd8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8017c34:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 8017c38:	2900      	cmp	r1, #0
 8017c3a:	d04d      	beq.n	8017cd8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8017c3c:	6810      	ldr	r0, [r2, #0]
 8017c3e:	f10d 0c18 	add.w	ip, sp, #24
 8017c42:	6851      	ldr	r1, [r2, #4]
 8017c44:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8017c48:	4641      	mov	r1, r8
 8017c4a:	a806      	add	r0, sp, #24
 8017c4c:	f7ff fc76 	bl	801753c <_ZN8touchgfx4RectaNERKS0_>
 8017c50:	4628      	mov	r0, r5
 8017c52:	f005 fa0d 	bl	801d070 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8017c56:	4680      	mov	r8, r0
 8017c58:	f7f8 f9b6 	bl	800ffc8 <_ZN8touchgfx3HAL3lcdEv>
 8017c5c:	6802      	ldr	r2, [r0, #0]
 8017c5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8017c60:	4790      	blx	r2
 8017c62:	4580      	cmp	r8, r0
 8017c64:	d03d      	beq.n	8017ce2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x14e>
 8017c66:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8017c68:	b150      	cbz	r0, 8017c80 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 8017c6a:	4628      	mov	r0, r5
 8017c6c:	f005 fa00 	bl	801d070 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8017c70:	4605      	mov	r5, r0
 8017c72:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8017c74:	6803      	ldr	r3, [r0, #0]
 8017c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c78:	4798      	blx	r3
 8017c7a:	1a2b      	subs	r3, r5, r0
 8017c7c:	4258      	negs	r0, r3
 8017c7e:	4158      	adcs	r0, r3
 8017c80:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 8017c84:	2500      	movs	r5, #0
 8017c86:	6963      	ldr	r3, [r4, #20]
 8017c88:	4620      	mov	r0, r4
 8017c8a:	6822      	ldr	r2, [r4, #0]
 8017c8c:	a906      	add	r1, sp, #24
 8017c8e:	6165      	str	r5, [r4, #20]
 8017c90:	9303      	str	r3, [sp, #12]
 8017c92:	6892      	ldr	r2, [r2, #8]
 8017c94:	4790      	blx	r2
 8017c96:	9b03      	ldr	r3, [sp, #12]
 8017c98:	4620      	mov	r0, r4
 8017c9a:	4652      	mov	r2, sl
 8017c9c:	6163      	str	r3, [r4, #20]
 8017c9e:	4649      	mov	r1, r9
 8017ca0:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 8017ca4:	6823      	ldr	r3, [r4, #0]
 8017ca6:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 8017caa:	4c10      	ldr	r4, [pc, #64]	; (8017cec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 8017cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017cae:	4798      	blx	r3
 8017cb0:	6820      	ldr	r0, [r4, #0]
 8017cb2:	9b02      	ldr	r3, [sp, #8]
 8017cb4:	9a00      	ldr	r2, [sp, #0]
 8017cb6:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 8017cba:	4b0d      	ldr	r3, [pc, #52]	; (8017cf0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 8017cbc:	801a      	strh	r2, [r3, #0]
 8017cbe:	4b0a      	ldr	r3, [pc, #40]	; (8017ce8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 8017cc0:	9a01      	ldr	r2, [sp, #4]
 8017cc2:	801a      	strh	r2, [r3, #0]
 8017cc4:	6803      	ldr	r3, [r0, #0]
 8017cc6:	6a1b      	ldr	r3, [r3, #32]
 8017cc8:	4798      	blx	r3
 8017cca:	6820      	ldr	r0, [r4, #0]
 8017ccc:	6803      	ldr	r3, [r0, #0]
 8017cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017cd0:	4798      	blx	r3
 8017cd2:	b009      	add	sp, #36	; 0x24
 8017cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cd8:	ab06      	add	r3, sp, #24
 8017cda:	6810      	ldr	r0, [r2, #0]
 8017cdc:	6851      	ldr	r1, [r2, #4]
 8017cde:	c303      	stmia	r3!, {r0, r1}
 8017ce0:	e7b6      	b.n	8017c50 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbc>
 8017ce2:	2000      	movs	r0, #0
 8017ce4:	e7cc      	b.n	8017c80 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 8017ce6:	bf00      	nop
 8017ce8:	2000c688 	.word	0x2000c688
 8017cec:	2000c68c 	.word	0x2000c68c
 8017cf0:	2000c686 	.word	0x2000c686

08017cf4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8017cf4:	4b07      	ldr	r3, [pc, #28]	; (8017d14 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8017cf6:	b510      	push	{r4, lr}
 8017cf8:	781b      	ldrb	r3, [r3, #0]
 8017cfa:	4604      	mov	r4, r0
 8017cfc:	b13b      	cbz	r3, 8017d0e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8017cfe:	6803      	ldr	r3, [r0, #0]
 8017d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d02:	4798      	blx	r3
 8017d04:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017d06:	4283      	cmp	r3, r0
 8017d08:	d101      	bne.n	8017d0e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8017d0a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8017d0c:	bd10      	pop	{r4, pc}
 8017d0e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8017d10:	e7fc      	b.n	8017d0c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8017d12:	bf00      	nop
 8017d14:	2000c68a 	.word	0x2000c68a

08017d18 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8017d18:	4b0b      	ldr	r3, [pc, #44]	; (8017d48 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 8017d1a:	b510      	push	{r4, lr}
 8017d1c:	781b      	ldrb	r3, [r3, #0]
 8017d1e:	4604      	mov	r4, r0
 8017d20:	b95b      	cbnz	r3, 8017d3a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017d22:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8017d26:	2b02      	cmp	r3, #2
 8017d28:	d007      	beq.n	8017d3a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017d2a:	6840      	ldr	r0, [r0, #4]
 8017d2c:	f000 fbc8 	bl	80184c0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8017d30:	b118      	cbz	r0, 8017d3a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017d32:	6862      	ldr	r2, [r4, #4]
 8017d34:	7a53      	ldrb	r3, [r2, #9]
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	d0fc      	beq.n	8017d34 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8017d3a:	f7fd fba5 	bl	8015488 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8017d3e:	4620      	mov	r0, r4
 8017d40:	f7ff ffd8 	bl	8017cf4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017d44:	bd10      	pop	{r4, pc}
 8017d46:	bf00      	nop
 8017d48:	2000c68a 	.word	0x2000c68a

08017d4c <_ZN8touchgfx3HAL10initializeEv>:
 8017d4c:	b510      	push	{r4, lr}
 8017d4e:	4604      	mov	r4, r0
 8017d50:	f7fd fb76 	bl	8015440 <_ZN8touchgfx10OSWrappers10initializeEv>
 8017d54:	6860      	ldr	r0, [r4, #4]
 8017d56:	6803      	ldr	r3, [r0, #0]
 8017d58:	68db      	ldr	r3, [r3, #12]
 8017d5a:	4798      	blx	r3
 8017d5c:	68e0      	ldr	r0, [r4, #12]
 8017d5e:	6803      	ldr	r3, [r0, #0]
 8017d60:	689b      	ldr	r3, [r3, #8]
 8017d62:	4798      	blx	r3
 8017d64:	6823      	ldr	r3, [r4, #0]
 8017d66:	4620      	mov	r0, r4
 8017d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017d6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017d6e:	4718      	bx	r3

08017d70 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8017d70:	b508      	push	{r3, lr}
 8017d72:	290c      	cmp	r1, #12
 8017d74:	d817      	bhi.n	8017da6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8017d76:	e8df f001 	tbb	[pc, r1]
 8017d7a:	090b      	.short	0x090b
 8017d7c:	0d0d0d07 	.word	0x0d0d0d07
 8017d80:	1414140d 	.word	0x1414140d
 8017d84:	1414      	.short	0x1414
 8017d86:	0d          	.byte	0x0d
 8017d87:	00          	.byte	0x00
 8017d88:	2020      	movs	r0, #32
 8017d8a:	bd08      	pop	{r3, pc}
 8017d8c:	2018      	movs	r0, #24
 8017d8e:	e7fc      	b.n	8017d8a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8017d90:	2010      	movs	r0, #16
 8017d92:	e7fa      	b.n	8017d8a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8017d94:	4b05      	ldr	r3, [pc, #20]	; (8017dac <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8017d96:	f44f 710c 	mov.w	r1, #560	; 0x230
 8017d9a:	4a05      	ldr	r2, [pc, #20]	; (8017db0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8017d9c:	4805      	ldr	r0, [pc, #20]	; (8017db4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8017d9e:	f00e fd2d 	bl	80267fc <__assert_func>
 8017da2:	2008      	movs	r0, #8
 8017da4:	e7f1      	b.n	8017d8a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8017da6:	2000      	movs	r0, #0
 8017da8:	e7ef      	b.n	8017d8a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8017daa:	bf00      	nop
 8017dac:	080293cb 	.word	0x080293cb
 8017db0:	08029760 	.word	0x08029760
 8017db4:	080292d2 	.word	0x080292d2

08017db8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8017db8:	b570      	push	{r4, r5, r6, lr}
 8017dba:	460d      	mov	r5, r1
 8017dbc:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8017dc0:	4616      	mov	r6, r2
 8017dc2:	461c      	mov	r4, r3
 8017dc4:	f7ff ffd4 	bl	8017d70 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8017dc8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8017dcc:	10c0      	asrs	r0, r0, #3
 8017dce:	fb06 5101 	mla	r1, r6, r1, r5
 8017dd2:	fb00 4001 	mla	r0, r0, r1, r4
 8017dd6:	bd70      	pop	{r4, r5, r6, pc}

08017dd8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8017dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ddc:	b08a      	sub	sp, #40	; 0x28
 8017dde:	f04f 0c00 	mov.w	ip, #0
 8017de2:	4604      	mov	r4, r0
 8017de4:	469a      	mov	sl, r3
 8017de6:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8017dea:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8017dee:	f1b8 0f02 	cmp.w	r8, #2
 8017df2:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8017df6:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8017dfa:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8017dfe:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8017e02:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8017e06:	f8cd c020 	str.w	ip, [sp, #32]
 8017e0a:	d030      	beq.n	8017e6e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8017e0c:	2bff      	cmp	r3, #255	; 0xff
 8017e0e:	d12c      	bne.n	8017e6a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 8017e10:	4560      	cmp	r0, ip
 8017e12:	bf14      	ite	ne
 8017e14:	2004      	movne	r0, #4
 8017e16:	2001      	moveq	r0, #1
 8017e18:	9204      	str	r2, [sp, #16]
 8017e1a:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8017e1e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8017e22:	f8ad 201c 	strh.w	r2, [sp, #28]
 8017e26:	f8ad 6018 	strh.w	r6, [sp, #24]
 8017e2a:	f8ad 501a 	strh.w	r5, [sp, #26]
 8017e2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017e32:	4620      	mov	r0, r4
 8017e34:	f7ff ff5e 	bl	8017cf4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017e38:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8017e3c:	4603      	mov	r3, r0
 8017e3e:	4651      	mov	r1, sl
 8017e40:	4620      	mov	r0, r4
 8017e42:	e9cd 9700 	strd	r9, r7, [sp]
 8017e46:	f7ff ffb7 	bl	8017db8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8017e4a:	f8ad 901e 	strh.w	r9, [sp, #30]
 8017e4e:	9005      	str	r0, [sp, #20]
 8017e50:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 8017e54:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8017e58:	b106      	cbz	r6, 8017e5c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8017e5a:	b98d      	cbnz	r5, 8017e80 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8017e5c:	4b12      	ldr	r3, [pc, #72]	; (8017ea8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 8017e5e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8017e62:	4a12      	ldr	r2, [pc, #72]	; (8017eac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8017e64:	4812      	ldr	r0, [pc, #72]	; (8017eb0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8017e66:	f00e fcc9 	bl	80267fc <__assert_func>
 8017e6a:	2004      	movs	r0, #4
 8017e6c:	e7d4      	b.n	8017e18 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8017e6e:	2bff      	cmp	r3, #255	; 0xff
 8017e70:	d104      	bne.n	8017e7c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 8017e72:	2800      	cmp	r0, #0
 8017e74:	bf14      	ite	ne
 8017e76:	2040      	movne	r0, #64	; 0x40
 8017e78:	2020      	moveq	r0, #32
 8017e7a:	e7cd      	b.n	8017e18 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8017e7c:	2040      	movs	r0, #64	; 0x40
 8017e7e:	e7cb      	b.n	8017e18 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8017e80:	6823      	ldr	r3, [r4, #0]
 8017e82:	4620      	mov	r0, r4
 8017e84:	9d02      	ldr	r5, [sp, #8]
 8017e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e88:	4798      	blx	r3
 8017e8a:	4228      	tst	r0, r5
 8017e8c:	d104      	bne.n	8017e98 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 8017e8e:	4b09      	ldr	r3, [pc, #36]	; (8017eb4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8017e90:	f240 11b1 	movw	r1, #433	; 0x1b1
 8017e94:	4a05      	ldr	r2, [pc, #20]	; (8017eac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8017e96:	e7e5      	b.n	8017e64 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8017e98:	6860      	ldr	r0, [r4, #4]
 8017e9a:	a902      	add	r1, sp, #8
 8017e9c:	6803      	ldr	r3, [r0, #0]
 8017e9e:	685b      	ldr	r3, [r3, #4]
 8017ea0:	4798      	blx	r3
 8017ea2:	b00a      	add	sp, #40	; 0x28
 8017ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ea8:	0802934e 	.word	0x0802934e
 8017eac:	08029602 	.word	0x08029602
 8017eb0:	080292d2 	.word	0x080292d2
 8017eb4:	08029386 	.word	0x08029386

08017eb8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8017eb8:	b510      	push	{r4, lr}
 8017eba:	b08a      	sub	sp, #40	; 0x28
 8017ebc:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8017ec0:	9408      	str	r4, [sp, #32]
 8017ec2:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8017ec6:	9407      	str	r4, [sp, #28]
 8017ec8:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8017ecc:	9406      	str	r4, [sp, #24]
 8017ece:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8017ed2:	9405      	str	r4, [sp, #20]
 8017ed4:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 8017ed8:	9404      	str	r4, [sp, #16]
 8017eda:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8017ede:	9403      	str	r4, [sp, #12]
 8017ee0:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8017ee4:	9402      	str	r4, [sp, #8]
 8017ee6:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8017eea:	e9cd 3400 	strd	r3, r4, [sp]
 8017eee:	4613      	mov	r3, r2
 8017ef0:	2200      	movs	r2, #0
 8017ef2:	f7ff ff71 	bl	8017dd8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8017ef6:	b00a      	add	sp, #40	; 0x28
 8017ef8:	bd10      	pop	{r4, pc}
	...

08017efc <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8017efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017efe:	b08b      	sub	sp, #44	; 0x2c
 8017f00:	4616      	mov	r6, r2
 8017f02:	460d      	mov	r5, r1
 8017f04:	461f      	mov	r7, r3
 8017f06:	4604      	mov	r4, r0
 8017f08:	f7f8 f85e 	bl	800ffc8 <_ZN8touchgfx3HAL3lcdEv>
 8017f0c:	6803      	ldr	r3, [r0, #0]
 8017f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f10:	4798      	blx	r3
 8017f12:	4b0e      	ldr	r3, [pc, #56]	; (8017f4c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8017f14:	2200      	movs	r2, #0
 8017f16:	4629      	mov	r1, r5
 8017f18:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8017f1c:	881b      	ldrh	r3, [r3, #0]
 8017f1e:	4620      	mov	r0, r4
 8017f20:	9306      	str	r3, [sp, #24]
 8017f22:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8017f26:	9305      	str	r3, [sp, #20]
 8017f28:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8017f2c:	9304      	str	r3, [sp, #16]
 8017f2e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017f32:	9303      	str	r3, [sp, #12]
 8017f34:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017f38:	9302      	str	r3, [sp, #8]
 8017f3a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017f3e:	e9cd 7300 	strd	r7, r3, [sp]
 8017f42:	4633      	mov	r3, r6
 8017f44:	f7ff ff48 	bl	8017dd8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8017f48:	b00b      	add	sp, #44	; 0x2c
 8017f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017f4c:	2000c686 	.word	0x2000c686

08017f50 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8017f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f54:	461f      	mov	r7, r3
 8017f56:	4b14      	ldr	r3, [pc, #80]	; (8017fa8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8017f58:	b08a      	sub	sp, #40	; 0x28
 8017f5a:	4616      	mov	r6, r2
 8017f5c:	f8b3 8000 	ldrh.w	r8, [r3]
 8017f60:	460d      	mov	r5, r1
 8017f62:	4604      	mov	r4, r0
 8017f64:	f7f8 f830 	bl	800ffc8 <_ZN8touchgfx3HAL3lcdEv>
 8017f68:	6803      	ldr	r3, [r0, #0]
 8017f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f6c:	4798      	blx	r3
 8017f6e:	2302      	movs	r3, #2
 8017f70:	9008      	str	r0, [sp, #32]
 8017f72:	2200      	movs	r2, #0
 8017f74:	4629      	mov	r1, r5
 8017f76:	4620      	mov	r0, r4
 8017f78:	e9cd 8306 	strd	r8, r3, [sp, #24]
 8017f7c:	2301      	movs	r3, #1
 8017f7e:	9305      	str	r3, [sp, #20]
 8017f80:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8017f84:	9304      	str	r3, [sp, #16]
 8017f86:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017f8a:	9303      	str	r3, [sp, #12]
 8017f8c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017f90:	9302      	str	r3, [sp, #8]
 8017f92:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017f96:	e9cd 7300 	strd	r7, r3, [sp]
 8017f9a:	4633      	mov	r3, r6
 8017f9c:	f7ff ff1c 	bl	8017dd8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8017fa0:	b00a      	add	sp, #40	; 0x28
 8017fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fa6:	bf00      	nop
 8017fa8:	2000c686 	.word	0x2000c686

08017fac <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8017fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fb0:	b08b      	sub	sp, #44	; 0x2c
 8017fb2:	469b      	mov	fp, r3
 8017fb4:	4604      	mov	r4, r0
 8017fb6:	4692      	mov	sl, r2
 8017fb8:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8017fbc:	2600      	movs	r6, #0
 8017fbe:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8017fc2:	4689      	mov	r9, r1
 8017fc4:	2fff      	cmp	r7, #255	; 0xff
 8017fc6:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8017fca:	9608      	str	r6, [sp, #32]
 8017fcc:	bf14      	ite	ne
 8017fce:	2308      	movne	r3, #8
 8017fd0:	2302      	moveq	r3, #2
 8017fd2:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8017fd6:	f7ff fe8d 	bl	8017cf4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017fda:	465a      	mov	r2, fp
 8017fdc:	4603      	mov	r3, r0
 8017fde:	4651      	mov	r1, sl
 8017fe0:	4620      	mov	r0, r4
 8017fe2:	e9cd 8500 	strd	r8, r5, [sp]
 8017fe6:	f7ff fee7 	bl	8017db8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8017fea:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8017fee:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8017ff2:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017ff6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8017ffa:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8017ffe:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018002:	6823      	ldr	r3, [r4, #0]
 8018004:	9d02      	ldr	r5, [sp, #8]
 8018006:	9005      	str	r0, [sp, #20]
 8018008:	4620      	mov	r0, r4
 801800a:	f8ad 601c 	strh.w	r6, [sp, #28]
 801800e:	f8ad 801e 	strh.w	r8, [sp, #30]
 8018012:	f8cd 9020 	str.w	r9, [sp, #32]
 8018016:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 801801a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801801c:	4798      	blx	r3
 801801e:	4228      	tst	r0, r5
 8018020:	d106      	bne.n	8018030 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 8018022:	4b07      	ldr	r3, [pc, #28]	; (8018040 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8018024:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8018028:	4a06      	ldr	r2, [pc, #24]	; (8018044 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 801802a:	4807      	ldr	r0, [pc, #28]	; (8018048 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 801802c:	f00e fbe6 	bl	80267fc <__assert_func>
 8018030:	6860      	ldr	r0, [r4, #4]
 8018032:	a902      	add	r1, sp, #8
 8018034:	6803      	ldr	r3, [r0, #0]
 8018036:	685b      	ldr	r3, [r3, #4]
 8018038:	4798      	blx	r3
 801803a:	b00b      	add	sp, #44	; 0x2c
 801803c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018040:	08029386 	.word	0x08029386
 8018044:	080296cb 	.word	0x080296cb
 8018048:	080292d2 	.word	0x080292d2

0801804c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 801804c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018050:	461f      	mov	r7, r3
 8018052:	4b0b      	ldr	r3, [pc, #44]	; (8018080 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8018054:	460d      	mov	r5, r1
 8018056:	4616      	mov	r6, r2
 8018058:	f8b3 8000 	ldrh.w	r8, [r3]
 801805c:	4604      	mov	r4, r0
 801805e:	f7f7 ffb3 	bl	800ffc8 <_ZN8touchgfx3HAL3lcdEv>
 8018062:	6803      	ldr	r3, [r0, #0]
 8018064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018066:	4798      	blx	r3
 8018068:	463b      	mov	r3, r7
 801806a:	4632      	mov	r2, r6
 801806c:	4629      	mov	r1, r5
 801806e:	e9cd 8000 	strd	r8, r0, [sp]
 8018072:	4620      	mov	r0, r4
 8018074:	f7ff fea0 	bl	8017db8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8018078:	b002      	add	sp, #8
 801807a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801807e:	bf00      	nop
 8018080:	2000c686 	.word	0x2000c686

08018084 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8018084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018088:	4698      	mov	r8, r3
 801808a:	b088      	sub	sp, #32
 801808c:	2300      	movs	r3, #0
 801808e:	4617      	mov	r7, r2
 8018090:	4604      	mov	r4, r0
 8018092:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8018096:	9306      	str	r3, [sp, #24]
 8018098:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801809c:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80180a0:	f8ad 6010 	strh.w	r6, [sp, #16]
 80180a4:	f8ad 5012 	strh.w	r5, [sp, #18]
 80180a8:	e9cd 3100 	strd	r3, r1, [sp]
 80180ac:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80180b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80180b4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80180b8:	f88d 301c 	strb.w	r3, [sp, #28]
 80180bc:	f7ff fe1a 	bl	8017cf4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80180c0:	4642      	mov	r2, r8
 80180c2:	4603      	mov	r3, r0
 80180c4:	4639      	mov	r1, r7
 80180c6:	4620      	mov	r0, r4
 80180c8:	f7ff ffc0 	bl	801804c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80180cc:	4b16      	ldr	r3, [pc, #88]	; (8018128 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 80180ce:	9003      	str	r0, [sp, #12]
 80180d0:	881b      	ldrh	r3, [r3, #0]
 80180d2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80180d6:	f7f7 ff77 	bl	800ffc8 <_ZN8touchgfx3HAL3lcdEv>
 80180da:	6803      	ldr	r3, [r0, #0]
 80180dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80180de:	4798      	blx	r3
 80180e0:	f88d 001e 	strb.w	r0, [sp, #30]
 80180e4:	f88d 001d 	strb.w	r0, [sp, #29]
 80180e8:	b106      	cbz	r6, 80180ec <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 80180ea:	b935      	cbnz	r5, 80180fa <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 80180ec:	4b0f      	ldr	r3, [pc, #60]	; (801812c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 80180ee:	f240 11cd 	movw	r1, #461	; 0x1cd
 80180f2:	4a0f      	ldr	r2, [pc, #60]	; (8018130 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 80180f4:	480f      	ldr	r0, [pc, #60]	; (8018134 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 80180f6:	f00e fb81 	bl	80267fc <__assert_func>
 80180fa:	6823      	ldr	r3, [r4, #0]
 80180fc:	4620      	mov	r0, r4
 80180fe:	9d00      	ldr	r5, [sp, #0]
 8018100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018102:	4798      	blx	r3
 8018104:	4228      	tst	r0, r5
 8018106:	d104      	bne.n	8018112 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8018108:	4b0b      	ldr	r3, [pc, #44]	; (8018138 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 801810a:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 801810e:	4a08      	ldr	r2, [pc, #32]	; (8018130 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8018110:	e7f0      	b.n	80180f4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 8018112:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018114:	4669      	mov	r1, sp
 8018116:	6860      	ldr	r0, [r4, #4]
 8018118:	9306      	str	r3, [sp, #24]
 801811a:	6803      	ldr	r3, [r0, #0]
 801811c:	685b      	ldr	r3, [r3, #4]
 801811e:	4798      	blx	r3
 8018120:	b008      	add	sp, #32
 8018122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018126:	bf00      	nop
 8018128:	2000c686 	.word	0x2000c686
 801812c:	0802934e 	.word	0x0802934e
 8018130:	080294b4 	.word	0x080294b4
 8018134:	080292d2 	.word	0x080292d2
 8018138:	08029386 	.word	0x08029386

0801813c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801813c:	b570      	push	{r4, r5, r6, lr}
 801813e:	b08a      	sub	sp, #40	; 0x28
 8018140:	4604      	mov	r4, r0
 8018142:	466b      	mov	r3, sp
 8018144:	e883 0006 	stmia.w	r3, {r1, r2}
 8018148:	4b1f      	ldr	r3, [pc, #124]	; (80181c8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 801814a:	781b      	ldrb	r3, [r3, #0]
 801814c:	b933      	cbnz	r3, 801815c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 801814e:	4b1f      	ldr	r3, [pc, #124]	; (80181cc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8018150:	f240 11f9 	movw	r1, #505	; 0x1f9
 8018154:	4a1e      	ldr	r2, [pc, #120]	; (80181d0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8018156:	481f      	ldr	r0, [pc, #124]	; (80181d4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8018158:	f00e fb50 	bl	80267fc <__assert_func>
 801815c:	2300      	movs	r3, #0
 801815e:	f8bd 5000 	ldrh.w	r5, [sp]
 8018162:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8018166:	9308      	str	r3, [sp, #32]
 8018168:	2301      	movs	r3, #1
 801816a:	9302      	str	r3, [sp, #8]
 801816c:	6803      	ldr	r3, [r0, #0]
 801816e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018170:	4798      	blx	r3
 8018172:	4632      	mov	r2, r6
 8018174:	4629      	mov	r1, r5
 8018176:	4603      	mov	r3, r0
 8018178:	4620      	mov	r0, r4
 801817a:	f7ff ff67 	bl	801804c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801817e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018180:	9003      	str	r0, [sp, #12]
 8018182:	9305      	str	r3, [sp, #20]
 8018184:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018188:	f8ad 3018 	strh.w	r3, [sp, #24]
 801818c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018190:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018194:	4b10      	ldr	r3, [pc, #64]	; (80181d8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8018196:	881b      	ldrh	r3, [r3, #0]
 8018198:	f8ad 301c 	strh.w	r3, [sp, #28]
 801819c:	f8ad 301e 	strh.w	r3, [sp, #30]
 80181a0:	f7f7 ff12 	bl	800ffc8 <_ZN8touchgfx3HAL3lcdEv>
 80181a4:	6803      	ldr	r3, [r0, #0]
 80181a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80181a8:	4798      	blx	r3
 80181aa:	23ff      	movs	r3, #255	; 0xff
 80181ac:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80181b0:	a902      	add	r1, sp, #8
 80181b2:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 80181b6:	6860      	ldr	r0, [r4, #4]
 80181b8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80181bc:	6803      	ldr	r3, [r0, #0]
 80181be:	685b      	ldr	r3, [r3, #4]
 80181c0:	4798      	blx	r3
 80181c2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80181c4:	b00a      	add	sp, #40	; 0x28
 80181c6:	bd70      	pop	{r4, r5, r6, pc}
 80181c8:	2000c68b 	.word	0x2000c68b
 80181cc:	0802921f 	.word	0x0802921f
 80181d0:	08029558 	.word	0x08029558
 80181d4:	080292d2 	.word	0x080292d2
 80181d8:	2000c686 	.word	0x2000c686

080181dc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80181dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80181de:	b08b      	sub	sp, #44	; 0x2c
 80181e0:	4604      	mov	r4, r0
 80181e2:	466d      	mov	r5, sp
 80181e4:	e885 0006 	stmia.w	r5, {r1, r2}
 80181e8:	461d      	mov	r5, r3
 80181ea:	2300      	movs	r3, #0
 80181ec:	f8bd 6000 	ldrh.w	r6, [sp]
 80181f0:	9308      	str	r3, [sp, #32]
 80181f2:	2301      	movs	r3, #1
 80181f4:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80181f8:	9302      	str	r3, [sp, #8]
 80181fa:	6803      	ldr	r3, [r0, #0]
 80181fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80181fe:	4798      	blx	r3
 8018200:	463a      	mov	r2, r7
 8018202:	4631      	mov	r1, r6
 8018204:	4603      	mov	r3, r0
 8018206:	4620      	mov	r0, r4
 8018208:	f7ff ff20 	bl	801804c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801820c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018210:	9003      	str	r0, [sp, #12]
 8018212:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018216:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801821a:	9505      	str	r5, [sp, #20]
 801821c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018220:	4b0d      	ldr	r3, [pc, #52]	; (8018258 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 8018222:	881b      	ldrh	r3, [r3, #0]
 8018224:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018228:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801822a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801822e:	f7f7 fecb 	bl	800ffc8 <_ZN8touchgfx3HAL3lcdEv>
 8018232:	6803      	ldr	r3, [r0, #0]
 8018234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018236:	4798      	blx	r3
 8018238:	23ff      	movs	r3, #255	; 0xff
 801823a:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801823e:	a902      	add	r1, sp, #8
 8018240:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8018244:	6860      	ldr	r0, [r4, #4]
 8018246:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801824a:	6803      	ldr	r3, [r0, #0]
 801824c:	685b      	ldr	r3, [r3, #4]
 801824e:	4798      	blx	r3
 8018250:	4628      	mov	r0, r5
 8018252:	b00b      	add	sp, #44	; 0x2c
 8018254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018256:	bf00      	nop
 8018258:	2000c686 	.word	0x2000c686

0801825c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801825c:	b570      	push	{r4, r5, r6, lr}
 801825e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8018262:	4604      	mov	r4, r0
 8018264:	b19b      	cbz	r3, 801828e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8018266:	2002      	movs	r0, #2
 8018268:	f7fc fea4 	bl	8014fb4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801826c:	2300      	movs	r3, #0
 801826e:	4620      	mov	r0, r4
 8018270:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8018274:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8018278:	6823      	ldr	r3, [r4, #0]
 801827a:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 801827e:	f7ff fd39 	bl	8017cf4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018282:	4601      	mov	r1, r0
 8018284:	4620      	mov	r0, r4
 8018286:	462b      	mov	r3, r5
 8018288:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801828c:	4718      	bx	r3
 801828e:	bd70      	pop	{r4, r5, r6, pc}

08018290 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8018290:	4770      	bx	lr

08018292 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8018292:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8018296:	1a13      	subs	r3, r2, r0
 8018298:	4258      	negs	r0, r3
 801829a:	4158      	adcs	r0, r3
 801829c:	4770      	bx	lr

0801829e <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801829e:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80182a2:	1a9b      	subs	r3, r3, r2
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	bfdc      	itt	le
 80182a8:	6882      	ldrle	r2, [r0, #8]
 80182aa:	189b      	addle	r3, r3, r2
 80182ac:	2b01      	cmp	r3, #1
 80182ae:	bfcc      	ite	gt
 80182b0:	2000      	movgt	r0, #0
 80182b2:	2001      	movle	r0, #1
 80182b4:	4770      	bx	lr

080182b6 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80182b6:	6902      	ldr	r2, [r0, #16]
 80182b8:	6840      	ldr	r0, [r0, #4]
 80182ba:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 80182be:	4770      	bx	lr

080182c0 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80182c0:	6803      	ldr	r3, [r0, #0]
 80182c2:	691b      	ldr	r3, [r3, #16]
 80182c4:	4718      	bx	r3

080182c6 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80182c6:	4770      	bx	lr

080182c8 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80182c8:	4770      	bx	lr
	...

080182cc <_ZN8touchgfx13DMA_Interface7executeEv>:
 80182cc:	2301      	movs	r3, #1
 80182ce:	b570      	push	{r4, r5, r6, lr}
 80182d0:	7203      	strb	r3, [r0, #8]
 80182d2:	4604      	mov	r4, r0
 80182d4:	6840      	ldr	r0, [r0, #4]
 80182d6:	6803      	ldr	r3, [r0, #0]
 80182d8:	699b      	ldr	r3, [r3, #24]
 80182da:	4798      	blx	r3
 80182dc:	6803      	ldr	r3, [r0, #0]
 80182de:	4605      	mov	r5, r0
 80182e0:	2b08      	cmp	r3, #8
 80182e2:	d01e      	beq.n	8018322 <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 80182e4:	d80b      	bhi.n	80182fe <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80182e6:	2b02      	cmp	r3, #2
 80182e8:	d027      	beq.n	801833a <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 80182ea:	2b04      	cmp	r3, #4
 80182ec:	d011      	beq.n	8018312 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 80182ee:	2b01      	cmp	r3, #1
 80182f0:	d028      	beq.n	8018344 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80182f2:	4b17      	ldr	r3, [pc, #92]	; (8018350 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 80182f4:	218b      	movs	r1, #139	; 0x8b
 80182f6:	4a17      	ldr	r2, [pc, #92]	; (8018354 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 80182f8:	4817      	ldr	r0, [pc, #92]	; (8018358 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 80182fa:	f00e fa7f 	bl	80267fc <__assert_func>
 80182fe:	2b40      	cmp	r3, #64	; 0x40
 8018300:	d020      	beq.n	8018344 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8018302:	d801      	bhi.n	8018308 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8018304:	2b20      	cmp	r3, #32
 8018306:	e7f3      	b.n	80182f0 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8018308:	2b80      	cmp	r3, #128	; 0x80
 801830a:	d01b      	beq.n	8018344 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801830c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018310:	e7ee      	b.n	80182f0 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8018312:	6823      	ldr	r3, [r4, #0]
 8018314:	7f01      	ldrb	r1, [r0, #28]
 8018316:	4620      	mov	r0, r4
 8018318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801831a:	4798      	blx	r3
 801831c:	6823      	ldr	r3, [r4, #0]
 801831e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018320:	e006      	b.n	8018330 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8018322:	6823      	ldr	r3, [r4, #0]
 8018324:	7f01      	ldrb	r1, [r0, #28]
 8018326:	4620      	mov	r0, r4
 8018328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801832a:	4798      	blx	r3
 801832c:	6823      	ldr	r3, [r4, #0]
 801832e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018330:	4629      	mov	r1, r5
 8018332:	4620      	mov	r0, r4
 8018334:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018338:	4718      	bx	r3
 801833a:	6823      	ldr	r3, [r4, #0]
 801833c:	4620      	mov	r0, r4
 801833e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018340:	4798      	blx	r3
 8018342:	e7f3      	b.n	801832c <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8018344:	6823      	ldr	r3, [r4, #0]
 8018346:	4620      	mov	r0, r4
 8018348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801834a:	4798      	blx	r3
 801834c:	e7e6      	b.n	801831c <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 801834e:	bf00      	nop
 8018350:	080297a9 	.word	0x080297a9
 8018354:	080298b8 	.word	0x080298b8
 8018358:	080297ce 	.word	0x080297ce

0801835c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801835c:	b570      	push	{r4, r5, r6, lr}
 801835e:	4604      	mov	r4, r0
 8018360:	460e      	mov	r6, r1
 8018362:	6860      	ldr	r0, [r4, #4]
 8018364:	6803      	ldr	r3, [r0, #0]
 8018366:	685b      	ldr	r3, [r3, #4]
 8018368:	4798      	blx	r3
 801836a:	2800      	cmp	r0, #0
 801836c:	d1f9      	bne.n	8018362 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801836e:	4d0b      	ldr	r5, [pc, #44]	; (801839c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 8018370:	6828      	ldr	r0, [r5, #0]
 8018372:	6803      	ldr	r3, [r0, #0]
 8018374:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018376:	4798      	blx	r3
 8018378:	f7fd f8a2 	bl	80154c0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801837c:	6860      	ldr	r0, [r4, #4]
 801837e:	4631      	mov	r1, r6
 8018380:	6803      	ldr	r3, [r0, #0]
 8018382:	689b      	ldr	r3, [r3, #8]
 8018384:	4798      	blx	r3
 8018386:	6823      	ldr	r3, [r4, #0]
 8018388:	4620      	mov	r0, r4
 801838a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801838c:	4798      	blx	r3
 801838e:	6828      	ldr	r0, [r5, #0]
 8018390:	6803      	ldr	r3, [r0, #0]
 8018392:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018398:	4718      	bx	r3
 801839a:	bf00      	nop
 801839c:	2000c68c 	.word	0x2000c68c

080183a0 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80183a0:	b508      	push	{r3, lr}
 80183a2:	f7fd f871 	bl	8015488 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80183a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80183aa:	f7fd b87b 	b.w	80154a4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080183ae <_ZN8touchgfx13DMA_Interface5startEv>:
 80183ae:	b510      	push	{r4, lr}
 80183b0:	4604      	mov	r4, r0
 80183b2:	6840      	ldr	r0, [r0, #4]
 80183b4:	6803      	ldr	r3, [r0, #0]
 80183b6:	681b      	ldr	r3, [r3, #0]
 80183b8:	4798      	blx	r3
 80183ba:	b948      	cbnz	r0, 80183d0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80183bc:	7a63      	ldrb	r3, [r4, #9]
 80183be:	b13b      	cbz	r3, 80183d0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80183c0:	7a23      	ldrb	r3, [r4, #8]
 80183c2:	b92b      	cbnz	r3, 80183d0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80183c4:	6823      	ldr	r3, [r4, #0]
 80183c6:	4620      	mov	r0, r4
 80183c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80183ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80183ce:	4718      	bx	r3
 80183d0:	bd10      	pop	{r4, pc}
	...

080183d4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80183d4:	b510      	push	{r4, lr}
 80183d6:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 80183da:	1b12      	subs	r2, r2, r4
 80183dc:	2a00      	cmp	r2, #0
 80183de:	bfdc      	itt	le
 80183e0:	6883      	ldrle	r3, [r0, #8]
 80183e2:	18d2      	addle	r2, r2, r3
 80183e4:	2a01      	cmp	r2, #1
 80183e6:	dd18      	ble.n	801841a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 80183e8:	6843      	ldr	r3, [r0, #4]
 80183ea:	f101 021c 	add.w	r2, r1, #28
 80183ee:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 80183f2:	f851 4b04 	ldr.w	r4, [r1], #4
 80183f6:	4291      	cmp	r1, r2
 80183f8:	f843 4b04 	str.w	r4, [r3], #4
 80183fc:	d1f9      	bne.n	80183f2 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 80183fe:	880a      	ldrh	r2, [r1, #0]
 8018400:	801a      	strh	r2, [r3, #0]
 8018402:	788a      	ldrb	r2, [r1, #2]
 8018404:	709a      	strb	r2, [r3, #2]
 8018406:	68c3      	ldr	r3, [r0, #12]
 8018408:	6882      	ldr	r2, [r0, #8]
 801840a:	f3bf 8f5b 	dmb	ish
 801840e:	3301      	adds	r3, #1
 8018410:	429a      	cmp	r2, r3
 8018412:	bfd8      	it	le
 8018414:	1a9b      	suble	r3, r3, r2
 8018416:	60c3      	str	r3, [r0, #12]
 8018418:	bd10      	pop	{r4, pc}
 801841a:	4b03      	ldr	r3, [pc, #12]	; (8018428 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 801841c:	2139      	movs	r1, #57	; 0x39
 801841e:	4a03      	ldr	r2, [pc, #12]	; (801842c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8018420:	4803      	ldr	r0, [pc, #12]	; (8018430 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8018422:	f00e f9eb 	bl	80267fc <__assert_func>
 8018426:	bf00      	nop
 8018428:	080297f4 	.word	0x080297f4
 801842c:	080298e8 	.word	0x080298e8
 8018430:	080297ce 	.word	0x080297ce

08018434 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8018434:	b510      	push	{r4, lr}
 8018436:	6803      	ldr	r3, [r0, #0]
 8018438:	4604      	mov	r4, r0
 801843a:	681b      	ldr	r3, [r3, #0]
 801843c:	4798      	blx	r3
 801843e:	b128      	cbz	r0, 801844c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8018440:	4b07      	ldr	r3, [pc, #28]	; (8018460 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8018442:	213f      	movs	r1, #63	; 0x3f
 8018444:	4a07      	ldr	r2, [pc, #28]	; (8018464 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8018446:	4808      	ldr	r0, [pc, #32]	; (8018468 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8018448:	f00e f9d8 	bl	80267fc <__assert_func>
 801844c:	6923      	ldr	r3, [r4, #16]
 801844e:	68a2      	ldr	r2, [r4, #8]
 8018450:	f3bf 8f5b 	dmb	ish
 8018454:	3301      	adds	r3, #1
 8018456:	429a      	cmp	r2, r3
 8018458:	bfd8      	it	le
 801845a:	1a9b      	suble	r3, r3, r2
 801845c:	6123      	str	r3, [r4, #16]
 801845e:	bd10      	pop	{r4, pc}
 8018460:	08029817 	.word	0x08029817
 8018464:	08029936 	.word	0x08029936
 8018468:	080297ce 	.word	0x080297ce

0801846c <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801846c:	b570      	push	{r4, r5, r6, lr}
 801846e:	4604      	mov	r4, r0
 8018470:	6840      	ldr	r0, [r0, #4]
 8018472:	6803      	ldr	r3, [r0, #0]
 8018474:	681b      	ldr	r3, [r3, #0]
 8018476:	4798      	blx	r3
 8018478:	4605      	mov	r5, r0
 801847a:	b930      	cbnz	r0, 801848a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801847c:	7a23      	ldrb	r3, [r4, #8]
 801847e:	b123      	cbz	r3, 801848a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8018480:	6860      	ldr	r0, [r4, #4]
 8018482:	6803      	ldr	r3, [r0, #0]
 8018484:	695b      	ldr	r3, [r3, #20]
 8018486:	4798      	blx	r3
 8018488:	7225      	strb	r5, [r4, #8]
 801848a:	6860      	ldr	r0, [r4, #4]
 801848c:	6803      	ldr	r3, [r0, #0]
 801848e:	681b      	ldr	r3, [r3, #0]
 8018490:	4798      	blx	r3
 8018492:	b928      	cbnz	r0, 80184a0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8018494:	6823      	ldr	r3, [r4, #0]
 8018496:	4620      	mov	r0, r4
 8018498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801849a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801849e:	4718      	bx	r3
 80184a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80184a4:	f7fd b818 	b.w	80154d8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

080184a8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80184a8:	b510      	push	{r4, lr}
 80184aa:	6082      	str	r2, [r0, #8]
 80184ac:	2200      	movs	r2, #0
 80184ae:	4c03      	ldr	r4, [pc, #12]	; (80184bc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80184b0:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80184b4:	e9c0 4100 	strd	r4, r1, [r0]
 80184b8:	bd10      	pop	{r4, pc}
 80184ba:	bf00      	nop
 80184bc:	0802989c 	.word	0x0802989c

080184c0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80184c0:	6840      	ldr	r0, [r0, #4]
 80184c2:	6803      	ldr	r3, [r0, #0]
 80184c4:	681b      	ldr	r3, [r3, #0]
 80184c6:	4718      	bx	r3

080184c8 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 80184c8:	2001      	movs	r0, #1
 80184ca:	4770      	bx	lr

080184cc <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 80184cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80184d0:	460d      	mov	r5, r1
 80184d2:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80184d6:	b085      	sub	sp, #20
 80184d8:	4690      	mov	r8, r2
 80184da:	4411      	add	r1, r2
 80184dc:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80184e0:	4699      	mov	r9, r3
 80184e2:	6803      	ldr	r3, [r0, #0]
 80184e4:	60c1      	str	r1, [r0, #12]
 80184e6:	4604      	mov	r4, r0
 80184e8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80184ea:	440a      	add	r2, r1
 80184ec:	6102      	str	r2, [r0, #16]
 80184ee:	68db      	ldr	r3, [r3, #12]
 80184f0:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 80184f4:	4798      	blx	r3
 80184f6:	2800      	cmp	r0, #0
 80184f8:	d039      	beq.n	801856e <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa2>
 80184fa:	44c8      	add	r8, r9
 80184fc:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8018500:	4445      	add	r5, r8
 8018502:	6823      	ldr	r3, [r4, #0]
 8018504:	f10d 020f 	add.w	r2, sp, #15
 8018508:	a903      	add	r1, sp, #12
 801850a:	4620      	mov	r0, r4
 801850c:	9200      	str	r2, [sp, #0]
 801850e:	f10d 020d 	add.w	r2, sp, #13
 8018512:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8018516:	f10d 030e 	add.w	r3, sp, #14
 801851a:	47c0      	blx	r8
 801851c:	b1f8      	cbz	r0, 801855e <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x92>
 801851e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8018522:	7a20      	ldrb	r0, [r4, #8]
 8018524:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8018528:	4358      	muls	r0, r3
 801852a:	f89d 100e 	ldrb.w	r1, [sp, #14]
 801852e:	1c43      	adds	r3, r0, #1
 8018530:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8018534:	f817 0b01 	ldrb.w	r0, [r7], #1
 8018538:	121b      	asrs	r3, r3, #8
 801853a:	fb10 f003 	smulbb	r0, r0, r3
 801853e:	b283      	uxth	r3, r0
 8018540:	1c58      	adds	r0, r3, #1
 8018542:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8018546:	6823      	ldr	r3, [r4, #0]
 8018548:	1200      	asrs	r0, r0, #8
 801854a:	f8d3 8014 	ldr.w	r8, [r3, #20]
 801854e:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8018552:	28ff      	cmp	r0, #255	; 0xff
 8018554:	d10e      	bne.n	8018574 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa8>
 8018556:	9100      	str	r1, [sp, #0]
 8018558:	4629      	mov	r1, r5
 801855a:	4620      	mov	r0, r4
 801855c:	47c0      	blx	r8
 801855e:	68e3      	ldr	r3, [r4, #12]
 8018560:	3e01      	subs	r6, #1
 8018562:	f105 0503 	add.w	r5, r5, #3
 8018566:	f103 0301 	add.w	r3, r3, #1
 801856a:	60e3      	str	r3, [r4, #12]
 801856c:	d1c9      	bne.n	8018502 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x36>
 801856e:	b005      	add	sp, #20
 8018570:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018574:	fa1f fc80 	uxth.w	ip, r0
 8018578:	43c0      	mvns	r0, r0
 801857a:	f895 e002 	ldrb.w	lr, [r5, #2]
 801857e:	fb12 f20c 	smulbb	r2, r2, ip
 8018582:	b2c0      	uxtb	r0, r0
 8018584:	fb13 f30c 	smulbb	r3, r3, ip
 8018588:	fb0e 2200 	mla	r2, lr, r0, r2
 801858c:	f895 e001 	ldrb.w	lr, [r5, #1]
 8018590:	fb11 f10c 	smulbb	r1, r1, ip
 8018594:	fb0e 3300 	mla	r3, lr, r0, r3
 8018598:	f895 e000 	ldrb.w	lr, [r5]
 801859c:	b292      	uxth	r2, r2
 801859e:	b29b      	uxth	r3, r3
 80185a0:	fb0e 1000 	mla	r0, lr, r0, r1
 80185a4:	1c59      	adds	r1, r3, #1
 80185a6:	b280      	uxth	r0, r0
 80185a8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80185ac:	1c51      	adds	r1, r2, #1
 80185ae:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80185b2:	1c41      	adds	r1, r0, #1
 80185b4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80185b8:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80185bc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80185c0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80185c4:	9000      	str	r0, [sp, #0]
 80185c6:	e7c7      	b.n	8018558 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x8c>

080185c8 <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 80185c8:	f89d 0000 	ldrb.w	r0, [sp]
 80185cc:	704b      	strb	r3, [r1, #1]
 80185ce:	7008      	strb	r0, [r1, #0]
 80185d0:	708a      	strb	r2, [r1, #2]
 80185d2:	4770      	bx	lr

080185d4 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 80185d4:	4413      	add	r3, r2
 80185d6:	7dc2      	ldrb	r2, [r0, #23]
 80185d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80185dc:	4419      	add	r1, r3
 80185de:	7a03      	ldrb	r3, [r0, #8]
 80185e0:	435a      	muls	r2, r3
 80185e2:	1c53      	adds	r3, r2, #1
 80185e4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80185e8:	121b      	asrs	r3, r3, #8
 80185ea:	2bff      	cmp	r3, #255	; 0xff
 80185ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80185ee:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
 80185f2:	d13e      	bne.n	8018672 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x9e>
 80185f4:	4427      	add	r7, r4
 80185f6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80185fa:	3103      	adds	r1, #3
 80185fc:	7d86      	ldrb	r6, [r0, #22]
 80185fe:	2bff      	cmp	r3, #255	; 0xff
 8018600:	d10a      	bne.n	8018618 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x44>
 8018602:	f801 6c03 	strb.w	r6, [r1, #-3]
 8018606:	7d43      	ldrb	r3, [r0, #21]
 8018608:	f801 3c02 	strb.w	r3, [r1, #-2]
 801860c:	7d03      	ldrb	r3, [r0, #20]
 801860e:	f801 3c01 	strb.w	r3, [r1, #-1]
 8018612:	42a7      	cmp	r7, r4
 8018614:	d1ef      	bne.n	80185f6 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x22>
 8018616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018618:	b29a      	uxth	r2, r3
 801861a:	43db      	mvns	r3, r3
 801861c:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 8018620:	fb16 f602 	smulbb	r6, r6, r2
 8018624:	b2db      	uxtb	r3, r3
 8018626:	fb05 6503 	mla	r5, r5, r3, r6
 801862a:	b2ad      	uxth	r5, r5
 801862c:	1c6e      	adds	r6, r5, #1
 801862e:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8018632:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 8018636:	fb16 f603 	smulbb	r6, r6, r3
 801863a:	122d      	asrs	r5, r5, #8
 801863c:	f801 5c03 	strb.w	r5, [r1, #-3]
 8018640:	7d45      	ldrb	r5, [r0, #21]
 8018642:	fb05 6502 	mla	r5, r5, r2, r6
 8018646:	b2ad      	uxth	r5, r5
 8018648:	1c6e      	adds	r6, r5, #1
 801864a:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801864e:	122d      	asrs	r5, r5, #8
 8018650:	f801 5c02 	strb.w	r5, [r1, #-2]
 8018654:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8018658:	7d06      	ldrb	r6, [r0, #20]
 801865a:	fb15 f303 	smulbb	r3, r5, r3
 801865e:	fb06 3202 	mla	r2, r6, r2, r3
 8018662:	b292      	uxth	r2, r2
 8018664:	1c53      	adds	r3, r2, #1
 8018666:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801866a:	1212      	asrs	r2, r2, #8
 801866c:	f801 2c01 	strb.w	r2, [r1, #-1]
 8018670:	e7cf      	b.n	8018612 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3e>
 8018672:	b2de      	uxtb	r6, r3
 8018674:	2b00      	cmp	r3, #0
 8018676:	d0ce      	beq.n	8018616 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>
 8018678:	3103      	adds	r1, #3
 801867a:	4427      	add	r7, r4
 801867c:	f814 2b01 	ldrb.w	r2, [r4], #1
 8018680:	3103      	adds	r1, #3
 8018682:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 8018686:	fb02 f306 	mul.w	r3, r2, r6
 801868a:	42bc      	cmp	r4, r7
 801868c:	f103 0201 	add.w	r2, r3, #1
 8018690:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8018694:	ea4f 2222 	mov.w	r2, r2, asr #8
 8018698:	b295      	uxth	r5, r2
 801869a:	ea6f 0202 	mvn.w	r2, r2
 801869e:	b2d3      	uxtb	r3, r2
 80186a0:	7d82      	ldrb	r2, [r0, #22]
 80186a2:	fb1c fc03 	smulbb	ip, ip, r3
 80186a6:	fb02 c205 	mla	r2, r2, r5, ip
 80186aa:	b292      	uxth	r2, r2
 80186ac:	f102 0c01 	add.w	ip, r2, #1
 80186b0:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80186b4:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 80186b8:	fb1c fc03 	smulbb	ip, ip, r3
 80186bc:	ea4f 2222 	mov.w	r2, r2, asr #8
 80186c0:	f801 2c06 	strb.w	r2, [r1, #-6]
 80186c4:	7d42      	ldrb	r2, [r0, #21]
 80186c6:	fb02 c205 	mla	r2, r2, r5, ip
 80186ca:	b292      	uxth	r2, r2
 80186cc:	f102 0c01 	add.w	ip, r2, #1
 80186d0:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80186d4:	ea4f 2222 	mov.w	r2, r2, asr #8
 80186d8:	f801 2c05 	strb.w	r2, [r1, #-5]
 80186dc:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 80186e0:	f890 c014 	ldrb.w	ip, [r0, #20]
 80186e4:	fb12 f303 	smulbb	r3, r2, r3
 80186e8:	fb0c 3305 	mla	r3, ip, r5, r3
 80186ec:	b29b      	uxth	r3, r3
 80186ee:	f103 0201 	add.w	r2, r3, #1
 80186f2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80186f6:	ea4f 2323 	mov.w	r3, r3, asr #8
 80186fa:	f801 3c04 	strb.w	r3, [r1, #-4]
 80186fe:	d1bd      	bne.n	801867c <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0xa8>
 8018700:	e789      	b.n	8018616 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>

08018702 <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 8018702:	b510      	push	{r4, lr}
 8018704:	7d04      	ldrb	r4, [r0, #20]
 8018706:	700c      	strb	r4, [r1, #0]
 8018708:	7d41      	ldrb	r1, [r0, #21]
 801870a:	7011      	strb	r1, [r2, #0]
 801870c:	7d82      	ldrb	r2, [r0, #22]
 801870e:	701a      	strb	r2, [r3, #0]
 8018710:	9b02      	ldr	r3, [sp, #8]
 8018712:	7dc2      	ldrb	r2, [r0, #23]
 8018714:	2001      	movs	r0, #1
 8018716:	701a      	strb	r2, [r3, #0]
 8018718:	bd10      	pop	{r4, pc}

0801871a <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>:
 801871a:	b570      	push	{r4, r5, r6, lr}
 801871c:	4616      	mov	r6, r2
 801871e:	4604      	mov	r4, r0
 8018720:	460d      	mov	r5, r1
 8018722:	f7f7 fc51 	bl	800ffc8 <_ZN8touchgfx3HAL3lcdEv>
 8018726:	6803      	ldr	r3, [r0, #0]
 8018728:	4629      	mov	r1, r5
 801872a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801872c:	4798      	blx	r3
 801872e:	7520      	strb	r0, [r4, #20]
 8018730:	f7f7 fc4a 	bl	800ffc8 <_ZN8touchgfx3HAL3lcdEv>
 8018734:	6803      	ldr	r3, [r0, #0]
 8018736:	4629      	mov	r1, r5
 8018738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801873a:	4798      	blx	r3
 801873c:	7560      	strb	r0, [r4, #21]
 801873e:	f7f7 fc43 	bl	800ffc8 <_ZN8touchgfx3HAL3lcdEv>
 8018742:	6803      	ldr	r3, [r0, #0]
 8018744:	4629      	mov	r1, r5
 8018746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018748:	4798      	blx	r3
 801874a:	75e6      	strb	r6, [r4, #23]
 801874c:	75a0      	strb	r0, [r4, #22]
 801874e:	bd70      	pop	{r4, r5, r6, pc}

08018750 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>:
 8018750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018752:	460e      	mov	r6, r1
 8018754:	4617      	mov	r7, r2
 8018756:	4604      	mov	r4, r0
 8018758:	f000 f832 	bl	80187c0 <_ZN8touchgfx15AbstractPainterC1Ev>
 801875c:	4b12      	ldr	r3, [pc, #72]	; (80187a8 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x58>)
 801875e:	6023      	str	r3, [r4, #0]
 8018760:	f7f7 fc32 	bl	800ffc8 <_ZN8touchgfx3HAL3lcdEv>
 8018764:	6803      	ldr	r3, [r0, #0]
 8018766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018768:	4798      	blx	r3
 801876a:	1e43      	subs	r3, r0, #1
 801876c:	425d      	negs	r5, r3
 801876e:	415d      	adcs	r5, r3
 8018770:	4b0e      	ldr	r3, [pc, #56]	; (80187ac <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x5c>)
 8018772:	681b      	ldr	r3, [r3, #0]
 8018774:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8018776:	b130      	cbz	r0, 8018786 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x36>
 8018778:	6803      	ldr	r3, [r0, #0]
 801877a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801877c:	4798      	blx	r3
 801877e:	2801      	cmp	r0, #1
 8018780:	bf08      	it	eq
 8018782:	f045 0501 	orreq.w	r5, r5, #1
 8018786:	b92d      	cbnz	r5, 8018794 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x44>
 8018788:	4b09      	ldr	r3, [pc, #36]	; (80187b0 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x60>)
 801878a:	2129      	movs	r1, #41	; 0x29
 801878c:	4a09      	ldr	r2, [pc, #36]	; (80187b4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x64>)
 801878e:	480a      	ldr	r0, [pc, #40]	; (80187b8 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x68>)
 8018790:	f00e f834 	bl	80267fc <__assert_func>
 8018794:	4b09      	ldr	r3, [pc, #36]	; (80187bc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x6c>)
 8018796:	4620      	mov	r0, r4
 8018798:	463a      	mov	r2, r7
 801879a:	4631      	mov	r1, r6
 801879c:	6023      	str	r3, [r4, #0]
 801879e:	f7ff ffbc 	bl	801871a <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
 80187a2:	4620      	mov	r0, r4
 80187a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80187a6:	bf00      	nop
 80187a8:	08029970 	.word	0x08029970
 80187ac:	2000c68c 	.word	0x2000c68c
 80187b0:	08029988 	.word	0x08029988
 80187b4:	08029a4c 	.word	0x08029a4c
 80187b8:	080299e6 	.word	0x080299e6
 80187bc:	08029a34 	.word	0x08029a34

080187c0 <_ZN8touchgfx15AbstractPainterC1Ev>:
 80187c0:	4a03      	ldr	r2, [pc, #12]	; (80187d0 <_ZN8touchgfx15AbstractPainterC1Ev+0x10>)
 80187c2:	6002      	str	r2, [r0, #0]
 80187c4:	2200      	movs	r2, #0
 80187c6:	6042      	str	r2, [r0, #4]
 80187c8:	22ff      	movs	r2, #255	; 0xff
 80187ca:	7202      	strb	r2, [r0, #8]
 80187cc:	4770      	bx	lr
 80187ce:	bf00      	nop
 80187d0:	08029a90 	.word	0x08029a90

080187d4 <_ZN8touchgfx15AbstractPainterD1Ev>:
 80187d4:	4770      	bx	lr

080187d6 <_ZN8touchgfx15AbstractPainter9setOffsetEtt>:
 80187d6:	8081      	strh	r1, [r0, #4]
 80187d8:	80c2      	strh	r2, [r0, #6]
 80187da:	4770      	bx	lr

080187dc <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>:
 80187dc:	7201      	strb	r1, [r0, #8]
 80187de:	4770      	bx	lr

080187e0 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 80187e0:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 80187e4:	4770      	bx	lr

080187e6 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 80187e6:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 80187ea:	4770      	bx	lr

080187ec <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 80187ec:	6281      	str	r1, [r0, #40]	; 0x28
 80187ee:	4770      	bx	lr

080187f0 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 80187f0:	b513      	push	{r0, r1, r4, lr}
 80187f2:	6803      	ldr	r3, [r0, #0]
 80187f4:	4604      	mov	r4, r0
 80187f6:	4601      	mov	r1, r0
 80187f8:	4668      	mov	r0, sp
 80187fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80187fc:	4798      	blx	r3
 80187fe:	6823      	ldr	r3, [r4, #0]
 8018800:	4669      	mov	r1, sp
 8018802:	4620      	mov	r0, r4
 8018804:	691b      	ldr	r3, [r3, #16]
 8018806:	4798      	blx	r3
 8018808:	b002      	add	sp, #8
 801880a:	bd10      	pop	{r4, pc}

0801880c <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 801880c:	b510      	push	{r4, lr}
 801880e:	2200      	movs	r2, #0
 8018810:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8018814:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8018818:	8002      	strh	r2, [r0, #0]
 801881a:	8042      	strh	r2, [r0, #2]
 801881c:	8084      	strh	r4, [r0, #4]
 801881e:	80c1      	strh	r1, [r0, #6]
 8018820:	bd10      	pop	{r4, pc}

08018822 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 8018822:	2200      	movs	r2, #0
 8018824:	8002      	strh	r2, [r0, #0]
 8018826:	8042      	strh	r2, [r0, #2]
 8018828:	8082      	strh	r2, [r0, #4]
 801882a:	80c2      	strh	r2, [r0, #6]
 801882c:	4770      	bx	lr
	...

08018830 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 8018830:	b508      	push	{r3, lr}
 8018832:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8018834:	b928      	cbnz	r0, 8018842 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 8018836:	4b03      	ldr	r3, [pc, #12]	; (8018844 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 8018838:	2127      	movs	r1, #39	; 0x27
 801883a:	4a03      	ldr	r2, [pc, #12]	; (8018848 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 801883c:	4803      	ldr	r0, [pc, #12]	; (801884c <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 801883e:	f00d ffdd 	bl	80267fc <__assert_func>
 8018842:	bd08      	pop	{r3, pc}
 8018844:	08029a9c 	.word	0x08029a9c
 8018848:	08029b80 	.word	0x08029b80
 801884c:	08029ac3 	.word	0x08029ac3

08018850 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8018850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018854:	b089      	sub	sp, #36	; 0x24
 8018856:	4604      	mov	r4, r0
 8018858:	6808      	ldr	r0, [r1, #0]
 801885a:	f04f 0a00 	mov.w	sl, #0
 801885e:	6849      	ldr	r1, [r1, #4]
 8018860:	ab02      	add	r3, sp, #8
 8018862:	f04f 0b01 	mov.w	fp, #1
 8018866:	c303      	stmia	r3!, {r0, r1}
 8018868:	4b3f      	ldr	r3, [pc, #252]	; (8018968 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 801886a:	4621      	mov	r1, r4
 801886c:	a804      	add	r0, sp, #16
 801886e:	781b      	ldrb	r3, [r3, #0]
 8018870:	2b01      	cmp	r3, #1
 8018872:	6823      	ldr	r3, [r4, #0]
 8018874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018876:	bf1f      	itttt	ne
 8018878:	f10d 0906 	addne.w	r9, sp, #6
 801887c:	ae03      	addne	r6, sp, #12
 801887e:	f10d 050e 	addne.w	r5, sp, #14
 8018882:	f10d 080a 	addne.w	r8, sp, #10
 8018886:	bf01      	itttt	eq
 8018888:	f10d 090e 	addeq.w	r9, sp, #14
 801888c:	f10d 0606 	addeq.w	r6, sp, #6
 8018890:	ad03      	addeq	r5, sp, #12
 8018892:	f10d 0808 	addeq.w	r8, sp, #8
 8018896:	4798      	blx	r3
 8018898:	f9b5 3000 	ldrsh.w	r3, [r5]
 801889c:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 80188a0:	2b00      	cmp	r3, #0
 80188a2:	d056      	beq.n	8018952 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 80188a4:	4293      	cmp	r3, r2
 80188a6:	bfa8      	it	ge
 80188a8:	4613      	movge	r3, r2
 80188aa:	f8ad 3006 	strh.w	r3, [sp, #6]
 80188ae:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 80188b2:	2f00      	cmp	r7, #0
 80188b4:	dd34      	ble.n	8018920 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd0>
 80188b6:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 80188ba:	f8bd c014 	ldrh.w	ip, [sp, #20]
 80188be:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80188c2:	4484      	add	ip, r0
 80188c4:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80188c8:	f9b6 e000 	ldrsh.w	lr, [r6]
 80188cc:	fa0f fc8c 	sxth.w	ip, ip
 80188d0:	f9b9 1000 	ldrsh.w	r1, [r9]
 80188d4:	f8ad 2018 	strh.w	r2, [sp, #24]
 80188d8:	4562      	cmp	r2, ip
 80188da:	f8ad 301a 	strh.w	r3, [sp, #26]
 80188de:	f8ad e01c 	strh.w	lr, [sp, #28]
 80188e2:	f8ad 101e 	strh.w	r1, [sp, #30]
 80188e6:	da29      	bge.n	801893c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80188e8:	4472      	add	r2, lr
 80188ea:	b212      	sxth	r2, r2
 80188ec:	4290      	cmp	r0, r2
 80188ee:	da25      	bge.n	801893c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80188f0:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 80188f4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80188f8:	4402      	add	r2, r0
 80188fa:	b212      	sxth	r2, r2
 80188fc:	4293      	cmp	r3, r2
 80188fe:	da1d      	bge.n	801893c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8018900:	440b      	add	r3, r1
 8018902:	b21b      	sxth	r3, r3
 8018904:	4298      	cmp	r0, r3
 8018906:	da19      	bge.n	801893c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8018908:	6823      	ldr	r3, [r4, #0]
 801890a:	a906      	add	r1, sp, #24
 801890c:	4620      	mov	r0, r4
 801890e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018910:	4798      	blx	r3
 8018912:	b998      	cbnz	r0, 801893c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8018914:	107f      	asrs	r7, r7, #1
 8018916:	f04f 0a01 	mov.w	sl, #1
 801891a:	f8ad 7006 	strh.w	r7, [sp, #6]
 801891e:	e7c6      	b.n	80188ae <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8018920:	d10c      	bne.n	801893c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8018922:	f8ad b006 	strh.w	fp, [sp, #6]
 8018926:	f8b8 2000 	ldrh.w	r2, [r8]
 801892a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 801892e:	440a      	add	r2, r1
 8018930:	f8a8 2000 	strh.w	r2, [r8]
 8018934:	882b      	ldrh	r3, [r5, #0]
 8018936:	1a5b      	subs	r3, r3, r1
 8018938:	802b      	strh	r3, [r5, #0]
 801893a:	e7ad      	b.n	8018898 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801893c:	f1ba 0f00 	cmp.w	sl, #0
 8018940:	d0f1      	beq.n	8018926 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8018942:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8018946:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801894a:	429a      	cmp	r2, r3
 801894c:	bf08      	it	eq
 801894e:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 8018950:	e7e9      	b.n	8018926 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8018952:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8018956:	429a      	cmp	r2, r3
 8018958:	bf04      	itt	eq
 801895a:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 801895e:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 8018960:	b009      	add	sp, #36	; 0x24
 8018962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018966:	bf00      	nop
 8018968:	2000c684 	.word	0x2000c684

0801896c <_ZN8touchgfx12CanvasWidgetC1Ev>:
 801896c:	2200      	movs	r2, #0
 801896e:	2101      	movs	r1, #1
 8018970:	8082      	strh	r2, [r0, #4]
 8018972:	80c2      	strh	r2, [r0, #6]
 8018974:	8102      	strh	r2, [r0, #8]
 8018976:	8142      	strh	r2, [r0, #10]
 8018978:	8182      	strh	r2, [r0, #12]
 801897a:	81c2      	strh	r2, [r0, #14]
 801897c:	8202      	strh	r2, [r0, #16]
 801897e:	8242      	strh	r2, [r0, #18]
 8018980:	61c2      	str	r2, [r0, #28]
 8018982:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8018986:	6282      	str	r2, [r0, #40]	; 0x28
 8018988:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 801898c:	4905      	ldr	r1, [pc, #20]	; (80189a4 <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 801898e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8018992:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018996:	6001      	str	r1, [r0, #0]
 8018998:	8582      	strh	r2, [r0, #44]	; 0x2c
 801899a:	22ff      	movs	r2, #255	; 0xff
 801899c:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 80189a0:	4770      	bx	lr
 80189a2:	bf00      	nop
 80189a4:	08029b08 	.word	0x08029b08

080189a8 <_ZN8touchgfx12CanvasWidgetD1Ev>:
 80189a8:	4770      	bx	lr

080189aa <_ZNK8touchgfx4Line14getMinimalRectEv>:
 80189aa:	f101 0368 	add.w	r3, r1, #104	; 0x68
 80189ae:	4602      	mov	r2, r0
 80189b0:	cb03      	ldmia	r3!, {r0, r1}
 80189b2:	6010      	str	r0, [r2, #0]
 80189b4:	4610      	mov	r0, r2
 80189b6:	6051      	str	r1, [r2, #4]
 80189b8:	4770      	bx	lr

080189ba <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80189ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189be:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 80189c2:	b395      	cbz	r5, 8018a2a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 80189c4:	f9b1 c006 	ldrsh.w	ip, [r1, #6]
 80189c8:	f1bc 0f00 	cmp.w	ip, #0
 80189cc:	d02d      	beq.n	8018a2a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 80189ce:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80189d2:	f9b1 e000 	ldrsh.w	lr, [r1]
 80189d6:	b354      	cbz	r4, 8018a2e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 80189d8:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 80189dc:	b33f      	cbz	r7, 8018a2e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 80189de:	f9b0 8000 	ldrsh.w	r8, [r0]
 80189e2:	4475      	add	r5, lr
 80189e4:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 80189e8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80189ec:	45f0      	cmp	r8, lr
 80189ee:	4646      	mov	r6, r8
 80189f0:	4444      	add	r4, r8
 80189f2:	bfa8      	it	ge
 80189f4:	4676      	movge	r6, lr
 80189f6:	4293      	cmp	r3, r2
 80189f8:	4619      	mov	r1, r3
 80189fa:	443b      	add	r3, r7
 80189fc:	bfa8      	it	ge
 80189fe:	4611      	movge	r1, r2
 8018a00:	4462      	add	r2, ip
 8018a02:	b22d      	sxth	r5, r5
 8018a04:	8006      	strh	r6, [r0, #0]
 8018a06:	b224      	sxth	r4, r4
 8018a08:	8041      	strh	r1, [r0, #2]
 8018a0a:	b212      	sxth	r2, r2
 8018a0c:	b21b      	sxth	r3, r3
 8018a0e:	42a5      	cmp	r5, r4
 8018a10:	bfac      	ite	ge
 8018a12:	ebc6 0405 	rsbge	r4, r6, r5
 8018a16:	ebc6 0404 	rsblt	r4, r6, r4
 8018a1a:	429a      	cmp	r2, r3
 8018a1c:	bfac      	ite	ge
 8018a1e:	ebc1 0302 	rsbge	r3, r1, r2
 8018a22:	ebc1 0303 	rsblt	r3, r1, r3
 8018a26:	8084      	strh	r4, [r0, #4]
 8018a28:	80c3      	strh	r3, [r0, #6]
 8018a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a2e:	f8a0 e000 	strh.w	lr, [r0]
 8018a32:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8018a36:	8043      	strh	r3, [r0, #2]
 8018a38:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8018a3c:	8083      	strh	r3, [r0, #4]
 8018a3e:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8018a42:	e7f1      	b.n	8018a28 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x6e>

08018a44 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8018a44:	b507      	push	{r0, r1, r2, lr}
 8018a46:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8018a4a:	ab01      	add	r3, sp, #4
 8018a4c:	6809      	ldr	r1, [r1, #0]
 8018a4e:	6800      	ldr	r0, [r0, #0]
 8018a50:	f002 fc4f 	bl	801b2f2 <_ZN8touchgfx6muldivElllRl>
 8018a54:	b003      	add	sp, #12
 8018a56:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08018a5c <_ZN8touchgfx7CWRUtil4sineEi>:
 8018a5c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8018a60:	fb90 f3f2 	sdiv	r3, r0, r2
 8018a64:	fb03 0312 	mls	r3, r3, r2, r0
 8018a68:	4413      	add	r3, r2
 8018a6a:	fb93 f0f2 	sdiv	r0, r3, r2
 8018a6e:	fb02 3010 	mls	r0, r2, r0, r3
 8018a72:	4b0a      	ldr	r3, [pc, #40]	; (8018a9c <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 8018a74:	285a      	cmp	r0, #90	; 0x5a
 8018a76:	dc02      	bgt.n	8018a7e <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 8018a78:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8018a7c:	4770      	bx	lr
 8018a7e:	28b4      	cmp	r0, #180	; 0xb4
 8018a80:	dc02      	bgt.n	8018a88 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 8018a82:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8018a86:	e7f7      	b.n	8018a78 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 8018a88:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8018a8c:	bfd4      	ite	le
 8018a8e:	38b4      	suble	r0, #180	; 0xb4
 8018a90:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8018a94:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8018a98:	4240      	negs	r0, r0
 8018a9a:	4770      	bx	lr
 8018a9c:	08029c2a 	.word	0x08029c2a

08018aa0 <_ZN8touchgfx7CWRUtil5isqrtEm>:
 8018aa0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8018aa4:	f04f 0300 	mov.w	r3, #0
 8018aa8:	bf2c      	ite	cs
 8018aaa:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 8018aae:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 8018ab2:	1899      	adds	r1, r3, r2
 8018ab4:	4288      	cmp	r0, r1
 8018ab6:	bf24      	itt	cs
 8018ab8:	1853      	addcs	r3, r2, r1
 8018aba:	1a40      	subcs	r0, r0, r1
 8018abc:	0892      	lsrs	r2, r2, #2
 8018abe:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8018ac2:	d1f6      	bne.n	8018ab2 <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 8018ac4:	4618      	mov	r0, r3
 8018ac6:	4770      	bx	lr

08018ac8 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 8018ac8:	2800      	cmp	r0, #0
 8018aca:	b508      	push	{r3, lr}
 8018acc:	da05      	bge.n	8018ada <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 8018ace:	4240      	negs	r0, r0
 8018ad0:	f7ff fffa 	bl	8018ac8 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8018ad4:	4240      	negs	r0, r0
 8018ad6:	b240      	sxtb	r0, r0
 8018ad8:	bd08      	pop	{r3, pc}
 8018ada:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8018ade:	dc11      	bgt.n	8018b04 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 8018ae0:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 8018ae4:	dd09      	ble.n	8018afa <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 8018ae6:	4340      	muls	r0, r0
 8018ae8:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 8018aec:	f7ff ffd8 	bl	8018aa0 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8018af0:	f7ff ffea 	bl	8018ac8 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8018af4:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8018af8:	e7ed      	b.n	8018ad6 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 8018afa:	3003      	adds	r0, #3
 8018afc:	4b02      	ldr	r3, [pc, #8]	; (8018b08 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 8018afe:	10c0      	asrs	r0, r0, #3
 8018b00:	5618      	ldrsb	r0, [r3, r0]
 8018b02:	e7e9      	b.n	8018ad8 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8018b04:	2000      	movs	r0, #0
 8018b06:	e7e7      	b.n	8018ad8 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8018b08:	08029bce 	.word	0x08029bce

08018b0c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 8018b0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018b0e:	460c      	mov	r4, r1
 8018b10:	1e01      	subs	r1, r0, #0
 8018b12:	4615      	mov	r5, r2
 8018b14:	db01      	blt.n	8018b1a <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0xe>
 8018b16:	2c00      	cmp	r4, #0
 8018b18:	da06      	bge.n	8018b28 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1c>
 8018b1a:	4b11      	ldr	r3, [pc, #68]	; (8018b60 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x54>)
 8018b1c:	f240 3197 	movw	r1, #919	; 0x397
 8018b20:	4a10      	ldr	r2, [pc, #64]	; (8018b64 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x58>)
 8018b22:	4811      	ldr	r0, [pc, #68]	; (8018b68 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x5c>)
 8018b24:	f00d fe6a 	bl	80267fc <__assert_func>
 8018b28:	428c      	cmp	r4, r1
 8018b2a:	dd06      	ble.n	8018b3a <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2e>
 8018b2c:	4620      	mov	r0, r4
 8018b2e:	f7ff ffed 	bl	8018b0c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8018b32:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8018b36:	b003      	add	sp, #12
 8018b38:	bd30      	pop	{r4, r5, pc}
 8018b3a:	4349      	muls	r1, r1
 8018b3c:	fb04 1004 	mla	r0, r4, r4, r1
 8018b40:	f7ff ffae 	bl	8018aa0 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8018b44:	6028      	str	r0, [r5, #0]
 8018b46:	2800      	cmp	r0, #0
 8018b48:	d0f5      	beq.n	8018b36 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 8018b4a:	4602      	mov	r2, r0
 8018b4c:	ab01      	add	r3, sp, #4
 8018b4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8018b52:	4620      	mov	r0, r4
 8018b54:	f002 fbcd 	bl	801b2f2 <_ZN8touchgfx6muldivElllRl>
 8018b58:	f7ff ffb6 	bl	8018ac8 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8018b5c:	e7eb      	b.n	8018b36 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 8018b5e:	bf00      	nop
 8018b60:	08029ce0 	.word	0x08029ce0
 8018b64:	08029da8 	.word	0x08029da8
 8018b68:	08029cf1 	.word	0x08029cf1

08018b6c <_ZN8touchgfx4LineC1Ev>:
 8018b6c:	b510      	push	{r4, lr}
 8018b6e:	4604      	mov	r4, r0
 8018b70:	f7ff fefc 	bl	801896c <_ZN8touchgfx12CanvasWidgetC1Ev>
 8018b74:	4b0c      	ldr	r3, [pc, #48]	; (8018ba8 <_ZN8touchgfx4LineC1Ev+0x3c>)
 8018b76:	2220      	movs	r2, #32
 8018b78:	4620      	mov	r0, r4
 8018b7a:	6023      	str	r3, [r4, #0]
 8018b7c:	2300      	movs	r3, #0
 8018b7e:	6422      	str	r2, [r4, #64]	; 0x40
 8018b80:	2212      	movs	r2, #18
 8018b82:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8018b86:	6722      	str	r2, [r4, #112]	; 0x70
 8018b88:	60a3      	str	r3, [r4, #8]
 8018b8a:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 8018b8e:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8018b92:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018b96:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 8018b9a:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
 8018b9e:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 8018ba2:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 8018ba6:	bd10      	pop	{r4, pc}
 8018ba8:	08029d30 	.word	0x08029d30

08018bac <_ZN8touchgfx4Line17updateCachedShapeEv>:
 8018bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bb0:	6b86      	ldr	r6, [r0, #56]	; 0x38
 8018bb2:	b085      	sub	sp, #20
 8018bb4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8018bb6:	4604      	mov	r4, r0
 8018bb8:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8018bba:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8018bbc:	1af6      	subs	r6, r6, r3
 8018bbe:	eba5 0502 	sub.w	r5, r5, r2
 8018bc2:	f040 809b 	bne.w	8018cfc <_ZN8touchgfx4Line17updateCachedShapeEv+0x150>
 8018bc6:	b955      	cbnz	r5, 8018bde <_ZN8touchgfx4Line17updateCachedShapeEv+0x32>
 8018bc8:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 8018bcc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8018bd0:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8018bd4:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8018bd8:	b005      	add	sp, #20
 8018bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bde:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 8018be2:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 8018be6:	f04f 0802 	mov.w	r8, #2
 8018bea:	463a      	mov	r2, r7
 8018bec:	4629      	mov	r1, r5
 8018bee:	ab03      	add	r3, sp, #12
 8018bf0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8018bf2:	f002 fb7e 	bl	801b2f2 <_ZN8touchgfx6muldivElllRl>
 8018bf6:	ab03      	add	r3, sp, #12
 8018bf8:	463a      	mov	r2, r7
 8018bfa:	4631      	mov	r1, r6
 8018bfc:	fb90 f5f8 	sdiv	r5, r0, r8
 8018c00:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8018c02:	f002 fb76 	bl	801b2f2 <_ZN8touchgfx6muldivElllRl>
 8018c06:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
 8018c0a:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
 8018c0e:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
 8018c12:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8018c14:	fb90 f0f8 	sdiv	r0, r0, r8
 8018c18:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8018c1c:	eba8 0305 	sub.w	r3, r8, r5
 8018c20:	f1ba 0f00 	cmp.w	sl, #0
 8018c24:	f040 80c3 	bne.w	8018dae <_ZN8touchgfx4Line17updateCachedShapeEv+0x202>
 8018c28:	64a3      	str	r3, [r4, #72]	; 0x48
 8018c2a:	19c3      	adds	r3, r0, r7
 8018c2c:	65a3      	str	r3, [r4, #88]	; 0x58
 8018c2e:	ebae 0305 	sub.w	r3, lr, r5
 8018c32:	64e3      	str	r3, [r4, #76]	; 0x4c
 8018c34:	eb00 030c 	add.w	r3, r0, ip
 8018c38:	65e3      	str	r3, [r4, #92]	; 0x5c
 8018c3a:	eb05 030e 	add.w	r3, r5, lr
 8018c3e:	6523      	str	r3, [r4, #80]	; 0x50
 8018c40:	ebac 0300 	sub.w	r3, ip, r0
 8018c44:	6623      	str	r3, [r4, #96]	; 0x60
 8018c46:	eb05 0308 	add.w	r3, r5, r8
 8018c4a:	6563      	str	r3, [r4, #84]	; 0x54
 8018c4c:	1a3b      	subs	r3, r7, r0
 8018c4e:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8018c50:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 8018c54:	6663      	str	r3, [r4, #100]	; 0x64
 8018c56:	f104 0358 	add.w	r3, r4, #88	; 0x58
 8018c5a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8018c5c:	4632      	mov	r2, r6
 8018c5e:	9301      	str	r3, [sp, #4]
 8018c60:	9100      	str	r1, [sp, #0]
 8018c62:	f859 bb04 	ldr.w	fp, [r9], #4
 8018c66:	9b00      	ldr	r3, [sp, #0]
 8018c68:	455e      	cmp	r6, fp
 8018c6a:	bfa8      	it	ge
 8018c6c:	465e      	movge	r6, fp
 8018c6e:	455a      	cmp	r2, fp
 8018c70:	bfb8      	it	lt
 8018c72:	465a      	movlt	r2, fp
 8018c74:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8018c78:	4559      	cmp	r1, fp
 8018c7a:	bfa8      	it	ge
 8018c7c:	4659      	movge	r1, fp
 8018c7e:	455b      	cmp	r3, fp
 8018c80:	bfb8      	it	lt
 8018c82:	465b      	movlt	r3, fp
 8018c84:	9300      	str	r3, [sp, #0]
 8018c86:	9b01      	ldr	r3, [sp, #4]
 8018c88:	454b      	cmp	r3, r9
 8018c8a:	d1ea      	bne.n	8018c62 <_ZN8touchgfx4Line17updateCachedShapeEv+0xb6>
 8018c8c:	f04f 0b20 	mov.w	fp, #32
 8018c90:	b209      	sxth	r1, r1
 8018c92:	b212      	sxth	r2, r2
 8018c94:	f1ba 0f01 	cmp.w	sl, #1
 8018c98:	b236      	sxth	r6, r6
 8018c9a:	fb91 f9fb 	sdiv	r9, r1, fp
 8018c9e:	f9bd 1000 	ldrsh.w	r1, [sp]
 8018ca2:	f8a4 906a 	strh.w	r9, [r4, #106]	; 0x6a
 8018ca6:	fb92 f2fb 	sdiv	r2, r2, fp
 8018caa:	fb91 f1fb 	sdiv	r1, r1, fp
 8018cae:	fb96 f6fb 	sdiv	r6, r6, fp
 8018cb2:	f102 0201 	add.w	r2, r2, #1
 8018cb6:	f101 0101 	add.w	r1, r1, #1
 8018cba:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
 8018cbe:	eba1 0109 	sub.w	r1, r1, r9
 8018cc2:	eba2 0606 	sub.w	r6, r2, r6
 8018cc6:	f8a4 106e 	strh.w	r1, [r4, #110]	; 0x6e
 8018cca:	f8a4 606c 	strh.w	r6, [r4, #108]	; 0x6c
 8018cce:	d183      	bne.n	8018bd8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 8018cd0:	eba8 0305 	sub.w	r3, r8, r5
 8018cd4:	64a3      	str	r3, [r4, #72]	; 0x48
 8018cd6:	19c3      	adds	r3, r0, r7
 8018cd8:	65a3      	str	r3, [r4, #88]	; 0x58
 8018cda:	ebae 0305 	sub.w	r3, lr, r5
 8018cde:	64e3      	str	r3, [r4, #76]	; 0x4c
 8018ce0:	eb00 030c 	add.w	r3, r0, ip
 8018ce4:	65e3      	str	r3, [r4, #92]	; 0x5c
 8018ce6:	eb05 030e 	add.w	r3, r5, lr
 8018cea:	4445      	add	r5, r8
 8018cec:	6523      	str	r3, [r4, #80]	; 0x50
 8018cee:	ebac 0300 	sub.w	r3, ip, r0
 8018cf2:	1a38      	subs	r0, r7, r0
 8018cf4:	6565      	str	r5, [r4, #84]	; 0x54
 8018cf6:	6623      	str	r3, [r4, #96]	; 0x60
 8018cf8:	6660      	str	r0, [r4, #100]	; 0x64
 8018cfa:	e76d      	b.n	8018bd8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 8018cfc:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 8018d00:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
 8018d04:	2d00      	cmp	r5, #0
 8018d06:	f43f af6e 	beq.w	8018be6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 8018d0a:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 8018d0e:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 8018d12:	fb93 f2f7 	sdiv	r2, r3, r7
 8018d16:	fb07 3312 	mls	r3, r7, r2, r3
 8018d1a:	b34b      	cbz	r3, 8018d70 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c4>
 8018d1c:	fb97 f2f3 	sdiv	r2, r7, r3
 8018d20:	fb03 7712 	mls	r7, r3, r2, r7
 8018d24:	2f00      	cmp	r7, #0
 8018d26:	d1f4      	bne.n	8018d12 <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 8018d28:	2b01      	cmp	r3, #1
 8018d2a:	f24b 5204 	movw	r2, #46340	; 0xb504
 8018d2e:	bf18      	it	ne
 8018d30:	fb96 f6f3 	sdivne	r6, r6, r3
 8018d34:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
 8018d38:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
 8018d3c:	bf18      	it	ne
 8018d3e:	fb95 f5f3 	sdivne	r5, r5, r3
 8018d42:	4291      	cmp	r1, r2
 8018d44:	dd16      	ble.n	8018d74 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c8>
 8018d46:	2d00      	cmp	r5, #0
 8018d48:	da4d      	bge.n	8018de6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x23a>
 8018d4a:	4b29      	ldr	r3, [pc, #164]	; (8018df0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x244>)
 8018d4c:	429d      	cmp	r5, r3
 8018d4e:	da27      	bge.n	8018da0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f4>
 8018d50:	426a      	negs	r2, r5
 8018d52:	f24b 5304 	movw	r3, #46340	; 0xb504
 8018d56:	fb91 f1f3 	sdiv	r1, r1, r3
 8018d5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8018d5e:	4299      	cmp	r1, r3
 8018d60:	bfcc      	ite	gt
 8018d62:	1c4b      	addgt	r3, r1, #1
 8018d64:	3301      	addle	r3, #1
 8018d66:	fb96 f6f3 	sdiv	r6, r6, r3
 8018d6a:	fb95 f5f3 	sdiv	r5, r5, r3
 8018d6e:	e00f      	b.n	8018d90 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1e4>
 8018d70:	463b      	mov	r3, r7
 8018d72:	e7d9      	b.n	8018d28 <_ZN8touchgfx4Line17updateCachedShapeEv+0x17c>
 8018d74:	2d00      	cmp	r5, #0
 8018d76:	fb92 f2f1 	sdiv	r2, r2, r1
 8018d7a:	da13      	bge.n	8018da4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f8>
 8018d7c:	4269      	negs	r1, r5
 8018d7e:	f24b 5304 	movw	r3, #46340	; 0xb504
 8018d82:	fb93 f3f1 	sdiv	r3, r3, r1
 8018d86:	429a      	cmp	r2, r3
 8018d88:	bfa8      	it	ge
 8018d8a:	461a      	movge	r2, r3
 8018d8c:	4356      	muls	r6, r2
 8018d8e:	4355      	muls	r5, r2
 8018d90:	fb05 f005 	mul.w	r0, r5, r5
 8018d94:	fb06 0006 	mla	r0, r6, r6, r0
 8018d98:	f7ff fe82 	bl	8018aa0 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8018d9c:	4607      	mov	r7, r0
 8018d9e:	e722      	b.n	8018be6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 8018da0:	2200      	movs	r2, #0
 8018da2:	e7eb      	b.n	8018d7c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d0>
 8018da4:	4629      	mov	r1, r5
 8018da6:	e7ea      	b.n	8018d7e <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 8018da8:	4629      	mov	r1, r5
 8018daa:	2200      	movs	r2, #0
 8018dac:	e7e7      	b.n	8018d7e <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 8018dae:	1a1b      	subs	r3, r3, r0
 8018db0:	64a3      	str	r3, [r4, #72]	; 0x48
 8018db2:	19c3      	adds	r3, r0, r7
 8018db4:	1b5b      	subs	r3, r3, r5
 8018db6:	65a3      	str	r3, [r4, #88]	; 0x58
 8018db8:	ebae 0305 	sub.w	r3, lr, r5
 8018dbc:	4403      	add	r3, r0
 8018dbe:	64e3      	str	r3, [r4, #76]	; 0x4c
 8018dc0:	eb00 030c 	add.w	r3, r0, ip
 8018dc4:	442b      	add	r3, r5
 8018dc6:	65e3      	str	r3, [r4, #92]	; 0x5c
 8018dc8:	eb05 030e 	add.w	r3, r5, lr
 8018dcc:	4403      	add	r3, r0
 8018dce:	6523      	str	r3, [r4, #80]	; 0x50
 8018dd0:	ebac 0300 	sub.w	r3, ip, r0
 8018dd4:	442b      	add	r3, r5
 8018dd6:	6623      	str	r3, [r4, #96]	; 0x60
 8018dd8:	eb05 0308 	add.w	r3, r5, r8
 8018ddc:	1a1b      	subs	r3, r3, r0
 8018dde:	6563      	str	r3, [r4, #84]	; 0x54
 8018de0:	1a3b      	subs	r3, r7, r0
 8018de2:	1b5b      	subs	r3, r3, r5
 8018de4:	e733      	b.n	8018c4e <_ZN8touchgfx4Line17updateCachedShapeEv+0xa2>
 8018de6:	4295      	cmp	r5, r2
 8018de8:	ddde      	ble.n	8018da8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1fc>
 8018dea:	462a      	mov	r2, r5
 8018dec:	e7b1      	b.n	8018d52 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1a6>
 8018dee:	bf00      	nop
 8018df0:	ffff4afc 	.word	0xffff4afc

08018df4 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 8018df4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8018df6:	428b      	cmp	r3, r1
 8018df8:	d102      	bne.n	8018e00 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 8018dfa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8018dfc:	4293      	cmp	r3, r2
 8018dfe:	d003      	beq.n	8018e08 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 8018e00:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
 8018e04:	f7ff bed2 	b.w	8018bac <_ZN8touchgfx4Line17updateCachedShapeEv>
 8018e08:	4770      	bx	lr

08018e0a <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 8018e0a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8018e0c:	428b      	cmp	r3, r1
 8018e0e:	d102      	bne.n	8018e16 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 8018e10:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8018e12:	4293      	cmp	r3, r2
 8018e14:	d003      	beq.n	8018e1e <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 8018e16:	e9c0 120e 	strd	r1, r2, [r0, #56]	; 0x38
 8018e1a:	f7ff bec7 	b.w	8018bac <_ZN8touchgfx4Line17updateCachedShapeEv>
 8018e1e:	4770      	bx	lr

08018e20 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 8018e20:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
 8018e24:	f7ff bec2 	b.w	8018bac <_ZN8touchgfx4Line17updateCachedShapeEv>

08018e28 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 8018e28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018e2c:	b0b3      	sub	sp, #204	; 0xcc
 8018e2e:	4604      	mov	r4, r0
 8018e30:	460a      	mov	r2, r1
 8018e32:	4601      	mov	r1, r0
 8018e34:	a804      	add	r0, sp, #16
 8018e36:	ad32      	add	r5, sp, #200	; 0xc8
 8018e38:	f00c f914 	bl	8025064 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8018e3c:	2300      	movs	r3, #0
 8018e3e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8018e40:	f845 3dc4 	str.w	r3, [r5, #-196]!
 8018e44:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018e46:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8018e48:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8018e4a:	1ac0      	subs	r0, r0, r3
 8018e4c:	eba1 0102 	sub.w	r1, r1, r2
 8018e50:	d43c      	bmi.n	8018ecc <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xa4>
 8018e52:	2900      	cmp	r1, #0
 8018e54:	462a      	mov	r2, r5
 8018e56:	db33      	blt.n	8018ec0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x98>
 8018e58:	f7ff fe58 	bl	8018b0c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8018e5c:	f100 075a 	add.w	r7, r0, #90	; 0x5a
 8018e60:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8018e62:	a804      	add	r0, sp, #16
 8018e64:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8018e66:	f00c fac6 	bl	80253f6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8018e6a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8018e6c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8018e6e:	a804      	add	r0, sp, #16
 8018e70:	f00c fa50 	bl	8025314 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018e74:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018e78:	2b01      	cmp	r3, #1
 8018e7a:	d137      	bne.n	8018eec <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8018e7c:	6f26      	ldr	r6, [r4, #112]	; 0x70
 8018e7e:	2eb3      	cmp	r6, #179	; 0xb3
 8018e80:	dc34      	bgt.n	8018eec <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8018e82:	eba7 0906 	sub.w	r9, r7, r6
 8018e86:	4648      	mov	r0, r9
 8018e88:	f7ff fde8 	bl	8018a5c <_ZN8touchgfx7CWRUtil4sineEi>
 8018e8c:	a902      	add	r1, sp, #8
 8018e8e:	9002      	str	r0, [sp, #8]
 8018e90:	4628      	mov	r0, r5
 8018e92:	f7ff fdd7 	bl	8018a44 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018e96:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018e98:	eb00 0801 	add.w	r8, r0, r1
 8018e9c:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8018ea0:	f7ff fddc 	bl	8018a5c <_ZN8touchgfx7CWRUtil4sineEi>
 8018ea4:	a903      	add	r1, sp, #12
 8018ea6:	9003      	str	r0, [sp, #12]
 8018ea8:	4628      	mov	r0, r5
 8018eaa:	f7ff fdcb 	bl	8018a44 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018eae:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8018eb0:	4641      	mov	r1, r8
 8018eb2:	1a12      	subs	r2, r2, r0
 8018eb4:	a804      	add	r0, sp, #16
 8018eb6:	f00c fa2d 	bl	8025314 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018eba:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018ebc:	441e      	add	r6, r3
 8018ebe:	e7de      	b.n	8018e7e <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x56>
 8018ec0:	4249      	negs	r1, r1
 8018ec2:	f7ff fe23 	bl	8018b0c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8018ec6:	f1c0 075a 	rsb	r7, r0, #90	; 0x5a
 8018eca:	e7c9      	b.n	8018e60 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8018ecc:	2900      	cmp	r1, #0
 8018ece:	f1c0 0000 	rsb	r0, r0, #0
 8018ed2:	462a      	mov	r2, r5
 8018ed4:	db04      	blt.n	8018ee0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb8>
 8018ed6:	f7ff fe19 	bl	8018b0c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8018eda:	f5c0 7787 	rsb	r7, r0, #270	; 0x10e
 8018ede:	e7bf      	b.n	8018e60 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8018ee0:	4249      	negs	r1, r1
 8018ee2:	f7ff fe13 	bl	8018b0c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8018ee6:	f500 7787 	add.w	r7, r0, #270	; 0x10e
 8018eea:	e7b9      	b.n	8018e60 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8018eec:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8018eee:	a804      	add	r0, sp, #16
 8018ef0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8018ef2:	f00c fa0f 	bl	8025314 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018ef6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018ef8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8018efa:	a804      	add	r0, sp, #16
 8018efc:	f00c fa0a 	bl	8025314 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018f00:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018f04:	2b01      	cmp	r3, #1
 8018f06:	d123      	bne.n	8018f50 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 8018f08:	6f26      	ldr	r6, [r4, #112]	; 0x70
 8018f0a:	f1c6 06b4 	rsb	r6, r6, #180	; 0xb4
 8018f0e:	2e00      	cmp	r6, #0
 8018f10:	dd1e      	ble.n	8018f50 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 8018f12:	eb06 0907 	add.w	r9, r6, r7
 8018f16:	4648      	mov	r0, r9
 8018f18:	f7ff fda0 	bl	8018a5c <_ZN8touchgfx7CWRUtil4sineEi>
 8018f1c:	a902      	add	r1, sp, #8
 8018f1e:	9002      	str	r0, [sp, #8]
 8018f20:	4628      	mov	r0, r5
 8018f22:	f7ff fd8f 	bl	8018a44 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018f26:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018f28:	eb00 0801 	add.w	r8, r0, r1
 8018f2c:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8018f30:	f7ff fd94 	bl	8018a5c <_ZN8touchgfx7CWRUtil4sineEi>
 8018f34:	a903      	add	r1, sp, #12
 8018f36:	9003      	str	r0, [sp, #12]
 8018f38:	4628      	mov	r0, r5
 8018f3a:	f7ff fd83 	bl	8018a44 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018f3e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8018f40:	4641      	mov	r1, r8
 8018f42:	1a12      	subs	r2, r2, r0
 8018f44:	a804      	add	r0, sp, #16
 8018f46:	f00c f9e5 	bl	8025314 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018f4a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018f4c:	1af6      	subs	r6, r6, r3
 8018f4e:	e7de      	b.n	8018f0e <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xe6>
 8018f50:	a804      	add	r0, sp, #16
 8018f52:	f00c fb54 	bl	80255fe <_ZN8touchgfx6Canvas6renderEv>
 8018f56:	4604      	mov	r4, r0
 8018f58:	a804      	add	r0, sp, #16
 8018f5a:	f00c fb91 	bl	8025680 <_ZN8touchgfx6CanvasD1Ev>
 8018f5e:	4620      	mov	r0, r4
 8018f60:	b033      	add	sp, #204	; 0xcc
 8018f62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08018f66 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8018f66:	b570      	push	{r4, r5, r6, lr}
 8018f68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018f6c:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8018f6e:	4604      	mov	r4, r0
 8018f70:	429a      	cmp	r2, r3
 8018f72:	d00c      	beq.n	8018f8e <_ZN8touchgfx8TextArea13getTextHeightEv+0x28>
 8018f74:	f850 3b26 	ldr.w	r3, [r0], #38
 8018f78:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 8018f7a:	f7f7 ff4d 	bl	8010e18 <_ZNK8touchgfx9TypedText7getTextEv>
 8018f7e:	2300      	movs	r3, #0
 8018f80:	4601      	mov	r1, r0
 8018f82:	46ac      	mov	ip, r5
 8018f84:	4620      	mov	r0, r4
 8018f86:	461a      	mov	r2, r3
 8018f88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018f8c:	4760      	bx	ip
 8018f8e:	2000      	movs	r0, #0
 8018f90:	bd70      	pop	{r4, r5, r6, pc}

08018f92 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8018f92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018f94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018f98:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8018f9a:	429a      	cmp	r2, r3
 8018f9c:	d016      	beq.n	8018fcc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x3a>
 8018f9e:	f100 0426 	add.w	r4, r0, #38	; 0x26
 8018fa2:	4620      	mov	r0, r4
 8018fa4:	f7f6 fbb2 	bl	800f70c <_ZNK8touchgfx9TypedText7getFontEv>
 8018fa8:	6803      	ldr	r3, [r0, #0]
 8018faa:	4605      	mov	r5, r0
 8018fac:	4620      	mov	r0, r4
 8018fae:	69de      	ldr	r6, [r3, #28]
 8018fb0:	f7f6 fbc8 	bl	800f744 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8018fb4:	4607      	mov	r7, r0
 8018fb6:	4620      	mov	r0, r4
 8018fb8:	f7f7 ff2e 	bl	8010e18 <_ZNK8touchgfx9TypedText7getTextEv>
 8018fbc:	2300      	movs	r3, #0
 8018fbe:	4602      	mov	r2, r0
 8018fc0:	4639      	mov	r1, r7
 8018fc2:	9300      	str	r3, [sp, #0]
 8018fc4:	4628      	mov	r0, r5
 8018fc6:	47b0      	blx	r6
 8018fc8:	b003      	add	sp, #12
 8018fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018fcc:	2000      	movs	r0, #0
 8018fce:	e7fb      	b.n	8018fc8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x36>

08018fd0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8018fd0:	b40e      	push	{r1, r2, r3}
 8018fd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018fda:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8018fdc:	b09b      	sub	sp, #108	; 0x6c
 8018fde:	4604      	mov	r4, r0
 8018fe0:	429a      	cmp	r2, r3
 8018fe2:	d03f      	beq.n	8019064 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x94>
 8018fe4:	f100 0726 	add.w	r7, r0, #38	; 0x26
 8018fe8:	ab22      	add	r3, sp, #136	; 0x88
 8018fea:	4638      	mov	r0, r7
 8018fec:	9303      	str	r3, [sp, #12]
 8018fee:	f7f6 fb8d 	bl	800f70c <_ZNK8touchgfx9TypedText7getFontEv>
 8018ff2:	6803      	ldr	r3, [r0, #0]
 8018ff4:	4680      	mov	r8, r0
 8018ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018ff8:	4798      	blx	r3
 8018ffa:	4606      	mov	r6, r0
 8018ffc:	b205      	sxth	r5, r0
 8018ffe:	a804      	add	r0, sp, #16
 8019000:	f002 ff7e 	bl	801bf00 <_ZN8touchgfx12TextProviderC1Ev>
 8019004:	f8d8 3000 	ldr.w	r3, [r8]
 8019008:	4640      	mov	r0, r8
 801900a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801900c:	4798      	blx	r3
 801900e:	9a03      	ldr	r2, [sp, #12]
 8019010:	4603      	mov	r3, r0
 8019012:	9921      	ldr	r1, [sp, #132]	; 0x84
 8019014:	a804      	add	r0, sp, #16
 8019016:	f002 ff90 	bl	801bf3a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801901a:	4638      	mov	r0, r7
 801901c:	f7f6 fb92 	bl	800f744 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8019020:	4680      	mov	r8, r0
 8019022:	4638      	mov	r0, r7
 8019024:	f7f6 fb72 	bl	800f70c <_ZNK8touchgfx9TypedText7getFontEv>
 8019028:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801902c:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 8019030:	4642      	mov	r2, r8
 8019032:	9300      	str	r3, [sp, #0]
 8019034:	4603      	mov	r3, r0
 8019036:	a804      	add	r0, sp, #16
 8019038:	f001 f815 	bl	801a066 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801903c:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8019040:	b203      	sxth	r3, r0
 8019042:	18a9      	adds	r1, r5, r2
 8019044:	2900      	cmp	r1, #0
 8019046:	dd0b      	ble.n	8019060 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x90>
 8019048:	3b01      	subs	r3, #1
 801904a:	fb13 f302 	smulbb	r3, r3, r2
 801904e:	fb16 3300 	smlabb	r3, r6, r0, r3
 8019052:	b21d      	sxth	r5, r3
 8019054:	4628      	mov	r0, r5
 8019056:	b01b      	add	sp, #108	; 0x6c
 8019058:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801905c:	b003      	add	sp, #12
 801905e:	4770      	bx	lr
 8019060:	2b00      	cmp	r3, #0
 8019062:	dcf7      	bgt.n	8019054 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
 8019064:	2500      	movs	r5, #0
 8019066:	e7f5      	b.n	8019054 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>

08019068 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8019068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801906c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019070:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 8019072:	b08d      	sub	sp, #52	; 0x34
 8019074:	4604      	mov	r4, r0
 8019076:	429e      	cmp	r6, r3
 8019078:	4688      	mov	r8, r1
 801907a:	d04b      	beq.n	8019114 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 801907c:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8019080:	4628      	mov	r0, r5
 8019082:	f7f6 fb43 	bl	800f70c <_ZNK8touchgfx9TypedText7getFontEv>
 8019086:	4607      	mov	r7, r0
 8019088:	2800      	cmp	r0, #0
 801908a:	d043      	beq.n	8019114 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 801908c:	4628      	mov	r0, r5
 801908e:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 8019092:	f7f6 fb6f 	bl	800f774 <_ZNK8touchgfx9TypedText11assertValidEv>
 8019096:	4b21      	ldr	r3, [pc, #132]	; (801911c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb4>)
 8019098:	4628      	mov	r0, r5
 801909a:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 801909e:	681b      	ldr	r3, [r3, #0]
 80190a0:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 80190a4:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 80190a8:	785e      	ldrb	r6, [r3, #1]
 80190aa:	f7f6 fb4b 	bl	800f744 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80190ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80190b0:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 80190b4:	f3c6 0601 	ubfx	r6, r6, #0, #2
 80190b8:	9309      	str	r3, [sp, #36]	; 0x24
 80190ba:	4b19      	ldr	r3, [pc, #100]	; (8019120 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb8>)
 80190bc:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 80190c0:	681b      	ldr	r3, [r3, #0]
 80190c2:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 80190c6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80190ca:	9707      	str	r7, [sp, #28]
 80190cc:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 80190d0:	f88d 6020 	strb.w	r6, [sp, #32]
 80190d4:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 80190d8:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 80190dc:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 80190e0:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 80190e4:	b10a      	cbz	r2, 80190ea <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 80190e6:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 80190e8:	b906      	cbnz	r6, 80190ec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x84>
 80190ea:	689e      	ldr	r6, [r3, #8]
 80190ec:	af05      	add	r7, sp, #20
 80190ee:	4621      	mov	r1, r4
 80190f0:	4638      	mov	r0, r7
 80190f2:	f002 f864 	bl	801b1be <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80190f6:	4628      	mov	r0, r5
 80190f8:	f7f7 fe8e 	bl	8010e18 <_ZNK8touchgfx9TypedText7getTextEv>
 80190fc:	2300      	movs	r3, #0
 80190fe:	9001      	str	r0, [sp, #4]
 8019100:	4630      	mov	r0, r6
 8019102:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8019106:	ab07      	add	r3, sp, #28
 8019108:	9300      	str	r3, [sp, #0]
 801910a:	4643      	mov	r3, r8
 801910c:	e897 0006 	ldmia.w	r7, {r1, r2}
 8019110:	f000 fd76 	bl	8019c00 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8019114:	b00d      	add	sp, #52	; 0x34
 8019116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801911a:	bf00      	nop
 801911c:	2000c71c 	.word	0x2000c71c
 8019120:	2000c68c 	.word	0x2000c68c

08019124 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8019124:	b570      	push	{r4, r5, r6, lr}
 8019126:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801912a:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801912c:	4604      	mov	r4, r0
 801912e:	429a      	cmp	r2, r3
 8019130:	d021      	beq.n	8019176 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 8019132:	6803      	ldr	r3, [r0, #0]
 8019134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019136:	4798      	blx	r3
 8019138:	6823      	ldr	r3, [r4, #0]
 801913a:	4605      	mov	r5, r0
 801913c:	4620      	mov	r0, r4
 801913e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8019140:	4798      	blx	r3
 8019142:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8019146:	4606      	mov	r6, r0
 8019148:	b22d      	sxth	r5, r5
 801914a:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801914e:	6823      	ldr	r3, [r4, #0]
 8019150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019152:	d109      	bne.n	8019168 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 8019154:	4629      	mov	r1, r5
 8019156:	4620      	mov	r0, r4
 8019158:	4798      	blx	r3
 801915a:	6823      	ldr	r3, [r4, #0]
 801915c:	4631      	mov	r1, r6
 801915e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019160:	4620      	mov	r0, r4
 8019162:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019166:	4718      	bx	r3
 8019168:	4601      	mov	r1, r0
 801916a:	4620      	mov	r0, r4
 801916c:	4798      	blx	r3
 801916e:	6823      	ldr	r3, [r4, #0]
 8019170:	4629      	mov	r1, r5
 8019172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019174:	e7f4      	b.n	8019160 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 8019176:	bd70      	pop	{r4, r5, r6, pc}

08019178 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 8019178:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801917c:	84c1      	strh	r1, [r0, #38]	; 0x26
 801917e:	b922      	cbnz	r2, 801918a <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 8019180:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8019184:	b90b      	cbnz	r3, 801918a <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 8019186:	f7ff bfcd 	b.w	8019124 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801918a:	4770      	bx	lr

0801918c <_ZNK8touchgfx3Box12getSolidRectEv>:
 801918c:	2300      	movs	r3, #0
 801918e:	8003      	strh	r3, [r0, #0]
 8019190:	8043      	strh	r3, [r0, #2]
 8019192:	8083      	strh	r3, [r0, #4]
 8019194:	80c3      	strh	r3, [r0, #6]
 8019196:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801919a:	b91b      	cbnz	r3, 80191a4 <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 801919c:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 80191a0:	2bff      	cmp	r3, #255	; 0xff
 80191a2:	d103      	bne.n	80191ac <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 80191a4:	890b      	ldrh	r3, [r1, #8]
 80191a6:	8083      	strh	r3, [r0, #4]
 80191a8:	894b      	ldrh	r3, [r1, #10]
 80191aa:	80c3      	strh	r3, [r0, #6]
 80191ac:	4770      	bx	lr
	...

080191b0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80191b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80191b2:	4604      	mov	r4, r0
 80191b4:	466b      	mov	r3, sp
 80191b6:	6808      	ldr	r0, [r1, #0]
 80191b8:	6849      	ldr	r1, [r1, #4]
 80191ba:	c303      	stmia	r3!, {r0, r1}
 80191bc:	6823      	ldr	r3, [r4, #0]
 80191be:	4669      	mov	r1, sp
 80191c0:	4620      	mov	r0, r4
 80191c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191c4:	4798      	blx	r3
 80191c6:	4b08      	ldr	r3, [pc, #32]	; (80191e8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80191c8:	681b      	ldr	r3, [r3, #0]
 80191ca:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80191ce:	b10a      	cbz	r2, 80191d4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80191d0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80191d2:	b900      	cbnz	r0, 80191d6 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80191d4:	6898      	ldr	r0, [r3, #8]
 80191d6:	6803      	ldr	r3, [r0, #0]
 80191d8:	4669      	mov	r1, sp
 80191da:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80191dc:	69dd      	ldr	r5, [r3, #28]
 80191de:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80191e2:	47a8      	blx	r5
 80191e4:	b003      	add	sp, #12
 80191e6:	bd30      	pop	{r4, r5, pc}
 80191e8:	2000c68c 	.word	0x2000c68c

080191ec <_ZN8touchgfx10TiledImage9setOffsetEss>:
 80191ec:	b570      	push	{r4, r5, r6, lr}
 80191ee:	6803      	ldr	r3, [r0, #0]
 80191f0:	4604      	mov	r4, r0
 80191f2:	4615      	mov	r5, r2
 80191f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80191f6:	4798      	blx	r3
 80191f8:	6823      	ldr	r3, [r4, #0]
 80191fa:	4629      	mov	r1, r5
 80191fc:	4620      	mov	r0, r4
 80191fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019200:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019204:	4718      	bx	r3

08019206 <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
 8019206:	b570      	push	{r4, r5, r6, lr}
 8019208:	6803      	ldr	r3, [r0, #0]
 801920a:	4604      	mov	r4, r0
 801920c:	460e      	mov	r6, r1
 801920e:	4615      	mov	r5, r2
 8019210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019212:	4798      	blx	r3
 8019214:	8030      	strh	r0, [r6, #0]
 8019216:	6823      	ldr	r3, [r4, #0]
 8019218:	4620      	mov	r0, r4
 801921a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801921c:	4798      	blx	r3
 801921e:	8028      	strh	r0, [r5, #0]
 8019220:	bd70      	pop	{r4, r5, r6, pc}

08019222 <_ZN8touchgfx10TiledImage10getXOffsetEv>:
 8019222:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	; 0x2a
 8019226:	4770      	bx	lr

08019228 <_ZN8touchgfx10TiledImage10getYOffsetEv>:
 8019228:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 801922c:	4770      	bx	lr

0801922e <_ZN8touchgfx10TiledImageD1Ev>:
 801922e:	4770      	bx	lr

08019230 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
 8019230:	b510      	push	{r4, lr}
 8019232:	4604      	mov	r4, r0
 8019234:	f000 fa40 	bl	80196b8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8019238:	6823      	ldr	r3, [r4, #0]
 801923a:	4620      	mov	r0, r4
 801923c:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8019240:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
 8019244:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801924a:	4718      	bx	r3

0801924c <_ZN8touchgfx10TiledImage10setXOffsetEs>:
 801924c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801924e:	f100 0626 	add.w	r6, r0, #38	; 0x26
 8019252:	4605      	mov	r5, r0
 8019254:	8541      	strh	r1, [r0, #42]	; 0x2a
 8019256:	4630      	mov	r0, r6
 8019258:	f003 fd7e 	bl	801cd58 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801925c:	b1a0      	cbz	r0, 8019288 <_ZN8touchgfx10TiledImage10setXOffsetEs+0x3c>
 801925e:	f9b5 702a 	ldrsh.w	r7, [r5, #42]	; 0x2a
 8019262:	4630      	mov	r0, r6
 8019264:	f003 fd78 	bl	801cd58 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019268:	fb97 f4f0 	sdiv	r4, r7, r0
 801926c:	fb04 7410 	mls	r4, r4, r0, r7
 8019270:	4630      	mov	r0, r6
 8019272:	f003 fd71 	bl	801cd58 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019276:	4404      	add	r4, r0
 8019278:	4630      	mov	r0, r6
 801927a:	f003 fd6d 	bl	801cd58 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801927e:	fb94 f3f0 	sdiv	r3, r4, r0
 8019282:	fb03 4010 	mls	r0, r3, r0, r4
 8019286:	8568      	strh	r0, [r5, #42]	; 0x2a
 8019288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801928a <_ZN8touchgfx10TiledImage10setYOffsetEs>:
 801928a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801928c:	f100 0626 	add.w	r6, r0, #38	; 0x26
 8019290:	4605      	mov	r5, r0
 8019292:	8581      	strh	r1, [r0, #44]	; 0x2c
 8019294:	4630      	mov	r0, r6
 8019296:	f003 fd99 	bl	801cdcc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801929a:	b1a0      	cbz	r0, 80192c6 <_ZN8touchgfx10TiledImage10setYOffsetEs+0x3c>
 801929c:	f9b5 702c 	ldrsh.w	r7, [r5, #44]	; 0x2c
 80192a0:	4630      	mov	r0, r6
 80192a2:	f003 fd93 	bl	801cdcc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80192a6:	fb97 f4f0 	sdiv	r4, r7, r0
 80192aa:	fb04 7410 	mls	r4, r4, r0, r7
 80192ae:	4630      	mov	r0, r6
 80192b0:	f003 fd8c 	bl	801cdcc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80192b4:	4404      	add	r4, r0
 80192b6:	4630      	mov	r0, r6
 80192b8:	f003 fd88 	bl	801cdcc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80192bc:	fb94 f3f0 	sdiv	r3, r4, r0
 80192c0:	fb03 4010 	mls	r0, r3, r0, r4
 80192c4:	85a8      	strh	r0, [r5, #44]	; 0x2c
 80192c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080192c8 <_ZN8touchgfx10TiledImageD0Ev>:
 80192c8:	b510      	push	{r4, lr}
 80192ca:	4604      	mov	r4, r0
 80192cc:	2130      	movs	r1, #48	; 0x30
 80192ce:	f00d fa67 	bl	80267a0 <_ZdlPvj>
 80192d2:	4620      	mov	r0, r4
 80192d4:	bd10      	pop	{r4, pc}
	...

080192d8 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:
 80192d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192dc:	f100 0b26 	add.w	fp, r0, #38	; 0x26
 80192e0:	b093      	sub	sp, #76	; 0x4c
 80192e2:	4607      	mov	r7, r0
 80192e4:	460e      	mov	r6, r1
 80192e6:	4658      	mov	r0, fp
 80192e8:	f003 fd36 	bl	801cd58 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80192ec:	4605      	mov	r5, r0
 80192ee:	4658      	mov	r0, fp
 80192f0:	f003 fd6c 	bl	801cdcc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80192f4:	4680      	mov	r8, r0
 80192f6:	2d00      	cmp	r5, #0
 80192f8:	f000 80c5 	beq.w	8019486 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 80192fc:	2800      	cmp	r0, #0
 80192fe:	f000 80c2 	beq.w	8019486 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8019302:	2300      	movs	r3, #0
 8019304:	a90e      	add	r1, sp, #56	; 0x38
 8019306:	4638      	mov	r0, r7
 8019308:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 801930c:	683b      	ldr	r3, [r7, #0]
 801930e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019310:	4798      	blx	r3
 8019312:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8019316:	f9b6 3000 	ldrsh.w	r3, [r6]
 801931a:	88b1      	ldrh	r1, [r6, #4]
 801931c:	189c      	adds	r4, r3, r2
 801931e:	440b      	add	r3, r1
 8019320:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8019324:	fa02 f383 	sxtah	r3, r2, r3
 8019328:	3b01      	subs	r3, #1
 801932a:	fb93 f3f5 	sdiv	r3, r3, r5
 801932e:	fb94 f4f5 	sdiv	r4, r4, r5
 8019332:	fb13 f305 	smulbb	r3, r3, r5
 8019336:	fb14 f405 	smulbb	r4, r4, r5
 801933a:	b21b      	sxth	r3, r3
 801933c:	1aa4      	subs	r4, r4, r2
 801933e:	930b      	str	r3, [sp, #44]	; 0x2c
 8019340:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8019344:	b2a4      	uxth	r4, r4
 8019346:	185a      	adds	r2, r3, r1
 8019348:	fb92 f2f8 	sdiv	r2, r2, r8
 801934c:	fb12 f208 	smulbb	r2, r2, r8
 8019350:	1a52      	subs	r2, r2, r1
 8019352:	b212      	sxth	r2, r2
 8019354:	920c      	str	r2, [sp, #48]	; 0x30
 8019356:	88f2      	ldrh	r2, [r6, #6]
 8019358:	4413      	add	r3, r2
 801935a:	fa01 f383 	sxtah	r3, r1, r3
 801935e:	3b01      	subs	r3, #1
 8019360:	fb93 f3f8 	sdiv	r3, r3, r8
 8019364:	fb13 f308 	smulbb	r3, r3, r8
 8019368:	b21b      	sxth	r3, r3
 801936a:	930d      	str	r3, [sp, #52]	; 0x34
 801936c:	1963      	adds	r3, r4, r5
 801936e:	fa1f fa83 	uxth.w	sl, r3
 8019372:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019374:	b223      	sxth	r3, r4
 8019376:	4293      	cmp	r3, r2
 8019378:	9305      	str	r3, [sp, #20]
 801937a:	f300 8084 	bgt.w	8019486 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801937e:	fa0f f38a 	sxth.w	r3, sl
 8019382:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8019386:	9309      	str	r3, [sp, #36]	; 0x24
 8019388:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801938a:	4599      	cmp	r9, r3
 801938c:	dd04      	ble.n	8019398 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc0>
 801938e:	442c      	add	r4, r5
 8019390:	eb05 030a 	add.w	r3, r5, sl
 8019394:	b2a4      	uxth	r4, r4
 8019396:	e7ea      	b.n	801936e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x96>
 8019398:	f9b6 c000 	ldrsh.w	ip, [r6]
 801939c:	88b2      	ldrh	r2, [r6, #4]
 801939e:	4462      	add	r2, ip
 80193a0:	b292      	uxth	r2, r2
 80193a2:	b213      	sxth	r3, r2
 80193a4:	9308      	str	r3, [sp, #32]
 80193a6:	fa1f f389 	uxth.w	r3, r9
 80193aa:	eb08 0103 	add.w	r1, r8, r3
 80193ae:	9307      	str	r3, [sp, #28]
 80193b0:	b289      	uxth	r1, r1
 80193b2:	b208      	sxth	r0, r1
 80193b4:	9006      	str	r0, [sp, #24]
 80193b6:	9805      	ldr	r0, [sp, #20]
 80193b8:	4603      	mov	r3, r0
 80193ba:	9808      	ldr	r0, [sp, #32]
 80193bc:	4283      	cmp	r3, r0
 80193be:	da5e      	bge.n	801947e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80193c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80193c2:	4584      	cmp	ip, r0
 80193c4:	da5b      	bge.n	801947e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80193c6:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 80193ca:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 80193ce:	4486      	add	lr, r0
 80193d0:	fa1f fe8e 	uxth.w	lr, lr
 80193d4:	fa0f f38e 	sxth.w	r3, lr
 80193d8:	4599      	cmp	r9, r3
 80193da:	930a      	str	r3, [sp, #40]	; 0x28
 80193dc:	da4f      	bge.n	801947e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80193de:	9b06      	ldr	r3, [sp, #24]
 80193e0:	4298      	cmp	r0, r3
 80193e2:	da4c      	bge.n	801947e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80193e4:	9b05      	ldr	r3, [sp, #20]
 80193e6:	459c      	cmp	ip, r3
 80193e8:	bfb8      	it	lt
 80193ea:	469c      	movlt	ip, r3
 80193ec:	4548      	cmp	r0, r9
 80193ee:	9b08      	ldr	r3, [sp, #32]
 80193f0:	bfb8      	it	lt
 80193f2:	4648      	movlt	r0, r9
 80193f4:	f8ad c040 	strh.w	ip, [sp, #64]	; 0x40
 80193f8:	4699      	mov	r9, r3
 80193fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80193fc:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 8019400:	4599      	cmp	r9, r3
 8019402:	bfc8      	it	gt
 8019404:	4652      	movgt	r2, sl
 8019406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019408:	eba2 020c 	sub.w	r2, r2, ip
 801940c:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 8019410:	9a06      	ldr	r2, [sp, #24]
 8019412:	4293      	cmp	r3, r2
 8019414:	bfd8      	it	le
 8019416:	4671      	movle	r1, lr
 8019418:	1a09      	subs	r1, r1, r0
 801941a:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 801941e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8019422:	9b07      	ldr	r3, [sp, #28]
 8019424:	1b12      	subs	r2, r2, r4
 8019426:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801942a:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801942e:	1ad2      	subs	r2, r2, r3
 8019430:	4b16      	ldr	r3, [pc, #88]	; (801948c <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b4>)
 8019432:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 8019436:	681a      	ldr	r2, [r3, #0]
 8019438:	f892 1076 	ldrb.w	r1, [r2, #118]	; 0x76
 801943c:	b109      	cbz	r1, 8019442 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16a>
 801943e:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8019440:	b900      	cbnz	r0, 8019444 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16c>
 8019442:	6890      	ldr	r0, [r2, #8]
 8019444:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8019448:	f04f 0c01 	mov.w	ip, #1
 801944c:	9b07      	ldr	r3, [sp, #28]
 801944e:	6801      	ldr	r1, [r0, #0]
 8019450:	4413      	add	r3, r2
 8019452:	f8cd c008 	str.w	ip, [sp, #8]
 8019456:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801945a:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 801945e:	b21b      	sxth	r3, r3
 8019460:	4422      	add	r2, r4
 8019462:	f8cd c004 	str.w	ip, [sp, #4]
 8019466:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 801946a:	b212      	sxth	r2, r2
 801946c:	f8cd c000 	str.w	ip, [sp]
 8019470:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8019474:	4659      	mov	r1, fp
 8019476:	47c8      	blx	r9
 8019478:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801947c:	e784      	b.n	8019388 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xb0>
 801947e:	2300      	movs	r3, #0
 8019480:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 8019484:	e7cb      	b.n	801941e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x146>
 8019486:	b013      	add	sp, #76	; 0x4c
 8019488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801948c:	2000c68c 	.word	0x2000c68c

08019490 <_ZNK8touchgfx10TiledImage12getSolidRectEv>:
 8019490:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019494:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8019498:	4606      	mov	r6, r0
 801949a:	4689      	mov	r9, r1
 801949c:	2bff      	cmp	r3, #255	; 0xff
 801949e:	d008      	beq.n	80194b2 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
 80194a0:	2300      	movs	r3, #0
 80194a2:	8003      	strh	r3, [r0, #0]
 80194a4:	8043      	strh	r3, [r0, #2]
 80194a6:	8083      	strh	r3, [r0, #4]
 80194a8:	4630      	mov	r0, r6
 80194aa:	80f3      	strh	r3, [r6, #6]
 80194ac:	b003      	add	sp, #12
 80194ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194b2:	f101 0b26 	add.w	fp, r1, #38	; 0x26
 80194b6:	4668      	mov	r0, sp
 80194b8:	4659      	mov	r1, fp
 80194ba:	f003 fcc1 	bl	801ce40 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80194be:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 80194c2:	4658      	mov	r0, fp
 80194c4:	f9bd 7000 	ldrsh.w	r7, [sp]
 80194c8:	f9bd a002 	ldrsh.w	sl, [sp, #2]
 80194cc:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
 80194d0:	f003 fc42 	bl	801cd58 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80194d4:	4284      	cmp	r4, r0
 80194d6:	d10d      	bne.n	80194f4 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
 80194d8:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
 80194dc:	4658      	mov	r0, fp
 80194de:	f003 fc75 	bl	801cdcc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80194e2:	4580      	cmp	r8, r0
 80194e4:	d12a      	bne.n	801953c <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xac>
 80194e6:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
 80194ea:	8037      	strh	r7, [r6, #0]
 80194ec:	f8a6 a002 	strh.w	sl, [r6, #2]
 80194f0:	80b5      	strh	r5, [r6, #4]
 80194f2:	e7d9      	b.n	80194a8 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
 80194f4:	f8b9 502a 	ldrh.w	r5, [r9, #42]	; 0x2a
 80194f8:	4658      	mov	r0, fp
 80194fa:	f003 fc2d 	bl	801cd58 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80194fe:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 8019502:	1b7f      	subs	r7, r7, r5
 8019504:	b2a3      	uxth	r3, r4
 8019506:	b2bd      	uxth	r5, r7
 8019508:	b22f      	sxth	r7, r5
 801950a:	4428      	add	r0, r5
 801950c:	2f00      	cmp	r7, #0
 801950e:	b280      	uxth	r0, r0
 8019510:	bfb8      	it	lt
 8019512:	18ed      	addlt	r5, r5, r3
 8019514:	4403      	add	r3, r0
 8019516:	bfac      	ite	ge
 8019518:	4625      	movge	r5, r4
 801951a:	2700      	movlt	r7, #0
 801951c:	b29b      	uxth	r3, r3
 801951e:	bfb8      	it	lt
 8019520:	b22d      	sxthlt	r5, r5
 8019522:	b219      	sxth	r1, r3
 8019524:	bfb8      	it	lt
 8019526:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
 801952a:	4291      	cmp	r1, r2
 801952c:	bfc4      	itt	gt
 801952e:	1a9c      	subgt	r4, r3, r2
 8019530:	b224      	sxthgt	r4, r4
 8019532:	42ac      	cmp	r4, r5
 8019534:	bfc4      	itt	gt
 8019536:	b207      	sxthgt	r7, r0
 8019538:	4625      	movgt	r5, r4
 801953a:	e7cf      	b.n	80194dc <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
 801953c:	f8b9 402c 	ldrh.w	r4, [r9, #44]	; 0x2c
 8019540:	4658      	mov	r0, fp
 8019542:	f003 fc43 	bl	801cdcc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019546:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
 801954a:	ebaa 0404 	sub.w	r4, sl, r4
 801954e:	fa1f f288 	uxth.w	r2, r8
 8019552:	b2a4      	uxth	r4, r4
 8019554:	fa0f fa84 	sxth.w	sl, r4
 8019558:	4420      	add	r0, r4
 801955a:	f1ba 0f00 	cmp.w	sl, #0
 801955e:	b280      	uxth	r0, r0
 8019560:	bfb8      	it	lt
 8019562:	18a3      	addlt	r3, r4, r2
 8019564:	4402      	add	r2, r0
 8019566:	bfac      	ite	ge
 8019568:	4643      	movge	r3, r8
 801956a:	f04f 0a00 	movlt.w	sl, #0
 801956e:	b292      	uxth	r2, r2
 8019570:	bfb8      	it	lt
 8019572:	b21b      	sxthlt	r3, r3
 8019574:	b214      	sxth	r4, r2
 8019576:	bfb8      	it	lt
 8019578:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801957c:	428c      	cmp	r4, r1
 801957e:	bfc4      	itt	gt
 8019580:	eba2 0801 	subgt.w	r8, r2, r1
 8019584:	fa0f f888 	sxthgt.w	r8, r8
 8019588:	4543      	cmp	r3, r8
 801958a:	bfbc      	itt	lt
 801958c:	fa0f fa80 	sxthlt.w	sl, r0
 8019590:	4643      	movlt	r3, r8
 8019592:	e7aa      	b.n	80194ea <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>

08019594 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8019594:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8019598:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801959c:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801959e:	4604      	mov	r4, r0
 80195a0:	429a      	cmp	r2, r3
 80195a2:	d018      	beq.n	80195d6 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x42>
 80195a4:	f100 0526 	add.w	r5, r0, #38	; 0x26
 80195a8:	4628      	mov	r0, r5
 80195aa:	f7f6 f8af 	bl	800f70c <_ZNK8touchgfx9TypedText7getFontEv>
 80195ae:	6803      	ldr	r3, [r0, #0]
 80195b0:	4606      	mov	r6, r0
 80195b2:	4628      	mov	r0, r5
 80195b4:	69df      	ldr	r7, [r3, #28]
 80195b6:	f7f6 f8c5 	bl	800f744 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80195ba:	4680      	mov	r8, r0
 80195bc:	4628      	mov	r0, r5
 80195be:	f7f7 fc2b 	bl	8010e18 <_ZNK8touchgfx9TypedText7getTextEv>
 80195c2:	2300      	movs	r3, #0
 80195c4:	4602      	mov	r2, r0
 80195c6:	4641      	mov	r1, r8
 80195c8:	9300      	str	r3, [sp, #0]
 80195ca:	4630      	mov	r0, r6
 80195cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80195ce:	47b8      	blx	r7
 80195d0:	b002      	add	sp, #8
 80195d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195d6:	2000      	movs	r0, #0
 80195d8:	e7fa      	b.n	80195d0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x3c>

080195da <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 80195da:	b570      	push	{r4, r5, r6, lr}
 80195dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80195e0:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80195e2:	4604      	mov	r4, r0
 80195e4:	429a      	cmp	r2, r3
 80195e6:	d00c      	beq.n	8019602 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x28>
 80195e8:	f850 3b26 	ldr.w	r3, [r0], #38
 80195ec:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 80195ee:	f7f7 fc13 	bl	8010e18 <_ZNK8touchgfx9TypedText7getTextEv>
 80195f2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80195f4:	4601      	mov	r1, r0
 80195f6:	46ac      	mov	ip, r5
 80195f8:	4620      	mov	r0, r4
 80195fa:	2300      	movs	r3, #0
 80195fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019600:	4760      	bx	ip
 8019602:	2000      	movs	r0, #0
 8019604:	bd70      	pop	{r4, r5, r6, pc}
	...

08019608 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8019608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801960c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019610:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 8019612:	b08d      	sub	sp, #52	; 0x34
 8019614:	4604      	mov	r4, r0
 8019616:	429e      	cmp	r6, r3
 8019618:	460f      	mov	r7, r1
 801961a:	d048      	beq.n	80196ae <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 801961c:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8019620:	4628      	mov	r0, r5
 8019622:	f7f6 f873 	bl	800f70c <_ZNK8touchgfx9TypedText7getFontEv>
 8019626:	4680      	mov	r8, r0
 8019628:	2800      	cmp	r0, #0
 801962a:	d040      	beq.n	80196ae <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 801962c:	4628      	mov	r0, r5
 801962e:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 8019632:	f7f6 f89f 	bl	800f774 <_ZNK8touchgfx9TypedText11assertValidEv>
 8019636:	4b1f      	ldr	r3, [pc, #124]	; (80196b4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xac>)
 8019638:	4628      	mov	r0, r5
 801963a:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 801963e:	681b      	ldr	r3, [r3, #0]
 8019640:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 8019644:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8019648:	785e      	ldrb	r6, [r3, #1]
 801964a:	f7f6 f87b 	bl	800f744 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801964e:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8019652:	f3c6 0601 	ubfx	r6, r6, #0, #2
 8019656:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8019658:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 801965c:	f88d 6020 	strb.w	r6, [sp, #32]
 8019660:	ae05      	add	r6, sp, #20
 8019662:	9309      	str	r3, [sp, #36]	; 0x24
 8019664:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 8019668:	f8cd 801c 	str.w	r8, [sp, #28]
 801966c:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8019670:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8019674:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8019678:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 801967c:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8019680:	f7f6 fca2 	bl	800ffc8 <_ZN8touchgfx3HAL3lcdEv>
 8019684:	4621      	mov	r1, r4
 8019686:	4680      	mov	r8, r0
 8019688:	4630      	mov	r0, r6
 801968a:	f001 fd98 	bl	801b1be <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801968e:	4628      	mov	r0, r5
 8019690:	f7f7 fbc2 	bl	8010e18 <_ZNK8touchgfx9TypedText7getTextEv>
 8019694:	2300      	movs	r3, #0
 8019696:	9303      	str	r3, [sp, #12]
 8019698:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801969a:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801969e:	ab07      	add	r3, sp, #28
 80196a0:	4640      	mov	r0, r8
 80196a2:	9300      	str	r3, [sp, #0]
 80196a4:	463b      	mov	r3, r7
 80196a6:	e896 0006 	ldmia.w	r6, {r1, r2}
 80196aa:	f000 faa9 	bl	8019c00 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80196ae:	b00d      	add	sp, #52	; 0x34
 80196b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196b4:	2000c71c 	.word	0x2000c71c

080196b8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 80196b8:	b570      	push	{r4, r5, r6, lr}
 80196ba:	4605      	mov	r5, r0
 80196bc:	880b      	ldrh	r3, [r1, #0]
 80196be:	4604      	mov	r4, r0
 80196c0:	84c3      	strh	r3, [r0, #38]	; 0x26
 80196c2:	f855 3b26 	ldr.w	r3, [r5], #38
 80196c6:	4628      	mov	r0, r5
 80196c8:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 80196ca:	f003 fb45 	bl	801cd58 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80196ce:	b201      	sxth	r1, r0
 80196d0:	4620      	mov	r0, r4
 80196d2:	47b0      	blx	r6
 80196d4:	6823      	ldr	r3, [r4, #0]
 80196d6:	4628      	mov	r0, r5
 80196d8:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 80196da:	f003 fb77 	bl	801cdcc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80196de:	b201      	sxth	r1, r0
 80196e0:	4620      	mov	r0, r4
 80196e2:	47b0      	blx	r6
 80196e4:	4628      	mov	r0, r5
 80196e6:	f003 fc05 	bl	801cef4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80196ea:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 80196ee:	bd70      	pop	{r4, r5, r6, pc}

080196f0 <_ZNK8touchgfx5Image12getSolidRectEv>:
 80196f0:	b510      	push	{r4, lr}
 80196f2:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 80196f6:	4604      	mov	r4, r0
 80196f8:	2bff      	cmp	r3, #255	; 0xff
 80196fa:	d006      	beq.n	801970a <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 80196fc:	2300      	movs	r3, #0
 80196fe:	8003      	strh	r3, [r0, #0]
 8019700:	8043      	strh	r3, [r0, #2]
 8019702:	8083      	strh	r3, [r0, #4]
 8019704:	80c3      	strh	r3, [r0, #6]
 8019706:	4620      	mov	r0, r4
 8019708:	bd10      	pop	{r4, pc}
 801970a:	3126      	adds	r1, #38	; 0x26
 801970c:	f003 fb98 	bl	801ce40 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8019710:	e7f9      	b.n	8019706 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

08019714 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8019714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019718:	4604      	mov	r4, r0
 801971a:	b088      	sub	sp, #32
 801971c:	2500      	movs	r5, #0
 801971e:	460f      	mov	r7, r1
 8019720:	f854 3b26 	ldr.w	r3, [r4], #38
 8019724:	a904      	add	r1, sp, #16
 8019726:	4606      	mov	r6, r0
 8019728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801972a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801972e:	4798      	blx	r3
 8019730:	4620      	mov	r0, r4
 8019732:	f003 fb11 	bl	801cd58 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019736:	4680      	mov	r8, r0
 8019738:	4620      	mov	r0, r4
 801973a:	f003 fb47 	bl	801cdcc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801973e:	9506      	str	r5, [sp, #24]
 8019740:	ad06      	add	r5, sp, #24
 8019742:	f8ad 001e 	strh.w	r0, [sp, #30]
 8019746:	4639      	mov	r1, r7
 8019748:	f8ad 801c 	strh.w	r8, [sp, #28]
 801974c:	4628      	mov	r0, r5
 801974e:	f7fd fef5 	bl	801753c <_ZN8touchgfx4RectaNERKS0_>
 8019752:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8019756:	b1c3      	cbz	r3, 801978a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 8019758:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801975c:	b1ab      	cbz	r3, 801978a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 801975e:	4b0c      	ldr	r3, [pc, #48]	; (8019790 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7c>)
 8019760:	681b      	ldr	r3, [r3, #0]
 8019762:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019766:	b10a      	cbz	r2, 801976c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x58>
 8019768:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801976a:	b900      	cbnz	r0, 801976e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5a>
 801976c:	6898      	ldr	r0, [r3, #8]
 801976e:	2701      	movs	r7, #1
 8019770:	6801      	ldr	r1, [r0, #0]
 8019772:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8019776:	9702      	str	r7, [sp, #8]
 8019778:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 801977c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8019780:	e9cd 5600 	strd	r5, r6, [sp]
 8019784:	68cd      	ldr	r5, [r1, #12]
 8019786:	4621      	mov	r1, r4
 8019788:	47a8      	blx	r5
 801978a:	b008      	add	sp, #32
 801978c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019790:	2000c68c 	.word	0x2000c68c

08019794 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8019794:	4b02      	ldr	r3, [pc, #8]	; (80197a0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8019796:	6018      	str	r0, [r3, #0]
 8019798:	4b02      	ldr	r3, [pc, #8]	; (80197a4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 801979a:	6019      	str	r1, [r3, #0]
 801979c:	4770      	bx	lr
 801979e:	bf00      	nop
 80197a0:	2000c694 	.word	0x2000c694
 80197a4:	2000c6a8 	.word	0x2000c6a8

080197a8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 80197a8:	b538      	push	{r3, r4, r5, lr}
 80197aa:	4c2b      	ldr	r4, [pc, #172]	; (8019858 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 80197ac:	4b2b      	ldr	r3, [pc, #172]	; (801985c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 80197ae:	6821      	ldr	r1, [r4, #0]
 80197b0:	681a      	ldr	r2, [r3, #0]
 80197b2:	4281      	cmp	r1, r0
 80197b4:	4d2a      	ldr	r5, [pc, #168]	; (8019860 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 80197b6:	492b      	ldr	r1, [pc, #172]	; (8019864 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 80197b8:	d108      	bne.n	80197cc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 80197ba:	682b      	ldr	r3, [r5, #0]
 80197bc:	4293      	cmp	r3, r2
 80197be:	d105      	bne.n	80197cc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 80197c0:	6808      	ldr	r0, [r1, #0]
 80197c2:	280f      	cmp	r0, #15
 80197c4:	bf94      	ite	ls
 80197c6:	2000      	movls	r0, #0
 80197c8:	2001      	movhi	r0, #1
 80197ca:	bd38      	pop	{r3, r4, r5, pc}
 80197cc:	4b26      	ldr	r3, [pc, #152]	; (8019868 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 80197ce:	6020      	str	r0, [r4, #0]
 80197d0:	681b      	ldr	r3, [r3, #0]
 80197d2:	602a      	str	r2, [r5, #0]
 80197d4:	4298      	cmp	r0, r3
 80197d6:	d905      	bls.n	80197e4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 80197d8:	4b24      	ldr	r3, [pc, #144]	; (801986c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 80197da:	2137      	movs	r1, #55	; 0x37
 80197dc:	4a24      	ldr	r2, [pc, #144]	; (8019870 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 80197de:	4825      	ldr	r0, [pc, #148]	; (8019874 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 80197e0:	f00d f80c 	bl	80267fc <__assert_func>
 80197e4:	f010 0403 	ands.w	r4, r0, #3
 80197e8:	bf1f      	itttt	ne
 80197ea:	f1c4 0504 	rsbne	r5, r4, #4
 80197ee:	3b04      	subne	r3, #4
 80197f0:	1952      	addne	r2, r2, r5
 80197f2:	191b      	addne	r3, r3, r4
 80197f4:	4d20      	ldr	r5, [pc, #128]	; (8019878 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 80197f6:	4402      	add	r2, r0
 80197f8:	1a1b      	subs	r3, r3, r0
 80197fa:	3001      	adds	r0, #1
 80197fc:	602a      	str	r2, [r5, #0]
 80197fe:	f020 0401 	bic.w	r4, r0, #1
 8019802:	42a3      	cmp	r3, r4
 8019804:	d203      	bcs.n	801980e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 8019806:	4b19      	ldr	r3, [pc, #100]	; (801986c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8019808:	214a      	movs	r1, #74	; 0x4a
 801980a:	4a19      	ldr	r2, [pc, #100]	; (8019870 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801980c:	e7e7      	b.n	80197de <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801980e:	f010 0002 	ands.w	r0, r0, #2
 8019812:	bf1f      	itttt	ne
 8019814:	f1c0 0504 	rsbne	r5, r0, #4
 8019818:	1952      	addne	r2, r2, r5
 801981a:	1f05      	subne	r5, r0, #4
 801981c:	195b      	addne	r3, r3, r5
 801981e:	4422      	add	r2, r4
 8019820:	4d16      	ldr	r5, [pc, #88]	; (801987c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 8019822:	1b1b      	subs	r3, r3, r4
 8019824:	602a      	str	r2, [r5, #0]
 8019826:	429c      	cmp	r4, r3
 8019828:	d903      	bls.n	8019832 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 801982a:	4b10      	ldr	r3, [pc, #64]	; (801986c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801982c:	215d      	movs	r1, #93	; 0x5d
 801982e:	4a10      	ldr	r2, [pc, #64]	; (8019870 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8019830:	e7d5      	b.n	80197de <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8019832:	b120      	cbz	r0, 801983e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 8019834:	f1c0 0504 	rsb	r5, r0, #4
 8019838:	3804      	subs	r0, #4
 801983a:	442a      	add	r2, r5
 801983c:	4403      	add	r3, r0
 801983e:	1b1b      	subs	r3, r3, r4
 8019840:	4422      	add	r2, r4
 8019842:	480f      	ldr	r0, [pc, #60]	; (8019880 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 8019844:	2b0f      	cmp	r3, #15
 8019846:	600b      	str	r3, [r1, #0]
 8019848:	6002      	str	r2, [r0, #0]
 801984a:	d803      	bhi.n	8019854 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 801984c:	4b0d      	ldr	r3, [pc, #52]	; (8019884 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 801984e:	2170      	movs	r1, #112	; 0x70
 8019850:	4a07      	ldr	r2, [pc, #28]	; (8019870 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8019852:	e7c4      	b.n	80197de <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8019854:	2001      	movs	r0, #1
 8019856:	e7b8      	b.n	80197ca <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 8019858:	2000c69c 	.word	0x2000c69c
 801985c:	2000c694 	.word	0x2000c694
 8019860:	2000c6a4 	.word	0x2000c6a4
 8019864:	2000c6ac 	.word	0x2000c6ac
 8019868:	2000c6a8 	.word	0x2000c6a8
 801986c:	0802a064 	.word	0x0802a064
 8019870:	0802a12c 	.word	0x0802a12c
 8019874:	0802a09d 	.word	0x0802a09d
 8019878:	2000c6b0 	.word	0x2000c6b0
 801987c:	2000c6a0 	.word	0x2000c6a0
 8019880:	2000c698 	.word	0x2000c698
 8019884:	0802a0e7 	.word	0x0802a0e7

08019888 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 8019888:	4b04      	ldr	r3, [pc, #16]	; (801989c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 801988a:	6818      	ldr	r0, [r3, #0]
 801988c:	b120      	cbz	r0, 8019898 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 801988e:	4b04      	ldr	r3, [pc, #16]	; (80198a0 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 8019890:	6818      	ldr	r0, [r3, #0]
 8019892:	3000      	adds	r0, #0
 8019894:	bf18      	it	ne
 8019896:	2001      	movne	r0, #1
 8019898:	4770      	bx	lr
 801989a:	bf00      	nop
 801989c:	2000c694 	.word	0x2000c694
 80198a0:	2000c6a8 	.word	0x2000c6a8

080198a4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 80198a4:	4b01      	ldr	r3, [pc, #4]	; (80198ac <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 80198a6:	6818      	ldr	r0, [r3, #0]
 80198a8:	4770      	bx	lr
 80198aa:	bf00      	nop
 80198ac:	2000c69c 	.word	0x2000c69c

080198b0 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 80198b0:	4b01      	ldr	r3, [pc, #4]	; (80198b8 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 80198b2:	6818      	ldr	r0, [r3, #0]
 80198b4:	4770      	bx	lr
 80198b6:	bf00      	nop
 80198b8:	2000c6a4 	.word	0x2000c6a4

080198bc <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 80198bc:	4b01      	ldr	r3, [pc, #4]	; (80198c4 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 80198be:	6818      	ldr	r0, [r3, #0]
 80198c0:	4770      	bx	lr
 80198c2:	bf00      	nop
 80198c4:	2000c6b0 	.word	0x2000c6b0

080198c8 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 80198c8:	4b01      	ldr	r3, [pc, #4]	; (80198d0 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 80198ca:	6818      	ldr	r0, [r3, #0]
 80198cc:	4770      	bx	lr
 80198ce:	bf00      	nop
 80198d0:	2000c6a0 	.word	0x2000c6a0

080198d4 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 80198d4:	4b01      	ldr	r3, [pc, #4]	; (80198dc <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 80198d6:	6818      	ldr	r0, [r3, #0]
 80198d8:	4770      	bx	lr
 80198da:	bf00      	nop
 80198dc:	2000c698 	.word	0x2000c698

080198e0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 80198e0:	4b01      	ldr	r3, [pc, #4]	; (80198e8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 80198e2:	6818      	ldr	r0, [r3, #0]
 80198e4:	4770      	bx	lr
 80198e6:	bf00      	nop
 80198e8:	2000c6ac 	.word	0x2000c6ac

080198ec <_ZN8touchgfx3LCD4initEv>:
 80198ec:	4770      	bx	lr

080198ee <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80198ee:	2000      	movs	r0, #0
 80198f0:	4770      	bx	lr

080198f2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80198f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198f6:	b091      	sub	sp, #68	; 0x44
 80198f8:	4699      	mov	r9, r3
 80198fa:	4617      	mov	r7, r2
 80198fc:	2500      	movs	r5, #0
 80198fe:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 8019902:	4680      	mov	r8, r0
 8019904:	a80e      	add	r0, sp, #56	; 0x38
 8019906:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8019908:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 801990c:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 8019910:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8019914:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8019918:	910d      	str	r1, [sp, #52]	; 0x34
 801991a:	950e      	str	r5, [sp, #56]	; 0x38
 801991c:	f000 fe3a 	bl	801a594 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019920:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8019922:	f8d9 6000 	ldr.w	r6, [r9]
 8019926:	6818      	ldr	r0, [r3, #0]
 8019928:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801992a:	f9b4 b000 	ldrsh.w	fp, [r4]
 801992e:	1b80      	subs	r0, r0, r6
 8019930:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019934:	eb02 0c06 	add.w	ip, r2, r6
 8019938:	ebab 0e0c 	sub.w	lr, fp, ip
 801993c:	4570      	cmp	r0, lr
 801993e:	f340 80bc 	ble.w	8019aba <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8019942:	88a1      	ldrh	r1, [r4, #4]
 8019944:	4459      	add	r1, fp
 8019946:	b209      	sxth	r1, r1
 8019948:	458c      	cmp	ip, r1
 801994a:	f300 80b6 	bgt.w	8019aba <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801994e:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 8019952:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 8019956:	4283      	cmp	r3, r0
 8019958:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 801995c:	edd9 6a07 	vldr	s13, [r9, #28]
 8019960:	bfa8      	it	ge
 8019962:	4603      	movge	r3, r0
 8019964:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 8019968:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 801996c:	45e3      	cmp	fp, ip
 801996e:	ee07 3a90 	vmov	s15, r3
 8019972:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8019976:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801997a:	ee25 4a04 	vmul.f32	s8, s10, s8
 801997e:	ee65 4a24 	vmul.f32	s9, s10, s9
 8019982:	ee25 5a27 	vmul.f32	s10, s10, s15
 8019986:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801998a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801998e:	ee32 1a05 	vadd.f32	s2, s4, s10
 8019992:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8019996:	ee36 0a84 	vadd.f32	s0, s13, s8
 801999a:	ee61 1a87 	vmul.f32	s3, s3, s14
 801999e:	ee22 2a07 	vmul.f32	s4, s4, s14
 80199a2:	f340 808d 	ble.w	8019ac0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ce>
 80199a6:	fb9e f5f3 	sdiv	r5, lr, r3
 80199aa:	ee07 5a10 	vmov	s14, r5
 80199ae:	2d00      	cmp	r5, #0
 80199b0:	fb03 e415 	mls	r4, r3, r5, lr
 80199b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80199b8:	eea7 0a04 	vfma.f32	s0, s14, s8
 80199bc:	eee7 0a24 	vfma.f32	s1, s14, s9
 80199c0:	eea7 1a05 	vfma.f32	s2, s14, s10
 80199c4:	dd12      	ble.n	80199ec <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfa>
 80199c6:	ee70 6a44 	vsub.f32	s13, s0, s8
 80199ca:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80199ce:	ee31 2a45 	vsub.f32	s4, s2, s10
 80199d2:	eef5 6a40 	vcmp.f32	s13, #0.0
 80199d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199da:	bf14      	ite	ne
 80199dc:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80199e0:	eeb0 7a67 	vmoveq.f32	s14, s15
 80199e4:	ee61 1a87 	vmul.f32	s3, s3, s14
 80199e8:	ee22 2a07 	vmul.f32	s4, s4, s14
 80199ec:	fb05 f703 	mul.w	r7, r5, r3
 80199f0:	1bc0      	subs	r0, r0, r7
 80199f2:	443e      	add	r6, r7
 80199f4:	1997      	adds	r7, r2, r6
 80199f6:	4407      	add	r7, r0
 80199f8:	42b9      	cmp	r1, r7
 80199fa:	bfbc      	itt	lt
 80199fc:	1a88      	sublt	r0, r1, r2
 80199fe:	1b80      	sublt	r0, r0, r6
 8019a00:	2800      	cmp	r0, #0
 8019a02:	dd5a      	ble.n	8019aba <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8019a04:	fb90 f1f3 	sdiv	r1, r0, r3
 8019a08:	fb03 0211 	mls	r2, r3, r1, r0
 8019a0c:	b90a      	cbnz	r2, 8019a12 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x120>
 8019a0e:	3901      	subs	r1, #1
 8019a10:	461a      	mov	r2, r3
 8019a12:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8019a16:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 8019a1a:	44a4      	add	ip, r4
 8019a1c:	2900      	cmp	r1, #0
 8019a1e:	bfcc      	ite	gt
 8019a20:	469e      	movgt	lr, r3
 8019a22:	4696      	movle	lr, r2
 8019a24:	fb03 c505 	mla	r5, r3, r5, ip
 8019a28:	eef0 6a42 	vmov.f32	s13, s4
 8019a2c:	eeb0 7a61 	vmov.f32	s14, s3
 8019a30:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019a34:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8019a38:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8019a3c:	ee21 3a23 	vmul.f32	s6, s2, s7
 8019a40:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8019a44:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8019a48:	ee17 0a90 	vmov	r0, s15
 8019a4c:	ee73 7a42 	vsub.f32	s15, s6, s4
 8019a50:	fb90 f6f3 	sdiv	r6, r0, r3
 8019a54:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8019a58:	ee17 0a90 	vmov	r0, s15
 8019a5c:	fb90 f7f3 	sdiv	r7, r0, r3
 8019a60:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8019a64:	f8d0 8000 	ldr.w	r8, [r0]
 8019a68:	900c      	str	r0, [sp, #48]	; 0x30
 8019a6a:	981c      	ldr	r0, [sp, #112]	; 0x70
 8019a6c:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8019a70:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8019a74:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8019a78:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8019a7c:	f8cd a020 	str.w	sl, [sp, #32]
 8019a80:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 8019a84:	980d      	ldr	r0, [sp, #52]	; 0x34
 8019a86:	f8d9 9014 	ldr.w	r9, [r9, #20]
 8019a8a:	9603      	str	r6, [sp, #12]
 8019a8c:	44ca      	add	sl, r9
 8019a8e:	9506      	str	r5, [sp, #24]
 8019a90:	e9cd 7004 	strd	r7, r0, [sp, #16]
 8019a94:	ee16 0a90 	vmov	r0, s13
 8019a98:	f8cd a01c 	str.w	sl, [sp, #28]
 8019a9c:	fb07 0704 	mla	r7, r7, r4, r0
 8019aa0:	ee17 0a10 	vmov	r0, s14
 8019aa4:	fb06 0604 	mla	r6, r6, r4, r0
 8019aa8:	980c      	ldr	r0, [sp, #48]	; 0x30
 8019aaa:	9702      	str	r7, [sp, #8]
 8019aac:	e9cd 3600 	strd	r3, r6, [sp]
 8019ab0:	ebae 0304 	sub.w	r3, lr, r4
 8019ab4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8019ab8:	47a8      	blx	r5
 8019aba:	b011      	add	sp, #68	; 0x44
 8019abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ac0:	462c      	mov	r4, r5
 8019ac2:	e797      	b.n	80199f4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x102>

08019ac4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8019ac4:	b570      	push	{r4, r5, r6, lr}
 8019ac6:	4604      	mov	r4, r0
 8019ac8:	2500      	movs	r5, #0
 8019aca:	9804      	ldr	r0, [sp, #16]
 8019acc:	7223      	strb	r3, [r4, #8]
 8019ace:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8019ad2:	8025      	strh	r5, [r4, #0]
 8019ad4:	6061      	str	r1, [r4, #4]
 8019ad6:	7263      	strb	r3, [r4, #9]
 8019ad8:	60e0      	str	r0, [r4, #12]
 8019ada:	8222      	strh	r2, [r4, #16]
 8019adc:	8265      	strh	r5, [r4, #18]
 8019ade:	82a5      	strh	r5, [r4, #20]
 8019ae0:	82e5      	strh	r5, [r4, #22]
 8019ae2:	8325      	strh	r5, [r4, #24]
 8019ae4:	8365      	strh	r5, [r4, #26]
 8019ae6:	83a5      	strh	r5, [r4, #28]
 8019ae8:	77a5      	strb	r5, [r4, #30]
 8019aea:	6803      	ldr	r3, [r0, #0]
 8019aec:	695b      	ldr	r3, [r3, #20]
 8019aee:	4798      	blx	r3
 8019af0:	4606      	mov	r6, r0
 8019af2:	b1f8      	cbz	r0, 8019b34 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8019af4:	68e0      	ldr	r0, [r4, #12]
 8019af6:	4631      	mov	r1, r6
 8019af8:	6803      	ldr	r3, [r0, #0]
 8019afa:	68db      	ldr	r3, [r3, #12]
 8019afc:	4798      	blx	r3
 8019afe:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8019b02:	4605      	mov	r5, r0
 8019b04:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019b08:	7a83      	ldrb	r3, [r0, #10]
 8019b0a:	4313      	orrs	r3, r2
 8019b0c:	83a3      	strh	r3, [r4, #28]
 8019b0e:	7a63      	ldrb	r3, [r4, #9]
 8019b10:	2b04      	cmp	r3, #4
 8019b12:	d10f      	bne.n	8019b34 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8019b14:	68e0      	ldr	r0, [r4, #12]
 8019b16:	462a      	mov	r2, r5
 8019b18:	4631      	mov	r1, r6
 8019b1a:	6803      	ldr	r3, [r0, #0]
 8019b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019b1e:	4798      	blx	r3
 8019b20:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8019b24:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019b28:	7aab      	ldrb	r3, [r5, #10]
 8019b2a:	4313      	orrs	r3, r2
 8019b2c:	4418      	add	r0, r3
 8019b2e:	8ba3      	ldrh	r3, [r4, #28]
 8019b30:	4418      	add	r0, r3
 8019b32:	83a0      	strh	r0, [r4, #28]
 8019b34:	4620      	mov	r0, r4
 8019b36:	bd70      	pop	{r4, r5, r6, pc}

08019b38 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8019b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b3c:	2400      	movs	r4, #0
 8019b3e:	b085      	sub	sp, #20
 8019b40:	4681      	mov	r9, r0
 8019b42:	460f      	mov	r7, r1
 8019b44:	4692      	mov	sl, r2
 8019b46:	469b      	mov	fp, r3
 8019b48:	46a0      	mov	r8, r4
 8019b4a:	4626      	mov	r6, r4
 8019b4c:	4554      	cmp	r4, sl
 8019b4e:	da21      	bge.n	8019b94 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8019b50:	2300      	movs	r3, #0
 8019b52:	463a      	mov	r2, r7
 8019b54:	4659      	mov	r1, fp
 8019b56:	4648      	mov	r0, r9
 8019b58:	9303      	str	r3, [sp, #12]
 8019b5a:	ab03      	add	r3, sp, #12
 8019b5c:	f002 fb52 	bl	801c204 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019b60:	4605      	mov	r5, r0
 8019b62:	b1b8      	cbz	r0, 8019b94 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8019b64:	280a      	cmp	r0, #10
 8019b66:	d015      	beq.n	8019b94 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8019b68:	9a03      	ldr	r2, [sp, #12]
 8019b6a:	b182      	cbz	r2, 8019b8e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x56>
 8019b6c:	f992 000d 	ldrsb.w	r0, [r2, #13]
 8019b70:	4641      	mov	r1, r8
 8019b72:	7a93      	ldrb	r3, [r2, #10]
 8019b74:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8019b78:	8895      	ldrh	r5, [r2, #4]
 8019b7a:	4303      	orrs	r3, r0
 8019b7c:	4638      	mov	r0, r7
 8019b7e:	9301      	str	r3, [sp, #4]
 8019b80:	683b      	ldr	r3, [r7, #0]
 8019b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019b84:	4798      	blx	r3
 8019b86:	9b01      	ldr	r3, [sp, #4]
 8019b88:	4418      	add	r0, r3
 8019b8a:	4406      	add	r6, r0
 8019b8c:	b2b6      	uxth	r6, r6
 8019b8e:	3401      	adds	r4, #1
 8019b90:	46a8      	mov	r8, r5
 8019b92:	e7db      	b.n	8019b4c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x14>
 8019b94:	4630      	mov	r0, r6
 8019b96:	b005      	add	sp, #20
 8019b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019b9c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8019b9c:	2a02      	cmp	r2, #2
 8019b9e:	b530      	push	{r4, r5, lr}
 8019ba0:	d011      	beq.n	8019bc6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8019ba2:	2a03      	cmp	r2, #3
 8019ba4:	d01c      	beq.n	8019be0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8019ba6:	2a01      	cmp	r2, #1
 8019ba8:	d10c      	bne.n	8019bc4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8019baa:	888b      	ldrh	r3, [r1, #4]
 8019bac:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8019bb0:	8801      	ldrh	r1, [r0, #0]
 8019bb2:	1a9b      	subs	r3, r3, r2
 8019bb4:	8844      	ldrh	r4, [r0, #2]
 8019bb6:	1a5b      	subs	r3, r3, r1
 8019bb8:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8019bbc:	8004      	strh	r4, [r0, #0]
 8019bbe:	8043      	strh	r3, [r0, #2]
 8019bc0:	8081      	strh	r1, [r0, #4]
 8019bc2:	80c2      	strh	r2, [r0, #6]
 8019bc4:	bd30      	pop	{r4, r5, pc}
 8019bc6:	88cb      	ldrh	r3, [r1, #6]
 8019bc8:	88c2      	ldrh	r2, [r0, #6]
 8019bca:	1a9b      	subs	r3, r3, r2
 8019bcc:	8842      	ldrh	r2, [r0, #2]
 8019bce:	1a9b      	subs	r3, r3, r2
 8019bd0:	888a      	ldrh	r2, [r1, #4]
 8019bd2:	8881      	ldrh	r1, [r0, #4]
 8019bd4:	8043      	strh	r3, [r0, #2]
 8019bd6:	1a52      	subs	r2, r2, r1
 8019bd8:	8801      	ldrh	r1, [r0, #0]
 8019bda:	1a52      	subs	r2, r2, r1
 8019bdc:	8002      	strh	r2, [r0, #0]
 8019bde:	e7f1      	b.n	8019bc4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8019be0:	88cb      	ldrh	r3, [r1, #6]
 8019be2:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8019be6:	8841      	ldrh	r1, [r0, #2]
 8019be8:	1a9b      	subs	r3, r3, r2
 8019bea:	f9b0 5000 	ldrsh.w	r5, [r0]
 8019bee:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8019bf2:	1a5b      	subs	r3, r3, r1
 8019bf4:	8045      	strh	r5, [r0, #2]
 8019bf6:	8082      	strh	r2, [r0, #4]
 8019bf8:	8003      	strh	r3, [r0, #0]
 8019bfa:	80c4      	strh	r4, [r0, #6]
 8019bfc:	e7e2      	b.n	8019bc4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
	...

08019c00 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
 8019c00:	b570      	push	{r4, r5, r6, lr}
 8019c02:	b086      	sub	sp, #24
 8019c04:	ac02      	add	r4, sp, #8
 8019c06:	e884 0006 	stmia.w	r4, {r1, r2}
 8019c0a:	461a      	mov	r2, r3
 8019c0c:	ab0c      	add	r3, sp, #48	; 0x30
 8019c0e:	9305      	str	r3, [sp, #20]
 8019c10:	4b0a      	ldr	r3, [pc, #40]	; (8019c3c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz+0x3c>)
 8019c12:	685d      	ldr	r5, [r3, #4]
 8019c14:	1069      	asrs	r1, r5, #1
 8019c16:	07ed      	lsls	r5, r5, #31
 8019c18:	eb00 0601 	add.w	r6, r0, r1
 8019c1c:	bf46      	itte	mi
 8019c1e:	681b      	ldrmi	r3, [r3, #0]
 8019c20:	5841      	ldrmi	r1, [r0, r1]
 8019c22:	681d      	ldrpl	r5, [r3, #0]
 8019c24:	4630      	mov	r0, r6
 8019c26:	bf48      	it	mi
 8019c28:	58cd      	ldrmi	r5, [r1, r3]
 8019c2a:	4621      	mov	r1, r4
 8019c2c:	9b05      	ldr	r3, [sp, #20]
 8019c2e:	9301      	str	r3, [sp, #4]
 8019c30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019c32:	9300      	str	r3, [sp, #0]
 8019c34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019c36:	47a8      	blx	r5
 8019c38:	b006      	add	sp, #24
 8019c3a:	bd70      	pop	{r4, r5, r6, pc}
 8019c3c:	20000030 	.word	0x20000030

08019c40 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8019c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c44:	b09d      	sub	sp, #116	; 0x74
 8019c46:	9114      	str	r1, [sp, #80]	; 0x50
 8019c48:	9315      	str	r3, [sp, #84]	; 0x54
 8019c4a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8019c4c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019c4e:	8809      	ldrh	r1, [r1, #0]
 8019c50:	889b      	ldrh	r3, [r3, #4]
 8019c52:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8019c54:	440b      	add	r3, r1
 8019c56:	9210      	str	r2, [sp, #64]	; 0x40
 8019c58:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 8019c5c:	b21b      	sxth	r3, r3
 8019c5e:	900f      	str	r0, [sp, #60]	; 0x3c
 8019c60:	f89d b0a4 	ldrb.w	fp, [sp, #164]	; 0xa4
 8019c64:	930e      	str	r3, [sp, #56]	; 0x38
 8019c66:	6833      	ldr	r3, [r6, #0]
 8019c68:	7a59      	ldrb	r1, [r3, #9]
 8019c6a:	7a1b      	ldrb	r3, [r3, #8]
 8019c6c:	9113      	str	r1, [sp, #76]	; 0x4c
 8019c6e:	9312      	str	r3, [sp, #72]	; 0x48
 8019c70:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8019c72:	f9b3 4000 	ldrsh.w	r4, [r3]
 8019c76:	2a00      	cmp	r2, #0
 8019c78:	d059      	beq.n	8019d2e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xee>
 8019c7a:	7c33      	ldrb	r3, [r6, #16]
 8019c7c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8019c7e:	2b04      	cmp	r3, #4
 8019c80:	bf14      	ite	ne
 8019c82:	2301      	movne	r3, #1
 8019c84:	2302      	moveq	r3, #2
 8019c86:	4413      	add	r3, r2
 8019c88:	f04f 0800 	mov.w	r8, #0
 8019c8c:	930d      	str	r3, [sp, #52]	; 0x34
 8019c8e:	4645      	mov	r5, r8
 8019c90:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8019c94:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8019c98:	4293      	cmp	r3, r2
 8019c9a:	da75      	bge.n	8019d88 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x148>
 8019c9c:	2300      	movs	r3, #0
 8019c9e:	992b      	ldr	r1, [sp, #172]	; 0xac
 8019ca0:	6832      	ldr	r2, [r6, #0]
 8019ca2:	931a      	str	r3, [sp, #104]	; 0x68
 8019ca4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019ca6:	428b      	cmp	r3, r1
 8019ca8:	db43      	blt.n	8019d32 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf2>
 8019caa:	6813      	ldr	r3, [r2, #0]
 8019cac:	4610      	mov	r0, r2
 8019cae:	695b      	ldr	r3, [r3, #20]
 8019cb0:	4798      	blx	r3
 8019cb2:	4681      	mov	r9, r0
 8019cb4:	6830      	ldr	r0, [r6, #0]
 8019cb6:	aa1b      	add	r2, sp, #108	; 0x6c
 8019cb8:	4649      	mov	r1, r9
 8019cba:	6803      	ldr	r3, [r0, #0]
 8019cbc:	689f      	ldr	r7, [r3, #8]
 8019cbe:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8019cc2:	47b8      	blx	r7
 8019cc4:	901a      	str	r0, [sp, #104]	; 0x68
 8019cc6:	f64f 6aff 	movw	sl, #65279	; 0xfeff
 8019cca:	45d1      	cmp	r9, sl
 8019ccc:	d045      	beq.n	8019d5a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8019cce:	f242 070b 	movw	r7, #8203	; 0x200b
 8019cd2:	45b9      	cmp	r9, r7
 8019cd4:	d041      	beq.n	8019d5a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8019cd6:	f1b9 0f00 	cmp.w	r9, #0
 8019cda:	f000 80ee 	beq.w	8019eba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 8019cde:	f1b9 0f0a 	cmp.w	r9, #10
 8019ce2:	d057      	beq.n	8019d94 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8019ce4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8019ce6:	b383      	cbz	r3, 8019d4a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10a>
 8019ce8:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8019cec:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8019cee:	2a00      	cmp	r2, #0
 8019cf0:	f000 80d2 	beq.w	8019e98 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x258>
 8019cf4:	f1bb 0f00 	cmp.w	fp, #0
 8019cf8:	d100      	bne.n	8019cfc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xbc>
 8019cfa:	4444      	add	r4, r8
 8019cfc:	f992 800d 	ldrsb.w	r8, [r2, #13]
 8019d00:	f1bb 0f01 	cmp.w	fp, #1
 8019d04:	f408 7380 	and.w	r3, r8, #256	; 0x100
 8019d08:	f892 800a 	ldrb.w	r8, [r2, #10]
 8019d0c:	ea48 0803 	orr.w	r8, r8, r3
 8019d10:	d128      	bne.n	8019d64 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x124>
 8019d12:	eba4 0408 	sub.w	r4, r4, r8
 8019d16:	2d00      	cmp	r5, #0
 8019d18:	d143      	bne.n	8019da2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 8019d1a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019d1c:	eb08 0304 	add.w	r3, r8, r4
 8019d20:	4413      	add	r3, r2
 8019d22:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8019d24:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019d28:	4293      	cmp	r3, r2
 8019d2a:	da44      	bge.n	8019db6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8019d2c:	e02b      	b.n	8019d86 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x146>
 8019d2e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8019d30:	e7aa      	b.n	8019c88 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 8019d32:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8019d36:	4659      	mov	r1, fp
 8019d38:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8019d3a:	9301      	str	r3, [sp, #4]
 8019d3c:	ab1b      	add	r3, sp, #108	; 0x6c
 8019d3e:	9300      	str	r3, [sp, #0]
 8019d40:	ab1a      	add	r3, sp, #104	; 0x68
 8019d42:	f002 fa93 	bl	801c26c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8019d46:	4681      	mov	r9, r0
 8019d48:	e7bd      	b.n	8019cc6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8019d4a:	6830      	ldr	r0, [r6, #0]
 8019d4c:	6803      	ldr	r3, [r0, #0]
 8019d4e:	691b      	ldr	r3, [r3, #16]
 8019d50:	4798      	blx	r3
 8019d52:	4550      	cmp	r0, sl
 8019d54:	d001      	beq.n	8019d5a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8019d56:	42b8      	cmp	r0, r7
 8019d58:	d1c8      	bne.n	8019cec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8019d5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019d5c:	464d      	mov	r5, r9
 8019d5e:	3301      	adds	r3, #1
 8019d60:	930c      	str	r3, [sp, #48]	; 0x30
 8019d62:	e797      	b.n	8019c94 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x54>
 8019d64:	2d00      	cmp	r5, #0
 8019d66:	f000 80aa 	beq.w	8019ebe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27e>
 8019d6a:	f1bb 0f00 	cmp.w	fp, #0
 8019d6e:	d118      	bne.n	8019da2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 8019d70:	6830      	ldr	r0, [r6, #0]
 8019d72:	4629      	mov	r1, r5
 8019d74:	6803      	ldr	r3, [r0, #0]
 8019d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019d78:	4798      	blx	r3
 8019d7a:	4404      	add	r4, r0
 8019d7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019d7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019d80:	1ae3      	subs	r3, r4, r3
 8019d82:	4293      	cmp	r3, r2
 8019d84:	dd17      	ble.n	8019db6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8019d86:	464d      	mov	r5, r9
 8019d88:	2d00      	cmp	r5, #0
 8019d8a:	f000 8096 	beq.w	8019eba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 8019d8e:	2d0a      	cmp	r5, #10
 8019d90:	f040 8084 	bne.w	8019e9c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25c>
 8019d94:	250a      	movs	r5, #10
 8019d96:	fab5 f085 	clz	r0, r5
 8019d9a:	0940      	lsrs	r0, r0, #5
 8019d9c:	b01d      	add	sp, #116	; 0x74
 8019d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019da2:	6830      	ldr	r0, [r6, #0]
 8019da4:	4629      	mov	r1, r5
 8019da6:	6803      	ldr	r3, [r0, #0]
 8019da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019daa:	4798      	blx	r3
 8019dac:	f1bb 0f01 	cmp.w	fp, #1
 8019db0:	eba4 0400 	sub.w	r4, r4, r0
 8019db4:	d0b1      	beq.n	8019d1a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8019db6:	981a      	ldr	r0, [sp, #104]	; 0x68
 8019db8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019dba:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8019dbe:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019dc2:	7b43      	ldrb	r3, [r0, #13]
 8019dc4:	4421      	add	r1, r4
 8019dc6:	015b      	lsls	r3, r3, #5
 8019dc8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019dcc:	7983      	ldrb	r3, [r0, #6]
 8019dce:	4313      	orrs	r3, r2
 8019dd0:	440b      	add	r3, r1
 8019dd2:	42ab      	cmp	r3, r5
 8019dd4:	dbc1      	blt.n	8019d5a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8019dd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019dd8:	4299      	cmp	r1, r3
 8019dda:	dabe      	bge.n	8019d5a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8019ddc:	6830      	ldr	r0, [r6, #0]
 8019dde:	42a5      	cmp	r5, r4
 8019de0:	6803      	ldr	r3, [r0, #0]
 8019de2:	bfcc      	ite	gt
 8019de4:	1b2d      	subgt	r5, r5, r4
 8019de6:	2500      	movle	r5, #0
 8019de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019dea:	bfc8      	it	gt
 8019dec:	b2ad      	uxthgt	r5, r5
 8019dee:	4798      	blx	r3
 8019df0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8019df2:	4935      	ldr	r1, [pc, #212]	; (8019ec8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>)
 8019df4:	7b5a      	ldrb	r2, [r3, #13]
 8019df6:	f893 e008 	ldrb.w	lr, [r3, #8]
 8019dfa:	f012 0f40 	tst.w	r2, #64	; 0x40
 8019dfe:	bf18      	it	ne
 8019e00:	468c      	movne	ip, r1
 8019e02:	9915      	ldr	r1, [sp, #84]	; 0x54
 8019e04:	bf08      	it	eq
 8019e06:	f04f 0c00 	moveq.w	ip, #0
 8019e0a:	4408      	add	r0, r1
 8019e0c:	00d1      	lsls	r1, r2, #3
 8019e0e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8019e12:	ea41 070e 	orr.w	r7, r1, lr
 8019e16:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8019e18:	ea4c 0707 	orr.w	r7, ip, r7
 8019e1c:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8019e20:	1bc7      	subs	r7, r0, r7
 8019e22:	b2bf      	uxth	r7, r7
 8019e24:	fa0f fa87 	sxth.w	sl, r7
 8019e28:	4551      	cmp	r1, sl
 8019e2a:	dd33      	ble.n	8019e94 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x254>
 8019e2c:	0112      	lsls	r2, r2, #4
 8019e2e:	79d8      	ldrb	r0, [r3, #7]
 8019e30:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8019e34:	4302      	orrs	r2, r0
 8019e36:	4492      	add	sl, r2
 8019e38:	4551      	cmp	r1, sl
 8019e3a:	dc8e      	bgt.n	8019d5a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8019e3c:	1bcf      	subs	r7, r1, r7
 8019e3e:	468a      	mov	sl, r1
 8019e40:	b2bf      	uxth	r7, r7
 8019e42:	9317      	str	r3, [sp, #92]	; 0x5c
 8019e44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019e46:	6830      	ldr	r0, [r6, #0]
 8019e48:	681a      	ldr	r2, [r3, #0]
 8019e4a:	6801      	ldr	r1, [r0, #0]
 8019e4c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8019e4e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8019e50:	9311      	str	r3, [sp, #68]	; 0x44
 8019e52:	9216      	str	r2, [sp, #88]	; 0x58
 8019e54:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8019e56:	4788      	blx	r1
 8019e58:	79b1      	ldrb	r1, [r6, #6]
 8019e5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019e5c:	910b      	str	r1, [sp, #44]	; 0x2c
 8019e5e:	7bb1      	ldrb	r1, [r6, #14]
 8019e60:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019e62:	910a      	str	r1, [sp, #40]	; 0x28
 8019e64:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
 8019e68:	9109      	str	r1, [sp, #36]	; 0x24
 8019e6a:	68b1      	ldr	r1, [r6, #8]
 8019e6c:	9305      	str	r3, [sp, #20]
 8019e6e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019e70:	9206      	str	r2, [sp, #24]
 8019e72:	e9cd a501 	strd	sl, r5, [sp, #4]
 8019e76:	4425      	add	r5, r4
 8019e78:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8019e7c:	b22d      	sxth	r5, r5
 8019e7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019e80:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8019e84:	9500      	str	r5, [sp, #0]
 8019e86:	9914      	ldr	r1, [sp, #80]	; 0x50
 8019e88:	681a      	ldr	r2, [r3, #0]
 8019e8a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8019e8c:	685b      	ldr	r3, [r3, #4]
 8019e8e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8019e90:	47a8      	blx	r5
 8019e92:	e762      	b.n	8019d5a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8019e94:	2700      	movs	r7, #0
 8019e96:	e7d4      	b.n	8019e42 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x202>
 8019e98:	4690      	mov	r8, r2
 8019e9a:	e75e      	b.n	8019d5a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8019e9c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019e9e:	3401      	adds	r4, #1
 8019ea0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8019ea2:	429c      	cmp	r4, r3
 8019ea4:	f6bf af77 	bge.w	8019d96 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 8019ea8:	4659      	mov	r1, fp
 8019eaa:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8019eac:	f002 f96a 	bl	801c184 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019eb0:	4605      	mov	r5, r0
 8019eb2:	b110      	cbz	r0, 8019eba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 8019eb4:	280a      	cmp	r0, #10
 8019eb6:	d1f2      	bne.n	8019e9e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25e>
 8019eb8:	e76c      	b.n	8019d94 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8019eba:	2500      	movs	r5, #0
 8019ebc:	e76b      	b.n	8019d96 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 8019ebe:	f1bb 0f00 	cmp.w	fp, #0
 8019ec2:	f43f af5b 	beq.w	8019d7c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x13c>
 8019ec6:	e776      	b.n	8019db6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8019ec8:	fffffe00 	.word	0xfffffe00

08019ecc <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8019ecc:	b530      	push	{r4, r5, lr}
 8019ece:	8a44      	ldrh	r4, [r0, #18]
 8019ed0:	8ac5      	ldrh	r5, [r0, #22]
 8019ed2:	82c3      	strh	r3, [r0, #22]
 8019ed4:	442c      	add	r4, r5
 8019ed6:	1ae4      	subs	r4, r4, r3
 8019ed8:	8b03      	ldrh	r3, [r0, #24]
 8019eda:	8244      	strh	r4, [r0, #18]
 8019edc:	8a84      	ldrh	r4, [r0, #20]
 8019ede:	4422      	add	r2, r4
 8019ee0:	440c      	add	r4, r1
 8019ee2:	1a59      	subs	r1, r3, r1
 8019ee4:	8342      	strh	r2, [r0, #26]
 8019ee6:	8284      	strh	r4, [r0, #20]
 8019ee8:	8301      	strh	r1, [r0, #24]
 8019eea:	bd30      	pop	{r4, r5, pc}

08019eec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8019eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ef0:	7a45      	ldrb	r5, [r0, #9]
 8019ef2:	b085      	sub	sp, #20
 8019ef4:	4604      	mov	r4, r0
 8019ef6:	4689      	mov	r9, r1
 8019ef8:	1eeb      	subs	r3, r5, #3
 8019efa:	b2db      	uxtb	r3, r3
 8019efc:	b329      	cbz	r1, 8019f4a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 8019efe:	2b01      	cmp	r3, #1
 8019f00:	d921      	bls.n	8019f46 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5a>
 8019f02:	1e69      	subs	r1, r5, #1
 8019f04:	f1d1 0b00 	rsbs	fp, r1, #0
 8019f08:	eb4b 0b01 	adc.w	fp, fp, r1
 8019f0c:	1eaa      	subs	r2, r5, #2
 8019f0e:	2500      	movs	r5, #0
 8019f10:	4253      	negs	r3, r2
 8019f12:	9500      	str	r5, [sp, #0]
 8019f14:	4153      	adcs	r3, r2
 8019f16:	9301      	str	r3, [sp, #4]
 8019f18:	2600      	movs	r6, #0
 8019f1a:	f242 080b 	movw	r8, #8203	; 0x200b
 8019f1e:	8266      	strh	r6, [r4, #18]
 8019f20:	82a6      	strh	r6, [r4, #20]
 8019f22:	2300      	movs	r3, #0
 8019f24:	68e2      	ldr	r2, [r4, #12]
 8019f26:	7a21      	ldrb	r1, [r4, #8]
 8019f28:	9303      	str	r3, [sp, #12]
 8019f2a:	ab03      	add	r3, sp, #12
 8019f2c:	6860      	ldr	r0, [r4, #4]
 8019f2e:	8827      	ldrh	r7, [r4, #0]
 8019f30:	f002 f968 	bl	801c204 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019f34:	8020      	strh	r0, [r4, #0]
 8019f36:	b9b0      	cbnz	r0, 8019f66 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7a>
 8019f38:	8b22      	ldrh	r2, [r4, #24]
 8019f3a:	2300      	movs	r3, #0
 8019f3c:	4611      	mov	r1, r2
 8019f3e:	4620      	mov	r0, r4
 8019f40:	f7ff ffc4 	bl	8019ecc <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8019f44:	e062      	b.n	801a00c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 8019f46:	468b      	mov	fp, r1
 8019f48:	e7e0      	b.n	8019f0c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x20>
 8019f4a:	2b01      	cmp	r3, #1
 8019f4c:	f105 35ff 	add.w	r5, r5, #4294967295
 8019f50:	9101      	str	r1, [sp, #4]
 8019f52:	468b      	mov	fp, r1
 8019f54:	bf8c      	ite	hi
 8019f56:	2300      	movhi	r3, #0
 8019f58:	2301      	movls	r3, #1
 8019f5a:	2d01      	cmp	r5, #1
 8019f5c:	9300      	str	r3, [sp, #0]
 8019f5e:	bf8c      	ite	hi
 8019f60:	2500      	movhi	r5, #0
 8019f62:	2501      	movls	r5, #1
 8019f64:	e7d8      	b.n	8019f18 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x2c>
 8019f66:	8ae3      	ldrh	r3, [r4, #22]
 8019f68:	280a      	cmp	r0, #10
 8019f6a:	f103 0301 	add.w	r3, r3, #1
 8019f6e:	82e3      	strh	r3, [r4, #22]
 8019f70:	d0e2      	beq.n	8019f38 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 8019f72:	9a03      	ldr	r2, [sp, #12]
 8019f74:	b972      	cbnz	r2, 8019f94 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa8>
 8019f76:	4540      	cmp	r0, r8
 8019f78:	d1d3      	bne.n	8019f22 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8019f7a:	8823      	ldrh	r3, [r4, #0]
 8019f7c:	8b21      	ldrh	r1, [r4, #24]
 8019f7e:	2b20      	cmp	r3, #32
 8019f80:	d001      	beq.n	8019f86 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9a>
 8019f82:	4543      	cmp	r3, r8
 8019f84:	d11d      	bne.n	8019fc2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8019f86:	2f20      	cmp	r7, #32
 8019f88:	d002      	beq.n	8019f90 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8019f8a:	4547      	cmp	r7, r8
 8019f8c:	bf18      	it	ne
 8019f8e:	460e      	movne	r6, r1
 8019f90:	2001      	movs	r0, #1
 8019f92:	e017      	b.n	8019fc4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd8>
 8019f94:	4540      	cmp	r0, r8
 8019f96:	d012      	beq.n	8019fbe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd2>
 8019f98:	8893      	ldrh	r3, [r2, #4]
 8019f9a:	4639      	mov	r1, r7
 8019f9c:	8023      	strh	r3, [r4, #0]
 8019f9e:	f992 a00d 	ldrsb.w	sl, [r2, #13]
 8019fa2:	f40a 7080 	and.w	r0, sl, #256	; 0x100
 8019fa6:	f892 a00a 	ldrb.w	sl, [r2, #10]
 8019faa:	ea4a 0a00 	orr.w	sl, sl, r0
 8019fae:	68e0      	ldr	r0, [r4, #12]
 8019fb0:	6803      	ldr	r3, [r0, #0]
 8019fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019fb4:	4798      	blx	r3
 8019fb6:	eb0a 0200 	add.w	r2, sl, r0
 8019fba:	b292      	uxth	r2, r2
 8019fbc:	e7dd      	b.n	8019f7a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 8019fbe:	2200      	movs	r2, #0
 8019fc0:	e7db      	b.n	8019f7a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 8019fc2:	2000      	movs	r0, #0
 8019fc4:	440a      	add	r2, r1
 8019fc6:	8aa3      	ldrh	r3, [r4, #20]
 8019fc8:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8019fcc:	b292      	uxth	r2, r2
 8019fce:	8322      	strh	r2, [r4, #24]
 8019fd0:	4413      	add	r3, r2
 8019fd2:	f1b9 0f00 	cmp.w	r9, #0
 8019fd6:	d022      	beq.n	801a01e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x132>
 8019fd8:	f1bb 0f00 	cmp.w	fp, #0
 8019fdc:	d102      	bne.n	8019fe4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf8>
 8019fde:	9901      	ldr	r1, [sp, #4]
 8019fe0:	b149      	cbz	r1, 8019ff6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 8019fe2:	b140      	cbz	r0, 8019ff6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 8019fe4:	8ba1      	ldrh	r1, [r4, #28]
 8019fe6:	4419      	add	r1, r3
 8019fe8:	458c      	cmp	ip, r1
 8019fea:	da12      	bge.n	801a012 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 8019fec:	8a61      	ldrh	r1, [r4, #18]
 8019fee:	b181      	cbz	r1, 801a012 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 8019ff0:	4563      	cmp	r3, ip
 8019ff2:	dd96      	ble.n	8019f22 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8019ff4:	e004      	b.n	801a000 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x114>
 8019ff6:	4563      	cmp	r3, ip
 8019ff8:	dd93      	ble.n	8019f22 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8019ffa:	8a63      	ldrh	r3, [r4, #18]
 8019ffc:	2b00      	cmp	r3, #0
 8019ffe:	d090      	beq.n	8019f22 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801a000:	2301      	movs	r3, #1
 801a002:	8ba2      	ldrh	r2, [r4, #28]
 801a004:	77a3      	strb	r3, [r4, #30]
 801a006:	8b63      	ldrh	r3, [r4, #26]
 801a008:	4413      	add	r3, r2
 801a00a:	8363      	strh	r3, [r4, #26]
 801a00c:	b005      	add	sp, #20
 801a00e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a012:	2300      	movs	r3, #0
 801a014:	4611      	mov	r1, r2
 801a016:	4620      	mov	r0, r4
 801a018:	f7ff ff58 	bl	8019ecc <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801a01c:	e781      	b.n	8019f22 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801a01e:	4563      	cmp	r3, ip
 801a020:	dd16      	ble.n	801a050 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x164>
 801a022:	9b00      	ldr	r3, [sp, #0]
 801a024:	b113      	cbz	r3, 801a02c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801a026:	2301      	movs	r3, #1
 801a028:	460a      	mov	r2, r1
 801a02a:	e787      	b.n	8019f3c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 801a02c:	2d00      	cmp	r5, #0
 801a02e:	f43f af78 	beq.w	8019f22 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801a032:	2800      	cmp	r0, #0
 801a034:	f47f af75 	bne.w	8019f22 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801a038:	2f20      	cmp	r7, #32
 801a03a:	d001      	beq.n	801a040 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x154>
 801a03c:	4547      	cmp	r7, r8
 801a03e:	d102      	bne.n	801a046 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15a>
 801a040:	2301      	movs	r3, #1
 801a042:	4632      	mov	r2, r6
 801a044:	e77b      	b.n	8019f3e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 801a046:	8a63      	ldrh	r3, [r4, #18]
 801a048:	2b00      	cmp	r3, #0
 801a04a:	f43f af6a 	beq.w	8019f22 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801a04e:	e7dd      	b.n	801a00c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 801a050:	2800      	cmp	r0, #0
 801a052:	f47f af66 	bne.w	8019f22 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801a056:	2f20      	cmp	r7, #32
 801a058:	d002      	beq.n	801a060 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x174>
 801a05a:	4547      	cmp	r7, r8
 801a05c:	f47f af61 	bne.w	8019f22 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801a060:	2301      	movs	r3, #1
 801a062:	4632      	mov	r2, r6
 801a064:	e7d7      	b.n	801a016 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12a>

0801a066 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801a066:	b570      	push	{r4, r5, r6, lr}
 801a068:	4606      	mov	r6, r0
 801a06a:	b08a      	sub	sp, #40	; 0x28
 801a06c:	4615      	mov	r5, r2
 801a06e:	b191      	cbz	r1, 801a096 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 801a070:	2401      	movs	r4, #1
 801a072:	e9cd 3100 	strd	r3, r1, [sp]
 801a076:	4613      	mov	r3, r2
 801a078:	4601      	mov	r1, r0
 801a07a:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801a07e:	a802      	add	r0, sp, #8
 801a080:	f7ff fd20 	bl	8019ac4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801a084:	2100      	movs	r1, #0
 801a086:	a802      	add	r0, sp, #8
 801a088:	f7ff ff30 	bl	8019eec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801a08c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a090:	b173      	cbz	r3, 801a0b0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801a092:	3401      	adds	r4, #1
 801a094:	e7f6      	b.n	801a084 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 801a096:	2401      	movs	r4, #1
 801a098:	4611      	mov	r1, r2
 801a09a:	f002 f873 	bl	801c184 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a09e:	280a      	cmp	r0, #10
 801a0a0:	4629      	mov	r1, r5
 801a0a2:	4630      	mov	r0, r6
 801a0a4:	bf08      	it	eq
 801a0a6:	3401      	addeq	r4, #1
 801a0a8:	f002 f86c 	bl	801c184 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a0ac:	2800      	cmp	r0, #0
 801a0ae:	d1f6      	bne.n	801a09e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 801a0b0:	b2a0      	uxth	r0, r4
 801a0b2:	b00a      	add	sp, #40	; 0x28
 801a0b4:	bd70      	pop	{r4, r5, r6, pc}

0801a0b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801a0b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0ba:	b0db      	sub	sp, #364	; 0x16c
 801a0bc:	468a      	mov	sl, r1
 801a0be:	461c      	mov	r4, r3
 801a0c0:	f8dd b190 	ldr.w	fp, [sp, #400]	; 0x190
 801a0c4:	9009      	str	r0, [sp, #36]	; 0x24
 801a0c6:	f1bb 0f00 	cmp.w	fp, #0
 801a0ca:	f000 80c7 	beq.w	801a25c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801a0ce:	681b      	ldr	r3, [r3, #0]
 801a0d0:	2b00      	cmp	r3, #0
 801a0d2:	f000 80c3 	beq.w	801a25c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801a0d6:	7ba3      	ldrb	r3, [r4, #14]
 801a0d8:	2b00      	cmp	r3, #0
 801a0da:	f000 80bf 	beq.w	801a25c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801a0de:	af0c      	add	r7, sp, #48	; 0x30
 801a0e0:	6810      	ldr	r0, [r2, #0]
 801a0e2:	6851      	ldr	r1, [r2, #4]
 801a0e4:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 801a0e8:	463b      	mov	r3, r7
 801a0ea:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 801a0ee:	c303      	stmia	r3!, {r0, r1}
 801a0f0:	2100      	movs	r1, #0
 801a0f2:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 801a0f6:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 801a0fa:	4638      	mov	r0, r7
 801a0fc:	910e      	str	r1, [sp, #56]	; 0x38
 801a0fe:	a90e      	add	r1, sp, #56	; 0x38
 801a100:	79a2      	ldrb	r2, [r4, #6]
 801a102:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801a106:	f7ff fd49 	bl	8019b9c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801a10a:	a90e      	add	r1, sp, #56	; 0x38
 801a10c:	79a2      	ldrb	r2, [r4, #6]
 801a10e:	4608      	mov	r0, r1
 801a110:	f7ff fd44 	bl	8019b9c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801a114:	4648      	mov	r0, r9
 801a116:	f001 fef3 	bl	801bf00 <_ZN8touchgfx12TextProviderC1Ev>
 801a11a:	6820      	ldr	r0, [r4, #0]
 801a11c:	6803      	ldr	r3, [r0, #0]
 801a11e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a120:	4798      	blx	r3
 801a122:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801a124:	4603      	mov	r3, r0
 801a126:	4659      	mov	r1, fp
 801a128:	4648      	mov	r0, r9
 801a12a:	f001 ff06 	bl	801bf3a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801a12e:	a82e      	add	r0, sp, #184	; 0xb8
 801a130:	f001 fee6 	bl	801bf00 <_ZN8touchgfx12TextProviderC1Ev>
 801a134:	f894 8004 	ldrb.w	r8, [r4, #4]
 801a138:	f1b8 0f00 	cmp.w	r8, #0
 801a13c:	d009      	beq.n	801a152 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 801a13e:	6820      	ldr	r0, [r4, #0]
 801a140:	6803      	ldr	r3, [r0, #0]
 801a142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a144:	4798      	blx	r3
 801a146:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801a148:	4603      	mov	r3, r0
 801a14a:	4659      	mov	r1, fp
 801a14c:	a82e      	add	r0, sp, #184	; 0xb8
 801a14e:	f001 fef4 	bl	801bf3a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801a152:	6820      	ldr	r0, [r4, #0]
 801a154:	6803      	ldr	r3, [r0, #0]
 801a156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a158:	4798      	blx	r3
 801a15a:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a15e:	182e      	adds	r6, r5, r0
 801a160:	2e00      	cmp	r6, #0
 801a162:	dd45      	ble.n	801a1f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 801a164:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801a168:	4283      	cmp	r3, r0
 801a16a:	db41      	blt.n	801a1f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 801a16c:	441d      	add	r5, r3
 801a16e:	fb95 f5f6 	sdiv	r5, r5, r6
 801a172:	a844      	add	r0, sp, #272	; 0x110
 801a174:	f001 fec4 	bl	801bf00 <_ZN8touchgfx12TextProviderC1Ev>
 801a178:	7c23      	ldrb	r3, [r4, #16]
 801a17a:	b14b      	cbz	r3, 801a190 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xda>
 801a17c:	6820      	ldr	r0, [r4, #0]
 801a17e:	6803      	ldr	r3, [r0, #0]
 801a180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a182:	4798      	blx	r3
 801a184:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801a186:	4603      	mov	r3, r0
 801a188:	4659      	mov	r1, fp
 801a18a:	a844      	add	r0, sp, #272	; 0x110
 801a18c:	f001 fed5 	bl	801bf3a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801a190:	7c21      	ldrb	r1, [r4, #16]
 801a192:	a810      	add	r0, sp, #64	; 0x40
 801a194:	7963      	ldrb	r3, [r4, #5]
 801a196:	9101      	str	r1, [sp, #4]
 801a198:	6821      	ldr	r1, [r4, #0]
 801a19a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801a19e:	9100      	str	r1, [sp, #0]
 801a1a0:	a944      	add	r1, sp, #272	; 0x110
 801a1a2:	f7ff fc8f 	bl	8019ac4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801a1a6:	7c23      	ldrb	r3, [r4, #16]
 801a1a8:	bb23      	cbnz	r3, 801a1f4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13e>
 801a1aa:	fa1f fb86 	uxth.w	fp, r6
 801a1ae:	2d00      	cmp	r5, #0
 801a1b0:	dd57      	ble.n	801a262 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 801a1b2:	7961      	ldrb	r1, [r4, #5]
 801a1b4:	4648      	mov	r0, r9
 801a1b6:	f001 ffe5 	bl	801c184 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a1ba:	4603      	mov	r3, r0
 801a1bc:	f1b8 0f00 	cmp.w	r8, #0
 801a1c0:	d005      	beq.n	801a1ce <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x118>
 801a1c2:	9008      	str	r0, [sp, #32]
 801a1c4:	a82e      	add	r0, sp, #184	; 0xb8
 801a1c6:	7961      	ldrb	r1, [r4, #5]
 801a1c8:	f001 ffdc 	bl	801c184 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a1cc:	9b08      	ldr	r3, [sp, #32]
 801a1ce:	2b00      	cmp	r3, #0
 801a1d0:	d044      	beq.n	801a25c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801a1d2:	2b0a      	cmp	r3, #10
 801a1d4:	d1eb      	bne.n	801a1ae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 801a1d6:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801a1da:	3d01      	subs	r5, #1
 801a1dc:	445b      	add	r3, fp
 801a1de:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801a1e2:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801a1e6:	eba3 030b 	sub.w	r3, r3, fp
 801a1ea:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801a1ee:	e7de      	b.n	801a1ae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 801a1f0:	2500      	movs	r5, #0
 801a1f2:	e7be      	b.n	801a172 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xbc>
 801a1f4:	0073      	lsls	r3, r6, #1
 801a1f6:	9308      	str	r3, [sp, #32]
 801a1f8:	2d00      	cmp	r5, #0
 801a1fa:	dd32      	ble.n	801a262 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 801a1fc:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801a200:	a810      	add	r0, sp, #64	; 0x40
 801a202:	9b08      	ldr	r3, [sp, #32]
 801a204:	428b      	cmp	r3, r1
 801a206:	bfd4      	ite	le
 801a208:	2100      	movle	r1, #0
 801a20a:	2101      	movgt	r1, #1
 801a20c:	f7ff fe6e 	bl	8019eec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801a210:	f8bd b052 	ldrh.w	fp, [sp, #82]	; 0x52
 801a214:	f10b 33ff 	add.w	r3, fp, #4294967295
 801a218:	fa1f fb83 	uxth.w	fp, r3
 801a21c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a220:	459b      	cmp	fp, r3
 801a222:	d00b      	beq.n	801a23c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801a224:	7961      	ldrb	r1, [r4, #5]
 801a226:	4648      	mov	r0, r9
 801a228:	f001 ffac 	bl	801c184 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a22c:	f1b8 0f00 	cmp.w	r8, #0
 801a230:	d0f0      	beq.n	801a214 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 801a232:	7961      	ldrb	r1, [r4, #5]
 801a234:	a82e      	add	r0, sp, #184	; 0xb8
 801a236:	f001 ffa5 	bl	801c184 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a23a:	e7eb      	b.n	801a214 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 801a23c:	b2b3      	uxth	r3, r6
 801a23e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801a242:	3d01      	subs	r5, #1
 801a244:	441a      	add	r2, r3
 801a246:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 801a24a:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801a24e:	1ad3      	subs	r3, r2, r3
 801a250:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801a254:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801a258:	2b00      	cmp	r3, #0
 801a25a:	d1cd      	bne.n	801a1f8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 801a25c:	b05b      	add	sp, #364	; 0x16c
 801a25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a262:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 801a266:	f10d 052e 	add.w	r5, sp, #46	; 0x2e
 801a26a:	7c23      	ldrb	r3, [r4, #16]
 801a26c:	2b00      	cmp	r3, #0
 801a26e:	d05f      	beq.n	801a330 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x27a>
 801a270:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801a274:	a810      	add	r0, sp, #64	; 0x40
 801a276:	458b      	cmp	fp, r1
 801a278:	bfd4      	ite	le
 801a27a:	2100      	movle	r1, #0
 801a27c:	2101      	movgt	r1, #1
 801a27e:	f7ff fe35 	bl	8019eec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801a282:	f1b8 0f00 	cmp.w	r8, #0
 801a286:	d04c      	beq.n	801a322 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801a288:	7c23      	ldrb	r3, [r4, #16]
 801a28a:	2b00      	cmp	r3, #0
 801a28c:	d053      	beq.n	801a336 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x280>
 801a28e:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 801a292:	7922      	ldrb	r2, [r4, #4]
 801a294:	2a01      	cmp	r2, #1
 801a296:	d13c      	bne.n	801a312 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801a298:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 801a29c:	1ac0      	subs	r0, r0, r3
 801a29e:	2302      	movs	r3, #2
 801a2a0:	fb90 f0f3 	sdiv	r0, r0, r3
 801a2a4:	b200      	sxth	r0, r0
 801a2a6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801a2aa:	4418      	add	r0, r3
 801a2ac:	7c23      	ldrb	r3, [r4, #16]
 801a2ae:	8028      	strh	r0, [r5, #0]
 801a2b0:	2b00      	cmp	r3, #0
 801a2b2:	d03a      	beq.n	801a32a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x274>
 801a2b4:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 801a2b8:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 801a2bc:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801a2c0:	f8cd 9010 	str.w	r9, [sp, #16]
 801a2c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a2c6:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801a2ca:	2200      	movs	r2, #0
 801a2cc:	2100      	movs	r1, #0
 801a2ce:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801a2d2:	e9cd 5700 	strd	r5, r7, [sp]
 801a2d6:	4652      	mov	r2, sl
 801a2d8:	f7ff fcb2 	bl	8019c40 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801a2dc:	2800      	cmp	r0, #0
 801a2de:	d1bd      	bne.n	801a25c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801a2e0:	b2b2      	uxth	r2, r6
 801a2e2:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801a2e6:	4611      	mov	r1, r2
 801a2e8:	4413      	add	r3, r2
 801a2ea:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801a2ee:	b21b      	sxth	r3, r3
 801a2f0:	1a52      	subs	r2, r2, r1
 801a2f2:	7c21      	ldrb	r1, [r4, #16]
 801a2f4:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801a2f8:	b212      	sxth	r2, r2
 801a2fa:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801a2fe:	b109      	cbz	r1, 801a304 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 801a300:	42b2      	cmp	r2, r6
 801a302:	dbab      	blt.n	801a25c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801a304:	887a      	ldrh	r2, [r7, #2]
 801a306:	88f9      	ldrh	r1, [r7, #6]
 801a308:	440a      	add	r2, r1
 801a30a:	b212      	sxth	r2, r2
 801a30c:	4293      	cmp	r3, r2
 801a30e:	ddac      	ble.n	801a26a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 801a310:	e7a4      	b.n	801a25c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801a312:	2a02      	cmp	r2, #2
 801a314:	d107      	bne.n	801a326 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 801a316:	7be2      	ldrb	r2, [r4, #15]
 801a318:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 801a31c:	1a80      	subs	r0, r0, r2
 801a31e:	1ac0      	subs	r0, r0, r3
 801a320:	e7c0      	b.n	801a2a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 801a322:	7be0      	ldrb	r0, [r4, #15]
 801a324:	e7bf      	b.n	801a2a6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 801a326:	2000      	movs	r0, #0
 801a328:	e7bd      	b.n	801a2a6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 801a32a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a32e:	e7c3      	b.n	801a2b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x202>
 801a330:	f1b8 0f00 	cmp.w	r8, #0
 801a334:	d0f5      	beq.n	801a322 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801a336:	2300      	movs	r3, #0
 801a338:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a33c:	6821      	ldr	r1, [r4, #0]
 801a33e:	a82e      	add	r0, sp, #184	; 0xb8
 801a340:	f7ff fbfa 	bl	8019b38 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801a344:	b203      	sxth	r3, r0
 801a346:	e7a4      	b.n	801a292 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>

0801a348 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801a348:	2b02      	cmp	r3, #2
 801a34a:	b510      	push	{r4, lr}
 801a34c:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a350:	d00b      	beq.n	801a36a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801a352:	2b03      	cmp	r3, #3
 801a354:	d00e      	beq.n	801a374 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801a356:	2b01      	cmp	r3, #1
 801a358:	d001      	beq.n	801a35e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801a35a:	1860      	adds	r0, r4, r1
 801a35c:	bd10      	pop	{r4, pc}
 801a35e:	8880      	ldrh	r0, [r0, #4]
 801a360:	4420      	add	r0, r4
 801a362:	b200      	sxth	r0, r0
 801a364:	1a80      	subs	r0, r0, r2
 801a366:	3801      	subs	r0, #1
 801a368:	e7f8      	b.n	801a35c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801a36a:	8880      	ldrh	r0, [r0, #4]
 801a36c:	4420      	add	r0, r4
 801a36e:	b200      	sxth	r0, r0
 801a370:	1a40      	subs	r0, r0, r1
 801a372:	e7f8      	b.n	801a366 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801a374:	18a0      	adds	r0, r4, r2
 801a376:	e7f1      	b.n	801a35c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801a378 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801a378:	2b02      	cmp	r3, #2
 801a37a:	b510      	push	{r4, lr}
 801a37c:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801a380:	d006      	beq.n	801a390 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801a382:	2b03      	cmp	r3, #3
 801a384:	d00a      	beq.n	801a39c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801a386:	2b01      	cmp	r3, #1
 801a388:	bf14      	ite	ne
 801a38a:	18a0      	addne	r0, r4, r2
 801a38c:	1860      	addeq	r0, r4, r1
 801a38e:	bd10      	pop	{r4, pc}
 801a390:	88c0      	ldrh	r0, [r0, #6]
 801a392:	4420      	add	r0, r4
 801a394:	b200      	sxth	r0, r0
 801a396:	1a80      	subs	r0, r0, r2
 801a398:	3801      	subs	r0, #1
 801a39a:	e7f8      	b.n	801a38e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801a39c:	88c0      	ldrh	r0, [r0, #6]
 801a39e:	4420      	add	r0, r4
 801a3a0:	b200      	sxth	r0, r0
 801a3a2:	1a40      	subs	r0, r0, r1
 801a3a4:	e7f8      	b.n	801a398 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0801a3a8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801a3a8:	4b01      	ldr	r3, [pc, #4]	; (801a3b0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801a3aa:	2200      	movs	r2, #0
 801a3ac:	601a      	str	r2, [r3, #0]
 801a3ae:	4770      	bx	lr
 801a3b0:	2000c6b4 	.word	0x2000c6b4

0801a3b4 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 801a3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a3b6:	1e05      	subs	r5, r0, #0
 801a3b8:	f04f 0601 	mov.w	r6, #1
 801a3bc:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801a3c0:	bfba      	itte	lt
 801a3c2:	f04f 37ff 	movlt.w	r7, #4294967295
 801a3c6:	426d      	neglt	r5, r5
 801a3c8:	2701      	movge	r7, #1
 801a3ca:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 801a3ce:	f1be 0f00 	cmp.w	lr, #0
 801a3d2:	bfbc      	itt	lt
 801a3d4:	f1ce 0e00 	rsblt	lr, lr, #0
 801a3d8:	427f      	neglt	r7, r7
 801a3da:	2c00      	cmp	r4, #0
 801a3dc:	fa4e f001 	asr.w	r0, lr, r1
 801a3e0:	fa06 f101 	lsl.w	r1, r6, r1
 801a3e4:	bfbc      	itt	lt
 801a3e6:	4264      	neglt	r4, r4
 801a3e8:	427f      	neglt	r7, r7
 801a3ea:	3901      	subs	r1, #1
 801a3ec:	ea01 010e 	and.w	r1, r1, lr
 801a3f0:	434d      	muls	r5, r1
 801a3f2:	f8dc 1000 	ldr.w	r1, [ip]
 801a3f6:	fb03 1300 	mla	r3, r3, r0, r1
 801a3fa:	fb95 f1f4 	sdiv	r1, r5, r4
 801a3fe:	fb04 5511 	mls	r5, r4, r1, r5
 801a402:	441d      	add	r5, r3
 801a404:	fb95 f3f4 	sdiv	r3, r5, r4
 801a408:	4419      	add	r1, r3
 801a40a:	fb04 5413 	mls	r4, r4, r3, r5
 801a40e:	fb02 1000 	mla	r0, r2, r0, r1
 801a412:	f8cc 4000 	str.w	r4, [ip]
 801a416:	4378      	muls	r0, r7
 801a418:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801a41c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801a41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a420:	4c24      	ldr	r4, [pc, #144]	; (801a4b4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 801a422:	b086      	sub	sp, #24
 801a424:	4605      	mov	r5, r0
 801a426:	6807      	ldr	r7, [r0, #0]
 801a428:	69a3      	ldr	r3, [r4, #24]
 801a42a:	b92b      	cbnz	r3, 801a438 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 801a42c:	6840      	ldr	r0, [r0, #4]
 801a42e:	e9c5 7000 	strd	r7, r0, [r5]
 801a432:	b006      	add	sp, #24
 801a434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a438:	f04f 0802 	mov.w	r8, #2
 801a43c:	68a2      	ldr	r2, [r4, #8]
 801a43e:	ae06      	add	r6, sp, #24
 801a440:	6820      	ldr	r0, [r4, #0]
 801a442:	fb93 f1f8 	sdiv	r1, r3, r8
 801a446:	440a      	add	r2, r1
 801a448:	69e1      	ldr	r1, [r4, #28]
 801a44a:	f846 2d04 	str.w	r2, [r6, #-4]!
 801a44e:	9700      	str	r7, [sp, #0]
 801a450:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801a452:	e9cd 3601 	strd	r3, r6, [sp, #4]
 801a456:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801a458:	f7ff ffac 	bl	801a3b4 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801a45c:	69a3      	ldr	r3, [r4, #24]
 801a45e:	4607      	mov	r7, r0
 801a460:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801a462:	9301      	str	r3, [sp, #4]
 801a464:	686b      	ldr	r3, [r5, #4]
 801a466:	6a21      	ldr	r1, [r4, #32]
 801a468:	9300      	str	r3, [sp, #0]
 801a46a:	9602      	str	r6, [sp, #8]
 801a46c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a46e:	6860      	ldr	r0, [r4, #4]
 801a470:	f7ff ffa0 	bl	801a3b4 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801a474:	69a2      	ldr	r2, [r4, #24]
 801a476:	6963      	ldr	r3, [r4, #20]
 801a478:	4407      	add	r7, r0
 801a47a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a47c:	68e0      	ldr	r0, [r4, #12]
 801a47e:	fb92 f8f8 	sdiv	r8, r2, r8
 801a482:	4443      	add	r3, r8
 801a484:	9305      	str	r3, [sp, #20]
 801a486:	682b      	ldr	r3, [r5, #0]
 801a488:	e9cd 2601 	strd	r2, r6, [sp, #4]
 801a48c:	9300      	str	r3, [sp, #0]
 801a48e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801a490:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801a492:	f7ff ff8f 	bl	801a3b4 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801a496:	69a3      	ldr	r3, [r4, #24]
 801a498:	4680      	mov	r8, r0
 801a49a:	9602      	str	r6, [sp, #8]
 801a49c:	9301      	str	r3, [sp, #4]
 801a49e:	686b      	ldr	r3, [r5, #4]
 801a4a0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801a4a2:	9300      	str	r3, [sp, #0]
 801a4a4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801a4a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801a4a8:	6920      	ldr	r0, [r4, #16]
 801a4aa:	f7ff ff83 	bl	801a3b4 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801a4ae:	4440      	add	r0, r8
 801a4b0:	e7bd      	b.n	801a42e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 801a4b2:	bf00      	nop
 801a4b4:	2000c6b8 	.word	0x2000c6b8

0801a4b8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801a4b8:	4b07      	ldr	r3, [pc, #28]	; (801a4d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801a4ba:	b510      	push	{r4, lr}
 801a4bc:	781b      	ldrb	r3, [r3, #0]
 801a4be:	2b01      	cmp	r3, #1
 801a4c0:	d108      	bne.n	801a4d4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801a4c2:	4b06      	ldr	r3, [pc, #24]	; (801a4dc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801a4c4:	880c      	ldrh	r4, [r1, #0]
 801a4c6:	881b      	ldrh	r3, [r3, #0]
 801a4c8:	f9b0 2000 	ldrsh.w	r2, [r0]
 801a4cc:	3b01      	subs	r3, #1
 801a4ce:	1b1b      	subs	r3, r3, r4
 801a4d0:	8003      	strh	r3, [r0, #0]
 801a4d2:	800a      	strh	r2, [r1, #0]
 801a4d4:	bd10      	pop	{r4, pc}
 801a4d6:	bf00      	nop
 801a4d8:	2000c684 	.word	0x2000c684
 801a4dc:	2000c688 	.word	0x2000c688

0801a4e0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801a4e0:	4b0a      	ldr	r3, [pc, #40]	; (801a50c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801a4e2:	b510      	push	{r4, lr}
 801a4e4:	781b      	ldrb	r3, [r3, #0]
 801a4e6:	2b01      	cmp	r3, #1
 801a4e8:	d10e      	bne.n	801a508 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801a4ea:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801a4ee:	8843      	ldrh	r3, [r0, #2]
 801a4f0:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a4f4:	18ca      	adds	r2, r1, r3
 801a4f6:	4b06      	ldr	r3, [pc, #24]	; (801a510 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801a4f8:	8044      	strh	r4, [r0, #2]
 801a4fa:	881b      	ldrh	r3, [r3, #0]
 801a4fc:	1a9b      	subs	r3, r3, r2
 801a4fe:	8003      	strh	r3, [r0, #0]
 801a500:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a504:	8081      	strh	r1, [r0, #4]
 801a506:	80c3      	strh	r3, [r0, #6]
 801a508:	bd10      	pop	{r4, pc}
 801a50a:	bf00      	nop
 801a50c:	2000c684 	.word	0x2000c684
 801a510:	2000c680 	.word	0x2000c680

0801a514 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801a514:	4b07      	ldr	r3, [pc, #28]	; (801a534 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801a516:	b510      	push	{r4, lr}
 801a518:	781b      	ldrb	r3, [r3, #0]
 801a51a:	2b01      	cmp	r3, #1
 801a51c:	d108      	bne.n	801a530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801a51e:	f9b1 3000 	ldrsh.w	r3, [r1]
 801a522:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a526:	8003      	strh	r3, [r0, #0]
 801a528:	8893      	ldrh	r3, [r2, #4]
 801a52a:	3b01      	subs	r3, #1
 801a52c:	1b1b      	subs	r3, r3, r4
 801a52e:	800b      	strh	r3, [r1, #0]
 801a530:	bd10      	pop	{r4, pc}
 801a532:	bf00      	nop
 801a534:	2000c684 	.word	0x2000c684

0801a538 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801a538:	4b08      	ldr	r3, [pc, #32]	; (801a55c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801a53a:	b513      	push	{r0, r1, r4, lr}
 801a53c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a540:	2400      	movs	r4, #0
 801a542:	4b07      	ldr	r3, [pc, #28]	; (801a560 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 801a544:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a548:	466a      	mov	r2, sp
 801a54a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a54e:	9400      	str	r4, [sp, #0]
 801a550:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a554:	f7ff ffde 	bl	801a514 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801a558:	b002      	add	sp, #8
 801a55a:	bd10      	pop	{r4, pc}
 801a55c:	2000c680 	.word	0x2000c680
 801a560:	2000c682 	.word	0x2000c682

0801a564 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801a564:	4b0a      	ldr	r3, [pc, #40]	; (801a590 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801a566:	460a      	mov	r2, r1
 801a568:	b510      	push	{r4, lr}
 801a56a:	781b      	ldrb	r3, [r3, #0]
 801a56c:	2b01      	cmp	r3, #1
 801a56e:	d10d      	bne.n	801a58c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801a570:	8881      	ldrh	r1, [r0, #4]
 801a572:	8803      	ldrh	r3, [r0, #0]
 801a574:	440b      	add	r3, r1
 801a576:	4601      	mov	r1, r0
 801a578:	3b01      	subs	r3, #1
 801a57a:	f821 3b02 	strh.w	r3, [r1], #2
 801a57e:	f7ff ffc9 	bl	801a514 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801a582:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a586:	88c2      	ldrh	r2, [r0, #6]
 801a588:	80c3      	strh	r3, [r0, #6]
 801a58a:	8082      	strh	r2, [r0, #4]
 801a58c:	bd10      	pop	{r4, pc}
 801a58e:	bf00      	nop
 801a590:	2000c684 	.word	0x2000c684

0801a594 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801a594:	4b09      	ldr	r3, [pc, #36]	; (801a5bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801a596:	b507      	push	{r0, r1, r2, lr}
 801a598:	2100      	movs	r1, #0
 801a59a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a59e:	4b08      	ldr	r3, [pc, #32]	; (801a5c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 801a5a0:	9100      	str	r1, [sp, #0]
 801a5a2:	4669      	mov	r1, sp
 801a5a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a5a8:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a5ac:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a5b0:	f7ff ffd8 	bl	801a564 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a5b4:	b003      	add	sp, #12
 801a5b6:	f85d fb04 	ldr.w	pc, [sp], #4
 801a5ba:	bf00      	nop
 801a5bc:	2000c680 	.word	0x2000c680
 801a5c0:	2000c682 	.word	0x2000c682

0801a5c4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801a5c4:	4b03      	ldr	r3, [pc, #12]	; (801a5d4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801a5c6:	6818      	ldr	r0, [r3, #0]
 801a5c8:	b110      	cbz	r0, 801a5d0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801a5ca:	6803      	ldr	r3, [r0, #0]
 801a5cc:	699b      	ldr	r3, [r3, #24]
 801a5ce:	4718      	bx	r3
 801a5d0:	4770      	bx	lr
 801a5d2:	bf00      	nop
 801a5d4:	2000c708 	.word	0x2000c708

0801a5d8 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801a5d8:	4770      	bx	lr
	...

0801a5dc <_ZN8touchgfx11Application4drawEv>:
 801a5dc:	4b09      	ldr	r3, [pc, #36]	; (801a604 <_ZN8touchgfx11Application4drawEv+0x28>)
 801a5de:	b507      	push	{r0, r1, r2, lr}
 801a5e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a5e4:	2100      	movs	r1, #0
 801a5e6:	4b08      	ldr	r3, [pc, #32]	; (801a608 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801a5e8:	9100      	str	r1, [sp, #0]
 801a5ea:	4669      	mov	r1, sp
 801a5ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a5f0:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a5f4:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a5f8:	6803      	ldr	r3, [r0, #0]
 801a5fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a5fc:	4798      	blx	r3
 801a5fe:	b003      	add	sp, #12
 801a600:	f85d fb04 	ldr.w	pc, [sp], #4
 801a604:	2000c680 	.word	0x2000c680
 801a608:	2000c682 	.word	0x2000c682

0801a60c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801a60c:	4b03      	ldr	r3, [pc, #12]	; (801a61c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801a60e:	6818      	ldr	r0, [r3, #0]
 801a610:	b110      	cbz	r0, 801a618 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801a612:	6803      	ldr	r3, [r0, #0]
 801a614:	69db      	ldr	r3, [r3, #28]
 801a616:	4718      	bx	r3
 801a618:	4770      	bx	lr
 801a61a:	bf00      	nop
 801a61c:	2000c708 	.word	0x2000c708

0801a620 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801a620:	4b03      	ldr	r3, [pc, #12]	; (801a630 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801a622:	6818      	ldr	r0, [r3, #0]
 801a624:	b110      	cbz	r0, 801a62c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801a626:	6803      	ldr	r3, [r0, #0]
 801a628:	6a1b      	ldr	r3, [r3, #32]
 801a62a:	4718      	bx	r3
 801a62c:	4770      	bx	lr
 801a62e:	bf00      	nop
 801a630:	2000c708 	.word	0x2000c708

0801a634 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801a634:	4b03      	ldr	r3, [pc, #12]	; (801a644 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801a636:	6818      	ldr	r0, [r3, #0]
 801a638:	b110      	cbz	r0, 801a640 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801a63a:	6803      	ldr	r3, [r0, #0]
 801a63c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a63e:	4718      	bx	r3
 801a640:	4770      	bx	lr
 801a642:	bf00      	nop
 801a644:	2000c708 	.word	0x2000c708

0801a648 <_ZN8touchgfx11Application15handleTickEventEv>:
 801a648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a64c:	4d3a      	ldr	r5, [pc, #232]	; (801a738 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 801a64e:	4604      	mov	r4, r0
 801a650:	6828      	ldr	r0, [r5, #0]
 801a652:	b140      	cbz	r0, 801a666 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 801a654:	7a03      	ldrb	r3, [r0, #8]
 801a656:	b933      	cbnz	r3, 801a666 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 801a658:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801a65c:	6803      	ldr	r3, [r0, #0]
 801a65e:	689b      	ldr	r3, [r3, #8]
 801a660:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a664:	4718      	bx	r3
 801a666:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 801a66a:	b97b      	cbnz	r3, 801a68c <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801a66c:	b170      	cbz	r0, 801a68c <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801a66e:	7a03      	ldrb	r3, [r0, #8]
 801a670:	b163      	cbz	r3, 801a68c <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801a672:	4b32      	ldr	r3, [pc, #200]	; (801a73c <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801a674:	6818      	ldr	r0, [r3, #0]
 801a676:	b110      	cbz	r0, 801a67e <_ZN8touchgfx11Application15handleTickEventEv+0x36>
 801a678:	6803      	ldr	r3, [r0, #0]
 801a67a:	691b      	ldr	r3, [r3, #16]
 801a67c:	4798      	blx	r3
 801a67e:	6828      	ldr	r0, [r5, #0]
 801a680:	6803      	ldr	r3, [r0, #0]
 801a682:	68db      	ldr	r3, [r3, #12]
 801a684:	4798      	blx	r3
 801a686:	2301      	movs	r3, #1
 801a688:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801a68c:	2500      	movs	r5, #0
 801a68e:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801a692:	42a8      	cmp	r0, r5
 801a694:	dd0c      	ble.n	801a6b0 <_ZN8touchgfx11Application15handleTickEventEv+0x68>
 801a696:	1963      	adds	r3, r4, r5
 801a698:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801a69c:	b132      	cbz	r2, 801a6ac <_ZN8touchgfx11Application15handleTickEventEv+0x64>
 801a69e:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801a6a2:	4413      	add	r3, r2
 801a6a4:	6858      	ldr	r0, [r3, #4]
 801a6a6:	6803      	ldr	r3, [r0, #0]
 801a6a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a6aa:	4798      	blx	r3
 801a6ac:	3501      	adds	r5, #1
 801a6ae:	e7ee      	b.n	801a68e <_ZN8touchgfx11Application15handleTickEventEv+0x46>
 801a6b0:	f5c4 467f 	rsb	r6, r4, #65280	; 0xff00
 801a6b4:	3801      	subs	r0, #1
 801a6b6:	f04f 0c00 	mov.w	ip, #0
 801a6ba:	3678      	adds	r6, #120	; 0x78
 801a6bc:	1c43      	adds	r3, r0, #1
 801a6be:	d033      	beq.n	801a728 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801a6c0:	1823      	adds	r3, r4, r0
 801a6c2:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801a6c6:	bb6a      	cbnz	r2, 801a724 <_ZN8touchgfx11Application15handleTickEventEv+0xdc>
 801a6c8:	b281      	uxth	r1, r0
 801a6ca:	1d25      	adds	r5, r4, #4
 801a6cc:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 801a6d0:	f8d3 9004 	ldr.w	r9, [r3, #4]
 801a6d4:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 801a6d8:	4293      	cmp	r3, r2
 801a6da:	dc0a      	bgt.n	801a6f2 <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 801a6dc:	f101 0288 	add.w	r2, r1, #136	; 0x88
 801a6e0:	4422      	add	r2, r4
 801a6e2:	18b1      	adds	r1, r6, r2
 801a6e4:	b289      	uxth	r1, r1
 801a6e6:	428b      	cmp	r3, r1
 801a6e8:	d919      	bls.n	801a71e <_ZN8touchgfx11Application15handleTickEventEv+0xd6>
 801a6ea:	7851      	ldrb	r1, [r2, #1]
 801a6ec:	f802 1b01 	strb.w	r1, [r2], #1
 801a6f0:	e7f7      	b.n	801a6e2 <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 801a6f2:	682f      	ldr	r7, [r5, #0]
 801a6f4:	f105 0804 	add.w	r8, r5, #4
 801a6f8:	45b9      	cmp	r9, r7
 801a6fa:	d10d      	bne.n	801a718 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 801a6fc:	4696      	mov	lr, r2
 801a6fe:	f1be 0f1e 	cmp.w	lr, #30
 801a702:	dc06      	bgt.n	801a712 <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 801a704:	f10e 0e01 	add.w	lr, lr, #1
 801a708:	686f      	ldr	r7, [r5, #4]
 801a70a:	4573      	cmp	r3, lr
 801a70c:	f845 7b04 	str.w	r7, [r5], #4
 801a710:	dcf5      	bgt.n	801a6fe <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 801a712:	3b01      	subs	r3, #1
 801a714:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 801a718:	3201      	adds	r2, #1
 801a71a:	4645      	mov	r5, r8
 801a71c:	e7da      	b.n	801a6d4 <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 801a71e:	4423      	add	r3, r4
 801a720:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
 801a724:	3801      	subs	r0, #1
 801a726:	e7c9      	b.n	801a6bc <_ZN8touchgfx11Application15handleTickEventEv+0x74>
 801a728:	4b04      	ldr	r3, [pc, #16]	; (801a73c <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801a72a:	6818      	ldr	r0, [r3, #0]
 801a72c:	b110      	cbz	r0, 801a734 <_ZN8touchgfx11Application15handleTickEventEv+0xec>
 801a72e:	6803      	ldr	r3, [r0, #0]
 801a730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a732:	e795      	b.n	801a660 <_ZN8touchgfx11Application15handleTickEventEv+0x18>
 801a734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a738:	2000c70c 	.word	0x2000c70c
 801a73c:	2000c708 	.word	0x2000c708

0801a740 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801a740:	b570      	push	{r4, r5, r6, lr}
 801a742:	4606      	mov	r6, r0
 801a744:	460c      	mov	r4, r1
 801a746:	b929      	cbnz	r1, 801a754 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801a748:	4b0c      	ldr	r3, [pc, #48]	; (801a77c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801a74a:	2164      	movs	r1, #100	; 0x64
 801a74c:	4a0c      	ldr	r2, [pc, #48]	; (801a780 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801a74e:	480d      	ldr	r0, [pc, #52]	; (801a784 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801a750:	f00c f854 	bl	80267fc <__assert_func>
 801a754:	2300      	movs	r3, #0
 801a756:	4d0c      	ldr	r5, [pc, #48]	; (801a788 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801a758:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801a75c:	6828      	ldr	r0, [r5, #0]
 801a75e:	b110      	cbz	r0, 801a766 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801a760:	6803      	ldr	r3, [r0, #0]
 801a762:	695b      	ldr	r3, [r3, #20]
 801a764:	4798      	blx	r3
 801a766:	602c      	str	r4, [r5, #0]
 801a768:	4620      	mov	r0, r4
 801a76a:	6823      	ldr	r3, [r4, #0]
 801a76c:	68db      	ldr	r3, [r3, #12]
 801a76e:	4798      	blx	r3
 801a770:	6833      	ldr	r3, [r6, #0]
 801a772:	4630      	mov	r0, r6
 801a774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a776:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a77a:	4718      	bx	r3
 801a77c:	0802a1c8 	.word	0x0802a1c8
 801a780:	0802a290 	.word	0x0802a290
 801a784:	0802a1d2 	.word	0x0802a1d2
 801a788:	2000c708 	.word	0x2000c708

0801a78c <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801a78c:	b510      	push	{r4, lr}
 801a78e:	f9b1 4000 	ldrsh.w	r4, [r1]
 801a792:	888a      	ldrh	r2, [r1, #4]
 801a794:	f9b0 3000 	ldrsh.w	r3, [r0]
 801a798:	4422      	add	r2, r4
 801a79a:	b212      	sxth	r2, r2
 801a79c:	4293      	cmp	r3, r2
 801a79e:	da15      	bge.n	801a7cc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a7a0:	8882      	ldrh	r2, [r0, #4]
 801a7a2:	4413      	add	r3, r2
 801a7a4:	b21b      	sxth	r3, r3
 801a7a6:	429c      	cmp	r4, r3
 801a7a8:	da10      	bge.n	801a7cc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a7aa:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801a7ae:	88c9      	ldrh	r1, [r1, #6]
 801a7b0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801a7b4:	4419      	add	r1, r3
 801a7b6:	b209      	sxth	r1, r1
 801a7b8:	428a      	cmp	r2, r1
 801a7ba:	da07      	bge.n	801a7cc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a7bc:	88c0      	ldrh	r0, [r0, #6]
 801a7be:	4410      	add	r0, r2
 801a7c0:	b200      	sxth	r0, r0
 801a7c2:	4283      	cmp	r3, r0
 801a7c4:	bfac      	ite	ge
 801a7c6:	2000      	movge	r0, #0
 801a7c8:	2001      	movlt	r0, #1
 801a7ca:	bd10      	pop	{r4, pc}
 801a7cc:	2000      	movs	r0, #0
 801a7ce:	e7fc      	b.n	801a7ca <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801a7d0 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801a7d0:	b570      	push	{r4, r5, r6, lr}
 801a7d2:	f9b1 4000 	ldrsh.w	r4, [r1]
 801a7d6:	f9b0 5000 	ldrsh.w	r5, [r0]
 801a7da:	42ac      	cmp	r4, r5
 801a7dc:	db18      	blt.n	801a810 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801a7de:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801a7e2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801a7e6:	429a      	cmp	r2, r3
 801a7e8:	db12      	blt.n	801a810 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801a7ea:	8886      	ldrh	r6, [r0, #4]
 801a7ec:	4435      	add	r5, r6
 801a7ee:	888e      	ldrh	r6, [r1, #4]
 801a7f0:	4434      	add	r4, r6
 801a7f2:	b22d      	sxth	r5, r5
 801a7f4:	b224      	sxth	r4, r4
 801a7f6:	42a5      	cmp	r5, r4
 801a7f8:	db0a      	blt.n	801a810 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801a7fa:	88c0      	ldrh	r0, [r0, #6]
 801a7fc:	4418      	add	r0, r3
 801a7fe:	88cb      	ldrh	r3, [r1, #6]
 801a800:	441a      	add	r2, r3
 801a802:	b200      	sxth	r0, r0
 801a804:	b212      	sxth	r2, r2
 801a806:	4290      	cmp	r0, r2
 801a808:	bfb4      	ite	lt
 801a80a:	2000      	movlt	r0, #0
 801a80c:	2001      	movge	r0, #1
 801a80e:	bd70      	pop	{r4, r5, r6, pc}
 801a810:	2000      	movs	r0, #0
 801a812:	e7fc      	b.n	801a80e <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801a814 <_ZN8touchgfx11Application11getInstanceEv>:
 801a814:	4b01      	ldr	r3, [pc, #4]	; (801a81c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801a816:	6818      	ldr	r0, [r3, #0]
 801a818:	4770      	bx	lr
 801a81a:	bf00      	nop
 801a81c:	2000c718 	.word	0x2000c718

0801a820 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801a820:	2300      	movs	r3, #0
 801a822:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801a826:	30a8      	adds	r0, #168	; 0xa8
 801a828:	f820 3c24 	strh.w	r3, [r0, #-36]
 801a82c:	f802 3b01 	strb.w	r3, [r2], #1
 801a830:	4282      	cmp	r2, r0
 801a832:	d1fb      	bne.n	801a82c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801a834:	4770      	bx	lr

0801a836 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801a836:	4603      	mov	r3, r0
 801a838:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801a83c:	2200      	movs	r2, #0
 801a83e:	801a      	strh	r2, [r3, #0]
 801a840:	3308      	adds	r3, #8
 801a842:	f823 2c06 	strh.w	r2, [r3, #-6]
 801a846:	f823 2c04 	strh.w	r2, [r3, #-4]
 801a84a:	f823 2c02 	strh.w	r2, [r3, #-2]
 801a84e:	428b      	cmp	r3, r1
 801a850:	d1f5      	bne.n	801a83e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801a852:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801a856:	4770      	bx	lr

0801a858 <_ZN8touchgfx11ApplicationC1Ev>:
 801a858:	b570      	push	{r4, r5, r6, lr}
 801a85a:	4b16      	ldr	r3, [pc, #88]	; (801a8b4 <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 801a85c:	2500      	movs	r5, #0
 801a85e:	4604      	mov	r4, r0
 801a860:	30a8      	adds	r0, #168	; 0xa8
 801a862:	f840 3ca8 	str.w	r3, [r0, #-168]
 801a866:	f820 5c24 	strh.w	r5, [r0, #-36]
 801a86a:	f7ff ffe4 	bl	801a836 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a86e:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801a872:	f7ff ffe0 	bl	801a836 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a876:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 801a87a:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 801a87e:	490e      	ldr	r1, [pc, #56]	; (801a8b8 <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 801a880:	480e      	ldr	r0, [pc, #56]	; (801a8bc <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 801a882:	f00a faa1 	bl	8024dc8 <CRC_Lock>
 801a886:	4e0e      	ldr	r6, [pc, #56]	; (801a8c0 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 801a888:	4b0e      	ldr	r3, [pc, #56]	; (801a8c4 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801a88a:	b158      	cbz	r0, 801a8a4 <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 801a88c:	801d      	strh	r5, [r3, #0]
 801a88e:	2300      	movs	r3, #0
 801a890:	4a0d      	ldr	r2, [pc, #52]	; (801a8c8 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801a892:	4620      	mov	r0, r4
 801a894:	6013      	str	r3, [r2, #0]
 801a896:	4a0d      	ldr	r2, [pc, #52]	; (801a8cc <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801a898:	6033      	str	r3, [r6, #0]
 801a89a:	6013      	str	r3, [r2, #0]
 801a89c:	f7ff ffc0 	bl	801a820 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801a8a0:	4620      	mov	r0, r4
 801a8a2:	bd70      	pop	{r4, r5, r6, pc}
 801a8a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801a8a8:	2002      	movs	r0, #2
 801a8aa:	801a      	strh	r2, [r3, #0]
 801a8ac:	6030      	str	r0, [r6, #0]
 801a8ae:	f000 ff81 	bl	801b7b4 <_ZN8touchgfx6Screen4drawEv>
 801a8b2:	e7ec      	b.n	801a88e <_ZN8touchgfx11ApplicationC1Ev+0x36>
 801a8b4:	0802a25c 	.word	0x0802a25c
 801a8b8:	b5e8b5cd 	.word	0xb5e8b5cd
 801a8bc:	f407a5c2 	.word	0xf407a5c2
 801a8c0:	2000c708 	.word	0x2000c708
 801a8c4:	20000050 	.word	0x20000050
 801a8c8:	2000c718 	.word	0x2000c718
 801a8cc:	2000c70c 	.word	0x2000c70c

0801a8d0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801a8d0:	2300      	movs	r3, #0
 801a8d2:	8003      	strh	r3, [r0, #0]
 801a8d4:	8043      	strh	r3, [r0, #2]
 801a8d6:	8083      	strh	r3, [r0, #4]
 801a8d8:	80c3      	strh	r3, [r0, #6]
 801a8da:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 801a8de:	4293      	cmp	r3, r2
 801a8e0:	b530      	push	{r4, r5, lr}
 801a8e2:	d912      	bls.n	801a90a <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801a8e4:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801a8e8:	3b01      	subs	r3, #1
 801a8ea:	6825      	ldr	r5, [r4, #0]
 801a8ec:	b29b      	uxth	r3, r3
 801a8ee:	6005      	str	r5, [r0, #0]
 801a8f0:	4293      	cmp	r3, r2
 801a8f2:	6865      	ldr	r5, [r4, #4]
 801a8f4:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 801a8f8:	6045      	str	r5, [r0, #4]
 801a8fa:	d906      	bls.n	801a90a <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801a8fc:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801a900:	681d      	ldr	r5, [r3, #0]
 801a902:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 801a906:	685d      	ldr	r5, [r3, #4]
 801a908:	6065      	str	r5, [r4, #4]
 801a90a:	bd30      	pop	{r4, r5, pc}

0801a90c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801a90c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a90e:	466b      	mov	r3, sp
 801a910:	4604      	mov	r4, r0
 801a912:	e883 0006 	stmia.w	r3, {r1, r2}
 801a916:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801a91a:	2a07      	cmp	r2, #7
 801a91c:	d906      	bls.n	801a92c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801a91e:	4b09      	ldr	r3, [pc, #36]	; (801a944 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801a920:	f44f 7102 	mov.w	r1, #520	; 0x208
 801a924:	4a08      	ldr	r2, [pc, #32]	; (801a948 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801a926:	4809      	ldr	r0, [pc, #36]	; (801a94c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801a928:	f00b ff68 	bl	80267fc <__assert_func>
 801a92c:	1c51      	adds	r1, r2, #1
 801a92e:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801a932:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801a936:	cb03      	ldmia	r3!, {r0, r1}
 801a938:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801a93c:	6069      	str	r1, [r5, #4]
 801a93e:	b003      	add	sp, #12
 801a940:	bd30      	pop	{r4, r5, pc}
 801a942:	bf00      	nop
 801a944:	0802a1fc 	.word	0x0802a1fc
 801a948:	0802a2d4 	.word	0x0802a2d4
 801a94c:	0802a22b 	.word	0x0802a22b

0801a950 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801a950:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a954:	b089      	sub	sp, #36	; 0x24
 801a956:	4606      	mov	r6, r0
 801a958:	466c      	mov	r4, sp
 801a95a:	4620      	mov	r0, r4
 801a95c:	e884 0006 	stmia.w	r4, {r1, r2}
 801a960:	f7fc fe30 	bl	80175c4 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a964:	bbb0      	cbnz	r0, 801a9d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801a966:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 801a96a:	b1fd      	cbz	r5, 801a9ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 801a96c:	3d01      	subs	r5, #1
 801a96e:	af04      	add	r7, sp, #16
 801a970:	f04f 090a 	mov.w	r9, #10
 801a974:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 801a978:	ab02      	add	r3, sp, #8
 801a97a:	fa1f f885 	uxth.w	r8, r5
 801a97e:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801a982:	6851      	ldr	r1, [r2, #4]
 801a984:	c303      	stmia	r3!, {r0, r1}
 801a986:	4621      	mov	r1, r4
 801a988:	a802      	add	r0, sp, #8
 801a98a:	f7ff ff21 	bl	801a7d0 <_ZNK8touchgfx4Rect8includesERKS0_>
 801a98e:	bb08      	cbnz	r0, 801a9d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801a990:	a902      	add	r1, sp, #8
 801a992:	4620      	mov	r0, r4
 801a994:	f7ff ff1c 	bl	801a7d0 <_ZNK8touchgfx4Rect8includesERKS0_>
 801a998:	b1f8      	cbz	r0, 801a9da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 801a99a:	4642      	mov	r2, r8
 801a99c:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801a9a0:	a806      	add	r0, sp, #24
 801a9a2:	f7ff ff95 	bl	801a8d0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a9a6:	f115 35ff 	adds.w	r5, r5, #4294967295
 801a9aa:	d2e3      	bcs.n	801a974 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 801a9ac:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 801a9b0:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 801a9b4:	2b08      	cmp	r3, #8
 801a9b6:	d108      	bne.n	801a9ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801a9b8:	4629      	mov	r1, r5
 801a9ba:	a806      	add	r0, sp, #24
 801a9bc:	2207      	movs	r2, #7
 801a9be:	f7ff ff87 	bl	801a8d0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a9c2:	a906      	add	r1, sp, #24
 801a9c4:	4620      	mov	r0, r4
 801a9c6:	f7fd fff8 	bl	80189ba <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a9ca:	4628      	mov	r0, r5
 801a9cc:	e894 0006 	ldmia.w	r4, {r1, r2}
 801a9d0:	f7ff ff9c 	bl	801a90c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801a9d4:	b009      	add	sp, #36	; 0x24
 801a9d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a9da:	4621      	mov	r1, r4
 801a9dc:	a802      	add	r0, sp, #8
 801a9de:	f7ff fed5 	bl	801a78c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a9e2:	b150      	cbz	r0, 801a9fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 801a9e4:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801a9e8:	a806      	add	r0, sp, #24
 801a9ea:	4642      	mov	r2, r8
 801a9ec:	f7ff ff70 	bl	801a8d0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a9f0:	a902      	add	r1, sp, #8
 801a9f2:	4620      	mov	r0, r4
 801a9f4:	f7fd ffe1 	bl	80189ba <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a9f8:	e7d5      	b.n	801a9a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801a9fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 801a9fe:	e887 0003 	stmia.w	r7, {r0, r1}
 801aa02:	a902      	add	r1, sp, #8
 801aa04:	4638      	mov	r0, r7
 801aa06:	f7fd ffd8 	bl	80189ba <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801aa0a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801aa0e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801aa12:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801aa16:	fb13 f302 	smulbb	r3, r3, r2
 801aa1a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801aa1e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801aa22:	fb11 f102 	smulbb	r1, r1, r2
 801aa26:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801aa2a:	fb09 f303 	mul.w	r3, r9, r3
 801aa2e:	fb12 1100 	smlabb	r1, r2, r0, r1
 801aa32:	220b      	movs	r2, #11
 801aa34:	434a      	muls	r2, r1
 801aa36:	4293      	cmp	r3, r2
 801aa38:	dab5      	bge.n	801a9a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801aa3a:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801aa3e:	a806      	add	r0, sp, #24
 801aa40:	4642      	mov	r2, r8
 801aa42:	f7ff ff45 	bl	801a8d0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801aa46:	e897 0003 	ldmia.w	r7, {r0, r1}
 801aa4a:	e884 0003 	stmia.w	r4, {r0, r1}
 801aa4e:	e7aa      	b.n	801a9a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

0801aa50 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801aa50:	4b1d      	ldr	r3, [pc, #116]	; (801aac8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801aa52:	b530      	push	{r4, r5, lr}
 801aa54:	f9b3 2000 	ldrsh.w	r2, [r3]
 801aa58:	b085      	sub	sp, #20
 801aa5a:	4b1c      	ldr	r3, [pc, #112]	; (801aacc <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801aa5c:	460c      	mov	r4, r1
 801aa5e:	2100      	movs	r1, #0
 801aa60:	4605      	mov	r5, r0
 801aa62:	f9b3 3000 	ldrsh.w	r3, [r3]
 801aa66:	6820      	ldr	r0, [r4, #0]
 801aa68:	9100      	str	r1, [sp, #0]
 801aa6a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801aa6e:	ab02      	add	r3, sp, #8
 801aa70:	6861      	ldr	r1, [r4, #4]
 801aa72:	f8ad 2004 	strh.w	r2, [sp, #4]
 801aa76:	c303      	stmia	r3!, {r0, r1}
 801aa78:	4669      	mov	r1, sp
 801aa7a:	a802      	add	r0, sp, #8
 801aa7c:	f7fc fd5e 	bl	801753c <_ZN8touchgfx4RectaNERKS0_>
 801aa80:	ab02      	add	r3, sp, #8
 801aa82:	cb03      	ldmia	r3!, {r0, r1}
 801aa84:	4b12      	ldr	r3, [pc, #72]	; (801aad0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801aa86:	6020      	str	r0, [r4, #0]
 801aa88:	6818      	ldr	r0, [r3, #0]
 801aa8a:	6061      	str	r1, [r4, #4]
 801aa8c:	b138      	cbz	r0, 801aa9e <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801aa8e:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 801aa92:	b133      	cbz	r3, 801aaa2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801aa94:	6821      	ldr	r1, [r4, #0]
 801aa96:	4628      	mov	r0, r5
 801aa98:	6862      	ldr	r2, [r4, #4]
 801aa9a:	f7ff ff59 	bl	801a950 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801aa9e:	b005      	add	sp, #20
 801aaa0:	bd30      	pop	{r4, r5, pc}
 801aaa2:	6803      	ldr	r3, [r0, #0]
 801aaa4:	4621      	mov	r1, r4
 801aaa6:	689b      	ldr	r3, [r3, #8]
 801aaa8:	4798      	blx	r3
 801aaaa:	4b0a      	ldr	r3, [pc, #40]	; (801aad4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801aaac:	6818      	ldr	r0, [r3, #0]
 801aaae:	b118      	cbz	r0, 801aab8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801aab0:	6803      	ldr	r3, [r0, #0]
 801aab2:	4621      	mov	r1, r4
 801aab4:	689b      	ldr	r3, [r3, #8]
 801aab6:	4798      	blx	r3
 801aab8:	4b07      	ldr	r3, [pc, #28]	; (801aad8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801aaba:	4621      	mov	r1, r4
 801aabc:	6818      	ldr	r0, [r3, #0]
 801aabe:	6803      	ldr	r3, [r0, #0]
 801aac0:	695b      	ldr	r3, [r3, #20]
 801aac2:	4798      	blx	r3
 801aac4:	e7eb      	b.n	801aa9e <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801aac6:	bf00      	nop
 801aac8:	2000c680 	.word	0x2000c680
 801aacc:	2000c682 	.word	0x2000c682
 801aad0:	2000c708 	.word	0x2000c708
 801aad4:	2000c704 	.word	0x2000c704
 801aad8:	2000c68c 	.word	0x2000c68c

0801aadc <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801aadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aae0:	4604      	mov	r4, r0
 801aae2:	b09b      	sub	sp, #108	; 0x6c
 801aae4:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 801aae8:	b129      	cbz	r1, 801aaf6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801aaea:	2300      	movs	r3, #0
 801aaec:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801aaf0:	b01b      	add	sp, #108	; 0x6c
 801aaf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aaf6:	4baf      	ldr	r3, [pc, #700]	; (801adb4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801aaf8:	681b      	ldr	r3, [r3, #0]
 801aafa:	b33b      	cbz	r3, 801ab4c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801aafc:	4dae      	ldr	r5, [pc, #696]	; (801adb8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801aafe:	4628      	mov	r0, r5
 801ab00:	f7fc fd60 	bl	80175c4 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ab04:	4606      	mov	r6, r0
 801ab06:	bb08      	cbnz	r0, 801ab4c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801ab08:	4628      	mov	r0, r5
 801ab0a:	f7ff fce9 	bl	801a4e0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801ab0e:	6829      	ldr	r1, [r5, #0]
 801ab10:	686a      	ldr	r2, [r5, #4]
 801ab12:	4620      	mov	r0, r4
 801ab14:	f7ff ff1c 	bl	801a950 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801ab18:	802e      	strh	r6, [r5, #0]
 801ab1a:	806e      	strh	r6, [r5, #2]
 801ab1c:	80ae      	strh	r6, [r5, #4]
 801ab1e:	80ee      	strh	r6, [r5, #6]
 801ab20:	4fa6      	ldr	r7, [pc, #664]	; (801adbc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801ab22:	a809      	add	r0, sp, #36	; 0x24
 801ab24:	f7ff fe87 	bl	801a836 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801ab28:	883d      	ldrh	r5, [r7, #0]
 801ab2a:	462e      	mov	r6, r5
 801ab2c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801ab30:	42b3      	cmp	r3, r6
 801ab32:	d910      	bls.n	801ab56 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7a>
 801ab34:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801ab38:	3601      	adds	r6, #1
 801ab3a:	a809      	add	r0, sp, #36	; 0x24
 801ab3c:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801ab40:	b2b6      	uxth	r6, r6
 801ab42:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801ab46:	f7ff fee1 	bl	801a90c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801ab4a:	e7ef      	b.n	801ab2c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x50>
 801ab4c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801ab50:	2b00      	cmp	r3, #0
 801ab52:	d1e5      	bne.n	801ab20 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x44>
 801ab54:	e7cc      	b.n	801aaf0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801ab56:	462e      	mov	r6, r5
 801ab58:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801ab5c:	42b3      	cmp	r3, r6
 801ab5e:	d90b      	bls.n	801ab78 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801ab60:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801ab64:	3601      	adds	r6, #1
 801ab66:	4620      	mov	r0, r4
 801ab68:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801ab6c:	b2b6      	uxth	r6, r6
 801ab6e:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801ab72:	f7ff feed 	bl	801a950 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801ab76:	e7ef      	b.n	801ab58 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7c>
 801ab78:	4e91      	ldr	r6, [pc, #580]	; (801adc0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801ab7a:	6833      	ldr	r3, [r6, #0]
 801ab7c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801ab80:	2b01      	cmp	r3, #1
 801ab82:	f040 8092 	bne.w	801acaa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 801ab86:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801ab8a:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801ab8e:	f04f 0900 	mov.w	r9, #0
 801ab92:	33aa      	adds	r3, #170	; 0xaa
 801ab94:	42a8      	cmp	r0, r5
 801ab96:	f103 0308 	add.w	r3, r3, #8
 801ab9a:	dd0a      	ble.n	801abb2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd6>
 801ab9c:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801aba0:	3501      	adds	r5, #1
 801aba2:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801aba6:	440a      	add	r2, r1
 801aba8:	b212      	sxth	r2, r2
 801abaa:	4591      	cmp	r9, r2
 801abac:	bfb8      	it	lt
 801abae:	4691      	movlt	r9, r2
 801abb0:	e7f0      	b.n	801ab94 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xb8>
 801abb2:	4b84      	ldr	r3, [pc, #528]	; (801adc4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801abb4:	f8df 8214 	ldr.w	r8, [pc, #532]	; 801adcc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>
 801abb8:	881d      	ldrh	r5, [r3, #0]
 801abba:	2300      	movs	r3, #0
 801abbc:	2d0f      	cmp	r5, #15
 801abbe:	bf8c      	ite	hi
 801abc0:	08ed      	lsrhi	r5, r5, #3
 801abc2:	2501      	movls	r5, #1
 801abc4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801abc8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801abcc:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801abd0:	6830      	ldr	r0, [r6, #0]
 801abd2:	440b      	add	r3, r1
 801abd4:	6802      	ldr	r2, [r0, #0]
 801abd6:	b21b      	sxth	r3, r3
 801abd8:	4599      	cmp	r9, r3
 801abda:	dd49      	ble.n	801ac70 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x194>
 801abdc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 801abe0:	4798      	blx	r3
 801abe2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801abe6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801abea:	4413      	add	r3, r2
 801abec:	b21b      	sxth	r3, r3
 801abee:	195a      	adds	r2, r3, r5
 801abf0:	4290      	cmp	r0, r2
 801abf2:	da07      	bge.n	801ac04 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 801abf4:	4581      	cmp	r9, r0
 801abf6:	dd05      	ble.n	801ac04 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 801abf8:	4298      	cmp	r0, r3
 801abfa:	da33      	bge.n	801ac64 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 801abfc:	2b00      	cmp	r3, #0
 801abfe:	dd31      	ble.n	801ac64 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 801ac00:	4648      	mov	r0, r9
 801ac02:	e004      	b.n	801ac0e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 801ac04:	4298      	cmp	r0, r3
 801ac06:	dbfb      	blt.n	801ac00 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x124>
 801ac08:	4548      	cmp	r0, r9
 801ac0a:	bfa8      	it	ge
 801ac0c:	4648      	movge	r0, r9
 801ac0e:	f9b8 2000 	ldrsh.w	r2, [r8]
 801ac12:	2100      	movs	r1, #0
 801ac14:	1ac0      	subs	r0, r0, r3
 801ac16:	f8b7 a000 	ldrh.w	sl, [r7]
 801ac1a:	f8ad 1014 	strh.w	r1, [sp, #20]
 801ac1e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ac22:	f8ad 2018 	strh.w	r2, [sp, #24]
 801ac26:	f8ad 001a 	strh.w	r0, [sp, #26]
 801ac2a:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801ac2e:	4553      	cmp	r3, sl
 801ac30:	d9ca      	bls.n	801abc8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 801ac32:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801ac36:	ab07      	add	r3, sp, #28
 801ac38:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801ac3c:	6851      	ldr	r1, [r2, #4]
 801ac3e:	c303      	stmia	r3!, {r0, r1}
 801ac40:	a807      	add	r0, sp, #28
 801ac42:	a905      	add	r1, sp, #20
 801ac44:	f7fc fc7a 	bl	801753c <_ZN8touchgfx4RectaNERKS0_>
 801ac48:	a807      	add	r0, sp, #28
 801ac4a:	f7fc fcbb 	bl	80175c4 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ac4e:	b920      	cbnz	r0, 801ac5a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x17e>
 801ac50:	6823      	ldr	r3, [r4, #0]
 801ac52:	a907      	add	r1, sp, #28
 801ac54:	4620      	mov	r0, r4
 801ac56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ac58:	4798      	blx	r3
 801ac5a:	f10a 0a01 	add.w	sl, sl, #1
 801ac5e:	fa1f fa8a 	uxth.w	sl, sl
 801ac62:	e7e2      	b.n	801ac2a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14e>
 801ac64:	6830      	ldr	r0, [r6, #0]
 801ac66:	2101      	movs	r1, #1
 801ac68:	6803      	ldr	r3, [r0, #0]
 801ac6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801ac6c:	4798      	blx	r3
 801ac6e:	e7ab      	b.n	801abc8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 801ac70:	69d3      	ldr	r3, [r2, #28]
 801ac72:	4798      	blx	r3
 801ac74:	4b54      	ldr	r3, [pc, #336]	; (801adc8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801ac76:	781b      	ldrb	r3, [r3, #0]
 801ac78:	2b00      	cmp	r3, #0
 801ac7a:	f43f af39 	beq.w	801aaf0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801ac7e:	2300      	movs	r3, #0
 801ac80:	883d      	ldrh	r5, [r7, #0]
 801ac82:	34ea      	adds	r4, #234	; 0xea
 801ac84:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801ac88:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801ac8c:	42ab      	cmp	r3, r5
 801ac8e:	f67f af2f 	bls.w	801aaf0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801ac92:	ab1a      	add	r3, sp, #104	; 0x68
 801ac94:	4620      	mov	r0, r4
 801ac96:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801ac9a:	3501      	adds	r5, #1
 801ac9c:	3b44      	subs	r3, #68	; 0x44
 801ac9e:	b2ad      	uxth	r5, r5
 801aca0:	e893 0006 	ldmia.w	r3, {r1, r2}
 801aca4:	f7ff fe32 	bl	801a90c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801aca8:	e7ee      	b.n	801ac88 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ac>
 801acaa:	2b02      	cmp	r3, #2
 801acac:	d16a      	bne.n	801ad84 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801acae:	f8df a120 	ldr.w	sl, [pc, #288]	; 801add0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801acb2:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801acb6:	42ab      	cmp	r3, r5
 801acb8:	d9dc      	bls.n	801ac74 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 801acba:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801acbe:	ab03      	add	r3, sp, #12
 801acc0:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801acc4:	6851      	ldr	r1, [r2, #4]
 801acc6:	c303      	stmia	r3!, {r0, r1}
 801acc8:	f89a 3000 	ldrb.w	r3, [sl]
 801accc:	2b01      	cmp	r3, #1
 801acce:	d102      	bne.n	801acd6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1fa>
 801acd0:	a803      	add	r0, sp, #12
 801acd2:	f7ff fc5f 	bl	801a594 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801acd6:	a803      	add	r0, sp, #12
 801acd8:	f7fc fc74 	bl	80175c4 <_ZNK8touchgfx4Rect7isEmptyEv>
 801acdc:	2800      	cmp	r0, #0
 801acde:	d14a      	bne.n	801ad76 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29a>
 801ace0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801ace4:	f10d 0914 	add.w	r9, sp, #20
 801ace8:	f10d 081c 	add.w	r8, sp, #28
 801acec:	f8ad 001a 	strh.w	r0, [sp, #26]
 801acf0:	f8ad 3014 	strh.w	r3, [sp, #20]
 801acf4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801acf8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801acfc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801ad00:	f8ad 3018 	strh.w	r3, [sp, #24]
 801ad04:	f8bd b012 	ldrh.w	fp, [sp, #18]
 801ad08:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 801ad0c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801ad10:	44dc      	add	ip, fp
 801ad12:	6830      	ldr	r0, [r6, #0]
 801ad14:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801ad18:	ebac 0c02 	sub.w	ip, ip, r2
 801ad1c:	f8d0 e000 	ldr.w	lr, [r0]
 801ad20:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801ad24:	fa1f fc8c 	uxth.w	ip, ip
 801ad28:	f8cd c000 	str.w	ip, [sp]
 801ad2c:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 801ad30:	47d8      	blx	fp
 801ad32:	f89a 3000 	ldrb.w	r3, [sl]
 801ad36:	f8ad 001a 	strh.w	r0, [sp, #26]
 801ad3a:	2b01      	cmp	r3, #1
 801ad3c:	d11e      	bne.n	801ad7c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>
 801ad3e:	e899 0003 	ldmia.w	r9, {r0, r1}
 801ad42:	e888 0003 	stmia.w	r8, {r0, r1}
 801ad46:	4640      	mov	r0, r8
 801ad48:	f7ff fbca 	bl	801a4e0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801ad4c:	6823      	ldr	r3, [r4, #0]
 801ad4e:	4641      	mov	r1, r8
 801ad50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ad52:	4620      	mov	r0, r4
 801ad54:	4798      	blx	r3
 801ad56:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801ad5a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801ad5e:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 801ad62:	4413      	add	r3, r2
 801ad64:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801ad68:	440a      	add	r2, r1
 801ad6a:	b21b      	sxth	r3, r3
 801ad6c:	b212      	sxth	r2, r2
 801ad6e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ad72:	4293      	cmp	r3, r2
 801ad74:	dbc6      	blt.n	801ad04 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 801ad76:	3501      	adds	r5, #1
 801ad78:	b2ad      	uxth	r5, r5
 801ad7a:	e79a      	b.n	801acb2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d6>
 801ad7c:	6823      	ldr	r3, [r4, #0]
 801ad7e:	4649      	mov	r1, r9
 801ad80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ad82:	e7e6      	b.n	801ad52 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 801ad84:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801ad88:	42ab      	cmp	r3, r5
 801ad8a:	f67f af73 	bls.w	801ac74 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 801ad8e:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801ad92:	ab07      	add	r3, sp, #28
 801ad94:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801ad98:	6851      	ldr	r1, [r2, #4]
 801ad9a:	c303      	stmia	r3!, {r0, r1}
 801ad9c:	a807      	add	r0, sp, #28
 801ad9e:	f7fc fc11 	bl	80175c4 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ada2:	b920      	cbnz	r0, 801adae <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d2>
 801ada4:	6823      	ldr	r3, [r4, #0]
 801ada6:	a907      	add	r1, sp, #28
 801ada8:	4620      	mov	r0, r4
 801adaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801adac:	4798      	blx	r3
 801adae:	3501      	adds	r5, #1
 801adb0:	b2ad      	uxth	r5, r5
 801adb2:	e7e7      	b.n	801ad84 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801adb4:	2000c704 	.word	0x2000c704
 801adb8:	2000c710 	.word	0x2000c710
 801adbc:	20000050 	.word	0x20000050
 801adc0:	2000c68c 	.word	0x2000c68c
 801adc4:	2000c682 	.word	0x2000c682
 801adc8:	2000c68a 	.word	0x2000c68a
 801adcc:	2000c680 	.word	0x2000c680
 801add0:	2000c684 	.word	0x2000c684

0801add4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801add4:	4b03      	ldr	r3, [pc, #12]	; (801ade4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801add6:	2200      	movs	r2, #0
 801add8:	801a      	strh	r2, [r3, #0]
 801adda:	805a      	strh	r2, [r3, #2]
 801addc:	809a      	strh	r2, [r3, #4]
 801adde:	80da      	strh	r2, [r3, #6]
 801ade0:	4770      	bx	lr
 801ade2:	bf00      	nop
 801ade4:	2000c710 	.word	0x2000c710

0801ade8 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 801ade8:	2000      	movs	r0, #0
 801adea:	4770      	bx	lr

0801adec <_ZNK8touchgfx4Font12getGSUBTableEv>:
 801adec:	2000      	movs	r0, #0
 801adee:	4770      	bx	lr

0801adf0 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801adf0:	b508      	push	{r3, lr}
 801adf2:	6803      	ldr	r3, [r0, #0]
 801adf4:	68db      	ldr	r3, [r3, #12]
 801adf6:	4798      	blx	r3
 801adf8:	b128      	cbz	r0, 801ae06 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801adfa:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801adfe:	7a80      	ldrb	r0, [r0, #10]
 801ae00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ae04:	4318      	orrs	r0, r3
 801ae06:	bd08      	pop	{r3, pc}

0801ae08 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 801ae08:	b40e      	push	{r1, r2, r3}
 801ae0a:	b533      	push	{r0, r1, r4, r5, lr}
 801ae0c:	ab05      	add	r3, sp, #20
 801ae0e:	f853 2b04 	ldr.w	r2, [r3], #4
 801ae12:	9301      	str	r3, [sp, #4]
 801ae14:	4b0a      	ldr	r3, [pc, #40]	; (801ae40 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 801ae16:	685c      	ldr	r4, [r3, #4]
 801ae18:	1061      	asrs	r1, r4, #1
 801ae1a:	07e4      	lsls	r4, r4, #31
 801ae1c:	eb00 0501 	add.w	r5, r0, r1
 801ae20:	bf46      	itte	mi
 801ae22:	681b      	ldrmi	r3, [r3, #0]
 801ae24:	5841      	ldrmi	r1, [r0, r1]
 801ae26:	681c      	ldrpl	r4, [r3, #0]
 801ae28:	4628      	mov	r0, r5
 801ae2a:	bf48      	it	mi
 801ae2c:	58cc      	ldrmi	r4, [r1, r3]
 801ae2e:	2100      	movs	r1, #0
 801ae30:	9b01      	ldr	r3, [sp, #4]
 801ae32:	47a0      	blx	r4
 801ae34:	b002      	add	sp, #8
 801ae36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ae3a:	b003      	add	sp, #12
 801ae3c:	4770      	bx	lr
 801ae3e:	bf00      	nop
 801ae40:	20000028 	.word	0x20000028

0801ae44 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 801ae44:	b40c      	push	{r2, r3}
 801ae46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ae48:	ab06      	add	r3, sp, #24
 801ae4a:	f853 2b04 	ldr.w	r2, [r3], #4
 801ae4e:	9301      	str	r3, [sp, #4]
 801ae50:	4b09      	ldr	r3, [pc, #36]	; (801ae78 <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 801ae52:	685d      	ldr	r5, [r3, #4]
 801ae54:	106c      	asrs	r4, r5, #1
 801ae56:	07ed      	lsls	r5, r5, #31
 801ae58:	eb00 0604 	add.w	r6, r0, r4
 801ae5c:	bf45      	ittet	mi
 801ae5e:	681b      	ldrmi	r3, [r3, #0]
 801ae60:	5900      	ldrmi	r0, [r0, r4]
 801ae62:	681c      	ldrpl	r4, [r3, #0]
 801ae64:	58c4      	ldrmi	r4, [r0, r3]
 801ae66:	4630      	mov	r0, r6
 801ae68:	9b01      	ldr	r3, [sp, #4]
 801ae6a:	47a0      	blx	r4
 801ae6c:	b002      	add	sp, #8
 801ae6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ae72:	b002      	add	sp, #8
 801ae74:	4770      	bx	lr
 801ae76:	bf00      	nop
 801ae78:	20000028 	.word	0x20000028

0801ae7c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801ae7c:	b40e      	push	{r1, r2, r3}
 801ae7e:	b530      	push	{r4, r5, lr}
 801ae80:	b098      	sub	sp, #96	; 0x60
 801ae82:	4604      	mov	r4, r0
 801ae84:	ab1b      	add	r3, sp, #108	; 0x6c
 801ae86:	a802      	add	r0, sp, #8
 801ae88:	f853 5b04 	ldr.w	r5, [r3], #4
 801ae8c:	9301      	str	r3, [sp, #4]
 801ae8e:	f001 f837 	bl	801bf00 <_ZN8touchgfx12TextProviderC1Ev>
 801ae92:	6823      	ldr	r3, [r4, #0]
 801ae94:	4620      	mov	r0, r4
 801ae96:	2401      	movs	r4, #1
 801ae98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ae9a:	4798      	blx	r3
 801ae9c:	9a01      	ldr	r2, [sp, #4]
 801ae9e:	4603      	mov	r3, r0
 801aea0:	4629      	mov	r1, r5
 801aea2:	a802      	add	r0, sp, #8
 801aea4:	f001 f849 	bl	801bf3a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801aea8:	a802      	add	r0, sp, #8
 801aeaa:	f001 f87f 	bl	801bfac <_ZN8touchgfx12TextProvider11getNextCharEv>
 801aeae:	b2a3      	uxth	r3, r4
 801aeb0:	b138      	cbz	r0, 801aec2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 801aeb2:	280a      	cmp	r0, #10
 801aeb4:	a802      	add	r0, sp, #8
 801aeb6:	bf04      	itt	eq
 801aeb8:	3301      	addeq	r3, #1
 801aeba:	b21c      	sxtheq	r4, r3
 801aebc:	f001 f876 	bl	801bfac <_ZN8touchgfx12TextProvider11getNextCharEv>
 801aec0:	e7f5      	b.n	801aeae <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 801aec2:	4618      	mov	r0, r3
 801aec4:	b018      	add	sp, #96	; 0x60
 801aec6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801aeca:	b003      	add	sp, #12
 801aecc:	4770      	bx	lr
	...

0801aed0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801aed0:	b40e      	push	{r1, r2, r3}
 801aed2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aed4:	b098      	sub	sp, #96	; 0x60
 801aed6:	4605      	mov	r5, r0
 801aed8:	4f25      	ldr	r7, [pc, #148]	; (801af70 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>)
 801aeda:	ab1d      	add	r3, sp, #116	; 0x74
 801aedc:	a802      	add	r0, sp, #8
 801aede:	ae18      	add	r6, sp, #96	; 0x60
 801aee0:	f853 4b04 	ldr.w	r4, [r3], #4
 801aee4:	9300      	str	r3, [sp, #0]
 801aee6:	f001 f80b 	bl	801bf00 <_ZN8touchgfx12TextProviderC1Ev>
 801aeea:	682b      	ldr	r3, [r5, #0]
 801aeec:	4628      	mov	r0, r5
 801aeee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801aef0:	4798      	blx	r3
 801aef2:	4621      	mov	r1, r4
 801aef4:	2400      	movs	r4, #0
 801aef6:	4603      	mov	r3, r0
 801aef8:	9a00      	ldr	r2, [sp, #0]
 801aefa:	a802      	add	r0, sp, #8
 801aefc:	f001 f81d 	bl	801bf3a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801af00:	f846 4d5c 	str.w	r4, [r6, #-92]!
 801af04:	462a      	mov	r2, r5
 801af06:	4633      	mov	r3, r6
 801af08:	4621      	mov	r1, r4
 801af0a:	a802      	add	r0, sp, #8
 801af0c:	f001 f97a 	bl	801c204 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801af10:	b340      	cbz	r0, 801af64 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x94>
 801af12:	280a      	cmp	r0, #10
 801af14:	d01f      	beq.n	801af56 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801af16:	9901      	ldr	r1, [sp, #4]
 801af18:	b1e9      	cbz	r1, 801af56 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801af1a:	7b4b      	ldrb	r3, [r1, #13]
 801af1c:	f891 c008 	ldrb.w	ip, [r1, #8]
 801af20:	f013 0f40 	tst.w	r3, #64	; 0x40
 801af24:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 801af28:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801af2c:	79c9      	ldrb	r1, [r1, #7]
 801af2e:	f40e 7e80 	and.w	lr, lr, #256	; 0x100
 801af32:	bf18      	it	ne
 801af34:	4638      	movne	r0, r7
 801af36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801af3a:	bf08      	it	eq
 801af3c:	2000      	moveq	r0, #0
 801af3e:	88aa      	ldrh	r2, [r5, #4]
 801af40:	ea41 010e 	orr.w	r1, r1, lr
 801af44:	ea43 030c 	orr.w	r3, r3, ip
 801af48:	440a      	add	r2, r1
 801af4a:	4303      	orrs	r3, r0
 801af4c:	1ad3      	subs	r3, r2, r3
 801af4e:	b29b      	uxth	r3, r3
 801af50:	42a3      	cmp	r3, r4
 801af52:	bfc8      	it	gt
 801af54:	b21c      	sxthgt	r4, r3
 801af56:	4633      	mov	r3, r6
 801af58:	462a      	mov	r2, r5
 801af5a:	2100      	movs	r1, #0
 801af5c:	a802      	add	r0, sp, #8
 801af5e:	f001 f951 	bl	801c204 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801af62:	e7d5      	b.n	801af10 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 801af64:	b2a0      	uxth	r0, r4
 801af66:	b018      	add	sp, #96	; 0x60
 801af68:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801af6c:	b003      	add	sp, #12
 801af6e:	4770      	bx	lr
 801af70:	fffffe00 	.word	0xfffffe00

0801af74 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801af74:	b40e      	push	{r1, r2, r3}
 801af76:	b570      	push	{r4, r5, r6, lr}
 801af78:	b099      	sub	sp, #100	; 0x64
 801af7a:	4604      	mov	r4, r0
 801af7c:	26ff      	movs	r6, #255	; 0xff
 801af7e:	ab1d      	add	r3, sp, #116	; 0x74
 801af80:	a802      	add	r0, sp, #8
 801af82:	f853 5b04 	ldr.w	r5, [r3], #4
 801af86:	9300      	str	r3, [sp, #0]
 801af88:	f000 ffba 	bl	801bf00 <_ZN8touchgfx12TextProviderC1Ev>
 801af8c:	6823      	ldr	r3, [r4, #0]
 801af8e:	4620      	mov	r0, r4
 801af90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801af92:	4798      	blx	r3
 801af94:	4629      	mov	r1, r5
 801af96:	4603      	mov	r3, r0
 801af98:	9a00      	ldr	r2, [sp, #0]
 801af9a:	a802      	add	r0, sp, #8
 801af9c:	ad18      	add	r5, sp, #96	; 0x60
 801af9e:	f000 ffcc 	bl	801bf3a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801afa2:	2100      	movs	r1, #0
 801afa4:	4622      	mov	r2, r4
 801afa6:	a802      	add	r0, sp, #8
 801afa8:	f845 1d5c 	str.w	r1, [r5, #-92]!
 801afac:	462b      	mov	r3, r5
 801afae:	f001 f929 	bl	801c204 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801afb2:	b190      	cbz	r0, 801afda <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 801afb4:	280a      	cmp	r0, #10
 801afb6:	d009      	beq.n	801afcc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 801afb8:	9a01      	ldr	r2, [sp, #4]
 801afba:	b13a      	cbz	r2, 801afcc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 801afbc:	7923      	ldrb	r3, [r4, #4]
 801afbe:	7a12      	ldrb	r2, [r2, #8]
 801afc0:	1a9b      	subs	r3, r3, r2
 801afc2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 801afc6:	429e      	cmp	r6, r3
 801afc8:	bf28      	it	cs
 801afca:	461e      	movcs	r6, r3
 801afcc:	462b      	mov	r3, r5
 801afce:	4622      	mov	r2, r4
 801afd0:	2100      	movs	r1, #0
 801afd2:	a802      	add	r0, sp, #8
 801afd4:	f001 f916 	bl	801c204 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801afd8:	e7eb      	b.n	801afb2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 801afda:	4630      	mov	r0, r6
 801afdc:	b019      	add	sp, #100	; 0x64
 801afde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801afe2:	b003      	add	sp, #12
 801afe4:	4770      	bx	lr

0801afe6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801afe6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afea:	b099      	sub	sp, #100	; 0x64
 801afec:	4606      	mov	r6, r0
 801afee:	4614      	mov	r4, r2
 801aff0:	4688      	mov	r8, r1
 801aff2:	a802      	add	r0, sp, #8
 801aff4:	461d      	mov	r5, r3
 801aff6:	f04f 0b00 	mov.w	fp, #0
 801affa:	f000 ff81 	bl	801bf00 <_ZN8touchgfx12TextProviderC1Ev>
 801affe:	6833      	ldr	r3, [r6, #0]
 801b000:	4630      	mov	r0, r6
 801b002:	465f      	mov	r7, fp
 801b004:	46da      	mov	sl, fp
 801b006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b008:	46d9      	mov	r9, fp
 801b00a:	4798      	blx	r3
 801b00c:	462a      	mov	r2, r5
 801b00e:	4603      	mov	r3, r0
 801b010:	4621      	mov	r1, r4
 801b012:	a802      	add	r0, sp, #8
 801b014:	f000 ff91 	bl	801bf3a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801b018:	ab01      	add	r3, sp, #4
 801b01a:	4632      	mov	r2, r6
 801b01c:	4641      	mov	r1, r8
 801b01e:	a802      	add	r0, sp, #8
 801b020:	f8cd 9004 	str.w	r9, [sp, #4]
 801b024:	f001 f8ee 	bl	801c204 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b028:	4605      	mov	r5, r0
 801b02a:	b108      	cbz	r0, 801b030 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x4a>
 801b02c:	280a      	cmp	r0, #10
 801b02e:	d10b      	bne.n	801b048 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x62>
 801b030:	4557      	cmp	r7, sl
 801b032:	bf38      	it	cc
 801b034:	4657      	movcc	r7, sl
 801b036:	f04f 0a00 	mov.w	sl, #0
 801b03a:	b91d      	cbnz	r5, 801b044 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 801b03c:	4638      	mov	r0, r7
 801b03e:	b019      	add	sp, #100	; 0x64
 801b040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b044:	46ab      	mov	fp, r5
 801b046:	e7e7      	b.n	801b018 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x32>
 801b048:	9a01      	ldr	r2, [sp, #4]
 801b04a:	2a00      	cmp	r2, #0
 801b04c:	d0fa      	beq.n	801b044 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 801b04e:	f992 400d 	ldrsb.w	r4, [r2, #13]
 801b052:	4659      	mov	r1, fp
 801b054:	6833      	ldr	r3, [r6, #0]
 801b056:	f404 7080 	and.w	r0, r4, #256	; 0x100
 801b05a:	7a94      	ldrb	r4, [r2, #10]
 801b05c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b05e:	4304      	orrs	r4, r0
 801b060:	4630      	mov	r0, r6
 801b062:	8895      	ldrh	r5, [r2, #4]
 801b064:	4798      	blx	r3
 801b066:	4420      	add	r0, r4
 801b068:	4450      	add	r0, sl
 801b06a:	fa1f fa80 	uxth.w	sl, r0
 801b06e:	e7e4      	b.n	801b03a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x54>

0801b070 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801b070:	b513      	push	{r0, r1, r4, lr}
 801b072:	1d01      	adds	r1, r0, #4
 801b074:	4603      	mov	r3, r0
 801b076:	466a      	mov	r2, sp
 801b078:	c903      	ldmia	r1, {r0, r1}
 801b07a:	e882 0003 	stmia.w	r2, {r0, r1}
 801b07e:	2100      	movs	r1, #0
 801b080:	4618      	mov	r0, r3
 801b082:	9100      	str	r1, [sp, #0]
 801b084:	6819      	ldr	r1, [r3, #0]
 801b086:	690c      	ldr	r4, [r1, #16]
 801b088:	4611      	mov	r1, r2
 801b08a:	47a0      	blx	r4
 801b08c:	b002      	add	sp, #8
 801b08e:	bd10      	pop	{r4, pc}

0801b090 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801b090:	b538      	push	{r3, r4, r5, lr}
 801b092:	680b      	ldr	r3, [r1, #0]
 801b094:	460c      	mov	r4, r1
 801b096:	4605      	mov	r5, r0
 801b098:	68db      	ldr	r3, [r3, #12]
 801b09a:	4798      	blx	r3
 801b09c:	6823      	ldr	r3, [r4, #0]
 801b09e:	4620      	mov	r0, r4
 801b0a0:	4629      	mov	r1, r5
 801b0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b0a4:	4798      	blx	r3
 801b0a6:	4628      	mov	r0, r5
 801b0a8:	bd38      	pop	{r3, r4, r5, pc}

0801b0aa <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801b0aa:	b410      	push	{r4}
 801b0ac:	880a      	ldrh	r2, [r1, #0]
 801b0ae:	8884      	ldrh	r4, [r0, #4]
 801b0b0:	4422      	add	r2, r4
 801b0b2:	800a      	strh	r2, [r1, #0]
 801b0b4:	884a      	ldrh	r2, [r1, #2]
 801b0b6:	88c4      	ldrh	r4, [r0, #6]
 801b0b8:	4422      	add	r2, r4
 801b0ba:	804a      	strh	r2, [r1, #2]
 801b0bc:	6940      	ldr	r0, [r0, #20]
 801b0be:	b120      	cbz	r0, 801b0ca <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801b0c0:	6803      	ldr	r3, [r0, #0]
 801b0c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b0c8:	4718      	bx	r3
 801b0ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b0ce:	4770      	bx	lr

0801b0d0 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801b0d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b0d2:	460b      	mov	r3, r1
 801b0d4:	b085      	sub	sp, #20
 801b0d6:	4604      	mov	r4, r0
 801b0d8:	b901      	cbnz	r1, 801b0dc <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801b0da:	b1fa      	cbz	r2, 801b11c <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 801b0dc:	1d27      	adds	r7, r4, #4
 801b0de:	466e      	mov	r6, sp
 801b0e0:	ad02      	add	r5, sp, #8
 801b0e2:	e897 0003 	ldmia.w	r7, {r0, r1}
 801b0e6:	e886 0003 	stmia.w	r6, {r0, r1}
 801b0ea:	88e1      	ldrh	r1, [r4, #6]
 801b0ec:	4620      	mov	r0, r4
 801b0ee:	440a      	add	r2, r1
 801b0f0:	88a1      	ldrh	r1, [r4, #4]
 801b0f2:	4419      	add	r1, r3
 801b0f4:	6823      	ldr	r3, [r4, #0]
 801b0f6:	b212      	sxth	r2, r2
 801b0f8:	b209      	sxth	r1, r1
 801b0fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b0fc:	4798      	blx	r3
 801b0fe:	e897 0003 	ldmia.w	r7, {r0, r1}
 801b102:	e885 0003 	stmia.w	r5, {r0, r1}
 801b106:	6960      	ldr	r0, [r4, #20]
 801b108:	b150      	cbz	r0, 801b120 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 801b10a:	6803      	ldr	r3, [r0, #0]
 801b10c:	4631      	mov	r1, r6
 801b10e:	691b      	ldr	r3, [r3, #16]
 801b110:	4798      	blx	r3
 801b112:	6960      	ldr	r0, [r4, #20]
 801b114:	6803      	ldr	r3, [r0, #0]
 801b116:	691b      	ldr	r3, [r3, #16]
 801b118:	4629      	mov	r1, r5
 801b11a:	4798      	blx	r3
 801b11c:	b005      	add	sp, #20
 801b11e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b120:	f7ff fb78 	bl	801a814 <_ZN8touchgfx11Application11getInstanceEv>
 801b124:	6803      	ldr	r3, [r0, #0]
 801b126:	4631      	mov	r1, r6
 801b128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b12a:	4798      	blx	r3
 801b12c:	f7ff fb72 	bl	801a814 <_ZN8touchgfx11Application11getInstanceEv>
 801b130:	6803      	ldr	r3, [r0, #0]
 801b132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b134:	e7f0      	b.n	801b118 <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

0801b136 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801b136:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b138:	8882      	ldrh	r2, [r0, #4]
 801b13a:	4605      	mov	r5, r0
 801b13c:	880b      	ldrh	r3, [r1, #0]
 801b13e:	460c      	mov	r4, r1
 801b140:	4413      	add	r3, r2
 801b142:	800b      	strh	r3, [r1, #0]
 801b144:	884b      	ldrh	r3, [r1, #2]
 801b146:	88c2      	ldrh	r2, [r0, #6]
 801b148:	4413      	add	r3, r2
 801b14a:	4602      	mov	r2, r0
 801b14c:	804b      	strh	r3, [r1, #2]
 801b14e:	466b      	mov	r3, sp
 801b150:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801b154:	6851      	ldr	r1, [r2, #4]
 801b156:	c303      	stmia	r3!, {r0, r1}
 801b158:	4621      	mov	r1, r4
 801b15a:	4668      	mov	r0, sp
 801b15c:	f7fc f9ee 	bl	801753c <_ZN8touchgfx4RectaNERKS0_>
 801b160:	466b      	mov	r3, sp
 801b162:	cb03      	ldmia	r3!, {r0, r1}
 801b164:	6020      	str	r0, [r4, #0]
 801b166:	6061      	str	r1, [r4, #4]
 801b168:	6968      	ldr	r0, [r5, #20]
 801b16a:	b128      	cbz	r0, 801b178 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801b16c:	6803      	ldr	r3, [r0, #0]
 801b16e:	691b      	ldr	r3, [r3, #16]
 801b170:	4621      	mov	r1, r4
 801b172:	4798      	blx	r3
 801b174:	b003      	add	sp, #12
 801b176:	bd30      	pop	{r4, r5, pc}
 801b178:	f7ff fb4c 	bl	801a814 <_ZN8touchgfx11Application11getInstanceEv>
 801b17c:	6803      	ldr	r3, [r0, #0]
 801b17e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b180:	e7f6      	b.n	801b170 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801b182 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801b182:	b570      	push	{r4, r5, r6, lr}
 801b184:	8882      	ldrh	r2, [r0, #4]
 801b186:	460c      	mov	r4, r1
 801b188:	880b      	ldrh	r3, [r1, #0]
 801b18a:	4605      	mov	r5, r0
 801b18c:	4413      	add	r3, r2
 801b18e:	800b      	strh	r3, [r1, #0]
 801b190:	884b      	ldrh	r3, [r1, #2]
 801b192:	88c2      	ldrh	r2, [r0, #6]
 801b194:	4413      	add	r3, r2
 801b196:	804b      	strh	r3, [r1, #2]
 801b198:	1d01      	adds	r1, r0, #4
 801b19a:	4620      	mov	r0, r4
 801b19c:	f7fc f9ce 	bl	801753c <_ZN8touchgfx4RectaNERKS0_>
 801b1a0:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801b1a4:	b153      	cbz	r3, 801b1bc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801b1a6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801b1aa:	b13b      	cbz	r3, 801b1bc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801b1ac:	6968      	ldr	r0, [r5, #20]
 801b1ae:	b128      	cbz	r0, 801b1bc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801b1b0:	6803      	ldr	r3, [r0, #0]
 801b1b2:	4621      	mov	r1, r4
 801b1b4:	6a1b      	ldr	r3, [r3, #32]
 801b1b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b1ba:	4718      	bx	r3
 801b1bc:	bd70      	pop	{r4, r5, r6, pc}

0801b1be <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801b1be:	b510      	push	{r4, lr}
 801b1c0:	2300      	movs	r3, #0
 801b1c2:	4604      	mov	r4, r0
 801b1c4:	4608      	mov	r0, r1
 801b1c6:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801b1ca:	8023      	strh	r3, [r4, #0]
 801b1cc:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b1d0:	8063      	strh	r3, [r4, #2]
 801b1d2:	6803      	ldr	r3, [r0, #0]
 801b1d4:	80a1      	strh	r1, [r4, #4]
 801b1d6:	4621      	mov	r1, r4
 801b1d8:	80e2      	strh	r2, [r4, #6]
 801b1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b1dc:	4798      	blx	r3
 801b1de:	4620      	mov	r0, r4
 801b1e0:	bd10      	pop	{r4, pc}
	...

0801b1e4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801b1e4:	b530      	push	{r4, r5, lr}
 801b1e6:	8083      	strh	r3, [r0, #4]
 801b1e8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801b1ec:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801b1f0:	7183      	strb	r3, [r0, #6]
 801b1f2:	79c3      	ldrb	r3, [r0, #7]
 801b1f4:	6101      	str	r1, [r0, #16]
 801b1f6:	f365 0306 	bfi	r3, r5, #0, #7
 801b1fa:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801b1fe:	8282      	strh	r2, [r0, #20]
 801b200:	f365 13c7 	bfi	r3, r5, #7, #1
 801b204:	71c3      	strb	r3, [r0, #7]
 801b206:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801b20a:	7203      	strb	r3, [r0, #8]
 801b20c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801b210:	7243      	strb	r3, [r0, #9]
 801b212:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801b216:	8143      	strh	r3, [r0, #10]
 801b218:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801b21c:	8183      	strh	r3, [r0, #12]
 801b21e:	4b01      	ldr	r3, [pc, #4]	; (801b224 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801b220:	6003      	str	r3, [r0, #0]
 801b222:	bd30      	pop	{r4, r5, pc}
 801b224:	0802a3fc 	.word	0x0802a3fc

0801b228 <_ZNK8touchgfx9ConstFont4findEt>:
 801b228:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b22a:	8a84      	ldrh	r4, [r0, #20]
 801b22c:	2500      	movs	r5, #0
 801b22e:	260e      	movs	r6, #14
 801b230:	3c01      	subs	r4, #1
 801b232:	42a5      	cmp	r5, r4
 801b234:	dc0c      	bgt.n	801b250 <_ZNK8touchgfx9ConstFont4findEt+0x28>
 801b236:	192a      	adds	r2, r5, r4
 801b238:	6903      	ldr	r3, [r0, #16]
 801b23a:	1052      	asrs	r2, r2, #1
 801b23c:	fb06 3302 	mla	r3, r6, r2, r3
 801b240:	889f      	ldrh	r7, [r3, #4]
 801b242:	428f      	cmp	r7, r1
 801b244:	d901      	bls.n	801b24a <_ZNK8touchgfx9ConstFont4findEt+0x22>
 801b246:	1e54      	subs	r4, r2, #1
 801b248:	e7f3      	b.n	801b232 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801b24a:	d202      	bcs.n	801b252 <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 801b24c:	1c55      	adds	r5, r2, #1
 801b24e:	e7f0      	b.n	801b232 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801b250:	2300      	movs	r3, #0
 801b252:	4618      	mov	r0, r3
 801b254:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b256 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801b256:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b258:	4605      	mov	r5, r0
 801b25a:	4617      	mov	r7, r2
 801b25c:	461e      	mov	r6, r3
 801b25e:	f7ff ffe3 	bl	801b228 <_ZNK8touchgfx9ConstFont4findEt>
 801b262:	b9e0      	cbnz	r0, 801b29e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 801b264:	b911      	cbnz	r1, 801b26c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 801b266:	2400      	movs	r4, #0
 801b268:	4620      	mov	r0, r4
 801b26a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b26c:	290a      	cmp	r1, #10
 801b26e:	d0fa      	beq.n	801b266 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801b270:	682b      	ldr	r3, [r5, #0]
 801b272:	4628      	mov	r0, r5
 801b274:	691b      	ldr	r3, [r3, #16]
 801b276:	4798      	blx	r3
 801b278:	4601      	mov	r1, r0
 801b27a:	4628      	mov	r0, r5
 801b27c:	f7ff ffd4 	bl	801b228 <_ZNK8touchgfx9ConstFont4findEt>
 801b280:	4604      	mov	r4, r0
 801b282:	2800      	cmp	r0, #0
 801b284:	d0ef      	beq.n	801b266 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801b286:	682b      	ldr	r3, [r5, #0]
 801b288:	4621      	mov	r1, r4
 801b28a:	4628      	mov	r0, r5
 801b28c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b28e:	4798      	blx	r3
 801b290:	6038      	str	r0, [r7, #0]
 801b292:	682b      	ldr	r3, [r5, #0]
 801b294:	4628      	mov	r0, r5
 801b296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b298:	4798      	blx	r3
 801b29a:	7030      	strb	r0, [r6, #0]
 801b29c:	e7e4      	b.n	801b268 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 801b29e:	4604      	mov	r4, r0
 801b2a0:	e7f1      	b.n	801b286 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

0801b2a2 <_ZN8touchgfx6memsetEPvhm>:
 801b2a2:	4402      	add	r2, r0
 801b2a4:	4290      	cmp	r0, r2
 801b2a6:	d002      	beq.n	801b2ae <_ZN8touchgfx6memsetEPvhm+0xc>
 801b2a8:	f800 1b01 	strb.w	r1, [r0], #1
 801b2ac:	e7fa      	b.n	801b2a4 <_ZN8touchgfx6memsetEPvhm+0x2>
 801b2ae:	4770      	bx	lr

0801b2b0 <_ZN8touchgfx3clzEl>:
 801b2b0:	b1e8      	cbz	r0, 801b2ee <_ZN8touchgfx3clzEl+0x3e>
 801b2b2:	2800      	cmp	r0, #0
 801b2b4:	bfb8      	it	lt
 801b2b6:	4240      	neglt	r0, r0
 801b2b8:	0c03      	lsrs	r3, r0, #16
 801b2ba:	041b      	lsls	r3, r3, #16
 801b2bc:	b9ab      	cbnz	r3, 801b2ea <_ZN8touchgfx3clzEl+0x3a>
 801b2be:	0400      	lsls	r0, r0, #16
 801b2c0:	2310      	movs	r3, #16
 801b2c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801b2c6:	bf04      	itt	eq
 801b2c8:	0200      	lsleq	r0, r0, #8
 801b2ca:	3308      	addeq	r3, #8
 801b2cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801b2d0:	bf04      	itt	eq
 801b2d2:	0100      	lsleq	r0, r0, #4
 801b2d4:	3304      	addeq	r3, #4
 801b2d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801b2da:	bf04      	itt	eq
 801b2dc:	0080      	lsleq	r0, r0, #2
 801b2de:	3302      	addeq	r3, #2
 801b2e0:	2800      	cmp	r0, #0
 801b2e2:	bfa8      	it	ge
 801b2e4:	3301      	addge	r3, #1
 801b2e6:	1e58      	subs	r0, r3, #1
 801b2e8:	4770      	bx	lr
 801b2ea:	2300      	movs	r3, #0
 801b2ec:	e7e9      	b.n	801b2c2 <_ZN8touchgfx3clzEl+0x12>
 801b2ee:	201f      	movs	r0, #31
 801b2f0:	4770      	bx	lr

0801b2f2 <_ZN8touchgfx6muldivElllRl>:
 801b2f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b2f6:	4604      	mov	r4, r0
 801b2f8:	4698      	mov	r8, r3
 801b2fa:	2601      	movs	r6, #1
 801b2fc:	f7ff ffd8 	bl	801b2b0 <_ZN8touchgfx3clzEl>
 801b300:	2c00      	cmp	r4, #0
 801b302:	fa04 f500 	lsl.w	r5, r4, r0
 801b306:	fa06 f600 	lsl.w	r6, r6, r0
 801b30a:	bfba      	itte	lt
 801b30c:	f04f 37ff 	movlt.w	r7, #4294967295
 801b310:	4264      	neglt	r4, r4
 801b312:	2701      	movge	r7, #1
 801b314:	2900      	cmp	r1, #0
 801b316:	f106 36ff 	add.w	r6, r6, #4294967295
 801b31a:	bfbc      	itt	lt
 801b31c:	4249      	neglt	r1, r1
 801b31e:	427f      	neglt	r7, r7
 801b320:	2a00      	cmp	r2, #0
 801b322:	fa41 fc00 	asr.w	ip, r1, r0
 801b326:	ea01 0106 	and.w	r1, r1, r6
 801b32a:	bfb8      	it	lt
 801b32c:	427f      	neglt	r7, r7
 801b32e:	fb04 f401 	mul.w	r4, r4, r1
 801b332:	fb95 f3f2 	sdiv	r3, r5, r2
 801b336:	fb02 5513 	mls	r5, r2, r3, r5
 801b33a:	bfb8      	it	lt
 801b33c:	4252      	neglt	r2, r2
 801b33e:	fb94 f0f2 	sdiv	r0, r4, r2
 801b342:	fb02 4410 	mls	r4, r2, r0, r4
 801b346:	fb0c 4405 	mla	r4, ip, r5, r4
 801b34a:	fb94 f1f2 	sdiv	r1, r4, r2
 801b34e:	4408      	add	r0, r1
 801b350:	fb02 4211 	mls	r2, r2, r1, r4
 801b354:	fb0c 0003 	mla	r0, ip, r3, r0
 801b358:	f8c8 2000 	str.w	r2, [r8]
 801b35c:	4378      	muls	r0, r7
 801b35e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b362 <_ZN8touchgfx10ClickEventD1Ev>:
 801b362:	4770      	bx	lr

0801b364 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801b364:	2000      	movs	r0, #0
 801b366:	4770      	bx	lr

0801b368 <_ZN8touchgfx9DragEventD1Ev>:
 801b368:	4770      	bx	lr

0801b36a <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801b36a:	2001      	movs	r0, #1
 801b36c:	4770      	bx	lr

0801b36e <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801b36e:	2002      	movs	r0, #2
 801b370:	4770      	bx	lr

0801b372 <_ZN8touchgfx12GestureEventD1Ev>:
 801b372:	4770      	bx	lr

0801b374 <_ZN8touchgfx10ClickEventD0Ev>:
 801b374:	b510      	push	{r4, lr}
 801b376:	4604      	mov	r4, r0
 801b378:	210c      	movs	r1, #12
 801b37a:	f00b fa11 	bl	80267a0 <_ZdlPvj>
 801b37e:	4620      	mov	r0, r4
 801b380:	bd10      	pop	{r4, pc}

0801b382 <_ZN8touchgfx9DragEventD0Ev>:
 801b382:	b510      	push	{r4, lr}
 801b384:	4604      	mov	r4, r0
 801b386:	2110      	movs	r1, #16
 801b388:	f00b fa0a 	bl	80267a0 <_ZdlPvj>
 801b38c:	4620      	mov	r0, r4
 801b38e:	bd10      	pop	{r4, pc}

0801b390 <_ZN8touchgfx12GestureEventD0Ev>:
 801b390:	b510      	push	{r4, lr}
 801b392:	4604      	mov	r4, r0
 801b394:	210c      	movs	r1, #12
 801b396:	f00b fa03 	bl	80267a0 <_ZdlPvj>
 801b39a:	4620      	mov	r0, r4
 801b39c:	bd10      	pop	{r4, pc}
	...

0801b3a0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801b3a0:	b530      	push	{r4, r5, lr}
 801b3a2:	460d      	mov	r5, r1
 801b3a4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801b3a6:	b087      	sub	sp, #28
 801b3a8:	4604      	mov	r4, r0
 801b3aa:	b301      	cbz	r1, 801b3ee <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801b3ac:	a801      	add	r0, sp, #4
 801b3ae:	f7ff ff06 	bl	801b1be <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b3b2:	892a      	ldrh	r2, [r5, #8]
 801b3b4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801b3b8:	7928      	ldrb	r0, [r5, #4]
 801b3ba:	1ad2      	subs	r2, r2, r3
 801b3bc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801b3be:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801b3c2:	441a      	add	r2, r3
 801b3c4:	896b      	ldrh	r3, [r5, #10]
 801b3c6:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801b3ca:	f88d 0010 	strb.w	r0, [sp, #16]
 801b3ce:	1b5b      	subs	r3, r3, r5
 801b3d0:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801b3d2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801b3d4:	442b      	add	r3, r5
 801b3d6:	4d07      	ldr	r5, [pc, #28]	; (801b3f4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801b3d8:	f8ad 1012 	strh.w	r1, [sp, #18]
 801b3dc:	a903      	add	r1, sp, #12
 801b3de:	9503      	str	r5, [sp, #12]
 801b3e0:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b3e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b3e8:	6803      	ldr	r3, [r0, #0]
 801b3ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b3ec:	4798      	blx	r3
 801b3ee:	b007      	add	sp, #28
 801b3f0:	bd30      	pop	{r4, r5, pc}
 801b3f2:	bf00      	nop
 801b3f4:	0802a478 	.word	0x0802a478

0801b3f8 <_ZNK8touchgfx4Rect9intersectEss>:
 801b3f8:	b510      	push	{r4, lr}
 801b3fa:	f9b0 3000 	ldrsh.w	r3, [r0]
 801b3fe:	428b      	cmp	r3, r1
 801b400:	dc10      	bgt.n	801b424 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801b402:	8884      	ldrh	r4, [r0, #4]
 801b404:	4423      	add	r3, r4
 801b406:	b21b      	sxth	r3, r3
 801b408:	4299      	cmp	r1, r3
 801b40a:	da0b      	bge.n	801b424 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801b40c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801b410:	4293      	cmp	r3, r2
 801b412:	dc07      	bgt.n	801b424 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801b414:	88c0      	ldrh	r0, [r0, #6]
 801b416:	4418      	add	r0, r3
 801b418:	b200      	sxth	r0, r0
 801b41a:	4282      	cmp	r2, r0
 801b41c:	bfac      	ite	ge
 801b41e:	2000      	movge	r0, #0
 801b420:	2001      	movlt	r0, #1
 801b422:	bd10      	pop	{r4, pc}
 801b424:	2000      	movs	r0, #0
 801b426:	e7fc      	b.n	801b422 <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801b428 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801b428:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b42a:	460c      	mov	r4, r1
 801b42c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801b42e:	b089      	sub	sp, #36	; 0x24
 801b430:	4605      	mov	r5, r0
 801b432:	2900      	cmp	r1, #0
 801b434:	d054      	beq.n	801b4e0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801b436:	4668      	mov	r0, sp
 801b438:	f7ff fec1 	bl	801b1be <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b43c:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801b43e:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801b440:	4668      	mov	r0, sp
 801b442:	8922      	ldrh	r2, [r4, #8]
 801b444:	88e1      	ldrh	r1, [r4, #6]
 801b446:	443a      	add	r2, r7
 801b448:	4431      	add	r1, r6
 801b44a:	b212      	sxth	r2, r2
 801b44c:	b209      	sxth	r1, r1
 801b44e:	f7ff ffd3 	bl	801b3f8 <_ZNK8touchgfx4Rect9intersectEss>
 801b452:	b1d0      	cbz	r0, 801b48a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801b454:	89a2      	ldrh	r2, [r4, #12]
 801b456:	4668      	mov	r0, sp
 801b458:	8961      	ldrh	r1, [r4, #10]
 801b45a:	443a      	add	r2, r7
 801b45c:	4431      	add	r1, r6
 801b45e:	b212      	sxth	r2, r2
 801b460:	b209      	sxth	r1, r1
 801b462:	f7ff ffc9 	bl	801b3f8 <_ZNK8touchgfx4Rect9intersectEss>
 801b466:	4603      	mov	r3, r0
 801b468:	b978      	cbnz	r0, 801b48a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801b46a:	4a1e      	ldr	r2, [pc, #120]	; (801b4e4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801b46c:	a904      	add	r1, sp, #16
 801b46e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801b470:	9204      	str	r2, [sp, #16]
 801b472:	2202      	movs	r2, #2
 801b474:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b478:	f88d 2014 	strb.w	r2, [sp, #20]
 801b47c:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b480:	f8ad 301a 	strh.w	r3, [sp, #26]
 801b484:	6803      	ldr	r3, [r0, #0]
 801b486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b488:	4798      	blx	r3
 801b48a:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801b48c:	a802      	add	r0, sp, #8
 801b48e:	f7ff fe96 	bl	801b1be <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b492:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801b496:	88e0      	ldrh	r0, [r4, #6]
 801b498:	8961      	ldrh	r1, [r4, #10]
 801b49a:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801b49e:	1a80      	subs	r0, r0, r2
 801b4a0:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801b4a4:	1a89      	subs	r1, r1, r2
 801b4a6:	8923      	ldrh	r3, [r4, #8]
 801b4a8:	4460      	add	r0, ip
 801b4aa:	89a2      	ldrh	r2, [r4, #12]
 801b4ac:	4461      	add	r1, ip
 801b4ae:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801b4b0:	eba3 030e 	sub.w	r3, r3, lr
 801b4b4:	eba2 020e 	sub.w	r2, r2, lr
 801b4b8:	f8ad 0016 	strh.w	r0, [sp, #22]
 801b4bc:	7927      	ldrb	r7, [r4, #4]
 801b4be:	4433      	add	r3, r6
 801b4c0:	4432      	add	r2, r6
 801b4c2:	4c09      	ldr	r4, [pc, #36]	; (801b4e8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801b4c4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801b4c6:	f8ad 101a 	strh.w	r1, [sp, #26]
 801b4ca:	a904      	add	r1, sp, #16
 801b4cc:	9404      	str	r4, [sp, #16]
 801b4ce:	f88d 7014 	strb.w	r7, [sp, #20]
 801b4d2:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b4d6:	f8ad 201c 	strh.w	r2, [sp, #28]
 801b4da:	6803      	ldr	r3, [r0, #0]
 801b4dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b4de:	4798      	blx	r3
 801b4e0:	b009      	add	sp, #36	; 0x24
 801b4e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b4e4:	0802a450 	.word	0x0802a450
 801b4e8:	0802a464 	.word	0x0802a464

0801b4ec <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801b4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4f0:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801b4f4:	b0a1      	sub	sp, #132	; 0x84
 801b4f6:	4604      	mov	r4, r0
 801b4f8:	460d      	mov	r5, r1
 801b4fa:	790b      	ldrb	r3, [r1, #4]
 801b4fc:	f1b9 0f00 	cmp.w	r9, #0
 801b500:	d00f      	beq.n	801b522 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801b502:	2b00      	cmp	r3, #0
 801b504:	f040 80a2 	bne.w	801b64c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801b508:	b021      	add	sp, #132	; 0x84
 801b50a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b50e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801b512:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801b516:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801b51a:	1d20      	adds	r0, r4, #4
 801b51c:	f7fb ff5c 	bl	80173d8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801b520:	e094      	b.n	801b64c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801b522:	2b00      	cmp	r3, #0
 801b524:	d1f0      	bne.n	801b508 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801b526:	4b5f      	ldr	r3, [pc, #380]	; (801b6a4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801b528:	681b      	ldr	r3, [r3, #0]
 801b52a:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801b52e:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801b532:	f1ba 0f03 	cmp.w	sl, #3
 801b536:	ddea      	ble.n	801b50e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 801b538:	f1ba 0f0c 	cmp.w	sl, #12
 801b53c:	f04f 0303 	mov.w	r3, #3
 801b540:	f04f 0600 	mov.w	r6, #0
 801b544:	4958      	ldr	r1, [pc, #352]	; (801b6a8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801b546:	bfd8      	it	le
 801b548:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801b54c:	960a      	str	r6, [sp, #40]	; 0x28
 801b54e:	bfd8      	it	le
 801b550:	fb92 f3f3 	sdivle	r3, r2, r3
 801b554:	9301      	str	r3, [sp, #4]
 801b556:	4b55      	ldr	r3, [pc, #340]	; (801b6ac <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801b558:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b55c:	4b54      	ldr	r3, [pc, #336]	; (801b6b0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801b55e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801b562:	2248      	movs	r2, #72	; 0x48
 801b564:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b568:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801b56c:	ab0e      	add	r3, sp, #56	; 0x38
 801b56e:	4618      	mov	r0, r3
 801b570:	f00b fc06 	bl	8026d80 <memcpy>
 801b574:	f04f 32ff 	mov.w	r2, #4294967295
 801b578:	f8cd a008 	str.w	sl, [sp, #8]
 801b57c:	e9cd 2006 	strd	r2, r0, [sp, #24]
 801b580:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801b584:	46b3      	mov	fp, r6
 801b586:	fb93 f3f2 	sdiv	r3, r3, r2
 801b58a:	b29b      	uxth	r3, r3
 801b58c:	9303      	str	r3, [sp, #12]
 801b58e:	2300      	movs	r3, #0
 801b590:	9a03      	ldr	r2, [sp, #12]
 801b592:	88ef      	ldrh	r7, [r5, #6]
 801b594:	a80a      	add	r0, sp, #40	; 0x28
 801b596:	9309      	str	r3, [sp, #36]	; 0x24
 801b598:	9b07      	ldr	r3, [sp, #28]
 801b59a:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801b59e:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801b5a2:	fb13 f302 	smulbb	r3, r3, r2
 801b5a6:	b29b      	uxth	r3, r3
 801b5a8:	9304      	str	r3, [sp, #16]
 801b5aa:	9b07      	ldr	r3, [sp, #28]
 801b5ac:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801b5b0:	685b      	ldr	r3, [r3, #4]
 801b5b2:	fb13 f302 	smulbb	r3, r3, r2
 801b5b6:	b29b      	uxth	r3, r3
 801b5b8:	9305      	str	r3, [sp, #20]
 801b5ba:	9b04      	ldr	r3, [sp, #16]
 801b5bc:	441f      	add	r7, r3
 801b5be:	9b05      	ldr	r3, [sp, #20]
 801b5c0:	4498      	add	r8, r3
 801b5c2:	b23f      	sxth	r7, r7
 801b5c4:	fa0f f888 	sxth.w	r8, r8
 801b5c8:	4639      	mov	r1, r7
 801b5ca:	4642      	mov	r2, r8
 801b5cc:	f7ff ff14 	bl	801b3f8 <_ZNK8touchgfx4Rect9intersectEss>
 801b5d0:	b380      	cbz	r0, 801b634 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801b5d2:	4639      	mov	r1, r7
 801b5d4:	ab09      	add	r3, sp, #36	; 0x24
 801b5d6:	4642      	mov	r2, r8
 801b5d8:	1d20      	adds	r0, r4, #4
 801b5da:	f7fb fefd 	bl	80173d8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801b5de:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b5e0:	b341      	cbz	r1, 801b634 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801b5e2:	4549      	cmp	r1, r9
 801b5e4:	d026      	beq.n	801b634 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801b5e6:	a80c      	add	r0, sp, #48	; 0x30
 801b5e8:	f7ff fde9 	bl	801b1be <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b5ec:	2002      	movs	r0, #2
 801b5ee:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801b5f2:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801b5f6:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801b5fa:	fb92 f2f0 	sdiv	r2, r2, r0
 801b5fe:	440a      	add	r2, r1
 801b600:	1a99      	subs	r1, r3, r2
 801b602:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801b606:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801b60a:	fb93 f3f0 	sdiv	r3, r3, r0
 801b60e:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801b612:	4403      	add	r3, r0
 801b614:	1ad3      	subs	r3, r2, r3
 801b616:	9a06      	ldr	r2, [sp, #24]
 801b618:	435b      	muls	r3, r3
 801b61a:	fb01 3301 	mla	r3, r1, r1, r3
 801b61e:	4293      	cmp	r3, r2
 801b620:	d208      	bcs.n	801b634 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801b622:	9a04      	ldr	r2, [sp, #16]
 801b624:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801b628:	86a2      	strh	r2, [r4, #52]	; 0x34
 801b62a:	9a05      	ldr	r2, [sp, #20]
 801b62c:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801b630:	86e2      	strh	r2, [r4, #54]	; 0x36
 801b632:	9306      	str	r3, [sp, #24]
 801b634:	f10b 0b02 	add.w	fp, fp, #2
 801b638:	f1bb 0f08 	cmp.w	fp, #8
 801b63c:	dda7      	ble.n	801b58e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 801b63e:	9b02      	ldr	r3, [sp, #8]
 801b640:	3601      	adds	r6, #1
 801b642:	4453      	add	r3, sl
 801b644:	9302      	str	r3, [sp, #8]
 801b646:	9b01      	ldr	r3, [sp, #4]
 801b648:	42b3      	cmp	r3, r6
 801b64a:	d199      	bne.n	801b580 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 801b64c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801b64e:	2900      	cmp	r1, #0
 801b650:	f43f af5a 	beq.w	801b508 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801b654:	a80c      	add	r0, sp, #48	; 0x30
 801b656:	2600      	movs	r6, #0
 801b658:	f7ff fdb1 	bl	801b1be <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b65c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801b660:	88ea      	ldrh	r2, [r5, #6]
 801b662:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801b666:	1ad2      	subs	r2, r2, r3
 801b668:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801b66a:	7929      	ldrb	r1, [r5, #4]
 801b66c:	441a      	add	r2, r3
 801b66e:	892b      	ldrh	r3, [r5, #8]
 801b670:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801b674:	a90e      	add	r1, sp, #56	; 0x38
 801b676:	1a1b      	subs	r3, r3, r0
 801b678:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801b67a:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801b67e:	4403      	add	r3, r0
 801b680:	480c      	ldr	r0, [pc, #48]	; (801b6b4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 801b682:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801b686:	900e      	str	r0, [sp, #56]	; 0x38
 801b688:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801b68a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801b68e:	6803      	ldr	r3, [r0, #0]
 801b690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b692:	4798      	blx	r3
 801b694:	792b      	ldrb	r3, [r5, #4]
 801b696:	2b00      	cmp	r3, #0
 801b698:	f43f af36 	beq.w	801b508 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801b69c:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801b6a0:	e732      	b.n	801b508 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801b6a2:	bf00      	nop
 801b6a4:	2000c68c 	.word	0x2000c68c
 801b6a8:	08028288 	.word	0x08028288
 801b6ac:	2000c680 	.word	0x2000c680
 801b6b0:	2000c682 	.word	0x2000c682
 801b6b4:	0802a450 	.word	0x0802a450

0801b6b8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801b6b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b6ba:	4604      	mov	r4, r0
 801b6bc:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801b6c0:	3201      	adds	r2, #1
 801b6c2:	d112      	bne.n	801b6ea <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801b6c4:	2500      	movs	r5, #0
 801b6c6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801b6ca:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b6ce:	6803      	ldr	r3, [r0, #0]
 801b6d0:	9500      	str	r5, [sp, #0]
 801b6d2:	466d      	mov	r5, sp
 801b6d4:	f8ad 1004 	strh.w	r1, [sp, #4]
 801b6d8:	f8ad 2006 	strh.w	r2, [sp, #6]
 801b6dc:	4629      	mov	r1, r5
 801b6de:	6a1b      	ldr	r3, [r3, #32]
 801b6e0:	4798      	blx	r3
 801b6e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b6e6:	e884 0003 	stmia.w	r4, {r0, r1}
 801b6ea:	4620      	mov	r0, r4
 801b6ec:	b003      	add	sp, #12
 801b6ee:	bd30      	pop	{r4, r5, pc}

0801b6f0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801b6f0:	b513      	push	{r0, r1, r4, lr}
 801b6f2:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801b6f6:	4604      	mov	r4, r0
 801b6f8:	3301      	adds	r3, #1
 801b6fa:	d109      	bne.n	801b710 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801b6fc:	4601      	mov	r1, r0
 801b6fe:	4668      	mov	r0, sp
 801b700:	f7ff fd5d 	bl	801b1be <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b704:	f8bd 3000 	ldrh.w	r3, [sp]
 801b708:	8423      	strh	r3, [r4, #32]
 801b70a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b70e:	8463      	strh	r3, [r4, #34]	; 0x22
 801b710:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801b714:	b002      	add	sp, #8
 801b716:	bd10      	pop	{r4, pc}

0801b718 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801b718:	b513      	push	{r0, r1, r4, lr}
 801b71a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801b71e:	4604      	mov	r4, r0
 801b720:	3301      	adds	r3, #1
 801b722:	d109      	bne.n	801b738 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801b724:	4601      	mov	r1, r0
 801b726:	4668      	mov	r0, sp
 801b728:	f7ff fd49 	bl	801b1be <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b72c:	f8bd 3000 	ldrh.w	r3, [sp]
 801b730:	8423      	strh	r3, [r4, #32]
 801b732:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b736:	8463      	strh	r3, [r4, #34]	; 0x22
 801b738:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801b73c:	b002      	add	sp, #8
 801b73e:	bd10      	pop	{r4, pc}

0801b740 <_ZN8touchgfx6ScreenC1Ev>:
 801b740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b742:	4605      	mov	r5, r0
 801b744:	4b17      	ldr	r3, [pc, #92]	; (801b7a4 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801b746:	2200      	movs	r2, #0
 801b748:	4917      	ldr	r1, [pc, #92]	; (801b7a8 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801b74a:	f845 3b04 	str.w	r3, [r5], #4
 801b74e:	2301      	movs	r3, #1
 801b750:	8102      	strh	r2, [r0, #8]
 801b752:	4604      	mov	r4, r0
 801b754:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 801b758:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801b75c:	4b13      	ldr	r3, [pc, #76]	; (801b7ac <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801b75e:	8142      	strh	r2, [r0, #10]
 801b760:	f9b3 7000 	ldrsh.w	r7, [r3]
 801b764:	4b12      	ldr	r3, [pc, #72]	; (801b7b0 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 801b766:	8182      	strh	r2, [r0, #12]
 801b768:	81c2      	strh	r2, [r0, #14]
 801b76a:	8202      	strh	r2, [r0, #16]
 801b76c:	8242      	strh	r2, [r0, #18]
 801b76e:	8282      	strh	r2, [r0, #20]
 801b770:	82c2      	strh	r2, [r0, #22]
 801b772:	6202      	str	r2, [r0, #32]
 801b774:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801b778:	6342      	str	r2, [r0, #52]	; 0x34
 801b77a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b77e:	6041      	str	r1, [r0, #4]
 801b780:	4611      	mov	r1, r2
 801b782:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801b786:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 801b78a:	4628      	mov	r0, r5
 801b78c:	f7f5 f919 	bl	80109c2 <_ZN8touchgfx8Drawable5setXYEss>
 801b790:	4639      	mov	r1, r7
 801b792:	4628      	mov	r0, r5
 801b794:	f7f5 f933 	bl	80109fe <_ZN8touchgfx8Drawable8setWidthEs>
 801b798:	4628      	mov	r0, r5
 801b79a:	4631      	mov	r1, r6
 801b79c:	f7f5 f93e 	bl	8010a1c <_ZN8touchgfx8Drawable9setHeightEs>
 801b7a0:	4620      	mov	r0, r4
 801b7a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b7a4:	0802a48c 	.word	0x0802a48c
 801b7a8:	08029160 	.word	0x08029160
 801b7ac:	2000c680 	.word	0x2000c680
 801b7b0:	2000c682 	.word	0x2000c682

0801b7b4 <_ZN8touchgfx6Screen4drawEv>:
 801b7b4:	4b09      	ldr	r3, [pc, #36]	; (801b7dc <_ZN8touchgfx6Screen4drawEv+0x28>)
 801b7b6:	b507      	push	{r0, r1, r2, lr}
 801b7b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b7bc:	2100      	movs	r1, #0
 801b7be:	4b08      	ldr	r3, [pc, #32]	; (801b7e0 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801b7c0:	9100      	str	r1, [sp, #0]
 801b7c2:	4669      	mov	r1, sp
 801b7c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b7c8:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b7cc:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b7d0:	6803      	ldr	r3, [r0, #0]
 801b7d2:	689b      	ldr	r3, [r3, #8]
 801b7d4:	4798      	blx	r3
 801b7d6:	b003      	add	sp, #12
 801b7d8:	f85d fb04 	ldr.w	pc, [sp], #4
 801b7dc:	2000c680 	.word	0x2000c680
 801b7e0:	2000c682 	.word	0x2000c682

0801b7e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801b7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7e8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801b7ec:	b089      	sub	sp, #36	; 0x24
 801b7ee:	4680      	mov	r8, r0
 801b7f0:	460c      	mov	r4, r1
 801b7f2:	4615      	mov	r5, r2
 801b7f4:	b16b      	cbz	r3, 801b812 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801b7f6:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801b7fa:	b153      	cbz	r3, 801b812 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801b7fc:	4628      	mov	r0, r5
 801b7fe:	f7ff ff5b 	bl	801b6b8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b802:	4621      	mov	r1, r4
 801b804:	f7fe ffc2 	bl	801a78c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b808:	69eb      	ldr	r3, [r5, #28]
 801b80a:	b928      	cbnz	r0, 801b818 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 801b80c:	461d      	mov	r5, r3
 801b80e:	2b00      	cmp	r3, #0
 801b810:	d1f4      	bne.n	801b7fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 801b812:	b009      	add	sp, #36	; 0x24
 801b814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b818:	ae04      	add	r6, sp, #16
 801b81a:	2b00      	cmp	r3, #0
 801b81c:	d051      	beq.n	801b8c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801b81e:	682b      	ldr	r3, [r5, #0]
 801b820:	4629      	mov	r1, r5
 801b822:	a802      	add	r0, sp, #8
 801b824:	68db      	ldr	r3, [r3, #12]
 801b826:	4798      	blx	r3
 801b828:	4628      	mov	r0, r5
 801b82a:	f7ff ff61 	bl	801b6f0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801b82e:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801b832:	4407      	add	r7, r0
 801b834:	4628      	mov	r0, r5
 801b836:	f7ff ff6f 	bl	801b718 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801b83a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b83e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801b842:	b23f      	sxth	r7, r7
 801b844:	4418      	add	r0, r3
 801b846:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801b84a:	4621      	mov	r1, r4
 801b84c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b850:	f8ad 0012 	strh.w	r0, [sp, #18]
 801b854:	4630      	mov	r0, r6
 801b856:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b85a:	f8ad 7010 	strh.w	r7, [sp, #16]
 801b85e:	f7fb fe6d 	bl	801753c <_ZN8touchgfx4RectaNERKS0_>
 801b862:	4628      	mov	r0, r5
 801b864:	f7ff ff28 	bl	801b6b8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b868:	ab06      	add	r3, sp, #24
 801b86a:	4602      	mov	r2, r0
 801b86c:	e896 0003 	ldmia.w	r6, {r0, r1}
 801b870:	e883 0003 	stmia.w	r3, {r0, r1}
 801b874:	4611      	mov	r1, r2
 801b876:	4618      	mov	r0, r3
 801b878:	f7fb fe60 	bl	801753c <_ZN8touchgfx4RectaNERKS0_>
 801b87c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801b880:	f9b4 1000 	ldrsh.w	r1, [r4]
 801b884:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801b888:	4299      	cmp	r1, r3
 801b88a:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801b88e:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801b892:	d10b      	bne.n	801b8ac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801b894:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b898:	4552      	cmp	r2, sl
 801b89a:	d107      	bne.n	801b8ac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801b89c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801b8a0:	455a      	cmp	r2, fp
 801b8a2:	d103      	bne.n	801b8ac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801b8a4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801b8a8:	454a      	cmp	r2, r9
 801b8aa:	d00a      	beq.n	801b8c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801b8ac:	f1bb 0f00 	cmp.w	fp, #0
 801b8b0:	d002      	beq.n	801b8b8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd4>
 801b8b2:	f1b9 0f00 	cmp.w	r9, #0
 801b8b6:	d12e      	bne.n	801b916 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x132>
 801b8b8:	69ea      	ldr	r2, [r5, #28]
 801b8ba:	4621      	mov	r1, r4
 801b8bc:	4640      	mov	r0, r8
 801b8be:	f7ff ff91 	bl	801b7e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b8c2:	4628      	mov	r0, r5
 801b8c4:	f7ff fef8 	bl	801b6b8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b8c8:	6861      	ldr	r1, [r4, #4]
 801b8ca:	4602      	mov	r2, r0
 801b8cc:	4633      	mov	r3, r6
 801b8ce:	6820      	ldr	r0, [r4, #0]
 801b8d0:	c303      	stmia	r3!, {r0, r1}
 801b8d2:	4611      	mov	r1, r2
 801b8d4:	4630      	mov	r0, r6
 801b8d6:	f7fb fe31 	bl	801753c <_ZN8touchgfx4RectaNERKS0_>
 801b8da:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801b8de:	2b00      	cmp	r3, #0
 801b8e0:	d097      	beq.n	801b812 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801b8e2:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801b8e6:	2b00      	cmp	r3, #0
 801b8e8:	d093      	beq.n	801b812 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801b8ea:	4628      	mov	r0, r5
 801b8ec:	f7ff ff00 	bl	801b6f0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801b8f0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801b8f4:	1a18      	subs	r0, r3, r0
 801b8f6:	f8ad 0010 	strh.w	r0, [sp, #16]
 801b8fa:	4628      	mov	r0, r5
 801b8fc:	f7ff ff0c 	bl	801b718 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801b900:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801b904:	4631      	mov	r1, r6
 801b906:	1a18      	subs	r0, r3, r0
 801b908:	f8ad 0012 	strh.w	r0, [sp, #18]
 801b90c:	4628      	mov	r0, r5
 801b90e:	682b      	ldr	r3, [r5, #0]
 801b910:	689b      	ldr	r3, [r3, #8]
 801b912:	4798      	blx	r3
 801b914:	e77d      	b.n	801b812 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801b916:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b91a:	fa1f f08a 	uxth.w	r0, sl
 801b91e:	4552      	cmp	r2, sl
 801b920:	9000      	str	r0, [sp, #0]
 801b922:	da12      	bge.n	801b94a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x166>
 801b924:	9301      	str	r3, [sp, #4]
 801b926:	9b00      	ldr	r3, [sp, #0]
 801b928:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b92c:	f8ad 2012 	strh.w	r2, [sp, #18]
 801b930:	1a9a      	subs	r2, r3, r2
 801b932:	f8ad 1010 	strh.w	r1, [sp, #16]
 801b936:	4631      	mov	r1, r6
 801b938:	f8ad 0014 	strh.w	r0, [sp, #20]
 801b93c:	4640      	mov	r0, r8
 801b93e:	f8ad 2016 	strh.w	r2, [sp, #22]
 801b942:	69ea      	ldr	r2, [r5, #28]
 801b944:	f7ff ff4e 	bl	801b7e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b948:	9b01      	ldr	r3, [sp, #4]
 801b94a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801b94e:	b29f      	uxth	r7, r3
 801b950:	429a      	cmp	r2, r3
 801b952:	da0d      	bge.n	801b970 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18c>
 801b954:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b958:	1aba      	subs	r2, r7, r2
 801b95a:	f8ad a012 	strh.w	sl, [sp, #18]
 801b95e:	4631      	mov	r1, r6
 801b960:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b964:	4640      	mov	r0, r8
 801b966:	f8ad 9016 	strh.w	r9, [sp, #22]
 801b96a:	69ea      	ldr	r2, [r5, #28]
 801b96c:	f7ff ff3a 	bl	801b7e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b970:	8822      	ldrh	r2, [r4, #0]
 801b972:	445f      	add	r7, fp
 801b974:	88a3      	ldrh	r3, [r4, #4]
 801b976:	b2bf      	uxth	r7, r7
 801b978:	4413      	add	r3, r2
 801b97a:	b23a      	sxth	r2, r7
 801b97c:	b29b      	uxth	r3, r3
 801b97e:	b219      	sxth	r1, r3
 801b980:	4291      	cmp	r1, r2
 801b982:	dd0d      	ble.n	801b9a0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1bc>
 801b984:	1bdb      	subs	r3, r3, r7
 801b986:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b98a:	f8ad a012 	strh.w	sl, [sp, #18]
 801b98e:	4631      	mov	r1, r6
 801b990:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b994:	4640      	mov	r0, r8
 801b996:	f8ad 9016 	strh.w	r9, [sp, #22]
 801b99a:	69ea      	ldr	r2, [r5, #28]
 801b99c:	f7ff ff22 	bl	801b7e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b9a0:	88e2      	ldrh	r2, [r4, #6]
 801b9a2:	8863      	ldrh	r3, [r4, #2]
 801b9a4:	4413      	add	r3, r2
 801b9a6:	9a00      	ldr	r2, [sp, #0]
 801b9a8:	444a      	add	r2, r9
 801b9aa:	b29b      	uxth	r3, r3
 801b9ac:	fa1f f982 	uxth.w	r9, r2
 801b9b0:	b219      	sxth	r1, r3
 801b9b2:	fa0f f289 	sxth.w	r2, r9
 801b9b6:	428a      	cmp	r2, r1
 801b9b8:	da83      	bge.n	801b8c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801b9ba:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b9be:	eba3 0309 	sub.w	r3, r3, r9
 801b9c2:	f9b4 0000 	ldrsh.w	r0, [r4]
 801b9c6:	f8ad 1014 	strh.w	r1, [sp, #20]
 801b9ca:	4631      	mov	r1, r6
 801b9cc:	f8ad 0010 	strh.w	r0, [sp, #16]
 801b9d0:	f8ad 2012 	strh.w	r2, [sp, #18]
 801b9d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b9d8:	69ea      	ldr	r2, [r5, #28]
 801b9da:	e76f      	b.n	801b8bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>

0801b9dc <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801b9dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b9de:	2300      	movs	r3, #0
 801b9e0:	aa02      	add	r2, sp, #8
 801b9e2:	4604      	mov	r4, r0
 801b9e4:	3004      	adds	r0, #4
 801b9e6:	f842 3d04 	str.w	r3, [r2, #-4]!
 801b9ea:	460d      	mov	r5, r1
 801b9ec:	f7fb fe7d 	bl	80176ea <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801b9f0:	9a01      	ldr	r2, [sp, #4]
 801b9f2:	b11a      	cbz	r2, 801b9fc <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801b9f4:	4629      	mov	r1, r5
 801b9f6:	4620      	mov	r0, r4
 801b9f8:	f7ff fef4 	bl	801b7e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b9fc:	b003      	add	sp, #12
 801b9fe:	bd30      	pop	{r4, r5, pc}

0801ba00 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801ba00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ba02:	4602      	mov	r2, r0
 801ba04:	4604      	mov	r4, r0
 801ba06:	460d      	mov	r5, r1
 801ba08:	466b      	mov	r3, sp
 801ba0a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801ba0e:	6851      	ldr	r1, [r2, #4]
 801ba10:	c303      	stmia	r3!, {r0, r1}
 801ba12:	4629      	mov	r1, r5
 801ba14:	4668      	mov	r0, sp
 801ba16:	f7fb fd91 	bl	801753c <_ZN8touchgfx4RectaNERKS0_>
 801ba1a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801ba1e:	4669      	mov	r1, sp
 801ba20:	b123      	cbz	r3, 801ba2c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801ba22:	4620      	mov	r0, r4
 801ba24:	f7ff ffda 	bl	801b9dc <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801ba28:	b003      	add	sp, #12
 801ba2a:	bd30      	pop	{r4, r5, pc}
 801ba2c:	1d20      	adds	r0, r4, #4
 801ba2e:	f7fb fe23 	bl	8017678 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801ba32:	e7f9      	b.n	801ba28 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801ba34 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801ba34:	460b      	mov	r3, r1
 801ba36:	680a      	ldr	r2, [r1, #0]
 801ba38:	1d01      	adds	r1, r0, #4
 801ba3a:	6952      	ldr	r2, [r2, #20]
 801ba3c:	4618      	mov	r0, r3
 801ba3e:	4710      	bx	r2

0801ba40 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 801ba40:	f011 0f40 	tst.w	r1, #64	; 0x40
 801ba44:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 801ba48:	4b03      	ldr	r3, [pc, #12]	; (801ba58 <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x18>)
 801ba4a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801ba4e:	bf08      	it	eq
 801ba50:	2300      	moveq	r3, #0
 801ba52:	4308      	orrs	r0, r1
 801ba54:	4318      	orrs	r0, r3
 801ba56:	4770      	bx	lr
 801ba58:	fffffe00 	.word	0xfffffe00

0801ba5c <_ZN8touchgfx9GlyphNode6setTopEs>:
 801ba5c:	7b43      	ldrb	r3, [r0, #13]
 801ba5e:	7201      	strb	r1, [r0, #8]
 801ba60:	b289      	uxth	r1, r1
 801ba62:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 801ba66:	05ca      	lsls	r2, r1, #23
 801ba68:	bf48      	it	mi
 801ba6a:	f043 0320 	orrmi.w	r3, r3, #32
 801ba6e:	7343      	strb	r3, [r0, #13]
 801ba70:	058b      	lsls	r3, r1, #22
 801ba72:	bf42      	ittt	mi
 801ba74:	7b43      	ldrbmi	r3, [r0, #13]
 801ba76:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801ba7a:	7343      	strbmi	r3, [r0, #13]
 801ba7c:	4770      	bx	lr

0801ba7e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801ba7e:	b530      	push	{r4, r5, lr}
 801ba80:	2500      	movs	r5, #0
 801ba82:	2401      	movs	r4, #1
 801ba84:	6843      	ldr	r3, [r0, #4]
 801ba86:	b913      	cbnz	r3, 801ba8e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801ba88:	6803      	ldr	r3, [r0, #0]
 801ba8a:	b1f3      	cbz	r3, 801baca <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801ba8c:	6043      	str	r3, [r0, #4]
 801ba8e:	7c03      	ldrb	r3, [r0, #16]
 801ba90:	b143      	cbz	r3, 801baa4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801ba92:	68c3      	ldr	r3, [r0, #12]
 801ba94:	b12b      	cbz	r3, 801baa2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801ba96:	881a      	ldrh	r2, [r3, #0]
 801ba98:	b11a      	cbz	r2, 801baa2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801ba9a:	1c9a      	adds	r2, r3, #2
 801ba9c:	60c2      	str	r2, [r0, #12]
 801ba9e:	8818      	ldrh	r0, [r3, #0]
 801baa0:	bd30      	pop	{r4, r5, pc}
 801baa2:	7405      	strb	r5, [r0, #16]
 801baa4:	6843      	ldr	r3, [r0, #4]
 801baa6:	8819      	ldrh	r1, [r3, #0]
 801baa8:	b179      	cbz	r1, 801baca <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801baaa:	1c9a      	adds	r2, r3, #2
 801baac:	2902      	cmp	r1, #2
 801baae:	6042      	str	r2, [r0, #4]
 801bab0:	d1f5      	bne.n	801ba9e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801bab2:	6883      	ldr	r3, [r0, #8]
 801bab4:	1d1a      	adds	r2, r3, #4
 801bab6:	6082      	str	r2, [r0, #8]
 801bab8:	681b      	ldr	r3, [r3, #0]
 801baba:	60c3      	str	r3, [r0, #12]
 801babc:	2b00      	cmp	r3, #0
 801babe:	d0e1      	beq.n	801ba84 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801bac0:	881b      	ldrh	r3, [r3, #0]
 801bac2:	2b00      	cmp	r3, #0
 801bac4:	d0de      	beq.n	801ba84 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801bac6:	7404      	strb	r4, [r0, #16]
 801bac8:	e7dc      	b.n	801ba84 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801baca:	2000      	movs	r0, #0
 801bacc:	e7e8      	b.n	801baa0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801bace <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801bace:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bad0:	4605      	mov	r5, r0
 801bad2:	4608      	mov	r0, r1
 801bad4:	b1f1      	cbz	r1, 801bb14 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801bad6:	f105 0440 	add.w	r4, r5, #64	; 0x40
 801bada:	460b      	mov	r3, r1
 801badc:	f101 0708 	add.w	r7, r1, #8
 801bae0:	4622      	mov	r2, r4
 801bae2:	6818      	ldr	r0, [r3, #0]
 801bae4:	3308      	adds	r3, #8
 801bae6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801baea:	4626      	mov	r6, r4
 801baec:	42bb      	cmp	r3, r7
 801baee:	c603      	stmia	r6!, {r0, r1}
 801baf0:	4634      	mov	r4, r6
 801baf2:	d1f6      	bne.n	801bae2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801baf4:	6818      	ldr	r0, [r3, #0]
 801baf6:	6030      	str	r0, [r6, #0]
 801baf8:	4610      	mov	r0, r2
 801bafa:	889b      	ldrh	r3, [r3, #4]
 801bafc:	80b3      	strh	r3, [r6, #4]
 801bafe:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801bb02:	015b      	lsls	r3, r3, #5
 801bb04:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801bb08:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 801bb0c:	430b      	orrs	r3, r1
 801bb0e:	425b      	negs	r3, r3
 801bb10:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 801bb14:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801bb16 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801bb16:	b538      	push	{r3, r4, r5, lr}
 801bb18:	460c      	mov	r4, r1
 801bb1a:	6811      	ldr	r1, [r2, #0]
 801bb1c:	4610      	mov	r0, r2
 801bb1e:	68cd      	ldr	r5, [r1, #12]
 801bb20:	4619      	mov	r1, r3
 801bb22:	47a8      	blx	r5
 801bb24:	2800      	cmp	r0, #0
 801bb26:	bf08      	it	eq
 801bb28:	4620      	moveq	r0, r4
 801bb2a:	bd38      	pop	{r3, r4, r5, pc}

0801bb2c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801bb2c:	b570      	push	{r4, r5, r6, lr}
 801bb2e:	8810      	ldrh	r0, [r2, #0]
 801bb30:	4298      	cmp	r0, r3
 801bb32:	d817      	bhi.n	801bb64 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801bb34:	1e48      	subs	r0, r1, #1
 801bb36:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801bb3a:	4298      	cmp	r0, r3
 801bb3c:	d312      	bcc.n	801bb64 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801bb3e:	2400      	movs	r4, #0
 801bb40:	428c      	cmp	r4, r1
 801bb42:	d20f      	bcs.n	801bb64 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801bb44:	1860      	adds	r0, r4, r1
 801bb46:	1040      	asrs	r0, r0, #1
 801bb48:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801bb4c:	0085      	lsls	r5, r0, #2
 801bb4e:	42b3      	cmp	r3, r6
 801bb50:	d902      	bls.n	801bb58 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801bb52:	3001      	adds	r0, #1
 801bb54:	b284      	uxth	r4, r0
 801bb56:	e7f3      	b.n	801bb40 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801bb58:	d102      	bne.n	801bb60 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 801bb5a:	442a      	add	r2, r5
 801bb5c:	8850      	ldrh	r0, [r2, #2]
 801bb5e:	bd70      	pop	{r4, r5, r6, pc}
 801bb60:	b281      	uxth	r1, r0
 801bb62:	e7ed      	b.n	801bb40 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801bb64:	2000      	movs	r0, #0
 801bb66:	e7fa      	b.n	801bb5e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>

0801bb68 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 801bb68:	b510      	push	{r4, lr}
 801bb6a:	8ac3      	ldrh	r3, [r0, #22]
 801bb6c:	428b      	cmp	r3, r1
 801bb6e:	d805      	bhi.n	801bb7c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 801bb70:	4b07      	ldr	r3, [pc, #28]	; (801bb90 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 801bb72:	21fd      	movs	r1, #253	; 0xfd
 801bb74:	4a07      	ldr	r2, [pc, #28]	; (801bb94 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 801bb76:	4808      	ldr	r0, [pc, #32]	; (801bb98 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 801bb78:	f00a fe40 	bl	80267fc <__assert_func>
 801bb7c:	8a83      	ldrh	r3, [r0, #20]
 801bb7e:	240a      	movs	r4, #10
 801bb80:	4419      	add	r1, r3
 801bb82:	fbb1 f3f4 	udiv	r3, r1, r4
 801bb86:	fb04 1113 	mls	r1, r4, r3, r1
 801bb8a:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801bb8e:	bd10      	pop	{r4, pc}
 801bb90:	0802a4d9 	.word	0x0802a4d9
 801bb94:	0802a908 	.word	0x0802a908
 801bb98:	0802a4e7 	.word	0x0802a4e7

0801bb9c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 801bb9c:	b508      	push	{r3, lr}
 801bb9e:	8ac3      	ldrh	r3, [r0, #22]
 801bba0:	428b      	cmp	r3, r1
 801bba2:	d805      	bhi.n	801bbb0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 801bba4:	4b07      	ldr	r3, [pc, #28]	; (801bbc4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 801bba6:	21d3      	movs	r1, #211	; 0xd3
 801bba8:	4a07      	ldr	r2, [pc, #28]	; (801bbc8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 801bbaa:	4808      	ldr	r0, [pc, #32]	; (801bbcc <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 801bbac:	f00a fe26 	bl	80267fc <__assert_func>
 801bbb0:	8a83      	ldrh	r3, [r0, #20]
 801bbb2:	220a      	movs	r2, #10
 801bbb4:	4419      	add	r1, r3
 801bbb6:	fbb1 f3f2 	udiv	r3, r1, r2
 801bbba:	fb02 1113 	mls	r1, r2, r3, r1
 801bbbe:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 801bbc2:	bd08      	pop	{r3, pc}
 801bbc4:	0802a4d9 	.word	0x0802a4d9
 801bbc8:	0802a658 	.word	0x0802a658
 801bbcc:	0802a4e7 	.word	0x0802a4e7

0801bbd0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801bbd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bbd4:	4604      	mov	r4, r0
 801bbd6:	4688      	mov	r8, r1
 801bbd8:	4615      	mov	r5, r2
 801bbda:	b94a      	cbnz	r2, 801bbf0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20>
 801bbdc:	4691      	mov	r9, r2
 801bbde:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801bbe2:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801bbe6:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801bbea:	4648      	mov	r0, r9
 801bbec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbf0:	f100 0640 	add.w	r6, r0, #64	; 0x40
 801bbf4:	8892      	ldrh	r2, [r2, #4]
 801bbf6:	462b      	mov	r3, r5
 801bbf8:	f105 0c08 	add.w	ip, r5, #8
 801bbfc:	46b3      	mov	fp, r6
 801bbfe:	6818      	ldr	r0, [r3, #0]
 801bc00:	3308      	adds	r3, #8
 801bc02:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801bc06:	4637      	mov	r7, r6
 801bc08:	4563      	cmp	r3, ip
 801bc0a:	c703      	stmia	r7!, {r0, r1}
 801bc0c:	463e      	mov	r6, r7
 801bc0e:	d1f6      	bne.n	801bbfe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2e>
 801bc10:	6818      	ldr	r0, [r3, #0]
 801bc12:	46d9      	mov	r9, fp
 801bc14:	6038      	str	r0, [r7, #0]
 801bc16:	889b      	ldrh	r3, [r3, #4]
 801bc18:	80bb      	strh	r3, [r7, #4]
 801bc1a:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 801bc1e:	f894 704d 	ldrb.w	r7, [r4, #77]	; 0x4d
 801bc22:	18d3      	adds	r3, r2, r3
 801bc24:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 801bc28:	b298      	uxth	r0, r3
 801bc2a:	f40a 7180 	and.w	r1, sl, #256	; 0x100
 801bc2e:	f894 a047 	ldrb.w	sl, [r4, #71]	; 0x47
 801bc32:	281d      	cmp	r0, #29
 801bc34:	ea4a 0a01 	orr.w	sl, sl, r1
 801bc38:	fa1f f68a 	uxth.w	r6, sl
 801bc3c:	d842      	bhi.n	801bcc4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf4>
 801bc3e:	2301      	movs	r3, #1
 801bc40:	4950      	ldr	r1, [pc, #320]	; (801bd84 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>)
 801bc42:	ea4f 0aea 	mov.w	sl, sl, asr #3
 801bc46:	4083      	lsls	r3, r0
 801bc48:	420b      	tst	r3, r1
 801bc4a:	d114      	bne.n	801bc76 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801bc4c:	f413 7f60 	tst.w	r3, #896	; 0x380
 801bc50:	d03c      	beq.n	801bccc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfc>
 801bc52:	fa1f fa8a 	uxth.w	sl, sl
 801bc56:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801bc5a:	4658      	mov	r0, fp
 801bc5c:	eba1 010a 	sub.w	r1, r1, sl
 801bc60:	b209      	sxth	r1, r1
 801bc62:	f7ff fefb 	bl	801ba5c <_ZN8touchgfx9GlyphNode6setTopEs>
 801bc66:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 801bc6a:	1b86      	subs	r6, r0, r6
 801bc6c:	eba6 0a0a 	sub.w	sl, r6, sl
 801bc70:	f8a4 a050 	strh.w	sl, [r4, #80]	; 0x50
 801bc74:	e7b9      	b.n	801bbea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801bc76:	2100      	movs	r1, #0
 801bc78:	f104 001a 	add.w	r0, r4, #26
 801bc7c:	f7ff ff8e 	bl	801bb9c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801bc80:	f640 6333 	movw	r3, #3635	; 0xe33
 801bc84:	4601      	mov	r1, r0
 801bc86:	4298      	cmp	r0, r3
 801bc88:	d10a      	bne.n	801bca0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd0>
 801bc8a:	f8d8 3000 	ldr.w	r3, [r8]
 801bc8e:	4640      	mov	r0, r8
 801bc90:	68db      	ldr	r3, [r3, #12]
 801bc92:	4798      	blx	r3
 801bc94:	7b41      	ldrb	r1, [r0, #13]
 801bc96:	7a00      	ldrb	r0, [r0, #8]
 801bc98:	f7ff fed2 	bl	801ba40 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801bc9c:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801bca0:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 801bca4:	4658      	mov	r0, fp
 801bca6:	4431      	add	r1, r6
 801bca8:	4451      	add	r1, sl
 801bcaa:	b209      	sxth	r1, r1
 801bcac:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 801bcb0:	f7ff fed4 	bl	801ba5c <_ZN8touchgfx9GlyphNode6setTopEs>
 801bcb4:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801bcb8:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801bcbc:	1a9b      	subs	r3, r3, r2
 801bcbe:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801bcc2:	e792      	b.n	801bbea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801bcc4:	f640 631b 	movw	r3, #3611	; 0xe1b
 801bcc8:	429a      	cmp	r2, r3
 801bcca:	d005      	beq.n	801bcd8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x108>
 801bccc:	f022 0302 	bic.w	r3, r2, #2
 801bcd0:	f640 611d 	movw	r1, #3613	; 0xe1d
 801bcd4:	428b      	cmp	r3, r1
 801bcd6:	d119      	bne.n	801bd0c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13c>
 801bcd8:	1e53      	subs	r3, r2, #1
 801bcda:	4629      	mov	r1, r5
 801bcdc:	4642      	mov	r2, r8
 801bcde:	4620      	mov	r0, r4
 801bce0:	b29b      	uxth	r3, r3
 801bce2:	f7ff ff18 	bl	801bb16 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801bce6:	7b41      	ldrb	r1, [r0, #13]
 801bce8:	7a00      	ldrb	r0, [r0, #8]
 801bcea:	f7ff fea9 	bl	801ba40 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801bcee:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 801bcf2:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801bcf6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801bcfa:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801bcfe:	4313      	orrs	r3, r2
 801bd00:	115a      	asrs	r2, r3, #5
 801bd02:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801bd06:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801bd0a:	e02e      	b.n	801bd6a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801bd0c:	4639      	mov	r1, r7
 801bd0e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801bd12:	f7ff fe95 	bl	801ba40 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801bd16:	f640 6109 	movw	r1, #3593	; 0xe09
 801bd1a:	f022 0310 	bic.w	r3, r2, #16
 801bd1e:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801bd22:	428b      	cmp	r3, r1
 801bd24:	d003      	beq.n	801bd2e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15e>
 801bd26:	f640 6313 	movw	r3, #3603	; 0xe13
 801bd2a:	429a      	cmp	r2, r3
 801bd2c:	d127      	bne.n	801bd7e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ae>
 801bd2e:	b27f      	sxtb	r7, r7
 801bd30:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801bd34:	4629      	mov	r1, r5
 801bd36:	4620      	mov	r0, r4
 801bd38:	f407 7780 	and.w	r7, r7, #256	; 0x100
 801bd3c:	431f      	orrs	r7, r3
 801bd3e:	f640 6313 	movw	r3, #3603	; 0xe13
 801bd42:	429a      	cmp	r2, r3
 801bd44:	bf14      	ite	ne
 801bd46:	f102 33ff 	addne.w	r3, r2, #4294967295
 801bd4a:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801bd4e:	4642      	mov	r2, r8
 801bd50:	bf18      	it	ne
 801bd52:	b29b      	uxthne	r3, r3
 801bd54:	f7ff fedf 	bl	801bb16 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801bd58:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801bd5c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801bd60:	7a83      	ldrb	r3, [r0, #10]
 801bd62:	4313      	orrs	r3, r2
 801bd64:	1aff      	subs	r7, r7, r3
 801bd66:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 801bd6a:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801bd6e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801bd72:	f7ff fe65 	bl	801ba40 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801bd76:	1b80      	subs	r0, r0, r6
 801bd78:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 801bd7c:	e735      	b.n	801bbea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801bd7e:	2300      	movs	r3, #0
 801bd80:	e7c1      	b.n	801bd06 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 801bd82:	bf00      	nop
 801bd84:	3fc00079 	.word	0x3fc00079

0801bd88 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801bd88:	3a01      	subs	r2, #1
 801bd8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd8e:	b292      	uxth	r2, r2
 801bd90:	460c      	mov	r4, r1
 801bd92:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801bd96:	42b2      	cmp	r2, r6
 801bd98:	d018      	beq.n	801bdcc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x44>
 801bd9a:	8b01      	ldrh	r1, [r0, #24]
 801bd9c:	f834 5b02 	ldrh.w	r5, [r4], #2
 801bda0:	4291      	cmp	r1, r2
 801bda2:	d805      	bhi.n	801bdb0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x28>
 801bda4:	4b13      	ldr	r3, [pc, #76]	; (801bdf4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6c>)
 801bda6:	21d3      	movs	r1, #211	; 0xd3
 801bda8:	4a13      	ldr	r2, [pc, #76]	; (801bdf8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x70>)
 801bdaa:	4814      	ldr	r0, [pc, #80]	; (801bdfc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 801bdac:	f00a fd26 	bl	80267fc <__assert_func>
 801bdb0:	8ac1      	ldrh	r1, [r0, #22]
 801bdb2:	4411      	add	r1, r2
 801bdb4:	3a01      	subs	r2, #1
 801bdb6:	f001 0101 	and.w	r1, r1, #1
 801bdba:	b292      	uxth	r2, r2
 801bdbc:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801bdc0:	8a49      	ldrh	r1, [r1, #18]
 801bdc2:	428d      	cmp	r5, r1
 801bdc4:	d0e7      	beq.n	801bd96 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xe>
 801bdc6:	2000      	movs	r0, #0
 801bdc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bdcc:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 801bdd0:	2600      	movs	r6, #0
 801bdd2:	f100 051a 	add.w	r5, r0, #26
 801bdd6:	441f      	add	r7, r3
 801bdd8:	b2b1      	uxth	r1, r6
 801bdda:	42b9      	cmp	r1, r7
 801bddc:	da08      	bge.n	801bdf0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x68>
 801bdde:	f834 8016 	ldrh.w	r8, [r4, r6, lsl #1]
 801bde2:	4628      	mov	r0, r5
 801bde4:	f7ff feda 	bl	801bb9c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801bde8:	3601      	adds	r6, #1
 801bdea:	4540      	cmp	r0, r8
 801bdec:	d0f4      	beq.n	801bdd8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x50>
 801bdee:	e7ea      	b.n	801bdc6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801bdf0:	2001      	movs	r0, #1
 801bdf2:	e7e9      	b.n	801bdc8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801bdf4:	0802a4d9 	.word	0x0802a4d9
 801bdf8:	0802aa68 	.word	0x0802aa68
 801bdfc:	0802a4e7 	.word	0x0802a4e7

0801be00 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 801be00:	b538      	push	{r3, r4, r5, lr}
 801be02:	8ac3      	ldrh	r3, [r0, #22]
 801be04:	428b      	cmp	r3, r1
 801be06:	d205      	bcs.n	801be14 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 801be08:	4b08      	ldr	r3, [pc, #32]	; (801be2c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 801be0a:	21d8      	movs	r1, #216	; 0xd8
 801be0c:	4a08      	ldr	r2, [pc, #32]	; (801be30 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 801be0e:	4809      	ldr	r0, [pc, #36]	; (801be34 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 801be10:	f00a fcf4 	bl	80267fc <__assert_func>
 801be14:	8a82      	ldrh	r2, [r0, #20]
 801be16:	250a      	movs	r5, #10
 801be18:	1a5b      	subs	r3, r3, r1
 801be1a:	440a      	add	r2, r1
 801be1c:	82c3      	strh	r3, [r0, #22]
 801be1e:	fbb2 f4f5 	udiv	r4, r2, r5
 801be22:	fb05 2214 	mls	r2, r5, r4, r2
 801be26:	8282      	strh	r2, [r0, #20]
 801be28:	bd38      	pop	{r3, r4, r5, pc}
 801be2a:	bf00      	nop
 801be2c:	0802a4cd 	.word	0x0802a4cd
 801be30:	0802a884 	.word	0x0802a884
 801be34:	0802a4e7 	.word	0x0802a4e7

0801be38 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 801be38:	b538      	push	{r3, r4, r5, lr}
 801be3a:	8ac3      	ldrh	r3, [r0, #22]
 801be3c:	2b09      	cmp	r3, #9
 801be3e:	d905      	bls.n	801be4c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 801be40:	4b08      	ldr	r3, [pc, #32]	; (801be64 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 801be42:	21f7      	movs	r1, #247	; 0xf7
 801be44:	4a08      	ldr	r2, [pc, #32]	; (801be68 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 801be46:	4809      	ldr	r0, [pc, #36]	; (801be6c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 801be48:	f00a fcd8 	bl	80267fc <__assert_func>
 801be4c:	8a82      	ldrh	r2, [r0, #20]
 801be4e:	250a      	movs	r5, #10
 801be50:	441a      	add	r2, r3
 801be52:	3301      	adds	r3, #1
 801be54:	fbb2 f4f5 	udiv	r4, r2, r5
 801be58:	fb05 2214 	mls	r2, r5, r4, r2
 801be5c:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 801be60:	82c3      	strh	r3, [r0, #22]
 801be62:	bd38      	pop	{r3, r4, r5, pc}
 801be64:	0802a4c1 	.word	0x0802a4c1
 801be68:	0802a7d5 	.word	0x0802a7d5
 801be6c:	0802a4e7 	.word	0x0802a4e7

0801be70 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801be70:	b538      	push	{r3, r4, r5, lr}
 801be72:	4604      	mov	r4, r0
 801be74:	f100 051a 	add.w	r5, r0, #26
 801be78:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801be7a:	2b0a      	cmp	r3, #10
 801be7c:	d01c      	beq.n	801beb8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801be7e:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 801be80:	b962      	cbnz	r2, 801be9c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801be82:	f104 051a 	add.w	r5, r4, #26
 801be86:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801be88:	2b0a      	cmp	r3, #10
 801be8a:	d015      	beq.n	801beb8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801be8c:	4620      	mov	r0, r4
 801be8e:	f7ff fdf6 	bl	801ba7e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801be92:	4601      	mov	r1, r0
 801be94:	4628      	mov	r0, r5
 801be96:	f7ff ffcf 	bl	801be38 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801be9a:	e7f4      	b.n	801be86 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 801be9c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801be9e:	3a01      	subs	r2, #1
 801bea0:	4628      	mov	r0, r5
 801bea2:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 801bea6:	3301      	adds	r3, #1
 801bea8:	f003 0301 	and.w	r3, r3, #1
 801beac:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 801beae:	8722      	strh	r2, [r4, #56]	; 0x38
 801beb0:	86e3      	strh	r3, [r4, #54]	; 0x36
 801beb2:	f7ff ffc1 	bl	801be38 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801beb6:	e7df      	b.n	801be78 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 801beb8:	bd38      	pop	{r3, r4, r5, pc}
	...

0801bebc <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 801bebc:	2300      	movs	r3, #0
 801bebe:	b510      	push	{r4, lr}
 801bec0:	6043      	str	r3, [r0, #4]
 801bec2:	4604      	mov	r4, r0
 801bec4:	60c3      	str	r3, [r0, #12]
 801bec6:	7403      	strb	r3, [r0, #16]
 801bec8:	8603      	strh	r3, [r0, #48]	; 0x30
 801beca:	8303      	strh	r3, [r0, #24]
 801becc:	8703      	strh	r3, [r0, #56]	; 0x38
 801bece:	f7ff ffcf 	bl	801be70 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801bed2:	4a0a      	ldr	r2, [pc, #40]	; (801befc <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 801bed4:	6813      	ldr	r3, [r2, #0]
 801bed6:	4611      	mov	r1, r2
 801bed8:	b913      	cbnz	r3, 801bee0 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 801beda:	6852      	ldr	r2, [r2, #4]
 801bedc:	07d0      	lsls	r0, r2, #31
 801bede:	d50b      	bpl.n	801bef8 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3c>
 801bee0:	6849      	ldr	r1, [r1, #4]
 801bee2:	104a      	asrs	r2, r1, #1
 801bee4:	07c9      	lsls	r1, r1, #31
 801bee6:	eb04 0002 	add.w	r0, r4, r2
 801beea:	bf48      	it	mi
 801beec:	58a2      	ldrmi	r2, [r4, r2]
 801beee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bef2:	bf48      	it	mi
 801bef4:	58d3      	ldrmi	r3, [r2, r3]
 801bef6:	4718      	bx	r3
 801bef8:	bd10      	pop	{r4, pc}
 801befa:	bf00      	nop
 801befc:	20008df0 	.word	0x20008df0

0801bf00 <_ZN8touchgfx12TextProviderC1Ev>:
 801bf00:	2300      	movs	r3, #0
 801bf02:	2201      	movs	r2, #1
 801bf04:	b510      	push	{r4, lr}
 801bf06:	4604      	mov	r4, r0
 801bf08:	60c3      	str	r3, [r0, #12]
 801bf0a:	7403      	strb	r3, [r0, #16]
 801bf0c:	82c3      	strh	r3, [r0, #22]
 801bf0e:	8303      	strh	r3, [r0, #24]
 801bf10:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801bf12:	8603      	strh	r3, [r0, #48]	; 0x30
 801bf14:	86c3      	strh	r3, [r0, #54]	; 0x36
 801bf16:	8703      	strh	r3, [r0, #56]	; 0x38
 801bf18:	63c3      	str	r3, [r0, #60]	; 0x3c
 801bf1a:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801bf1e:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801bf22:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801bf26:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801bf2a:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801bf2e:	e9c0 3300 	strd	r3, r3, [r0]
 801bf32:	f7ff ffc3 	bl	801bebc <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801bf36:	4620      	mov	r0, r4
 801bf38:	bd10      	pop	{r4, pc}

0801bf3a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801bf3a:	b410      	push	{r4}
 801bf3c:	6082      	str	r2, [r0, #8]
 801bf3e:	6001      	str	r1, [r0, #0]
 801bf40:	63c3      	str	r3, [r0, #60]	; 0x3c
 801bf42:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bf46:	f7ff bfb9 	b.w	801bebc <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

0801bf4c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 801bf4c:	b508      	push	{r3, lr}
 801bf4e:	88c2      	ldrh	r2, [r0, #6]
 801bf50:	440a      	add	r2, r1
 801bf52:	2a02      	cmp	r2, #2
 801bf54:	dd05      	ble.n	801bf62 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 801bf56:	4b06      	ldr	r3, [pc, #24]	; (801bf70 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 801bf58:	21ec      	movs	r1, #236	; 0xec
 801bf5a:	4a06      	ldr	r2, [pc, #24]	; (801bf74 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 801bf5c:	4806      	ldr	r0, [pc, #24]	; (801bf78 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 801bf5e:	f00a fc4d 	bl	80267fc <__assert_func>
 801bf62:	8883      	ldrh	r3, [r0, #4]
 801bf64:	80c2      	strh	r2, [r0, #6]
 801bf66:	1a59      	subs	r1, r3, r1
 801bf68:	f001 0101 	and.w	r1, r1, #1
 801bf6c:	8081      	strh	r1, [r0, #4]
 801bf6e:	bd08      	pop	{r3, pc}
 801bf70:	0802a513 	.word	0x0802a513
 801bf74:	0802a9e1 	.word	0x0802a9e1
 801bf78:	0802a4e7 	.word	0x0802a4e7

0801bf7c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 801bf7c:	b508      	push	{r3, lr}
 801bf7e:	88c3      	ldrh	r3, [r0, #6]
 801bf80:	428b      	cmp	r3, r1
 801bf82:	d805      	bhi.n	801bf90 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 801bf84:	4b06      	ldr	r3, [pc, #24]	; (801bfa0 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 801bf86:	21fd      	movs	r1, #253	; 0xfd
 801bf88:	4a06      	ldr	r2, [pc, #24]	; (801bfa4 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 801bf8a:	4807      	ldr	r0, [pc, #28]	; (801bfa8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 801bf8c:	f00a fc36 	bl	80267fc <__assert_func>
 801bf90:	8883      	ldrh	r3, [r0, #4]
 801bf92:	4419      	add	r1, r3
 801bf94:	f001 0101 	and.w	r1, r1, #1
 801bf98:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801bf9c:	bd08      	pop	{r3, pc}
 801bf9e:	bf00      	nop
 801bfa0:	0802a4d9 	.word	0x0802a4d9
 801bfa4:	0802ab39 	.word	0x0802ab39
 801bfa8:	0802a4e7 	.word	0x0802a4e7

0801bfac <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801bfac:	b570      	push	{r4, r5, r6, lr}
 801bfae:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801bfb0:	4604      	mov	r4, r0
 801bfb2:	b92a      	cbnz	r2, 801bfc0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801bfb4:	4b12      	ldr	r3, [pc, #72]	; (801c000 <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 801bfb6:	21de      	movs	r1, #222	; 0xde
 801bfb8:	4a12      	ldr	r2, [pc, #72]	; (801c004 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801bfba:	4813      	ldr	r0, [pc, #76]	; (801c008 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801bfbc:	f00a fc1e 	bl	80267fc <__assert_func>
 801bfc0:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801bfc2:	260a      	movs	r6, #10
 801bfc4:	3a01      	subs	r2, #1
 801bfc6:	3412      	adds	r4, #18
 801bfc8:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801bfcc:	3301      	adds	r3, #1
 801bfce:	8b4d      	ldrh	r5, [r1, #26]
 801bfd0:	8602      	strh	r2, [r0, #48]	; 0x30
 801bfd2:	fbb3 f1f6 	udiv	r1, r3, r6
 801bfd6:	fb06 3311 	mls	r3, r6, r1, r3
 801bfda:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801bfdc:	f7ff ff48 	bl	801be70 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801bfe0:	88e3      	ldrh	r3, [r4, #6]
 801bfe2:	2101      	movs	r1, #1
 801bfe4:	2b02      	cmp	r3, #2
 801bfe6:	bf04      	itt	eq
 801bfe8:	2301      	moveq	r3, #1
 801bfea:	80e3      	strheq	r3, [r4, #6]
 801bfec:	4620      	mov	r0, r4
 801bfee:	f7ff ffad 	bl	801bf4c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801bff2:	4620      	mov	r0, r4
 801bff4:	462a      	mov	r2, r5
 801bff6:	2100      	movs	r1, #0
 801bff8:	f7ff ffc0 	bl	801bf7c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801bffc:	4628      	mov	r0, r5
 801bffe:	bd70      	pop	{r4, r5, r6, pc}
 801c000:	0802a4b8 	.word	0x0802a4b8
 801c004:	0802a72a 	.word	0x0802a72a
 801c008:	0802a4e7 	.word	0x0802a4e7

0801c00c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801c00c:	428a      	cmp	r2, r1
 801c00e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c012:	4604      	mov	r4, r0
 801c014:	460e      	mov	r6, r1
 801c016:	4615      	mov	r5, r2
 801c018:	469a      	mov	sl, r3
 801c01a:	d92b      	bls.n	801c074 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 801c01c:	1a57      	subs	r7, r2, r1
 801c01e:	f04f 0800 	mov.w	r8, #0
 801c022:	f100 0932 	add.w	r9, r0, #50	; 0x32
 801c026:	f04f 0b0a 	mov.w	fp, #10
 801c02a:	b2bf      	uxth	r7, r7
 801c02c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c02e:	b92b      	cbnz	r3, 801c03c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x30>
 801c030:	4b24      	ldr	r3, [pc, #144]	; (801c0c4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 801c032:	21e6      	movs	r1, #230	; 0xe6
 801c034:	4a24      	ldr	r2, [pc, #144]	; (801c0c8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 801c036:	4825      	ldr	r0, [pc, #148]	; (801c0cc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 801c038:	f00a fbe0 	bl	80267fc <__assert_func>
 801c03c:	3b01      	subs	r3, #1
 801c03e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801c040:	2101      	movs	r1, #1
 801c042:	4648      	mov	r0, r9
 801c044:	b29b      	uxth	r3, r3
 801c046:	f108 0801 	add.w	r8, r8, #1
 801c04a:	441a      	add	r2, r3
 801c04c:	8623      	strh	r3, [r4, #48]	; 0x30
 801c04e:	fbb2 f3fb 	udiv	r3, r2, fp
 801c052:	fb0b 2313 	mls	r3, fp, r3, r2
 801c056:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c05a:	8b5a      	ldrh	r2, [r3, #26]
 801c05c:	9201      	str	r2, [sp, #4]
 801c05e:	f7ff ff75 	bl	801bf4c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801c062:	9a01      	ldr	r2, [sp, #4]
 801c064:	2100      	movs	r1, #0
 801c066:	4648      	mov	r0, r9
 801c068:	f7ff ff88 	bl	801bf7c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801c06c:	fa1f f388 	uxth.w	r3, r8
 801c070:	429f      	cmp	r7, r3
 801c072:	d8db      	bhi.n	801c02c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x20>
 801c074:	f104 071a 	add.w	r7, r4, #26
 801c078:	4631      	mov	r1, r6
 801c07a:	260a      	movs	r6, #10
 801c07c:	4638      	mov	r0, r7
 801c07e:	f7ff febf 	bl	801be00 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801c082:	b1c5      	cbz	r5, 801c0b6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801c084:	3d01      	subs	r5, #1
 801c086:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c088:	b2ad      	uxth	r5, r5
 801c08a:	2b09      	cmp	r3, #9
 801c08c:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 801c090:	d903      	bls.n	801c09a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 801c092:	4b0f      	ldr	r3, [pc, #60]	; (801c0d0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 801c094:	21ec      	movs	r1, #236	; 0xec
 801c096:	4a0f      	ldr	r2, [pc, #60]	; (801c0d4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 801c098:	e7cd      	b.n	801c036 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2a>
 801c09a:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 801c09c:	3301      	adds	r3, #1
 801c09e:	3109      	adds	r1, #9
 801c0a0:	8623      	strh	r3, [r4, #48]	; 0x30
 801c0a2:	fbb1 f0f6 	udiv	r0, r1, r6
 801c0a6:	fb06 1110 	mls	r1, r6, r0, r1
 801c0aa:	4638      	mov	r0, r7
 801c0ac:	85e1      	strh	r1, [r4, #46]	; 0x2e
 801c0ae:	2100      	movs	r1, #0
 801c0b0:	f7ff fd5a 	bl	801bb68 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801c0b4:	e7e5      	b.n	801c082 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 801c0b6:	4620      	mov	r0, r4
 801c0b8:	b003      	add	sp, #12
 801c0ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0be:	f7ff bed7 	b.w	801be70 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801c0c2:	bf00      	nop
 801c0c4:	0802a4b8 	.word	0x0802a4b8
 801c0c8:	0802a5ae 	.word	0x0802a5ae
 801c0cc:	0802a4e7 	.word	0x0802a4e7
 801c0d0:	0802a513 	.word	0x0802a513
 801c0d4:	0802a526 	.word	0x0802a526

0801c0d8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801c0d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0dc:	4605      	mov	r5, r0
 801c0de:	4616      	mov	r6, r2
 801c0e0:	1c8c      	adds	r4, r1, #2
 801c0e2:	8809      	ldrh	r1, [r1, #0]
 801c0e4:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801c0e8:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801c0ec:	42b3      	cmp	r3, r6
 801c0ee:	d124      	bne.n	801c13a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801c0f0:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801c0f4:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801c0f8:	f001 070f 	and.w	r7, r1, #15
 801c0fc:	4652      	mov	r2, sl
 801c0fe:	f8cd 8000 	str.w	r8, [sp]
 801c102:	464b      	mov	r3, r9
 801c104:	4621      	mov	r1, r4
 801c106:	4628      	mov	r0, r5
 801c108:	f7ff fe3e 	bl	801bd88 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801c10c:	4683      	mov	fp, r0
 801c10e:	b168      	cbz	r0, 801c12c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801c110:	eb0a 0109 	add.w	r1, sl, r9
 801c114:	463a      	mov	r2, r7
 801c116:	4628      	mov	r0, r5
 801c118:	4441      	add	r1, r8
 801c11a:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801c11e:	4649      	mov	r1, r9
 801c120:	f7ff ff74 	bl	801c00c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801c124:	4658      	mov	r0, fp
 801c126:	b003      	add	sp, #12
 801c128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c12c:	eb07 010a 	add.w	r1, r7, sl
 801c130:	4449      	add	r1, r9
 801c132:	4441      	add	r1, r8
 801c134:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801c138:	e7d2      	b.n	801c0e0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801c13a:	f04f 0b00 	mov.w	fp, #0
 801c13e:	e7f1      	b.n	801c124 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801c140 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801c140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c144:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801c146:	4604      	mov	r4, r0
 801c148:	260b      	movs	r6, #11
 801c14a:	f100 091a 	add.w	r9, r0, #26
 801c14e:	886f      	ldrh	r7, [r5, #2]
 801c150:	087f      	lsrs	r7, r7, #1
 801c152:	3e01      	subs	r6, #1
 801c154:	d013      	beq.n	801c17e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801c156:	2100      	movs	r1, #0
 801c158:	4648      	mov	r0, r9
 801c15a:	f7ff fd1f 	bl	801bb9c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801c15e:	462a      	mov	r2, r5
 801c160:	4680      	mov	r8, r0
 801c162:	4603      	mov	r3, r0
 801c164:	4639      	mov	r1, r7
 801c166:	4620      	mov	r0, r4
 801c168:	f7ff fce0 	bl	801bb2c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801c16c:	b138      	cbz	r0, 801c17e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801c16e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801c172:	4642      	mov	r2, r8
 801c174:	4620      	mov	r0, r4
 801c176:	f7ff ffaf 	bl	801c0d8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801c17a:	2800      	cmp	r0, #0
 801c17c:	d1e9      	bne.n	801c152 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 801c17e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0801c184 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 801c184:	4b1e      	ldr	r3, [pc, #120]	; (801c200 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 801c186:	b570      	push	{r4, r5, r6, lr}
 801c188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c18c:	4604      	mov	r4, r0
 801c18e:	f003 0501 	and.w	r5, r3, #1
 801c192:	b902      	cbnz	r2, 801c196 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
 801c194:	b165      	cbz	r5, 801c1b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2c>
 801c196:	105b      	asrs	r3, r3, #1
 801c198:	f104 061a 	add.w	r6, r4, #26
 801c19c:	18e0      	adds	r0, r4, r3
 801c19e:	b10d      	cbz	r5, 801c1a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
 801c1a0:	58e3      	ldr	r3, [r4, r3]
 801c1a2:	589a      	ldr	r2, [r3, r2]
 801c1a4:	4790      	blx	r2
 801c1a6:	2100      	movs	r1, #0
 801c1a8:	4602      	mov	r2, r0
 801c1aa:	4630      	mov	r0, r6
 801c1ac:	f7ff fcdc 	bl	801bb68 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801c1b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801c1b2:	b303      	cbz	r3, 801c1f6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801c1b4:	f104 051a 	add.w	r5, r4, #26
 801c1b8:	2100      	movs	r1, #0
 801c1ba:	4628      	mov	r0, r5
 801c1bc:	f7ff fcee 	bl	801bb9c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801c1c0:	b1c8      	cbz	r0, 801c1f6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801c1c2:	4620      	mov	r0, r4
 801c1c4:	f7ff ffbc 	bl	801c140 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 801c1c8:	2101      	movs	r1, #1
 801c1ca:	4628      	mov	r0, r5
 801c1cc:	f7ff fce6 	bl	801bb9c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801c1d0:	f640 133f 	movw	r3, #2367	; 0x93f
 801c1d4:	4606      	mov	r6, r0
 801c1d6:	4298      	cmp	r0, r3
 801c1d8:	d10d      	bne.n	801c1f6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801c1da:	2100      	movs	r1, #0
 801c1dc:	4628      	mov	r0, r5
 801c1de:	f7ff fcdd 	bl	801bb9c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801c1e2:	2101      	movs	r1, #1
 801c1e4:	4602      	mov	r2, r0
 801c1e6:	4628      	mov	r0, r5
 801c1e8:	f7ff fcbe 	bl	801bb68 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801c1ec:	4632      	mov	r2, r6
 801c1ee:	2100      	movs	r1, #0
 801c1f0:	4628      	mov	r0, r5
 801c1f2:	f7ff fcb9 	bl	801bb68 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801c1f6:	4620      	mov	r0, r4
 801c1f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c1fc:	f7ff bed6 	b.w	801bfac <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c200:	20008df8 	.word	0x20008df8

0801c204 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801c204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c206:	4617      	mov	r7, r2
 801c208:	461e      	mov	r6, r3
 801c20a:	4605      	mov	r5, r0
 801c20c:	f7ff ffba 	bl	801c184 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c210:	683b      	ldr	r3, [r7, #0]
 801c212:	4604      	mov	r4, r0
 801c214:	4601      	mov	r1, r0
 801c216:	4638      	mov	r0, r7
 801c218:	68db      	ldr	r3, [r3, #12]
 801c21a:	4798      	blx	r3
 801c21c:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801c220:	4602      	mov	r2, r0
 801c222:	6030      	str	r0, [r6, #0]
 801c224:	b29b      	uxth	r3, r3
 801c226:	2b7f      	cmp	r3, #127	; 0x7f
 801c228:	d813      	bhi.n	801c252 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 801c22a:	4639      	mov	r1, r7
 801c22c:	4628      	mov	r0, r5
 801c22e:	f7ff fccf 	bl	801bbd0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801c232:	6030      	str	r0, [r6, #0]
 801c234:	6833      	ldr	r3, [r6, #0]
 801c236:	b143      	cbz	r3, 801c24a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801c238:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801c23c:	7a9b      	ldrb	r3, [r3, #10]
 801c23e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801c242:	4313      	orrs	r3, r2
 801c244:	bf0c      	ite	eq
 801c246:	2301      	moveq	r3, #1
 801c248:	2300      	movne	r3, #0
 801c24a:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801c24e:	4620      	mov	r0, r4
 801c250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c252:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801c256:	2b00      	cmp	r3, #0
 801c258:	d0ec      	beq.n	801c234 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801c25a:	f640 1302 	movw	r3, #2306	; 0x902
 801c25e:	429c      	cmp	r4, r3
 801c260:	d1e8      	bne.n	801c234 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801c262:	4601      	mov	r1, r0
 801c264:	4628      	mov	r0, r5
 801c266:	f7ff fc32 	bl	801bace <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801c26a:	e7e2      	b.n	801c232 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>

0801c26c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801c26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c270:	4617      	mov	r7, r2
 801c272:	461e      	mov	r6, r3
 801c274:	4605      	mov	r5, r0
 801c276:	f7ff ff85 	bl	801c184 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c27a:	683b      	ldr	r3, [r7, #0]
 801c27c:	4604      	mov	r4, r0
 801c27e:	4601      	mov	r1, r0
 801c280:	4638      	mov	r0, r7
 801c282:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801c286:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c28a:	47c0      	blx	r8
 801c28c:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801c290:	4602      	mov	r2, r0
 801c292:	6030      	str	r0, [r6, #0]
 801c294:	b29b      	uxth	r3, r3
 801c296:	2b7f      	cmp	r3, #127	; 0x7f
 801c298:	d814      	bhi.n	801c2c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x58>
 801c29a:	4639      	mov	r1, r7
 801c29c:	4628      	mov	r0, r5
 801c29e:	f7ff fc97 	bl	801bbd0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801c2a2:	6030      	str	r0, [r6, #0]
 801c2a4:	6833      	ldr	r3, [r6, #0]
 801c2a6:	b143      	cbz	r3, 801c2ba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801c2a8:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801c2ac:	7a9b      	ldrb	r3, [r3, #10]
 801c2ae:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801c2b2:	4313      	orrs	r3, r2
 801c2b4:	bf0c      	ite	eq
 801c2b6:	2301      	moveq	r3, #1
 801c2b8:	2300      	movne	r3, #0
 801c2ba:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801c2be:	4620      	mov	r0, r4
 801c2c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c2c4:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801c2c8:	2b00      	cmp	r3, #0
 801c2ca:	d0eb      	beq.n	801c2a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801c2cc:	f640 1302 	movw	r3, #2306	; 0x902
 801c2d0:	429c      	cmp	r4, r3
 801c2d2:	d1e7      	bne.n	801c2a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801c2d4:	4601      	mov	r1, r0
 801c2d6:	4628      	mov	r0, r5
 801c2d8:	f7ff fbf9 	bl	801bace <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801c2dc:	e7e1      	b.n	801c2a2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x36>

0801c2de <_ZN8touchgfx7Unicode6strlenEPKt>:
 801c2de:	4602      	mov	r2, r0
 801c2e0:	b148      	cbz	r0, 801c2f6 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801c2e2:	2300      	movs	r3, #0
 801c2e4:	b298      	uxth	r0, r3
 801c2e6:	3301      	adds	r3, #1
 801c2e8:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801c2ec:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801c2f0:	2900      	cmp	r1, #0
 801c2f2:	d1f7      	bne.n	801c2e4 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801c2f4:	4770      	bx	lr
 801c2f6:	4770      	bx	lr

0801c2f8 <_ZN8touchgfx7Unicode6strlenEPKc>:
 801c2f8:	b140      	cbz	r0, 801c30c <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 801c2fa:	4602      	mov	r2, r0
 801c2fc:	1a13      	subs	r3, r2, r0
 801c2fe:	f812 1b01 	ldrb.w	r1, [r2], #1
 801c302:	b29b      	uxth	r3, r3
 801c304:	2900      	cmp	r1, #0
 801c306:	d1f9      	bne.n	801c2fc <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 801c308:	4618      	mov	r0, r3
 801c30a:	4770      	bx	lr
 801c30c:	4603      	mov	r3, r0
 801c30e:	e7fb      	b.n	801c308 <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

0801c310 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801c310:	b530      	push	{r4, r5, lr}
 801c312:	4604      	mov	r4, r0
 801c314:	b159      	cbz	r1, 801c32e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801c316:	b148      	cbz	r0, 801c32c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801c318:	2300      	movs	r3, #0
 801c31a:	b298      	uxth	r0, r3
 801c31c:	4282      	cmp	r2, r0
 801c31e:	d905      	bls.n	801c32c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801c320:	5ccd      	ldrb	r5, [r1, r3]
 801c322:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801c326:	3301      	adds	r3, #1
 801c328:	2d00      	cmp	r5, #0
 801c32a:	d1f6      	bne.n	801c31a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801c32c:	bd30      	pop	{r4, r5, pc}
 801c32e:	4608      	mov	r0, r1
 801c330:	e7fc      	b.n	801c32c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801c332 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801c332:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c334:	468c      	mov	ip, r1
 801c336:	b08b      	sub	sp, #44	; 0x2c
 801c338:	2100      	movs	r1, #0
 801c33a:	ae01      	add	r6, sp, #4
 801c33c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801c340:	211f      	movs	r1, #31
 801c342:	fbb0 f7f3 	udiv	r7, r0, r3
 801c346:	fb03 0517 	mls	r5, r3, r7, r0
 801c34a:	4638      	mov	r0, r7
 801c34c:	b2ec      	uxtb	r4, r5
 801c34e:	2d09      	cmp	r5, #9
 801c350:	bfd4      	ite	le
 801c352:	3430      	addle	r4, #48	; 0x30
 801c354:	3457      	addgt	r4, #87	; 0x57
 801c356:	b2e4      	uxtb	r4, r4
 801c358:	558c      	strb	r4, [r1, r6]
 801c35a:	1e4c      	subs	r4, r1, #1
 801c35c:	b92f      	cbnz	r7, 801c36a <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801c35e:	4431      	add	r1, r6
 801c360:	4660      	mov	r0, ip
 801c362:	f7ff ffd5 	bl	801c310 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801c366:	b00b      	add	sp, #44	; 0x2c
 801c368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c36a:	4621      	mov	r1, r4
 801c36c:	e7e9      	b.n	801c342 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801c36e <_ZN8touchgfx7Unicode4itoaElPtti>:
 801c36e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c370:	4607      	mov	r7, r0
 801c372:	b08b      	sub	sp, #44	; 0x2c
 801c374:	4608      	mov	r0, r1
 801c376:	b341      	cbz	r1, 801c3ca <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801c378:	1e99      	subs	r1, r3, #2
 801c37a:	290e      	cmp	r1, #14
 801c37c:	d825      	bhi.n	801c3ca <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801c37e:	2100      	movs	r1, #0
 801c380:	463c      	mov	r4, r7
 801c382:	261f      	movs	r6, #31
 801c384:	f10d 0c04 	add.w	ip, sp, #4
 801c388:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801c38c:	1e71      	subs	r1, r6, #1
 801c38e:	fb94 fef3 	sdiv	lr, r4, r3
 801c392:	fb03 441e 	mls	r4, r3, lr, r4
 801c396:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801c39a:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801c39e:	b2ec      	uxtb	r4, r5
 801c3a0:	2d09      	cmp	r5, #9
 801c3a2:	bfd4      	ite	le
 801c3a4:	3430      	addle	r4, #48	; 0x30
 801c3a6:	3457      	addgt	r4, #87	; 0x57
 801c3a8:	b2e4      	uxtb	r4, r4
 801c3aa:	f80c 4006 	strb.w	r4, [ip, r6]
 801c3ae:	4674      	mov	r4, lr
 801c3b0:	b96c      	cbnz	r4, 801c3ce <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801c3b2:	2f00      	cmp	r7, #0
 801c3b4:	da05      	bge.n	801c3c2 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801c3b6:	ab0a      	add	r3, sp, #40	; 0x28
 801c3b8:	4419      	add	r1, r3
 801c3ba:	232d      	movs	r3, #45	; 0x2d
 801c3bc:	f801 3c24 	strb.w	r3, [r1, #-36]
 801c3c0:	1eb1      	subs	r1, r6, #2
 801c3c2:	3101      	adds	r1, #1
 801c3c4:	4461      	add	r1, ip
 801c3c6:	f7ff ffa3 	bl	801c310 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801c3ca:	b00b      	add	sp, #44	; 0x2c
 801c3cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c3ce:	460e      	mov	r6, r1
 801c3d0:	e7dc      	b.n	801c38c <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801c3d2 <_ZN8touchgfx7Unicode4atoiEPKt>:
 801c3d2:	b510      	push	{r4, lr}
 801c3d4:	b158      	cbz	r0, 801c3ee <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801c3d6:	1e82      	subs	r2, r0, #2
 801c3d8:	210a      	movs	r1, #10
 801c3da:	2000      	movs	r0, #0
 801c3dc:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801c3e0:	3b30      	subs	r3, #48	; 0x30
 801c3e2:	b29c      	uxth	r4, r3
 801c3e4:	2c09      	cmp	r4, #9
 801c3e6:	d802      	bhi.n	801c3ee <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801c3e8:	fb01 3000 	mla	r0, r1, r0, r3
 801c3ec:	e7f6      	b.n	801c3dc <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 801c3ee:	bd10      	pop	{r4, pc}

0801c3f0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 801c3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3f4:	b085      	sub	sp, #20
 801c3f6:	f8d0 8000 	ldr.w	r8, [r0]
 801c3fa:	468a      	mov	sl, r1
 801c3fc:	461c      	mov	r4, r3
 801c3fe:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801c402:	4681      	mov	r9, r0
 801c404:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801c408:	4640      	mov	r0, r8
 801c40a:	9203      	str	r2, [sp, #12]
 801c40c:	9102      	str	r1, [sp, #8]
 801c40e:	9301      	str	r3, [sp, #4]
 801c410:	f7ff ff65 	bl	801c2de <_ZN8touchgfx7Unicode6strlenEPKt>
 801c414:	9a03      	ldr	r2, [sp, #12]
 801c416:	f1ba 0f00 	cmp.w	sl, #0
 801c41a:	bf0c      	ite	eq
 801c41c:	4684      	moveq	ip, r0
 801c41e:	f100 0c01 	addne.w	ip, r0, #1
 801c422:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 801c426:	8812      	ldrh	r2, [r2, #0]
 801c428:	fa1f fc8c 	uxth.w	ip, ip
 801c42c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801c42e:	2a69      	cmp	r2, #105	; 0x69
 801c430:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801c432:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801c434:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 801c438:	d004      	beq.n	801c444 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801c43a:	d844      	bhi.n	801c4c6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd6>
 801c43c:	2a58      	cmp	r2, #88	; 0x58
 801c43e:	d001      	beq.n	801c444 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801c440:	2a64      	cmp	r2, #100	; 0x64
 801c442:	d14b      	bne.n	801c4dc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801c444:	b1a4      	cbz	r4, 801c470 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801c446:	b956      	cbnz	r6, 801c45e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801c448:	2801      	cmp	r0, #1
 801c44a:	d108      	bne.n	801c45e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801c44c:	f8b8 2000 	ldrh.w	r2, [r8]
 801c450:	2a30      	cmp	r2, #48	; 0x30
 801c452:	bf02      	ittt	eq
 801c454:	f108 0202 	addeq.w	r2, r8, #2
 801c458:	4630      	moveq	r0, r6
 801c45a:	f8c9 2000 	streq.w	r2, [r9]
 801c45e:	45b4      	cmp	ip, r6
 801c460:	da3e      	bge.n	801c4e0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf0>
 801c462:	b2b6      	uxth	r6, r6
 801c464:	eba6 040c 	sub.w	r4, r6, ip
 801c468:	46b4      	mov	ip, r6
 801c46a:	b2a4      	uxth	r4, r4
 801c46c:	f04f 0b00 	mov.w	fp, #0
 801c470:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801c474:	3a01      	subs	r2, #1
 801c476:	b169      	cbz	r1, 801c494 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801c478:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c47a:	458c      	cmp	ip, r1
 801c47c:	da09      	bge.n	801c492 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801c47e:	eba1 010c 	sub.w	r1, r1, ip
 801c482:	b289      	uxth	r1, r1
 801c484:	b933      	cbnz	r3, 801c494 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801c486:	f1bb 0f00 	cmp.w	fp, #0
 801c48a:	d02b      	beq.n	801c4e4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801c48c:	b350      	cbz	r0, 801c4e4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801c48e:	440c      	add	r4, r1
 801c490:	b2a4      	uxth	r4, r4
 801c492:	2100      	movs	r1, #0
 801c494:	682b      	ldr	r3, [r5, #0]
 801c496:	4293      	cmp	r3, r2
 801c498:	da07      	bge.n	801c4aa <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801c49a:	f1ba 0f00 	cmp.w	sl, #0
 801c49e:	d004      	beq.n	801c4aa <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801c4a0:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 801c4a4:	682b      	ldr	r3, [r5, #0]
 801c4a6:	3301      	adds	r3, #1
 801c4a8:	602b      	str	r3, [r5, #0]
 801c4aa:	f04f 0c30 	mov.w	ip, #48	; 0x30
 801c4ae:	b354      	cbz	r4, 801c506 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801c4b0:	682e      	ldr	r6, [r5, #0]
 801c4b2:	3c01      	subs	r4, #1
 801c4b4:	42b2      	cmp	r2, r6
 801c4b6:	b2a4      	uxth	r4, r4
 801c4b8:	dd25      	ble.n	801c506 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801c4ba:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801c4be:	682b      	ldr	r3, [r5, #0]
 801c4c0:	3301      	adds	r3, #1
 801c4c2:	602b      	str	r3, [r5, #0]
 801c4c4:	e7f3      	b.n	801c4ae <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xbe>
 801c4c6:	2a73      	cmp	r2, #115	; 0x73
 801c4c8:	d003      	beq.n	801c4d2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe2>
 801c4ca:	2a78      	cmp	r2, #120	; 0x78
 801c4cc:	d0ba      	beq.n	801c444 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801c4ce:	2a6f      	cmp	r2, #111	; 0x6f
 801c4d0:	e7b7      	b.n	801c442 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x52>
 801c4d2:	2c00      	cmp	r4, #0
 801c4d4:	d0cc      	beq.n	801c470 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801c4d6:	42b0      	cmp	r0, r6
 801c4d8:	dd00      	ble.n	801c4dc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801c4da:	b2b0      	uxth	r0, r6
 801c4dc:	2400      	movs	r4, #0
 801c4de:	e7c7      	b.n	801c470 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801c4e0:	2400      	movs	r4, #0
 801c4e2:	e7c3      	b.n	801c46c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x7c>
 801c4e4:	2900      	cmp	r1, #0
 801c4e6:	d0d5      	beq.n	801c494 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801c4e8:	f04f 0c20 	mov.w	ip, #32
 801c4ec:	682e      	ldr	r6, [r5, #0]
 801c4ee:	2900      	cmp	r1, #0
 801c4f0:	d0d0      	beq.n	801c494 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801c4f2:	3901      	subs	r1, #1
 801c4f4:	4296      	cmp	r6, r2
 801c4f6:	b289      	uxth	r1, r1
 801c4f8:	dacb      	bge.n	801c492 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801c4fa:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801c4fe:	682b      	ldr	r3, [r5, #0]
 801c500:	3301      	adds	r3, #1
 801c502:	602b      	str	r3, [r5, #0]
 801c504:	e7f2      	b.n	801c4ec <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xfc>
 801c506:	b198      	cbz	r0, 801c530 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801c508:	f8d9 3000 	ldr.w	r3, [r9]
 801c50c:	881c      	ldrh	r4, [r3, #0]
 801c50e:	b17c      	cbz	r4, 801c530 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801c510:	682c      	ldr	r4, [r5, #0]
 801c512:	3801      	subs	r0, #1
 801c514:	42a2      	cmp	r2, r4
 801c516:	b280      	uxth	r0, r0
 801c518:	dd0a      	ble.n	801c530 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801c51a:	1c9c      	adds	r4, r3, #2
 801c51c:	f8c9 4000 	str.w	r4, [r9]
 801c520:	881c      	ldrh	r4, [r3, #0]
 801c522:	682b      	ldr	r3, [r5, #0]
 801c524:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 801c528:	682b      	ldr	r3, [r5, #0]
 801c52a:	3301      	adds	r3, #1
 801c52c:	602b      	str	r3, [r5, #0]
 801c52e:	e7ea      	b.n	801c506 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801c530:	2620      	movs	r6, #32
 801c532:	b151      	cbz	r1, 801c54a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801c534:	6828      	ldr	r0, [r5, #0]
 801c536:	3901      	subs	r1, #1
 801c538:	4282      	cmp	r2, r0
 801c53a:	b289      	uxth	r1, r1
 801c53c:	dd05      	ble.n	801c54a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801c53e:	f827 6010 	strh.w	r6, [r7, r0, lsl #1]
 801c542:	682b      	ldr	r3, [r5, #0]
 801c544:	3301      	adds	r3, #1
 801c546:	602b      	str	r3, [r5, #0]
 801c548:	e7f3      	b.n	801c532 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x142>
 801c54a:	b005      	add	sp, #20
 801c54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c550 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 801c550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c554:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801c556:	4604      	mov	r4, r0
 801c558:	f04f 0801 	mov.w	r8, #1
 801c55c:	2000      	movs	r0, #0
 801c55e:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 801c562:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801c566:	8008      	strh	r0, [r1, #0]
 801c568:	7010      	strb	r0, [r2, #0]
 801c56a:	7018      	strb	r0, [r3, #0]
 801c56c:	f88c 0000 	strb.w	r0, [ip]
 801c570:	f88e 0000 	strb.w	r0, [lr]
 801c574:	7030      	strb	r0, [r6, #0]
 801c576:	6820      	ldr	r0, [r4, #0]
 801c578:	8800      	ldrh	r0, [r0, #0]
 801c57a:	b190      	cbz	r0, 801c5a2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801c57c:	282b      	cmp	r0, #43	; 0x2b
 801c57e:	d001      	beq.n	801c584 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x34>
 801c580:	2820      	cmp	r0, #32
 801c582:	d104      	bne.n	801c58e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3e>
 801c584:	8008      	strh	r0, [r1, #0]
 801c586:	6820      	ldr	r0, [r4, #0]
 801c588:	3002      	adds	r0, #2
 801c58a:	6020      	str	r0, [r4, #0]
 801c58c:	e7f3      	b.n	801c576 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x26>
 801c58e:	282d      	cmp	r0, #45	; 0x2d
 801c590:	d102      	bne.n	801c598 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x48>
 801c592:	f882 8000 	strb.w	r8, [r2]
 801c596:	e7f6      	b.n	801c586 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801c598:	2823      	cmp	r0, #35	; 0x23
 801c59a:	d102      	bne.n	801c5a2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801c59c:	f883 8000 	strb.w	r8, [r3]
 801c5a0:	e7f1      	b.n	801c586 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801c5a2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801c5a6:	2b09      	cmp	r3, #9
 801c5a8:	d901      	bls.n	801c5ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x5e>
 801c5aa:	282a      	cmp	r0, #42	; 0x2a
 801c5ac:	d114      	bne.n	801c5d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801c5ae:	2201      	movs	r2, #1
 801c5b0:	f88e 2000 	strb.w	r2, [lr]
 801c5b4:	6823      	ldr	r3, [r4, #0]
 801c5b6:	8819      	ldrh	r1, [r3, #0]
 801c5b8:	2930      	cmp	r1, #48	; 0x30
 801c5ba:	bf02      	ittt	eq
 801c5bc:	3302      	addeq	r3, #2
 801c5be:	6023      	streq	r3, [r4, #0]
 801c5c0:	f88c 2000 	strbeq.w	r2, [ip]
 801c5c4:	6820      	ldr	r0, [r4, #0]
 801c5c6:	8803      	ldrh	r3, [r0, #0]
 801c5c8:	2b2a      	cmp	r3, #42	; 0x2a
 801c5ca:	d11e      	bne.n	801c60a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 801c5cc:	f04f 33ff 	mov.w	r3, #4294967295
 801c5d0:	603b      	str	r3, [r7, #0]
 801c5d2:	6823      	ldr	r3, [r4, #0]
 801c5d4:	3302      	adds	r3, #2
 801c5d6:	6023      	str	r3, [r4, #0]
 801c5d8:	6823      	ldr	r3, [r4, #0]
 801c5da:	881b      	ldrh	r3, [r3, #0]
 801c5dc:	2b2e      	cmp	r3, #46	; 0x2e
 801c5de:	d112      	bne.n	801c606 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb6>
 801c5e0:	2301      	movs	r3, #1
 801c5e2:	7033      	strb	r3, [r6, #0]
 801c5e4:	6823      	ldr	r3, [r4, #0]
 801c5e6:	1c98      	adds	r0, r3, #2
 801c5e8:	6020      	str	r0, [r4, #0]
 801c5ea:	885b      	ldrh	r3, [r3, #2]
 801c5ec:	2b2a      	cmp	r3, #42	; 0x2a
 801c5ee:	d117      	bne.n	801c620 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd0>
 801c5f0:	f04f 33ff 	mov.w	r3, #4294967295
 801c5f4:	602b      	str	r3, [r5, #0]
 801c5f6:	6823      	ldr	r3, [r4, #0]
 801c5f8:	3302      	adds	r3, #2
 801c5fa:	6023      	str	r3, [r4, #0]
 801c5fc:	682b      	ldr	r3, [r5, #0]
 801c5fe:	2b06      	cmp	r3, #6
 801c600:	bfa8      	it	ge
 801c602:	2306      	movge	r3, #6
 801c604:	602b      	str	r3, [r5, #0]
 801c606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c60a:	f7ff fee2 	bl	801c3d2 <_ZN8touchgfx7Unicode4atoiEPKt>
 801c60e:	6038      	str	r0, [r7, #0]
 801c610:	6823      	ldr	r3, [r4, #0]
 801c612:	881a      	ldrh	r2, [r3, #0]
 801c614:	3a30      	subs	r2, #48	; 0x30
 801c616:	2a09      	cmp	r2, #9
 801c618:	d8de      	bhi.n	801c5d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801c61a:	3302      	adds	r3, #2
 801c61c:	6023      	str	r3, [r4, #0]
 801c61e:	e7f7      	b.n	801c610 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc0>
 801c620:	f7ff fed7 	bl	801c3d2 <_ZN8touchgfx7Unicode4atoiEPKt>
 801c624:	6028      	str	r0, [r5, #0]
 801c626:	6823      	ldr	r3, [r4, #0]
 801c628:	881a      	ldrh	r2, [r3, #0]
 801c62a:	3a30      	subs	r2, #48	; 0x30
 801c62c:	2a09      	cmp	r2, #9
 801c62e:	d8e5      	bhi.n	801c5fc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xac>
 801c630:	3302      	adds	r3, #2
 801c632:	6023      	str	r3, [r4, #0]
 801c634:	e7f7      	b.n	801c626 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>

0801c636 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 801c636:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c63a:	b0a2      	sub	sp, #136	; 0x88
 801c63c:	2500      	movs	r5, #0
 801c63e:	4606      	mov	r6, r0
 801c640:	460f      	mov	r7, r1
 801c642:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801c646:	9209      	str	r2, [sp, #36]	; 0x24
 801c648:	4629      	mov	r1, r5
 801c64a:	2242      	movs	r2, #66	; 0x42
 801c64c:	4640      	mov	r0, r8
 801c64e:	461c      	mov	r4, r3
 801c650:	950d      	str	r5, [sp, #52]	; 0x34
 801c652:	f7fe fe26 	bl	801b2a2 <_ZN8touchgfx6memsetEPvhm>
 801c656:	b30e      	cbz	r6, 801c69c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801c658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c65a:	b1f3      	cbz	r3, 801c69a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x64>
 801c65c:	f107 3aff 	add.w	sl, r7, #4294967295
 801c660:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c662:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c664:	8812      	ldrh	r2, [r2, #0]
 801c666:	2a00      	cmp	r2, #0
 801c668:	f000 80b3 	beq.w	801c7d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801c66c:	459a      	cmp	sl, r3
 801c66e:	f340 80b0 	ble.w	801c7d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801c672:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801c676:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c678:	f8b9 2000 	ldrh.w	r2, [r9]
 801c67c:	2a00      	cmp	r2, #0
 801c67e:	d0ef      	beq.n	801c660 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801c680:	2a25      	cmp	r2, #37	; 0x25
 801c682:	f000 80aa 	beq.w	801c7da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a4>
 801c686:	459a      	cmp	sl, r3
 801c688:	ddea      	ble.n	801c660 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801c68a:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801c68e:	f109 0202 	add.w	r2, r9, #2
 801c692:	3301      	adds	r3, #1
 801c694:	9209      	str	r2, [sp, #36]	; 0x24
 801c696:	930d      	str	r3, [sp, #52]	; 0x34
 801c698:	e7eb      	b.n	801c672 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x3c>
 801c69a:	8033      	strh	r3, [r6, #0]
 801c69c:	4630      	mov	r0, r6
 801c69e:	b022      	add	sp, #136	; 0x88
 801c6a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c6a4:	3b63      	subs	r3, #99	; 0x63
 801c6a6:	2b01      	cmp	r3, #1
 801c6a8:	f200 80df 	bhi.w	801c86a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801c6ac:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801c6b0:	8813      	ldrh	r3, [r2, #0]
 801c6b2:	2b69      	cmp	r3, #105	; 0x69
 801c6b4:	d058      	beq.n	801c768 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801c6b6:	d81b      	bhi.n	801c6f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xba>
 801c6b8:	2b63      	cmp	r3, #99	; 0x63
 801c6ba:	d02e      	beq.n	801c71a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe4>
 801c6bc:	2b64      	cmp	r3, #100	; 0x64
 801c6be:	d053      	beq.n	801c768 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801c6c0:	2b58      	cmp	r3, #88	; 0x58
 801c6c2:	d06f      	beq.n	801c7a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x16e>
 801c6c4:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 801c6c8:	46a1      	mov	r9, r4
 801c6ca:	e02d      	b.n	801c728 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801c6cc:	2b73      	cmp	r3, #115	; 0x73
 801c6ce:	d0ed      	beq.n	801c6ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801c6d0:	d803      	bhi.n	801c6da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa4>
 801c6d2:	2b6f      	cmp	r3, #111	; 0x6f
 801c6d4:	f040 80c9 	bne.w	801c86a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801c6d8:	e7e8      	b.n	801c6ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801c6da:	2b75      	cmp	r3, #117	; 0x75
 801c6dc:	d0e6      	beq.n	801c6ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801c6de:	2b78      	cmp	r3, #120	; 0x78
 801c6e0:	e7f8      	b.n	801c6d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 801c6e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c6e4:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801c6e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c6ea:	3302      	adds	r3, #2
 801c6ec:	9309      	str	r3, [sp, #36]	; 0x24
 801c6ee:	e7b7      	b.n	801c660 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801c6f0:	2b73      	cmp	r3, #115	; 0x73
 801c6f2:	d034      	beq.n	801c75e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x128>
 801c6f4:	d807      	bhi.n	801c706 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xd0>
 801c6f6:	2b6f      	cmp	r3, #111	; 0x6f
 801c6f8:	d1e4      	bne.n	801c6c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801c6fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c6fc:	f104 0904 	add.w	r9, r4, #4
 801c700:	2308      	movs	r3, #8
 801c702:	1aba      	subs	r2, r7, r2
 801c704:	e048      	b.n	801c798 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801c706:	2b75      	cmp	r3, #117	; 0x75
 801c708:	d041      	beq.n	801c78e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x158>
 801c70a:	2b78      	cmp	r3, #120	; 0x78
 801c70c:	d1da      	bne.n	801c6c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801c70e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c710:	f104 0904 	add.w	r9, r4, #4
 801c714:	2310      	movs	r3, #16
 801c716:	1aba      	subs	r2, r7, r2
 801c718:	e03e      	b.n	801c798 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801c71a:	7823      	ldrb	r3, [r4, #0]
 801c71c:	f104 0904 	add.w	r9, r4, #4
 801c720:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 801c724:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801c728:	aa0d      	add	r2, sp, #52	; 0x34
 801c72a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801c72e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801c732:	a810      	add	r0, sp, #64	; 0x40
 801c734:	9205      	str	r2, [sp, #20]
 801c736:	464c      	mov	r4, r9
 801c738:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 801c73c:	9204      	str	r2, [sp, #16]
 801c73e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c740:	9203      	str	r2, [sp, #12]
 801c742:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 801c746:	9202      	str	r2, [sp, #8]
 801c748:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c74a:	9201      	str	r2, [sp, #4]
 801c74c:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 801c750:	e9cd 7606 	strd	r7, r6, [sp, #24]
 801c754:	9200      	str	r2, [sp, #0]
 801c756:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c758:	f7ff fe4a 	bl	801c3f0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801c75c:	e7c4      	b.n	801c6e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
 801c75e:	f104 0904 	add.w	r9, r4, #4
 801c762:	6823      	ldr	r3, [r4, #0]
 801c764:	9310      	str	r3, [sp, #64]	; 0x40
 801c766:	e7df      	b.n	801c728 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801c768:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c76a:	230a      	movs	r3, #10
 801c76c:	4641      	mov	r1, r8
 801c76e:	6820      	ldr	r0, [r4, #0]
 801c770:	1aba      	subs	r2, r7, r2
 801c772:	f104 0904 	add.w	r9, r4, #4
 801c776:	b292      	uxth	r2, r2
 801c778:	f7ff fdf9 	bl	801c36e <_ZN8touchgfx7Unicode4itoaElPtti>
 801c77c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801c780:	2b2d      	cmp	r3, #45	; 0x2d
 801c782:	d1d1      	bne.n	801c728 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801c784:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801c788:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c78a:	3302      	adds	r3, #2
 801c78c:	e7ea      	b.n	801c764 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x12e>
 801c78e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c790:	f104 0904 	add.w	r9, r4, #4
 801c794:	230a      	movs	r3, #10
 801c796:	1aba      	subs	r2, r7, r2
 801c798:	b292      	uxth	r2, r2
 801c79a:	4641      	mov	r1, r8
 801c79c:	6820      	ldr	r0, [r4, #0]
 801c79e:	f7ff fdc8 	bl	801c332 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801c7a2:	e7c1      	b.n	801c728 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801c7a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c7a6:	2310      	movs	r3, #16
 801c7a8:	4641      	mov	r1, r8
 801c7aa:	6820      	ldr	r0, [r4, #0]
 801c7ac:	1aba      	subs	r2, r7, r2
 801c7ae:	f104 0904 	add.w	r9, r4, #4
 801c7b2:	b292      	uxth	r2, r2
 801c7b4:	f7ff fdbd 	bl	801c332 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801c7b8:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801c7bc:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801c7c0:	2b00      	cmp	r3, #0
 801c7c2:	d0b1      	beq.n	801c728 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801c7c4:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801c7c8:	2919      	cmp	r1, #25
 801c7ca:	d8f7      	bhi.n	801c7bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801c7cc:	3b20      	subs	r3, #32
 801c7ce:	8013      	strh	r3, [r2, #0]
 801c7d0:	e7f4      	b.n	801c7bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801c7d2:	2200      	movs	r2, #0
 801c7d4:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801c7d8:	e760      	b.n	801c69c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801c7da:	459a      	cmp	sl, r3
 801c7dc:	f77f af40 	ble.w	801c660 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801c7e0:	f109 0302 	add.w	r3, r9, #2
 801c7e4:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 801c7e8:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 801c7ec:	a809      	add	r0, sp, #36	; 0x24
 801c7ee:	9309      	str	r3, [sp, #36]	; 0x24
 801c7f0:	ab0f      	add	r3, sp, #60	; 0x3c
 801c7f2:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 801c7f6:	9304      	str	r3, [sp, #16]
 801c7f8:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801c7fc:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 801c800:	9303      	str	r3, [sp, #12]
 801c802:	ab0e      	add	r3, sp, #56	; 0x38
 801c804:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
 801c808:	9302      	str	r3, [sp, #8]
 801c80a:	ab0c      	add	r3, sp, #48	; 0x30
 801c80c:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 801c810:	9301      	str	r3, [sp, #4]
 801c812:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801c816:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 801c81a:	9300      	str	r3, [sp, #0]
 801c81c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801c820:	950e      	str	r5, [sp, #56]	; 0x38
 801c822:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 801c826:	950f      	str	r5, [sp, #60]	; 0x3c
 801c828:	f7ff fe92 	bl	801c550 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801c82c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c82e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c830:	2b00      	cmp	r3, #0
 801c832:	bfbf      	itttt	lt
 801c834:	6823      	ldrlt	r3, [r4, #0]
 801c836:	3404      	addlt	r4, #4
 801c838:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801c83c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801c83e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c840:	2b00      	cmp	r3, #0
 801c842:	bfbf      	itttt	lt
 801c844:	6823      	ldrlt	r3, [r4, #0]
 801c846:	3404      	addlt	r4, #4
 801c848:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801c84c:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801c84e:	8813      	ldrh	r3, [r2, #0]
 801c850:	2b69      	cmp	r3, #105	; 0x69
 801c852:	f43f af2b 	beq.w	801c6ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801c856:	f63f af39 	bhi.w	801c6cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x96>
 801c85a:	2b58      	cmp	r3, #88	; 0x58
 801c85c:	f43f af26 	beq.w	801c6ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801c860:	f63f af20 	bhi.w	801c6a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x6e>
 801c864:	2b25      	cmp	r3, #37	; 0x25
 801c866:	f43f af3c 	beq.w	801c6e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xac>
 801c86a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c86c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801c870:	f8b9 2000 	ldrh.w	r2, [r9]
 801c874:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801c878:	3301      	adds	r3, #1
 801c87a:	930d      	str	r3, [sp, #52]	; 0x34
 801c87c:	e734      	b.n	801c6e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
	...

0801c880 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801c880:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c882:	4605      	mov	r5, r0
 801c884:	b0a1      	sub	sp, #132	; 0x84
 801c886:	4610      	mov	r0, r2
 801c888:	460e      	mov	r6, r1
 801c88a:	4614      	mov	r4, r2
 801c88c:	461f      	mov	r7, r3
 801c88e:	f7ff fd33 	bl	801c2f8 <_ZN8touchgfx7Unicode6strlenEPKc>
 801c892:	283f      	cmp	r0, #63	; 0x3f
 801c894:	d906      	bls.n	801c8a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 801c896:	4b0a      	ldr	r3, [pc, #40]	; (801c8c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 801c898:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 801c89c:	4a09      	ldr	r2, [pc, #36]	; (801c8c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 801c89e:	480a      	ldr	r0, [pc, #40]	; (801c8c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 801c8a0:	f009 ffac 	bl	80267fc <__assert_func>
 801c8a4:	4621      	mov	r1, r4
 801c8a6:	2240      	movs	r2, #64	; 0x40
 801c8a8:	4668      	mov	r0, sp
 801c8aa:	f7ff fd31 	bl	801c310 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801c8ae:	463b      	mov	r3, r7
 801c8b0:	466a      	mov	r2, sp
 801c8b2:	4631      	mov	r1, r6
 801c8b4:	4628      	mov	r0, r5
 801c8b6:	f7ff febe 	bl	801c636 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 801c8ba:	b021      	add	sp, #132	; 0x84
 801c8bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c8be:	bf00      	nop
 801c8c0:	0802ac11 	.word	0x0802ac11
 801c8c4:	0802ace3 	.word	0x0802ace3
 801c8c8:	0802ac2e 	.word	0x0802ac2e

0801c8cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801c8cc:	b40c      	push	{r2, r3}
 801c8ce:	b507      	push	{r0, r1, r2, lr}
 801c8d0:	ab04      	add	r3, sp, #16
 801c8d2:	f853 2b04 	ldr.w	r2, [r3], #4
 801c8d6:	9301      	str	r3, [sp, #4]
 801c8d8:	f7ff ffd2 	bl	801c880 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801c8dc:	b003      	add	sp, #12
 801c8de:	f85d eb04 	ldr.w	lr, [sp], #4
 801c8e2:	b002      	add	sp, #8
 801c8e4:	4770      	bx	lr
	...

0801c8e8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>:
 801c8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8ec:	b0c3      	sub	sp, #268	; 0x10c
 801c8ee:	2400      	movs	r4, #0
 801c8f0:	4606      	mov	r6, r0
 801c8f2:	4689      	mov	r9, r1
 801c8f4:	af10      	add	r7, sp, #64	; 0x40
 801c8f6:	9209      	str	r2, [sp, #36]	; 0x24
 801c8f8:	4621      	mov	r1, r4
 801c8fa:	22c8      	movs	r2, #200	; 0xc8
 801c8fc:	4638      	mov	r0, r7
 801c8fe:	469a      	mov	sl, r3
 801c900:	940c      	str	r4, [sp, #48]	; 0x30
 801c902:	f7fe fcce 	bl	801b2a2 <_ZN8touchgfx6memsetEPvhm>
 801c906:	b116      	cbz	r6, 801c90e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 801c908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c90a:	b923      	cbnz	r3, 801c916 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x2e>
 801c90c:	8033      	strh	r3, [r6, #0]
 801c90e:	4630      	mov	r0, r6
 801c910:	b043      	add	sp, #268	; 0x10c
 801c912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c916:	f109 3bff 	add.w	fp, r9, #4294967295
 801c91a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c91c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c91e:	8812      	ldrh	r2, [r2, #0]
 801c920:	2a00      	cmp	r2, #0
 801c922:	f000 80d1 	beq.w	801cac8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 801c926:	459b      	cmp	fp, r3
 801c928:	f340 80ce 	ble.w	801cac8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 801c92c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801c92e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c930:	882a      	ldrh	r2, [r5, #0]
 801c932:	2a00      	cmp	r2, #0
 801c934:	d0f1      	beq.n	801c91a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801c936:	2a25      	cmp	r2, #37	; 0x25
 801c938:	f000 80ca 	beq.w	801cad0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e8>
 801c93c:	459b      	cmp	fp, r3
 801c93e:	ddec      	ble.n	801c91a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801c940:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801c944:	3502      	adds	r5, #2
 801c946:	3301      	adds	r3, #1
 801c948:	9509      	str	r5, [sp, #36]	; 0x24
 801c94a:	930c      	str	r3, [sp, #48]	; 0x30
 801c94c:	e7ee      	b.n	801c92c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x44>
 801c94e:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801c952:	3202      	adds	r2, #2
 801c954:	920c      	str	r2, [sp, #48]	; 0x30
 801c956:	e0ac      	b.n	801cab2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1ca>
 801c958:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801c95c:	970f      	str	r7, [sp, #60]	; 0x3c
 801c95e:	3401      	adds	r4, #1
 801c960:	edd3 7a00 	vldr	s15, [r3]
 801c964:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801c968:	b923      	cbnz	r3, 801c974 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x8c>
 801c96a:	2301      	movs	r3, #1
 801c96c:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801c970:	2303      	movs	r3, #3
 801c972:	930e      	str	r3, [sp, #56]	; 0x38
 801c974:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c978:	980e      	ldr	r0, [sp, #56]	; 0x38
 801c97a:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 801c97e:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 801cb7c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x294>
 801c982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c986:	bf42      	ittt	mi
 801c988:	232d      	movmi	r3, #45	; 0x2d
 801c98a:	eef1 7a67 	vnegmi.f32	s15, s15
 801c98e:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 801c992:	2300      	movs	r3, #0
 801c994:	4298      	cmp	r0, r3
 801c996:	dd03      	ble.n	801c9a0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xb8>
 801c998:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801c99c:	3301      	adds	r3, #1
 801c99e:	e7f9      	b.n	801c994 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xac>
 801c9a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c9a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c9a8:	eeb0 7a67 	vmov.f32	s14, s15
 801c9ac:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801c9b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c9b4:	da26      	bge.n	801ca04 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x11c>
 801c9b6:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801c9ba:	eba9 0202 	sub.w	r2, r9, r2
 801c9be:	2100      	movs	r1, #0
 801c9c0:	eef4 6ae5 	vcmpe.f32	s13, s11
 801c9c4:	b28d      	uxth	r5, r1
 801c9c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c9ca:	db21      	blt.n	801ca10 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801c9cc:	1a53      	subs	r3, r2, r1
 801c9ce:	2b00      	cmp	r3, #0
 801c9d0:	dd1e      	ble.n	801ca10 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801c9d2:	2963      	cmp	r1, #99	; 0x63
 801c9d4:	d01b      	beq.n	801ca0e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x126>
 801c9d6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801c9da:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801c9de:	ee17 3a10 	vmov	r3, s14
 801c9e2:	2b09      	cmp	r3, #9
 801c9e4:	bfa8      	it	ge
 801c9e6:	2309      	movge	r3, #9
 801c9e8:	ee07 3a10 	vmov	s14, r3
 801c9ec:	f103 0530 	add.w	r5, r3, #48	; 0x30
 801c9f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c9f4:	f827 5011 	strh.w	r5, [r7, r1, lsl #1]
 801c9f8:	3101      	adds	r1, #1
 801c9fa:	eee7 7a66 	vfms.f32	s15, s14, s13
 801c9fe:	eec6 6a86 	vdiv.f32	s13, s13, s12
 801ca02:	e7dd      	b.n	801c9c0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xd8>
 801ca04:	ee66 6a86 	vmul.f32	s13, s13, s12
 801ca08:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801ca0c:	e7ce      	b.n	801c9ac <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xc4>
 801ca0e:	460d      	mov	r5, r1
 801ca10:	2a63      	cmp	r2, #99	; 0x63
 801ca12:	bfd4      	ite	le
 801ca14:	ebc5 0202 	rsble	r2, r5, r2
 801ca18:	f1c5 0263 	rsbgt	r2, r5, #99	; 0x63
 801ca1c:	2a00      	cmp	r2, #0
 801ca1e:	dd4e      	ble.n	801cabe <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d6>
 801ca20:	4603      	mov	r3, r0
 801ca22:	f04f 0801 	mov.w	r8, #1
 801ca26:	2b00      	cmp	r3, #0
 801ca28:	dd0e      	ble.n	801ca48 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x160>
 801ca2a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801ca2e:	210a      	movs	r1, #10
 801ca30:	3b01      	subs	r3, #1
 801ca32:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801ca36:	ee17 ca10 	vmov	ip, s14
 801ca3a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ca3e:	fb01 c808 	mla	r8, r1, r8, ip
 801ca42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ca46:	e7ee      	b.n	801ca26 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x13e>
 801ca48:	2800      	cmp	r0, #0
 801ca4a:	f100 33ff 	add.w	r3, r0, #4294967295
 801ca4e:	ea4f 0545 	mov.w	r5, r5, lsl #1
 801ca52:	bfac      	ite	ge
 801ca54:	1a18      	subge	r0, r3, r0
 801ca56:	4618      	movlt	r0, r3
 801ca58:	b292      	uxth	r2, r2
 801ca5a:	230a      	movs	r3, #10
 801ca5c:	900e      	str	r0, [sp, #56]	; 0x38
 801ca5e:	1979      	adds	r1, r7, r5
 801ca60:	4640      	mov	r0, r8
 801ca62:	f7ff fc84 	bl	801c36e <_ZN8touchgfx7Unicode4itoaElPtti>
 801ca66:	f1b8 0f01 	cmp.w	r8, #1
 801ca6a:	dc26      	bgt.n	801caba <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d2>
 801ca6c:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 801ca70:	2b00      	cmp	r3, #0
 801ca72:	bf0c      	ite	eq
 801ca74:	2300      	moveq	r3, #0
 801ca76:	232e      	movne	r3, #46	; 0x2e
 801ca78:	aa42      	add	r2, sp, #264	; 0x108
 801ca7a:	4415      	add	r5, r2
 801ca7c:	aa0c      	add	r2, sp, #48	; 0x30
 801ca7e:	f825 3cc8 	strh.w	r3, [r5, #-200]
 801ca82:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801ca86:	a80f      	add	r0, sp, #60	; 0x3c
 801ca88:	9205      	str	r2, [sp, #20]
 801ca8a:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 801ca8e:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801ca92:	9204      	str	r2, [sp, #16]
 801ca94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ca96:	9203      	str	r2, [sp, #12]
 801ca98:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 801ca9c:	9202      	str	r2, [sp, #8]
 801ca9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801caa0:	9201      	str	r2, [sp, #4]
 801caa2:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 801caa6:	e9cd 9606 	strd	r9, r6, [sp, #24]
 801caaa:	9200      	str	r2, [sp, #0]
 801caac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801caae:	f7ff fc9f 	bl	801c3f0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801cab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cab4:	3302      	adds	r3, #2
 801cab6:	9309      	str	r3, [sp, #36]	; 0x24
 801cab8:	e72f      	b.n	801c91a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801caba:	232e      	movs	r3, #46	; 0x2e
 801cabc:	e7dc      	b.n	801ca78 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x190>
 801cabe:	ab42      	add	r3, sp, #264	; 0x108
 801cac0:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801cac4:	2300      	movs	r3, #0
 801cac6:	e7d9      	b.n	801ca7c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x194>
 801cac8:	2200      	movs	r2, #0
 801caca:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801cace:	e71e      	b.n	801c90e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 801cad0:	459b      	cmp	fp, r3
 801cad2:	f77f af22 	ble.w	801c91a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801cad6:	2300      	movs	r3, #0
 801cad8:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 801cadc:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 801cae0:	a809      	add	r0, sp, #36	; 0x24
 801cae2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801cae6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801caea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801caee:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801caf2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801caf6:	930d      	str	r3, [sp, #52]	; 0x34
 801caf8:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801cafc:	930e      	str	r3, [sp, #56]	; 0x38
 801cafe:	1cab      	adds	r3, r5, #2
 801cb00:	9309      	str	r3, [sp, #36]	; 0x24
 801cb02:	ab0e      	add	r3, sp, #56	; 0x38
 801cb04:	9304      	str	r3, [sp, #16]
 801cb06:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801cb0a:	9303      	str	r3, [sp, #12]
 801cb0c:	ab0d      	add	r3, sp, #52	; 0x34
 801cb0e:	9302      	str	r3, [sp, #8]
 801cb10:	ab0b      	add	r3, sp, #44	; 0x2c
 801cb12:	9301      	str	r3, [sp, #4]
 801cb14:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801cb18:	9300      	str	r3, [sp, #0]
 801cb1a:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 801cb1e:	f7ff fd17 	bl	801c550 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801cb22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cb24:	2b00      	cmp	r3, #0
 801cb26:	da0b      	bge.n	801cb40 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x258>
 801cb28:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801cb2c:	3401      	adds	r4, #1
 801cb2e:	edd3 7a00 	vldr	s15, [r3]
 801cb32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cb36:	ee17 3a90 	vmov	r3, s15
 801cb3a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cb3e:	930d      	str	r3, [sp, #52]	; 0x34
 801cb40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cb42:	2b00      	cmp	r3, #0
 801cb44:	da0b      	bge.n	801cb5e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x276>
 801cb46:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801cb4a:	3401      	adds	r4, #1
 801cb4c:	edd3 7a00 	vldr	s15, [r3]
 801cb50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cb54:	ee17 3a90 	vmov	r3, s15
 801cb58:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cb5c:	930e      	str	r3, [sp, #56]	; 0x38
 801cb5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cb60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cb62:	881b      	ldrh	r3, [r3, #0]
 801cb64:	2b25      	cmp	r3, #37	; 0x25
 801cb66:	f43f aef2 	beq.w	801c94e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x66>
 801cb6a:	2b66      	cmp	r3, #102	; 0x66
 801cb6c:	f43f aef4 	beq.w	801c958 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x70>
 801cb70:	9509      	str	r5, [sp, #36]	; 0x24
 801cb72:	882b      	ldrh	r3, [r5, #0]
 801cb74:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801cb78:	3201      	adds	r2, #1
 801cb7a:	e6eb      	b.n	801c954 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x6c>
 801cb7c:	3f000002 	.word	0x3f000002

0801cb80 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 801cb80:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cb82:	4605      	mov	r5, r0
 801cb84:	b0a1      	sub	sp, #132	; 0x84
 801cb86:	4610      	mov	r0, r2
 801cb88:	460e      	mov	r6, r1
 801cb8a:	4614      	mov	r4, r2
 801cb8c:	461f      	mov	r7, r3
 801cb8e:	f7ff fbb3 	bl	801c2f8 <_ZN8touchgfx7Unicode6strlenEPKc>
 801cb92:	283f      	cmp	r0, #63	; 0x3f
 801cb94:	d906      	bls.n	801cba4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x24>
 801cb96:	4b0a      	ldr	r3, [pc, #40]	; (801cbc0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x40>)
 801cb98:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 801cb9c:	4a09      	ldr	r2, [pc, #36]	; (801cbc4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x44>)
 801cb9e:	480a      	ldr	r0, [pc, #40]	; (801cbc8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x48>)
 801cba0:	f009 fe2c 	bl	80267fc <__assert_func>
 801cba4:	4621      	mov	r1, r4
 801cba6:	2240      	movs	r2, #64	; 0x40
 801cba8:	4668      	mov	r0, sp
 801cbaa:	f7ff fbb1 	bl	801c310 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801cbae:	463b      	mov	r3, r7
 801cbb0:	466a      	mov	r2, sp
 801cbb2:	4631      	mov	r1, r6
 801cbb4:	4628      	mov	r0, r5
 801cbb6:	f7ff fe97 	bl	801c8e8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>
 801cbba:	b021      	add	sp, #132	; 0x84
 801cbbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cbbe:	bf00      	nop
 801cbc0:	0802ac11 	.word	0x0802ac11
 801cbc4:	0802ac54 	.word	0x0802ac54
 801cbc8:	0802ac2e 	.word	0x0802ac2e

0801cbcc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801cbcc:	4b01      	ldr	r3, [pc, #4]	; (801cbd4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801cbce:	6018      	str	r0, [r3, #0]
 801cbd0:	4770      	bx	lr
 801cbd2:	bf00      	nop
 801cbd4:	2000c72c 	.word	0x2000c72c

0801cbd8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801cbd8:	4b07      	ldr	r3, [pc, #28]	; (801cbf8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 801cbda:	881a      	ldrh	r2, [r3, #0]
 801cbdc:	4282      	cmp	r2, r0
 801cbde:	d809      	bhi.n	801cbf4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801cbe0:	4b06      	ldr	r3, [pc, #24]	; (801cbfc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 801cbe2:	881b      	ldrh	r3, [r3, #0]
 801cbe4:	4413      	add	r3, r2
 801cbe6:	4298      	cmp	r0, r3
 801cbe8:	da04      	bge.n	801cbf4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801cbea:	4b05      	ldr	r3, [pc, #20]	; (801cc00 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 801cbec:	681b      	ldr	r3, [r3, #0]
 801cbee:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801cbf2:	4770      	bx	lr
 801cbf4:	2000      	movs	r0, #0
 801cbf6:	4770      	bx	lr
 801cbf8:	2000c74c 	.word	0x2000c74c
 801cbfc:	2000c750 	.word	0x2000c750
 801cc00:	2000c730 	.word	0x2000c730

0801cc04 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801cc04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc08:	4d26      	ldr	r5, [pc, #152]	; (801cca4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801cc0a:	682b      	ldr	r3, [r5, #0]
 801cc0c:	2b00      	cmp	r3, #0
 801cc0e:	d046      	beq.n	801cc9e <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801cc10:	4a25      	ldr	r2, [pc, #148]	; (801cca8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801cc12:	4f26      	ldr	r7, [pc, #152]	; (801ccac <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801cc14:	8810      	ldrh	r0, [r2, #0]
 801cc16:	883c      	ldrh	r4, [r7, #0]
 801cc18:	4e25      	ldr	r6, [pc, #148]	; (801ccb0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801cc1a:	4420      	add	r0, r4
 801cc1c:	1c42      	adds	r2, r0, #1
 801cc1e:	ea4f 0880 	mov.w	r8, r0, lsl #2
 801cc22:	f022 0201 	bic.w	r2, r2, #1
 801cc26:	0412      	lsls	r2, r2, #16
 801cc28:	0c12      	lsrs	r2, r2, #16
 801cc2a:	0051      	lsls	r1, r2, #1
 801cc2c:	220e      	movs	r2, #14
 801cc2e:	eb08 0e01 	add.w	lr, r8, r1
 801cc32:	fb02 fc04 	mul.w	ip, r2, r4
 801cc36:	eb03 0208 	add.w	r2, r3, r8
 801cc3a:	4c1e      	ldr	r4, [pc, #120]	; (801ccb4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801cc3c:	6022      	str	r2, [r4, #0]
 801cc3e:	eb03 020e 	add.w	r2, r3, lr
 801cc42:	44e6      	add	lr, ip
 801cc44:	6032      	str	r2, [r6, #0]
 801cc46:	4473      	add	r3, lr
 801cc48:	4a1b      	ldr	r2, [pc, #108]	; (801ccb8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801cc4a:	6013      	str	r3, [r2, #0]
 801cc4c:	2300      	movs	r3, #0
 801cc4e:	4a1b      	ldr	r2, [pc, #108]	; (801ccbc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801cc50:	8013      	strh	r3, [r2, #0]
 801cc52:	4a1b      	ldr	r2, [pc, #108]	; (801ccc0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801cc54:	6812      	ldr	r2, [r2, #0]
 801cc56:	eba2 0208 	sub.w	r2, r2, r8
 801cc5a:	1a52      	subs	r2, r2, r1
 801cc5c:	4919      	ldr	r1, [pc, #100]	; (801ccc4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801cc5e:	eba2 020c 	sub.w	r2, r2, ip
 801cc62:	469c      	mov	ip, r3
 801cc64:	600a      	str	r2, [r1, #0]
 801cc66:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801cc6a:	4a17      	ldr	r2, [pc, #92]	; (801ccc8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801cc6c:	8013      	strh	r3, [r2, #0]
 801cc6e:	4283      	cmp	r3, r0
 801cc70:	d10d      	bne.n	801cc8e <_ZN8touchgfx6Bitmap10clearCacheEv+0x8a>
 801cc72:	883d      	ldrh	r5, [r7, #0]
 801cc74:	2300      	movs	r3, #0
 801cc76:	6830      	ldr	r0, [r6, #0]
 801cc78:	240e      	movs	r4, #14
 801cc7a:	429d      	cmp	r5, r3
 801cc7c:	d90f      	bls.n	801cc9e <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801cc7e:	fb04 0203 	mla	r2, r4, r3, r0
 801cc82:	3301      	adds	r3, #1
 801cc84:	7b11      	ldrb	r1, [r2, #12]
 801cc86:	f36f 1145 	bfc	r1, #5, #1
 801cc8a:	7311      	strb	r1, [r2, #12]
 801cc8c:	e7f5      	b.n	801cc7a <_ZN8touchgfx6Bitmap10clearCacheEv+0x76>
 801cc8e:	682a      	ldr	r2, [r5, #0]
 801cc90:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801cc94:	6822      	ldr	r2, [r4, #0]
 801cc96:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801cc9a:	3301      	adds	r3, #1
 801cc9c:	e7e7      	b.n	801cc6e <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 801cc9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cca2:	bf00      	nop
 801cca4:	2000c730 	.word	0x2000c730
 801cca8:	2000c74c 	.word	0x2000c74c
 801ccac:	2000c750 	.word	0x2000c750
 801ccb0:	2000c734 	.word	0x2000c734
 801ccb4:	2000c744 	.word	0x2000c744
 801ccb8:	2000c73c 	.word	0x2000c73c
 801ccbc:	2000c74e 	.word	0x2000c74e
 801ccc0:	2000c738 	.word	0x2000c738
 801ccc4:	2000c748 	.word	0x2000c748
 801ccc8:	2000c740 	.word	0x2000c740

0801cccc <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801cccc:	4b10      	ldr	r3, [pc, #64]	; (801cd10 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801ccce:	b510      	push	{r4, lr}
 801ccd0:	681b      	ldr	r3, [r3, #0]
 801ccd2:	b9db      	cbnz	r3, 801cd0c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801ccd4:	b1d1      	cbz	r1, 801cd0c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801ccd6:	4b0f      	ldr	r3, [pc, #60]	; (801cd14 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801ccd8:	240e      	movs	r4, #14
 801ccda:	801a      	strh	r2, [r3, #0]
 801ccdc:	b292      	uxth	r2, r2
 801ccde:	4b0e      	ldr	r3, [pc, #56]	; (801cd18 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801cce0:	881b      	ldrh	r3, [r3, #0]
 801cce2:	4413      	add	r3, r2
 801cce4:	4362      	muls	r2, r4
 801cce6:	2406      	movs	r4, #6
 801cce8:	fb04 2203 	mla	r2, r4, r3, r2
 801ccec:	428a      	cmp	r2, r1
 801ccee:	d305      	bcc.n	801ccfc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801ccf0:	4b0a      	ldr	r3, [pc, #40]	; (801cd1c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801ccf2:	2137      	movs	r1, #55	; 0x37
 801ccf4:	4a0a      	ldr	r2, [pc, #40]	; (801cd20 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801ccf6:	480b      	ldr	r0, [pc, #44]	; (801cd24 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801ccf8:	f009 fd80 	bl	80267fc <__assert_func>
 801ccfc:	4b0a      	ldr	r3, [pc, #40]	; (801cd28 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801ccfe:	6019      	str	r1, [r3, #0]
 801cd00:	4b0a      	ldr	r3, [pc, #40]	; (801cd2c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801cd02:	6018      	str	r0, [r3, #0]
 801cd04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cd08:	f7ff bf7c 	b.w	801cc04 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801cd0c:	bd10      	pop	{r4, pc}
 801cd0e:	bf00      	nop
 801cd10:	2000c73c 	.word	0x2000c73c
 801cd14:	2000c750 	.word	0x2000c750
 801cd18:	2000c74c 	.word	0x2000c74c
 801cd1c:	0802adc5 	.word	0x0802adc5
 801cd20:	0802ae1e 	.word	0x0802ae1e
 801cd24:	0802ada0 	.word	0x0802ada0
 801cd28:	2000c738 	.word	0x2000c738
 801cd2c:	2000c730 	.word	0x2000c730

0801cd30 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801cd30:	b470      	push	{r4, r5, r6}
 801cd32:	4c07      	ldr	r4, [pc, #28]	; (801cd50 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801cd34:	4605      	mov	r5, r0
 801cd36:	4610      	mov	r0, r2
 801cd38:	9a03      	ldr	r2, [sp, #12]
 801cd3a:	6826      	ldr	r6, [r4, #0]
 801cd3c:	b936      	cbnz	r6, 801cd4c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801cd3e:	6025      	str	r5, [r4, #0]
 801cd40:	4c04      	ldr	r4, [pc, #16]	; (801cd54 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801cd42:	8021      	strh	r1, [r4, #0]
 801cd44:	4619      	mov	r1, r3
 801cd46:	bc70      	pop	{r4, r5, r6}
 801cd48:	f7ff bfc0 	b.w	801cccc <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801cd4c:	bc70      	pop	{r4, r5, r6}
 801cd4e:	4770      	bx	lr
 801cd50:	2000c754 	.word	0x2000c754
 801cd54:	2000c74c 	.word	0x2000c74c

0801cd58 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801cd58:	b508      	push	{r3, lr}
 801cd5a:	4b14      	ldr	r3, [pc, #80]	; (801cdac <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801cd5c:	6819      	ldr	r1, [r3, #0]
 801cd5e:	b931      	cbnz	r1, 801cd6e <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801cd60:	4b13      	ldr	r3, [pc, #76]	; (801cdb0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801cd62:	f240 21e6 	movw	r1, #742	; 0x2e6
 801cd66:	4a13      	ldr	r2, [pc, #76]	; (801cdb4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801cd68:	4813      	ldr	r0, [pc, #76]	; (801cdb8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801cd6a:	f009 fd47 	bl	80267fc <__assert_func>
 801cd6e:	4a13      	ldr	r2, [pc, #76]	; (801cdbc <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801cd70:	8803      	ldrh	r3, [r0, #0]
 801cd72:	8812      	ldrh	r2, [r2, #0]
 801cd74:	4293      	cmp	r3, r2
 801cd76:	d204      	bcs.n	801cd82 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801cd78:	2214      	movs	r2, #20
 801cd7a:	fb02 1303 	mla	r3, r2, r3, r1
 801cd7e:	8918      	ldrh	r0, [r3, #8]
 801cd80:	bd08      	pop	{r3, pc}
 801cd82:	490f      	ldr	r1, [pc, #60]	; (801cdc0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801cd84:	8809      	ldrh	r1, [r1, #0]
 801cd86:	4411      	add	r1, r2
 801cd88:	428b      	cmp	r3, r1
 801cd8a:	da06      	bge.n	801cd9a <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801cd8c:	1a9b      	subs	r3, r3, r2
 801cd8e:	4a0d      	ldr	r2, [pc, #52]	; (801cdc4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801cd90:	210e      	movs	r1, #14
 801cd92:	6812      	ldr	r2, [r2, #0]
 801cd94:	fb01 2303 	mla	r3, r1, r3, r2
 801cd98:	e7f1      	b.n	801cd7e <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801cd9a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801cd9e:	4293      	cmp	r3, r2
 801cda0:	bf0a      	itet	eq
 801cda2:	4b09      	ldreq	r3, [pc, #36]	; (801cdc8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801cda4:	2000      	movne	r0, #0
 801cda6:	8818      	ldrheq	r0, [r3, #0]
 801cda8:	e7ea      	b.n	801cd80 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801cdaa:	bf00      	nop
 801cdac:	2000c754 	.word	0x2000c754
 801cdb0:	08028d78 	.word	0x08028d78
 801cdb4:	0802aecb 	.word	0x0802aecb
 801cdb8:	0802ada0 	.word	0x0802ada0
 801cdbc:	2000c74c 	.word	0x2000c74c
 801cdc0:	2000c750 	.word	0x2000c750
 801cdc4:	2000c734 	.word	0x2000c734
 801cdc8:	2000c680 	.word	0x2000c680

0801cdcc <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801cdcc:	b508      	push	{r3, lr}
 801cdce:	4b14      	ldr	r3, [pc, #80]	; (801ce20 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801cdd0:	6819      	ldr	r1, [r3, #0]
 801cdd2:	b931      	cbnz	r1, 801cde2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801cdd4:	4b13      	ldr	r3, [pc, #76]	; (801ce24 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801cdd6:	f240 21fa 	movw	r1, #762	; 0x2fa
 801cdda:	4a13      	ldr	r2, [pc, #76]	; (801ce28 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801cddc:	4813      	ldr	r0, [pc, #76]	; (801ce2c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801cdde:	f009 fd0d 	bl	80267fc <__assert_func>
 801cde2:	4a13      	ldr	r2, [pc, #76]	; (801ce30 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801cde4:	8803      	ldrh	r3, [r0, #0]
 801cde6:	8812      	ldrh	r2, [r2, #0]
 801cde8:	4293      	cmp	r3, r2
 801cdea:	d204      	bcs.n	801cdf6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801cdec:	2214      	movs	r2, #20
 801cdee:	fb02 1303 	mla	r3, r2, r3, r1
 801cdf2:	8958      	ldrh	r0, [r3, #10]
 801cdf4:	bd08      	pop	{r3, pc}
 801cdf6:	490f      	ldr	r1, [pc, #60]	; (801ce34 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801cdf8:	8809      	ldrh	r1, [r1, #0]
 801cdfa:	4411      	add	r1, r2
 801cdfc:	428b      	cmp	r3, r1
 801cdfe:	da06      	bge.n	801ce0e <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801ce00:	1a9b      	subs	r3, r3, r2
 801ce02:	4a0d      	ldr	r2, [pc, #52]	; (801ce38 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801ce04:	210e      	movs	r1, #14
 801ce06:	6812      	ldr	r2, [r2, #0]
 801ce08:	fb01 2303 	mla	r3, r1, r3, r2
 801ce0c:	e7f1      	b.n	801cdf2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801ce0e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ce12:	4293      	cmp	r3, r2
 801ce14:	bf0a      	itet	eq
 801ce16:	4b09      	ldreq	r3, [pc, #36]	; (801ce3c <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801ce18:	2000      	movne	r0, #0
 801ce1a:	8818      	ldrheq	r0, [r3, #0]
 801ce1c:	e7ea      	b.n	801cdf4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801ce1e:	bf00      	nop
 801ce20:	2000c754 	.word	0x2000c754
 801ce24:	08028d78 	.word	0x08028d78
 801ce28:	0802aef7 	.word	0x0802aef7
 801ce2c:	0802ada0 	.word	0x0802ada0
 801ce30:	2000c74c 	.word	0x2000c74c
 801ce34:	2000c750 	.word	0x2000c750
 801ce38:	2000c734 	.word	0x2000c734
 801ce3c:	2000c682 	.word	0x2000c682

0801ce40 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801ce40:	4b23      	ldr	r3, [pc, #140]	; (801ced0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801ce42:	b510      	push	{r4, lr}
 801ce44:	681c      	ldr	r4, [r3, #0]
 801ce46:	b934      	cbnz	r4, 801ce56 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801ce48:	4b22      	ldr	r3, [pc, #136]	; (801ced4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801ce4a:	f240 310e 	movw	r1, #782	; 0x30e
 801ce4e:	4a22      	ldr	r2, [pc, #136]	; (801ced8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801ce50:	4822      	ldr	r0, [pc, #136]	; (801cedc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801ce52:	f009 fcd3 	bl	80267fc <__assert_func>
 801ce56:	4a22      	ldr	r2, [pc, #136]	; (801cee0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801ce58:	880b      	ldrh	r3, [r1, #0]
 801ce5a:	8812      	ldrh	r2, [r2, #0]
 801ce5c:	4293      	cmp	r3, r2
 801ce5e:	d211      	bcs.n	801ce84 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801ce60:	2214      	movs	r2, #20
 801ce62:	fb02 4303 	mla	r3, r2, r3, r4
 801ce66:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801ce6a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801ce6e:	8a1a      	ldrh	r2, [r3, #16]
 801ce70:	8a5b      	ldrh	r3, [r3, #18]
 801ce72:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801ce76:	8004      	strh	r4, [r0, #0]
 801ce78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ce7c:	8041      	strh	r1, [r0, #2]
 801ce7e:	8082      	strh	r2, [r0, #4]
 801ce80:	80c3      	strh	r3, [r0, #6]
 801ce82:	e00e      	b.n	801cea2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801ce84:	4917      	ldr	r1, [pc, #92]	; (801cee4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801ce86:	8809      	ldrh	r1, [r1, #0]
 801ce88:	4411      	add	r1, r2
 801ce8a:	428b      	cmp	r3, r1
 801ce8c:	da0a      	bge.n	801cea4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801ce8e:	1a9b      	subs	r3, r3, r2
 801ce90:	4a15      	ldr	r2, [pc, #84]	; (801cee8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801ce92:	210e      	movs	r1, #14
 801ce94:	6812      	ldr	r2, [r2, #0]
 801ce96:	fb01 2303 	mla	r3, r1, r3, r2
 801ce9a:	681a      	ldr	r2, [r3, #0]
 801ce9c:	6002      	str	r2, [r0, #0]
 801ce9e:	685a      	ldr	r2, [r3, #4]
 801cea0:	6042      	str	r2, [r0, #4]
 801cea2:	bd10      	pop	{r4, pc}
 801cea4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801cea8:	4293      	cmp	r3, r2
 801ceaa:	d10b      	bne.n	801cec4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801ceac:	4b0f      	ldr	r3, [pc, #60]	; (801ceec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801ceae:	f9b3 1000 	ldrsh.w	r1, [r3]
 801ceb2:	4b0f      	ldr	r3, [pc, #60]	; (801cef0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801ceb4:	8081      	strh	r1, [r0, #4]
 801ceb6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ceba:	2300      	movs	r3, #0
 801cebc:	80c2      	strh	r2, [r0, #6]
 801cebe:	8003      	strh	r3, [r0, #0]
 801cec0:	8043      	strh	r3, [r0, #2]
 801cec2:	e7ee      	b.n	801cea2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801cec4:	2300      	movs	r3, #0
 801cec6:	8003      	strh	r3, [r0, #0]
 801cec8:	8043      	strh	r3, [r0, #2]
 801ceca:	8083      	strh	r3, [r0, #4]
 801cecc:	e7d8      	b.n	801ce80 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801cece:	bf00      	nop
 801ced0:	2000c754 	.word	0x2000c754
 801ced4:	08028d78 	.word	0x08028d78
 801ced8:	0802ae64 	.word	0x0802ae64
 801cedc:	0802ada0 	.word	0x0802ada0
 801cee0:	2000c74c 	.word	0x2000c74c
 801cee4:	2000c750 	.word	0x2000c750
 801cee8:	2000c734 	.word	0x2000c734
 801ceec:	2000c680 	.word	0x2000c680
 801cef0:	2000c682 	.word	0x2000c682

0801cef4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801cef4:	4b18      	ldr	r3, [pc, #96]	; (801cf58 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801cef6:	681b      	ldr	r3, [r3, #0]
 801cef8:	b34b      	cbz	r3, 801cf4e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801cefa:	4a18      	ldr	r2, [pc, #96]	; (801cf5c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801cefc:	8800      	ldrh	r0, [r0, #0]
 801cefe:	8812      	ldrh	r2, [r2, #0]
 801cf00:	4290      	cmp	r0, r2
 801cf02:	d211      	bcs.n	801cf28 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801cf04:	2214      	movs	r2, #20
 801cf06:	fb02 3300 	mla	r3, r2, r0, r3
 801cf0a:	8a1a      	ldrh	r2, [r3, #16]
 801cf0c:	8919      	ldrh	r1, [r3, #8]
 801cf0e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801cf12:	428a      	cmp	r2, r1
 801cf14:	db1d      	blt.n	801cf52 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801cf16:	8a58      	ldrh	r0, [r3, #18]
 801cf18:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801cf1c:	895b      	ldrh	r3, [r3, #10]
 801cf1e:	4298      	cmp	r0, r3
 801cf20:	bfac      	ite	ge
 801cf22:	2000      	movge	r0, #0
 801cf24:	2001      	movlt	r0, #1
 801cf26:	4770      	bx	lr
 801cf28:	4b0d      	ldr	r3, [pc, #52]	; (801cf60 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801cf2a:	881b      	ldrh	r3, [r3, #0]
 801cf2c:	4413      	add	r3, r2
 801cf2e:	4298      	cmp	r0, r3
 801cf30:	da0d      	bge.n	801cf4e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801cf32:	4b0c      	ldr	r3, [pc, #48]	; (801cf64 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801cf34:	1a80      	subs	r0, r0, r2
 801cf36:	220e      	movs	r2, #14
 801cf38:	681b      	ldr	r3, [r3, #0]
 801cf3a:	fb02 3300 	mla	r3, r2, r0, r3
 801cf3e:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801cf42:	891a      	ldrh	r2, [r3, #8]
 801cf44:	4291      	cmp	r1, r2
 801cf46:	db04      	blt.n	801cf52 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801cf48:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801cf4c:	e7e6      	b.n	801cf1c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801cf4e:	2000      	movs	r0, #0
 801cf50:	4770      	bx	lr
 801cf52:	2001      	movs	r0, #1
 801cf54:	4770      	bx	lr
 801cf56:	bf00      	nop
 801cf58:	2000c754 	.word	0x2000c754
 801cf5c:	2000c74c 	.word	0x2000c74c
 801cf60:	2000c750 	.word	0x2000c750
 801cf64:	2000c734 	.word	0x2000c734

0801cf68 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801cf68:	b508      	push	{r3, lr}
 801cf6a:	4b12      	ldr	r3, [pc, #72]	; (801cfb4 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801cf6c:	6819      	ldr	r1, [r3, #0]
 801cf6e:	b931      	cbnz	r1, 801cf7e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801cf70:	4b11      	ldr	r3, [pc, #68]	; (801cfb8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801cf72:	f240 3132 	movw	r1, #818	; 0x332
 801cf76:	4a11      	ldr	r2, [pc, #68]	; (801cfbc <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801cf78:	4811      	ldr	r0, [pc, #68]	; (801cfc0 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801cf7a:	f009 fc3f 	bl	80267fc <__assert_func>
 801cf7e:	8803      	ldrh	r3, [r0, #0]
 801cf80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801cf84:	4293      	cmp	r3, r2
 801cf86:	d012      	beq.n	801cfae <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801cf88:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801cf8c:	4293      	cmp	r3, r2
 801cf8e:	d103      	bne.n	801cf98 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801cf90:	4b0c      	ldr	r3, [pc, #48]	; (801cfc4 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801cf92:	681b      	ldr	r3, [r3, #0]
 801cf94:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801cf96:	bd08      	pop	{r3, pc}
 801cf98:	4a0b      	ldr	r2, [pc, #44]	; (801cfc8 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801cf9a:	6812      	ldr	r2, [r2, #0]
 801cf9c:	b11a      	cbz	r2, 801cfa6 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801cf9e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801cfa2:	2800      	cmp	r0, #0
 801cfa4:	d1f7      	bne.n	801cf96 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801cfa6:	2214      	movs	r2, #20
 801cfa8:	4353      	muls	r3, r2
 801cfaa:	58c8      	ldr	r0, [r1, r3]
 801cfac:	e7f3      	b.n	801cf96 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801cfae:	2000      	movs	r0, #0
 801cfb0:	e7f1      	b.n	801cf96 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801cfb2:	bf00      	nop
 801cfb4:	2000c754 	.word	0x2000c754
 801cfb8:	08028d78 	.word	0x08028d78
 801cfbc:	0802ae9a 	.word	0x0802ae9a
 801cfc0:	0802ada0 	.word	0x0802ada0
 801cfc4:	2000c68c 	.word	0x2000c68c
 801cfc8:	2000c730 	.word	0x2000c730

0801cfcc <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801cfcc:	8802      	ldrh	r2, [r0, #0]
 801cfce:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801cfd2:	429a      	cmp	r2, r3
 801cfd4:	d840      	bhi.n	801d058 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801cfd6:	4b21      	ldr	r3, [pc, #132]	; (801d05c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 801cfd8:	881b      	ldrh	r3, [r3, #0]
 801cfda:	429a      	cmp	r2, r3
 801cfdc:	d220      	bcs.n	801d020 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 801cfde:	4b20      	ldr	r3, [pc, #128]	; (801d060 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801cfe0:	6819      	ldr	r1, [r3, #0]
 801cfe2:	2314      	movs	r3, #20
 801cfe4:	fb03 1302 	mla	r3, r3, r2, r1
 801cfe8:	6858      	ldr	r0, [r3, #4]
 801cfea:	2800      	cmp	r0, #0
 801cfec:	d035      	beq.n	801d05a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801cfee:	491d      	ldr	r1, [pc, #116]	; (801d064 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801cff0:	6809      	ldr	r1, [r1, #0]
 801cff2:	2900      	cmp	r1, #0
 801cff4:	d031      	beq.n	801d05a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801cff6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cffa:	b371      	cbz	r1, 801d05a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801cffc:	895a      	ldrh	r2, [r3, #10]
 801cffe:	8918      	ldrh	r0, [r3, #8]
 801d000:	4350      	muls	r0, r2
 801d002:	7c5a      	ldrb	r2, [r3, #17]
 801d004:	7cdb      	ldrb	r3, [r3, #19]
 801d006:	0952      	lsrs	r2, r2, #5
 801d008:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801d00c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801d010:	2b0b      	cmp	r3, #11
 801d012:	bf18      	it	ne
 801d014:	0040      	lslne	r0, r0, #1
 801d016:	3003      	adds	r0, #3
 801d018:	f020 0003 	bic.w	r0, r0, #3
 801d01c:	4408      	add	r0, r1
 801d01e:	4770      	bx	lr
 801d020:	4911      	ldr	r1, [pc, #68]	; (801d068 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801d022:	8809      	ldrh	r1, [r1, #0]
 801d024:	4419      	add	r1, r3
 801d026:	428a      	cmp	r2, r1
 801d028:	da16      	bge.n	801d058 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801d02a:	4910      	ldr	r1, [pc, #64]	; (801d06c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801d02c:	1ad3      	subs	r3, r2, r3
 801d02e:	200e      	movs	r0, #14
 801d030:	6809      	ldr	r1, [r1, #0]
 801d032:	fb00 1303 	mla	r3, r0, r3, r1
 801d036:	7b19      	ldrb	r1, [r3, #12]
 801d038:	f001 011f 	and.w	r1, r1, #31
 801d03c:	290b      	cmp	r1, #11
 801d03e:	d10b      	bne.n	801d058 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801d040:	8919      	ldrh	r1, [r3, #8]
 801d042:	8958      	ldrh	r0, [r3, #10]
 801d044:	4b07      	ldr	r3, [pc, #28]	; (801d064 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801d046:	4348      	muls	r0, r1
 801d048:	6819      	ldr	r1, [r3, #0]
 801d04a:	3003      	adds	r0, #3
 801d04c:	f020 0303 	bic.w	r3, r0, #3
 801d050:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801d054:	4418      	add	r0, r3
 801d056:	4770      	bx	lr
 801d058:	2000      	movs	r0, #0
 801d05a:	4770      	bx	lr
 801d05c:	2000c74c 	.word	0x2000c74c
 801d060:	2000c754 	.word	0x2000c754
 801d064:	2000c730 	.word	0x2000c730
 801d068:	2000c750 	.word	0x2000c750
 801d06c:	2000c734 	.word	0x2000c734

0801d070 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801d070:	4b19      	ldr	r3, [pc, #100]	; (801d0d8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801d072:	6819      	ldr	r1, [r3, #0]
 801d074:	8803      	ldrh	r3, [r0, #0]
 801d076:	b1e9      	cbz	r1, 801d0b4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801d078:	4a18      	ldr	r2, [pc, #96]	; (801d0dc <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801d07a:	8812      	ldrh	r2, [r2, #0]
 801d07c:	429a      	cmp	r2, r3
 801d07e:	d90a      	bls.n	801d096 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801d080:	2214      	movs	r2, #20
 801d082:	fb02 1303 	mla	r3, r2, r3, r1
 801d086:	7c58      	ldrb	r0, [r3, #17]
 801d088:	0942      	lsrs	r2, r0, #5
 801d08a:	7cd8      	ldrb	r0, [r3, #19]
 801d08c:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801d090:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801d094:	4770      	bx	lr
 801d096:	4912      	ldr	r1, [pc, #72]	; (801d0e0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801d098:	8809      	ldrh	r1, [r1, #0]
 801d09a:	4411      	add	r1, r2
 801d09c:	428b      	cmp	r3, r1
 801d09e:	da09      	bge.n	801d0b4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801d0a0:	1a9b      	subs	r3, r3, r2
 801d0a2:	4a10      	ldr	r2, [pc, #64]	; (801d0e4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801d0a4:	210e      	movs	r1, #14
 801d0a6:	6812      	ldr	r2, [r2, #0]
 801d0a8:	fb01 2303 	mla	r3, r1, r3, r2
 801d0ac:	7b18      	ldrb	r0, [r3, #12]
 801d0ae:	f000 001f 	and.w	r0, r0, #31
 801d0b2:	4770      	bx	lr
 801d0b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d0b8:	4293      	cmp	r3, r2
 801d0ba:	d10a      	bne.n	801d0d2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 801d0bc:	4b0a      	ldr	r3, [pc, #40]	; (801d0e8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801d0be:	681b      	ldr	r3, [r3, #0]
 801d0c0:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801d0c4:	b10a      	cbz	r2, 801d0ca <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801d0c6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801d0c8:	b900      	cbnz	r0, 801d0cc <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801d0ca:	6898      	ldr	r0, [r3, #8]
 801d0cc:	6803      	ldr	r3, [r0, #0]
 801d0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d0d0:	4718      	bx	r3
 801d0d2:	2000      	movs	r0, #0
 801d0d4:	4770      	bx	lr
 801d0d6:	bf00      	nop
 801d0d8:	2000c754 	.word	0x2000c754
 801d0dc:	2000c74c 	.word	0x2000c74c
 801d0e0:	2000c750 	.word	0x2000c750
 801d0e4:	2000c734 	.word	0x2000c734
 801d0e8:	2000c68c 	.word	0x2000c68c

0801d0ec <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801d0ec:	2018      	movs	r0, #24
 801d0ee:	4770      	bx	lr

0801d0f0 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801d0f0:	2001      	movs	r0, #1
 801d0f2:	4770      	bx	lr

0801d0f4 <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 801d0f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801d0f8:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 801d0fc:	4770      	bx	lr

0801d0fe <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 801d0fe:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801d102:	4770      	bx	lr

0801d104 <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 801d104:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801d108:	4770      	bx	lr

0801d10a <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 801d10a:	b2c8      	uxtb	r0, r1
 801d10c:	4770      	bx	lr

0801d10e <_ZN8touchgfx8LCD24bpp4initEv>:
 801d10e:	4770      	bx	lr

0801d110 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d114:	b085      	sub	sp, #20
 801d116:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801d118:	9203      	str	r2, [sp, #12]
 801d11a:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801d11e:	6878      	ldr	r0, [r7, #4]
 801d120:	9201      	str	r2, [sp, #4]
 801d122:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801d124:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 801d128:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 801d12c:	fa1f fc84 	uxth.w	ip, r4
 801d130:	43e4      	mvns	r4, r4
 801d132:	9100      	str	r1, [sp, #0]
 801d134:	b2e4      	uxtb	r4, r4
 801d136:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801d13a:	fb00 2505 	mla	r5, r0, r5, r2
 801d13e:	683a      	ldr	r2, [r7, #0]
 801d140:	6877      	ldr	r7, [r6, #4]
 801d142:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d146:	3704      	adds	r7, #4
 801d148:	4415      	add	r5, r2
 801d14a:	6832      	ldr	r2, [r6, #0]
 801d14c:	9202      	str	r2, [sp, #8]
 801d14e:	9a00      	ldr	r2, [sp, #0]
 801d150:	2a00      	cmp	r2, #0
 801d152:	dc03      	bgt.n	801d15c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801d154:	9a03      	ldr	r2, [sp, #12]
 801d156:	2a00      	cmp	r2, #0
 801d158:	f340 8116 	ble.w	801d388 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801d15c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d15e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d162:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d164:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d168:	2b00      	cmp	r3, #0
 801d16a:	dd0f      	ble.n	801d18c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801d16c:	1406      	asrs	r6, r0, #16
 801d16e:	d406      	bmi.n	801d17e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801d170:	4546      	cmp	r6, r8
 801d172:	da04      	bge.n	801d17e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801d174:	1416      	asrs	r6, r2, #16
 801d176:	d402      	bmi.n	801d17e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801d178:	9901      	ldr	r1, [sp, #4]
 801d17a:	428e      	cmp	r6, r1
 801d17c:	db07      	blt.n	801d18e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801d17e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d180:	3b01      	subs	r3, #1
 801d182:	3503      	adds	r5, #3
 801d184:	4408      	add	r0, r1
 801d186:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d188:	440a      	add	r2, r1
 801d18a:	e7ed      	b.n	801d168 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 801d18c:	d011      	beq.n	801d1b2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 801d18e:	1e5e      	subs	r6, r3, #1
 801d190:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d192:	fb01 0e06 	mla	lr, r1, r6, r0
 801d196:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801d19a:	d548      	bpl.n	801d22e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 801d19c:	4699      	mov	r9, r3
 801d19e:	462e      	mov	r6, r5
 801d1a0:	f1b9 0f00 	cmp.w	r9, #0
 801d1a4:	f300 809e 	bgt.w	801d2e4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 801d1a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d1ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d1b0:	441d      	add	r5, r3
 801d1b2:	9b00      	ldr	r3, [sp, #0]
 801d1b4:	2b00      	cmp	r3, #0
 801d1b6:	f340 80e7 	ble.w	801d388 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801d1ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d1be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d1c0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d1c4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d1c8:	eef0 6a62 	vmov.f32	s13, s5
 801d1cc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d1d0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d1d4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d1d8:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801d1dc:	eef0 6a43 	vmov.f32	s13, s6
 801d1e0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d1e4:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801d1e8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d1ec:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d1f0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d1f4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d1f8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d1fc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d200:	ee12 2a90 	vmov	r2, s5
 801d204:	eef0 2a47 	vmov.f32	s5, s14
 801d208:	fb92 f3f3 	sdiv	r3, r2, r3
 801d20c:	ee13 2a10 	vmov	r2, s6
 801d210:	9311      	str	r3, [sp, #68]	; 0x44
 801d212:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d214:	eeb0 3a67 	vmov.f32	s6, s15
 801d218:	fb92 f3f3 	sdiv	r3, r2, r3
 801d21c:	9312      	str	r3, [sp, #72]	; 0x48
 801d21e:	9b00      	ldr	r3, [sp, #0]
 801d220:	9a03      	ldr	r2, [sp, #12]
 801d222:	3b01      	subs	r3, #1
 801d224:	9300      	str	r3, [sp, #0]
 801d226:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d228:	bf08      	it	eq
 801d22a:	4613      	moveq	r3, r2
 801d22c:	e78f      	b.n	801d14e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 801d22e:	45c6      	cmp	lr, r8
 801d230:	dab4      	bge.n	801d19c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801d232:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d234:	fb01 2606 	mla	r6, r1, r6, r2
 801d238:	1436      	asrs	r6, r6, #16
 801d23a:	d4af      	bmi.n	801d19c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801d23c:	9901      	ldr	r1, [sp, #4]
 801d23e:	428e      	cmp	r6, r1
 801d240:	daac      	bge.n	801d19c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801d242:	1cee      	adds	r6, r5, #3
 801d244:	4699      	mov	r9, r3
 801d246:	f1b9 0f00 	cmp.w	r9, #0
 801d24a:	f106 0603 	add.w	r6, r6, #3
 801d24e:	ddab      	ble.n	801d1a8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801d250:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801d254:	9902      	ldr	r1, [sp, #8]
 801d256:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801d25a:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801d25e:	fb08 1e0e 	mla	lr, r8, lr, r1
 801d262:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d264:	fb1b fb04 	smulbb	fp, fp, r4
 801d268:	f109 39ff 	add.w	r9, r9, #4294967295
 801d26c:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801d270:	4408      	add	r0, r1
 801d272:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d274:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d278:	440a      	add	r2, r1
 801d27a:	eb07 0a0e 	add.w	sl, r7, lr
 801d27e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801d282:	fb0e be0c 	mla	lr, lr, ip, fp
 801d286:	fa1f fe8e 	uxth.w	lr, lr
 801d28a:	f10e 0b01 	add.w	fp, lr, #1
 801d28e:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801d292:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801d296:	fb1b fb04 	smulbb	fp, fp, r4
 801d29a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d29e:	f806 ec06 	strb.w	lr, [r6, #-6]
 801d2a2:	f89a e001 	ldrb.w	lr, [sl, #1]
 801d2a6:	fb0e be0c 	mla	lr, lr, ip, fp
 801d2aa:	fa1f fe8e 	uxth.w	lr, lr
 801d2ae:	f10e 0b01 	add.w	fp, lr, #1
 801d2b2:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801d2b6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d2ba:	f806 ec05 	strb.w	lr, [r6, #-5]
 801d2be:	f89a e002 	ldrb.w	lr, [sl, #2]
 801d2c2:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801d2c6:	fb1a fa04 	smulbb	sl, sl, r4
 801d2ca:	fb0e ae0c 	mla	lr, lr, ip, sl
 801d2ce:	fa1f fe8e 	uxth.w	lr, lr
 801d2d2:	f10e 0a01 	add.w	sl, lr, #1
 801d2d6:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801d2da:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d2de:	f806 ec04 	strb.w	lr, [r6, #-4]
 801d2e2:	e7b0      	b.n	801d246 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801d2e4:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801d2e8:	d446      	bmi.n	801d378 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801d2ea:	45c2      	cmp	sl, r8
 801d2ec:	da44      	bge.n	801d378 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801d2ee:	ea5f 4e22 	movs.w	lr, r2, asr #16
 801d2f2:	d441      	bmi.n	801d378 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801d2f4:	9901      	ldr	r1, [sp, #4]
 801d2f6:	458e      	cmp	lr, r1
 801d2f8:	da3e      	bge.n	801d378 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801d2fa:	9902      	ldr	r1, [sp, #8]
 801d2fc:	f896 b000 	ldrb.w	fp, [r6]
 801d300:	fb08 1e0e 	mla	lr, r8, lr, r1
 801d304:	fb1b fb04 	smulbb	fp, fp, r4
 801d308:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801d30c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d310:	eb07 0a0e 	add.w	sl, r7, lr
 801d314:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801d318:	fb0e be0c 	mla	lr, lr, ip, fp
 801d31c:	fa1f fe8e 	uxth.w	lr, lr
 801d320:	f10e 0b01 	add.w	fp, lr, #1
 801d324:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801d328:	f896 b001 	ldrb.w	fp, [r6, #1]
 801d32c:	fb1b fb04 	smulbb	fp, fp, r4
 801d330:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d334:	f886 e000 	strb.w	lr, [r6]
 801d338:	f89a e001 	ldrb.w	lr, [sl, #1]
 801d33c:	fb0e be0c 	mla	lr, lr, ip, fp
 801d340:	fa1f fe8e 	uxth.w	lr, lr
 801d344:	f10e 0b01 	add.w	fp, lr, #1
 801d348:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801d34c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d350:	f886 e001 	strb.w	lr, [r6, #1]
 801d354:	f89a e002 	ldrb.w	lr, [sl, #2]
 801d358:	f896 a002 	ldrb.w	sl, [r6, #2]
 801d35c:	fb1a fa04 	smulbb	sl, sl, r4
 801d360:	fb0e ae0c 	mla	lr, lr, ip, sl
 801d364:	fa1f fe8e 	uxth.w	lr, lr
 801d368:	f10e 0a01 	add.w	sl, lr, #1
 801d36c:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801d370:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d374:	f886 e002 	strb.w	lr, [r6, #2]
 801d378:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d37a:	3603      	adds	r6, #3
 801d37c:	f109 39ff 	add.w	r9, r9, #4294967295
 801d380:	4408      	add	r0, r1
 801d382:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d384:	440a      	add	r2, r1
 801d386:	e70b      	b.n	801d1a0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801d388:	b005      	add	sp, #20
 801d38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d38e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d38e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d392:	b085      	sub	sp, #20
 801d394:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d398:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801d39a:	9203      	str	r2, [sp, #12]
 801d39c:	6870      	ldr	r0, [r6, #4]
 801d39e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801d3a0:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801d3a4:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801d3a8:	9101      	str	r1, [sp, #4]
 801d3aa:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801d3ae:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 801d3b2:	fb00 2404 	mla	r4, r0, r4, r2
 801d3b6:	6832      	ldr	r2, [r6, #0]
 801d3b8:	686e      	ldr	r6, [r5, #4]
 801d3ba:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d3be:	3604      	adds	r6, #4
 801d3c0:	4414      	add	r4, r2
 801d3c2:	682a      	ldr	r2, [r5, #0]
 801d3c4:	9202      	str	r2, [sp, #8]
 801d3c6:	9a01      	ldr	r2, [sp, #4]
 801d3c8:	2a00      	cmp	r2, #0
 801d3ca:	dc03      	bgt.n	801d3d4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 801d3cc:	9a03      	ldr	r2, [sp, #12]
 801d3ce:	2a00      	cmp	r2, #0
 801d3d0:	f340 80b2 	ble.w	801d538 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801d3d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d3d6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d3da:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d3dc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d3e0:	2b00      	cmp	r3, #0
 801d3e2:	dd0c      	ble.n	801d3fe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801d3e4:	1405      	asrs	r5, r0, #16
 801d3e6:	d405      	bmi.n	801d3f4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801d3e8:	4575      	cmp	r5, lr
 801d3ea:	da03      	bge.n	801d3f4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801d3ec:	1415      	asrs	r5, r2, #16
 801d3ee:	d401      	bmi.n	801d3f4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801d3f0:	4545      	cmp	r5, r8
 801d3f2:	db05      	blt.n	801d400 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801d3f4:	4460      	add	r0, ip
 801d3f6:	443a      	add	r2, r7
 801d3f8:	3b01      	subs	r3, #1
 801d3fa:	3403      	adds	r4, #3
 801d3fc:	e7f0      	b.n	801d3e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 801d3fe:	d03d      	beq.n	801d47c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801d400:	1e5d      	subs	r5, r3, #1
 801d402:	fb0c 0905 	mla	r9, ip, r5, r0
 801d406:	ea5f 4929 	movs.w	r9, r9, asr #16
 801d40a:	d42c      	bmi.n	801d466 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801d40c:	45f1      	cmp	r9, lr
 801d40e:	da2a      	bge.n	801d466 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801d410:	fb07 2505 	mla	r5, r7, r5, r2
 801d414:	142d      	asrs	r5, r5, #16
 801d416:	d426      	bmi.n	801d466 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801d418:	4545      	cmp	r5, r8
 801d41a:	da24      	bge.n	801d466 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801d41c:	1ce5      	adds	r5, r4, #3
 801d41e:	469a      	mov	sl, r3
 801d420:	f1ba 0f00 	cmp.w	sl, #0
 801d424:	f105 0503 	add.w	r5, r5, #3
 801d428:	dd23      	ble.n	801d472 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801d42a:	ea4f 4922 	mov.w	r9, r2, asr #16
 801d42e:	9902      	ldr	r1, [sp, #8]
 801d430:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801d434:	443a      	add	r2, r7
 801d436:	fb0e 1909 	mla	r9, lr, r9, r1
 801d43a:	4460      	add	r0, ip
 801d43c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d440:	f819 900b 	ldrb.w	r9, [r9, fp]
 801d444:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801d448:	eb06 0b09 	add.w	fp, r6, r9
 801d44c:	f816 9009 	ldrb.w	r9, [r6, r9]
 801d450:	f805 9c06 	strb.w	r9, [r5, #-6]
 801d454:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801d458:	f805 9c05 	strb.w	r9, [r5, #-5]
 801d45c:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801d460:	f805 9c04 	strb.w	r9, [r5, #-4]
 801d464:	e7dc      	b.n	801d420 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801d466:	2500      	movs	r5, #0
 801d468:	eba3 0905 	sub.w	r9, r3, r5
 801d46c:	f1b9 0f00 	cmp.w	r9, #0
 801d470:	dc3c      	bgt.n	801d4ec <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 801d472:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d476:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d47a:	441c      	add	r4, r3
 801d47c:	9b01      	ldr	r3, [sp, #4]
 801d47e:	2b00      	cmp	r3, #0
 801d480:	dd5a      	ble.n	801d538 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801d482:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d486:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d488:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d48c:	eeb0 6a62 	vmov.f32	s12, s5
 801d490:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d494:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d498:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d49c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d4a0:	eeb0 6a43 	vmov.f32	s12, s6
 801d4a4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d4a8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d4ac:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d4b0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d4b4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d4b8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d4bc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d4c0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d4c4:	ee12 2a90 	vmov	r2, s5
 801d4c8:	eef0 2a47 	vmov.f32	s5, s14
 801d4cc:	fb92 fcf3 	sdiv	ip, r2, r3
 801d4d0:	ee13 2a10 	vmov	r2, s6
 801d4d4:	eeb0 3a67 	vmov.f32	s6, s15
 801d4d8:	fb92 f7f3 	sdiv	r7, r2, r3
 801d4dc:	9b01      	ldr	r3, [sp, #4]
 801d4de:	9a03      	ldr	r2, [sp, #12]
 801d4e0:	3b01      	subs	r3, #1
 801d4e2:	9301      	str	r3, [sp, #4]
 801d4e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d4e6:	bf08      	it	eq
 801d4e8:	4613      	moveq	r3, r2
 801d4ea:	e76c      	b.n	801d3c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 801d4ec:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801d4f0:	d41e      	bmi.n	801d530 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801d4f2:	45f2      	cmp	sl, lr
 801d4f4:	da1c      	bge.n	801d530 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801d4f6:	ea5f 4922 	movs.w	r9, r2, asr #16
 801d4fa:	d419      	bmi.n	801d530 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801d4fc:	45c1      	cmp	r9, r8
 801d4fe:	da17      	bge.n	801d530 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801d500:	9902      	ldr	r1, [sp, #8]
 801d502:	fb0e 1909 	mla	r9, lr, r9, r1
 801d506:	f819 900a 	ldrb.w	r9, [r9, sl]
 801d50a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801d50e:	f816 b009 	ldrb.w	fp, [r6, r9]
 801d512:	eb06 0a09 	add.w	sl, r6, r9
 801d516:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 801d51a:	f804 b009 	strb.w	fp, [r4, r9]
 801d51e:	44a1      	add	r9, r4
 801d520:	f89a b001 	ldrb.w	fp, [sl, #1]
 801d524:	f889 b001 	strb.w	fp, [r9, #1]
 801d528:	f89a a002 	ldrb.w	sl, [sl, #2]
 801d52c:	f889 a002 	strb.w	sl, [r9, #2]
 801d530:	4460      	add	r0, ip
 801d532:	443a      	add	r2, r7
 801d534:	3501      	adds	r5, #1
 801d536:	e797      	b.n	801d468 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801d538:	b005      	add	sp, #20
 801d53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d53e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d53e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d542:	b087      	sub	sp, #28
 801d544:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d548:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801d54a:	9204      	str	r2, [sp, #16]
 801d54c:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801d550:	6870      	ldr	r0, [r6, #4]
 801d552:	9205      	str	r2, [sp, #20]
 801d554:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801d556:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801d55a:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801d55e:	9101      	str	r1, [sp, #4]
 801d560:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801d564:	fb00 2505 	mla	r5, r0, r5, r2
 801d568:	6832      	ldr	r2, [r6, #0]
 801d56a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d56e:	4415      	add	r5, r2
 801d570:	6822      	ldr	r2, [r4, #0]
 801d572:	9202      	str	r2, [sp, #8]
 801d574:	6862      	ldr	r2, [r4, #4]
 801d576:	3204      	adds	r2, #4
 801d578:	9203      	str	r2, [sp, #12]
 801d57a:	9a01      	ldr	r2, [sp, #4]
 801d57c:	2a00      	cmp	r2, #0
 801d57e:	dc03      	bgt.n	801d588 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801d580:	9a04      	ldr	r2, [sp, #16]
 801d582:	2a00      	cmp	r2, #0
 801d584:	f340 8124 	ble.w	801d7d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d588:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d58a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d58e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d590:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d594:	2b00      	cmp	r3, #0
 801d596:	dd0e      	ble.n	801d5b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801d598:	1422      	asrs	r2, r4, #16
 801d59a:	d405      	bmi.n	801d5a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801d59c:	4572      	cmp	r2, lr
 801d59e:	da03      	bge.n	801d5a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801d5a0:	1402      	asrs	r2, r0, #16
 801d5a2:	d401      	bmi.n	801d5a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801d5a4:	4542      	cmp	r2, r8
 801d5a6:	db07      	blt.n	801d5b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801d5a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d5aa:	3b01      	subs	r3, #1
 801d5ac:	3503      	adds	r5, #3
 801d5ae:	4414      	add	r4, r2
 801d5b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d5b2:	4410      	add	r0, r2
 801d5b4:	e7ee      	b.n	801d594 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801d5b6:	d010      	beq.n	801d5da <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801d5b8:	1e5a      	subs	r2, r3, #1
 801d5ba:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801d5bc:	fb06 4602 	mla	r6, r6, r2, r4
 801d5c0:	1436      	asrs	r6, r6, #16
 801d5c2:	d546      	bpl.n	801d652 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801d5c4:	4699      	mov	r9, r3
 801d5c6:	462f      	mov	r7, r5
 801d5c8:	f1b9 0f00 	cmp.w	r9, #0
 801d5cc:	f300 80a5 	bgt.w	801d71a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801d5d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d5d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d5d8:	441d      	add	r5, r3
 801d5da:	9b01      	ldr	r3, [sp, #4]
 801d5dc:	2b00      	cmp	r3, #0
 801d5de:	f340 80f7 	ble.w	801d7d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d5e2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d5e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d5e8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d5ec:	eeb0 6a62 	vmov.f32	s12, s5
 801d5f0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d5f4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d5f8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d5fc:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d600:	eeb0 6a43 	vmov.f32	s12, s6
 801d604:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d608:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d60c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d610:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d614:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d618:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d61c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d620:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d624:	ee12 2a90 	vmov	r2, s5
 801d628:	eef0 2a47 	vmov.f32	s5, s14
 801d62c:	fb92 f3f3 	sdiv	r3, r2, r3
 801d630:	ee13 2a10 	vmov	r2, s6
 801d634:	9313      	str	r3, [sp, #76]	; 0x4c
 801d636:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d638:	eeb0 3a67 	vmov.f32	s6, s15
 801d63c:	fb92 f3f3 	sdiv	r3, r2, r3
 801d640:	9314      	str	r3, [sp, #80]	; 0x50
 801d642:	9b01      	ldr	r3, [sp, #4]
 801d644:	9a04      	ldr	r2, [sp, #16]
 801d646:	3b01      	subs	r3, #1
 801d648:	9301      	str	r3, [sp, #4]
 801d64a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d64c:	bf08      	it	eq
 801d64e:	4613      	moveq	r3, r2
 801d650:	e793      	b.n	801d57a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801d652:	4576      	cmp	r6, lr
 801d654:	dab6      	bge.n	801d5c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801d656:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801d658:	fb06 0202 	mla	r2, r6, r2, r0
 801d65c:	1412      	asrs	r2, r2, #16
 801d65e:	d4b1      	bmi.n	801d5c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801d660:	4542      	cmp	r2, r8
 801d662:	daaf      	bge.n	801d5c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801d664:	1cef      	adds	r7, r5, #3
 801d666:	4699      	mov	r9, r3
 801d668:	f1b9 0f00 	cmp.w	r9, #0
 801d66c:	ddb0      	ble.n	801d5d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801d66e:	9902      	ldr	r1, [sp, #8]
 801d670:	1402      	asrs	r2, r0, #16
 801d672:	1426      	asrs	r6, r4, #16
 801d674:	fb0e 1202 	mla	r2, lr, r2, r1
 801d678:	9903      	ldr	r1, [sp, #12]
 801d67a:	5d92      	ldrb	r2, [r2, r6]
 801d67c:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801d680:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801d684:	d041      	beq.n	801d70a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801d686:	9a05      	ldr	r2, [sp, #20]
 801d688:	fa5f fb86 	uxtb.w	fp, r6
 801d68c:	fb02 fc0c 	mul.w	ip, r2, ip
 801d690:	f10c 0201 	add.w	r2, ip, #1
 801d694:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801d698:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801d69c:	1212      	asrs	r2, r2, #8
 801d69e:	fa1f fa82 	uxth.w	sl, r2
 801d6a2:	43d2      	mvns	r2, r2
 801d6a4:	fb1b fb0a 	smulbb	fp, fp, sl
 801d6a8:	b2d2      	uxtb	r2, r2
 801d6aa:	fb0c bc02 	mla	ip, ip, r2, fp
 801d6ae:	fa1f fc8c 	uxth.w	ip, ip
 801d6b2:	f10c 0b01 	add.w	fp, ip, #1
 801d6b6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d6ba:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801d6be:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801d6c2:	fb1b fb0a 	smulbb	fp, fp, sl
 801d6c6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d6ca:	fb16 fa0a 	smulbb	sl, r6, sl
 801d6ce:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801d6d2:	f807 cc03 	strb.w	ip, [r7, #-3]
 801d6d6:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801d6da:	fb06 aa02 	mla	sl, r6, r2, sl
 801d6de:	fb0c bc02 	mla	ip, ip, r2, fp
 801d6e2:	fa1f fa8a 	uxth.w	sl, sl
 801d6e6:	fa1f fc8c 	uxth.w	ip, ip
 801d6ea:	f10a 0601 	add.w	r6, sl, #1
 801d6ee:	f10c 0b01 	add.w	fp, ip, #1
 801d6f2:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801d6f6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d6fa:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d6fe:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d702:	f807 ac01 	strb.w	sl, [r7, #-1]
 801d706:	f807 cc02 	strb.w	ip, [r7, #-2]
 801d70a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d70c:	3703      	adds	r7, #3
 801d70e:	f109 39ff 	add.w	r9, r9, #4294967295
 801d712:	4414      	add	r4, r2
 801d714:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d716:	4410      	add	r0, r2
 801d718:	e7a6      	b.n	801d668 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801d71a:	1426      	asrs	r6, r4, #16
 801d71c:	d450      	bmi.n	801d7c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801d71e:	4576      	cmp	r6, lr
 801d720:	da4e      	bge.n	801d7c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801d722:	1402      	asrs	r2, r0, #16
 801d724:	d44c      	bmi.n	801d7c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801d726:	4542      	cmp	r2, r8
 801d728:	da4a      	bge.n	801d7c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801d72a:	9902      	ldr	r1, [sp, #8]
 801d72c:	fb0e 1202 	mla	r2, lr, r2, r1
 801d730:	9903      	ldr	r1, [sp, #12]
 801d732:	5d92      	ldrb	r2, [r2, r6]
 801d734:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801d738:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801d73c:	d040      	beq.n	801d7c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801d73e:	9a05      	ldr	r2, [sp, #20]
 801d740:	fa5f fb86 	uxtb.w	fp, r6
 801d744:	fb02 fc0c 	mul.w	ip, r2, ip
 801d748:	f10c 0201 	add.w	r2, ip, #1
 801d74c:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801d750:	f897 c000 	ldrb.w	ip, [r7]
 801d754:	1212      	asrs	r2, r2, #8
 801d756:	fa1f fa82 	uxth.w	sl, r2
 801d75a:	43d2      	mvns	r2, r2
 801d75c:	fb1b fb0a 	smulbb	fp, fp, sl
 801d760:	b2d2      	uxtb	r2, r2
 801d762:	fb0c bc02 	mla	ip, ip, r2, fp
 801d766:	fa1f fc8c 	uxth.w	ip, ip
 801d76a:	f10c 0b01 	add.w	fp, ip, #1
 801d76e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d772:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801d776:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801d77a:	fb1b fb0a 	smulbb	fp, fp, sl
 801d77e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d782:	fb16 fa0a 	smulbb	sl, r6, sl
 801d786:	78be      	ldrb	r6, [r7, #2]
 801d788:	f887 c000 	strb.w	ip, [r7]
 801d78c:	f897 c001 	ldrb.w	ip, [r7, #1]
 801d790:	fb06 aa02 	mla	sl, r6, r2, sl
 801d794:	fb0c bc02 	mla	ip, ip, r2, fp
 801d798:	fa1f fa8a 	uxth.w	sl, sl
 801d79c:	fa1f fc8c 	uxth.w	ip, ip
 801d7a0:	f10a 0601 	add.w	r6, sl, #1
 801d7a4:	f10c 0b01 	add.w	fp, ip, #1
 801d7a8:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801d7ac:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d7b0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d7b4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d7b8:	f887 a002 	strb.w	sl, [r7, #2]
 801d7bc:	f887 c001 	strb.w	ip, [r7, #1]
 801d7c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d7c2:	3703      	adds	r7, #3
 801d7c4:	f109 39ff 	add.w	r9, r9, #4294967295
 801d7c8:	4414      	add	r4, r2
 801d7ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d7cc:	4410      	add	r0, r2
 801d7ce:	e6fb      	b.n	801d5c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801d7d0:	b007      	add	sp, #28
 801d7d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d7d6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d7d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7da:	b085      	sub	sp, #20
 801d7dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d7e0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801d7e2:	9203      	str	r2, [sp, #12]
 801d7e4:	6870      	ldr	r0, [r6, #4]
 801d7e6:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801d7e8:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801d7ec:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801d7f0:	9100      	str	r1, [sp, #0]
 801d7f2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801d7f6:	fb00 2404 	mla	r4, r0, r4, r2
 801d7fa:	6832      	ldr	r2, [r6, #0]
 801d7fc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d800:	4414      	add	r4, r2
 801d802:	682a      	ldr	r2, [r5, #0]
 801d804:	9201      	str	r2, [sp, #4]
 801d806:	686a      	ldr	r2, [r5, #4]
 801d808:	3204      	adds	r2, #4
 801d80a:	9202      	str	r2, [sp, #8]
 801d80c:	9a00      	ldr	r2, [sp, #0]
 801d80e:	2a00      	cmp	r2, #0
 801d810:	dc03      	bgt.n	801d81a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 801d812:	9a03      	ldr	r2, [sp, #12]
 801d814:	2a00      	cmp	r2, #0
 801d816:	f340 8131 	ble.w	801da7c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801d81a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d81c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d820:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d822:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d826:	2b00      	cmp	r3, #0
 801d828:	dd0e      	ble.n	801d848 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801d82a:	1405      	asrs	r5, r0, #16
 801d82c:	d405      	bmi.n	801d83a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801d82e:	4575      	cmp	r5, lr
 801d830:	da03      	bge.n	801d83a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801d832:	1415      	asrs	r5, r2, #16
 801d834:	d401      	bmi.n	801d83a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801d836:	4545      	cmp	r5, r8
 801d838:	db07      	blt.n	801d84a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801d83a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801d83c:	3b01      	subs	r3, #1
 801d83e:	3403      	adds	r4, #3
 801d840:	4428      	add	r0, r5
 801d842:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d844:	442a      	add	r2, r5
 801d846:	e7ee      	b.n	801d826 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 801d848:	d06f      	beq.n	801d92a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801d84a:	1e5d      	subs	r5, r3, #1
 801d84c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801d84e:	fb06 0605 	mla	r6, r6, r5, r0
 801d852:	1436      	asrs	r6, r6, #16
 801d854:	d460      	bmi.n	801d918 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801d856:	4576      	cmp	r6, lr
 801d858:	da5e      	bge.n	801d918 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801d85a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801d85c:	fb06 2505 	mla	r5, r6, r5, r2
 801d860:	142d      	asrs	r5, r5, #16
 801d862:	d459      	bmi.n	801d918 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801d864:	4545      	cmp	r5, r8
 801d866:	da57      	bge.n	801d918 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801d868:	1ce5      	adds	r5, r4, #3
 801d86a:	469a      	mov	sl, r3
 801d86c:	f1ba 0f00 	cmp.w	sl, #0
 801d870:	dd56      	ble.n	801d920 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 801d872:	9901      	ldr	r1, [sp, #4]
 801d874:	1416      	asrs	r6, r2, #16
 801d876:	1407      	asrs	r7, r0, #16
 801d878:	fb0e 1606 	mla	r6, lr, r6, r1
 801d87c:	9902      	ldr	r1, [sp, #8]
 801d87e:	5df6      	ldrb	r6, [r6, r7]
 801d880:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801d884:	0e37      	lsrs	r7, r6, #24
 801d886:	2fff      	cmp	r7, #255	; 0xff
 801d888:	f000 80ef 	beq.w	801da6a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 801d88c:	fa5f fc87 	uxtb.w	ip, r7
 801d890:	b3d7      	cbz	r7, 801d908 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801d892:	fa1f f78c 	uxth.w	r7, ip
 801d896:	ea6f 0c0c 	mvn.w	ip, ip
 801d89a:	fa5f fb86 	uxtb.w	fp, r6
 801d89e:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801d8a2:	fa5f fc8c 	uxtb.w	ip, ip
 801d8a6:	fb1b fb07 	smulbb	fp, fp, r7
 801d8aa:	fb09 b90c 	mla	r9, r9, ip, fp
 801d8ae:	fa1f f989 	uxth.w	r9, r9
 801d8b2:	f109 0b01 	add.w	fp, r9, #1
 801d8b6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d8ba:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801d8be:	fb1b fb0c 	smulbb	fp, fp, ip
 801d8c2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d8c6:	f805 9c03 	strb.w	r9, [r5, #-3]
 801d8ca:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801d8ce:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801d8d2:	fb09 b907 	mla	r9, r9, r7, fp
 801d8d6:	fa1f f989 	uxth.w	r9, r9
 801d8da:	f109 0b01 	add.w	fp, r9, #1
 801d8de:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d8e2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d8e6:	f805 9c02 	strb.w	r9, [r5, #-2]
 801d8ea:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801d8ee:	fb19 fc0c 	smulbb	ip, r9, ip
 801d8f2:	fb06 c607 	mla	r6, r6, r7, ip
 801d8f6:	b2b6      	uxth	r6, r6
 801d8f8:	f106 0c01 	add.w	ip, r6, #1
 801d8fc:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 801d900:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d904:	f805 cc01 	strb.w	ip, [r5, #-1]
 801d908:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d90a:	3503      	adds	r5, #3
 801d90c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d910:	4408      	add	r0, r1
 801d912:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d914:	440a      	add	r2, r1
 801d916:	e7a9      	b.n	801d86c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801d918:	2600      	movs	r6, #0
 801d91a:	1b9d      	subs	r5, r3, r6
 801d91c:	2d00      	cmp	r5, #0
 801d91e:	dc40      	bgt.n	801d9a2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801d920:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d924:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d928:	441c      	add	r4, r3
 801d92a:	9b00      	ldr	r3, [sp, #0]
 801d92c:	2b00      	cmp	r3, #0
 801d92e:	f340 80a5 	ble.w	801da7c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801d932:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d936:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d938:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d93c:	eeb0 6a62 	vmov.f32	s12, s5
 801d940:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d944:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d948:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d94c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d950:	eeb0 6a43 	vmov.f32	s12, s6
 801d954:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d958:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d95c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d960:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d964:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d968:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d96c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d970:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d974:	ee12 2a90 	vmov	r2, s5
 801d978:	eef0 2a47 	vmov.f32	s5, s14
 801d97c:	fb92 f3f3 	sdiv	r3, r2, r3
 801d980:	ee13 2a10 	vmov	r2, s6
 801d984:	9311      	str	r3, [sp, #68]	; 0x44
 801d986:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d988:	eeb0 3a67 	vmov.f32	s6, s15
 801d98c:	fb92 f3f3 	sdiv	r3, r2, r3
 801d990:	9312      	str	r3, [sp, #72]	; 0x48
 801d992:	9b00      	ldr	r3, [sp, #0]
 801d994:	9a03      	ldr	r2, [sp, #12]
 801d996:	3b01      	subs	r3, #1
 801d998:	9300      	str	r3, [sp, #0]
 801d99a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d99c:	bf08      	it	eq
 801d99e:	4613      	moveq	r3, r2
 801d9a0:	e734      	b.n	801d80c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801d9a2:	1407      	asrs	r7, r0, #16
 801d9a4:	d450      	bmi.n	801da48 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801d9a6:	4577      	cmp	r7, lr
 801d9a8:	da4e      	bge.n	801da48 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801d9aa:	1415      	asrs	r5, r2, #16
 801d9ac:	d44c      	bmi.n	801da48 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801d9ae:	4545      	cmp	r5, r8
 801d9b0:	da4a      	bge.n	801da48 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801d9b2:	9901      	ldr	r1, [sp, #4]
 801d9b4:	fb0e 1505 	mla	r5, lr, r5, r1
 801d9b8:	9902      	ldr	r1, [sp, #8]
 801d9ba:	5ded      	ldrb	r5, [r5, r7]
 801d9bc:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 801d9c0:	0e2f      	lsrs	r7, r5, #24
 801d9c2:	2fff      	cmp	r7, #255	; 0xff
 801d9c4:	d046      	beq.n	801da54 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 801d9c6:	fa5f f987 	uxtb.w	r9, r7
 801d9ca:	b3ef      	cbz	r7, 801da48 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801d9cc:	fa1f fc89 	uxth.w	ip, r9
 801d9d0:	ea6f 0909 	mvn.w	r9, r9
 801d9d4:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801d9d8:	fa5f fb85 	uxtb.w	fp, r5
 801d9dc:	f814 a007 	ldrb.w	sl, [r4, r7]
 801d9e0:	fa5f f989 	uxtb.w	r9, r9
 801d9e4:	fb1b fb0c 	smulbb	fp, fp, ip
 801d9e8:	fb0a ba09 	mla	sl, sl, r9, fp
 801d9ec:	fa1f fa8a 	uxth.w	sl, sl
 801d9f0:	f10a 0b01 	add.w	fp, sl, #1
 801d9f4:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801d9f8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d9fc:	f804 a007 	strb.w	sl, [r4, r7]
 801da00:	4427      	add	r7, r4
 801da02:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801da06:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801da0a:	f897 b001 	ldrb.w	fp, [r7, #1]
 801da0e:	fb1b fb09 	smulbb	fp, fp, r9
 801da12:	fb0a ba0c 	mla	sl, sl, ip, fp
 801da16:	fa1f fa8a 	uxth.w	sl, sl
 801da1a:	f10a 0b01 	add.w	fp, sl, #1
 801da1e:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801da22:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801da26:	f887 a001 	strb.w	sl, [r7, #1]
 801da2a:	f897 a002 	ldrb.w	sl, [r7, #2]
 801da2e:	fb1a f909 	smulbb	r9, sl, r9
 801da32:	fb05 950c 	mla	r5, r5, ip, r9
 801da36:	b2ad      	uxth	r5, r5
 801da38:	f105 0901 	add.w	r9, r5, #1
 801da3c:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801da40:	ea4f 2929 	mov.w	r9, r9, asr #8
 801da44:	f887 9002 	strb.w	r9, [r7, #2]
 801da48:	9911      	ldr	r1, [sp, #68]	; 0x44
 801da4a:	3601      	adds	r6, #1
 801da4c:	4408      	add	r0, r1
 801da4e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801da50:	440a      	add	r2, r1
 801da52:	e762      	b.n	801d91a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801da54:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801da58:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 801da5c:	55e5      	strb	r5, [r4, r7]
 801da5e:	4427      	add	r7, r4
 801da60:	0c2d      	lsrs	r5, r5, #16
 801da62:	f887 c001 	strb.w	ip, [r7, #1]
 801da66:	70bd      	strb	r5, [r7, #2]
 801da68:	e7ee      	b.n	801da48 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801da6a:	0a37      	lsrs	r7, r6, #8
 801da6c:	f805 6c03 	strb.w	r6, [r5, #-3]
 801da70:	0c36      	lsrs	r6, r6, #16
 801da72:	f805 7c02 	strb.w	r7, [r5, #-2]
 801da76:	f805 6c01 	strb.w	r6, [r5, #-1]
 801da7a:	e745      	b.n	801d908 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801da7c:	b005      	add	sp, #20
 801da7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801da82 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801da82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da86:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801da88:	9201      	str	r2, [sp, #4]
 801da8a:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801da8e:	6870      	ldr	r0, [r6, #4]
 801da90:	9200      	str	r2, [sp, #0]
 801da92:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801da96:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 801da9a:	fa1f fc85 	uxth.w	ip, r5
 801da9e:	43ed      	mvns	r5, r5
 801daa0:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801daa4:	b2ed      	uxtb	r5, r5
 801daa6:	fb00 2404 	mla	r4, r0, r4, r2
 801daaa:	6832      	ldr	r2, [r6, #0]
 801daac:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801dab0:	4414      	add	r4, r2
 801dab2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801dab4:	f8d2 8000 	ldr.w	r8, [r2]
 801dab8:	2900      	cmp	r1, #0
 801daba:	dc03      	bgt.n	801dac4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 801dabc:	9a01      	ldr	r2, [sp, #4]
 801dabe:	2a00      	cmp	r2, #0
 801dac0:	f340 8104 	ble.w	801dccc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801dac4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801dac6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801daca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801dacc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801dad0:	2b00      	cmp	r3, #0
 801dad2:	dd0f      	ble.n	801daf4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801dad4:	1406      	asrs	r6, r0, #16
 801dad6:	d406      	bmi.n	801dae6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801dad8:	4576      	cmp	r6, lr
 801dada:	da04      	bge.n	801dae6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801dadc:	1416      	asrs	r6, r2, #16
 801dade:	d402      	bmi.n	801dae6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801dae0:	9f00      	ldr	r7, [sp, #0]
 801dae2:	42be      	cmp	r6, r7
 801dae4:	db07      	blt.n	801daf6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801dae6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801dae8:	3b01      	subs	r3, #1
 801daea:	3403      	adds	r4, #3
 801daec:	4430      	add	r0, r6
 801daee:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801daf0:	4432      	add	r2, r6
 801daf2:	e7ed      	b.n	801dad0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801daf4:	d05f      	beq.n	801dbb6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 801daf6:	1e5e      	subs	r6, r3, #1
 801daf8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801dafa:	fb07 0706 	mla	r7, r7, r6, r0
 801dafe:	143f      	asrs	r7, r7, #16
 801db00:	d450      	bmi.n	801dba4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801db02:	4577      	cmp	r7, lr
 801db04:	da4e      	bge.n	801dba4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801db06:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801db08:	fb07 2606 	mla	r6, r7, r6, r2
 801db0c:	1436      	asrs	r6, r6, #16
 801db0e:	d449      	bmi.n	801dba4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801db10:	9f00      	ldr	r7, [sp, #0]
 801db12:	42be      	cmp	r6, r7
 801db14:	da46      	bge.n	801dba4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801db16:	1ce6      	adds	r6, r4, #3
 801db18:	4699      	mov	r9, r3
 801db1a:	f1b9 0f00 	cmp.w	r9, #0
 801db1e:	f106 0603 	add.w	r6, r6, #3
 801db22:	dd43      	ble.n	801dbac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801db24:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801db28:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801db2c:	1417      	asrs	r7, r2, #16
 801db2e:	f109 39ff 	add.w	r9, r9, #4294967295
 801db32:	fb1b fb05 	smulbb	fp, fp, r5
 801db36:	fb0e a707 	mla	r7, lr, r7, sl
 801db3a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801db3e:	eb08 0a07 	add.w	sl, r8, r7
 801db42:	f818 7007 	ldrb.w	r7, [r8, r7]
 801db46:	fb07 b70c 	mla	r7, r7, ip, fp
 801db4a:	b2bf      	uxth	r7, r7
 801db4c:	f107 0b01 	add.w	fp, r7, #1
 801db50:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801db54:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801db58:	fb1b fb05 	smulbb	fp, fp, r5
 801db5c:	123f      	asrs	r7, r7, #8
 801db5e:	f806 7c06 	strb.w	r7, [r6, #-6]
 801db62:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801db66:	fb07 b70c 	mla	r7, r7, ip, fp
 801db6a:	b2bf      	uxth	r7, r7
 801db6c:	f107 0b01 	add.w	fp, r7, #1
 801db70:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801db74:	123f      	asrs	r7, r7, #8
 801db76:	f806 7c05 	strb.w	r7, [r6, #-5]
 801db7a:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801db7e:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801db82:	fb1a fa05 	smulbb	sl, sl, r5
 801db86:	fb07 a70c 	mla	r7, r7, ip, sl
 801db8a:	b2bf      	uxth	r7, r7
 801db8c:	f107 0a01 	add.w	sl, r7, #1
 801db90:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801db94:	123f      	asrs	r7, r7, #8
 801db96:	f806 7c04 	strb.w	r7, [r6, #-4]
 801db9a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801db9c:	4438      	add	r0, r7
 801db9e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801dba0:	443a      	add	r2, r7
 801dba2:	e7ba      	b.n	801db1a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801dba4:	2700      	movs	r7, #0
 801dba6:	1bde      	subs	r6, r3, r7
 801dba8:	2e00      	cmp	r6, #0
 801dbaa:	dc3f      	bgt.n	801dc2c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801dbac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dbb0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dbb4:	441c      	add	r4, r3
 801dbb6:	2900      	cmp	r1, #0
 801dbb8:	f340 8088 	ble.w	801dccc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801dbbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801dbc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dbc2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dbc6:	3901      	subs	r1, #1
 801dbc8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dbcc:	eef0 6a62 	vmov.f32	s13, s5
 801dbd0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801dbd4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dbd8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dbdc:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801dbe0:	eef0 6a43 	vmov.f32	s13, s6
 801dbe4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dbe8:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801dbec:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dbf0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dbf4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dbf8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dbfc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dc00:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dc04:	ee12 2a90 	vmov	r2, s5
 801dc08:	eef0 2a47 	vmov.f32	s5, s14
 801dc0c:	fb92 f3f3 	sdiv	r3, r2, r3
 801dc10:	ee13 2a10 	vmov	r2, s6
 801dc14:	930f      	str	r3, [sp, #60]	; 0x3c
 801dc16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dc18:	eeb0 3a67 	vmov.f32	s6, s15
 801dc1c:	fb92 f3f3 	sdiv	r3, r2, r3
 801dc20:	9a01      	ldr	r2, [sp, #4]
 801dc22:	9310      	str	r3, [sp, #64]	; 0x40
 801dc24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dc26:	bf08      	it	eq
 801dc28:	4613      	moveq	r3, r2
 801dc2a:	e745      	b.n	801dab8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801dc2c:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801dc30:	d446      	bmi.n	801dcc0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801dc32:	45f2      	cmp	sl, lr
 801dc34:	da44      	bge.n	801dcc0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801dc36:	ea5f 4922 	movs.w	r9, r2, asr #16
 801dc3a:	d441      	bmi.n	801dcc0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801dc3c:	9e00      	ldr	r6, [sp, #0]
 801dc3e:	45b1      	cmp	r9, r6
 801dc40:	da3e      	bge.n	801dcc0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801dc42:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801dc46:	fb0e a909 	mla	r9, lr, r9, sl
 801dc4a:	f814 b006 	ldrb.w	fp, [r4, r6]
 801dc4e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801dc52:	fb1b fb05 	smulbb	fp, fp, r5
 801dc56:	eb08 0a09 	add.w	sl, r8, r9
 801dc5a:	f818 9009 	ldrb.w	r9, [r8, r9]
 801dc5e:	fb09 b90c 	mla	r9, r9, ip, fp
 801dc62:	fa1f f989 	uxth.w	r9, r9
 801dc66:	f109 0b01 	add.w	fp, r9, #1
 801dc6a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801dc6e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dc72:	f804 9006 	strb.w	r9, [r4, r6]
 801dc76:	4426      	add	r6, r4
 801dc78:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801dc7c:	f896 b001 	ldrb.w	fp, [r6, #1]
 801dc80:	fb1b fb05 	smulbb	fp, fp, r5
 801dc84:	fb09 b90c 	mla	r9, r9, ip, fp
 801dc88:	fa1f f989 	uxth.w	r9, r9
 801dc8c:	f109 0b01 	add.w	fp, r9, #1
 801dc90:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801dc94:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dc98:	f886 9001 	strb.w	r9, [r6, #1]
 801dc9c:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801dca0:	f896 a002 	ldrb.w	sl, [r6, #2]
 801dca4:	fb1a fa05 	smulbb	sl, sl, r5
 801dca8:	fb09 a90c 	mla	r9, r9, ip, sl
 801dcac:	fa1f f989 	uxth.w	r9, r9
 801dcb0:	f109 0a01 	add.w	sl, r9, #1
 801dcb4:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801dcb8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dcbc:	f886 9002 	strb.w	r9, [r6, #2]
 801dcc0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801dcc2:	3701      	adds	r7, #1
 801dcc4:	4430      	add	r0, r6
 801dcc6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801dcc8:	4432      	add	r2, r6
 801dcca:	e76c      	b.n	801dba6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 801dccc:	b003      	add	sp, #12
 801dcce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dcd2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801dcd2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dcd6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801dcd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dcdc:	9201      	str	r2, [sp, #4]
 801dcde:	6868      	ldr	r0, [r5, #4]
 801dce0:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 801dce4:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 801dce8:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801dcec:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 801dcf0:	fb00 2404 	mla	r4, r0, r4, r2
 801dcf4:	682a      	ldr	r2, [r5, #0]
 801dcf6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801dcfa:	4414      	add	r4, r2
 801dcfc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801dcfe:	f8d2 9000 	ldr.w	r9, [r2]
 801dd02:	2900      	cmp	r1, #0
 801dd04:	dc03      	bgt.n	801dd0e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801dd06:	9a01      	ldr	r2, [sp, #4]
 801dd08:	2a00      	cmp	r2, #0
 801dd0a:	f340 80a8 	ble.w	801de5e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801dd0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801dd10:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801dd14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801dd16:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801dd1a:	2b00      	cmp	r3, #0
 801dd1c:	dd0c      	ble.n	801dd38 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801dd1e:	1405      	asrs	r5, r0, #16
 801dd20:	d405      	bmi.n	801dd2e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801dd22:	4565      	cmp	r5, ip
 801dd24:	da03      	bge.n	801dd2e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801dd26:	1415      	asrs	r5, r2, #16
 801dd28:	d401      	bmi.n	801dd2e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801dd2a:	4575      	cmp	r5, lr
 801dd2c:	db05      	blt.n	801dd3a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801dd2e:	4438      	add	r0, r7
 801dd30:	4432      	add	r2, r6
 801dd32:	3b01      	subs	r3, #1
 801dd34:	3403      	adds	r4, #3
 801dd36:	e7f0      	b.n	801dd1a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801dd38:	d03a      	beq.n	801ddb0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801dd3a:	1e5d      	subs	r5, r3, #1
 801dd3c:	fb07 0805 	mla	r8, r7, r5, r0
 801dd40:	ea5f 4828 	movs.w	r8, r8, asr #16
 801dd44:	d429      	bmi.n	801dd9a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801dd46:	45e0      	cmp	r8, ip
 801dd48:	da27      	bge.n	801dd9a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801dd4a:	fb06 2505 	mla	r5, r6, r5, r2
 801dd4e:	142d      	asrs	r5, r5, #16
 801dd50:	d423      	bmi.n	801dd9a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801dd52:	4575      	cmp	r5, lr
 801dd54:	da21      	bge.n	801dd9a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801dd56:	f104 0803 	add.w	r8, r4, #3
 801dd5a:	469a      	mov	sl, r3
 801dd5c:	f1ba 0f00 	cmp.w	sl, #0
 801dd60:	f108 0803 	add.w	r8, r8, #3
 801dd64:	dd1f      	ble.n	801dda6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801dd66:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801dd6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801dd6e:	1415      	asrs	r5, r2, #16
 801dd70:	4438      	add	r0, r7
 801dd72:	4432      	add	r2, r6
 801dd74:	fb0c b505 	mla	r5, ip, r5, fp
 801dd78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801dd7c:	eb09 0b05 	add.w	fp, r9, r5
 801dd80:	f819 5005 	ldrb.w	r5, [r9, r5]
 801dd84:	f808 5c06 	strb.w	r5, [r8, #-6]
 801dd88:	f89b 5001 	ldrb.w	r5, [fp, #1]
 801dd8c:	f808 5c05 	strb.w	r5, [r8, #-5]
 801dd90:	f89b 5002 	ldrb.w	r5, [fp, #2]
 801dd94:	f808 5c04 	strb.w	r5, [r8, #-4]
 801dd98:	e7e0      	b.n	801dd5c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801dd9a:	2500      	movs	r5, #0
 801dd9c:	eba3 0805 	sub.w	r8, r3, r5
 801dda0:	f1b8 0f00 	cmp.w	r8, #0
 801dda4:	dc38      	bgt.n	801de18 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 801dda6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ddaa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ddae:	441c      	add	r4, r3
 801ddb0:	2900      	cmp	r1, #0
 801ddb2:	dd54      	ble.n	801de5e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801ddb4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ddb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ddba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ddbe:	3901      	subs	r1, #1
 801ddc0:	eeb0 6a62 	vmov.f32	s12, s5
 801ddc4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ddc8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ddcc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ddd0:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801ddd4:	eeb0 6a43 	vmov.f32	s12, s6
 801ddd8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dddc:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801dde0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dde4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dde8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ddec:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ddf0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ddf4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ddf8:	ee12 2a90 	vmov	r2, s5
 801ddfc:	eef0 2a47 	vmov.f32	s5, s14
 801de00:	fb92 f7f3 	sdiv	r7, r2, r3
 801de04:	ee13 2a10 	vmov	r2, s6
 801de08:	eeb0 3a67 	vmov.f32	s6, s15
 801de0c:	fb92 f6f3 	sdiv	r6, r2, r3
 801de10:	9a01      	ldr	r2, [sp, #4]
 801de12:	bf08      	it	eq
 801de14:	4613      	moveq	r3, r2
 801de16:	e774      	b.n	801dd02 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801de18:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801de1c:	d41b      	bmi.n	801de56 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801de1e:	45e2      	cmp	sl, ip
 801de20:	da19      	bge.n	801de56 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801de22:	ea5f 4822 	movs.w	r8, r2, asr #16
 801de26:	d416      	bmi.n	801de56 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801de28:	45f0      	cmp	r8, lr
 801de2a:	da14      	bge.n	801de56 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801de2c:	fb0c a808 	mla	r8, ip, r8, sl
 801de30:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801de34:	f819 b008 	ldrb.w	fp, [r9, r8]
 801de38:	eb09 0a08 	add.w	sl, r9, r8
 801de3c:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 801de40:	f804 b008 	strb.w	fp, [r4, r8]
 801de44:	44a0      	add	r8, r4
 801de46:	f89a b001 	ldrb.w	fp, [sl, #1]
 801de4a:	f888 b001 	strb.w	fp, [r8, #1]
 801de4e:	f89a a002 	ldrb.w	sl, [sl, #2]
 801de52:	f888 a002 	strb.w	sl, [r8, #2]
 801de56:	4438      	add	r0, r7
 801de58:	4432      	add	r2, r6
 801de5a:	3501      	adds	r5, #1
 801de5c:	e79e      	b.n	801dd9c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 801de5e:	b003      	add	sp, #12
 801de60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801de64 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801de64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de68:	b085      	sub	sp, #20
 801de6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801de6e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801de70:	9202      	str	r2, [sp, #8]
 801de72:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801de76:	6860      	ldr	r0, [r4, #4]
 801de78:	9203      	str	r2, [sp, #12]
 801de7a:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801de7e:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801de82:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801de86:	fb00 2505 	mla	r5, r0, r5, r2
 801de8a:	6822      	ldr	r2, [r4, #0]
 801de8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801de90:	4415      	add	r5, r2
 801de92:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801de94:	6812      	ldr	r2, [r2, #0]
 801de96:	9201      	str	r2, [sp, #4]
 801de98:	2900      	cmp	r1, #0
 801de9a:	dc03      	bgt.n	801dea4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801de9c:	9a02      	ldr	r2, [sp, #8]
 801de9e:	2a00      	cmp	r2, #0
 801dea0:	f340 811c 	ble.w	801e0dc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801dea4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801dea6:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801deaa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801deac:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801deb0:	2b00      	cmp	r3, #0
 801deb2:	dd0e      	ble.n	801ded2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801deb4:	1422      	asrs	r2, r4, #16
 801deb6:	d405      	bmi.n	801dec4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801deb8:	4572      	cmp	r2, lr
 801deba:	da03      	bge.n	801dec4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801debc:	1402      	asrs	r2, r0, #16
 801debe:	d401      	bmi.n	801dec4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801dec0:	4542      	cmp	r2, r8
 801dec2:	db07      	blt.n	801ded4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801dec4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801dec6:	3b01      	subs	r3, #1
 801dec8:	3503      	adds	r5, #3
 801deca:	4414      	add	r4, r2
 801decc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801dece:	4410      	add	r0, r2
 801ded0:	e7ee      	b.n	801deb0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801ded2:	d072      	beq.n	801dfba <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 801ded4:	1e5a      	subs	r2, r3, #1
 801ded6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801ded8:	fb06 4602 	mla	r6, r6, r2, r4
 801dedc:	1436      	asrs	r6, r6, #16
 801dede:	d461      	bmi.n	801dfa4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801dee0:	4576      	cmp	r6, lr
 801dee2:	da5f      	bge.n	801dfa4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801dee4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801dee6:	fb06 0202 	mla	r2, r6, r2, r0
 801deea:	1412      	asrs	r2, r2, #16
 801deec:	d45a      	bmi.n	801dfa4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801deee:	4542      	cmp	r2, r8
 801def0:	da58      	bge.n	801dfa4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801def2:	1cef      	adds	r7, r5, #3
 801def4:	4699      	mov	r9, r3
 801def6:	f1b9 0f00 	cmp.w	r9, #0
 801defa:	dd59      	ble.n	801dfb0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801defc:	1426      	asrs	r6, r4, #16
 801defe:	1402      	asrs	r2, r0, #16
 801df00:	fb0e 6202 	mla	r2, lr, r2, r6
 801df04:	9e01      	ldr	r6, [sp, #4]
 801df06:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801df0a:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801df0e:	d041      	beq.n	801df94 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 801df10:	9a03      	ldr	r2, [sp, #12]
 801df12:	fa5f fb86 	uxtb.w	fp, r6
 801df16:	fb02 fc0c 	mul.w	ip, r2, ip
 801df1a:	f10c 0201 	add.w	r2, ip, #1
 801df1e:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801df22:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801df26:	1212      	asrs	r2, r2, #8
 801df28:	fa1f fa82 	uxth.w	sl, r2
 801df2c:	43d2      	mvns	r2, r2
 801df2e:	fb1b fb0a 	smulbb	fp, fp, sl
 801df32:	b2d2      	uxtb	r2, r2
 801df34:	fb0c bc02 	mla	ip, ip, r2, fp
 801df38:	fa1f fc8c 	uxth.w	ip, ip
 801df3c:	f10c 0b01 	add.w	fp, ip, #1
 801df40:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801df44:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801df48:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801df4c:	fb1b fb0a 	smulbb	fp, fp, sl
 801df50:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801df54:	fb16 fa0a 	smulbb	sl, r6, sl
 801df58:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801df5c:	f807 cc03 	strb.w	ip, [r7, #-3]
 801df60:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801df64:	fb06 aa02 	mla	sl, r6, r2, sl
 801df68:	fb0c bc02 	mla	ip, ip, r2, fp
 801df6c:	fa1f fa8a 	uxth.w	sl, sl
 801df70:	fa1f fc8c 	uxth.w	ip, ip
 801df74:	f10a 0601 	add.w	r6, sl, #1
 801df78:	f10c 0b01 	add.w	fp, ip, #1
 801df7c:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801df80:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801df84:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801df88:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801df8c:	f807 ac01 	strb.w	sl, [r7, #-1]
 801df90:	f807 cc02 	strb.w	ip, [r7, #-2]
 801df94:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801df96:	3703      	adds	r7, #3
 801df98:	f109 39ff 	add.w	r9, r9, #4294967295
 801df9c:	4414      	add	r4, r2
 801df9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801dfa0:	4410      	add	r0, r2
 801dfa2:	e7a8      	b.n	801def6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801dfa4:	f04f 0c00 	mov.w	ip, #0
 801dfa8:	eba3 020c 	sub.w	r2, r3, ip
 801dfac:	2a00      	cmp	r2, #0
 801dfae:	dc3d      	bgt.n	801e02c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 801dfb0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dfb4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dfb8:	441d      	add	r5, r3
 801dfba:	2900      	cmp	r1, #0
 801dfbc:	f340 808e 	ble.w	801e0dc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801dfc0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dfc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dfc6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dfca:	3901      	subs	r1, #1
 801dfcc:	eeb0 6a62 	vmov.f32	s12, s5
 801dfd0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801dfd4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dfd8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dfdc:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801dfe0:	eeb0 6a43 	vmov.f32	s12, s6
 801dfe4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dfe8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801dfec:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dff0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dff4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dff8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dffc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e000:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e004:	ee12 2a90 	vmov	r2, s5
 801e008:	eef0 2a47 	vmov.f32	s5, s14
 801e00c:	fb92 f3f3 	sdiv	r3, r2, r3
 801e010:	ee13 2a10 	vmov	r2, s6
 801e014:	9311      	str	r3, [sp, #68]	; 0x44
 801e016:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e018:	eeb0 3a67 	vmov.f32	s6, s15
 801e01c:	fb92 f3f3 	sdiv	r3, r2, r3
 801e020:	9a02      	ldr	r2, [sp, #8]
 801e022:	9312      	str	r3, [sp, #72]	; 0x48
 801e024:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e026:	bf08      	it	eq
 801e028:	4613      	moveq	r3, r2
 801e02a:	e735      	b.n	801de98 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 801e02c:	1426      	asrs	r6, r4, #16
 801e02e:	d44e      	bmi.n	801e0ce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801e030:	4576      	cmp	r6, lr
 801e032:	da4c      	bge.n	801e0ce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801e034:	1402      	asrs	r2, r0, #16
 801e036:	d44a      	bmi.n	801e0ce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801e038:	4542      	cmp	r2, r8
 801e03a:	da48      	bge.n	801e0ce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801e03c:	fb0e 6202 	mla	r2, lr, r2, r6
 801e040:	9e01      	ldr	r6, [sp, #4]
 801e042:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801e046:	0e3a      	lsrs	r2, r7, #24
 801e048:	d041      	beq.n	801e0ce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801e04a:	9e03      	ldr	r6, [sp, #12]
 801e04c:	fa5f fb87 	uxtb.w	fp, r7
 801e050:	4372      	muls	r2, r6
 801e052:	1c56      	adds	r6, r2, #1
 801e054:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801e058:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 801e05c:	1212      	asrs	r2, r2, #8
 801e05e:	f815 9006 	ldrb.w	r9, [r5, r6]
 801e062:	fa1f fa82 	uxth.w	sl, r2
 801e066:	43d2      	mvns	r2, r2
 801e068:	fb1b fb0a 	smulbb	fp, fp, sl
 801e06c:	b2d2      	uxtb	r2, r2
 801e06e:	fb09 b902 	mla	r9, r9, r2, fp
 801e072:	fa1f f989 	uxth.w	r9, r9
 801e076:	f109 0b01 	add.w	fp, r9, #1
 801e07a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e07e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801e082:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801e086:	fb1b fb0a 	smulbb	fp, fp, sl
 801e08a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e08e:	fb17 fa0a 	smulbb	sl, r7, sl
 801e092:	f805 9006 	strb.w	r9, [r5, r6]
 801e096:	442e      	add	r6, r5
 801e098:	78b7      	ldrb	r7, [r6, #2]
 801e09a:	f896 9001 	ldrb.w	r9, [r6, #1]
 801e09e:	fb07 aa02 	mla	sl, r7, r2, sl
 801e0a2:	fb09 b902 	mla	r9, r9, r2, fp
 801e0a6:	fa1f fa8a 	uxth.w	sl, sl
 801e0aa:	fa1f f989 	uxth.w	r9, r9
 801e0ae:	f10a 0701 	add.w	r7, sl, #1
 801e0b2:	f109 0b01 	add.w	fp, r9, #1
 801e0b6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e0ba:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e0be:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e0c2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e0c6:	f886 a002 	strb.w	sl, [r6, #2]
 801e0ca:	f886 9001 	strb.w	r9, [r6, #1]
 801e0ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e0d0:	f10c 0c01 	add.w	ip, ip, #1
 801e0d4:	4414      	add	r4, r2
 801e0d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e0d8:	4410      	add	r0, r2
 801e0da:	e765      	b.n	801dfa8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801e0dc:	b005      	add	sp, #20
 801e0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e0e2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e0e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0e6:	b085      	sub	sp, #20
 801e0e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e0ec:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e0ee:	9203      	str	r2, [sp, #12]
 801e0f0:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801e0f4:	6860      	ldr	r0, [r4, #4]
 801e0f6:	9201      	str	r2, [sp, #4]
 801e0f8:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801e0fc:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801e100:	fb00 2505 	mla	r5, r0, r5, r2
 801e104:	6822      	ldr	r2, [r4, #0]
 801e106:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e10a:	4415      	add	r5, r2
 801e10c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e10e:	6812      	ldr	r2, [r2, #0]
 801e110:	9202      	str	r2, [sp, #8]
 801e112:	2900      	cmp	r1, #0
 801e114:	dc03      	bgt.n	801e11e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801e116:	9a03      	ldr	r2, [sp, #12]
 801e118:	2a00      	cmp	r2, #0
 801e11a:	f340 8122 	ble.w	801e362 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801e11e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e120:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801e124:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e126:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e12a:	2b00      	cmp	r3, #0
 801e12c:	dd0f      	ble.n	801e14e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801e12e:	1422      	asrs	r2, r4, #16
 801e130:	d406      	bmi.n	801e140 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801e132:	4572      	cmp	r2, lr
 801e134:	da04      	bge.n	801e140 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801e136:	1402      	asrs	r2, r0, #16
 801e138:	d402      	bmi.n	801e140 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801e13a:	9e01      	ldr	r6, [sp, #4]
 801e13c:	42b2      	cmp	r2, r6
 801e13e:	db07      	blt.n	801e150 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801e140:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e142:	3b01      	subs	r3, #1
 801e144:	3503      	adds	r5, #3
 801e146:	4414      	add	r4, r2
 801e148:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e14a:	4410      	add	r0, r2
 801e14c:	e7ed      	b.n	801e12a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801e14e:	d06e      	beq.n	801e22e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801e150:	1e5a      	subs	r2, r3, #1
 801e152:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801e154:	fb06 4602 	mla	r6, r6, r2, r4
 801e158:	1436      	asrs	r6, r6, #16
 801e15a:	d45d      	bmi.n	801e218 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801e15c:	4576      	cmp	r6, lr
 801e15e:	da5b      	bge.n	801e218 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801e160:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801e162:	fb06 0202 	mla	r2, r6, r2, r0
 801e166:	1412      	asrs	r2, r2, #16
 801e168:	d456      	bmi.n	801e218 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801e16a:	9e01      	ldr	r6, [sp, #4]
 801e16c:	42b2      	cmp	r2, r6
 801e16e:	da53      	bge.n	801e218 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801e170:	1cee      	adds	r6, r5, #3
 801e172:	469a      	mov	sl, r3
 801e174:	f1ba 0f00 	cmp.w	sl, #0
 801e178:	dd54      	ble.n	801e224 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801e17a:	1427      	asrs	r7, r4, #16
 801e17c:	1402      	asrs	r2, r0, #16
 801e17e:	fb0e 7202 	mla	r2, lr, r2, r7
 801e182:	9f02      	ldr	r7, [sp, #8]
 801e184:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801e188:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 801e18c:	d03c      	beq.n	801e208 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801e18e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801e192:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801e196:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801e19a:	fa5f f28c 	uxtb.w	r2, ip
 801e19e:	b2ff      	uxtb	r7, r7
 801e1a0:	f000 80d8 	beq.w	801e354 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801e1a4:	fa1f f882 	uxth.w	r8, r2
 801e1a8:	43d2      	mvns	r2, r2
 801e1aa:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801e1ae:	fb17 f708 	smulbb	r7, r7, r8
 801e1b2:	b2d2      	uxtb	r2, r2
 801e1b4:	fb19 f908 	smulbb	r9, r9, r8
 801e1b8:	fb0c 7702 	mla	r7, ip, r2, r7
 801e1bc:	fb1b f808 	smulbb	r8, fp, r8
 801e1c0:	b2bf      	uxth	r7, r7
 801e1c2:	f107 0c01 	add.w	ip, r7, #1
 801e1c6:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801e1ca:	123f      	asrs	r7, r7, #8
 801e1cc:	f806 7c03 	strb.w	r7, [r6, #-3]
 801e1d0:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801e1d4:	fb07 9902 	mla	r9, r7, r2, r9
 801e1d8:	fa1f f989 	uxth.w	r9, r9
 801e1dc:	f109 0701 	add.w	r7, r9, #1
 801e1e0:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801e1e4:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801e1e8:	fb07 8802 	mla	r8, r7, r2, r8
 801e1ec:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e1f0:	fa1f f888 	uxth.w	r8, r8
 801e1f4:	f806 9c02 	strb.w	r9, [r6, #-2]
 801e1f8:	f108 0201 	add.w	r2, r8, #1
 801e1fc:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801e200:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e204:	f806 8c01 	strb.w	r8, [r6, #-1]
 801e208:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e20a:	3603      	adds	r6, #3
 801e20c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e210:	4414      	add	r4, r2
 801e212:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e214:	4410      	add	r0, r2
 801e216:	e7ad      	b.n	801e174 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801e218:	f04f 0c00 	mov.w	ip, #0
 801e21c:	eba3 020c 	sub.w	r2, r3, ip
 801e220:	2a00      	cmp	r2, #0
 801e222:	dc3d      	bgt.n	801e2a0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 801e224:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e228:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e22c:	441d      	add	r5, r3
 801e22e:	2900      	cmp	r1, #0
 801e230:	f340 8097 	ble.w	801e362 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801e234:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e238:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e23a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e23e:	3901      	subs	r1, #1
 801e240:	eeb0 6a62 	vmov.f32	s12, s5
 801e244:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e248:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e24c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e250:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e254:	eeb0 6a43 	vmov.f32	s12, s6
 801e258:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e25c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e260:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e264:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e268:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e26c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e270:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e274:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e278:	ee12 2a90 	vmov	r2, s5
 801e27c:	eef0 2a47 	vmov.f32	s5, s14
 801e280:	fb92 f3f3 	sdiv	r3, r2, r3
 801e284:	ee13 2a10 	vmov	r2, s6
 801e288:	9311      	str	r3, [sp, #68]	; 0x44
 801e28a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e28c:	eeb0 3a67 	vmov.f32	s6, s15
 801e290:	fb92 f3f3 	sdiv	r3, r2, r3
 801e294:	9a03      	ldr	r2, [sp, #12]
 801e296:	9312      	str	r3, [sp, #72]	; 0x48
 801e298:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e29a:	bf08      	it	eq
 801e29c:	4613      	moveq	r3, r2
 801e29e:	e738      	b.n	801e112 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801e2a0:	1426      	asrs	r6, r4, #16
 801e2a2:	d448      	bmi.n	801e336 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801e2a4:	4576      	cmp	r6, lr
 801e2a6:	da46      	bge.n	801e336 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801e2a8:	1402      	asrs	r2, r0, #16
 801e2aa:	d444      	bmi.n	801e336 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801e2ac:	9f01      	ldr	r7, [sp, #4]
 801e2ae:	42ba      	cmp	r2, r7
 801e2b0:	da41      	bge.n	801e336 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801e2b2:	fb0e 6202 	mla	r2, lr, r2, r6
 801e2b6:	9e02      	ldr	r6, [sp, #8]
 801e2b8:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801e2bc:	0e3a      	lsrs	r2, r7, #24
 801e2be:	d03a      	beq.n	801e336 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801e2c0:	2aff      	cmp	r2, #255	; 0xff
 801e2c2:	b2d6      	uxtb	r6, r2
 801e2c4:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801e2c8:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801e2cc:	ea4f 024c 	mov.w	r2, ip, lsl #1
 801e2d0:	b2ff      	uxtb	r7, r7
 801e2d2:	d037      	beq.n	801e344 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 801e2d4:	fa1f f986 	uxth.w	r9, r6
 801e2d8:	4462      	add	r2, ip
 801e2da:	43f6      	mvns	r6, r6
 801e2dc:	f815 8002 	ldrb.w	r8, [r5, r2]
 801e2e0:	fb17 f709 	smulbb	r7, r7, r9
 801e2e4:	fb1a fa09 	smulbb	sl, sl, r9
 801e2e8:	b2f6      	uxtb	r6, r6
 801e2ea:	fb1b f909 	smulbb	r9, fp, r9
 801e2ee:	fb08 7706 	mla	r7, r8, r6, r7
 801e2f2:	b2bf      	uxth	r7, r7
 801e2f4:	f107 0801 	add.w	r8, r7, #1
 801e2f8:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801e2fc:	123f      	asrs	r7, r7, #8
 801e2fe:	54af      	strb	r7, [r5, r2]
 801e300:	442a      	add	r2, r5
 801e302:	7857      	ldrb	r7, [r2, #1]
 801e304:	fb07 aa06 	mla	sl, r7, r6, sl
 801e308:	fa1f fa8a 	uxth.w	sl, sl
 801e30c:	f10a 0701 	add.w	r7, sl, #1
 801e310:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e314:	7897      	ldrb	r7, [r2, #2]
 801e316:	fb07 9906 	mla	r9, r7, r6, r9
 801e31a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e31e:	fa1f f989 	uxth.w	r9, r9
 801e322:	f882 a001 	strb.w	sl, [r2, #1]
 801e326:	f109 0601 	add.w	r6, r9, #1
 801e32a:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801e32e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e332:	f882 9002 	strb.w	r9, [r2, #2]
 801e336:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e338:	f10c 0c01 	add.w	ip, ip, #1
 801e33c:	4414      	add	r4, r2
 801e33e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e340:	4410      	add	r0, r2
 801e342:	e76b      	b.n	801e21c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 801e344:	4462      	add	r2, ip
 801e346:	54af      	strb	r7, [r5, r2]
 801e348:	442a      	add	r2, r5
 801e34a:	f882 a001 	strb.w	sl, [r2, #1]
 801e34e:	f882 b002 	strb.w	fp, [r2, #2]
 801e352:	e7f0      	b.n	801e336 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801e354:	f806 7c03 	strb.w	r7, [r6, #-3]
 801e358:	f806 9c02 	strb.w	r9, [r6, #-2]
 801e35c:	f806 bc01 	strb.w	fp, [r6, #-1]
 801e360:	e752      	b.n	801e208 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801e362:	b005      	add	sp, #20
 801e364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e368 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e36c:	b087      	sub	sp, #28
 801e36e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e372:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e374:	9204      	str	r2, [sp, #16]
 801e376:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801e37a:	6860      	ldr	r0, [r4, #4]
 801e37c:	9205      	str	r2, [sp, #20]
 801e37e:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801e382:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801e386:	9101      	str	r1, [sp, #4]
 801e388:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801e38c:	fb00 2505 	mla	r5, r0, r5, r2
 801e390:	6822      	ldr	r2, [r4, #0]
 801e392:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e396:	4415      	add	r5, r2
 801e398:	f10e 0201 	add.w	r2, lr, #1
 801e39c:	f022 0201 	bic.w	r2, r2, #1
 801e3a0:	9202      	str	r2, [sp, #8]
 801e3a2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801e3a4:	6812      	ldr	r2, [r2, #0]
 801e3a6:	9203      	str	r2, [sp, #12]
 801e3a8:	9a01      	ldr	r2, [sp, #4]
 801e3aa:	2a00      	cmp	r2, #0
 801e3ac:	dc03      	bgt.n	801e3b6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801e3ae:	9a04      	ldr	r2, [sp, #16]
 801e3b0:	2a00      	cmp	r2, #0
 801e3b2:	f340 8132 	ble.w	801e61a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801e3b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e3b8:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801e3bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e3be:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e3c2:	2b00      	cmp	r3, #0
 801e3c4:	dd0e      	ble.n	801e3e4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801e3c6:	1422      	asrs	r2, r4, #16
 801e3c8:	d405      	bmi.n	801e3d6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801e3ca:	4596      	cmp	lr, r2
 801e3cc:	dd03      	ble.n	801e3d6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801e3ce:	1402      	asrs	r2, r0, #16
 801e3d0:	d401      	bmi.n	801e3d6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801e3d2:	4542      	cmp	r2, r8
 801e3d4:	db07      	blt.n	801e3e6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801e3d6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e3d8:	3b01      	subs	r3, #1
 801e3da:	3503      	adds	r5, #3
 801e3dc:	4414      	add	r4, r2
 801e3de:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e3e0:	4410      	add	r0, r2
 801e3e2:	e7ee      	b.n	801e3c2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 801e3e4:	d010      	beq.n	801e408 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801e3e6:	1e5a      	subs	r2, r3, #1
 801e3e8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e3ea:	fb06 4602 	mla	r6, r6, r2, r4
 801e3ee:	1436      	asrs	r6, r6, #16
 801e3f0:	d546      	bpl.n	801e480 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801e3f2:	4699      	mov	r9, r3
 801e3f4:	462e      	mov	r6, r5
 801e3f6:	f1b9 0f00 	cmp.w	r9, #0
 801e3fa:	f300 80ac 	bgt.w	801e556 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 801e3fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e402:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e406:	441d      	add	r5, r3
 801e408:	9b01      	ldr	r3, [sp, #4]
 801e40a:	2b00      	cmp	r3, #0
 801e40c:	f340 8105 	ble.w	801e61a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801e410:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e414:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e416:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e41a:	eeb0 6a62 	vmov.f32	s12, s5
 801e41e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e422:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e426:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e42a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801e42e:	eeb0 6a43 	vmov.f32	s12, s6
 801e432:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e436:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801e43a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e43e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e442:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e446:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e44a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e44e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e452:	ee12 2a90 	vmov	r2, s5
 801e456:	eef0 2a47 	vmov.f32	s5, s14
 801e45a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e45e:	ee13 2a10 	vmov	r2, s6
 801e462:	9313      	str	r3, [sp, #76]	; 0x4c
 801e464:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e466:	eeb0 3a67 	vmov.f32	s6, s15
 801e46a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e46e:	9314      	str	r3, [sp, #80]	; 0x50
 801e470:	9b01      	ldr	r3, [sp, #4]
 801e472:	9a04      	ldr	r2, [sp, #16]
 801e474:	3b01      	subs	r3, #1
 801e476:	9301      	str	r3, [sp, #4]
 801e478:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e47a:	bf08      	it	eq
 801e47c:	4613      	moveq	r3, r2
 801e47e:	e793      	b.n	801e3a8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801e480:	45b6      	cmp	lr, r6
 801e482:	ddb6      	ble.n	801e3f2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801e484:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801e486:	fb06 0202 	mla	r2, r6, r2, r0
 801e48a:	1412      	asrs	r2, r2, #16
 801e48c:	d4b1      	bmi.n	801e3f2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801e48e:	4542      	cmp	r2, r8
 801e490:	daaf      	bge.n	801e3f2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801e492:	1cee      	adds	r6, r5, #3
 801e494:	4699      	mov	r9, r3
 801e496:	f1b9 0f00 	cmp.w	r9, #0
 801e49a:	ddb0      	ble.n	801e3fe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801e49c:	1422      	asrs	r2, r4, #16
 801e49e:	9902      	ldr	r1, [sp, #8]
 801e4a0:	1407      	asrs	r7, r0, #16
 801e4a2:	fb01 2707 	mla	r7, r1, r7, r2
 801e4a6:	9903      	ldr	r1, [sp, #12]
 801e4a8:	087a      	lsrs	r2, r7, #1
 801e4aa:	5c8a      	ldrb	r2, [r1, r2]
 801e4ac:	07f9      	lsls	r1, r7, #31
 801e4ae:	bf54      	ite	pl
 801e4b0:	f002 020f 	andpl.w	r2, r2, #15
 801e4b4:	1112      	asrmi	r2, r2, #4
 801e4b6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e4ba:	b2d2      	uxtb	r2, r2
 801e4bc:	2a00      	cmp	r2, #0
 801e4be:	d042      	beq.n	801e546 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 801e4c0:	4957      	ldr	r1, [pc, #348]	; (801e620 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801e4c2:	680f      	ldr	r7, [r1, #0]
 801e4c4:	9905      	ldr	r1, [sp, #20]
 801e4c6:	fa5f fb87 	uxtb.w	fp, r7
 801e4ca:	434a      	muls	r2, r1
 801e4cc:	f102 0c01 	add.w	ip, r2, #1
 801e4d0:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801e4d4:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801e4d8:	1212      	asrs	r2, r2, #8
 801e4da:	fa1f fa82 	uxth.w	sl, r2
 801e4de:	43d2      	mvns	r2, r2
 801e4e0:	fb1b fb0a 	smulbb	fp, fp, sl
 801e4e4:	b2d2      	uxtb	r2, r2
 801e4e6:	fb0c bc02 	mla	ip, ip, r2, fp
 801e4ea:	fa1f fc8c 	uxth.w	ip, ip
 801e4ee:	f10c 0b01 	add.w	fp, ip, #1
 801e4f2:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e4f6:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801e4fa:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801e4fe:	fb1b fb0a 	smulbb	fp, fp, sl
 801e502:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e506:	fb17 fa0a 	smulbb	sl, r7, sl
 801e50a:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801e50e:	f806 cc03 	strb.w	ip, [r6, #-3]
 801e512:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 801e516:	fb07 aa02 	mla	sl, r7, r2, sl
 801e51a:	fb0c bc02 	mla	ip, ip, r2, fp
 801e51e:	fa1f fa8a 	uxth.w	sl, sl
 801e522:	fa1f fc8c 	uxth.w	ip, ip
 801e526:	f10a 0701 	add.w	r7, sl, #1
 801e52a:	f10c 0b01 	add.w	fp, ip, #1
 801e52e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e532:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e536:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e53a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e53e:	f806 ac01 	strb.w	sl, [r6, #-1]
 801e542:	f806 cc02 	strb.w	ip, [r6, #-2]
 801e546:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e548:	3603      	adds	r6, #3
 801e54a:	f109 39ff 	add.w	r9, r9, #4294967295
 801e54e:	4414      	add	r4, r2
 801e550:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e552:	4410      	add	r0, r2
 801e554:	e79f      	b.n	801e496 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 801e556:	1422      	asrs	r2, r4, #16
 801e558:	d457      	bmi.n	801e60a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801e55a:	4596      	cmp	lr, r2
 801e55c:	dd55      	ble.n	801e60a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801e55e:	1407      	asrs	r7, r0, #16
 801e560:	d453      	bmi.n	801e60a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801e562:	4547      	cmp	r7, r8
 801e564:	da51      	bge.n	801e60a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801e566:	9902      	ldr	r1, [sp, #8]
 801e568:	fb07 2701 	mla	r7, r7, r1, r2
 801e56c:	9903      	ldr	r1, [sp, #12]
 801e56e:	087a      	lsrs	r2, r7, #1
 801e570:	07ff      	lsls	r7, r7, #31
 801e572:	5c8a      	ldrb	r2, [r1, r2]
 801e574:	bf54      	ite	pl
 801e576:	f002 020f 	andpl.w	r2, r2, #15
 801e57a:	1112      	asrmi	r2, r2, #4
 801e57c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e580:	b2d2      	uxtb	r2, r2
 801e582:	2a00      	cmp	r2, #0
 801e584:	d041      	beq.n	801e60a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801e586:	4926      	ldr	r1, [pc, #152]	; (801e620 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801e588:	680f      	ldr	r7, [r1, #0]
 801e58a:	9905      	ldr	r1, [sp, #20]
 801e58c:	fa5f fb87 	uxtb.w	fp, r7
 801e590:	434a      	muls	r2, r1
 801e592:	f102 0c01 	add.w	ip, r2, #1
 801e596:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801e59a:	f896 c000 	ldrb.w	ip, [r6]
 801e59e:	1212      	asrs	r2, r2, #8
 801e5a0:	fa1f fa82 	uxth.w	sl, r2
 801e5a4:	43d2      	mvns	r2, r2
 801e5a6:	fb1b fb0a 	smulbb	fp, fp, sl
 801e5aa:	b2d2      	uxtb	r2, r2
 801e5ac:	fb0c bc02 	mla	ip, ip, r2, fp
 801e5b0:	fa1f fc8c 	uxth.w	ip, ip
 801e5b4:	f10c 0b01 	add.w	fp, ip, #1
 801e5b8:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e5bc:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801e5c0:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801e5c4:	fb1b fb0a 	smulbb	fp, fp, sl
 801e5c8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e5cc:	fb17 fa0a 	smulbb	sl, r7, sl
 801e5d0:	78b7      	ldrb	r7, [r6, #2]
 801e5d2:	f886 c000 	strb.w	ip, [r6]
 801e5d6:	f896 c001 	ldrb.w	ip, [r6, #1]
 801e5da:	fb07 aa02 	mla	sl, r7, r2, sl
 801e5de:	fb0c bc02 	mla	ip, ip, r2, fp
 801e5e2:	fa1f fa8a 	uxth.w	sl, sl
 801e5e6:	fa1f fc8c 	uxth.w	ip, ip
 801e5ea:	f10a 0701 	add.w	r7, sl, #1
 801e5ee:	f10c 0b01 	add.w	fp, ip, #1
 801e5f2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e5f6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e5fa:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e5fe:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e602:	f886 a002 	strb.w	sl, [r6, #2]
 801e606:	f886 c001 	strb.w	ip, [r6, #1]
 801e60a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e60c:	3603      	adds	r6, #3
 801e60e:	f109 39ff 	add.w	r9, r9, #4294967295
 801e612:	4414      	add	r4, r2
 801e614:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e616:	4410      	add	r0, r2
 801e618:	e6ed      	b.n	801e3f6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 801e61a:	b007      	add	sp, #28
 801e61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e620:	2000c6b4 	.word	0x2000c6b4

0801e624 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e628:	b087      	sub	sp, #28
 801e62a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e62e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e630:	9205      	str	r2, [sp, #20]
 801e632:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801e636:	6860      	ldr	r0, [r4, #4]
 801e638:	9202      	str	r2, [sp, #8]
 801e63a:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 801e63e:	9101      	str	r1, [sp, #4]
 801e640:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 801e644:	fb00 2606 	mla	r6, r0, r6, r2
 801e648:	6822      	ldr	r2, [r4, #0]
 801e64a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e64e:	4416      	add	r6, r2
 801e650:	f108 0201 	add.w	r2, r8, #1
 801e654:	f022 0201 	bic.w	r2, r2, #1
 801e658:	9203      	str	r2, [sp, #12]
 801e65a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801e65c:	6812      	ldr	r2, [r2, #0]
 801e65e:	9204      	str	r2, [sp, #16]
 801e660:	9a01      	ldr	r2, [sp, #4]
 801e662:	2a00      	cmp	r2, #0
 801e664:	dc03      	bgt.n	801e66e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801e666:	9a05      	ldr	r2, [sp, #20]
 801e668:	2a00      	cmp	r2, #0
 801e66a:	f340 813a 	ble.w	801e8e2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801e66e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e670:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801e674:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e676:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801e67a:	2b00      	cmp	r3, #0
 801e67c:	dd0f      	ble.n	801e69e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801e67e:	142a      	asrs	r2, r5, #16
 801e680:	d406      	bmi.n	801e690 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801e682:	4590      	cmp	r8, r2
 801e684:	dd04      	ble.n	801e690 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801e686:	1422      	asrs	r2, r4, #16
 801e688:	d402      	bmi.n	801e690 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801e68a:	9802      	ldr	r0, [sp, #8]
 801e68c:	4282      	cmp	r2, r0
 801e68e:	db07      	blt.n	801e6a0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801e690:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e692:	3b01      	subs	r3, #1
 801e694:	3603      	adds	r6, #3
 801e696:	4415      	add	r5, r2
 801e698:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e69a:	4414      	add	r4, r2
 801e69c:	e7ed      	b.n	801e67a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801e69e:	d073      	beq.n	801e788 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 801e6a0:	1e5a      	subs	r2, r3, #1
 801e6a2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e6a4:	fb00 5002 	mla	r0, r0, r2, r5
 801e6a8:	1400      	asrs	r0, r0, #16
 801e6aa:	d464      	bmi.n	801e776 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801e6ac:	4580      	cmp	r8, r0
 801e6ae:	dd62      	ble.n	801e776 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801e6b0:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e6b2:	fb00 4202 	mla	r2, r0, r2, r4
 801e6b6:	1412      	asrs	r2, r2, #16
 801e6b8:	d45d      	bmi.n	801e776 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801e6ba:	9802      	ldr	r0, [sp, #8]
 801e6bc:	4282      	cmp	r2, r0
 801e6be:	da5a      	bge.n	801e776 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801e6c0:	1cf0      	adds	r0, r6, #3
 801e6c2:	469a      	mov	sl, r3
 801e6c4:	f1ba 0f00 	cmp.w	sl, #0
 801e6c8:	dd59      	ble.n	801e77e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801e6ca:	142a      	asrs	r2, r5, #16
 801e6cc:	9903      	ldr	r1, [sp, #12]
 801e6ce:	1427      	asrs	r7, r4, #16
 801e6d0:	fb01 2707 	mla	r7, r1, r7, r2
 801e6d4:	9904      	ldr	r1, [sp, #16]
 801e6d6:	087a      	lsrs	r2, r7, #1
 801e6d8:	5c8a      	ldrb	r2, [r1, r2]
 801e6da:	07f9      	lsls	r1, r7, #31
 801e6dc:	bf54      	ite	pl
 801e6de:	f002 020f 	andpl.w	r2, r2, #15
 801e6e2:	1112      	asrmi	r2, r2, #4
 801e6e4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e6e8:	b2d2      	uxtb	r2, r2
 801e6ea:	2a00      	cmp	r2, #0
 801e6ec:	d03b      	beq.n	801e766 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801e6ee:	497e      	ldr	r1, [pc, #504]	; (801e8e8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801e6f0:	2aff      	cmp	r2, #255	; 0xff
 801e6f2:	680f      	ldr	r7, [r1, #0]
 801e6f4:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801e6f8:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801e6fc:	b2ff      	uxtb	r7, r7
 801e6fe:	f000 80e9 	beq.w	801e8d4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801e702:	fa1f fe82 	uxth.w	lr, r2
 801e706:	43d2      	mvns	r2, r2
 801e708:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 801e70c:	fb17 f70e 	smulbb	r7, r7, lr
 801e710:	b2d2      	uxtb	r2, r2
 801e712:	fb19 f90e 	smulbb	r9, r9, lr
 801e716:	fb0c 7702 	mla	r7, ip, r2, r7
 801e71a:	fb1b fe0e 	smulbb	lr, fp, lr
 801e71e:	b2bf      	uxth	r7, r7
 801e720:	f107 0c01 	add.w	ip, r7, #1
 801e724:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801e728:	123f      	asrs	r7, r7, #8
 801e72a:	f800 7c03 	strb.w	r7, [r0, #-3]
 801e72e:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801e732:	fb07 9902 	mla	r9, r7, r2, r9
 801e736:	fa1f f989 	uxth.w	r9, r9
 801e73a:	f109 0701 	add.w	r7, r9, #1
 801e73e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801e742:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801e746:	fb07 ee02 	mla	lr, r7, r2, lr
 801e74a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e74e:	fa1f fe8e 	uxth.w	lr, lr
 801e752:	f800 9c02 	strb.w	r9, [r0, #-2]
 801e756:	f10e 0201 	add.w	r2, lr, #1
 801e75a:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801e75e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e762:	f800 ec01 	strb.w	lr, [r0, #-1]
 801e766:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e768:	3003      	adds	r0, #3
 801e76a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e76e:	4415      	add	r5, r2
 801e770:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e772:	4414      	add	r4, r2
 801e774:	e7a6      	b.n	801e6c4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801e776:	2700      	movs	r7, #0
 801e778:	1bda      	subs	r2, r3, r7
 801e77a:	2a00      	cmp	r2, #0
 801e77c:	dc40      	bgt.n	801e800 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801e77e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e782:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e786:	441e      	add	r6, r3
 801e788:	9b01      	ldr	r3, [sp, #4]
 801e78a:	2b00      	cmp	r3, #0
 801e78c:	f340 80a9 	ble.w	801e8e2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801e790:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e794:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e796:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e79a:	eeb0 6a62 	vmov.f32	s12, s5
 801e79e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e7a2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e7a6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e7aa:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801e7ae:	eeb0 6a43 	vmov.f32	s12, s6
 801e7b2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e7b6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801e7ba:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e7be:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e7c2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e7c6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e7ca:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e7ce:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e7d2:	ee12 2a90 	vmov	r2, s5
 801e7d6:	eef0 2a47 	vmov.f32	s5, s14
 801e7da:	fb92 f3f3 	sdiv	r3, r2, r3
 801e7de:	ee13 2a10 	vmov	r2, s6
 801e7e2:	9313      	str	r3, [sp, #76]	; 0x4c
 801e7e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e7e6:	eeb0 3a67 	vmov.f32	s6, s15
 801e7ea:	fb92 f3f3 	sdiv	r3, r2, r3
 801e7ee:	9314      	str	r3, [sp, #80]	; 0x50
 801e7f0:	9b01      	ldr	r3, [sp, #4]
 801e7f2:	9a05      	ldr	r2, [sp, #20]
 801e7f4:	3b01      	subs	r3, #1
 801e7f6:	9301      	str	r3, [sp, #4]
 801e7f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e7fa:	bf08      	it	eq
 801e7fc:	4613      	moveq	r3, r2
 801e7fe:	e72f      	b.n	801e660 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801e800:	142a      	asrs	r2, r5, #16
 801e802:	d458      	bmi.n	801e8b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801e804:	4590      	cmp	r8, r2
 801e806:	dd56      	ble.n	801e8b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801e808:	1420      	asrs	r0, r4, #16
 801e80a:	d454      	bmi.n	801e8b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801e80c:	9902      	ldr	r1, [sp, #8]
 801e80e:	4288      	cmp	r0, r1
 801e810:	da51      	bge.n	801e8b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801e812:	9903      	ldr	r1, [sp, #12]
 801e814:	fb00 2001 	mla	r0, r0, r1, r2
 801e818:	9904      	ldr	r1, [sp, #16]
 801e81a:	0842      	lsrs	r2, r0, #1
 801e81c:	07c0      	lsls	r0, r0, #31
 801e81e:	5c8a      	ldrb	r2, [r1, r2]
 801e820:	bf54      	ite	pl
 801e822:	f002 020f 	andpl.w	r2, r2, #15
 801e826:	1112      	asrmi	r2, r2, #4
 801e828:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e82c:	b2d2      	uxtb	r2, r2
 801e82e:	2a00      	cmp	r2, #0
 801e830:	d041      	beq.n	801e8b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801e832:	492d      	ldr	r1, [pc, #180]	; (801e8e8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801e834:	2aff      	cmp	r2, #255	; 0xff
 801e836:	6808      	ldr	r0, [r1, #0]
 801e838:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801e83c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801e840:	fa5f fc80 	uxtb.w	ip, r0
 801e844:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801e848:	d03b      	beq.n	801e8c2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 801e84a:	fa1f f982 	uxth.w	r9, r2
 801e84e:	4438      	add	r0, r7
 801e850:	43d2      	mvns	r2, r2
 801e852:	f816 e000 	ldrb.w	lr, [r6, r0]
 801e856:	fb1c fc09 	smulbb	ip, ip, r9
 801e85a:	fb1a fa09 	smulbb	sl, sl, r9
 801e85e:	b2d2      	uxtb	r2, r2
 801e860:	fb1b f909 	smulbb	r9, fp, r9
 801e864:	fb0e cc02 	mla	ip, lr, r2, ip
 801e868:	fa1f fc8c 	uxth.w	ip, ip
 801e86c:	f10c 0e01 	add.w	lr, ip, #1
 801e870:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801e874:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e878:	f806 c000 	strb.w	ip, [r6, r0]
 801e87c:	4430      	add	r0, r6
 801e87e:	f890 c001 	ldrb.w	ip, [r0, #1]
 801e882:	fb0c aa02 	mla	sl, ip, r2, sl
 801e886:	fa1f fa8a 	uxth.w	sl, sl
 801e88a:	f10a 0c01 	add.w	ip, sl, #1
 801e88e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e892:	f890 c002 	ldrb.w	ip, [r0, #2]
 801e896:	fb0c 9902 	mla	r9, ip, r2, r9
 801e89a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e89e:	fa1f f989 	uxth.w	r9, r9
 801e8a2:	f880 a001 	strb.w	sl, [r0, #1]
 801e8a6:	f109 0201 	add.w	r2, r9, #1
 801e8aa:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801e8ae:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e8b2:	f880 9002 	strb.w	r9, [r0, #2]
 801e8b6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e8b8:	3701      	adds	r7, #1
 801e8ba:	4415      	add	r5, r2
 801e8bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e8be:	4414      	add	r4, r2
 801e8c0:	e75a      	b.n	801e778 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801e8c2:	4438      	add	r0, r7
 801e8c4:	f806 c000 	strb.w	ip, [r6, r0]
 801e8c8:	4430      	add	r0, r6
 801e8ca:	f880 a001 	strb.w	sl, [r0, #1]
 801e8ce:	f880 b002 	strb.w	fp, [r0, #2]
 801e8d2:	e7f0      	b.n	801e8b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801e8d4:	f800 7c03 	strb.w	r7, [r0, #-3]
 801e8d8:	f800 9c02 	strb.w	r9, [r0, #-2]
 801e8dc:	f800 bc01 	strb.w	fp, [r0, #-1]
 801e8e0:	e741      	b.n	801e766 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801e8e2:	b007      	add	sp, #28
 801e8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e8e8:	2000c6b4 	.word	0x2000c6b4

0801e8ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801e8ec:	4770      	bx	lr

0801e8ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801e8ee:	4770      	bx	lr

0801e8f0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801e8f0:	4770      	bx	lr

0801e8f2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801e8f2:	4770      	bx	lr

0801e8f4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801e8f4:	4770      	bx	lr

0801e8f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801e8f6:	4770      	bx	lr

0801e8f8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801e8f8:	4770      	bx	lr

0801e8fa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801e8fa:	4770      	bx	lr

0801e8fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801e8fc:	4770      	bx	lr

0801e8fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801e8fe:	4770      	bx	lr

0801e900 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801e900:	4770      	bx	lr

0801e902 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801e902:	4770      	bx	lr

0801e904 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801e904:	4770      	bx	lr

0801e906 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801e906:	4770      	bx	lr

0801e908 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801e908:	4770      	bx	lr

0801e90a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801e90a:	4770      	bx	lr

0801e90c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801e90c:	4770      	bx	lr

0801e90e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801e90e:	4770      	bx	lr

0801e910 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801e910:	4770      	bx	lr

0801e912 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801e912:	4770      	bx	lr

0801e914 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801e914:	2bff      	cmp	r3, #255	; 0xff
 801e916:	b508      	push	{r3, lr}
 801e918:	d04f      	beq.n	801e9ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801e91a:	2a2c      	cmp	r2, #44	; 0x2c
 801e91c:	d032      	beq.n	801e984 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801e91e:	d80f      	bhi.n	801e940 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801e920:	2a08      	cmp	r2, #8
 801e922:	d046      	beq.n	801e9b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801e924:	d805      	bhi.n	801e932 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801e926:	2a04      	cmp	r2, #4
 801e928:	d041      	beq.n	801e9ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801e92a:	2a05      	cmp	r2, #5
 801e92c:	d03d      	beq.n	801e9aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801e92e:	2000      	movs	r0, #0
 801e930:	e027      	b.n	801e982 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e932:	2a0a      	cmp	r2, #10
 801e934:	d03d      	beq.n	801e9b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801e936:	d301      	bcc.n	801e93c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801e938:	2a0b      	cmp	r2, #11
 801e93a:	d1f8      	bne.n	801e92e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e93c:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801e93e:	e020      	b.n	801e982 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e940:	2a30      	cmp	r2, #48	; 0x30
 801e942:	d038      	beq.n	801e9b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801e944:	d808      	bhi.n	801e958 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801e946:	2a2e      	cmp	r2, #46	; 0x2e
 801e948:	684b      	ldr	r3, [r1, #4]
 801e94a:	d029      	beq.n	801e9a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801e94c:	d90b      	bls.n	801e966 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801e94e:	781b      	ldrb	r3, [r3, #0]
 801e950:	2b00      	cmp	r3, #0
 801e952:	d1ec      	bne.n	801e92e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e954:	6a00      	ldr	r0, [r0, #32]
 801e956:	e014      	b.n	801e982 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e958:	2a32      	cmp	r2, #50	; 0x32
 801e95a:	d02c      	beq.n	801e9b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801e95c:	d301      	bcc.n	801e962 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801e95e:	2a33      	cmp	r2, #51	; 0x33
 801e960:	d1e5      	bne.n	801e92e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e962:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801e964:	e00d      	b.n	801e982 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e966:	781b      	ldrb	r3, [r3, #0]
 801e968:	2b01      	cmp	r3, #1
 801e96a:	d009      	beq.n	801e980 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801e96c:	d3f2      	bcc.n	801e954 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801e96e:	2b02      	cmp	r3, #2
 801e970:	d1dd      	bne.n	801e92e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e972:	4b39      	ldr	r3, [pc, #228]	; (801ea58 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801e974:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 801e978:	4a38      	ldr	r2, [pc, #224]	; (801ea5c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801e97a:	4839      	ldr	r0, [pc, #228]	; (801ea60 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801e97c:	f007 ff3e 	bl	80267fc <__assert_func>
 801e980:	6900      	ldr	r0, [r0, #16]
 801e982:	bd08      	pop	{r3, pc}
 801e984:	684b      	ldr	r3, [r1, #4]
 801e986:	781b      	ldrb	r3, [r3, #0]
 801e988:	2b01      	cmp	r3, #1
 801e98a:	d007      	beq.n	801e99c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801e98c:	d30b      	bcc.n	801e9a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801e98e:	2b02      	cmp	r3, #2
 801e990:	d1cd      	bne.n	801e92e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e992:	4b31      	ldr	r3, [pc, #196]	; (801ea58 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801e994:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 801e998:	4a30      	ldr	r2, [pc, #192]	; (801ea5c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801e99a:	e7ee      	b.n	801e97a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e99c:	6880      	ldr	r0, [r0, #8]
 801e99e:	e7f0      	b.n	801e982 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e9a0:	781b      	ldrb	r3, [r3, #0]
 801e9a2:	2b00      	cmp	r3, #0
 801e9a4:	d1c3      	bne.n	801e92e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e9a6:	6980      	ldr	r0, [r0, #24]
 801e9a8:	e7eb      	b.n	801e982 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e9aa:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801e9ac:	e7e9      	b.n	801e982 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e9ae:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801e9b0:	e7e7      	b.n	801e982 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e9b2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801e9b4:	e7e5      	b.n	801e982 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e9b6:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801e9b8:	e7e3      	b.n	801e982 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e9ba:	2a2c      	cmp	r2, #44	; 0x2c
 801e9bc:	d030      	beq.n	801ea20 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801e9be:	d80f      	bhi.n	801e9e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801e9c0:	2a08      	cmp	r2, #8
 801e9c2:	d044      	beq.n	801ea4e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801e9c4:	d805      	bhi.n	801e9d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801e9c6:	2a04      	cmp	r2, #4
 801e9c8:	d03f      	beq.n	801ea4a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801e9ca:	2a05      	cmp	r2, #5
 801e9cc:	d1af      	bne.n	801e92e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e9ce:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801e9d0:	e7d7      	b.n	801e982 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e9d2:	2a0a      	cmp	r2, #10
 801e9d4:	d03b      	beq.n	801ea4e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801e9d6:	d301      	bcc.n	801e9dc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801e9d8:	2a0b      	cmp	r2, #11
 801e9da:	d1a8      	bne.n	801e92e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e9dc:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801e9de:	e7d0      	b.n	801e982 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e9e0:	2a30      	cmp	r2, #48	; 0x30
 801e9e2:	d036      	beq.n	801ea52 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801e9e4:	d808      	bhi.n	801e9f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801e9e6:	2a2e      	cmp	r2, #46	; 0x2e
 801e9e8:	684b      	ldr	r3, [r1, #4]
 801e9ea:	d028      	beq.n	801ea3e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801e9ec:	d90b      	bls.n	801ea06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801e9ee:	781b      	ldrb	r3, [r3, #0]
 801e9f0:	2b00      	cmp	r3, #0
 801e9f2:	d19c      	bne.n	801e92e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e9f4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801e9f6:	e7c4      	b.n	801e982 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e9f8:	2a32      	cmp	r2, #50	; 0x32
 801e9fa:	d02a      	beq.n	801ea52 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801e9fc:	d301      	bcc.n	801ea02 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801e9fe:	2a33      	cmp	r2, #51	; 0x33
 801ea00:	d195      	bne.n	801e92e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ea02:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801ea04:	e7bd      	b.n	801e982 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ea06:	781b      	ldrb	r3, [r3, #0]
 801ea08:	2b01      	cmp	r3, #1
 801ea0a:	d007      	beq.n	801ea1c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801ea0c:	d3f2      	bcc.n	801e9f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801ea0e:	2b02      	cmp	r3, #2
 801ea10:	d18d      	bne.n	801e92e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ea12:	4b11      	ldr	r3, [pc, #68]	; (801ea58 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801ea14:	f240 31e1 	movw	r1, #993	; 0x3e1
 801ea18:	4a10      	ldr	r2, [pc, #64]	; (801ea5c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801ea1a:	e7ae      	b.n	801e97a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801ea1c:	6940      	ldr	r0, [r0, #20]
 801ea1e:	e7b0      	b.n	801e982 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ea20:	684b      	ldr	r3, [r1, #4]
 801ea22:	781b      	ldrb	r3, [r3, #0]
 801ea24:	2b01      	cmp	r3, #1
 801ea26:	d008      	beq.n	801ea3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801ea28:	d30d      	bcc.n	801ea46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801ea2a:	2b02      	cmp	r3, #2
 801ea2c:	f47f af7f 	bne.w	801e92e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ea30:	4b09      	ldr	r3, [pc, #36]	; (801ea58 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801ea32:	f240 31ed 	movw	r1, #1005	; 0x3ed
 801ea36:	4a09      	ldr	r2, [pc, #36]	; (801ea5c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801ea38:	e79f      	b.n	801e97a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801ea3a:	68c0      	ldr	r0, [r0, #12]
 801ea3c:	e7a1      	b.n	801e982 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ea3e:	781b      	ldrb	r3, [r3, #0]
 801ea40:	2b00      	cmp	r3, #0
 801ea42:	f47f af74 	bne.w	801e92e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ea46:	69c0      	ldr	r0, [r0, #28]
 801ea48:	e79b      	b.n	801e982 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ea4a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801ea4c:	e799      	b.n	801e982 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ea4e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801ea50:	e797      	b.n	801e982 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ea52:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801ea54:	e795      	b.n	801e982 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ea56:	bf00      	nop
 801ea58:	0802b0b3 	.word	0x0802b0b3
 801ea5c:	0802b867 	.word	0x0802b867
 801ea60:	0802b0ff 	.word	0x0802b0ff

0801ea64 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801ea64:	b508      	push	{r3, lr}
 801ea66:	4b06      	ldr	r3, [pc, #24]	; (801ea80 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801ea68:	8818      	ldrh	r0, [r3, #0]
 801ea6a:	b928      	cbnz	r0, 801ea78 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801ea6c:	4b05      	ldr	r3, [pc, #20]	; (801ea84 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801ea6e:	21d7      	movs	r1, #215	; 0xd7
 801ea70:	4a05      	ldr	r2, [pc, #20]	; (801ea88 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801ea72:	4806      	ldr	r0, [pc, #24]	; (801ea8c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801ea74:	f007 fec2 	bl	80267fc <__assert_func>
 801ea78:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ea7c:	b280      	uxth	r0, r0
 801ea7e:	bd08      	pop	{r3, pc}
 801ea80:	2000c686 	.word	0x2000c686
 801ea84:	0802b34e 	.word	0x0802b34e
 801ea88:	0802b82c 	.word	0x0802b82c
 801ea8c:	0802b390 	.word	0x0802b390

0801ea90 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801ea90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea94:	4616      	mov	r6, r2
 801ea96:	b087      	sub	sp, #28
 801ea98:	461f      	mov	r7, r3
 801ea9a:	b33b      	cbz	r3, 801eaec <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801ea9c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801eaa0:	b323      	cbz	r3, 801eaec <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801eaa2:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801eaa6:	b30b      	cbz	r3, 801eaec <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801eaa8:	6808      	ldr	r0, [r1, #0]
 801eaaa:	ab04      	add	r3, sp, #16
 801eaac:	6849      	ldr	r1, [r1, #4]
 801eaae:	4c5a      	ldr	r4, [pc, #360]	; (801ec18 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801eab0:	c303      	stmia	r3!, {r0, r1}
 801eab2:	a804      	add	r0, sp, #16
 801eab4:	f7fb fd6e 	bl	801a594 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801eab8:	6820      	ldr	r0, [r4, #0]
 801eaba:	6803      	ldr	r3, [r0, #0]
 801eabc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801eabe:	4798      	blx	r3
 801eac0:	2fff      	cmp	r7, #255	; 0xff
 801eac2:	4623      	mov	r3, r4
 801eac4:	d015      	beq.n	801eaf2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801eac6:	f010 0f08 	tst.w	r0, #8
 801eaca:	d015      	beq.n	801eaf8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 801eacc:	6818      	ldr	r0, [r3, #0]
 801eace:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801ead2:	6801      	ldr	r1, [r0, #0]
 801ead4:	9401      	str	r4, [sp, #4]
 801ead6:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801eada:	9702      	str	r7, [sp, #8]
 801eadc:	9400      	str	r4, [sp, #0]
 801eade:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801eae2:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 801eae4:	4631      	mov	r1, r6
 801eae6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801eaea:	47a0      	blx	r4
 801eaec:	b007      	add	sp, #28
 801eaee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eaf2:	f010 0f02 	tst.w	r0, #2
 801eaf6:	e7e8      	b.n	801eaca <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3a>
 801eaf8:	6818      	ldr	r0, [r3, #0]
 801eafa:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801eafe:	6803      	ldr	r3, [r0, #0]
 801eb00:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801eb04:	6a1b      	ldr	r3, [r3, #32]
 801eb06:	4798      	blx	r3
 801eb08:	4944      	ldr	r1, [pc, #272]	; (801ec1c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801eb0a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801eb0e:	2fff      	cmp	r7, #255	; 0xff
 801eb10:	f8b1 c000 	ldrh.w	ip, [r1]
 801eb14:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 801eb18:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801eb1c:	4688      	mov	r8, r1
 801eb1e:	fb0c 2303 	mla	r3, ip, r3, r2
 801eb22:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 801eb26:	b2f2      	uxtb	r2, r6
 801eb28:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 801eb2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eb30:	4418      	add	r0, r3
 801eb32:	d112      	bne.n	801eb5a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xca>
 801eb34:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801eb38:	2100      	movs	r1, #0
 801eb3a:	42a9      	cmp	r1, r5
 801eb3c:	da66      	bge.n	801ec0c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801eb3e:	4603      	mov	r3, r0
 801eb40:	2700      	movs	r7, #0
 801eb42:	42a7      	cmp	r7, r4
 801eb44:	f103 0303 	add.w	r3, r3, #3
 801eb48:	da57      	bge.n	801ebfa <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16a>
 801eb4a:	f803 2c03 	strb.w	r2, [r3, #-3]
 801eb4e:	3701      	adds	r7, #1
 801eb50:	f803 ec02 	strb.w	lr, [r3, #-2]
 801eb54:	f803 cc01 	strb.w	ip, [r3, #-1]
 801eb58:	e7f3      	b.n	801eb42 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb2>
 801eb5a:	b2bb      	uxth	r3, r7
 801eb5c:	f04f 0800 	mov.w	r8, #0
 801eb60:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801eb64:	fb0c fc03 	mul.w	ip, ip, r3
 801eb68:	fb0e fe03 	mul.w	lr, lr, r3
 801eb6c:	435a      	muls	r2, r3
 801eb6e:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 801eb72:	460f      	mov	r7, r1
 801eb74:	b29b      	uxth	r3, r3
 801eb76:	45a8      	cmp	r8, r5
 801eb78:	da48      	bge.n	801ec0c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801eb7a:	4601      	mov	r1, r0
 801eb7c:	f04f 0a00 	mov.w	sl, #0
 801eb80:	45a2      	cmp	sl, r4
 801eb82:	f101 0103 	add.w	r1, r1, #3
 801eb86:	da2f      	bge.n	801ebe8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x158>
 801eb88:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 801eb8c:	f10a 0a01 	add.w	sl, sl, #1
 801eb90:	fb19 f903 	smulbb	r9, r9, r3
 801eb94:	4491      	add	r9, r2
 801eb96:	fa1f f989 	uxth.w	r9, r9
 801eb9a:	f109 0b01 	add.w	fp, r9, #1
 801eb9e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801eba2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801eba6:	f801 9c03 	strb.w	r9, [r1, #-3]
 801ebaa:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 801ebae:	fb19 f903 	smulbb	r9, r9, r3
 801ebb2:	44f1      	add	r9, lr
 801ebb4:	fa1f f989 	uxth.w	r9, r9
 801ebb8:	f109 0b01 	add.w	fp, r9, #1
 801ebbc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ebc0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ebc4:	f801 9c02 	strb.w	r9, [r1, #-2]
 801ebc8:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 801ebcc:	fb19 f903 	smulbb	r9, r9, r3
 801ebd0:	44e1      	add	r9, ip
 801ebd2:	fa1f f989 	uxth.w	r9, r9
 801ebd6:	f109 0b01 	add.w	fp, r9, #1
 801ebda:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ebde:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ebe2:	f801 9c01 	strb.w	r9, [r1, #-1]
 801ebe6:	e7cb      	b.n	801eb80 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf0>
 801ebe8:	8839      	ldrh	r1, [r7, #0]
 801ebea:	f108 0801 	add.w	r8, r8, #1
 801ebee:	1b09      	subs	r1, r1, r4
 801ebf0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ebf4:	4431      	add	r1, r6
 801ebf6:	4408      	add	r0, r1
 801ebf8:	e7bd      	b.n	801eb76 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe6>
 801ebfa:	f8b8 3000 	ldrh.w	r3, [r8]
 801ebfe:	3101      	adds	r1, #1
 801ec00:	1b1b      	subs	r3, r3, r4
 801ec02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ec06:	4433      	add	r3, r6
 801ec08:	4418      	add	r0, r3
 801ec0a:	e796      	b.n	801eb3a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 801ec0c:	4b02      	ldr	r3, [pc, #8]	; (801ec18 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801ec0e:	6818      	ldr	r0, [r3, #0]
 801ec10:	6803      	ldr	r3, [r0, #0]
 801ec12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ec14:	4798      	blx	r3
 801ec16:	e769      	b.n	801eaec <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801ec18:	2000c68c 	.word	0x2000c68c
 801ec1c:	2000c686 	.word	0x2000c686

0801ec20 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801ec20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec24:	b08d      	sub	sp, #52	; 0x34
 801ec26:	460c      	mov	r4, r1
 801ec28:	4617      	mov	r7, r2
 801ec2a:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 801ec2e:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 801ec32:	2e00      	cmp	r6, #0
 801ec34:	d04a      	beq.n	801eccc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801ec36:	6810      	ldr	r0, [r2, #0]
 801ec38:	ad08      	add	r5, sp, #32
 801ec3a:	6851      	ldr	r1, [r2, #4]
 801ec3c:	c503      	stmia	r5!, {r0, r1}
 801ec3e:	6818      	ldr	r0, [r3, #0]
 801ec40:	ad0a      	add	r5, sp, #40	; 0x28
 801ec42:	6859      	ldr	r1, [r3, #4]
 801ec44:	c503      	stmia	r5!, {r0, r1}
 801ec46:	a808      	add	r0, sp, #32
 801ec48:	f7fb fca4 	bl	801a594 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ec4c:	4639      	mov	r1, r7
 801ec4e:	a80a      	add	r0, sp, #40	; 0x28
 801ec50:	4f59      	ldr	r7, [pc, #356]	; (801edb8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 801ec52:	f7fb fc87 	bl	801a564 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ec56:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801ec5a:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801ec5e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801ec62:	6838      	ldr	r0, [r7, #0]
 801ec64:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ec68:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 801ec6c:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 801ec70:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ec74:	440c      	add	r4, r1
 801ec76:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801ec7a:	440a      	add	r2, r1
 801ec7c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801ec80:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801ec84:	4413      	add	r3, r2
 801ec86:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801ec8a:	6803      	ldr	r3, [r0, #0]
 801ec8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ec8e:	4798      	blx	r3
 801ec90:	2eff      	cmp	r6, #255	; 0xff
 801ec92:	f000 8089 	beq.w	801eda8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 801ec96:	0743      	lsls	r3, r0, #29
 801ec98:	d405      	bmi.n	801eca6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 801ec9a:	f1b9 0f00 	cmp.w	r9, #0
 801ec9e:	d018      	beq.n	801ecd2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801eca0:	f010 0f10 	tst.w	r0, #16
 801eca4:	d015      	beq.n	801ecd2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801eca6:	6838      	ldr	r0, [r7, #0]
 801eca8:	b2ad      	uxth	r5, r5
 801ecaa:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801ecae:	6801      	ldr	r1, [r0, #0]
 801ecb0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801ecb4:	9500      	str	r5, [sp, #0]
 801ecb6:	e9cd 6903 	strd	r6, r9, [sp, #12]
 801ecba:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801ecbe:	9602      	str	r6, [sp, #8]
 801ecc0:	fa1f f688 	uxth.w	r6, r8
 801ecc4:	9601      	str	r6, [sp, #4]
 801ecc6:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 801ecc8:	4621      	mov	r1, r4
 801ecca:	47a8      	blx	r5
 801eccc:	b00d      	add	sp, #52	; 0x34
 801ecce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ecd2:	6838      	ldr	r0, [r7, #0]
 801ecd4:	6803      	ldr	r3, [r0, #0]
 801ecd6:	6a1b      	ldr	r3, [r3, #32]
 801ecd8:	4798      	blx	r3
 801ecda:	4a38      	ldr	r2, [pc, #224]	; (801edbc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 801ecdc:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801ece0:	2eff      	cmp	r6, #255	; 0xff
 801ece2:	8813      	ldrh	r3, [r2, #0]
 801ece4:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 801ece8:	fb0c 1303 	mla	r3, ip, r3, r1
 801ecec:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801ecf0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ecf4:	4418      	add	r0, r3
 801ecf6:	d032      	beq.n	801ed5e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801ecf8:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 801ecfc:	f04f 0c00 	mov.w	ip, #0
 801ed00:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 801ed04:	9306      	str	r3, [sp, #24]
 801ed06:	45c4      	cmp	ip, r8
 801ed08:	da49      	bge.n	801ed9e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801ed0a:	4686      	mov	lr, r0
 801ed0c:	46a1      	mov	r9, r4
 801ed0e:	eba9 0304 	sub.w	r3, r9, r4
 801ed12:	428b      	cmp	r3, r1
 801ed14:	da13      	bge.n	801ed3e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 801ed16:	f819 3b01 	ldrb.w	r3, [r9], #1
 801ed1a:	f89e b000 	ldrb.w	fp, [lr]
 801ed1e:	9307      	str	r3, [sp, #28]
 801ed20:	9b06      	ldr	r3, [sp, #24]
 801ed22:	fb1b fb03 	smulbb	fp, fp, r3
 801ed26:	9b07      	ldr	r3, [sp, #28]
 801ed28:	fb03 b306 	mla	r3, r3, r6, fp
 801ed2c:	b29b      	uxth	r3, r3
 801ed2e:	f103 0b01 	add.w	fp, r3, #1
 801ed32:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 801ed36:	121b      	asrs	r3, r3, #8
 801ed38:	f80e 3b01 	strb.w	r3, [lr], #1
 801ed3c:	e7e7      	b.n	801ed0e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 801ed3e:	8813      	ldrh	r3, [r2, #0]
 801ed40:	f10c 0c01 	add.w	ip, ip, #1
 801ed44:	1b5b      	subs	r3, r3, r5
 801ed46:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ed4a:	4453      	add	r3, sl
 801ed4c:	4418      	add	r0, r3
 801ed4e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801ed52:	1b5b      	subs	r3, r3, r5
 801ed54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ed58:	4453      	add	r3, sl
 801ed5a:	441c      	add	r4, r3
 801ed5c:	e7d3      	b.n	801ed06 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 801ed5e:	2600      	movs	r6, #0
 801ed60:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 801ed64:	4546      	cmp	r6, r8
 801ed66:	da1a      	bge.n	801ed9e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801ed68:	f100 3eff 	add.w	lr, r0, #4294967295
 801ed6c:	4623      	mov	r3, r4
 801ed6e:	eba3 0904 	sub.w	r9, r3, r4
 801ed72:	4589      	cmp	r9, r1
 801ed74:	da04      	bge.n	801ed80 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 801ed76:	f813 9b01 	ldrb.w	r9, [r3], #1
 801ed7a:	f80e 9f01 	strb.w	r9, [lr, #1]!
 801ed7e:	e7f6      	b.n	801ed6e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 801ed80:	8813      	ldrh	r3, [r2, #0]
 801ed82:	3601      	adds	r6, #1
 801ed84:	1b5b      	subs	r3, r3, r5
 801ed86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ed8a:	4463      	add	r3, ip
 801ed8c:	4418      	add	r0, r3
 801ed8e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801ed92:	1b5b      	subs	r3, r3, r5
 801ed94:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ed98:	4463      	add	r3, ip
 801ed9a:	441c      	add	r4, r3
 801ed9c:	e7e2      	b.n	801ed64 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 801ed9e:	6838      	ldr	r0, [r7, #0]
 801eda0:	6803      	ldr	r3, [r0, #0]
 801eda2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eda4:	4798      	blx	r3
 801eda6:	e791      	b.n	801eccc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801eda8:	f1b9 0f00 	cmp.w	r9, #0
 801edac:	f47f af78 	bne.w	801eca0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 801edb0:	f010 0f01 	tst.w	r0, #1
 801edb4:	e776      	b.n	801eca4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 801edb6:	bf00      	nop
 801edb8:	2000c68c 	.word	0x2000c68c
 801edbc:	2000c686 	.word	0x2000c686

0801edc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801edc0:	b510      	push	{r4, lr}
 801edc2:	4604      	mov	r4, r0
 801edc4:	2104      	movs	r1, #4
 801edc6:	f007 fceb 	bl	80267a0 <_ZdlPvj>
 801edca:	4620      	mov	r0, r4
 801edcc:	bd10      	pop	{r4, pc}

0801edce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801edce:	b510      	push	{r4, lr}
 801edd0:	4604      	mov	r4, r0
 801edd2:	2104      	movs	r1, #4
 801edd4:	f007 fce4 	bl	80267a0 <_ZdlPvj>
 801edd8:	4620      	mov	r0, r4
 801edda:	bd10      	pop	{r4, pc}

0801eddc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801eddc:	b510      	push	{r4, lr}
 801edde:	4604      	mov	r4, r0
 801ede0:	2104      	movs	r1, #4
 801ede2:	f007 fcdd 	bl	80267a0 <_ZdlPvj>
 801ede6:	4620      	mov	r0, r4
 801ede8:	bd10      	pop	{r4, pc}

0801edea <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801edea:	b510      	push	{r4, lr}
 801edec:	4604      	mov	r4, r0
 801edee:	2104      	movs	r1, #4
 801edf0:	f007 fcd6 	bl	80267a0 <_ZdlPvj>
 801edf4:	4620      	mov	r0, r4
 801edf6:	bd10      	pop	{r4, pc}

0801edf8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801edf8:	b510      	push	{r4, lr}
 801edfa:	4604      	mov	r4, r0
 801edfc:	2104      	movs	r1, #4
 801edfe:	f007 fccf 	bl	80267a0 <_ZdlPvj>
 801ee02:	4620      	mov	r0, r4
 801ee04:	bd10      	pop	{r4, pc}

0801ee06 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801ee06:	b510      	push	{r4, lr}
 801ee08:	4604      	mov	r4, r0
 801ee0a:	2104      	movs	r1, #4
 801ee0c:	f007 fcc8 	bl	80267a0 <_ZdlPvj>
 801ee10:	4620      	mov	r0, r4
 801ee12:	bd10      	pop	{r4, pc}

0801ee14 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801ee14:	b510      	push	{r4, lr}
 801ee16:	4604      	mov	r4, r0
 801ee18:	2104      	movs	r1, #4
 801ee1a:	f007 fcc1 	bl	80267a0 <_ZdlPvj>
 801ee1e:	4620      	mov	r0, r4
 801ee20:	bd10      	pop	{r4, pc}

0801ee22 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801ee22:	b510      	push	{r4, lr}
 801ee24:	4604      	mov	r4, r0
 801ee26:	2104      	movs	r1, #4
 801ee28:	f007 fcba 	bl	80267a0 <_ZdlPvj>
 801ee2c:	4620      	mov	r0, r4
 801ee2e:	bd10      	pop	{r4, pc}

0801ee30 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801ee30:	b510      	push	{r4, lr}
 801ee32:	4604      	mov	r4, r0
 801ee34:	2104      	movs	r1, #4
 801ee36:	f007 fcb3 	bl	80267a0 <_ZdlPvj>
 801ee3a:	4620      	mov	r0, r4
 801ee3c:	bd10      	pop	{r4, pc}

0801ee3e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801ee3e:	b510      	push	{r4, lr}
 801ee40:	4604      	mov	r4, r0
 801ee42:	2104      	movs	r1, #4
 801ee44:	f007 fcac 	bl	80267a0 <_ZdlPvj>
 801ee48:	4620      	mov	r0, r4
 801ee4a:	bd10      	pop	{r4, pc}

0801ee4c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801ee4c:	b510      	push	{r4, lr}
 801ee4e:	4604      	mov	r4, r0
 801ee50:	2104      	movs	r1, #4
 801ee52:	f007 fca5 	bl	80267a0 <_ZdlPvj>
 801ee56:	4620      	mov	r0, r4
 801ee58:	bd10      	pop	{r4, pc}

0801ee5a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801ee5a:	b510      	push	{r4, lr}
 801ee5c:	4604      	mov	r4, r0
 801ee5e:	2104      	movs	r1, #4
 801ee60:	f007 fc9e 	bl	80267a0 <_ZdlPvj>
 801ee64:	4620      	mov	r0, r4
 801ee66:	bd10      	pop	{r4, pc}

0801ee68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801ee68:	b510      	push	{r4, lr}
 801ee6a:	4604      	mov	r4, r0
 801ee6c:	2104      	movs	r1, #4
 801ee6e:	f007 fc97 	bl	80267a0 <_ZdlPvj>
 801ee72:	4620      	mov	r0, r4
 801ee74:	bd10      	pop	{r4, pc}

0801ee76 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801ee76:	b510      	push	{r4, lr}
 801ee78:	4604      	mov	r4, r0
 801ee7a:	2104      	movs	r1, #4
 801ee7c:	f007 fc90 	bl	80267a0 <_ZdlPvj>
 801ee80:	4620      	mov	r0, r4
 801ee82:	bd10      	pop	{r4, pc}

0801ee84 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801ee84:	b510      	push	{r4, lr}
 801ee86:	4604      	mov	r4, r0
 801ee88:	2104      	movs	r1, #4
 801ee8a:	f007 fc89 	bl	80267a0 <_ZdlPvj>
 801ee8e:	4620      	mov	r0, r4
 801ee90:	bd10      	pop	{r4, pc}

0801ee92 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801ee92:	b510      	push	{r4, lr}
 801ee94:	4604      	mov	r4, r0
 801ee96:	2104      	movs	r1, #4
 801ee98:	f007 fc82 	bl	80267a0 <_ZdlPvj>
 801ee9c:	4620      	mov	r0, r4
 801ee9e:	bd10      	pop	{r4, pc}

0801eea0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801eea0:	b510      	push	{r4, lr}
 801eea2:	4604      	mov	r4, r0
 801eea4:	2104      	movs	r1, #4
 801eea6:	f007 fc7b 	bl	80267a0 <_ZdlPvj>
 801eeaa:	4620      	mov	r0, r4
 801eeac:	bd10      	pop	{r4, pc}

0801eeae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801eeae:	b510      	push	{r4, lr}
 801eeb0:	4604      	mov	r4, r0
 801eeb2:	2104      	movs	r1, #4
 801eeb4:	f007 fc74 	bl	80267a0 <_ZdlPvj>
 801eeb8:	4620      	mov	r0, r4
 801eeba:	bd10      	pop	{r4, pc}

0801eebc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801eebc:	b510      	push	{r4, lr}
 801eebe:	4604      	mov	r4, r0
 801eec0:	2104      	movs	r1, #4
 801eec2:	f007 fc6d 	bl	80267a0 <_ZdlPvj>
 801eec6:	4620      	mov	r0, r4
 801eec8:	bd10      	pop	{r4, pc}

0801eeca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801eeca:	b510      	push	{r4, lr}
 801eecc:	4604      	mov	r4, r0
 801eece:	2104      	movs	r1, #4
 801eed0:	f007 fc66 	bl	80267a0 <_ZdlPvj>
 801eed4:	4620      	mov	r0, r4
 801eed6:	bd10      	pop	{r4, pc}

0801eed8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801eed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eedc:	4d9e      	ldr	r5, [pc, #632]	; (801f158 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801eede:	4690      	mov	r8, r2
 801eee0:	b08f      	sub	sp, #60	; 0x3c
 801eee2:	4604      	mov	r4, r0
 801eee4:	682a      	ldr	r2, [r5, #0]
 801eee6:	4689      	mov	r9, r1
 801eee8:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801eeec:	2a02      	cmp	r2, #2
 801eeee:	d106      	bne.n	801eefe <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801eef0:	4b9a      	ldr	r3, [pc, #616]	; (801f15c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801eef2:	f44f 71cc 	mov.w	r1, #408	; 0x198
 801eef6:	4a9a      	ldr	r2, [pc, #616]	; (801f160 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801eef8:	489a      	ldr	r0, [pc, #616]	; (801f164 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 801eefa:	f007 fc7f 	bl	80267fc <__assert_func>
 801eefe:	ae0e      	add	r6, sp, #56	; 0x38
 801ef00:	f826 3d24 	strh.w	r3, [r6, #-36]!
 801ef04:	4630      	mov	r0, r6
 801ef06:	f7fe f8b3 	bl	801d070 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801ef0a:	6823      	ldr	r3, [r4, #0]
 801ef0c:	4607      	mov	r7, r0
 801ef0e:	4620      	mov	r0, r4
 801ef10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ef12:	4798      	blx	r3
 801ef14:	4287      	cmp	r7, r0
 801ef16:	d004      	beq.n	801ef22 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801ef18:	4b93      	ldr	r3, [pc, #588]	; (801f168 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801ef1a:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 801ef1e:	4a90      	ldr	r2, [pc, #576]	; (801f160 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801ef20:	e7ea      	b.n	801eef8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801ef22:	4630      	mov	r0, r6
 801ef24:	f7fe f820 	bl	801cf68 <_ZNK8touchgfx6Bitmap7getDataEv>
 801ef28:	4607      	mov	r7, r0
 801ef2a:	b920      	cbnz	r0, 801ef36 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801ef2c:	4b8f      	ldr	r3, [pc, #572]	; (801f16c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801ef2e:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 801ef32:	4a8b      	ldr	r2, [pc, #556]	; (801f160 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801ef34:	e7e0      	b.n	801eef8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801ef36:	f8d8 0000 	ldr.w	r0, [r8]
 801ef3a:	ab06      	add	r3, sp, #24
 801ef3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801ef40:	f9b8 a000 	ldrsh.w	sl, [r8]
 801ef44:	c303      	stmia	r3!, {r0, r1}
 801ef46:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801ef4a:	ab08      	add	r3, sp, #32
 801ef4c:	f8d9 0000 	ldr.w	r0, [r9]
 801ef50:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801ef54:	c303      	stmia	r3!, {r0, r1}
 801ef56:	4630      	mov	r0, r6
 801ef58:	f7fd fefe 	bl	801cd58 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801ef5c:	4680      	mov	r8, r0
 801ef5e:	4630      	mov	r0, r6
 801ef60:	4e83      	ldr	r6, [pc, #524]	; (801f170 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 801ef62:	f7fd ff33 	bl	801cdcc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801ef66:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801ef6a:	f10d 0920 	add.w	r9, sp, #32
 801ef6e:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801ef72:	a806      	add	r0, sp, #24
 801ef74:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801ef78:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801ef7c:	f7fb fb0a 	bl	801a594 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ef80:	4648      	mov	r0, r9
 801ef82:	f7fb fb07 	bl	801a594 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ef86:	a80a      	add	r0, sp, #40	; 0x28
 801ef88:	f7fb fb04 	bl	801a594 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ef8c:	4b79      	ldr	r3, [pc, #484]	; (801f174 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801ef8e:	2100      	movs	r1, #0
 801ef90:	f9b6 2000 	ldrsh.w	r2, [r6]
 801ef94:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ef98:	4648      	mov	r0, r9
 801ef9a:	910c      	str	r1, [sp, #48]	; 0x30
 801ef9c:	a90c      	add	r1, sp, #48	; 0x30
 801ef9e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801efa2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801efa6:	f7f8 fac9 	bl	801753c <_ZN8touchgfx4RectaNERKS0_>
 801efaa:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801efae:	9602      	str	r6, [sp, #8]
 801efb0:	f1bc 0f00 	cmp.w	ip, #0
 801efb4:	f000 80a4 	beq.w	801f100 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801efb8:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801efbc:	2e00      	cmp	r6, #0
 801efbe:	f000 809f 	beq.w	801f100 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801efc2:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801efc6:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801efca:	4288      	cmp	r0, r1
 801efcc:	db36      	blt.n	801f03c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801efce:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801efd2:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801efd6:	429a      	cmp	r2, r3
 801efd8:	db30      	blt.n	801f03c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801efda:	4460      	add	r0, ip
 801efdc:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801efe0:	4461      	add	r1, ip
 801efe2:	b200      	sxth	r0, r0
 801efe4:	b209      	sxth	r1, r1
 801efe6:	4288      	cmp	r0, r1
 801efe8:	dc28      	bgt.n	801f03c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801efea:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801efee:	4432      	add	r2, r6
 801eff0:	440b      	add	r3, r1
 801eff2:	b212      	sxth	r2, r2
 801eff4:	b21b      	sxth	r3, r3
 801eff6:	429a      	cmp	r2, r3
 801eff8:	dc20      	bgt.n	801f03c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801effa:	6823      	ldr	r3, [r4, #0]
 801effc:	4620      	mov	r0, r4
 801effe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f000:	4798      	blx	r3
 801f002:	4682      	mov	sl, r0
 801f004:	6828      	ldr	r0, [r5, #0]
 801f006:	6803      	ldr	r3, [r0, #0]
 801f008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f00a:	4798      	blx	r3
 801f00c:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801f010:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801f014:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801f018:	9303      	str	r3, [sp, #12]
 801f01a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801f01e:	1a9b      	subs	r3, r3, r2
 801f020:	b29b      	uxth	r3, r3
 801f022:	b21c      	sxth	r4, r3
 801f024:	2c00      	cmp	r4, #0
 801f026:	dc0e      	bgt.n	801f046 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 801f028:	b134      	cbz	r4, 801f038 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 801f02a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801f02e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801f032:	4413      	add	r3, r2
 801f034:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801f038:	463c      	mov	r4, r7
 801f03a:	e00b      	b.n	801f054 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 801f03c:	4b4e      	ldr	r3, [pc, #312]	; (801f178 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 801f03e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801f042:	4a47      	ldr	r2, [pc, #284]	; (801f160 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801f044:	e758      	b.n	801eef8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801f046:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f04a:	ebab 0303 	sub.w	r3, fp, r3
 801f04e:	443c      	add	r4, r7
 801f050:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801f054:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801f058:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801f05c:	1a9b      	subs	r3, r3, r2
 801f05e:	b29b      	uxth	r3, r3
 801f060:	b219      	sxth	r1, r3
 801f062:	2900      	cmp	r1, #0
 801f064:	dd50      	ble.n	801f108 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 801f066:	9a03      	ldr	r2, [sp, #12]
 801f068:	fb02 4401 	mla	r4, r2, r1, r4
 801f06c:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801f070:	1ad3      	subs	r3, r2, r3
 801f072:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801f076:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801f07a:	f1bc 0f00 	cmp.w	ip, #0
 801f07e:	dd3f      	ble.n	801f100 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801f080:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801f084:	2e00      	cmp	r6, #0
 801f086:	dd3b      	ble.n	801f100 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801f088:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801f08c:	2203      	movs	r2, #3
 801f08e:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801f092:	fb0a f801 	mul.w	r8, sl, r1
 801f096:	fb13 8802 	smlabb	r8, r3, r2, r8
 801f09a:	9a02      	ldr	r2, [sp, #8]
 801f09c:	4480      	add	r8, r0
 801f09e:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801f0a2:	8812      	ldrh	r2, [r2, #0]
 801f0a4:	4584      	cmp	ip, r0
 801f0a6:	eba2 0303 	sub.w	r3, r2, r3
 801f0aa:	bfa8      	it	ge
 801f0ac:	4684      	movge	ip, r0
 801f0ae:	459c      	cmp	ip, r3
 801f0b0:	bfa8      	it	ge
 801f0b2:	469c      	movge	ip, r3
 801f0b4:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801f0b8:	429e      	cmp	r6, r3
 801f0ba:	bfa8      	it	ge
 801f0bc:	461e      	movge	r6, r3
 801f0be:	4b2d      	ldr	r3, [pc, #180]	; (801f174 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801f0c0:	881b      	ldrh	r3, [r3, #0]
 801f0c2:	1a59      	subs	r1, r3, r1
 801f0c4:	4633      	mov	r3, r6
 801f0c6:	428e      	cmp	r6, r1
 801f0c8:	bfa8      	it	ge
 801f0ca:	460b      	movge	r3, r1
 801f0cc:	4562      	cmp	r2, ip
 801f0ce:	9302      	str	r3, [sp, #8]
 801f0d0:	d12d      	bne.n	801f12e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801f0d2:	455a      	cmp	r2, fp
 801f0d4:	d12b      	bne.n	801f12e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801f0d6:	6828      	ldr	r0, [r5, #0]
 801f0d8:	6803      	ldr	r3, [r0, #0]
 801f0da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f0dc:	4798      	blx	r3
 801f0de:	07c3      	lsls	r3, r0, #31
 801f0e0:	d51b      	bpl.n	801f11a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 801f0e2:	6828      	ldr	r0, [r5, #0]
 801f0e4:	9b02      	ldr	r3, [sp, #8]
 801f0e6:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801f0ea:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801f0ee:	6803      	ldr	r3, [r0, #0]
 801f0f0:	f8cd b000 	str.w	fp, [sp]
 801f0f4:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801f0f6:	4623      	mov	r3, r4
 801f0f8:	e899 0006 	ldmia.w	r9, {r1, r2}
 801f0fc:	47a8      	blx	r5
 801f0fe:	4607      	mov	r7, r0
 801f100:	4638      	mov	r0, r7
 801f102:	b00f      	add	sp, #60	; 0x3c
 801f104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f108:	bf1f      	itttt	ne
 801f10a:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801f10e:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801f112:	189b      	addne	r3, r3, r2
 801f114:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801f118:	e7ad      	b.n	801f076 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 801f11a:	6828      	ldr	r0, [r5, #0]
 801f11c:	4642      	mov	r2, r8
 801f11e:	4621      	mov	r1, r4
 801f120:	6803      	ldr	r3, [r0, #0]
 801f122:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801f124:	9b02      	ldr	r3, [sp, #8]
 801f126:	fb03 f30a 	mul.w	r3, r3, sl
 801f12a:	47a8      	blx	r5
 801f12c:	e7e8      	b.n	801f100 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801f12e:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 801f132:	f04f 0900 	mov.w	r9, #0
 801f136:	9b02      	ldr	r3, [sp, #8]
 801f138:	454b      	cmp	r3, r9
 801f13a:	dde1      	ble.n	801f100 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801f13c:	6828      	ldr	r0, [r5, #0]
 801f13e:	4642      	mov	r2, r8
 801f140:	4621      	mov	r1, r4
 801f142:	44d0      	add	r8, sl
 801f144:	6803      	ldr	r3, [r0, #0]
 801f146:	f109 0901 	add.w	r9, r9, #1
 801f14a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f14c:	461e      	mov	r6, r3
 801f14e:	465b      	mov	r3, fp
 801f150:	47b0      	blx	r6
 801f152:	9b03      	ldr	r3, [sp, #12]
 801f154:	441c      	add	r4, r3
 801f156:	e7ee      	b.n	801f136 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 801f158:	2000c68c 	.word	0x2000c68c
 801f15c:	0802b131 	.word	0x0802b131
 801f160:	0802b911 	.word	0x0802b911
 801f164:	0802b0ff 	.word	0x0802b0ff
 801f168:	0802b1e5 	.word	0x0802b1e5
 801f16c:	0802b23a 	.word	0x0802b23a
 801f170:	2000c686 	.word	0x2000c686
 801f174:	2000c688 	.word	0x2000c688
 801f178:	0802b278 	.word	0x0802b278

0801f17c <_ZN8touchgfx8LCD24bppC1Ev>:
 801f17c:	4a0b      	ldr	r2, [pc, #44]	; (801f1ac <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 801f17e:	6002      	str	r2, [r0, #0]
 801f180:	2200      	movs	r2, #0
 801f182:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801f186:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801f18a:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801f18e:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801f192:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801f196:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801f19a:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801f19e:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801f1a2:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801f1a6:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801f1aa:	4770      	bx	lr
 801f1ac:	0802b55c 	.word	0x0802b55c

0801f1b0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801f1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1b4:	b093      	sub	sp, #76	; 0x4c
 801f1b6:	880c      	ldrh	r4, [r1, #0]
 801f1b8:	4605      	mov	r5, r0
 801f1ba:	460f      	mov	r7, r1
 801f1bc:	4691      	mov	r9, r2
 801f1be:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 801f1c2:	b12c      	cbz	r4, 801f1d0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801f1c4:	4b71      	ldr	r3, [pc, #452]	; (801f38c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801f1c6:	2167      	movs	r1, #103	; 0x67
 801f1c8:	4a71      	ldr	r2, [pc, #452]	; (801f390 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801f1ca:	4872      	ldr	r0, [pc, #456]	; (801f394 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801f1cc:	f007 fb16 	bl	80267fc <__assert_func>
 801f1d0:	6810      	ldr	r0, [r2, #0]
 801f1d2:	ae0e      	add	r6, sp, #56	; 0x38
 801f1d4:	6851      	ldr	r1, [r2, #4]
 801f1d6:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 801f39c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 801f1da:	c603      	stmia	r6!, {r0, r1}
 801f1dc:	6818      	ldr	r0, [r3, #0]
 801f1de:	ae10      	add	r6, sp, #64	; 0x40
 801f1e0:	6859      	ldr	r1, [r3, #4]
 801f1e2:	c603      	stmia	r6!, {r0, r1}
 801f1e4:	a80e      	add	r0, sp, #56	; 0x38
 801f1e6:	f7fb f9d5 	bl	801a594 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f1ea:	4649      	mov	r1, r9
 801f1ec:	a810      	add	r0, sp, #64	; 0x40
 801f1ee:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 801f398 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801f1f2:	f7fb f9b7 	bl	801a564 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f1f6:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801f1fa:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801f1fe:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801f202:	f8d9 0000 	ldr.w	r0, [r9]
 801f206:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f20a:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 801f20e:	440d      	add	r5, r1
 801f210:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801f214:	440a      	add	r2, r1
 801f216:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801f21a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801f21e:	4413      	add	r3, r2
 801f220:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801f224:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 801f228:	930b      	str	r3, [sp, #44]	; 0x2c
 801f22a:	6803      	ldr	r3, [r0, #0]
 801f22c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f230:	4798      	blx	r3
 801f232:	2801      	cmp	r0, #1
 801f234:	d11e      	bne.n	801f274 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 801f236:	220b      	movs	r2, #11
 801f238:	9008      	str	r0, [sp, #32]
 801f23a:	b2b6      	uxth	r6, r6
 801f23c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801f240:	9207      	str	r2, [sp, #28]
 801f242:	4629      	mov	r1, r5
 801f244:	f8ba 2000 	ldrh.w	r2, [sl]
 801f248:	f8cd 8010 	str.w	r8, [sp, #16]
 801f24c:	9601      	str	r6, [sp, #4]
 801f24e:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801f252:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801f256:	9203      	str	r2, [sp, #12]
 801f258:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801f25c:	9202      	str	r2, [sp, #8]
 801f25e:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801f262:	9200      	str	r2, [sp, #0]
 801f264:	463a      	mov	r2, r7
 801f266:	f8d9 0000 	ldr.w	r0, [r9]
 801f26a:	f7f8 fdb5 	bl	8017dd8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801f26e:	b013      	add	sp, #76	; 0x4c
 801f270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f274:	f8d9 0000 	ldr.w	r0, [r9]
 801f278:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 801f27c:	6803      	ldr	r3, [r0, #0]
 801f27e:	6a1b      	ldr	r3, [r3, #32]
 801f280:	4798      	blx	r3
 801f282:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801f286:	f8ba 3000 	ldrh.w	r3, [sl]
 801f28a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801f28e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801f292:	fb01 2303 	mla	r3, r1, r3, r2
 801f296:	4621      	mov	r1, r4
 801f298:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f29c:	4418      	add	r0, r3
 801f29e:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 801f2a2:	930c      	str	r3, [sp, #48]	; 0x30
 801f2a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f2a6:	4299      	cmp	r1, r3
 801f2a8:	da6a      	bge.n	801f380 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801f2aa:	1cc2      	adds	r2, r0, #3
 801f2ac:	46aa      	mov	sl, r5
 801f2ae:	ebaa 0305 	sub.w	r3, sl, r5
 801f2b2:	429e      	cmp	r6, r3
 801f2b4:	dd55      	ble.n	801f362 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 801f2b6:	2404      	movs	r4, #4
 801f2b8:	f81a 3b01 	ldrb.w	r3, [sl], #1
 801f2bc:	fb14 4303 	smlabb	r3, r4, r3, r4
 801f2c0:	eb07 0e03 	add.w	lr, r7, r3
 801f2c4:	f89e 4003 	ldrb.w	r4, [lr, #3]
 801f2c8:	b184      	cbz	r4, 801f2ec <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801f2ca:	2cff      	cmp	r4, #255	; 0xff
 801f2cc:	f817 b003 	ldrb.w	fp, [r7, r3]
 801f2d0:	d10e      	bne.n	801f2f0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801f2d2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f2d6:	d10b      	bne.n	801f2f0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801f2d8:	f802 bc03 	strb.w	fp, [r2, #-3]
 801f2dc:	f89e 3001 	ldrb.w	r3, [lr, #1]
 801f2e0:	f802 3c02 	strb.w	r3, [r2, #-2]
 801f2e4:	f89e 3002 	ldrb.w	r3, [lr, #2]
 801f2e8:	f802 3c01 	strb.w	r3, [r2, #-1]
 801f2ec:	3203      	adds	r2, #3
 801f2ee:	e7de      	b.n	801f2ae <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 801f2f0:	fb08 f404 	mul.w	r4, r8, r4
 801f2f4:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 801f2f8:	1c63      	adds	r3, r4, #1
 801f2fa:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801f2fe:	121b      	asrs	r3, r3, #8
 801f300:	b29c      	uxth	r4, r3
 801f302:	43db      	mvns	r3, r3
 801f304:	fb1b fb04 	smulbb	fp, fp, r4
 801f308:	b2db      	uxtb	r3, r3
 801f30a:	fb0c bc03 	mla	ip, ip, r3, fp
 801f30e:	fa1f fc8c 	uxth.w	ip, ip
 801f312:	f10c 0b01 	add.w	fp, ip, #1
 801f316:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f31a:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 801f31e:	fb1b fb03 	smulbb	fp, fp, r3
 801f322:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f326:	f802 cc03 	strb.w	ip, [r2, #-3]
 801f32a:	f89e c001 	ldrb.w	ip, [lr, #1]
 801f32e:	fb0c bc04 	mla	ip, ip, r4, fp
 801f332:	fa1f fc8c 	uxth.w	ip, ip
 801f336:	f10c 0b01 	add.w	fp, ip, #1
 801f33a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f33e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f342:	f802 cc02 	strb.w	ip, [r2, #-2]
 801f346:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 801f34a:	f89e e002 	ldrb.w	lr, [lr, #2]
 801f34e:	fb1c f303 	smulbb	r3, ip, r3
 801f352:	fb0e 3304 	mla	r3, lr, r4, r3
 801f356:	b29b      	uxth	r3, r3
 801f358:	1c5c      	adds	r4, r3, #1
 801f35a:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801f35e:	121b      	asrs	r3, r3, #8
 801f360:	e7c2      	b.n	801f2e8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801f362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f364:	3101      	adds	r1, #1
 801f366:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f368:	881b      	ldrh	r3, [r3, #0]
 801f36a:	1b9b      	subs	r3, r3, r6
 801f36c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f370:	4413      	add	r3, r2
 801f372:	4418      	add	r0, r3
 801f374:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801f378:	1b9b      	subs	r3, r3, r6
 801f37a:	444b      	add	r3, r9
 801f37c:	441d      	add	r5, r3
 801f37e:	e791      	b.n	801f2a4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801f380:	4b05      	ldr	r3, [pc, #20]	; (801f398 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 801f382:	6818      	ldr	r0, [r3, #0]
 801f384:	6803      	ldr	r3, [r0, #0]
 801f386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f388:	4798      	blx	r3
 801f38a:	e770      	b.n	801f26e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801f38c:	0802b063 	.word	0x0802b063
 801f390:	0802b733 	.word	0x0802b733
 801f394:	0802b0ff 	.word	0x0802b0ff
 801f398:	2000c68c 	.word	0x2000c68c
 801f39c:	2000c686 	.word	0x2000c686

0801f3a0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801f3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f3a4:	4614      	mov	r4, r2
 801f3a6:	880a      	ldrh	r2, [r1, #0]
 801f3a8:	b091      	sub	sp, #68	; 0x44
 801f3aa:	4680      	mov	r8, r0
 801f3ac:	2a01      	cmp	r2, #1
 801f3ae:	460e      	mov	r6, r1
 801f3b0:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801f3b4:	d005      	beq.n	801f3c2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 801f3b6:	4b6d      	ldr	r3, [pc, #436]	; (801f56c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 801f3b8:	21b5      	movs	r1, #181	; 0xb5
 801f3ba:	4a6d      	ldr	r2, [pc, #436]	; (801f570 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 801f3bc:	486d      	ldr	r0, [pc, #436]	; (801f574 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801f3be:	f007 fa1d 	bl	80267fc <__assert_func>
 801f3c2:	6820      	ldr	r0, [r4, #0]
 801f3c4:	ad0c      	add	r5, sp, #48	; 0x30
 801f3c6:	6861      	ldr	r1, [r4, #4]
 801f3c8:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 801f578 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 801f3cc:	c503      	stmia	r5!, {r0, r1}
 801f3ce:	6818      	ldr	r0, [r3, #0]
 801f3d0:	ad0e      	add	r5, sp, #56	; 0x38
 801f3d2:	6859      	ldr	r1, [r3, #4]
 801f3d4:	c503      	stmia	r5!, {r0, r1}
 801f3d6:	a80c      	add	r0, sp, #48	; 0x30
 801f3d8:	f7fb f8dc 	bl	801a594 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f3dc:	4621      	mov	r1, r4
 801f3de:	a80e      	add	r0, sp, #56	; 0x38
 801f3e0:	f7fb f8c0 	bl	801a564 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f3e4:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801f3e8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801f3ec:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801f3f0:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 801f3f4:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f3f8:	eb08 0401 	add.w	r4, r8, r1
 801f3fc:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801f400:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801f57c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 801f404:	440a      	add	r2, r1
 801f406:	f8d8 0000 	ldr.w	r0, [r8]
 801f40a:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801f40e:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801f412:	4413      	add	r3, r2
 801f414:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801f418:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801f41c:	930a      	str	r3, [sp, #40]	; 0x28
 801f41e:	6803      	ldr	r3, [r0, #0]
 801f420:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f424:	4798      	blx	r3
 801f426:	2801      	cmp	r0, #1
 801f428:	d11e      	bne.n	801f468 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 801f42a:	220b      	movs	r2, #11
 801f42c:	9008      	str	r0, [sp, #32]
 801f42e:	b2ad      	uxth	r5, r5
 801f430:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801f434:	9207      	str	r2, [sp, #28]
 801f436:	4621      	mov	r1, r4
 801f438:	f8b9 2000 	ldrh.w	r2, [r9]
 801f43c:	9501      	str	r5, [sp, #4]
 801f43e:	9206      	str	r2, [sp, #24]
 801f440:	2200      	movs	r2, #0
 801f442:	e9cd 7204 	strd	r7, r2, [sp, #16]
 801f446:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801f44a:	9203      	str	r2, [sp, #12]
 801f44c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801f450:	9202      	str	r2, [sp, #8]
 801f452:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801f456:	9200      	str	r2, [sp, #0]
 801f458:	4632      	mov	r2, r6
 801f45a:	f8d8 0000 	ldr.w	r0, [r8]
 801f45e:	f7f8 fcbb 	bl	8017dd8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801f462:	b011      	add	sp, #68	; 0x44
 801f464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f468:	f8d8 0000 	ldr.w	r0, [r8]
 801f46c:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 801f470:	6803      	ldr	r3, [r0, #0]
 801f472:	6a1b      	ldr	r3, [r3, #32]
 801f474:	4798      	blx	r3
 801f476:	f8b9 3000 	ldrh.w	r3, [r9]
 801f47a:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801f47e:	f04f 0e00 	mov.w	lr, #0
 801f482:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801f486:	fa1f f987 	uxth.w	r9, r7
 801f48a:	fb01 2303 	mla	r3, r1, r3, r2
 801f48e:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 801f492:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f496:	b289      	uxth	r1, r1
 801f498:	4418      	add	r0, r3
 801f49a:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801f49e:	930b      	str	r3, [sp, #44]	; 0x2c
 801f4a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f4a2:	459e      	cmp	lr, r3
 801f4a4:	da5c      	bge.n	801f560 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 801f4a6:	1cc3      	adds	r3, r0, #3
 801f4a8:	46a2      	mov	sl, r4
 801f4aa:	ebaa 0204 	sub.w	r2, sl, r4
 801f4ae:	4295      	cmp	r5, r2
 801f4b0:	dd46      	ble.n	801f540 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 801f4b2:	f04f 0c03 	mov.w	ip, #3
 801f4b6:	f04f 0b04 	mov.w	fp, #4
 801f4ba:	f81a 2b01 	ldrb.w	r2, [sl], #1
 801f4be:	2fff      	cmp	r7, #255	; 0xff
 801f4c0:	fb1c b202 	smlabb	r2, ip, r2, fp
 801f4c4:	eb06 0c02 	add.w	ip, r6, r2
 801f4c8:	f816 b002 	ldrb.w	fp, [r6, r2]
 801f4cc:	d02f      	beq.n	801f52e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 801f4ce:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801f4d2:	fb12 f201 	smulbb	r2, r2, r1
 801f4d6:	fb0b 2209 	mla	r2, fp, r9, r2
 801f4da:	b292      	uxth	r2, r2
 801f4dc:	f102 0b01 	add.w	fp, r2, #1
 801f4e0:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801f4e4:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 801f4e8:	fb1b fb01 	smulbb	fp, fp, r1
 801f4ec:	1212      	asrs	r2, r2, #8
 801f4ee:	f803 2c03 	strb.w	r2, [r3, #-3]
 801f4f2:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801f4f6:	fb02 b209 	mla	r2, r2, r9, fp
 801f4fa:	b292      	uxth	r2, r2
 801f4fc:	f102 0b01 	add.w	fp, r2, #1
 801f500:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801f504:	1212      	asrs	r2, r2, #8
 801f506:	f803 2c02 	strb.w	r2, [r3, #-2]
 801f50a:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801f50e:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 801f512:	fb1c fc01 	smulbb	ip, ip, r1
 801f516:	fb02 c209 	mla	r2, r2, r9, ip
 801f51a:	b292      	uxth	r2, r2
 801f51c:	f102 0c01 	add.w	ip, r2, #1
 801f520:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801f524:	1212      	asrs	r2, r2, #8
 801f526:	f803 2c01 	strb.w	r2, [r3, #-1]
 801f52a:	3303      	adds	r3, #3
 801f52c:	e7bd      	b.n	801f4aa <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 801f52e:	f803 bc03 	strb.w	fp, [r3, #-3]
 801f532:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801f536:	f803 2c02 	strb.w	r2, [r3, #-2]
 801f53a:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801f53e:	e7f2      	b.n	801f526 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 801f540:	4b0d      	ldr	r3, [pc, #52]	; (801f578 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801f542:	f10e 0e01 	add.w	lr, lr, #1
 801f546:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f548:	881b      	ldrh	r3, [r3, #0]
 801f54a:	1b5b      	subs	r3, r3, r5
 801f54c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f550:	4413      	add	r3, r2
 801f552:	4418      	add	r0, r3
 801f554:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801f558:	1b5b      	subs	r3, r3, r5
 801f55a:	4443      	add	r3, r8
 801f55c:	441c      	add	r4, r3
 801f55e:	e79f      	b.n	801f4a0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 801f560:	4b06      	ldr	r3, [pc, #24]	; (801f57c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801f562:	6818      	ldr	r0, [r3, #0]
 801f564:	6803      	ldr	r3, [r0, #0]
 801f566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f568:	4798      	blx	r3
 801f56a:	e77a      	b.n	801f462 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 801f56c:	0802af6f 	.word	0x0802af6f
 801f570:	0802b626 	.word	0x0802b626
 801f574:	0802b0ff 	.word	0x0802b0ff
 801f578:	2000c686 	.word	0x2000c686
 801f57c:	2000c68c 	.word	0x2000c68c

0801f580 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801f580:	b570      	push	{r4, r5, r6, lr}
 801f582:	780d      	ldrb	r5, [r1, #0]
 801f584:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801f588:	2d01      	cmp	r5, #1
 801f58a:	d00d      	beq.n	801f5a8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 801f58c:	d307      	bcc.n	801f59e <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 801f58e:	2d02      	cmp	r5, #2
 801f590:	d10f      	bne.n	801f5b2 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801f592:	4b08      	ldr	r3, [pc, #32]	; (801f5b4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801f594:	215a      	movs	r1, #90	; 0x5a
 801f596:	4a08      	ldr	r2, [pc, #32]	; (801f5b8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801f598:	4808      	ldr	r0, [pc, #32]	; (801f5bc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801f59a:	f007 f92f 	bl	80267fc <__assert_func>
 801f59e:	9404      	str	r4, [sp, #16]
 801f5a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f5a4:	f7ff be04 	b.w	801f1b0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801f5a8:	9404      	str	r4, [sp, #16]
 801f5aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f5ae:	f7ff bef7 	b.w	801f3a0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801f5b2:	bd70      	pop	{r4, r5, r6, pc}
 801f5b4:	0802af24 	.word	0x0802af24
 801f5b8:	0802b5a4 	.word	0x0802b5a4
 801f5bc:	0802b0ff 	.word	0x0802b0ff

0801f5c0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801f5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5c4:	b08b      	sub	sp, #44	; 0x2c
 801f5c6:	460c      	mov	r4, r1
 801f5c8:	4680      	mov	r8, r0
 801f5ca:	469a      	mov	sl, r3
 801f5cc:	6808      	ldr	r0, [r1, #0]
 801f5ce:	ab06      	add	r3, sp, #24
 801f5d0:	6849      	ldr	r1, [r1, #4]
 801f5d2:	c303      	stmia	r3!, {r0, r1}
 801f5d4:	6810      	ldr	r0, [r2, #0]
 801f5d6:	ab08      	add	r3, sp, #32
 801f5d8:	6851      	ldr	r1, [r2, #4]
 801f5da:	c303      	stmia	r3!, {r0, r1}
 801f5dc:	a806      	add	r0, sp, #24
 801f5de:	f7fa ffd9 	bl	801a594 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f5e2:	4621      	mov	r1, r4
 801f5e4:	a808      	add	r0, sp, #32
 801f5e6:	4c61      	ldr	r4, [pc, #388]	; (801f76c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801f5e8:	f7fa ffbc 	bl	801a564 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f5ec:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801f5f0:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801f5f4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801f5f8:	6820      	ldr	r0, [r4, #0]
 801f5fa:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f5fe:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 801f602:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 801f606:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 801f60a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801f60e:	440a      	add	r2, r1
 801f610:	f8ad 2020 	strh.w	r2, [sp, #32]
 801f614:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801f618:	4413      	add	r3, r2
 801f61a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801f61e:	6803      	ldr	r3, [r0, #0]
 801f620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f622:	4798      	blx	r3
 801f624:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801f628:	d118      	bne.n	801f65c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801f62a:	f010 0f20 	tst.w	r0, #32
 801f62e:	6820      	ldr	r0, [r4, #0]
 801f630:	d017      	beq.n	801f662 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801f632:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801f636:	b2bf      	uxth	r7, r7
 801f638:	6801      	ldr	r1, [r0, #0]
 801f63a:	9402      	str	r4, [sp, #8]
 801f63c:	fa1f f489 	uxth.w	r4, r9
 801f640:	f8cd a00c 	str.w	sl, [sp, #12]
 801f644:	9401      	str	r4, [sp, #4]
 801f646:	9700      	str	r7, [sp, #0]
 801f648:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801f64c:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801f64e:	4641      	mov	r1, r8
 801f650:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801f654:	47a0      	blx	r4
 801f656:	b00b      	add	sp, #44	; 0x2c
 801f658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f65c:	f010 0f40 	tst.w	r0, #64	; 0x40
 801f660:	e7e5      	b.n	801f62e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801f662:	6803      	ldr	r3, [r0, #0]
 801f664:	6a1b      	ldr	r3, [r3, #32]
 801f666:	4798      	blx	r3
 801f668:	4b41      	ldr	r3, [pc, #260]	; (801f770 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 801f66a:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801f66e:	f04f 0c00 	mov.w	ip, #0
 801f672:	881a      	ldrh	r2, [r3, #0]
 801f674:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801f678:	fb04 1202 	mla	r2, r4, r2, r1
 801f67c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f680:	4410      	add	r0, r2
 801f682:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 801f686:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801f68a:	0092      	lsls	r2, r2, #2
 801f68c:	9105      	str	r1, [sp, #20]
 801f68e:	9204      	str	r2, [sp, #16]
 801f690:	45cc      	cmp	ip, r9
 801f692:	da65      	bge.n	801f760 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 801f694:	1cc4      	adds	r4, r0, #3
 801f696:	f108 0504 	add.w	r5, r8, #4
 801f69a:	f04f 0e00 	mov.w	lr, #0
 801f69e:	45be      	cmp	lr, r7
 801f6a0:	da4d      	bge.n	801f73e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 801f6a2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801f6a6:	b181      	cbz	r1, 801f6ca <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801f6a8:	29ff      	cmp	r1, #255	; 0xff
 801f6aa:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 801f6ae:	d111      	bne.n	801f6d4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801f6b0:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801f6b4:	d10e      	bne.n	801f6d4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801f6b6:	f804 bc03 	strb.w	fp, [r4, #-3]
 801f6ba:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 801f6be:	f804 2c02 	strb.w	r2, [r4, #-2]
 801f6c2:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 801f6c6:	f804 2c01 	strb.w	r2, [r4, #-1]
 801f6ca:	f10e 0e01 	add.w	lr, lr, #1
 801f6ce:	3403      	adds	r4, #3
 801f6d0:	3504      	adds	r5, #4
 801f6d2:	e7e4      	b.n	801f69e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801f6d4:	fb0a f101 	mul.w	r1, sl, r1
 801f6d8:	1c4a      	adds	r2, r1, #1
 801f6da:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801f6de:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801f6e2:	1212      	asrs	r2, r2, #8
 801f6e4:	b296      	uxth	r6, r2
 801f6e6:	43d2      	mvns	r2, r2
 801f6e8:	fb1b fb06 	smulbb	fp, fp, r6
 801f6ec:	b2d2      	uxtb	r2, r2
 801f6ee:	fb01 b102 	mla	r1, r1, r2, fp
 801f6f2:	b289      	uxth	r1, r1
 801f6f4:	f101 0b01 	add.w	fp, r1, #1
 801f6f8:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801f6fc:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 801f700:	fb1b fb02 	smulbb	fp, fp, r2
 801f704:	1209      	asrs	r1, r1, #8
 801f706:	f804 1c03 	strb.w	r1, [r4, #-3]
 801f70a:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 801f70e:	fb01 b106 	mla	r1, r1, r6, fp
 801f712:	b289      	uxth	r1, r1
 801f714:	f101 0b01 	add.w	fp, r1, #1
 801f718:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801f71c:	1209      	asrs	r1, r1, #8
 801f71e:	f804 1c02 	strb.w	r1, [r4, #-2]
 801f722:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801f726:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801f72a:	fb11 f202 	smulbb	r2, r1, r2
 801f72e:	fb0b 2206 	mla	r2, fp, r6, r2
 801f732:	b292      	uxth	r2, r2
 801f734:	1c56      	adds	r6, r2, #1
 801f736:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801f73a:	1212      	asrs	r2, r2, #8
 801f73c:	e7c3      	b.n	801f6c6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801f73e:	881a      	ldrh	r2, [r3, #0]
 801f740:	f10c 0c01 	add.w	ip, ip, #1
 801f744:	9905      	ldr	r1, [sp, #20]
 801f746:	1bd2      	subs	r2, r2, r7
 801f748:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f74c:	440a      	add	r2, r1
 801f74e:	9904      	ldr	r1, [sp, #16]
 801f750:	4410      	add	r0, r2
 801f752:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801f756:	1bd2      	subs	r2, r2, r7
 801f758:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801f75c:	4490      	add	r8, r2
 801f75e:	e797      	b.n	801f690 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 801f760:	4b02      	ldr	r3, [pc, #8]	; (801f76c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801f762:	6818      	ldr	r0, [r3, #0]
 801f764:	6803      	ldr	r3, [r0, #0]
 801f766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f768:	4798      	blx	r3
 801f76a:	e774      	b.n	801f656 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801f76c:	2000c68c 	.word	0x2000c68c
 801f770:	2000c686 	.word	0x2000c686

0801f774 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801f774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f778:	b085      	sub	sp, #20
 801f77a:	4606      	mov	r6, r0
 801f77c:	460c      	mov	r4, r1
 801f77e:	4691      	mov	r9, r2
 801f780:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801f784:	4698      	mov	r8, r3
 801f786:	b385      	cbz	r5, 801f7ea <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801f788:	4608      	mov	r0, r1
 801f78a:	f7fd fae5 	bl	801cd58 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801f78e:	4607      	mov	r7, r0
 801f790:	4620      	mov	r0, r4
 801f792:	f7fd fb1b 	bl	801cdcc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801f796:	f8ad 000e 	strh.w	r0, [sp, #14]
 801f79a:	4620      	mov	r0, r4
 801f79c:	f8ad 9008 	strh.w	r9, [sp, #8]
 801f7a0:	f8ad 800a 	strh.w	r8, [sp, #10]
 801f7a4:	f8ad 700c 	strh.w	r7, [sp, #12]
 801f7a8:	f7fd fc62 	bl	801d070 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f7ac:	2801      	cmp	r0, #1
 801f7ae:	d00f      	beq.n	801f7d0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801f7b0:	4620      	mov	r0, r4
 801f7b2:	f7fd fc5d 	bl	801d070 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f7b6:	2802      	cmp	r0, #2
 801f7b8:	d00a      	beq.n	801f7d0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801f7ba:	4620      	mov	r0, r4
 801f7bc:	f7fd fc58 	bl	801d070 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f7c0:	280b      	cmp	r0, #11
 801f7c2:	d005      	beq.n	801f7d0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801f7c4:	4b1b      	ldr	r3, [pc, #108]	; (801f834 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 801f7c6:	2142      	movs	r1, #66	; 0x42
 801f7c8:	4a1b      	ldr	r2, [pc, #108]	; (801f838 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 801f7ca:	481c      	ldr	r0, [pc, #112]	; (801f83c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc8>)
 801f7cc:	f007 f816 	bl	80267fc <__assert_func>
 801f7d0:	4620      	mov	r0, r4
 801f7d2:	f7fd fc4d 	bl	801d070 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f7d6:	2802      	cmp	r0, #2
 801f7d8:	4620      	mov	r0, r4
 801f7da:	d109      	bne.n	801f7f0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7c>
 801f7dc:	f7fd fbc4 	bl	801cf68 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f7e0:	462b      	mov	r3, r5
 801f7e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f7e4:	a902      	add	r1, sp, #8
 801f7e6:	f7ff feeb 	bl	801f5c0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801f7ea:	b005      	add	sp, #20
 801f7ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f7f0:	f7fd fc3e 	bl	801d070 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f7f4:	280b      	cmp	r0, #11
 801f7f6:	d10e      	bne.n	801f816 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 801f7f8:	4620      	mov	r0, r4
 801f7fa:	f7fd fbb5 	bl	801cf68 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f7fe:	4606      	mov	r6, r0
 801f800:	4620      	mov	r0, r4
 801f802:	f7fd fbe3 	bl	801cfcc <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801f806:	9500      	str	r5, [sp, #0]
 801f808:	4601      	mov	r1, r0
 801f80a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f80c:	aa02      	add	r2, sp, #8
 801f80e:	4630      	mov	r0, r6
 801f810:	f7ff feb6 	bl	801f580 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801f814:	e7e9      	b.n	801f7ea <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801f816:	6833      	ldr	r3, [r6, #0]
 801f818:	4620      	mov	r0, r4
 801f81a:	691f      	ldr	r7, [r3, #16]
 801f81c:	f7fd fba4 	bl	801cf68 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f820:	2300      	movs	r3, #0
 801f822:	4601      	mov	r1, r0
 801f824:	aa02      	add	r2, sp, #8
 801f826:	4630      	mov	r0, r6
 801f828:	e9cd 5300 	strd	r5, r3, [sp]
 801f82c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f82e:	47b8      	blx	r7
 801f830:	e7db      	b.n	801f7ea <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801f832:	bf00      	nop
 801f834:	0802afbd 	.word	0x0802afbd
 801f838:	0802b6af 	.word	0x0802b6af
 801f83c:	0802b0ff 	.word	0x0802b0ff

0801f840 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801f840:	b570      	push	{r4, r5, r6, lr}
 801f842:	9d04      	ldr	r5, [sp, #16]
 801f844:	460c      	mov	r4, r1
 801f846:	4619      	mov	r1, r3
 801f848:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801f84c:	2a0c      	cmp	r2, #12
 801f84e:	d826      	bhi.n	801f89e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 801f850:	e8df f002 	tbb	[pc, r2]
 801f854:	200e1407 	.word	0x200e1407
 801f858:	20202020 	.word	0x20202020
 801f85c:	20202020 	.word	0x20202020
 801f860:	20          	.byte	0x20
 801f861:	00          	.byte	0x00
 801f862:	4b0f      	ldr	r3, [pc, #60]	; (801f8a0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801f864:	f240 117f 	movw	r1, #383	; 0x17f
 801f868:	4a0e      	ldr	r2, [pc, #56]	; (801f8a4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801f86a:	480f      	ldr	r0, [pc, #60]	; (801f8a8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801f86c:	f006 ffc6 	bl	80267fc <__assert_func>
 801f870:	462a      	mov	r2, r5
 801f872:	4620      	mov	r0, r4
 801f874:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f878:	f7ff bea2 	b.w	801f5c0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801f87c:	6802      	ldr	r2, [r0, #0]
 801f87e:	2600      	movs	r6, #0
 801f880:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801f884:	6916      	ldr	r6, [r2, #16]
 801f886:	462b      	mov	r3, r5
 801f888:	460a      	mov	r2, r1
 801f88a:	4621      	mov	r1, r4
 801f88c:	46b4      	mov	ip, r6
 801f88e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f892:	4760      	bx	ip
 801f894:	4b05      	ldr	r3, [pc, #20]	; (801f8ac <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801f896:	f240 1191 	movw	r1, #401	; 0x191
 801f89a:	4a02      	ldr	r2, [pc, #8]	; (801f8a4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801f89c:	e7e5      	b.n	801f86a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 801f89e:	bd70      	pop	{r4, r5, r6, pc}
 801f8a0:	0802b2d8 	.word	0x0802b2d8
 801f8a4:	0802b997 	.word	0x0802b997
 801f8a8:	0802b0ff 	.word	0x0802b0ff
 801f8ac:	0802b319 	.word	0x0802b319

0801f8b0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801f8b0:	b158      	cbz	r0, 801f8ca <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801f8b2:	2902      	cmp	r1, #2
 801f8b4:	d00f      	beq.n	801f8d6 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801f8b6:	2903      	cmp	r1, #3
 801f8b8:	d010      	beq.n	801f8dc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801f8ba:	2901      	cmp	r1, #1
 801f8bc:	d101      	bne.n	801f8c2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801f8be:	2001      	movs	r0, #1
 801f8c0:	4770      	bx	lr
 801f8c2:	4b08      	ldr	r3, [pc, #32]	; (801f8e4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801f8c4:	8819      	ldrh	r1, [r3, #0]
 801f8c6:	4248      	negs	r0, r1
 801f8c8:	4770      	bx	lr
 801f8ca:	2902      	cmp	r1, #2
 801f8cc:	d006      	beq.n	801f8dc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801f8ce:	2903      	cmp	r1, #3
 801f8d0:	d0f7      	beq.n	801f8c2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801f8d2:	2901      	cmp	r1, #1
 801f8d4:	d1f3      	bne.n	801f8be <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801f8d6:	4b03      	ldr	r3, [pc, #12]	; (801f8e4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801f8d8:	8818      	ldrh	r0, [r3, #0]
 801f8da:	4770      	bx	lr
 801f8dc:	f04f 30ff 	mov.w	r0, #4294967295
 801f8e0:	4770      	bx	lr
 801f8e2:	bf00      	nop
 801f8e4:	2000c686 	.word	0x2000c686

0801f8e8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801f8e8:	b170      	cbz	r0, 801f908 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801f8ea:	2902      	cmp	r1, #2
 801f8ec:	d012      	beq.n	801f914 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 801f8ee:	2903      	cmp	r1, #3
 801f8f0:	d006      	beq.n	801f900 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801f8f2:	2901      	cmp	r1, #1
 801f8f4:	d001      	beq.n	801f8fa <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801f8f6:	2001      	movs	r0, #1
 801f8f8:	4770      	bx	lr
 801f8fa:	4b08      	ldr	r3, [pc, #32]	; (801f91c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801f8fc:	8818      	ldrh	r0, [r3, #0]
 801f8fe:	4770      	bx	lr
 801f900:	4b06      	ldr	r3, [pc, #24]	; (801f91c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801f902:	8818      	ldrh	r0, [r3, #0]
 801f904:	4240      	negs	r0, r0
 801f906:	4770      	bx	lr
 801f908:	2902      	cmp	r1, #2
 801f90a:	d0f9      	beq.n	801f900 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801f90c:	2903      	cmp	r1, #3
 801f90e:	d0f2      	beq.n	801f8f6 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 801f910:	2901      	cmp	r1, #1
 801f912:	d1f2      	bne.n	801f8fa <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801f914:	f04f 30ff 	mov.w	r0, #4294967295
 801f918:	4770      	bx	lr
 801f91a:	bf00      	nop
 801f91c:	2000c686 	.word	0x2000c686

0801f920 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801f920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f924:	b095      	sub	sp, #84	; 0x54
 801f926:	9109      	str	r1, [sp, #36]	; 0x24
 801f928:	a910      	add	r1, sp, #64	; 0x40
 801f92a:	f9bd 5078 	ldrsh.w	r5, [sp, #120]	; 0x78
 801f92e:	f8bd 6080 	ldrh.w	r6, [sp, #128]	; 0x80
 801f932:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 801f936:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 801f93a:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 801f93e:	e881 000c 	stmia.w	r1, {r2, r3}
 801f942:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 801f946:	9306      	str	r3, [sp, #24]
 801f948:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801f94c:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 801f950:	930e      	str	r3, [sp, #56]	; 0x38
 801f952:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 801f956:	798f      	ldrb	r7, [r1, #6]
 801f958:	930a      	str	r3, [sp, #40]	; 0x28
 801f95a:	7b4b      	ldrb	r3, [r1, #13]
 801f95c:	0158      	lsls	r0, r3, #5
 801f95e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801f962:	4338      	orrs	r0, r7
 801f964:	9008      	str	r0, [sp, #32]
 801f966:	f000 8174 	beq.w	801fc52 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801f96a:	011b      	lsls	r3, r3, #4
 801f96c:	79c8      	ldrb	r0, [r1, #7]
 801f96e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f972:	4303      	orrs	r3, r0
 801f974:	9307      	str	r3, [sp, #28]
 801f976:	f000 816c 	beq.w	801fc52 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801f97a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801f97e:	b29b      	uxth	r3, r3
 801f980:	2e00      	cmp	r6, #0
 801f982:	f000 8112 	beq.w	801fbaa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x28a>
 801f986:	1af6      	subs	r6, r6, r3
 801f988:	b2b6      	uxth	r6, r6
 801f98a:	0433      	lsls	r3, r6, #16
 801f98c:	d502      	bpl.n	801f994 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801f98e:	1bad      	subs	r5, r5, r6
 801f990:	2600      	movs	r6, #0
 801f992:	b22d      	sxth	r5, r5
 801f994:	f9b2 1000 	ldrsh.w	r1, [r2]
 801f998:	a810      	add	r0, sp, #64	; 0x40
 801f99a:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801f99e:	428d      	cmp	r5, r1
 801f9a0:	b28b      	uxth	r3, r1
 801f9a2:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 801f9a6:	bfbf      	itttt	lt
 801f9a8:	18f6      	addlt	r6, r6, r3
 801f9aa:	1b75      	sublt	r5, r6, r5
 801f9ac:	b2ae      	uxthlt	r6, r5
 801f9ae:	460d      	movlt	r5, r1
 801f9b0:	8891      	ldrh	r1, [r2, #4]
 801f9b2:	440b      	add	r3, r1
 801f9b4:	4629      	mov	r1, r5
 801f9b6:	b21b      	sxth	r3, r3
 801f9b8:	930d      	str	r3, [sp, #52]	; 0x34
 801f9ba:	88d3      	ldrh	r3, [r2, #6]
 801f9bc:	9a06      	ldr	r2, [sp, #24]
 801f9be:	449a      	add	sl, r3
 801f9c0:	fa0f f38a 	sxth.w	r3, sl
 801f9c4:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 801f9c8:	930c      	str	r3, [sp, #48]	; 0x30
 801f9ca:	4bb8      	ldr	r3, [pc, #736]	; (801fcac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 801f9cc:	f893 b000 	ldrb.w	fp, [r3]
 801f9d0:	f10b 3cff 	add.w	ip, fp, #4294967295
 801f9d4:	f1dc 0300 	rsbs	r3, ip, #0
 801f9d8:	eb43 030c 	adc.w	r3, r3, ip
 801f9dc:	930b      	str	r3, [sp, #44]	; 0x2c
 801f9de:	464b      	mov	r3, r9
 801f9e0:	f7fa fcb2 	bl	801a348 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801f9e4:	4629      	mov	r1, r5
 801f9e6:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 801f9ea:	464b      	mov	r3, r9
 801f9ec:	9a06      	ldr	r2, [sp, #24]
 801f9ee:	a810      	add	r0, sp, #64	; 0x40
 801f9f0:	f7fa fcc2 	bl	801a378 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801f9f4:	a914      	add	r1, sp, #80	; 0x50
 801f9f6:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801f9fa:	a813      	add	r0, sp, #76	; 0x4c
 801f9fc:	f7fa fd9c 	bl	801a538 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801fa00:	f1b9 0f00 	cmp.w	r9, #0
 801fa04:	f040 80d4 	bne.w	801fbb0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x290>
 801fa08:	f1bb 0f01 	cmp.w	fp, #1
 801fa0c:	f040 80d8 	bne.w	801fbc0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 801fa10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fa12:	2b00      	cmp	r3, #0
 801fa14:	f040 8122 	bne.w	801fc5c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33c>
 801fa18:	4ba5      	ldr	r3, [pc, #660]	; (801fcb0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801fa1a:	6818      	ldr	r0, [r3, #0]
 801fa1c:	6803      	ldr	r3, [r0, #0]
 801fa1e:	6a1b      	ldr	r3, [r3, #32]
 801fa20:	4798      	blx	r3
 801fa22:	4aa4      	ldr	r2, [pc, #656]	; (801fcb4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 801fa24:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801fa28:	8811      	ldrh	r1, [r2, #0]
 801fa2a:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801fa2e:	fb01 2303 	mla	r3, r1, r3, r2
 801fa32:	2201      	movs	r2, #1
 801fa34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fa38:	4590      	cmp	r8, r2
 801fa3a:	4403      	add	r3, r0
 801fa3c:	9307      	str	r3, [sp, #28]
 801fa3e:	fa02 f308 	lsl.w	r3, r2, r8
 801fa42:	f103 33ff 	add.w	r3, r3, #4294967295
 801fa46:	b2db      	uxtb	r3, r3
 801fa48:	930f      	str	r3, [sp, #60]	; 0x3c
 801fa4a:	f000 8109 	beq.w	801fc60 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x340>
 801fa4e:	f1b8 0f02 	cmp.w	r8, #2
 801fa52:	f000 813e 	beq.w	801fcd2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b2>
 801fa56:	f1b8 0f04 	cmp.w	r8, #4
 801fa5a:	f000 8132 	beq.w	801fcc2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 801fa5e:	b906      	cbnz	r6, 801fa62 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x142>
 801fa60:	b174      	cbz	r4, 801fa80 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 801fa62:	fb17 6304 	smlabb	r3, r7, r4, r6
 801fa66:	9924      	ldr	r1, [sp, #144]	; 0x90
 801fa68:	ebaa 0a04 	sub.w	sl, sl, r4
 801fa6c:	fb13 f308 	smulbb	r3, r3, r8
 801fa70:	fa1f fa8a 	uxth.w	sl, sl
 801fa74:	b29b      	uxth	r3, r3
 801fa76:	eb01 01d3 	add.w	r1, r1, r3, lsr #3
 801fa7a:	f003 0407 	and.w	r4, r3, #7
 801fa7e:	9124      	str	r1, [sp, #144]	; 0x90
 801fa80:	4649      	mov	r1, r9
 801fa82:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801fa84:	f7ff ff14 	bl	801f8b0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801fa88:	4649      	mov	r1, r9
 801fa8a:	4683      	mov	fp, r0
 801fa8c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801fa8e:	f7ff ff2b 	bl	801f8e8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801fa92:	9906      	ldr	r1, [sp, #24]
 801fa94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fa96:	1bad      	subs	r5, r5, r6
 801fa98:	1a5b      	subs	r3, r3, r1
 801fa9a:	459a      	cmp	sl, r3
 801fa9c:	bfa8      	it	ge
 801fa9e:	469a      	movge	sl, r3
 801faa0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801faa2:	1b5d      	subs	r5, r3, r5
 801faa4:	9b08      	ldr	r3, [sp, #32]
 801faa6:	429d      	cmp	r5, r3
 801faa8:	bfd4      	ite	le
 801faaa:	ebc6 0605 	rsble	r6, r6, r5
 801faae:	ebc6 0603 	rsbgt	r6, r6, r3
 801fab2:	1bbf      	subs	r7, r7, r6
 801fab4:	fb0b 0016 	mls	r0, fp, r6, r0
 801fab8:	fb08 f307 	mul.w	r3, r8, r7
 801fabc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fac0:	9308      	str	r3, [sp, #32]
 801fac2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fac4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801fac8:	930b      	str	r3, [sp, #44]	; 0x2c
 801faca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801facc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fad0:	930c      	str	r3, [sp, #48]	; 0x30
 801fad2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fad4:	b2db      	uxtb	r3, r3
 801fad6:	930d      	str	r3, [sp, #52]	; 0x34
 801fad8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fada:	7819      	ldrb	r1, [r3, #0]
 801fadc:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801fae0:	ea26 7be6 	bic.w	fp, r6, r6, asr #31
 801fae4:	4121      	asrs	r1, r4
 801fae6:	9306      	str	r3, [sp, #24]
 801fae8:	fb03 0b0b 	mla	fp, r3, fp, r0
 801faec:	b2c9      	uxtb	r1, r1
 801faee:	f1ba 0f00 	cmp.w	sl, #0
 801faf2:	f340 80d1 	ble.w	801fc98 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801faf6:	46b6      	mov	lr, r6
 801faf8:	9807      	ldr	r0, [sp, #28]
 801fafa:	f1be 0f00 	cmp.w	lr, #0
 801fafe:	f340 80b8 	ble.w	801fc72 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801fb02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fb04:	400b      	ands	r3, r1
 801fb06:	d03e      	beq.n	801fb86 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801fb08:	fb13 f302 	smulbb	r3, r3, r2
 801fb0c:	2bfe      	cmp	r3, #254	; 0xfe
 801fb0e:	dd03      	ble.n	801fb18 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f8>
 801fb10:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801fb12:	2dff      	cmp	r5, #255	; 0xff
 801fb14:	f000 80a6 	beq.w	801fc64 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801fb18:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801fb1a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801fb1c:	fb15 f303 	smulbb	r3, r5, r3
 801fb20:	b29b      	uxth	r3, r3
 801fb22:	1c5d      	adds	r5, r3, #1
 801fb24:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801fb28:	7805      	ldrb	r5, [r0, #0]
 801fb2a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fb2e:	fa1f fc83 	uxth.w	ip, r3
 801fb32:	43db      	mvns	r3, r3
 801fb34:	fb17 f90c 	smulbb	r9, r7, ip
 801fb38:	b2db      	uxtb	r3, r3
 801fb3a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801fb3c:	fb05 9503 	mla	r5, r5, r3, r9
 801fb40:	b2ad      	uxth	r5, r5
 801fb42:	f105 0901 	add.w	r9, r5, #1
 801fb46:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801fb4a:	fb17 f90c 	smulbb	r9, r7, ip
 801fb4e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801fb50:	122d      	asrs	r5, r5, #8
 801fb52:	fb17 fc0c 	smulbb	ip, r7, ip
 801fb56:	7005      	strb	r5, [r0, #0]
 801fb58:	7845      	ldrb	r5, [r0, #1]
 801fb5a:	fb05 9503 	mla	r5, r5, r3, r9
 801fb5e:	b2ad      	uxth	r5, r5
 801fb60:	f105 0901 	add.w	r9, r5, #1
 801fb64:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801fb68:	122d      	asrs	r5, r5, #8
 801fb6a:	7045      	strb	r5, [r0, #1]
 801fb6c:	7885      	ldrb	r5, [r0, #2]
 801fb6e:	fb05 cc03 	mla	ip, r5, r3, ip
 801fb72:	fa1f fc8c 	uxth.w	ip, ip
 801fb76:	f10c 0301 	add.w	r3, ip, #1
 801fb7a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801fb7e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801fb82:	f880 c002 	strb.w	ip, [r0, #2]
 801fb86:	4444      	add	r4, r8
 801fb88:	f10e 3eff 	add.w	lr, lr, #4294967295
 801fb8c:	b2a4      	uxth	r4, r4
 801fb8e:	2c07      	cmp	r4, #7
 801fb90:	bf89      	itett	hi
 801fb92:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 801fb94:	fa41 f108 	asrls.w	r1, r1, r8
 801fb98:	2400      	movhi	r4, #0
 801fb9a:	7859      	ldrbhi	r1, [r3, #1]
 801fb9c:	bf8a      	itet	hi
 801fb9e:	3301      	addhi	r3, #1
 801fba0:	b2c9      	uxtbls	r1, r1
 801fba2:	9324      	strhi	r3, [sp, #144]	; 0x90
 801fba4:	9b06      	ldr	r3, [sp, #24]
 801fba6:	4418      	add	r0, r3
 801fba8:	e7a7      	b.n	801fafa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1da>
 801fbaa:	441d      	add	r5, r3
 801fbac:	b22d      	sxth	r5, r5
 801fbae:	e6f1      	b.n	801f994 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801fbb0:	f1b9 0f01 	cmp.w	r9, #1
 801fbb4:	f47f af2c 	bne.w	801fa10 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fbb8:	f1bb 0f01 	cmp.w	fp, #1
 801fbbc:	f47f af28 	bne.w	801fa10 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fbc0:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 801fcb0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801fbc4:	f8db 0000 	ldr.w	r0, [fp]
 801fbc8:	6803      	ldr	r3, [r0, #0]
 801fbca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fbcc:	4798      	blx	r3
 801fbce:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801fbd2:	465a      	mov	r2, fp
 801fbd4:	d006      	beq.n	801fbe4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801fbd6:	f1b8 0f04 	cmp.w	r8, #4
 801fbda:	d13d      	bne.n	801fc58 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x338>
 801fbdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fbde:	3300      	adds	r3, #0
 801fbe0:	bf18      	it	ne
 801fbe2:	2301      	movne	r3, #1
 801fbe4:	05c0      	lsls	r0, r0, #23
 801fbe6:	d567      	bpl.n	801fcb8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801fbe8:	f1b8 0f08 	cmp.w	r8, #8
 801fbec:	d164      	bne.n	801fcb8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801fbee:	2b00      	cmp	r3, #0
 801fbf0:	bf0c      	ite	eq
 801fbf2:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801fbf6:	2180      	movne	r1, #128	; 0x80
 801fbf8:	2e00      	cmp	r6, #0
 801fbfa:	f47f af09 	bne.w	801fa10 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fbfe:	2c00      	cmp	r4, #0
 801fc00:	f47f af06 	bne.w	801fa10 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fc04:	9b08      	ldr	r3, [sp, #32]
 801fc06:	980d      	ldr	r0, [sp, #52]	; 0x34
 801fc08:	442b      	add	r3, r5
 801fc0a:	4283      	cmp	r3, r0
 801fc0c:	f73f af00 	bgt.w	801fa10 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fc10:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 801fc14:	4403      	add	r3, r0
 801fc16:	980c      	ldr	r0, [sp, #48]	; 0x30
 801fc18:	4283      	cmp	r3, r0
 801fc1a:	f73f aef9 	bgt.w	801fa10 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fc1e:	f1b8 0f08 	cmp.w	r8, #8
 801fc22:	6810      	ldr	r0, [r2, #0]
 801fc24:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801fc28:	bf18      	it	ne
 801fc2a:	3701      	addne	r7, #1
 801fc2c:	6804      	ldr	r4, [r0, #0]
 801fc2e:	9105      	str	r1, [sp, #20]
 801fc30:	bf18      	it	ne
 801fc32:	f027 0701 	bicne.w	r7, r7, #1
 801fc36:	990a      	ldr	r1, [sp, #40]	; 0x28
 801fc38:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 801fc3c:	bf18      	it	ne
 801fc3e:	b2bf      	uxthne	r7, r7
 801fc40:	9104      	str	r1, [sp, #16]
 801fc42:	9926      	ldr	r1, [sp, #152]	; 0x98
 801fc44:	e9cd 7a00 	strd	r7, sl, [sp]
 801fc48:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801fc4c:	9924      	ldr	r1, [sp, #144]	; 0x90
 801fc4e:	6c24      	ldr	r4, [r4, #64]	; 0x40
 801fc50:	47a0      	blx	r4
 801fc52:	b015      	add	sp, #84	; 0x54
 801fc54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc58:	2300      	movs	r3, #0
 801fc5a:	e7c3      	b.n	801fbe4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801fc5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fc5e:	e6e0      	b.n	801fa22 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801fc60:	22ff      	movs	r2, #255	; 0xff
 801fc62:	e6fc      	b.n	801fa5e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801fc64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fc66:	7003      	strb	r3, [r0, #0]
 801fc68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fc6a:	7043      	strb	r3, [r0, #1]
 801fc6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fc6e:	7083      	strb	r3, [r0, #2]
 801fc70:	e789      	b.n	801fb86 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801fc72:	9b08      	ldr	r3, [sp, #32]
 801fc74:	b153      	cbz	r3, 801fc8c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36c>
 801fc76:	441c      	add	r4, r3
 801fc78:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fc7a:	b2a4      	uxth	r4, r4
 801fc7c:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801fc80:	f004 0407 	and.w	r4, r4, #7
 801fc84:	7819      	ldrb	r1, [r3, #0]
 801fc86:	9324      	str	r3, [sp, #144]	; 0x90
 801fc88:	4121      	asrs	r1, r4
 801fc8a:	b2c9      	uxtb	r1, r1
 801fc8c:	9b07      	ldr	r3, [sp, #28]
 801fc8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801fc92:	445b      	add	r3, fp
 801fc94:	9307      	str	r3, [sp, #28]
 801fc96:	e72a      	b.n	801faee <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ce>
 801fc98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fc9a:	2b00      	cmp	r3, #0
 801fc9c:	d1d9      	bne.n	801fc52 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801fc9e:	4b04      	ldr	r3, [pc, #16]	; (801fcb0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801fca0:	6818      	ldr	r0, [r3, #0]
 801fca2:	6803      	ldr	r3, [r0, #0]
 801fca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fca6:	4798      	blx	r3
 801fca8:	e7d3      	b.n	801fc52 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801fcaa:	bf00      	nop
 801fcac:	2000c684 	.word	0x2000c684
 801fcb0:	2000c68c 	.word	0x2000c68c
 801fcb4:	2000c686 	.word	0x2000c686
 801fcb8:	2b00      	cmp	r3, #0
 801fcba:	f43f aea9 	beq.w	801fa10 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fcbe:	2180      	movs	r1, #128	; 0x80
 801fcc0:	e79a      	b.n	801fbf8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 801fcc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fcc4:	b11b      	cbz	r3, 801fcce <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801fcc6:	07fb      	lsls	r3, r7, #31
 801fcc8:	d501      	bpl.n	801fcce <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801fcca:	3701      	adds	r7, #1
 801fccc:	b2bf      	uxth	r7, r7
 801fcce:	2211      	movs	r2, #17
 801fcd0:	e6c5      	b.n	801fa5e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801fcd2:	2255      	movs	r2, #85	; 0x55
 801fcd4:	e6c3      	b.n	801fa5e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801fcd6:	bf00      	nop

0801fcd8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801fcd8:	b538      	push	{r3, r4, r5, lr}
 801fcda:	4c15      	ldr	r4, [pc, #84]	; (801fd30 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801fcdc:	4605      	mov	r5, r0
 801fcde:	7823      	ldrb	r3, [r4, #0]
 801fce0:	f3bf 8f5b 	dmb	ish
 801fce4:	07da      	lsls	r2, r3, #31
 801fce6:	d40b      	bmi.n	801fd00 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801fce8:	4620      	mov	r0, r4
 801fcea:	f006 fd5b 	bl	80267a4 <__cxa_guard_acquire>
 801fcee:	b138      	cbz	r0, 801fd00 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801fcf0:	4620      	mov	r0, r4
 801fcf2:	f006 fd63 	bl	80267bc <__cxa_guard_release>
 801fcf6:	4a0f      	ldr	r2, [pc, #60]	; (801fd34 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801fcf8:	490f      	ldr	r1, [pc, #60]	; (801fd38 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801fcfa:	4810      	ldr	r0, [pc, #64]	; (801fd3c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801fcfc:	f006 fd4b 	bl	8026796 <__aeabi_atexit>
 801fd00:	4c0f      	ldr	r4, [pc, #60]	; (801fd40 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801fd02:	7823      	ldrb	r3, [r4, #0]
 801fd04:	f3bf 8f5b 	dmb	ish
 801fd08:	07db      	lsls	r3, r3, #31
 801fd0a:	d40b      	bmi.n	801fd24 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801fd0c:	4620      	mov	r0, r4
 801fd0e:	f006 fd49 	bl	80267a4 <__cxa_guard_acquire>
 801fd12:	b138      	cbz	r0, 801fd24 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801fd14:	4620      	mov	r0, r4
 801fd16:	f006 fd51 	bl	80267bc <__cxa_guard_release>
 801fd1a:	4a06      	ldr	r2, [pc, #24]	; (801fd34 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801fd1c:	4909      	ldr	r1, [pc, #36]	; (801fd44 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801fd1e:	480a      	ldr	r0, [pc, #40]	; (801fd48 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801fd20:	f006 fd39 	bl	8026796 <__aeabi_atexit>
 801fd24:	4b05      	ldr	r3, [pc, #20]	; (801fd3c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801fd26:	612b      	str	r3, [r5, #16]
 801fd28:	4b07      	ldr	r3, [pc, #28]	; (801fd48 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801fd2a:	616b      	str	r3, [r5, #20]
 801fd2c:	bd38      	pop	{r3, r4, r5, pc}
 801fd2e:	bf00      	nop
 801fd30:	2000c798 	.word	0x2000c798
 801fd34:	20000000 	.word	0x20000000
 801fd38:	0801e90f 	.word	0x0801e90f
 801fd3c:	20000094 	.word	0x20000094
 801fd40:	2000c79c 	.word	0x2000c79c
 801fd44:	0801e90d 	.word	0x0801e90d
 801fd48:	20000098 	.word	0x20000098

0801fd4c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801fd4c:	b538      	push	{r3, r4, r5, lr}
 801fd4e:	4c15      	ldr	r4, [pc, #84]	; (801fda4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801fd50:	4605      	mov	r5, r0
 801fd52:	7823      	ldrb	r3, [r4, #0]
 801fd54:	f3bf 8f5b 	dmb	ish
 801fd58:	07da      	lsls	r2, r3, #31
 801fd5a:	d40b      	bmi.n	801fd74 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801fd5c:	4620      	mov	r0, r4
 801fd5e:	f006 fd21 	bl	80267a4 <__cxa_guard_acquire>
 801fd62:	b138      	cbz	r0, 801fd74 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801fd64:	4620      	mov	r0, r4
 801fd66:	f006 fd29 	bl	80267bc <__cxa_guard_release>
 801fd6a:	4a0f      	ldr	r2, [pc, #60]	; (801fda8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801fd6c:	490f      	ldr	r1, [pc, #60]	; (801fdac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801fd6e:	4810      	ldr	r0, [pc, #64]	; (801fdb0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801fd70:	f006 fd11 	bl	8026796 <__aeabi_atexit>
 801fd74:	4c0f      	ldr	r4, [pc, #60]	; (801fdb4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801fd76:	7823      	ldrb	r3, [r4, #0]
 801fd78:	f3bf 8f5b 	dmb	ish
 801fd7c:	07db      	lsls	r3, r3, #31
 801fd7e:	d40b      	bmi.n	801fd98 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801fd80:	4620      	mov	r0, r4
 801fd82:	f006 fd0f 	bl	80267a4 <__cxa_guard_acquire>
 801fd86:	b138      	cbz	r0, 801fd98 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801fd88:	4620      	mov	r0, r4
 801fd8a:	f006 fd17 	bl	80267bc <__cxa_guard_release>
 801fd8e:	4a06      	ldr	r2, [pc, #24]	; (801fda8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801fd90:	4909      	ldr	r1, [pc, #36]	; (801fdb8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801fd92:	480a      	ldr	r0, [pc, #40]	; (801fdbc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801fd94:	f006 fcff 	bl	8026796 <__aeabi_atexit>
 801fd98:	4b05      	ldr	r3, [pc, #20]	; (801fdb0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801fd9a:	60ab      	str	r3, [r5, #8]
 801fd9c:	4b07      	ldr	r3, [pc, #28]	; (801fdbc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801fd9e:	60eb      	str	r3, [r5, #12]
 801fda0:	bd38      	pop	{r3, r4, r5, pc}
 801fda2:	bf00      	nop
 801fda4:	2000c778 	.word	0x2000c778
 801fda8:	20000000 	.word	0x20000000
 801fdac:	0801e913 	.word	0x0801e913
 801fdb0:	20000074 	.word	0x20000074
 801fdb4:	2000c77c 	.word	0x2000c77c
 801fdb8:	0801e911 	.word	0x0801e911
 801fdbc:	20000078 	.word	0x20000078

0801fdc0 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801fdc0:	b510      	push	{r4, lr}
 801fdc2:	4604      	mov	r4, r0
 801fdc4:	f7ff ff88 	bl	801fcd8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801fdc8:	4620      	mov	r0, r4
 801fdca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fdce:	f7ff bfbd 	b.w	801fd4c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801fdd4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801fdd4:	b538      	push	{r3, r4, r5, lr}
 801fdd6:	4c15      	ldr	r4, [pc, #84]	; (801fe2c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801fdd8:	4605      	mov	r5, r0
 801fdda:	7823      	ldrb	r3, [r4, #0]
 801fddc:	f3bf 8f5b 	dmb	ish
 801fde0:	07da      	lsls	r2, r3, #31
 801fde2:	d40b      	bmi.n	801fdfc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801fde4:	4620      	mov	r0, r4
 801fde6:	f006 fcdd 	bl	80267a4 <__cxa_guard_acquire>
 801fdea:	b138      	cbz	r0, 801fdfc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801fdec:	4620      	mov	r0, r4
 801fdee:	f006 fce5 	bl	80267bc <__cxa_guard_release>
 801fdf2:	4a0f      	ldr	r2, [pc, #60]	; (801fe30 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801fdf4:	490f      	ldr	r1, [pc, #60]	; (801fe34 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801fdf6:	4810      	ldr	r0, [pc, #64]	; (801fe38 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801fdf8:	f006 fccd 	bl	8026796 <__aeabi_atexit>
 801fdfc:	4c0f      	ldr	r4, [pc, #60]	; (801fe3c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801fdfe:	7823      	ldrb	r3, [r4, #0]
 801fe00:	f3bf 8f5b 	dmb	ish
 801fe04:	07db      	lsls	r3, r3, #31
 801fe06:	d40b      	bmi.n	801fe20 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801fe08:	4620      	mov	r0, r4
 801fe0a:	f006 fccb 	bl	80267a4 <__cxa_guard_acquire>
 801fe0e:	b138      	cbz	r0, 801fe20 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801fe10:	4620      	mov	r0, r4
 801fe12:	f006 fcd3 	bl	80267bc <__cxa_guard_release>
 801fe16:	4a06      	ldr	r2, [pc, #24]	; (801fe30 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801fe18:	4909      	ldr	r1, [pc, #36]	; (801fe40 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801fe1a:	480a      	ldr	r0, [pc, #40]	; (801fe44 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801fe1c:	f006 fcbb 	bl	8026796 <__aeabi_atexit>
 801fe20:	4b05      	ldr	r3, [pc, #20]	; (801fe38 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801fe22:	622b      	str	r3, [r5, #32]
 801fe24:	4b07      	ldr	r3, [pc, #28]	; (801fe44 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801fe26:	626b      	str	r3, [r5, #36]	; 0x24
 801fe28:	bd38      	pop	{r3, r4, r5, pc}
 801fe2a:	bf00      	nop
 801fe2c:	2000c7a0 	.word	0x2000c7a0
 801fe30:	20000000 	.word	0x20000000
 801fe34:	0801e907 	.word	0x0801e907
 801fe38:	2000009c 	.word	0x2000009c
 801fe3c:	2000c7a4 	.word	0x2000c7a4
 801fe40:	0801e905 	.word	0x0801e905
 801fe44:	200000a0 	.word	0x200000a0

0801fe48 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801fe48:	b538      	push	{r3, r4, r5, lr}
 801fe4a:	4c15      	ldr	r4, [pc, #84]	; (801fea0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801fe4c:	4605      	mov	r5, r0
 801fe4e:	7823      	ldrb	r3, [r4, #0]
 801fe50:	f3bf 8f5b 	dmb	ish
 801fe54:	07da      	lsls	r2, r3, #31
 801fe56:	d40b      	bmi.n	801fe70 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801fe58:	4620      	mov	r0, r4
 801fe5a:	f006 fca3 	bl	80267a4 <__cxa_guard_acquire>
 801fe5e:	b138      	cbz	r0, 801fe70 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801fe60:	4620      	mov	r0, r4
 801fe62:	f006 fcab 	bl	80267bc <__cxa_guard_release>
 801fe66:	4a0f      	ldr	r2, [pc, #60]	; (801fea4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801fe68:	490f      	ldr	r1, [pc, #60]	; (801fea8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801fe6a:	4810      	ldr	r0, [pc, #64]	; (801feac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801fe6c:	f006 fc93 	bl	8026796 <__aeabi_atexit>
 801fe70:	4c0f      	ldr	r4, [pc, #60]	; (801feb0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801fe72:	7823      	ldrb	r3, [r4, #0]
 801fe74:	f3bf 8f5b 	dmb	ish
 801fe78:	07db      	lsls	r3, r3, #31
 801fe7a:	d40b      	bmi.n	801fe94 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801fe7c:	4620      	mov	r0, r4
 801fe7e:	f006 fc91 	bl	80267a4 <__cxa_guard_acquire>
 801fe82:	b138      	cbz	r0, 801fe94 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801fe84:	4620      	mov	r0, r4
 801fe86:	f006 fc99 	bl	80267bc <__cxa_guard_release>
 801fe8a:	4a06      	ldr	r2, [pc, #24]	; (801fea4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801fe8c:	4909      	ldr	r1, [pc, #36]	; (801feb4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801fe8e:	480a      	ldr	r0, [pc, #40]	; (801feb8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801fe90:	f006 fc81 	bl	8026796 <__aeabi_atexit>
 801fe94:	4b05      	ldr	r3, [pc, #20]	; (801feac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801fe96:	61ab      	str	r3, [r5, #24]
 801fe98:	4b07      	ldr	r3, [pc, #28]	; (801feb8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801fe9a:	61eb      	str	r3, [r5, #28]
 801fe9c:	bd38      	pop	{r3, r4, r5, pc}
 801fe9e:	bf00      	nop
 801fea0:	2000c780 	.word	0x2000c780
 801fea4:	20000000 	.word	0x20000000
 801fea8:	0801e90b 	.word	0x0801e90b
 801feac:	2000007c 	.word	0x2000007c
 801feb0:	2000c784 	.word	0x2000c784
 801feb4:	0801e909 	.word	0x0801e909
 801feb8:	20000080 	.word	0x20000080

0801febc <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801febc:	b510      	push	{r4, lr}
 801febe:	4604      	mov	r4, r0
 801fec0:	f7ff ff88 	bl	801fdd4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801fec4:	4620      	mov	r0, r4
 801fec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801feca:	f7ff bfbd 	b.w	801fe48 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801fed0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801fed0:	b538      	push	{r3, r4, r5, lr}
 801fed2:	4c15      	ldr	r4, [pc, #84]	; (801ff28 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801fed4:	4605      	mov	r5, r0
 801fed6:	7823      	ldrb	r3, [r4, #0]
 801fed8:	f3bf 8f5b 	dmb	ish
 801fedc:	07da      	lsls	r2, r3, #31
 801fede:	d40b      	bmi.n	801fef8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801fee0:	4620      	mov	r0, r4
 801fee2:	f006 fc5f 	bl	80267a4 <__cxa_guard_acquire>
 801fee6:	b138      	cbz	r0, 801fef8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801fee8:	4620      	mov	r0, r4
 801feea:	f006 fc67 	bl	80267bc <__cxa_guard_release>
 801feee:	4a0f      	ldr	r2, [pc, #60]	; (801ff2c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801fef0:	490f      	ldr	r1, [pc, #60]	; (801ff30 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801fef2:	4810      	ldr	r0, [pc, #64]	; (801ff34 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801fef4:	f006 fc4f 	bl	8026796 <__aeabi_atexit>
 801fef8:	4c0f      	ldr	r4, [pc, #60]	; (801ff38 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801fefa:	7823      	ldrb	r3, [r4, #0]
 801fefc:	f3bf 8f5b 	dmb	ish
 801ff00:	07db      	lsls	r3, r3, #31
 801ff02:	d40b      	bmi.n	801ff1c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801ff04:	4620      	mov	r0, r4
 801ff06:	f006 fc4d 	bl	80267a4 <__cxa_guard_acquire>
 801ff0a:	b138      	cbz	r0, 801ff1c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801ff0c:	4620      	mov	r0, r4
 801ff0e:	f006 fc55 	bl	80267bc <__cxa_guard_release>
 801ff12:	4a06      	ldr	r2, [pc, #24]	; (801ff2c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801ff14:	4909      	ldr	r1, [pc, #36]	; (801ff3c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801ff16:	480a      	ldr	r0, [pc, #40]	; (801ff40 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801ff18:	f006 fc3d 	bl	8026796 <__aeabi_atexit>
 801ff1c:	4b05      	ldr	r3, [pc, #20]	; (801ff34 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801ff1e:	632b      	str	r3, [r5, #48]	; 0x30
 801ff20:	4b07      	ldr	r3, [pc, #28]	; (801ff40 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801ff22:	636b      	str	r3, [r5, #52]	; 0x34
 801ff24:	bd38      	pop	{r3, r4, r5, pc}
 801ff26:	bf00      	nop
 801ff28:	2000c788 	.word	0x2000c788
 801ff2c:	20000000 	.word	0x20000000
 801ff30:	0801e8ff 	.word	0x0801e8ff
 801ff34:	20000084 	.word	0x20000084
 801ff38:	2000c78c 	.word	0x2000c78c
 801ff3c:	0801e8fd 	.word	0x0801e8fd
 801ff40:	20000088 	.word	0x20000088

0801ff44 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801ff44:	b538      	push	{r3, r4, r5, lr}
 801ff46:	4c15      	ldr	r4, [pc, #84]	; (801ff9c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801ff48:	4605      	mov	r5, r0
 801ff4a:	7823      	ldrb	r3, [r4, #0]
 801ff4c:	f3bf 8f5b 	dmb	ish
 801ff50:	07da      	lsls	r2, r3, #31
 801ff52:	d40b      	bmi.n	801ff6c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801ff54:	4620      	mov	r0, r4
 801ff56:	f006 fc25 	bl	80267a4 <__cxa_guard_acquire>
 801ff5a:	b138      	cbz	r0, 801ff6c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801ff5c:	4620      	mov	r0, r4
 801ff5e:	f006 fc2d 	bl	80267bc <__cxa_guard_release>
 801ff62:	4a0f      	ldr	r2, [pc, #60]	; (801ffa0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801ff64:	490f      	ldr	r1, [pc, #60]	; (801ffa4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801ff66:	4810      	ldr	r0, [pc, #64]	; (801ffa8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801ff68:	f006 fc15 	bl	8026796 <__aeabi_atexit>
 801ff6c:	4c0f      	ldr	r4, [pc, #60]	; (801ffac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801ff6e:	7823      	ldrb	r3, [r4, #0]
 801ff70:	f3bf 8f5b 	dmb	ish
 801ff74:	07db      	lsls	r3, r3, #31
 801ff76:	d40b      	bmi.n	801ff90 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801ff78:	4620      	mov	r0, r4
 801ff7a:	f006 fc13 	bl	80267a4 <__cxa_guard_acquire>
 801ff7e:	b138      	cbz	r0, 801ff90 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801ff80:	4620      	mov	r0, r4
 801ff82:	f006 fc1b 	bl	80267bc <__cxa_guard_release>
 801ff86:	4a06      	ldr	r2, [pc, #24]	; (801ffa0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801ff88:	4909      	ldr	r1, [pc, #36]	; (801ffb0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801ff8a:	480a      	ldr	r0, [pc, #40]	; (801ffb4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801ff8c:	f006 fc03 	bl	8026796 <__aeabi_atexit>
 801ff90:	4b05      	ldr	r3, [pc, #20]	; (801ffa8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801ff92:	62ab      	str	r3, [r5, #40]	; 0x28
 801ff94:	4b07      	ldr	r3, [pc, #28]	; (801ffb4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801ff96:	62eb      	str	r3, [r5, #44]	; 0x2c
 801ff98:	bd38      	pop	{r3, r4, r5, pc}
 801ff9a:	bf00      	nop
 801ff9c:	2000c760 	.word	0x2000c760
 801ffa0:	20000000 	.word	0x20000000
 801ffa4:	0801e903 	.word	0x0801e903
 801ffa8:	2000005c 	.word	0x2000005c
 801ffac:	2000c764 	.word	0x2000c764
 801ffb0:	0801e901 	.word	0x0801e901
 801ffb4:	20000060 	.word	0x20000060

0801ffb8 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801ffb8:	b510      	push	{r4, lr}
 801ffba:	4604      	mov	r4, r0
 801ffbc:	f7ff ff88 	bl	801fed0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801ffc0:	4620      	mov	r0, r4
 801ffc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ffc6:	f7ff bfbd 	b.w	801ff44 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801ffcc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801ffcc:	b538      	push	{r3, r4, r5, lr}
 801ffce:	4c15      	ldr	r4, [pc, #84]	; (8020024 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801ffd0:	4605      	mov	r5, r0
 801ffd2:	7823      	ldrb	r3, [r4, #0]
 801ffd4:	f3bf 8f5b 	dmb	ish
 801ffd8:	07da      	lsls	r2, r3, #31
 801ffda:	d40b      	bmi.n	801fff4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801ffdc:	4620      	mov	r0, r4
 801ffde:	f006 fbe1 	bl	80267a4 <__cxa_guard_acquire>
 801ffe2:	b138      	cbz	r0, 801fff4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801ffe4:	4620      	mov	r0, r4
 801ffe6:	f006 fbe9 	bl	80267bc <__cxa_guard_release>
 801ffea:	4a0f      	ldr	r2, [pc, #60]	; (8020028 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801ffec:	490f      	ldr	r1, [pc, #60]	; (802002c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801ffee:	4810      	ldr	r0, [pc, #64]	; (8020030 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801fff0:	f006 fbd1 	bl	8026796 <__aeabi_atexit>
 801fff4:	4c0f      	ldr	r4, [pc, #60]	; (8020034 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801fff6:	7823      	ldrb	r3, [r4, #0]
 801fff8:	f3bf 8f5b 	dmb	ish
 801fffc:	07db      	lsls	r3, r3, #31
 801fffe:	d40b      	bmi.n	8020018 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8020000:	4620      	mov	r0, r4
 8020002:	f006 fbcf 	bl	80267a4 <__cxa_guard_acquire>
 8020006:	b138      	cbz	r0, 8020018 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8020008:	4620      	mov	r0, r4
 802000a:	f006 fbd7 	bl	80267bc <__cxa_guard_release>
 802000e:	4a06      	ldr	r2, [pc, #24]	; (8020028 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8020010:	4909      	ldr	r1, [pc, #36]	; (8020038 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8020012:	480a      	ldr	r0, [pc, #40]	; (802003c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8020014:	f006 fbbf 	bl	8026796 <__aeabi_atexit>
 8020018:	4b05      	ldr	r3, [pc, #20]	; (8020030 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 802001a:	642b      	str	r3, [r5, #64]	; 0x40
 802001c:	4b07      	ldr	r3, [pc, #28]	; (802003c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 802001e:	646b      	str	r3, [r5, #68]	; 0x44
 8020020:	bd38      	pop	{r3, r4, r5, pc}
 8020022:	bf00      	nop
 8020024:	2000c790 	.word	0x2000c790
 8020028:	20000000 	.word	0x20000000
 802002c:	0801e8f7 	.word	0x0801e8f7
 8020030:	2000008c 	.word	0x2000008c
 8020034:	2000c794 	.word	0x2000c794
 8020038:	0801e8f5 	.word	0x0801e8f5
 802003c:	20000090 	.word	0x20000090

08020040 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8020040:	b538      	push	{r3, r4, r5, lr}
 8020042:	4c15      	ldr	r4, [pc, #84]	; (8020098 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8020044:	4605      	mov	r5, r0
 8020046:	7823      	ldrb	r3, [r4, #0]
 8020048:	f3bf 8f5b 	dmb	ish
 802004c:	07da      	lsls	r2, r3, #31
 802004e:	d40b      	bmi.n	8020068 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8020050:	4620      	mov	r0, r4
 8020052:	f006 fba7 	bl	80267a4 <__cxa_guard_acquire>
 8020056:	b138      	cbz	r0, 8020068 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8020058:	4620      	mov	r0, r4
 802005a:	f006 fbaf 	bl	80267bc <__cxa_guard_release>
 802005e:	4a0f      	ldr	r2, [pc, #60]	; (802009c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8020060:	490f      	ldr	r1, [pc, #60]	; (80200a0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8020062:	4810      	ldr	r0, [pc, #64]	; (80200a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8020064:	f006 fb97 	bl	8026796 <__aeabi_atexit>
 8020068:	4c0f      	ldr	r4, [pc, #60]	; (80200a8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 802006a:	7823      	ldrb	r3, [r4, #0]
 802006c:	f3bf 8f5b 	dmb	ish
 8020070:	07db      	lsls	r3, r3, #31
 8020072:	d40b      	bmi.n	802008c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8020074:	4620      	mov	r0, r4
 8020076:	f006 fb95 	bl	80267a4 <__cxa_guard_acquire>
 802007a:	b138      	cbz	r0, 802008c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 802007c:	4620      	mov	r0, r4
 802007e:	f006 fb9d 	bl	80267bc <__cxa_guard_release>
 8020082:	4a06      	ldr	r2, [pc, #24]	; (802009c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8020084:	4909      	ldr	r1, [pc, #36]	; (80200ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8020086:	480a      	ldr	r0, [pc, #40]	; (80200b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8020088:	f006 fb85 	bl	8026796 <__aeabi_atexit>
 802008c:	4b05      	ldr	r3, [pc, #20]	; (80200a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 802008e:	63ab      	str	r3, [r5, #56]	; 0x38
 8020090:	4b07      	ldr	r3, [pc, #28]	; (80200b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8020092:	63eb      	str	r3, [r5, #60]	; 0x3c
 8020094:	bd38      	pop	{r3, r4, r5, pc}
 8020096:	bf00      	nop
 8020098:	2000c770 	.word	0x2000c770
 802009c:	20000000 	.word	0x20000000
 80200a0:	0801e8fb 	.word	0x0801e8fb
 80200a4:	2000006c 	.word	0x2000006c
 80200a8:	2000c774 	.word	0x2000c774
 80200ac:	0801e8f9 	.word	0x0801e8f9
 80200b0:	20000070 	.word	0x20000070

080200b4 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 80200b4:	b510      	push	{r4, lr}
 80200b6:	4604      	mov	r4, r0
 80200b8:	f7ff ff88 	bl	801ffcc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 80200bc:	4620      	mov	r0, r4
 80200be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80200c2:	f7ff bfbd 	b.w	8020040 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

080200c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 80200c8:	b538      	push	{r3, r4, r5, lr}
 80200ca:	4c15      	ldr	r4, [pc, #84]	; (8020120 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 80200cc:	4605      	mov	r5, r0
 80200ce:	7823      	ldrb	r3, [r4, #0]
 80200d0:	f3bf 8f5b 	dmb	ish
 80200d4:	07da      	lsls	r2, r3, #31
 80200d6:	d40b      	bmi.n	80200f0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80200d8:	4620      	mov	r0, r4
 80200da:	f006 fb63 	bl	80267a4 <__cxa_guard_acquire>
 80200de:	b138      	cbz	r0, 80200f0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80200e0:	4620      	mov	r0, r4
 80200e2:	f006 fb6b 	bl	80267bc <__cxa_guard_release>
 80200e6:	4a0f      	ldr	r2, [pc, #60]	; (8020124 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80200e8:	490f      	ldr	r1, [pc, #60]	; (8020128 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 80200ea:	4810      	ldr	r0, [pc, #64]	; (802012c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80200ec:	f006 fb53 	bl	8026796 <__aeabi_atexit>
 80200f0:	4c0f      	ldr	r4, [pc, #60]	; (8020130 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 80200f2:	7823      	ldrb	r3, [r4, #0]
 80200f4:	f3bf 8f5b 	dmb	ish
 80200f8:	07db      	lsls	r3, r3, #31
 80200fa:	d40b      	bmi.n	8020114 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80200fc:	4620      	mov	r0, r4
 80200fe:	f006 fb51 	bl	80267a4 <__cxa_guard_acquire>
 8020102:	b138      	cbz	r0, 8020114 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8020104:	4620      	mov	r0, r4
 8020106:	f006 fb59 	bl	80267bc <__cxa_guard_release>
 802010a:	4a06      	ldr	r2, [pc, #24]	; (8020124 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 802010c:	4909      	ldr	r1, [pc, #36]	; (8020134 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 802010e:	480a      	ldr	r0, [pc, #40]	; (8020138 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8020110:	f006 fb41 	bl	8026796 <__aeabi_atexit>
 8020114:	4b05      	ldr	r3, [pc, #20]	; (802012c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8020116:	652b      	str	r3, [r5, #80]	; 0x50
 8020118:	4b07      	ldr	r3, [pc, #28]	; (8020138 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 802011a:	656b      	str	r3, [r5, #84]	; 0x54
 802011c:	bd38      	pop	{r3, r4, r5, pc}
 802011e:	bf00      	nop
 8020120:	2000c768 	.word	0x2000c768
 8020124:	20000000 	.word	0x20000000
 8020128:	0801e8ef 	.word	0x0801e8ef
 802012c:	20000064 	.word	0x20000064
 8020130:	2000c76c 	.word	0x2000c76c
 8020134:	0801e8ed 	.word	0x0801e8ed
 8020138:	20000068 	.word	0x20000068

0802013c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 802013c:	b538      	push	{r3, r4, r5, lr}
 802013e:	4c15      	ldr	r4, [pc, #84]	; (8020194 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8020140:	4605      	mov	r5, r0
 8020142:	7823      	ldrb	r3, [r4, #0]
 8020144:	f3bf 8f5b 	dmb	ish
 8020148:	07da      	lsls	r2, r3, #31
 802014a:	d40b      	bmi.n	8020164 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 802014c:	4620      	mov	r0, r4
 802014e:	f006 fb29 	bl	80267a4 <__cxa_guard_acquire>
 8020152:	b138      	cbz	r0, 8020164 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8020154:	4620      	mov	r0, r4
 8020156:	f006 fb31 	bl	80267bc <__cxa_guard_release>
 802015a:	4a0f      	ldr	r2, [pc, #60]	; (8020198 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 802015c:	490f      	ldr	r1, [pc, #60]	; (802019c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 802015e:	4810      	ldr	r0, [pc, #64]	; (80201a0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8020160:	f006 fb19 	bl	8026796 <__aeabi_atexit>
 8020164:	4c0f      	ldr	r4, [pc, #60]	; (80201a4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8020166:	7823      	ldrb	r3, [r4, #0]
 8020168:	f3bf 8f5b 	dmb	ish
 802016c:	07db      	lsls	r3, r3, #31
 802016e:	d40b      	bmi.n	8020188 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8020170:	4620      	mov	r0, r4
 8020172:	f006 fb17 	bl	80267a4 <__cxa_guard_acquire>
 8020176:	b138      	cbz	r0, 8020188 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8020178:	4620      	mov	r0, r4
 802017a:	f006 fb1f 	bl	80267bc <__cxa_guard_release>
 802017e:	4a06      	ldr	r2, [pc, #24]	; (8020198 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8020180:	4909      	ldr	r1, [pc, #36]	; (80201a8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8020182:	480a      	ldr	r0, [pc, #40]	; (80201ac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8020184:	f006 fb07 	bl	8026796 <__aeabi_atexit>
 8020188:	4b05      	ldr	r3, [pc, #20]	; (80201a0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 802018a:	64ab      	str	r3, [r5, #72]	; 0x48
 802018c:	4b07      	ldr	r3, [pc, #28]	; (80201ac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 802018e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8020190:	bd38      	pop	{r3, r4, r5, pc}
 8020192:	bf00      	nop
 8020194:	2000c758 	.word	0x2000c758
 8020198:	20000000 	.word	0x20000000
 802019c:	0801e8f3 	.word	0x0801e8f3
 80201a0:	20000054 	.word	0x20000054
 80201a4:	2000c75c 	.word	0x2000c75c
 80201a8:	0801e8f1 	.word	0x0801e8f1
 80201ac:	20000058 	.word	0x20000058

080201b0 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 80201b0:	b510      	push	{r4, lr}
 80201b2:	4604      	mov	r4, r0
 80201b4:	f7ff ff88 	bl	80200c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 80201b8:	4620      	mov	r0, r4
 80201ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80201be:	f7ff bfbd 	b.w	802013c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

080201c2 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 80201c2:	b510      	push	{r4, lr}
 80201c4:	4604      	mov	r4, r0
 80201c6:	f7ff fff3 	bl	80201b0 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 80201ca:	4620      	mov	r0, r4
 80201cc:	f7ff ff72 	bl	80200b4 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 80201d0:	4620      	mov	r0, r4
 80201d2:	f7ff fe73 	bl	801febc <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 80201d6:	4620      	mov	r0, r4
 80201d8:	f7ff fdf2 	bl	801fdc0 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 80201dc:	4620      	mov	r0, r4
 80201de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80201e2:	f7ff bee9 	b.w	801ffb8 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

080201e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 80201e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201ec:	b087      	sub	sp, #28
 80201ee:	7888      	ldrb	r0, [r1, #2]
 80201f0:	4616      	mov	r6, r2
 80201f2:	9001      	str	r0, [sp, #4]
 80201f4:	7848      	ldrb	r0, [r1, #1]
 80201f6:	9100      	str	r1, [sp, #0]
 80201f8:	9002      	str	r0, [sp, #8]
 80201fa:	7808      	ldrb	r0, [r1, #0]
 80201fc:	9901      	ldr	r1, [sp, #4]
 80201fe:	9003      	str	r0, [sp, #12]
 8020200:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8020204:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 8020208:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 802020c:	9902      	ldr	r1, [sp, #8]
 802020e:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 8020212:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8020216:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 802021a:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 802021e:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8020222:	9005      	str	r0, [sp, #20]
 8020224:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 8020228:	fb05 ca0e 	mla	sl, r5, lr, ip
 802022c:	2d00      	cmp	r5, #0
 802022e:	eb06 080a 	add.w	r8, r6, sl
 8020232:	db4a      	blt.n	80202ca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 8020234:	45a9      	cmp	r9, r5
 8020236:	dd48      	ble.n	80202ca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 8020238:	f1bc 0f00 	cmp.w	ip, #0
 802023c:	db43      	blt.n	80202c6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 802023e:	45e6      	cmp	lr, ip
 8020240:	dd41      	ble.n	80202c6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 8020242:	f816 600a 	ldrb.w	r6, [r6, sl]
 8020246:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802024a:	441e      	add	r6, r3
 802024c:	f11c 0001 	adds.w	r0, ip, #1
 8020250:	d43e      	bmi.n	80202d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 8020252:	4586      	cmp	lr, r0
 8020254:	dd3c      	ble.n	80202d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 8020256:	2a00      	cmp	r2, #0
 8020258:	d03a      	beq.n	80202d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 802025a:	f898 0001 	ldrb.w	r0, [r8, #1]
 802025e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020262:	4418      	add	r0, r3
 8020264:	3501      	adds	r5, #1
 8020266:	d437      	bmi.n	80202d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 8020268:	45a9      	cmp	r9, r5
 802026a:	dd35      	ble.n	80202d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 802026c:	b3a4      	cbz	r4, 80202d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 802026e:	f1bc 0f00 	cmp.w	ip, #0
 8020272:	db2f      	blt.n	80202d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 8020274:	45e6      	cmp	lr, ip
 8020276:	dd2d      	ble.n	80202d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 8020278:	f818 500e 	ldrb.w	r5, [r8, lr]
 802027c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020280:	441d      	add	r5, r3
 8020282:	f11c 0c01 	adds.w	ip, ip, #1
 8020286:	d42a      	bmi.n	80202de <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 8020288:	45e6      	cmp	lr, ip
 802028a:	dd28      	ble.n	80202de <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 802028c:	b33a      	cbz	r2, 80202de <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 802028e:	44c6      	add	lr, r8
 8020290:	f89e c001 	ldrb.w	ip, [lr, #1]
 8020294:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8020298:	4463      	add	r3, ip
 802029a:	ea6f 0c07 	mvn.w	ip, r7
 802029e:	2a0f      	cmp	r2, #15
 80202a0:	f896 a000 	ldrb.w	sl, [r6]
 80202a4:	fa5f fc8c 	uxtb.w	ip, ip
 80202a8:	f890 b000 	ldrb.w	fp, [r0]
 80202ac:	f895 9000 	ldrb.w	r9, [r5]
 80202b0:	7819      	ldrb	r1, [r3, #0]
 80202b2:	d801      	bhi.n	80202b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 80202b4:	2c0f      	cmp	r4, #15
 80202b6:	d914      	bls.n	80202e2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 80202b8:	4b40      	ldr	r3, [pc, #256]	; (80203bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 80202ba:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80202be:	4a40      	ldr	r2, [pc, #256]	; (80203c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 80202c0:	4840      	ldr	r0, [pc, #256]	; (80203c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 80202c2:	f006 fa9b 	bl	80267fc <__assert_func>
 80202c6:	ae05      	add	r6, sp, #20
 80202c8:	e7c0      	b.n	802024c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 80202ca:	a805      	add	r0, sp, #20
 80202cc:	4606      	mov	r6, r0
 80202ce:	e7c9      	b.n	8020264 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 80202d0:	a805      	add	r0, sp, #20
 80202d2:	e7c7      	b.n	8020264 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 80202d4:	ad05      	add	r5, sp, #20
 80202d6:	e7d4      	b.n	8020282 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 80202d8:	ab05      	add	r3, sp, #20
 80202da:	461d      	mov	r5, r3
 80202dc:	e7dd      	b.n	802029a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 80202de:	ab05      	add	r3, sp, #20
 80202e0:	e7db      	b.n	802029a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 80202e2:	b292      	uxth	r2, r2
 80202e4:	b2a4      	uxth	r4, r4
 80202e6:	fa1f fc8c 	uxth.w	ip, ip
 80202ea:	fb02 f804 	mul.w	r8, r2, r4
 80202ee:	0112      	lsls	r2, r2, #4
 80202f0:	b2bf      	uxth	r7, r7
 80202f2:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 80202f6:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 80202fa:	eba2 0208 	sub.w	r2, r2, r8
 80202fe:	b2a4      	uxth	r4, r4
 8020300:	b292      	uxth	r2, r2
 8020302:	ebae 0e04 	sub.w	lr, lr, r4
 8020306:	fb02 fb0b 	mul.w	fp, r2, fp
 802030a:	fa1f fe8e 	uxth.w	lr, lr
 802030e:	fb0e ba0a 	mla	sl, lr, sl, fp
 8020312:	fb04 aa09 	mla	sl, r4, r9, sl
 8020316:	fb08 aa01 	mla	sl, r8, r1, sl
 802031a:	9903      	ldr	r1, [sp, #12]
 802031c:	fb11 f90c 	smulbb	r9, r1, ip
 8020320:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8020324:	9900      	ldr	r1, [sp, #0]
 8020326:	fb0a 9a07 	mla	sl, sl, r7, r9
 802032a:	fa1f fa8a 	uxth.w	sl, sl
 802032e:	f10a 0901 	add.w	r9, sl, #1
 8020332:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 8020336:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802033a:	f881 a000 	strb.w	sl, [r1]
 802033e:	f890 a001 	ldrb.w	sl, [r0, #1]
 8020342:	f896 9001 	ldrb.w	r9, [r6, #1]
 8020346:	fb02 fa0a 	mul.w	sl, r2, sl
 802034a:	9902      	ldr	r1, [sp, #8]
 802034c:	fb0e aa09 	mla	sl, lr, r9, sl
 8020350:	f895 9001 	ldrb.w	r9, [r5, #1]
 8020354:	fb04 aa09 	mla	sl, r4, r9, sl
 8020358:	f893 9001 	ldrb.w	r9, [r3, #1]
 802035c:	fb08 a909 	mla	r9, r8, r9, sl
 8020360:	fb11 fa0c 	smulbb	sl, r1, ip
 8020364:	9900      	ldr	r1, [sp, #0]
 8020366:	f3c9 2907 	ubfx	r9, r9, #8, #8
 802036a:	fb09 a907 	mla	r9, r9, r7, sl
 802036e:	fa1f f989 	uxth.w	r9, r9
 8020372:	f109 0a01 	add.w	sl, r9, #1
 8020376:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 802037a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802037e:	f881 9001 	strb.w	r9, [r1, #1]
 8020382:	7880      	ldrb	r0, [r0, #2]
 8020384:	78b6      	ldrb	r6, [r6, #2]
 8020386:	4342      	muls	r2, r0
 8020388:	78a8      	ldrb	r0, [r5, #2]
 802038a:	789b      	ldrb	r3, [r3, #2]
 802038c:	fb0e 2206 	mla	r2, lr, r6, r2
 8020390:	fb04 2400 	mla	r4, r4, r0, r2
 8020394:	fb08 4803 	mla	r8, r8, r3, r4
 8020398:	9b01      	ldr	r3, [sp, #4]
 802039a:	fb13 fc0c 	smulbb	ip, r3, ip
 802039e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80203a2:	fb08 c707 	mla	r7, r8, r7, ip
 80203a6:	b2bf      	uxth	r7, r7
 80203a8:	f107 0c01 	add.w	ip, r7, #1
 80203ac:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 80203b0:	123f      	asrs	r7, r7, #8
 80203b2:	708f      	strb	r7, [r1, #2]
 80203b4:	b007      	add	sp, #28
 80203b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80203ba:	bf00      	nop
 80203bc:	0802b2c7 	.word	0x0802b2c7
 80203c0:	0802b7be 	.word	0x0802b7be
 80203c4:	0802b390 	.word	0x0802b390

080203c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80203c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80203cc:	ed2d 8b08 	vpush	{d8-d11}
 80203d0:	b095      	sub	sp, #84	; 0x54
 80203d2:	eeb0 aa40 	vmov.f32	s20, s0
 80203d6:	eef0 9a60 	vmov.f32	s19, s1
 80203da:	930a      	str	r3, [sp, #40]	; 0x28
 80203dc:	eeb0 9a41 	vmov.f32	s18, s2
 80203e0:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 80203e4:	eeb0 8a62 	vmov.f32	s16, s5
 80203e8:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 80203ea:	eef0 8a43 	vmov.f32	s17, s6
 80203ee:	930c      	str	r3, [sp, #48]	; 0x30
 80203f0:	eef0 ba44 	vmov.f32	s23, s8
 80203f4:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80203f8:	eeb0 ba64 	vmov.f32	s22, s9
 80203fc:	9013      	str	r0, [sp, #76]	; 0x4c
 80203fe:	eef0 aa45 	vmov.f32	s21, s10
 8020402:	9310      	str	r3, [sp, #64]	; 0x40
 8020404:	6860      	ldr	r0, [r4, #4]
 8020406:	910f      	str	r1, [sp, #60]	; 0x3c
 8020408:	9212      	str	r2, [sp, #72]	; 0x48
 802040a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 802040c:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 8020410:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8020414:	fb00 1303 	mla	r3, r0, r3, r1
 8020418:	6821      	ldr	r1, [r4, #0]
 802041a:	6854      	ldr	r4, [r2, #4]
 802041c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020420:	18cb      	adds	r3, r1, r3
 8020422:	930b      	str	r3, [sp, #44]	; 0x2c
 8020424:	6813      	ldr	r3, [r2, #0]
 8020426:	930e      	str	r3, [sp, #56]	; 0x38
 8020428:	1d23      	adds	r3, r4, #4
 802042a:	9309      	str	r3, [sp, #36]	; 0x24
 802042c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802042e:	43db      	mvns	r3, r3
 8020430:	b2db      	uxtb	r3, r3
 8020432:	930d      	str	r3, [sp, #52]	; 0x34
 8020434:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020436:	2b00      	cmp	r3, #0
 8020438:	dc03      	bgt.n	8020442 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 802043a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802043c:	2b00      	cmp	r3, #0
 802043e:	f340 823c 	ble.w	80208ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 8020442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020444:	2b00      	cmp	r3, #0
 8020446:	f340 8115 	ble.w	8020674 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 802044a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 802044c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802044e:	1412      	asrs	r2, r2, #16
 8020450:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020454:	d431      	bmi.n	80204ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8020456:	1c51      	adds	r1, r2, #1
 8020458:	428d      	cmp	r5, r1
 802045a:	dd31      	ble.n	80204c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 802045c:	2b00      	cmp	r3, #0
 802045e:	db2f      	blt.n	80204c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020460:	1c59      	adds	r1, r3, #1
 8020462:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020464:	4288      	cmp	r0, r1
 8020466:	dd2b      	ble.n	80204c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802046a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802046c:	3b01      	subs	r3, #1
 802046e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8020470:	fb02 1203 	mla	r2, r2, r3, r1
 8020474:	1412      	asrs	r2, r2, #16
 8020476:	d42d      	bmi.n	80204d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8020478:	3201      	adds	r2, #1
 802047a:	4295      	cmp	r5, r2
 802047c:	dd2a      	ble.n	80204d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 802047e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8020480:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8020482:	fb02 1303 	mla	r3, r2, r3, r1
 8020486:	141b      	asrs	r3, r3, #16
 8020488:	d424      	bmi.n	80204d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 802048a:	3301      	adds	r3, #1
 802048c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802048e:	429a      	cmp	r2, r3
 8020490:	dd20      	ble.n	80204d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8020492:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020494:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 8020498:	f103 0c03 	add.w	ip, r3, #3
 802049c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802049e:	9311      	str	r3, [sp, #68]	; 0x44
 80204a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80204a2:	2b00      	cmp	r3, #0
 80204a4:	f300 814f 	bgt.w	8020746 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 80204a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80204aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80204ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80204b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80204b4:	441a      	add	r2, r3
 80204b6:	920b      	str	r2, [sp, #44]	; 0x2c
 80204b8:	e0de      	b.n	8020678 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 80204ba:	1c51      	adds	r1, r2, #1
 80204bc:	f040 80cb 	bne.w	8020656 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80204c0:	42aa      	cmp	r2, r5
 80204c2:	f280 80c8 	bge.w	8020656 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80204c6:	1c5f      	adds	r7, r3, #1
 80204c8:	f2c0 80c5 	blt.w	8020656 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80204cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80204ce:	4293      	cmp	r3, r2
 80204d0:	f280 80c1 	bge.w	8020656 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80204d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80204d6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80204d8:	9311      	str	r3, [sp, #68]	; 0x44
 80204da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80204dc:	2b00      	cmp	r3, #0
 80204de:	dde3      	ble.n	80204a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 80204e0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80204e2:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80204e4:	141a      	asrs	r2, r3, #16
 80204e6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80204e8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80204ea:	1400      	asrs	r0, r0, #16
 80204ec:	f3c1 3103 	ubfx	r1, r1, #12, #4
 80204f0:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80204f4:	f100 810e 	bmi.w	8020714 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 80204f8:	1c46      	adds	r6, r0, #1
 80204fa:	42b5      	cmp	r5, r6
 80204fc:	f340 810c 	ble.w	8020718 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 8020500:	2a00      	cmp	r2, #0
 8020502:	f2c0 8109 	blt.w	8020718 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 8020506:	1c56      	adds	r6, r2, #1
 8020508:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802050a:	42b4      	cmp	r4, r6
 802050c:	f340 8104 	ble.w	8020718 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 8020510:	fb02 0005 	mla	r0, r2, r5, r0
 8020514:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020516:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020518:	f814 e000 	ldrb.w	lr, [r4, r0]
 802051c:	4402      	add	r2, r0
 802051e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020520:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8020524:	eb00 080e 	add.w	r8, r0, lr
 8020528:	2b00      	cmp	r3, #0
 802052a:	f000 80e4 	beq.w	80206f6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 802052e:	f892 c001 	ldrb.w	ip, [r2, #1]
 8020532:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8020536:	4484      	add	ip, r0
 8020538:	2900      	cmp	r1, #0
 802053a:	f000 80e5 	beq.w	8020708 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 802053e:	1950      	adds	r0, r2, r5
 8020540:	5d52      	ldrb	r2, [r2, r5]
 8020542:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020544:	7840      	ldrb	r0, [r0, #1]
 8020546:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802054a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802054e:	4422      	add	r2, r4
 8020550:	4420      	add	r0, r4
 8020552:	b29b      	uxth	r3, r3
 8020554:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020556:	b289      	uxth	r1, r1
 8020558:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 802055c:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8020560:	fb03 fa01 	mul.w	sl, r3, r1
 8020564:	011b      	lsls	r3, r3, #4
 8020566:	f89c e000 	ldrb.w	lr, [ip]
 802056a:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 802056e:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 8020572:	eba3 030a 	sub.w	r3, r3, sl
 8020576:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020578:	b289      	uxth	r1, r1
 802057a:	b29b      	uxth	r3, r3
 802057c:	eba9 0901 	sub.w	r9, r9, r1
 8020580:	fb03 fe0e 	mul.w	lr, r3, lr
 8020584:	fa1f f989 	uxth.w	r9, r9
 8020588:	fb09 ee0b 	mla	lr, r9, fp, lr
 802058c:	f892 b000 	ldrb.w	fp, [r2]
 8020590:	fb01 ee0b 	mla	lr, r1, fp, lr
 8020594:	f890 b000 	ldrb.w	fp, [r0]
 8020598:	fb0a ee0b 	mla	lr, sl, fp, lr
 802059c:	f897 b000 	ldrb.w	fp, [r7]
 80205a0:	fb1b fb04 	smulbb	fp, fp, r4
 80205a4:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80205a8:	fb0e be06 	mla	lr, lr, r6, fp
 80205ac:	fa1f fe8e 	uxth.w	lr, lr
 80205b0:	f10e 0b01 	add.w	fp, lr, #1
 80205b4:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 80205b8:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 80205bc:	f887 b000 	strb.w	fp, [r7]
 80205c0:	f89c e001 	ldrb.w	lr, [ip, #1]
 80205c4:	f898 b001 	ldrb.w	fp, [r8, #1]
 80205c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80205cc:	fb09 ee0b 	mla	lr, r9, fp, lr
 80205d0:	f892 b001 	ldrb.w	fp, [r2, #1]
 80205d4:	fb01 ee0b 	mla	lr, r1, fp, lr
 80205d8:	f890 b001 	ldrb.w	fp, [r0, #1]
 80205dc:	fb0a ee0b 	mla	lr, sl, fp, lr
 80205e0:	f897 b001 	ldrb.w	fp, [r7, #1]
 80205e4:	fb1b fb04 	smulbb	fp, fp, r4
 80205e8:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80205ec:	fb0e be06 	mla	lr, lr, r6, fp
 80205f0:	fa1f fe8e 	uxth.w	lr, lr
 80205f4:	f10e 0b01 	add.w	fp, lr, #1
 80205f8:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80205fc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020600:	f887 e001 	strb.w	lr, [r7, #1]
 8020604:	f89c c002 	ldrb.w	ip, [ip, #2]
 8020608:	f898 e002 	ldrb.w	lr, [r8, #2]
 802060c:	fb03 f30c 	mul.w	r3, r3, ip
 8020610:	fb09 330e 	mla	r3, r9, lr, r3
 8020614:	f892 e002 	ldrb.w	lr, [r2, #2]
 8020618:	7882      	ldrb	r2, [r0, #2]
 802061a:	fb01 310e 	mla	r1, r1, lr, r3
 802061e:	fb0a 1a02 	mla	sl, sl, r2, r1
 8020622:	78b9      	ldrb	r1, [r7, #2]
 8020624:	fb11 f104 	smulbb	r1, r1, r4
 8020628:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 802062c:	fb0a 1606 	mla	r6, sl, r6, r1
 8020630:	b2b6      	uxth	r6, r6
 8020632:	1c73      	adds	r3, r6, #1
 8020634:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8020638:	1236      	asrs	r6, r6, #8
 802063a:	70be      	strb	r6, [r7, #2]
 802063c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802063e:	3703      	adds	r7, #3
 8020640:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020642:	4413      	add	r3, r2
 8020644:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8020646:	9327      	str	r3, [sp, #156]	; 0x9c
 8020648:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802064a:	4413      	add	r3, r2
 802064c:	9328      	str	r3, [sp, #160]	; 0xa0
 802064e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020650:	3b01      	subs	r3, #1
 8020652:	9311      	str	r3, [sp, #68]	; 0x44
 8020654:	e741      	b.n	80204da <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 8020656:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020658:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802065a:	4413      	add	r3, r2
 802065c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802065e:	9327      	str	r3, [sp, #156]	; 0x9c
 8020660:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020662:	4413      	add	r3, r2
 8020664:	9328      	str	r3, [sp, #160]	; 0xa0
 8020666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020668:	3b01      	subs	r3, #1
 802066a:	930a      	str	r3, [sp, #40]	; 0x28
 802066c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802066e:	3303      	adds	r3, #3
 8020670:	930b      	str	r3, [sp, #44]	; 0x2c
 8020672:	e6e6      	b.n	8020442 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8020674:	f47f aef8 	bne.w	8020468 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 8020678:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802067a:	2b00      	cmp	r3, #0
 802067c:	f340 811d 	ble.w	80208ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 8020680:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020684:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020686:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802068a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802068e:	eef0 6a48 	vmov.f32	s13, s16
 8020692:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020696:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802069a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802069e:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 80206a2:	eef0 6a68 	vmov.f32	s13, s17
 80206a6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80206aa:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 80206ae:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80206b2:	ee69 7a27 	vmul.f32	s15, s18, s15
 80206b6:	ee37 8a48 	vsub.f32	s16, s14, s16
 80206ba:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80206be:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80206c2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80206c6:	ee18 2a10 	vmov	r2, s16
 80206ca:	eeb0 8a47 	vmov.f32	s16, s14
 80206ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80206d2:	ee18 2a90 	vmov	r2, s17
 80206d6:	9329      	str	r3, [sp, #164]	; 0xa4
 80206d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80206da:	eef0 8a67 	vmov.f32	s17, s15
 80206de:	fb92 f3f3 	sdiv	r3, r2, r3
 80206e2:	932a      	str	r3, [sp, #168]	; 0xa8
 80206e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80206e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80206e8:	3b01      	subs	r3, #1
 80206ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80206ec:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80206ee:	bf08      	it	eq
 80206f0:	4613      	moveq	r3, r2
 80206f2:	930a      	str	r3, [sp, #40]	; 0x28
 80206f4:	e69e      	b.n	8020434 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 80206f6:	b151      	cbz	r1, 802070e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80206f8:	5d52      	ldrb	r2, [r2, r5]
 80206fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80206fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020700:	4402      	add	r2, r0
 8020702:	4640      	mov	r0, r8
 8020704:	46c4      	mov	ip, r8
 8020706:	e724      	b.n	8020552 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 8020708:	4640      	mov	r0, r8
 802070a:	4642      	mov	r2, r8
 802070c:	e721      	b.n	8020552 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 802070e:	4640      	mov	r0, r8
 8020710:	4642      	mov	r2, r8
 8020712:	e7f7      	b.n	8020704 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 8020714:	1c46      	adds	r6, r0, #1
 8020716:	d191      	bne.n	802063c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8020718:	4285      	cmp	r5, r0
 802071a:	dd8f      	ble.n	802063c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 802071c:	1c54      	adds	r4, r2, #1
 802071e:	db8d      	blt.n	802063c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8020720:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020722:	4294      	cmp	r4, r2
 8020724:	dd8a      	ble.n	802063c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8020726:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020728:	9002      	str	r0, [sp, #8]
 802072a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802072c:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8020730:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020732:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020734:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8020738:	e9cd 5300 	strd	r5, r3, [sp]
 802073c:	4639      	mov	r1, r7
 802073e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020740:	f7ff fd52 	bl	80201e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8020744:	e77a      	b.n	802063c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8020746:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8020748:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802074a:	1410      	asrs	r0, r2, #16
 802074c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020750:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8020752:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020754:	1412      	asrs	r2, r2, #16
 8020756:	f3c3 3303 	ubfx	r3, r3, #12, #4
 802075a:	fb05 2000 	mla	r0, r5, r0, r2
 802075e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020760:	f814 8000 	ldrb.w	r8, [r4, r0]
 8020764:	4402      	add	r2, r0
 8020766:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020768:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802076c:	eb00 0708 	add.w	r7, r0, r8
 8020770:	2b00      	cmp	r3, #0
 8020772:	f000 8093 	beq.w	802089c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 8020776:	7856      	ldrb	r6, [r2, #1]
 8020778:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802077c:	4406      	add	r6, r0
 802077e:	2900      	cmp	r1, #0
 8020780:	f000 8095 	beq.w	80208ae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8020784:	1950      	adds	r0, r2, r5
 8020786:	5d52      	ldrb	r2, [r2, r5]
 8020788:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802078a:	7840      	ldrb	r0, [r0, #1]
 802078c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020790:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020794:	4422      	add	r2, r4
 8020796:	4420      	add	r0, r4
 8020798:	b29b      	uxth	r3, r3
 802079a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802079c:	b289      	uxth	r1, r1
 802079e:	f10c 0c03 	add.w	ip, ip, #3
 80207a2:	f814 b008 	ldrb.w	fp, [r4, r8]
 80207a6:	fb03 f901 	mul.w	r9, r3, r1
 80207aa:	011b      	lsls	r3, r3, #4
 80207ac:	f896 8000 	ldrb.w	r8, [r6]
 80207b0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80207b4:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80207b8:	eba3 0309 	sub.w	r3, r3, r9
 80207bc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80207be:	b289      	uxth	r1, r1
 80207c0:	b29b      	uxth	r3, r3
 80207c2:	ebae 0e01 	sub.w	lr, lr, r1
 80207c6:	fb03 f808 	mul.w	r8, r3, r8
 80207ca:	fa1f fe8e 	uxth.w	lr, lr
 80207ce:	fb0e 880b 	mla	r8, lr, fp, r8
 80207d2:	f892 b000 	ldrb.w	fp, [r2]
 80207d6:	fb01 880b 	mla	r8, r1, fp, r8
 80207da:	f890 b000 	ldrb.w	fp, [r0]
 80207de:	fb09 880b 	mla	r8, r9, fp, r8
 80207e2:	f81c bc06 	ldrb.w	fp, [ip, #-6]
 80207e6:	fb1b fb04 	smulbb	fp, fp, r4
 80207ea:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80207ee:	fb08 b80a 	mla	r8, r8, sl, fp
 80207f2:	fa1f f888 	uxth.w	r8, r8
 80207f6:	f108 0b01 	add.w	fp, r8, #1
 80207fa:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80207fe:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020802:	f80c 8c06 	strb.w	r8, [ip, #-6]
 8020806:	f896 8001 	ldrb.w	r8, [r6, #1]
 802080a:	f897 b001 	ldrb.w	fp, [r7, #1]
 802080e:	fb03 f808 	mul.w	r8, r3, r8
 8020812:	fb0e 880b 	mla	r8, lr, fp, r8
 8020816:	f892 b001 	ldrb.w	fp, [r2, #1]
 802081a:	fb01 880b 	mla	r8, r1, fp, r8
 802081e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8020822:	fb09 880b 	mla	r8, r9, fp, r8
 8020826:	f81c bc05 	ldrb.w	fp, [ip, #-5]
 802082a:	fb1b fb04 	smulbb	fp, fp, r4
 802082e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8020832:	fb08 b80a 	mla	r8, r8, sl, fp
 8020836:	fa1f f888 	uxth.w	r8, r8
 802083a:	f108 0b01 	add.w	fp, r8, #1
 802083e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8020842:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020846:	f80c 8c05 	strb.w	r8, [ip, #-5]
 802084a:	78b6      	ldrb	r6, [r6, #2]
 802084c:	78bf      	ldrb	r7, [r7, #2]
 802084e:	4373      	muls	r3, r6
 8020850:	7896      	ldrb	r6, [r2, #2]
 8020852:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020854:	fb0e 3307 	mla	r3, lr, r7, r3
 8020858:	fb01 3306 	mla	r3, r1, r6, r3
 802085c:	7886      	ldrb	r6, [r0, #2]
 802085e:	fb09 3906 	mla	r9, r9, r6, r3
 8020862:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 8020866:	fb13 f304 	smulbb	r3, r3, r4
 802086a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 802086e:	fb09 390a 	mla	r9, r9, sl, r3
 8020872:	fa1f f989 	uxth.w	r9, r9
 8020876:	f109 0301 	add.w	r3, r9, #1
 802087a:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 802087e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020880:	4413      	add	r3, r2
 8020882:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8020884:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020888:	9327      	str	r3, [sp, #156]	; 0x9c
 802088a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802088c:	f80c 9c04 	strb.w	r9, [ip, #-4]
 8020890:	4413      	add	r3, r2
 8020892:	9328      	str	r3, [sp, #160]	; 0xa0
 8020894:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020896:	3b01      	subs	r3, #1
 8020898:	9311      	str	r3, [sp, #68]	; 0x44
 802089a:	e601      	b.n	80204a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 802089c:	b151      	cbz	r1, 80208b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 802089e:	5d52      	ldrb	r2, [r2, r5]
 80208a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80208a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80208a6:	4402      	add	r2, r0
 80208a8:	4638      	mov	r0, r7
 80208aa:	463e      	mov	r6, r7
 80208ac:	e774      	b.n	8020798 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 80208ae:	4638      	mov	r0, r7
 80208b0:	463a      	mov	r2, r7
 80208b2:	e771      	b.n	8020798 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 80208b4:	4638      	mov	r0, r7
 80208b6:	463a      	mov	r2, r7
 80208b8:	e7f7      	b.n	80208aa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 80208ba:	b015      	add	sp, #84	; 0x54
 80208bc:	ecbd 8b08 	vpop	{d8-d11}
 80208c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080208c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 80208c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208c8:	780d      	ldrb	r5, [r1, #0]
 80208ca:	f891 9002 	ldrb.w	r9, [r1, #2]
 80208ce:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 80208d2:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 80208d6:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 80208da:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 80208de:	f891 9001 	ldrb.w	r9, [r1, #1]
 80208e2:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 80208e6:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 80208ea:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80208ee:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 80208f2:	9501      	str	r5, [sp, #4]
 80208f4:	fb06 470c 	mla	r7, r6, ip, r4
 80208f8:	2e00      	cmp	r6, #0
 80208fa:	eb02 0e07 	add.w	lr, r2, r7
 80208fe:	db46      	blt.n	802098e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 8020900:	45b0      	cmp	r8, r6
 8020902:	dd44      	ble.n	802098e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 8020904:	2c00      	cmp	r4, #0
 8020906:	db40      	blt.n	802098a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 8020908:	45a4      	cmp	ip, r4
 802090a:	dd3e      	ble.n	802098a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 802090c:	5dd7      	ldrb	r7, [r2, r7]
 802090e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020912:	441f      	add	r7, r3
 8020914:	1c62      	adds	r2, r4, #1
 8020916:	d43d      	bmi.n	8020994 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 8020918:	4594      	cmp	ip, r2
 802091a:	dd3b      	ble.n	8020994 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 802091c:	f1ba 0f00 	cmp.w	sl, #0
 8020920:	d038      	beq.n	8020994 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 8020922:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8020926:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802092a:	441d      	add	r5, r3
 802092c:	3601      	adds	r6, #1
 802092e:	d435      	bmi.n	802099c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 8020930:	45b0      	cmp	r8, r6
 8020932:	dd33      	ble.n	802099c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 8020934:	b390      	cbz	r0, 802099c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 8020936:	2c00      	cmp	r4, #0
 8020938:	db2e      	blt.n	8020998 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 802093a:	45a4      	cmp	ip, r4
 802093c:	dd2c      	ble.n	8020998 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 802093e:	f81e 600c 	ldrb.w	r6, [lr, ip]
 8020942:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020946:	441e      	add	r6, r3
 8020948:	1c62      	adds	r2, r4, #1
 802094a:	d42a      	bmi.n	80209a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 802094c:	4594      	cmp	ip, r2
 802094e:	dd28      	ble.n	80209a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 8020950:	f1ba 0f00 	cmp.w	sl, #0
 8020954:	d025      	beq.n	80209a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 8020956:	44f4      	add	ip, lr
 8020958:	f89c 2001 	ldrb.w	r2, [ip, #1]
 802095c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020960:	4413      	add	r3, r2
 8020962:	f1ba 0f0f 	cmp.w	sl, #15
 8020966:	f897 8000 	ldrb.w	r8, [r7]
 802096a:	f895 9000 	ldrb.w	r9, [r5]
 802096e:	f896 e000 	ldrb.w	lr, [r6]
 8020972:	f893 c000 	ldrb.w	ip, [r3]
 8020976:	d801      	bhi.n	802097c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 8020978:	280f      	cmp	r0, #15
 802097a:	d914      	bls.n	80209a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 802097c:	4b29      	ldr	r3, [pc, #164]	; (8020a24 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 802097e:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8020982:	4a29      	ldr	r2, [pc, #164]	; (8020a28 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 8020984:	4829      	ldr	r0, [pc, #164]	; (8020a2c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 8020986:	f005 ff39 	bl	80267fc <__assert_func>
 802098a:	af01      	add	r7, sp, #4
 802098c:	e7c2      	b.n	8020914 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 802098e:	ad01      	add	r5, sp, #4
 8020990:	462f      	mov	r7, r5
 8020992:	e7cb      	b.n	802092c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8020994:	ad01      	add	r5, sp, #4
 8020996:	e7c9      	b.n	802092c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8020998:	ae01      	add	r6, sp, #4
 802099a:	e7d5      	b.n	8020948 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 802099c:	ab01      	add	r3, sp, #4
 802099e:	461e      	mov	r6, r3
 80209a0:	e7df      	b.n	8020962 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 80209a2:	ab01      	add	r3, sp, #4
 80209a4:	e7dd      	b.n	8020962 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 80209a6:	fa1f f48a 	uxth.w	r4, sl
 80209aa:	b280      	uxth	r0, r0
 80209ac:	fb04 fa00 	mul.w	sl, r4, r0
 80209b0:	0124      	lsls	r4, r4, #4
 80209b2:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80209b6:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 80209ba:	b282      	uxth	r2, r0
 80209bc:	eba4 000a 	sub.w	r0, r4, sl
 80209c0:	ebab 0b02 	sub.w	fp, fp, r2
 80209c4:	b280      	uxth	r0, r0
 80209c6:	fa1f fb8b 	uxth.w	fp, fp
 80209ca:	fb00 f909 	mul.w	r9, r0, r9
 80209ce:	fb0b 9808 	mla	r8, fp, r8, r9
 80209d2:	fb02 8e0e 	mla	lr, r2, lr, r8
 80209d6:	fb0a ec0c 	mla	ip, sl, ip, lr
 80209da:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80209de:	f881 c000 	strb.w	ip, [r1]
 80209e2:	786c      	ldrb	r4, [r5, #1]
 80209e4:	f897 c001 	ldrb.w	ip, [r7, #1]
 80209e8:	4344      	muls	r4, r0
 80209ea:	fb0b 4c0c 	mla	ip, fp, ip, r4
 80209ee:	7874      	ldrb	r4, [r6, #1]
 80209f0:	fb02 cc04 	mla	ip, r2, r4, ip
 80209f4:	785c      	ldrb	r4, [r3, #1]
 80209f6:	fb0a c404 	mla	r4, sl, r4, ip
 80209fa:	1224      	asrs	r4, r4, #8
 80209fc:	704c      	strb	r4, [r1, #1]
 80209fe:	78ad      	ldrb	r5, [r5, #2]
 8020a00:	78bc      	ldrb	r4, [r7, #2]
 8020a02:	4368      	muls	r0, r5
 8020a04:	fb0b 0b04 	mla	fp, fp, r4, r0
 8020a08:	78b0      	ldrb	r0, [r6, #2]
 8020a0a:	fb02 b000 	mla	r0, r2, r0, fp
 8020a0e:	789a      	ldrb	r2, [r3, #2]
 8020a10:	fb0a 0a02 	mla	sl, sl, r2, r0
 8020a14:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020a18:	f881 a002 	strb.w	sl, [r1, #2]
 8020a1c:	b003      	add	sp, #12
 8020a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a22:	bf00      	nop
 8020a24:	0802b2c7 	.word	0x0802b2c7
 8020a28:	0802b7be 	.word	0x0802b7be
 8020a2c:	0802b390 	.word	0x0802b390

08020a30 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8020a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a34:	ed2d 8b0a 	vpush	{d8-d12}
 8020a38:	b08f      	sub	sp, #60	; 0x3c
 8020a3a:	eeb0 aa40 	vmov.f32	s20, s0
 8020a3e:	eef0 9a60 	vmov.f32	s19, s1
 8020a42:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8020a44:	eeb0 9a41 	vmov.f32	s18, s2
 8020a48:	9307      	str	r3, [sp, #28]
 8020a4a:	eeb0 8a62 	vmov.f32	s16, s5
 8020a4e:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 8020a52:	eef0 8a43 	vmov.f32	s17, s6
 8020a56:	900d      	str	r0, [sp, #52]	; 0x34
 8020a58:	eeb0 ca44 	vmov.f32	s24, s8
 8020a5c:	6860      	ldr	r0, [r4, #4]
 8020a5e:	eef0 ba64 	vmov.f32	s23, s9
 8020a62:	9309      	str	r3, [sp, #36]	; 0x24
 8020a64:	eeb0 ba45 	vmov.f32	s22, s10
 8020a68:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8020a6c:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 8020a70:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 8020a74:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 8020a78:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020a7a:	fb00 1303 	mla	r3, r0, r3, r1
 8020a7e:	6821      	ldr	r1, [r4, #0]
 8020a80:	6854      	ldr	r4, [r2, #4]
 8020a82:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020a86:	3404      	adds	r4, #4
 8020a88:	18cb      	adds	r3, r1, r3
 8020a8a:	9308      	str	r3, [sp, #32]
 8020a8c:	6813      	ldr	r3, [r2, #0]
 8020a8e:	930a      	str	r3, [sp, #40]	; 0x28
 8020a90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020a92:	2b00      	cmp	r3, #0
 8020a94:	dc03      	bgt.n	8020a9e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8020a96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020a98:	2b00      	cmp	r3, #0
 8020a9a:	f340 81d2 	ble.w	8020e42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 8020a9e:	9b07      	ldr	r3, [sp, #28]
 8020aa0:	2b00      	cmp	r3, #0
 8020aa2:	f340 80e3 	ble.w	8020c6c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 8020aa6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8020aa8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020aaa:	1412      	asrs	r2, r2, #16
 8020aac:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020ab0:	d42f      	bmi.n	8020b12 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8020ab2:	1c51      	adds	r1, r2, #1
 8020ab4:	428d      	cmp	r5, r1
 8020ab6:	dd2f      	ble.n	8020b18 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8020ab8:	2b00      	cmp	r3, #0
 8020aba:	db2d      	blt.n	8020b18 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8020abc:	1c59      	adds	r1, r3, #1
 8020abe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020ac0:	4288      	cmp	r0, r1
 8020ac2:	dd29      	ble.n	8020b18 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8020ac4:	9b07      	ldr	r3, [sp, #28]
 8020ac6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8020ac8:	3b01      	subs	r3, #1
 8020aca:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8020acc:	fb02 1203 	mla	r2, r2, r3, r1
 8020ad0:	1412      	asrs	r2, r2, #16
 8020ad2:	d42b      	bmi.n	8020b2c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8020ad4:	3201      	adds	r2, #1
 8020ad6:	4295      	cmp	r5, r2
 8020ad8:	dd28      	ble.n	8020b2c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8020ada:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8020adc:	9924      	ldr	r1, [sp, #144]	; 0x90
 8020ade:	fb02 1303 	mla	r3, r2, r3, r1
 8020ae2:	141b      	asrs	r3, r3, #16
 8020ae4:	d422      	bmi.n	8020b2c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8020ae6:	3301      	adds	r3, #1
 8020ae8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020aea:	429a      	cmp	r2, r3
 8020aec:	dd1e      	ble.n	8020b2c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8020aee:	9b08      	ldr	r3, [sp, #32]
 8020af0:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8020af4:	f103 0803 	add.w	r8, r3, #3
 8020af8:	f1ba 0f00 	cmp.w	sl, #0
 8020afc:	f300 8119 	bgt.w	8020d32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 8020b00:	9b07      	ldr	r3, [sp, #28]
 8020b02:	9a08      	ldr	r2, [sp, #32]
 8020b04:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020b08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020b0c:	441a      	add	r2, r3
 8020b0e:	9208      	str	r2, [sp, #32]
 8020b10:	e0ae      	b.n	8020c70 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 8020b12:	1c51      	adds	r1, r2, #1
 8020b14:	f040 809b 	bne.w	8020c4e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8020b18:	42aa      	cmp	r2, r5
 8020b1a:	f280 8098 	bge.w	8020c4e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8020b1e:	1c5a      	adds	r2, r3, #1
 8020b20:	f2c0 8095 	blt.w	8020c4e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8020b24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020b26:	4293      	cmp	r3, r2
 8020b28:	f280 8091 	bge.w	8020c4e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8020b2c:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 8020b30:	f1bb 0f00 	cmp.w	fp, #0
 8020b34:	dde4      	ble.n	8020b00 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 8020b36:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020b38:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8020b3a:	141a      	asrs	r2, r3, #16
 8020b3c:	9924      	ldr	r1, [sp, #144]	; 0x90
 8020b3e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020b40:	1400      	asrs	r0, r0, #16
 8020b42:	f3c1 3103 	ubfx	r1, r1, #12, #4
 8020b46:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8020b4a:	f100 80dc 	bmi.w	8020d06 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 8020b4e:	1c47      	adds	r7, r0, #1
 8020b50:	42bd      	cmp	r5, r7
 8020b52:	f340 80da 	ble.w	8020d0a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8020b56:	2a00      	cmp	r2, #0
 8020b58:	f2c0 80d7 	blt.w	8020d0a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8020b5c:	f102 0c01 	add.w	ip, r2, #1
 8020b60:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020b62:	4567      	cmp	r7, ip
 8020b64:	f340 80d1 	ble.w	8020d0a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8020b68:	fb02 0005 	mla	r0, r2, r5, r0
 8020b6c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8020b6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020b70:	f817 8000 	ldrb.w	r8, [r7, r0]
 8020b74:	4402      	add	r2, r0
 8020b76:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8020b7a:	eb04 0c08 	add.w	ip, r4, r8
 8020b7e:	2b00      	cmp	r3, #0
 8020b80:	f000 80b3 	beq.w	8020cea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 8020b84:	7857      	ldrb	r7, [r2, #1]
 8020b86:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020b8a:	4427      	add	r7, r4
 8020b8c:	2900      	cmp	r1, #0
 8020b8e:	f000 80b4 	beq.w	8020cfa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 8020b92:	1950      	adds	r0, r2, r5
 8020b94:	5d52      	ldrb	r2, [r2, r5]
 8020b96:	7840      	ldrb	r0, [r0, #1]
 8020b98:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020b9c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020ba0:	4422      	add	r2, r4
 8020ba2:	4420      	add	r0, r4
 8020ba4:	b29b      	uxth	r3, r3
 8020ba6:	f814 a008 	ldrb.w	sl, [r4, r8]
 8020baa:	b289      	uxth	r1, r1
 8020bac:	f897 8000 	ldrb.w	r8, [r7]
 8020bb0:	fb03 f901 	mul.w	r9, r3, r1
 8020bb4:	011b      	lsls	r3, r3, #4
 8020bb6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020bba:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8020bbe:	eba3 0309 	sub.w	r3, r3, r9
 8020bc2:	b289      	uxth	r1, r1
 8020bc4:	b29b      	uxth	r3, r3
 8020bc6:	ebae 0e01 	sub.w	lr, lr, r1
 8020bca:	fb03 f808 	mul.w	r8, r3, r8
 8020bce:	fa1f fe8e 	uxth.w	lr, lr
 8020bd2:	fb0e 880a 	mla	r8, lr, sl, r8
 8020bd6:	f892 a000 	ldrb.w	sl, [r2]
 8020bda:	fb01 880a 	mla	r8, r1, sl, r8
 8020bde:	f890 a000 	ldrb.w	sl, [r0]
 8020be2:	fb09 880a 	mla	r8, r9, sl, r8
 8020be6:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020bea:	f886 8000 	strb.w	r8, [r6]
 8020bee:	f897 8001 	ldrb.w	r8, [r7, #1]
 8020bf2:	f89c a001 	ldrb.w	sl, [ip, #1]
 8020bf6:	fb03 f808 	mul.w	r8, r3, r8
 8020bfa:	fb0e 880a 	mla	r8, lr, sl, r8
 8020bfe:	f892 a001 	ldrb.w	sl, [r2, #1]
 8020c02:	fb01 880a 	mla	r8, r1, sl, r8
 8020c06:	f890 a001 	ldrb.w	sl, [r0, #1]
 8020c0a:	fb09 880a 	mla	r8, r9, sl, r8
 8020c0e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020c12:	f886 8001 	strb.w	r8, [r6, #1]
 8020c16:	78bf      	ldrb	r7, [r7, #2]
 8020c18:	f89c c002 	ldrb.w	ip, [ip, #2]
 8020c1c:	437b      	muls	r3, r7
 8020c1e:	7892      	ldrb	r2, [r2, #2]
 8020c20:	fb0e 330c 	mla	r3, lr, ip, r3
 8020c24:	fb01 3102 	mla	r1, r1, r2, r3
 8020c28:	7882      	ldrb	r2, [r0, #2]
 8020c2a:	fb09 1902 	mla	r9, r9, r2, r1
 8020c2e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020c32:	f886 9002 	strb.w	r9, [r6, #2]
 8020c36:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020c38:	3603      	adds	r6, #3
 8020c3a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8020c3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020c40:	4413      	add	r3, r2
 8020c42:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8020c44:	9323      	str	r3, [sp, #140]	; 0x8c
 8020c46:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020c48:	4413      	add	r3, r2
 8020c4a:	9324      	str	r3, [sp, #144]	; 0x90
 8020c4c:	e770      	b.n	8020b30 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 8020c4e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020c50:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8020c52:	4413      	add	r3, r2
 8020c54:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8020c56:	9323      	str	r3, [sp, #140]	; 0x8c
 8020c58:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020c5a:	4413      	add	r3, r2
 8020c5c:	9324      	str	r3, [sp, #144]	; 0x90
 8020c5e:	9b07      	ldr	r3, [sp, #28]
 8020c60:	3b01      	subs	r3, #1
 8020c62:	9307      	str	r3, [sp, #28]
 8020c64:	9b08      	ldr	r3, [sp, #32]
 8020c66:	3303      	adds	r3, #3
 8020c68:	9308      	str	r3, [sp, #32]
 8020c6a:	e718      	b.n	8020a9e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8020c6c:	f47f af2a 	bne.w	8020ac4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8020c70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020c72:	2b00      	cmp	r3, #0
 8020c74:	f340 80e5 	ble.w	8020e42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 8020c78:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8020c7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020c7e:	ee79 9aab 	vadd.f32	s19, s19, s23
 8020c82:	eef0 6a48 	vmov.f32	s13, s16
 8020c86:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8020c8a:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8020c8e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020c92:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8020c96:	eef0 6a68 	vmov.f32	s13, s17
 8020c9a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020c9e:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 8020ca2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020ca6:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020caa:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020cae:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020cb2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020cb6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020cba:	ee18 2a10 	vmov	r2, s16
 8020cbe:	eeb0 8a47 	vmov.f32	s16, s14
 8020cc2:	fb92 f3f3 	sdiv	r3, r2, r3
 8020cc6:	ee18 2a90 	vmov	r2, s17
 8020cca:	9325      	str	r3, [sp, #148]	; 0x94
 8020ccc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020cce:	eef0 8a67 	vmov.f32	s17, s15
 8020cd2:	fb92 f3f3 	sdiv	r3, r2, r3
 8020cd6:	9326      	str	r3, [sp, #152]	; 0x98
 8020cd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020cda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020cdc:	3b01      	subs	r3, #1
 8020cde:	930b      	str	r3, [sp, #44]	; 0x2c
 8020ce0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020ce2:	bf08      	it	eq
 8020ce4:	4613      	moveq	r3, r2
 8020ce6:	9307      	str	r3, [sp, #28]
 8020ce8:	e6d2      	b.n	8020a90 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8020cea:	b149      	cbz	r1, 8020d00 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8020cec:	5d52      	ldrb	r2, [r2, r5]
 8020cee:	4660      	mov	r0, ip
 8020cf0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020cf4:	4422      	add	r2, r4
 8020cf6:	4667      	mov	r7, ip
 8020cf8:	e754      	b.n	8020ba4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 8020cfa:	4660      	mov	r0, ip
 8020cfc:	4662      	mov	r2, ip
 8020cfe:	e751      	b.n	8020ba4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 8020d00:	4660      	mov	r0, ip
 8020d02:	4662      	mov	r2, ip
 8020d04:	e7f7      	b.n	8020cf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 8020d06:	1c47      	adds	r7, r0, #1
 8020d08:	d195      	bne.n	8020c36 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8020d0a:	4285      	cmp	r5, r0
 8020d0c:	dd93      	ble.n	8020c36 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8020d0e:	1c57      	adds	r7, r2, #1
 8020d10:	db91      	blt.n	8020c36 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8020d12:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020d14:	4297      	cmp	r7, r2
 8020d16:	dd8e      	ble.n	8020c36 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8020d18:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8020d1c:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8020d20:	e9cd 5700 	strd	r5, r7, [sp]
 8020d24:	4623      	mov	r3, r4
 8020d26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020d28:	4631      	mov	r1, r6
 8020d2a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020d2c:	f7ff fdca 	bl	80208c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8020d30:	e781      	b.n	8020c36 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8020d32:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8020d34:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8020d36:	1410      	asrs	r0, r2, #16
 8020d38:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020d3c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8020d3e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020d40:	1412      	asrs	r2, r2, #16
 8020d42:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8020d46:	fb05 2000 	mla	r0, r5, r0, r2
 8020d4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020d4c:	f816 e000 	ldrb.w	lr, [r6, r0]
 8020d50:	4402      	add	r2, r0
 8020d52:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8020d56:	eb04 070e 	add.w	r7, r4, lr
 8020d5a:	2b00      	cmp	r3, #0
 8020d5c:	d063      	beq.n	8020e26 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 8020d5e:	7856      	ldrb	r6, [r2, #1]
 8020d60:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020d64:	4426      	add	r6, r4
 8020d66:	2900      	cmp	r1, #0
 8020d68:	d065      	beq.n	8020e36 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 8020d6a:	1950      	adds	r0, r2, r5
 8020d6c:	5d52      	ldrb	r2, [r2, r5]
 8020d6e:	7840      	ldrb	r0, [r0, #1]
 8020d70:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020d74:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020d78:	4422      	add	r2, r4
 8020d7a:	4420      	add	r0, r4
 8020d7c:	b29b      	uxth	r3, r3
 8020d7e:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8020d82:	b289      	uxth	r1, r1
 8020d84:	f896 e000 	ldrb.w	lr, [r6]
 8020d88:	f108 0803 	add.w	r8, r8, #3
 8020d8c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020d90:	fb03 f901 	mul.w	r9, r3, r1
 8020d94:	011b      	lsls	r3, r3, #4
 8020d96:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020d9a:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8020d9e:	eba3 0309 	sub.w	r3, r3, r9
 8020da2:	b289      	uxth	r1, r1
 8020da4:	b29b      	uxth	r3, r3
 8020da6:	ebac 0c01 	sub.w	ip, ip, r1
 8020daa:	fb03 fe0e 	mul.w	lr, r3, lr
 8020dae:	fa1f fc8c 	uxth.w	ip, ip
 8020db2:	fb0c ee0b 	mla	lr, ip, fp, lr
 8020db6:	f892 b000 	ldrb.w	fp, [r2]
 8020dba:	fb01 ee0b 	mla	lr, r1, fp, lr
 8020dbe:	f890 b000 	ldrb.w	fp, [r0]
 8020dc2:	fb09 ee0b 	mla	lr, r9, fp, lr
 8020dc6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020dca:	f808 ec06 	strb.w	lr, [r8, #-6]
 8020dce:	f896 e001 	ldrb.w	lr, [r6, #1]
 8020dd2:	f897 b001 	ldrb.w	fp, [r7, #1]
 8020dd6:	fb03 fe0e 	mul.w	lr, r3, lr
 8020dda:	fb0c ee0b 	mla	lr, ip, fp, lr
 8020dde:	f892 b001 	ldrb.w	fp, [r2, #1]
 8020de2:	fb01 ee0b 	mla	lr, r1, fp, lr
 8020de6:	f890 b001 	ldrb.w	fp, [r0, #1]
 8020dea:	fb09 ee0b 	mla	lr, r9, fp, lr
 8020dee:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020df2:	f808 ec05 	strb.w	lr, [r8, #-5]
 8020df6:	78b6      	ldrb	r6, [r6, #2]
 8020df8:	78bf      	ldrb	r7, [r7, #2]
 8020dfa:	4373      	muls	r3, r6
 8020dfc:	7896      	ldrb	r6, [r2, #2]
 8020dfe:	7882      	ldrb	r2, [r0, #2]
 8020e00:	fb0c 3307 	mla	r3, ip, r7, r3
 8020e04:	fb01 3306 	mla	r3, r1, r6, r3
 8020e08:	fb09 3902 	mla	r9, r9, r2, r3
 8020e0c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020e0e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8020e10:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020e14:	4413      	add	r3, r2
 8020e16:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8020e18:	f808 9c04 	strb.w	r9, [r8, #-4]
 8020e1c:	9323      	str	r3, [sp, #140]	; 0x8c
 8020e1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020e20:	4413      	add	r3, r2
 8020e22:	9324      	str	r3, [sp, #144]	; 0x90
 8020e24:	e668      	b.n	8020af8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8020e26:	b149      	cbz	r1, 8020e3c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 8020e28:	5d52      	ldrb	r2, [r2, r5]
 8020e2a:	4638      	mov	r0, r7
 8020e2c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020e30:	4422      	add	r2, r4
 8020e32:	463e      	mov	r6, r7
 8020e34:	e7a2      	b.n	8020d7c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 8020e36:	4638      	mov	r0, r7
 8020e38:	463a      	mov	r2, r7
 8020e3a:	e79f      	b.n	8020d7c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 8020e3c:	4638      	mov	r0, r7
 8020e3e:	463a      	mov	r2, r7
 8020e40:	e7f7      	b.n	8020e32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 8020e42:	b00f      	add	sp, #60	; 0x3c
 8020e44:	ecbd 8b0a 	vpop	{d8-d12}
 8020e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020e4c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8020e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e50:	b087      	sub	sp, #28
 8020e52:	7888      	ldrb	r0, [r1, #2]
 8020e54:	9002      	str	r0, [sp, #8]
 8020e56:	7848      	ldrb	r0, [r1, #1]
 8020e58:	9e02      	ldr	r6, [sp, #8]
 8020e5a:	9003      	str	r0, [sp, #12]
 8020e5c:	7808      	ldrb	r0, [r1, #0]
 8020e5e:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8020e62:	9004      	str	r0, [sp, #16]
 8020e64:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8020e68:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 8020e6c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020e70:	9e03      	ldr	r6, [sp, #12]
 8020e72:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 8020e76:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 8020e7a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 8020e7e:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 8020e82:	fb04 7508 	mla	r5, r4, r8, r7
 8020e86:	2c00      	cmp	r4, #0
 8020e88:	eb02 0905 	add.w	r9, r2, r5
 8020e8c:	db45      	blt.n	8020f1a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 8020e8e:	45a2      	cmp	sl, r4
 8020e90:	dd43      	ble.n	8020f1a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 8020e92:	2f00      	cmp	r7, #0
 8020e94:	db3f      	blt.n	8020f16 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 8020e96:	45b8      	cmp	r8, r7
 8020e98:	dd3d      	ble.n	8020f16 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 8020e9a:	5d52      	ldrb	r2, [r2, r5]
 8020e9c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8020ea0:	1c7a      	adds	r2, r7, #1
 8020ea2:	d43d      	bmi.n	8020f20 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 8020ea4:	4590      	cmp	r8, r2
 8020ea6:	dd3b      	ble.n	8020f20 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 8020ea8:	f1bc 0f00 	cmp.w	ip, #0
 8020eac:	d038      	beq.n	8020f20 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 8020eae:	f899 2001 	ldrb.w	r2, [r9, #1]
 8020eb2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8020eb6:	3401      	adds	r4, #1
 8020eb8:	d436      	bmi.n	8020f28 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 8020eba:	45a2      	cmp	sl, r4
 8020ebc:	dd34      	ble.n	8020f28 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 8020ebe:	f1be 0f00 	cmp.w	lr, #0
 8020ec2:	d031      	beq.n	8020f28 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 8020ec4:	2f00      	cmp	r7, #0
 8020ec6:	db2d      	blt.n	8020f24 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 8020ec8:	45b8      	cmp	r8, r7
 8020eca:	dd2b      	ble.n	8020f24 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 8020ecc:	f819 2008 	ldrb.w	r2, [r9, r8]
 8020ed0:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8020ed4:	3701      	adds	r7, #1
 8020ed6:	d409      	bmi.n	8020eec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8020ed8:	45b8      	cmp	r8, r7
 8020eda:	dd07      	ble.n	8020eec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8020edc:	f1bc 0f00 	cmp.w	ip, #0
 8020ee0:	d004      	beq.n	8020eec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8020ee2:	44c8      	add	r8, r9
 8020ee4:	f898 2001 	ldrb.w	r2, [r8, #1]
 8020ee8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8020eec:	f1bc 0f0f 	cmp.w	ip, #15
 8020ef0:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8020ef4:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8020ef8:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8020efc:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8020f00:	d802      	bhi.n	8020f08 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 8020f02:	f1be 0f0f 	cmp.w	lr, #15
 8020f06:	d911      	bls.n	8020f2c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 8020f08:	4b77      	ldr	r3, [pc, #476]	; (80210e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 8020f0a:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8020f0e:	4a77      	ldr	r2, [pc, #476]	; (80210ec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 8020f10:	4877      	ldr	r0, [pc, #476]	; (80210f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 8020f12:	f005 fc73 	bl	80267fc <__assert_func>
 8020f16:	4606      	mov	r6, r0
 8020f18:	e7c2      	b.n	8020ea0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 8020f1a:	4605      	mov	r5, r0
 8020f1c:	4606      	mov	r6, r0
 8020f1e:	e7ca      	b.n	8020eb6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 8020f20:	4605      	mov	r5, r0
 8020f22:	e7c8      	b.n	8020eb6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 8020f24:	4604      	mov	r4, r0
 8020f26:	e7d5      	b.n	8020ed4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 8020f28:	4604      	mov	r4, r0
 8020f2a:	e7df      	b.n	8020eec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8020f2c:	fa1f fc8c 	uxth.w	ip, ip
 8020f30:	fa1f f28e 	uxth.w	r2, lr
 8020f34:	fb02 fe0c 	mul.w	lr, r2, ip
 8020f38:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8020f3c:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 8020f40:	ebac 070e 	sub.w	r7, ip, lr
 8020f44:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8020f48:	b292      	uxth	r2, r2
 8020f4a:	b2bf      	uxth	r7, r7
 8020f4c:	1a9b      	subs	r3, r3, r2
 8020f4e:	fb07 fc0a 	mul.w	ip, r7, sl
 8020f52:	b29b      	uxth	r3, r3
 8020f54:	fb03 cc0b 	mla	ip, r3, fp, ip
 8020f58:	9301      	str	r3, [sp, #4]
 8020f5a:	fb02 cc09 	mla	ip, r2, r9, ip
 8020f5e:	fb0e cc08 	mla	ip, lr, r8, ip
 8020f62:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8020f66:	9305      	str	r3, [sp, #20]
 8020f68:	2b00      	cmp	r3, #0
 8020f6a:	f000 80b9 	beq.w	80210e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 8020f6e:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8020f72:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020f76:	fb0b fc0c 	mul.w	ip, fp, ip
 8020f7a:	fb0b f606 	mul.w	r6, fp, r6
 8020f7e:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8020f82:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020f86:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8020f8a:	44dc      	add	ip, fp
 8020f8c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8020f90:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8020f94:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020f98:	fb0a fb0b 	mul.w	fp, sl, fp
 8020f9c:	fb0a fa05 	mul.w	sl, sl, r5
 8020fa0:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8020fa4:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8020fa8:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 8020fac:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8020fb0:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8020fb4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020fb8:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 8020fbc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020fc0:	0a36      	lsrs	r6, r6, #8
 8020fc2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020fc6:	44dc      	add	ip, fp
 8020fc8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020fcc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020fd0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020fd4:	fb09 fb0b 	mul.w	fp, r9, fp
 8020fd8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020fdc:	fb09 f904 	mul.w	r9, r9, r4
 8020fe0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020fe4:	ea4f 251b 	mov.w	r5, fp, lsr #8
 8020fe8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020fec:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8020ff0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020ff4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020ff8:	fb0c fc07 	mul.w	ip, ip, r7
 8020ffc:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8021000:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 8021004:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021008:	445d      	add	r5, fp
 802100a:	fb08 f404 	mul.w	r4, r8, r4
 802100e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021012:	fb08 f800 	mul.w	r8, r8, r0
 8021016:	0a2d      	lsrs	r5, r5, #8
 8021018:	0a20      	lsrs	r0, r4, #8
 802101a:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 802101e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021022:	fb07 f70a 	mul.w	r7, r7, sl
 8021026:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802102a:	4404      	add	r4, r0
 802102c:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8021030:	0a24      	lsrs	r4, r4, #8
 8021032:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 8021036:	9801      	ldr	r0, [sp, #4]
 8021038:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802103c:	fb03 cc00 	mla	ip, r3, r0, ip
 8021040:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8021044:	fb00 7606 	mla	r6, r0, r6, r7
 8021048:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 802104c:	fb04 cc0e 	mla	ip, r4, lr, ip
 8021050:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8021054:	b280      	uxth	r0, r0
 8021056:	9c04      	ldr	r4, [sp, #16]
 8021058:	fb05 cc02 	mla	ip, r5, r2, ip
 802105c:	fb0e 6e08 	mla	lr, lr, r8, r6
 8021060:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021064:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8021068:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 802106c:	fb02 ec0c 	mla	ip, r2, ip, lr
 8021070:	9a05      	ldr	r2, [sp, #20]
 8021072:	4342      	muls	r2, r0
 8021074:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021078:	1c53      	adds	r3, r2, #1
 802107a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802107e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021082:	ea45 0c0c 	orr.w	ip, r5, ip
 8021086:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 802108a:	fa5f f28c 	uxtb.w	r2, ip
 802108e:	b2db      	uxtb	r3, r3
 8021090:	fb14 f403 	smulbb	r4, r4, r3
 8021094:	fb02 4200 	mla	r2, r2, r0, r4
 8021098:	b292      	uxth	r2, r2
 802109a:	1c54      	adds	r4, r2, #1
 802109c:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 80210a0:	9c03      	ldr	r4, [sp, #12]
 80210a2:	fb14 f403 	smulbb	r4, r4, r3
 80210a6:	1212      	asrs	r2, r2, #8
 80210a8:	700a      	strb	r2, [r1, #0]
 80210aa:	f3cc 2207 	ubfx	r2, ip, #8, #8
 80210ae:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80210b2:	fb02 4200 	mla	r2, r2, r0, r4
 80210b6:	b292      	uxth	r2, r2
 80210b8:	1c54      	adds	r4, r2, #1
 80210ba:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 80210be:	1212      	asrs	r2, r2, #8
 80210c0:	704a      	strb	r2, [r1, #1]
 80210c2:	9a02      	ldr	r2, [sp, #8]
 80210c4:	fb12 f303 	smulbb	r3, r2, r3
 80210c8:	fb0c 3c00 	mla	ip, ip, r0, r3
 80210cc:	fa1f fc8c 	uxth.w	ip, ip
 80210d0:	f10c 0301 	add.w	r3, ip, #1
 80210d4:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80210d8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80210dc:	f881 c002 	strb.w	ip, [r1, #2]
 80210e0:	b007      	add	sp, #28
 80210e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210e6:	bf00      	nop
 80210e8:	0802b2c7 	.word	0x0802b2c7
 80210ec:	0802b7be 	.word	0x0802b7be
 80210f0:	0802b390 	.word	0x0802b390

080210f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80210f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80210f8:	ed2d 8b08 	vpush	{d8-d11}
 80210fc:	b09b      	sub	sp, #108	; 0x6c
 80210fe:	eeb0 aa40 	vmov.f32	s20, s0
 8021102:	eef0 9a60 	vmov.f32	s19, s1
 8021106:	930a      	str	r3, [sp, #40]	; 0x28
 8021108:	eeb0 9a41 	vmov.f32	s18, s2
 802110c:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 8021110:	eeb0 8a62 	vmov.f32	s16, s5
 8021114:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 8021116:	eef0 8a43 	vmov.f32	s17, s6
 802111a:	9312      	str	r3, [sp, #72]	; 0x48
 802111c:	eef0 ba44 	vmov.f32	s23, s8
 8021120:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8021124:	eeb0 ba64 	vmov.f32	s22, s9
 8021128:	9019      	str	r0, [sp, #100]	; 0x64
 802112a:	eef0 aa45 	vmov.f32	s21, s10
 802112e:	9114      	str	r1, [sp, #80]	; 0x50
 8021130:	9317      	str	r3, [sp, #92]	; 0x5c
 8021132:	6868      	ldr	r0, [r5, #4]
 8021134:	9218      	str	r2, [sp, #96]	; 0x60
 8021136:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8021138:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 802113c:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8021140:	fb00 1303 	mla	r3, r0, r3, r1
 8021144:	6829      	ldr	r1, [r5, #0]
 8021146:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802114a:	18cb      	adds	r3, r1, r3
 802114c:	930d      	str	r3, [sp, #52]	; 0x34
 802114e:	6813      	ldr	r3, [r2, #0]
 8021150:	9313      	str	r3, [sp, #76]	; 0x4c
 8021152:	6853      	ldr	r3, [r2, #4]
 8021154:	3304      	adds	r3, #4
 8021156:	9309      	str	r3, [sp, #36]	; 0x24
 8021158:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802115a:	2b00      	cmp	r3, #0
 802115c:	dc03      	bgt.n	8021166 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 802115e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021160:	2b00      	cmp	r3, #0
 8021162:	f340 8352 	ble.w	802180a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 8021166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021168:	2b00      	cmp	r3, #0
 802116a:	f340 81a2 	ble.w	80214b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3be>
 802116e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021170:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021172:	1412      	asrs	r2, r2, #16
 8021174:	ea4f 4323 	mov.w	r3, r3, asr #16
 8021178:	d431      	bmi.n	80211de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 802117a:	1c51      	adds	r1, r2, #1
 802117c:	428c      	cmp	r4, r1
 802117e:	dd31      	ble.n	80211e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8021180:	2b00      	cmp	r3, #0
 8021182:	db2f      	blt.n	80211e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8021184:	1c59      	adds	r1, r3, #1
 8021186:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021188:	4288      	cmp	r0, r1
 802118a:	dd2b      	ble.n	80211e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 802118c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802118e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8021190:	3b01      	subs	r3, #1
 8021192:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8021194:	fb02 1203 	mla	r2, r2, r3, r1
 8021198:	1412      	asrs	r2, r2, #16
 802119a:	d42d      	bmi.n	80211f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 802119c:	3201      	adds	r2, #1
 802119e:	4294      	cmp	r4, r2
 80211a0:	dd2a      	ble.n	80211f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80211a2:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80211a4:	992e      	ldr	r1, [sp, #184]	; 0xb8
 80211a6:	fb02 1303 	mla	r3, r2, r3, r1
 80211aa:	141b      	asrs	r3, r3, #16
 80211ac:	d424      	bmi.n	80211f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80211ae:	3301      	adds	r3, #1
 80211b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80211b2:	429a      	cmp	r2, r3
 80211b4:	dd20      	ble.n	80211f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80211b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80211b8:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 80211bc:	f103 0e03 	add.w	lr, r3, #3
 80211c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80211c2:	9315      	str	r3, [sp, #84]	; 0x54
 80211c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80211c6:	2b00      	cmp	r3, #0
 80211c8:	f300 81de 	bgt.w	8021588 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 80211cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80211ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80211d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80211d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80211d8:	441a      	add	r2, r3
 80211da:	920d      	str	r2, [sp, #52]	; 0x34
 80211dc:	e16b      	b.n	80214b6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c2>
 80211de:	1c51      	adds	r1, r2, #1
 80211e0:	f040 8158 	bne.w	8021494 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 80211e4:	42a2      	cmp	r2, r4
 80211e6:	f280 8155 	bge.w	8021494 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 80211ea:	1c5a      	adds	r2, r3, #1
 80211ec:	f2c0 8152 	blt.w	8021494 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 80211f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80211f2:	4293      	cmp	r3, r2
 80211f4:	f280 814e 	bge.w	8021494 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 80211f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80211fa:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80211fc:	9316      	str	r3, [sp, #88]	; 0x58
 80211fe:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 8021202:	9315      	str	r3, [sp, #84]	; 0x54
 8021204:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021206:	2b00      	cmp	r3, #0
 8021208:	dde0      	ble.n	80211cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 802120a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802120c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802120e:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8021212:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8021214:	141b      	asrs	r3, r3, #16
 8021216:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802121a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802121c:	1412      	asrs	r2, r2, #16
 802121e:	f100 819a 	bmi.w	8021556 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 8021222:	1c55      	adds	r5, r2, #1
 8021224:	42ac      	cmp	r4, r5
 8021226:	f340 8198 	ble.w	802155a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 802122a:	2b00      	cmp	r3, #0
 802122c:	f2c0 8195 	blt.w	802155a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8021230:	1c5d      	adds	r5, r3, #1
 8021232:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8021234:	42af      	cmp	r7, r5
 8021236:	f340 8190 	ble.w	802155a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 802123a:	fb03 2304 	mla	r3, r3, r4, r2
 802123e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021240:	18d5      	adds	r5, r2, r3
 8021242:	5cd3      	ldrb	r3, [r2, r3]
 8021244:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802124a:	0e1f      	lsrs	r7, r3, #24
 802124c:	2800      	cmp	r0, #0
 802124e:	f000 8171 	beq.w	8021534 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 8021252:	f895 c001 	ldrb.w	ip, [r5, #1]
 8021256:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 802125a:	920e      	str	r2, [sp, #56]	; 0x38
 802125c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8021260:	2900      	cmp	r1, #0
 8021262:	f000 8172 	beq.w	802154a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 8021266:	eb05 0c04 	add.w	ip, r5, r4
 802126a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802126c:	5d2d      	ldrb	r5, [r5, r4]
 802126e:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 8021272:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8021276:	950b      	str	r5, [sp, #44]	; 0x2c
 8021278:	ea4f 6915 	mov.w	r9, r5, lsr #24
 802127c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802127e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8021282:	0e15      	lsrs	r5, r2, #24
 8021284:	920f      	str	r2, [sp, #60]	; 0x3c
 8021286:	b280      	uxth	r0, r0
 8021288:	b289      	uxth	r1, r1
 802128a:	fb00 fa01 	mul.w	sl, r0, r1
 802128e:	0100      	lsls	r0, r0, #4
 8021290:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8021294:	eba0 080a 	sub.w	r8, r0, sl
 8021298:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 802129c:	b289      	uxth	r1, r1
 802129e:	fa1f f888 	uxth.w	r8, r8
 80212a2:	1a52      	subs	r2, r2, r1
 80212a4:	fb08 f00e 	mul.w	r0, r8, lr
 80212a8:	b292      	uxth	r2, r2
 80212aa:	fb02 0007 	mla	r0, r2, r7, r0
 80212ae:	fb01 0009 	mla	r0, r1, r9, r0
 80212b2:	fb0a 0005 	mla	r0, sl, r5, r0
 80212b6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80212ba:	2800      	cmp	r0, #0
 80212bc:	f000 80dd 	beq.w	802147a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 80212c0:	2fff      	cmp	r7, #255	; 0xff
 80212c2:	d01a      	beq.n	80212fa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 80212c4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80212c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80212cc:	fb07 fc0c 	mul.w	ip, r7, ip
 80212d0:	435f      	muls	r7, r3
 80212d2:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80212d6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80212da:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 80212de:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80212e2:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 80212e6:	4463      	add	r3, ip
 80212e8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80212ec:	0a1b      	lsrs	r3, r3, #8
 80212ee:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80212f2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80212f6:	ea43 030b 	orr.w	r3, r3, fp
 80212fa:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80212fe:	d01e      	beq.n	802133e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 8021300:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8021302:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 8021306:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802130a:	fb0e fb0b 	mul.w	fp, lr, fp
 802130e:	fb0e fe07 	mul.w	lr, lr, r7
 8021312:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8021316:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802131a:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 802131e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021322:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8021326:	44dc      	add	ip, fp
 8021328:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802132c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021330:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021334:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021338:	ea4c 070e 	orr.w	r7, ip, lr
 802133c:	970e      	str	r7, [sp, #56]	; 0x38
 802133e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021342:	d01e      	beq.n	8021382 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8021344:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8021346:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 802134a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802134e:	fb09 fe0e 	mul.w	lr, r9, lr
 8021352:	fb09 f907 	mul.w	r9, r9, r7
 8021356:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802135a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802135e:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8021362:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021366:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 802136a:	44f4      	add	ip, lr
 802136c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021370:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021374:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021378:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802137c:	ea4c 0709 	orr.w	r7, ip, r9
 8021380:	970b      	str	r7, [sp, #44]	; 0x2c
 8021382:	2dff      	cmp	r5, #255	; 0xff
 8021384:	d01c      	beq.n	80213c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 8021386:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8021388:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 802138c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021390:	fb05 fe0e 	mul.w	lr, r5, lr
 8021394:	437d      	muls	r5, r7
 8021396:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802139a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802139e:	f505 7780 	add.w	r7, r5, #256	; 0x100
 80213a2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80213a6:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 80213aa:	44f4      	add	ip, lr
 80213ac:	0a2d      	lsrs	r5, r5, #8
 80213ae:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80213b2:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80213b6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80213ba:	ea4c 0505 	orr.w	r5, ip, r5
 80213be:	950f      	str	r5, [sp, #60]	; 0x3c
 80213c0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80213c2:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80213c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80213ca:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80213ce:	fb08 f505 	mul.w	r5, r8, r5
 80213d2:	fb02 5507 	mla	r5, r2, r7, r5
 80213d6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80213d8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80213dc:	fb01 5507 	mla	r5, r1, r7, r5
 80213e0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80213e2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80213e6:	fb0a 5507 	mla	r5, sl, r7, r5
 80213ea:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80213ec:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80213f0:	0a2d      	lsrs	r5, r5, #8
 80213f2:	fb08 f807 	mul.w	r8, r8, r7
 80213f6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80213fa:	fb02 8303 	mla	r3, r2, r3, r8
 80213fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021400:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8021404:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021406:	fb01 330c 	mla	r3, r1, ip, r3
 802140a:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 802140e:	fb0a 3a01 	mla	sl, sl, r1, r3
 8021412:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021414:	9915      	ldr	r1, [sp, #84]	; 0x54
 8021416:	4343      	muls	r3, r0
 8021418:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802141c:	1c58      	adds	r0, r3, #1
 802141e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021422:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8021426:	ea45 050a 	orr.w	r5, r5, sl
 802142a:	7833      	ldrb	r3, [r6, #0]
 802142c:	b2ea      	uxtb	r2, r5
 802142e:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8021432:	fb12 f201 	smulbb	r2, r2, r1
 8021436:	b2c0      	uxtb	r0, r0
 8021438:	fb03 2300 	mla	r3, r3, r0, r2
 802143c:	b29b      	uxth	r3, r3
 802143e:	1c5a      	adds	r2, r3, #1
 8021440:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021444:	7872      	ldrb	r2, [r6, #1]
 8021446:	fb12 f200 	smulbb	r2, r2, r0
 802144a:	121b      	asrs	r3, r3, #8
 802144c:	7033      	strb	r3, [r6, #0]
 802144e:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8021452:	0c2d      	lsrs	r5, r5, #16
 8021454:	fb03 2301 	mla	r3, r3, r1, r2
 8021458:	b29b      	uxth	r3, r3
 802145a:	1c5a      	adds	r2, r3, #1
 802145c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021460:	121b      	asrs	r3, r3, #8
 8021462:	7073      	strb	r3, [r6, #1]
 8021464:	78b3      	ldrb	r3, [r6, #2]
 8021466:	fb13 f000 	smulbb	r0, r3, r0
 802146a:	fb05 0501 	mla	r5, r5, r1, r0
 802146e:	b2ad      	uxth	r5, r5
 8021470:	1c6b      	adds	r3, r5, #1
 8021472:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021476:	122d      	asrs	r5, r5, #8
 8021478:	70b5      	strb	r5, [r6, #2]
 802147a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802147c:	3603      	adds	r6, #3
 802147e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8021480:	4413      	add	r3, r2
 8021482:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8021484:	932d      	str	r3, [sp, #180]	; 0xb4
 8021486:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021488:	4413      	add	r3, r2
 802148a:	932e      	str	r3, [sp, #184]	; 0xb8
 802148c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802148e:	3b01      	subs	r3, #1
 8021490:	9316      	str	r3, [sp, #88]	; 0x58
 8021492:	e6b7      	b.n	8021204 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8021494:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8021496:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8021498:	4413      	add	r3, r2
 802149a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 802149c:	932d      	str	r3, [sp, #180]	; 0xb4
 802149e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80214a0:	4413      	add	r3, r2
 80214a2:	932e      	str	r3, [sp, #184]	; 0xb8
 80214a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80214a6:	3b01      	subs	r3, #1
 80214a8:	930a      	str	r3, [sp, #40]	; 0x28
 80214aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80214ac:	3303      	adds	r3, #3
 80214ae:	930d      	str	r3, [sp, #52]	; 0x34
 80214b0:	e659      	b.n	8021166 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 80214b2:	f47f ae6b 	bne.w	802118c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80214b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80214b8:	2b00      	cmp	r3, #0
 80214ba:	f340 81a6 	ble.w	802180a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 80214be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80214c2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80214c4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80214c8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80214cc:	eef0 6a48 	vmov.f32	s13, s16
 80214d0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80214d4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80214d8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80214dc:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 80214e0:	eef0 6a68 	vmov.f32	s13, s17
 80214e4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80214e8:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 80214ec:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80214f0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80214f4:	ee37 8a48 	vsub.f32	s16, s14, s16
 80214f8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80214fc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021500:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021504:	ee18 2a10 	vmov	r2, s16
 8021508:	eeb0 8a47 	vmov.f32	s16, s14
 802150c:	fb92 f3f3 	sdiv	r3, r2, r3
 8021510:	ee18 2a90 	vmov	r2, s17
 8021514:	932f      	str	r3, [sp, #188]	; 0xbc
 8021516:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021518:	eef0 8a67 	vmov.f32	s17, s15
 802151c:	fb92 f3f3 	sdiv	r3, r2, r3
 8021520:	9330      	str	r3, [sp, #192]	; 0xc0
 8021522:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021524:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8021526:	3b01      	subs	r3, #1
 8021528:	9314      	str	r3, [sp, #80]	; 0x50
 802152a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802152c:	bf08      	it	eq
 802152e:	4613      	moveq	r3, r2
 8021530:	930a      	str	r3, [sp, #40]	; 0x28
 8021532:	e611      	b.n	8021158 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8021534:	b161      	cbz	r1, 8021550 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 8021536:	5d2a      	ldrb	r2, [r5, r4]
 8021538:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802153a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802153e:	25ff      	movs	r5, #255	; 0xff
 8021540:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8021544:	920b      	str	r2, [sp, #44]	; 0x2c
 8021546:	46ae      	mov	lr, r5
 8021548:	e69d      	b.n	8021286 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 802154a:	25ff      	movs	r5, #255	; 0xff
 802154c:	46a9      	mov	r9, r5
 802154e:	e69a      	b.n	8021286 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 8021550:	25ff      	movs	r5, #255	; 0xff
 8021552:	46a9      	mov	r9, r5
 8021554:	e7f7      	b.n	8021546 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x452>
 8021556:	1c57      	adds	r7, r2, #1
 8021558:	d18f      	bne.n	802147a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 802155a:	4294      	cmp	r4, r2
 802155c:	dd8d      	ble.n	802147a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 802155e:	1c5d      	adds	r5, r3, #1
 8021560:	db8b      	blt.n	802147a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8021562:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021564:	429d      	cmp	r5, r3
 8021566:	dd88      	ble.n	802147a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8021568:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 802156a:	9202      	str	r2, [sp, #8]
 802156c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802156e:	e9cd 3003 	strd	r3, r0, [sp, #12]
 8021572:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021574:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021576:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802157a:	e9cd 4300 	strd	r4, r3, [sp]
 802157e:	4631      	mov	r1, r6
 8021580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021582:	f7ff fc63 	bl	8020e4c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8021586:	e778      	b.n	802147a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8021588:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802158a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802158c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8021590:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021592:	1412      	asrs	r2, r2, #16
 8021594:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8021598:	141b      	asrs	r3, r3, #16
 802159a:	fb04 2303 	mla	r3, r4, r3, r2
 802159e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80215a0:	18d5      	adds	r5, r2, r3
 80215a2:	5cd3      	ldrb	r3, [r2, r3]
 80215a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80215a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80215aa:	0e1e      	lsrs	r6, r3, #24
 80215ac:	2900      	cmp	r1, #0
 80215ae:	f000 811b 	beq.w	80217e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f4>
 80215b2:	786a      	ldrb	r2, [r5, #1]
 80215b4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80215b6:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80215ba:	9210      	str	r2, [sp, #64]	; 0x40
 80215bc:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 80215c0:	2800      	cmp	r0, #0
 80215c2:	f000 811c 	beq.w	80217fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70a>
 80215c6:	192a      	adds	r2, r5, r4
 80215c8:	5d2d      	ldrb	r5, [r5, r4]
 80215ca:	7852      	ldrb	r2, [r2, #1]
 80215cc:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80215d0:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80215d4:	950c      	str	r5, [sp, #48]	; 0x30
 80215d6:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80215da:	0e15      	lsrs	r5, r2, #24
 80215dc:	9211      	str	r2, [sp, #68]	; 0x44
 80215de:	b289      	uxth	r1, r1
 80215e0:	b280      	uxth	r0, r0
 80215e2:	fb01 fa00 	mul.w	sl, r1, r0
 80215e6:	0109      	lsls	r1, r1, #4
 80215e8:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80215ec:	eba1 080a 	sub.w	r8, r1, sl
 80215f0:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80215f4:	b280      	uxth	r0, r0
 80215f6:	fa1f f888 	uxth.w	r8, r8
 80215fa:	1a12      	subs	r2, r2, r0
 80215fc:	fb08 f10c 	mul.w	r1, r8, ip
 8021600:	b292      	uxth	r2, r2
 8021602:	fb02 1106 	mla	r1, r2, r6, r1
 8021606:	fb00 1109 	mla	r1, r0, r9, r1
 802160a:	fb0a 1105 	mla	r1, sl, r5, r1
 802160e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021612:	2900      	cmp	r1, #0
 8021614:	f000 80da 	beq.w	80217cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d8>
 8021618:	2eff      	cmp	r6, #255	; 0xff
 802161a:	d016      	beq.n	802164a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 802161c:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8021620:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021624:	4377      	muls	r7, r6
 8021626:	435e      	muls	r6, r3
 8021628:	0a3b      	lsrs	r3, r7, #8
 802162a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802162e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021632:	443b      	add	r3, r7
 8021634:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8021638:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 802163c:	0a1b      	lsrs	r3, r3, #8
 802163e:	0a3f      	lsrs	r7, r7, #8
 8021640:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021644:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021648:	433b      	orrs	r3, r7
 802164a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802164e:	d01d      	beq.n	802168c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x598>
 8021650:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8021652:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8021654:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021658:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802165c:	fb0c f606 	mul.w	r6, ip, r6
 8021660:	fb0c fc07 	mul.w	ip, ip, r7
 8021664:	0a37      	lsrs	r7, r6, #8
 8021666:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 802166a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802166e:	4437      	add	r7, r6
 8021670:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8021674:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8021678:	0a3f      	lsrs	r7, r7, #8
 802167a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802167e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021682:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021686:	ea47 060c 	orr.w	r6, r7, ip
 802168a:	9610      	str	r6, [sp, #64]	; 0x40
 802168c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021690:	d01d      	beq.n	80216ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 8021692:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8021694:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8021698:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802169c:	fb09 fc0c 	mul.w	ip, r9, ip
 80216a0:	fb09 f906 	mul.w	r9, r9, r6
 80216a4:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80216a8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80216ac:	f509 7680 	add.w	r6, r9, #256	; 0x100
 80216b0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80216b4:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 80216b8:	4467      	add	r7, ip
 80216ba:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80216be:	0a3f      	lsrs	r7, r7, #8
 80216c0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80216c4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80216c8:	ea47 0609 	orr.w	r6, r7, r9
 80216cc:	960c      	str	r6, [sp, #48]	; 0x30
 80216ce:	2dff      	cmp	r5, #255	; 0xff
 80216d0:	d01a      	beq.n	8021708 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x614>
 80216d2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80216d4:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80216d8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80216dc:	fb05 fc0c 	mul.w	ip, r5, ip
 80216e0:	4375      	muls	r5, r6
 80216e2:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80216e6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80216ea:	f505 7680 	add.w	r6, r5, #256	; 0x100
 80216ee:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80216f2:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80216f6:	4467      	add	r7, ip
 80216f8:	0a2d      	lsrs	r5, r5, #8
 80216fa:	0a3f      	lsrs	r7, r7, #8
 80216fc:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8021700:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021704:	433d      	orrs	r5, r7
 8021706:	9511      	str	r5, [sp, #68]	; 0x44
 8021708:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802170a:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 802170e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021712:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021716:	fb08 f505 	mul.w	r5, r8, r5
 802171a:	fb02 5506 	mla	r5, r2, r6, r5
 802171e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8021720:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021724:	fb00 5506 	mla	r5, r0, r6, r5
 8021728:	9e11      	ldr	r6, [sp, #68]	; 0x44
 802172a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802172e:	fb0a 5506 	mla	r5, sl, r6, r5
 8021732:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8021734:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021738:	0a2d      	lsrs	r5, r5, #8
 802173a:	fb08 f806 	mul.w	r8, r8, r6
 802173e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021742:	fb02 8303 	mla	r3, r2, r3, r8
 8021746:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021748:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 802174c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802174e:	fb00 3307 	mla	r3, r0, r7, r3
 8021752:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8021756:	fb0a 3c0c 	mla	ip, sl, ip, r3
 802175a:	fb01 f30b 	mul.w	r3, r1, fp
 802175e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021762:	1c59      	adds	r1, r3, #1
 8021764:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021768:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802176c:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8021770:	ea45 050c 	orr.w	r5, r5, ip
 8021774:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8021778:	b2ea      	uxtb	r2, r5
 802177a:	b2c9      	uxtb	r1, r1
 802177c:	fb12 f20b 	smulbb	r2, r2, fp
 8021780:	fb03 2301 	mla	r3, r3, r1, r2
 8021784:	b29b      	uxth	r3, r3
 8021786:	1c5a      	adds	r2, r3, #1
 8021788:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802178c:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8021790:	fb12 f201 	smulbb	r2, r2, r1
 8021794:	121b      	asrs	r3, r3, #8
 8021796:	f80e 3c03 	strb.w	r3, [lr, #-3]
 802179a:	f3c5 2307 	ubfx	r3, r5, #8, #8
 802179e:	0c2d      	lsrs	r5, r5, #16
 80217a0:	fb03 230b 	mla	r3, r3, fp, r2
 80217a4:	b29b      	uxth	r3, r3
 80217a6:	1c5a      	adds	r2, r3, #1
 80217a8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80217ac:	121b      	asrs	r3, r3, #8
 80217ae:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80217b2:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80217b6:	fb13 f101 	smulbb	r1, r3, r1
 80217ba:	fb05 150b 	mla	r5, r5, fp, r1
 80217be:	b2ad      	uxth	r5, r5
 80217c0:	1c69      	adds	r1, r5, #1
 80217c2:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80217c6:	122d      	asrs	r5, r5, #8
 80217c8:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80217cc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80217ce:	f10e 0e03 	add.w	lr, lr, #3
 80217d2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80217d4:	4413      	add	r3, r2
 80217d6:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80217d8:	932d      	str	r3, [sp, #180]	; 0xb4
 80217da:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80217dc:	4413      	add	r3, r2
 80217de:	932e      	str	r3, [sp, #184]	; 0xb8
 80217e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80217e2:	3b01      	subs	r3, #1
 80217e4:	9315      	str	r3, [sp, #84]	; 0x54
 80217e6:	e4ed      	b.n	80211c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 80217e8:	b160      	cbz	r0, 8021804 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x710>
 80217ea:	5d2a      	ldrb	r2, [r5, r4]
 80217ec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80217ee:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80217f2:	25ff      	movs	r5, #255	; 0xff
 80217f4:	ea4f 6912 	mov.w	r9, r2, lsr #24
 80217f8:	920c      	str	r2, [sp, #48]	; 0x30
 80217fa:	46ac      	mov	ip, r5
 80217fc:	e6ef      	b.n	80215de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 80217fe:	25ff      	movs	r5, #255	; 0xff
 8021800:	46a9      	mov	r9, r5
 8021802:	e6ec      	b.n	80215de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 8021804:	25ff      	movs	r5, #255	; 0xff
 8021806:	46a9      	mov	r9, r5
 8021808:	e7f7      	b.n	80217fa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x706>
 802180a:	b01b      	add	sp, #108	; 0x6c
 802180c:	ecbd 8b08 	vpop	{d8-d11}
 8021810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021814 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8021814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021818:	b085      	sub	sp, #20
 802181a:	7888      	ldrb	r0, [r1, #2]
 802181c:	4692      	mov	sl, r2
 802181e:	4698      	mov	r8, r3
 8021820:	9000      	str	r0, [sp, #0]
 8021822:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8021826:	7848      	ldrb	r0, [r1, #1]
 8021828:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 802182c:	9001      	str	r0, [sp, #4]
 802182e:	7808      	ldrb	r0, [r1, #0]
 8021830:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8021834:	9002      	str	r0, [sp, #8]
 8021836:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 802183a:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 802183e:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8021842:	fb04 560c 	mla	r6, r4, ip, r5
 8021846:	2c00      	cmp	r4, #0
 8021848:	eb02 0e06 	add.w	lr, r2, r6
 802184c:	9a00      	ldr	r2, [sp, #0]
 802184e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8021852:	9a01      	ldr	r2, [sp, #4]
 8021854:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8021858:	db3e      	blt.n	80218d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 802185a:	45a1      	cmp	r9, r4
 802185c:	dd3c      	ble.n	80218d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 802185e:	2d00      	cmp	r5, #0
 8021860:	db38      	blt.n	80218d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 8021862:	45ac      	cmp	ip, r5
 8021864:	dd36      	ble.n	80218d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 8021866:	f81a 2006 	ldrb.w	r2, [sl, r6]
 802186a:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 802186e:	1c6e      	adds	r6, r5, #1
 8021870:	d435      	bmi.n	80218de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8021872:	45b4      	cmp	ip, r6
 8021874:	dd33      	ble.n	80218de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8021876:	b393      	cbz	r3, 80218de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8021878:	f89e 6001 	ldrb.w	r6, [lr, #1]
 802187c:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 8021880:	3401      	adds	r4, #1
 8021882:	d430      	bmi.n	80218e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8021884:	45a1      	cmp	r9, r4
 8021886:	dd2e      	ble.n	80218e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8021888:	b36f      	cbz	r7, 80218e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 802188a:	2d00      	cmp	r5, #0
 802188c:	db29      	blt.n	80218e2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 802188e:	45ac      	cmp	ip, r5
 8021890:	dd27      	ble.n	80218e2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 8021892:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8021896:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 802189a:	3501      	adds	r5, #1
 802189c:	d407      	bmi.n	80218ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 802189e:	45ac      	cmp	ip, r5
 80218a0:	dd05      	ble.n	80218ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 80218a2:	b123      	cbz	r3, 80218ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 80218a4:	44f4      	add	ip, lr
 80218a6:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80218aa:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 80218ae:	2b0f      	cmp	r3, #15
 80218b0:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80218b4:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80218b8:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80218bc:	ea4f 6810 	mov.w	r8, r0, lsr #24
 80218c0:	d801      	bhi.n	80218c6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 80218c2:	2f0f      	cmp	r7, #15
 80218c4:	d911      	bls.n	80218ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 80218c6:	4b76      	ldr	r3, [pc, #472]	; (8021aa0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 80218c8:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80218cc:	4a75      	ldr	r2, [pc, #468]	; (8021aa4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 80218ce:	4876      	ldr	r0, [pc, #472]	; (8021aa8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 80218d0:	f004 ff94 	bl	80267fc <__assert_func>
 80218d4:	4602      	mov	r2, r0
 80218d6:	e7ca      	b.n	802186e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 80218d8:	4606      	mov	r6, r0
 80218da:	4602      	mov	r2, r0
 80218dc:	e7d0      	b.n	8021880 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 80218de:	4606      	mov	r6, r0
 80218e0:	e7ce      	b.n	8021880 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 80218e2:	4604      	mov	r4, r0
 80218e4:	e7d9      	b.n	802189a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 80218e6:	4604      	mov	r4, r0
 80218e8:	e7e1      	b.n	80218ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 80218ea:	b29b      	uxth	r3, r3
 80218ec:	b2bf      	uxth	r7, r7
 80218ee:	fb07 fe03 	mul.w	lr, r7, r3
 80218f2:	011b      	lsls	r3, r3, #4
 80218f4:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80218f8:	eba3 0c0e 	sub.w	ip, r3, lr
 80218fc:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8021900:	b2bf      	uxth	r7, r7
 8021902:	fa1f fc8c 	uxth.w	ip, ip
 8021906:	1bed      	subs	r5, r5, r7
 8021908:	fb0c f30a 	mul.w	r3, ip, sl
 802190c:	b2ad      	uxth	r5, r5
 802190e:	fb05 330b 	mla	r3, r5, fp, r3
 8021912:	fb07 3309 	mla	r3, r7, r9, r3
 8021916:	fb0e 3308 	mla	r3, lr, r8, r3
 802191a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802191e:	9303      	str	r3, [sp, #12]
 8021920:	2b00      	cmp	r3, #0
 8021922:	f000 80b9 	beq.w	8021a98 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 8021926:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802192a:	d018      	beq.n	802195e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 802192c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021930:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021934:	fb0b f303 	mul.w	r3, fp, r3
 8021938:	fb0b fb02 	mul.w	fp, fp, r2
 802193c:	0a1a      	lsrs	r2, r3, #8
 802193e:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8021942:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021946:	441a      	add	r2, r3
 8021948:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 802194c:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8021950:	0a12      	lsrs	r2, r2, #8
 8021952:	0a1b      	lsrs	r3, r3, #8
 8021954:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021958:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802195c:	431a      	orrs	r2, r3
 802195e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021962:	d019      	beq.n	8021998 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 8021964:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8021968:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802196c:	fb0a fb0b 	mul.w	fp, sl, fp
 8021970:	fb0a fa06 	mul.w	sl, sl, r6
 8021974:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8021978:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802197c:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8021980:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021984:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8021988:	445e      	add	r6, fp
 802198a:	0a1b      	lsrs	r3, r3, #8
 802198c:	0a36      	lsrs	r6, r6, #8
 802198e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021992:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021996:	431e      	orrs	r6, r3
 8021998:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802199c:	d019      	beq.n	80219d2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 802199e:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80219a2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80219a6:	fb09 fa0a 	mul.w	sl, r9, sl
 80219aa:	fb09 f904 	mul.w	r9, r9, r4
 80219ae:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80219b2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80219b6:	f509 7380 	add.w	r3, r9, #256	; 0x100
 80219ba:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80219be:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 80219c2:	4454      	add	r4, sl
 80219c4:	0a1b      	lsrs	r3, r3, #8
 80219c6:	0a24      	lsrs	r4, r4, #8
 80219c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80219cc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80219d0:	431c      	orrs	r4, r3
 80219d2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80219d6:	d019      	beq.n	8021a0c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 80219d8:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 80219dc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80219e0:	fb08 f909 	mul.w	r9, r8, r9
 80219e4:	fb08 f800 	mul.w	r8, r8, r0
 80219e8:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80219ec:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80219f0:	f508 7380 	add.w	r3, r8, #256	; 0x100
 80219f4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80219f8:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 80219fc:	4448      	add	r0, r9
 80219fe:	0a1b      	lsrs	r3, r3, #8
 8021a00:	0a00      	lsrs	r0, r0, #8
 8021a02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021a06:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021a0a:	4318      	orrs	r0, r3
 8021a0c:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8021a10:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021a14:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021a18:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021a1c:	fb0c f808 	mul.w	r8, ip, r8
 8021a20:	fb0c f606 	mul.w	r6, ip, r6
 8021a24:	fb05 8803 	mla	r8, r5, r3, r8
 8021a28:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8021a2c:	fb05 6202 	mla	r2, r5, r2, r6
 8021a30:	fb07 8803 	mla	r8, r7, r3, r8
 8021a34:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8021a38:	fb0e 8303 	mla	r3, lr, r3, r8
 8021a3c:	0a1b      	lsrs	r3, r3, #8
 8021a3e:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8021a42:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 8021a46:	9c02      	ldr	r4, [sp, #8]
 8021a48:	fb07 2703 	mla	r7, r7, r3, r2
 8021a4c:	9a03      	ldr	r2, [sp, #12]
 8021a4e:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8021a52:	43d2      	mvns	r2, r2
 8021a54:	fb0e 7303 	mla	r3, lr, r3, r7
 8021a58:	b2d2      	uxtb	r2, r2
 8021a5a:	0a1b      	lsrs	r3, r3, #8
 8021a5c:	4354      	muls	r4, r2
 8021a5e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021a62:	1c60      	adds	r0, r4, #1
 8021a64:	ea48 0303 	orr.w	r3, r8, r3
 8021a68:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8021a6c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8021a70:	7008      	strb	r0, [r1, #0]
 8021a72:	9801      	ldr	r0, [sp, #4]
 8021a74:	4350      	muls	r0, r2
 8021a76:	1c44      	adds	r4, r0, #1
 8021a78:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 8021a7c:	0a18      	lsrs	r0, r3, #8
 8021a7e:	0c1b      	lsrs	r3, r3, #16
 8021a80:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8021a84:	7048      	strb	r0, [r1, #1]
 8021a86:	9800      	ldr	r0, [sp, #0]
 8021a88:	4350      	muls	r0, r2
 8021a8a:	4602      	mov	r2, r0
 8021a8c:	3001      	adds	r0, #1
 8021a8e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8021a92:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021a96:	708b      	strb	r3, [r1, #2]
 8021a98:	b005      	add	sp, #20
 8021a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a9e:	bf00      	nop
 8021aa0:	0802b2c7 	.word	0x0802b2c7
 8021aa4:	0802b7be 	.word	0x0802b7be
 8021aa8:	0802b390 	.word	0x0802b390

08021aac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ab0:	ed2d 8b08 	vpush	{d8-d11}
 8021ab4:	b097      	sub	sp, #92	; 0x5c
 8021ab6:	eeb0 aa40 	vmov.f32	s20, s0
 8021aba:	eef0 9a60 	vmov.f32	s19, s1
 8021abe:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8021ac0:	eeb0 9a41 	vmov.f32	s18, s2
 8021ac4:	9308      	str	r3, [sp, #32]
 8021ac6:	eeb0 8a62 	vmov.f32	s16, s5
 8021aca:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8021ace:	eef0 8a43 	vmov.f32	s17, s6
 8021ad2:	9015      	str	r0, [sp, #84]	; 0x54
 8021ad4:	eef0 ba44 	vmov.f32	s23, s8
 8021ad8:	6868      	ldr	r0, [r5, #4]
 8021ada:	eeb0 ba64 	vmov.f32	s22, s9
 8021ade:	9112      	str	r1, [sp, #72]	; 0x48
 8021ae0:	eef0 aa45 	vmov.f32	s21, s10
 8021ae4:	9310      	str	r3, [sp, #64]	; 0x40
 8021ae6:	9214      	str	r2, [sp, #80]	; 0x50
 8021ae8:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8021aea:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8021aee:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8021af2:	fb00 1303 	mla	r3, r0, r3, r1
 8021af6:	6829      	ldr	r1, [r5, #0]
 8021af8:	6855      	ldr	r5, [r2, #4]
 8021afa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021afe:	3504      	adds	r5, #4
 8021b00:	18cb      	adds	r3, r1, r3
 8021b02:	930b      	str	r3, [sp, #44]	; 0x2c
 8021b04:	6813      	ldr	r3, [r2, #0]
 8021b06:	9311      	str	r3, [sp, #68]	; 0x44
 8021b08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021b0a:	2b00      	cmp	r3, #0
 8021b0c:	dc03      	bgt.n	8021b16 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8021b0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021b10:	2b00      	cmp	r3, #0
 8021b12:	f340 8333 	ble.w	802217c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8021b16:	9b08      	ldr	r3, [sp, #32]
 8021b18:	2b00      	cmp	r3, #0
 8021b1a:	f340 8190 	ble.w	8021e3e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8021b1e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021b20:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021b22:	1412      	asrs	r2, r2, #16
 8021b24:	ea4f 4323 	mov.w	r3, r3, asr #16
 8021b28:	d42f      	bmi.n	8021b8a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8021b2a:	1c51      	adds	r1, r2, #1
 8021b2c:	428c      	cmp	r4, r1
 8021b2e:	dd2f      	ble.n	8021b90 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8021b30:	2b00      	cmp	r3, #0
 8021b32:	db2d      	blt.n	8021b90 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8021b34:	1c59      	adds	r1, r3, #1
 8021b36:	9810      	ldr	r0, [sp, #64]	; 0x40
 8021b38:	4288      	cmp	r0, r1
 8021b3a:	dd29      	ble.n	8021b90 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8021b3c:	9b08      	ldr	r3, [sp, #32]
 8021b3e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021b40:	3b01      	subs	r3, #1
 8021b42:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8021b44:	fb02 1203 	mla	r2, r2, r3, r1
 8021b48:	1412      	asrs	r2, r2, #16
 8021b4a:	d42b      	bmi.n	8021ba4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8021b4c:	3201      	adds	r2, #1
 8021b4e:	4294      	cmp	r4, r2
 8021b50:	dd28      	ble.n	8021ba4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8021b52:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8021b54:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8021b56:	fb02 1303 	mla	r3, r2, r3, r1
 8021b5a:	141b      	asrs	r3, r3, #16
 8021b5c:	d422      	bmi.n	8021ba4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8021b5e:	3301      	adds	r3, #1
 8021b60:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021b62:	429a      	cmp	r2, r3
 8021b64:	dd1e      	ble.n	8021ba4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8021b66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021b68:	f103 0803 	add.w	r8, r3, #3
 8021b6c:	9b08      	ldr	r3, [sp, #32]
 8021b6e:	9307      	str	r3, [sp, #28]
 8021b70:	9b07      	ldr	r3, [sp, #28]
 8021b72:	2b00      	cmp	r3, #0
 8021b74:	f300 81ca 	bgt.w	8021f0c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 8021b78:	9b08      	ldr	r3, [sp, #32]
 8021b7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021b7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021b80:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021b84:	441a      	add	r2, r3
 8021b86:	920b      	str	r2, [sp, #44]	; 0x2c
 8021b88:	e15b      	b.n	8021e42 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8021b8a:	1c51      	adds	r1, r2, #1
 8021b8c:	f040 8148 	bne.w	8021e20 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8021b90:	42a2      	cmp	r2, r4
 8021b92:	f280 8145 	bge.w	8021e20 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8021b96:	1c5a      	adds	r2, r3, #1
 8021b98:	f2c0 8142 	blt.w	8021e20 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8021b9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021b9e:	4293      	cmp	r3, r2
 8021ba0:	f280 813e 	bge.w	8021e20 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8021ba4:	9b08      	ldr	r3, [sp, #32]
 8021ba6:	9313      	str	r3, [sp, #76]	; 0x4c
 8021ba8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021baa:	9307      	str	r3, [sp, #28]
 8021bac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021bae:	2b00      	cmp	r3, #0
 8021bb0:	dde2      	ble.n	8021b78 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 8021bb2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021bb4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021bb6:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8021bba:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8021bbc:	141b      	asrs	r3, r3, #16
 8021bbe:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8021bc2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021bc4:	1412      	asrs	r2, r2, #16
 8021bc6:	f100 818b 	bmi.w	8021ee0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x434>
 8021bca:	1c56      	adds	r6, r2, #1
 8021bcc:	42b4      	cmp	r4, r6
 8021bce:	f340 8189 	ble.w	8021ee4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8021bd2:	2b00      	cmp	r3, #0
 8021bd4:	f2c0 8186 	blt.w	8021ee4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8021bd8:	1c5e      	adds	r6, r3, #1
 8021bda:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8021bdc:	42b7      	cmp	r7, r6
 8021bde:	f340 8181 	ble.w	8021ee4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8021be2:	fb03 2304 	mla	r3, r3, r4, r2
 8021be6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021be8:	18d6      	adds	r6, r2, r3
 8021bea:	5cd3      	ldrb	r3, [r2, r3]
 8021bec:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8021bf0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021bf4:	2900      	cmp	r1, #0
 8021bf6:	f000 8163 	beq.w	8021ec0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8021bfa:	7872      	ldrb	r2, [r6, #1]
 8021bfc:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8021c00:	920c      	str	r2, [sp, #48]	; 0x30
 8021c02:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8021c06:	2800      	cmp	r0, #0
 8021c08:	f000 8164 	beq.w	8021ed4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x428>
 8021c0c:	1932      	adds	r2, r6, r4
 8021c0e:	5d36      	ldrb	r6, [r6, r4]
 8021c10:	7852      	ldrb	r2, [r2, #1]
 8021c12:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8021c16:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8021c1a:	9609      	str	r6, [sp, #36]	; 0x24
 8021c1c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021c20:	0e16      	lsrs	r6, r2, #24
 8021c22:	920d      	str	r2, [sp, #52]	; 0x34
 8021c24:	b289      	uxth	r1, r1
 8021c26:	b280      	uxth	r0, r0
 8021c28:	fb01 fb00 	mul.w	fp, r1, r0
 8021c2c:	0109      	lsls	r1, r1, #4
 8021c2e:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8021c32:	eba1 090b 	sub.w	r9, r1, fp
 8021c36:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8021c3a:	b280      	uxth	r0, r0
 8021c3c:	fa1f f989 	uxth.w	r9, r9
 8021c40:	1a12      	subs	r2, r2, r0
 8021c42:	fb09 f108 	mul.w	r1, r9, r8
 8021c46:	b292      	uxth	r2, r2
 8021c48:	fb02 110c 	mla	r1, r2, ip, r1
 8021c4c:	fb00 110a 	mla	r1, r0, sl, r1
 8021c50:	fb0b 1106 	mla	r1, fp, r6, r1
 8021c54:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021c58:	2900      	cmp	r1, #0
 8021c5a:	f000 80d2 	beq.w	8021e02 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8021c5e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021c62:	d01b      	beq.n	8021c9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f0>
 8021c64:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8021c68:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021c6c:	fb0c fe0e 	mul.w	lr, ip, lr
 8021c70:	fb0c fc03 	mul.w	ip, ip, r3
 8021c74:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8021c78:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8021c7c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021c80:	4473      	add	r3, lr
 8021c82:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8021c86:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8021c8a:	0a1b      	lsrs	r3, r3, #8
 8021c8c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021c90:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021c94:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021c98:	ea43 030e 	orr.w	r3, r3, lr
 8021c9c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021ca0:	d01e      	beq.n	8021ce0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x234>
 8021ca2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8021ca4:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8021ca8:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8021cac:	fb08 fc0c 	mul.w	ip, r8, ip
 8021cb0:	fb08 f80e 	mul.w	r8, r8, lr
 8021cb4:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8021cb8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021cbc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021cc0:	44e6      	add	lr, ip
 8021cc2:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8021cc6:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8021cca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021cce:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8021cd2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021cd6:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8021cda:	ea4e 0708 	orr.w	r7, lr, r8
 8021cde:	970c      	str	r7, [sp, #48]	; 0x30
 8021ce0:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021ce4:	d01e      	beq.n	8021d24 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8021ce6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021ce8:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8021cec:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8021cf0:	fb0a f808 	mul.w	r8, sl, r8
 8021cf4:	fb0a fa0c 	mul.w	sl, sl, ip
 8021cf8:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8021cfc:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8021d00:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021d04:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021d08:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021d0c:	44c6      	add	lr, r8
 8021d0e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021d12:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021d16:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021d1a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021d1e:	ea4e 070a 	orr.w	r7, lr, sl
 8021d22:	9709      	str	r7, [sp, #36]	; 0x24
 8021d24:	2eff      	cmp	r6, #255	; 0xff
 8021d26:	d01d      	beq.n	8021d64 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 8021d28:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8021d2a:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8021d2e:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8021d32:	fb06 f808 	mul.w	r8, r6, r8
 8021d36:	fb06 f60c 	mul.w	r6, r6, ip
 8021d3a:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8021d3e:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8021d42:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8021d46:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021d4a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8021d4e:	44c6      	add	lr, r8
 8021d50:	0a36      	lsrs	r6, r6, #8
 8021d52:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021d56:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021d5a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021d5e:	ea4e 0606 	orr.w	r6, lr, r6
 8021d62:	960d      	str	r6, [sp, #52]	; 0x34
 8021d64:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8021d66:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021d6a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021d6c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021d70:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021d74:	43c9      	mvns	r1, r1
 8021d76:	fb09 f606 	mul.w	r6, r9, r6
 8021d7a:	b2c9      	uxtb	r1, r1
 8021d7c:	fb02 660c 	mla	r6, r2, ip, r6
 8021d80:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8021d84:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8021d86:	fb00 660c 	mla	r6, r0, ip, r6
 8021d8a:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8021d8e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8021d90:	fb0b 660c 	mla	r6, fp, ip, r6
 8021d94:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8021d98:	fb09 f90c 	mul.w	r9, r9, ip
 8021d9c:	0a36      	lsrs	r6, r6, #8
 8021d9e:	fb02 9303 	mla	r3, r2, r3, r9
 8021da2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021da4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021da8:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8021dac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021dae:	fb00 330e 	mla	r3, r0, lr, r3
 8021db2:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8021db6:	fb0b 3b00 	mla	fp, fp, r0, r3
 8021dba:	9b07      	ldr	r3, [sp, #28]
 8021dbc:	781b      	ldrb	r3, [r3, #0]
 8021dbe:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8021dc2:	fb03 f201 	mul.w	r2, r3, r1
 8021dc6:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8021dca:	1c53      	adds	r3, r2, #1
 8021dcc:	ea46 060b 	orr.w	r6, r6, fp
 8021dd0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021dd4:	9a07      	ldr	r2, [sp, #28]
 8021dd6:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8021dda:	7013      	strb	r3, [r2, #0]
 8021ddc:	7853      	ldrb	r3, [r2, #1]
 8021dde:	434b      	muls	r3, r1
 8021de0:	1c5a      	adds	r2, r3, #1
 8021de2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021de6:	0a33      	lsrs	r3, r6, #8
 8021de8:	0c36      	lsrs	r6, r6, #16
 8021dea:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021dee:	9a07      	ldr	r2, [sp, #28]
 8021df0:	7053      	strb	r3, [r2, #1]
 8021df2:	7893      	ldrb	r3, [r2, #2]
 8021df4:	4359      	muls	r1, r3
 8021df6:	1c4b      	adds	r3, r1, #1
 8021df8:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8021dfc:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 8021e00:	7096      	strb	r6, [r2, #2]
 8021e02:	9b07      	ldr	r3, [sp, #28]
 8021e04:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021e06:	3303      	adds	r3, #3
 8021e08:	9307      	str	r3, [sp, #28]
 8021e0a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021e0c:	4413      	add	r3, r2
 8021e0e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8021e10:	9329      	str	r3, [sp, #164]	; 0xa4
 8021e12:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021e14:	4413      	add	r3, r2
 8021e16:	932a      	str	r3, [sp, #168]	; 0xa8
 8021e18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021e1a:	3b01      	subs	r3, #1
 8021e1c:	9313      	str	r3, [sp, #76]	; 0x4c
 8021e1e:	e6c5      	b.n	8021bac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 8021e20:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021e22:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021e24:	4413      	add	r3, r2
 8021e26:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8021e28:	9329      	str	r3, [sp, #164]	; 0xa4
 8021e2a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021e2c:	4413      	add	r3, r2
 8021e2e:	932a      	str	r3, [sp, #168]	; 0xa8
 8021e30:	9b08      	ldr	r3, [sp, #32]
 8021e32:	3b01      	subs	r3, #1
 8021e34:	9308      	str	r3, [sp, #32]
 8021e36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021e38:	3303      	adds	r3, #3
 8021e3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8021e3c:	e66b      	b.n	8021b16 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8021e3e:	f47f ae7d 	bne.w	8021b3c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8021e42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021e44:	2b00      	cmp	r3, #0
 8021e46:	f340 8199 	ble.w	802217c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8021e4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021e4e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021e50:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021e54:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021e58:	eef0 6a48 	vmov.f32	s13, s16
 8021e5c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021e60:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021e64:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021e68:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8021e6c:	eef0 6a68 	vmov.f32	s13, s17
 8021e70:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021e74:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8021e78:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021e7c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021e80:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021e84:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021e88:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021e8c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021e90:	ee18 2a10 	vmov	r2, s16
 8021e94:	eeb0 8a47 	vmov.f32	s16, s14
 8021e98:	fb92 f3f3 	sdiv	r3, r2, r3
 8021e9c:	ee18 2a90 	vmov	r2, s17
 8021ea0:	932b      	str	r3, [sp, #172]	; 0xac
 8021ea2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021ea4:	eef0 8a67 	vmov.f32	s17, s15
 8021ea8:	fb92 f3f3 	sdiv	r3, r2, r3
 8021eac:	932c      	str	r3, [sp, #176]	; 0xb0
 8021eae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021eb0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021eb2:	3b01      	subs	r3, #1
 8021eb4:	9312      	str	r3, [sp, #72]	; 0x48
 8021eb6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021eb8:	bf08      	it	eq
 8021eba:	4613      	moveq	r3, r2
 8021ebc:	9308      	str	r3, [sp, #32]
 8021ebe:	e623      	b.n	8021b08 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8021ec0:	b158      	cbz	r0, 8021eda <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8021ec2:	5d32      	ldrb	r2, [r6, r4]
 8021ec4:	26ff      	movs	r6, #255	; 0xff
 8021ec6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8021eca:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8021ece:	9209      	str	r2, [sp, #36]	; 0x24
 8021ed0:	46b0      	mov	r8, r6
 8021ed2:	e6a7      	b.n	8021c24 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8021ed4:	26ff      	movs	r6, #255	; 0xff
 8021ed6:	46b2      	mov	sl, r6
 8021ed8:	e6a4      	b.n	8021c24 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8021eda:	26ff      	movs	r6, #255	; 0xff
 8021edc:	46b2      	mov	sl, r6
 8021ede:	e7f7      	b.n	8021ed0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8021ee0:	1c57      	adds	r7, r2, #1
 8021ee2:	d18e      	bne.n	8021e02 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8021ee4:	4294      	cmp	r4, r2
 8021ee6:	dd8c      	ble.n	8021e02 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8021ee8:	1c5e      	adds	r6, r3, #1
 8021eea:	db8a      	blt.n	8021e02 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8021eec:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8021eee:	429e      	cmp	r6, r3
 8021ef0:	dd87      	ble.n	8021e02 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8021ef2:	e9cd 1004 	strd	r1, r0, [sp, #16]
 8021ef6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8021efa:	e9cd 4600 	strd	r4, r6, [sp]
 8021efe:	462b      	mov	r3, r5
 8021f00:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021f02:	9907      	ldr	r1, [sp, #28]
 8021f04:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021f06:	f7ff fc85 	bl	8021814 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8021f0a:	e77a      	b.n	8021e02 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8021f0c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021f0e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8021f10:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021f14:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021f16:	1409      	asrs	r1, r1, #16
 8021f18:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8021f1c:	141b      	asrs	r3, r3, #16
 8021f1e:	fb04 1303 	mla	r3, r4, r3, r1
 8021f22:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021f24:	18ce      	adds	r6, r1, r3
 8021f26:	5ccb      	ldrb	r3, [r1, r3]
 8021f28:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8021f2c:	0e1f      	lsrs	r7, r3, #24
 8021f2e:	2a00      	cmp	r2, #0
 8021f30:	f000 8114 	beq.w	802215c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b0>
 8021f34:	7871      	ldrb	r1, [r6, #1]
 8021f36:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8021f3a:	910e      	str	r1, [sp, #56]	; 0x38
 8021f3c:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8021f40:	2800      	cmp	r0, #0
 8021f42:	f000 8115 	beq.w	8022170 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c4>
 8021f46:	1931      	adds	r1, r6, r4
 8021f48:	5d36      	ldrb	r6, [r6, r4]
 8021f4a:	7849      	ldrb	r1, [r1, #1]
 8021f4c:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8021f50:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8021f54:	960a      	str	r6, [sp, #40]	; 0x28
 8021f56:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021f5a:	0e0e      	lsrs	r6, r1, #24
 8021f5c:	910f      	str	r1, [sp, #60]	; 0x3c
 8021f5e:	b292      	uxth	r2, r2
 8021f60:	b280      	uxth	r0, r0
 8021f62:	fb02 fb00 	mul.w	fp, r2, r0
 8021f66:	0112      	lsls	r2, r2, #4
 8021f68:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8021f6c:	eba2 090b 	sub.w	r9, r2, fp
 8021f70:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8021f74:	b280      	uxth	r0, r0
 8021f76:	fa1f f989 	uxth.w	r9, r9
 8021f7a:	1a09      	subs	r1, r1, r0
 8021f7c:	fb09 f20e 	mul.w	r2, r9, lr
 8021f80:	b289      	uxth	r1, r1
 8021f82:	fb01 2207 	mla	r2, r1, r7, r2
 8021f86:	fb00 220a 	mla	r2, r0, sl, r2
 8021f8a:	fb0b 2206 	mla	r2, fp, r6, r2
 8021f8e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021f92:	9213      	str	r2, [sp, #76]	; 0x4c
 8021f94:	2a00      	cmp	r2, #0
 8021f96:	f000 80d4 	beq.w	8022142 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x696>
 8021f9a:	2fff      	cmp	r7, #255	; 0xff
 8021f9c:	d01a      	beq.n	8021fd4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 8021f9e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021fa2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021fa6:	fb07 fc0c 	mul.w	ip, r7, ip
 8021faa:	435f      	muls	r7, r3
 8021fac:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8021fb0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021fb4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021fb8:	4463      	add	r3, ip
 8021fba:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8021fbe:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8021fc2:	0a1b      	lsrs	r3, r3, #8
 8021fc4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021fc8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021fcc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021fd0:	ea43 030c 	orr.w	r3, r3, ip
 8021fd4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8021fd8:	d01f      	beq.n	802201a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56e>
 8021fda:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8021fdc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021fde:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021fe2:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8021fe6:	fb0e f707 	mul.w	r7, lr, r7
 8021fea:	fb0e fe0c 	mul.w	lr, lr, ip
 8021fee:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021ff2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021ff6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021ffa:	44bc      	add	ip, r7
 8021ffc:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8022000:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8022004:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022008:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802200c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022010:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022014:	ea4c 020e 	orr.w	r2, ip, lr
 8022018:	920e      	str	r2, [sp, #56]	; 0x38
 802201a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802201e:	d01e      	beq.n	802205e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b2>
 8022020:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022022:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8022026:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 802202a:	fb0a fe0e 	mul.w	lr, sl, lr
 802202e:	fb0a fa07 	mul.w	sl, sl, r7
 8022032:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022036:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802203a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802203e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022042:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022046:	44f4      	add	ip, lr
 8022048:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802204c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022050:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022054:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022058:	ea4c 020a 	orr.w	r2, ip, sl
 802205c:	920a      	str	r2, [sp, #40]	; 0x28
 802205e:	2eff      	cmp	r6, #255	; 0xff
 8022060:	d01c      	beq.n	802209c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f0>
 8022062:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022064:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8022068:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 802206c:	fb06 fe0e 	mul.w	lr, r6, lr
 8022070:	437e      	muls	r6, r7
 8022072:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022076:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802207a:	f506 7780 	add.w	r7, r6, #256	; 0x100
 802207e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022082:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8022086:	44f4      	add	ip, lr
 8022088:	0a36      	lsrs	r6, r6, #8
 802208a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802208e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022092:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022096:	ea4c 0206 	orr.w	r2, ip, r6
 802209a:	920f      	str	r2, [sp, #60]	; 0x3c
 802209c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802209e:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80220a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80220a6:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 80220aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80220ac:	fb09 f606 	mul.w	r6, r9, r6
 80220b0:	fb01 6607 	mla	r6, r1, r7, r6
 80220b4:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 80220b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80220ba:	fb00 6607 	mla	r6, r0, r7, r6
 80220be:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 80220c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80220c4:	fb0b 6607 	mla	r6, fp, r7, r6
 80220c8:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80220cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80220ce:	fb09 f907 	mul.w	r9, r9, r7
 80220d2:	0a36      	lsrs	r6, r6, #8
 80220d4:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80220d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80220da:	fb01 9303 	mla	r3, r1, r3, r9
 80220de:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80220e2:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 80220e6:	fb00 330c 	mla	r3, r0, ip, r3
 80220ea:	fb0b 3e0e 	mla	lr, fp, lr, r3
 80220ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80220f0:	43da      	mvns	r2, r3
 80220f2:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 80220f6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80220fa:	b2d2      	uxtb	r2, r2
 80220fc:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022100:	fb03 f102 	mul.w	r1, r3, r2
 8022104:	ea46 060e 	orr.w	r6, r6, lr
 8022108:	1c4b      	adds	r3, r1, #1
 802210a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802210e:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8022112:	f808 3c03 	strb.w	r3, [r8, #-3]
 8022116:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 802211a:	4353      	muls	r3, r2
 802211c:	1c59      	adds	r1, r3, #1
 802211e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022122:	0a33      	lsrs	r3, r6, #8
 8022124:	0c36      	lsrs	r6, r6, #16
 8022126:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802212a:	f808 3c02 	strb.w	r3, [r8, #-2]
 802212e:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8022132:	435a      	muls	r2, r3
 8022134:	1c53      	adds	r3, r2, #1
 8022136:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802213a:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 802213e:	f808 6c01 	strb.w	r6, [r8, #-1]
 8022142:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022144:	f108 0803 	add.w	r8, r8, #3
 8022148:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802214a:	4413      	add	r3, r2
 802214c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802214e:	9329      	str	r3, [sp, #164]	; 0xa4
 8022150:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022152:	4413      	add	r3, r2
 8022154:	932a      	str	r3, [sp, #168]	; 0xa8
 8022156:	9b07      	ldr	r3, [sp, #28]
 8022158:	3b01      	subs	r3, #1
 802215a:	e508      	b.n	8021b6e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 802215c:	b158      	cbz	r0, 8022176 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ca>
 802215e:	5d31      	ldrb	r1, [r6, r4]
 8022160:	26ff      	movs	r6, #255	; 0xff
 8022162:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8022166:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 802216a:	910a      	str	r1, [sp, #40]	; 0x28
 802216c:	46b6      	mov	lr, r6
 802216e:	e6f6      	b.n	8021f5e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8022170:	26ff      	movs	r6, #255	; 0xff
 8022172:	46b2      	mov	sl, r6
 8022174:	e6f3      	b.n	8021f5e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8022176:	26ff      	movs	r6, #255	; 0xff
 8022178:	46b2      	mov	sl, r6
 802217a:	e7f7      	b.n	802216c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c0>
 802217c:	b017      	add	sp, #92	; 0x5c
 802217e:	ecbd 8b08 	vpop	{d8-d11}
 8022182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08022188 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8022188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802218c:	b08d      	sub	sp, #52	; 0x34
 802218e:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 8022192:	9103      	str	r1, [sp, #12]
 8022194:	fb07 5803 	mla	r8, r7, r3, r5
 8022198:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 802219c:	9803      	ldr	r0, [sp, #12]
 802219e:	2f00      	cmp	r7, #0
 80221a0:	910b      	str	r1, [sp, #44]	; 0x2c
 80221a2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80221a6:	9903      	ldr	r1, [sp, #12]
 80221a8:	9c03      	ldr	r4, [sp, #12]
 80221aa:	eb02 0608 	add.w	r6, r2, r8
 80221ae:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 80221b2:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 80221b6:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 80221ba:	7809      	ldrb	r1, [r1, #0]
 80221bc:	7840      	ldrb	r0, [r0, #1]
 80221be:	78a4      	ldrb	r4, [r4, #2]
 80221c0:	db51      	blt.n	8022266 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 80221c2:	45be      	cmp	lr, r7
 80221c4:	dd4f      	ble.n	8022266 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 80221c6:	2d00      	cmp	r5, #0
 80221c8:	db49      	blt.n	802225e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 80221ca:	42ab      	cmp	r3, r5
 80221cc:	dd47      	ble.n	802225e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 80221ce:	f812 2008 	ldrb.w	r2, [r2, r8]
 80221d2:	9204      	str	r2, [sp, #16]
 80221d4:	7872      	ldrb	r2, [r6, #1]
 80221d6:	9205      	str	r2, [sp, #20]
 80221d8:	78b2      	ldrb	r2, [r6, #2]
 80221da:	9206      	str	r2, [sp, #24]
 80221dc:	1c6a      	adds	r2, r5, #1
 80221de:	d449      	bmi.n	8022274 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80221e0:	4293      	cmp	r3, r2
 80221e2:	dd47      	ble.n	8022274 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80221e4:	f1bc 0f00 	cmp.w	ip, #0
 80221e8:	d044      	beq.n	8022274 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80221ea:	7972      	ldrb	r2, [r6, #5]
 80221ec:	f896 b003 	ldrb.w	fp, [r6, #3]
 80221f0:	f896 a004 	ldrb.w	sl, [r6, #4]
 80221f4:	9201      	str	r2, [sp, #4]
 80221f6:	3701      	adds	r7, #1
 80221f8:	d444      	bmi.n	8022284 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 80221fa:	45be      	cmp	lr, r7
 80221fc:	dd42      	ble.n	8022284 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 80221fe:	f1b9 0f00 	cmp.w	r9, #0
 8022202:	f000 80c1 	beq.w	8022388 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 8022206:	2d00      	cmp	r5, #0
 8022208:	db38      	blt.n	802227c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 802220a:	42ab      	cmp	r3, r5
 802220c:	dd36      	ble.n	802227c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 802220e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8022212:	f816 8002 	ldrb.w	r8, [r6, r2]
 8022216:	2203      	movs	r2, #3
 8022218:	fb03 6702 	mla	r7, r3, r2, r6
 802221c:	fb03 6202 	mla	r2, r3, r2, r6
 8022220:	787f      	ldrb	r7, [r7, #1]
 8022222:	f892 e002 	ldrb.w	lr, [r2, #2]
 8022226:	9702      	str	r7, [sp, #8]
 8022228:	3501      	adds	r5, #1
 802222a:	d432      	bmi.n	8022292 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 802222c:	42ab      	cmp	r3, r5
 802222e:	dd30      	ble.n	8022292 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8022230:	f1bc 0f00 	cmp.w	ip, #0
 8022234:	d031      	beq.n	802229a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 8022236:	2703      	movs	r7, #3
 8022238:	fb13 7207 	smlabb	r2, r3, r7, r7
 802223c:	5cb5      	ldrb	r5, [r6, r2]
 802223e:	fb03 6207 	mla	r2, r3, r7, r6
 8022242:	fb03 6307 	mla	r3, r3, r7, r6
 8022246:	7912      	ldrb	r2, [r2, #4]
 8022248:	795e      	ldrb	r6, [r3, #5]
 802224a:	f1bc 0f0f 	cmp.w	ip, #15
 802224e:	d927      	bls.n	80222a0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 8022250:	4b53      	ldr	r3, [pc, #332]	; (80223a0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 8022252:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8022256:	4a53      	ldr	r2, [pc, #332]	; (80223a4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8022258:	4853      	ldr	r0, [pc, #332]	; (80223a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 802225a:	f004 facf 	bl	80267fc <__assert_func>
 802225e:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8022262:	9104      	str	r1, [sp, #16]
 8022264:	e7ba      	b.n	80221dc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 8022266:	9401      	str	r4, [sp, #4]
 8022268:	4682      	mov	sl, r0
 802226a:	468b      	mov	fp, r1
 802226c:	9104      	str	r1, [sp, #16]
 802226e:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8022272:	e7c0      	b.n	80221f6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8022274:	9401      	str	r4, [sp, #4]
 8022276:	4682      	mov	sl, r0
 8022278:	468b      	mov	fp, r1
 802227a:	e7bc      	b.n	80221f6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 802227c:	46a6      	mov	lr, r4
 802227e:	9002      	str	r0, [sp, #8]
 8022280:	4688      	mov	r8, r1
 8022282:	e7d1      	b.n	8022228 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 8022284:	4626      	mov	r6, r4
 8022286:	4602      	mov	r2, r0
 8022288:	460d      	mov	r5, r1
 802228a:	46a6      	mov	lr, r4
 802228c:	9002      	str	r0, [sp, #8]
 802228e:	4688      	mov	r8, r1
 8022290:	e7db      	b.n	802224a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8022292:	4626      	mov	r6, r4
 8022294:	4602      	mov	r2, r0
 8022296:	460d      	mov	r5, r1
 8022298:	e7d7      	b.n	802224a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 802229a:	4626      	mov	r6, r4
 802229c:	4602      	mov	r2, r0
 802229e:	460d      	mov	r5, r1
 80222a0:	f1b9 0f0f 	cmp.w	r9, #15
 80222a4:	d8d4      	bhi.n	8022250 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 80222a6:	fa1f f38c 	uxth.w	r3, ip
 80222aa:	fa1f fc89 	uxth.w	ip, r9
 80222ae:	fb03 f70c 	mul.w	r7, r3, ip
 80222b2:	011b      	lsls	r3, r3, #4
 80222b4:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 80222b8:	9707      	str	r7, [sp, #28]
 80222ba:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80222be:	fa1f fc8c 	uxth.w	ip, ip
 80222c2:	eba7 070c 	sub.w	r7, r7, ip
 80222c6:	b2bf      	uxth	r7, r7
 80222c8:	9709      	str	r7, [sp, #36]	; 0x24
 80222ca:	9f07      	ldr	r7, [sp, #28]
 80222cc:	1bdb      	subs	r3, r3, r7
 80222ce:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 80222d2:	b29b      	uxth	r3, r3
 80222d4:	9708      	str	r7, [sp, #32]
 80222d6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80222d8:	930a      	str	r3, [sp, #40]	; 0x28
 80222da:	ea6f 0907 	mvn.w	r9, r7
 80222de:	fb03 fb0b 	mul.w	fp, r3, fp
 80222e2:	9f04      	ldr	r7, [sp, #16]
 80222e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80222e6:	fa5f f989 	uxtb.w	r9, r9
 80222ea:	fb03 bb07 	mla	fp, r3, r7, fp
 80222ee:	9f07      	ldr	r7, [sp, #28]
 80222f0:	fb11 f109 	smulbb	r1, r1, r9
 80222f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80222f6:	fb0c b808 	mla	r8, ip, r8, fp
 80222fa:	fb10 f009 	smulbb	r0, r0, r9
 80222fe:	fb14 f409 	smulbb	r4, r4, r9
 8022302:	fb07 8805 	mla	r8, r7, r5, r8
 8022306:	9d08      	ldr	r5, [sp, #32]
 8022308:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802230a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 802230e:	fb08 1805 	mla	r8, r8, r5, r1
 8022312:	9d05      	ldr	r5, [sp, #20]
 8022314:	fa1f f888 	uxth.w	r8, r8
 8022318:	f108 0101 	add.w	r1, r8, #1
 802231c:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8022320:	9903      	ldr	r1, [sp, #12]
 8022322:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022326:	f881 8000 	strb.w	r8, [r1]
 802232a:	fb03 f10a 	mul.w	r1, r3, sl
 802232e:	fb07 1105 	mla	r1, r7, r5, r1
 8022332:	9d02      	ldr	r5, [sp, #8]
 8022334:	fb0c 1105 	mla	r1, ip, r5, r1
 8022338:	9d07      	ldr	r5, [sp, #28]
 802233a:	fb05 1102 	mla	r1, r5, r2, r1
 802233e:	9a08      	ldr	r2, [sp, #32]
 8022340:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8022344:	fb01 0102 	mla	r1, r1, r2, r0
 8022348:	9a03      	ldr	r2, [sp, #12]
 802234a:	b289      	uxth	r1, r1
 802234c:	1c48      	adds	r0, r1, #1
 802234e:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8022352:	1209      	asrs	r1, r1, #8
 8022354:	7051      	strb	r1, [r2, #1]
 8022356:	9a01      	ldr	r2, [sp, #4]
 8022358:	4353      	muls	r3, r2
 802235a:	9a06      	ldr	r2, [sp, #24]
 802235c:	fb07 3702 	mla	r7, r7, r2, r3
 8022360:	9b08      	ldr	r3, [sp, #32]
 8022362:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8022366:	fb05 c606 	mla	r6, r5, r6, ip
 802236a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802236e:	fb06 4603 	mla	r6, r6, r3, r4
 8022372:	9b03      	ldr	r3, [sp, #12]
 8022374:	b2b6      	uxth	r6, r6
 8022376:	f106 0e01 	add.w	lr, r6, #1
 802237a:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 802237e:	1236      	asrs	r6, r6, #8
 8022380:	709e      	strb	r6, [r3, #2]
 8022382:	b00d      	add	sp, #52	; 0x34
 8022384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022388:	f1bc 0f0f 	cmp.w	ip, #15
 802238c:	f63f af60 	bhi.w	8022250 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8022390:	4626      	mov	r6, r4
 8022392:	4602      	mov	r2, r0
 8022394:	460d      	mov	r5, r1
 8022396:	46a6      	mov	lr, r4
 8022398:	9002      	str	r0, [sp, #8]
 802239a:	4688      	mov	r8, r1
 802239c:	e783      	b.n	80222a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 802239e:	bf00      	nop
 80223a0:	0802b2c7 	.word	0x0802b2c7
 80223a4:	0802b7be 	.word	0x0802b7be
 80223a8:	0802b390 	.word	0x0802b390

080223ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80223ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223b0:	ed2d 8b08 	vpush	{d8-d11}
 80223b4:	b0a1      	sub	sp, #132	; 0x84
 80223b6:	eeb0 aa40 	vmov.f32	s20, s0
 80223ba:	eef0 9a60 	vmov.f32	s19, s1
 80223be:	9307      	str	r3, [sp, #28]
 80223c0:	eeb0 9a41 	vmov.f32	s18, s2
 80223c4:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 80223c8:	eeb0 8a62 	vmov.f32	s16, s5
 80223cc:	9210      	str	r2, [sp, #64]	; 0x40
 80223ce:	eef0 8a43 	vmov.f32	s17, s6
 80223d2:	9308      	str	r3, [sp, #32]
 80223d4:	eef0 ba44 	vmov.f32	s23, s8
 80223d8:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 80223dc:	eeb0 ba64 	vmov.f32	s22, s9
 80223e0:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 80223e2:	eef0 aa45 	vmov.f32	s21, s10
 80223e6:	930a      	str	r3, [sp, #40]	; 0x28
 80223e8:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 80223ec:	901f      	str	r0, [sp, #124]	; 0x7c
 80223ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80223f0:	6850      	ldr	r0, [r2, #4]
 80223f2:	910e      	str	r1, [sp, #56]	; 0x38
 80223f4:	6812      	ldr	r2, [r2, #0]
 80223f6:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 80223fa:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 80223fe:	fb00 1303 	mla	r3, r0, r3, r1
 8022402:	9908      	ldr	r1, [sp, #32]
 8022404:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022408:	18d3      	adds	r3, r2, r3
 802240a:	2203      	movs	r2, #3
 802240c:	9309      	str	r3, [sp, #36]	; 0x24
 802240e:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8022410:	681b      	ldr	r3, [r3, #0]
 8022412:	930c      	str	r3, [sp, #48]	; 0x30
 8022414:	f06f 0304 	mvn.w	r3, #4
 8022418:	fb11 3302 	smlabb	r3, r1, r2, r3
 802241c:	930d      	str	r3, [sp, #52]	; 0x34
 802241e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022420:	43db      	mvns	r3, r3
 8022422:	b2db      	uxtb	r3, r3
 8022424:	930b      	str	r3, [sp, #44]	; 0x2c
 8022426:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022428:	2b00      	cmp	r3, #0
 802242a:	dc03      	bgt.n	8022434 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 802242c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802242e:	2b00      	cmp	r3, #0
 8022430:	f340 81df 	ble.w	80227f2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8022434:	9b07      	ldr	r3, [sp, #28]
 8022436:	2b00      	cmp	r3, #0
 8022438:	f340 80f2 	ble.w	8022620 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 802243c:	ea5f 4228 	movs.w	r2, r8, asr #16
 8022440:	ea4f 432b 	mov.w	r3, fp, asr #16
 8022444:	d430      	bmi.n	80224a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8022446:	1c51      	adds	r1, r2, #1
 8022448:	9808      	ldr	r0, [sp, #32]
 802244a:	4281      	cmp	r1, r0
 802244c:	da2f      	bge.n	80224ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802244e:	2b00      	cmp	r3, #0
 8022450:	db2d      	blt.n	80224ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8022452:	1c59      	adds	r1, r3, #1
 8022454:	980a      	ldr	r0, [sp, #40]	; 0x28
 8022456:	4288      	cmp	r0, r1
 8022458:	dd29      	ble.n	80224ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802245a:	9b07      	ldr	r3, [sp, #28]
 802245c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 802245e:	3b01      	subs	r3, #1
 8022460:	fb02 8203 	mla	r2, r2, r3, r8
 8022464:	1412      	asrs	r2, r2, #16
 8022466:	d42d      	bmi.n	80224c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8022468:	3201      	adds	r2, #1
 802246a:	9908      	ldr	r1, [sp, #32]
 802246c:	4291      	cmp	r1, r2
 802246e:	dd29      	ble.n	80224c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8022470:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8022472:	fb02 b303 	mla	r3, r2, r3, fp
 8022476:	141b      	asrs	r3, r3, #16
 8022478:	d424      	bmi.n	80224c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 802247a:	3301      	adds	r3, #1
 802247c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802247e:	429a      	cmp	r2, r3
 8022480:	dd20      	ble.n	80224c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8022482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022484:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8022488:	1cde      	adds	r6, r3, #3
 802248a:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 802248e:	f1bc 0f00 	cmp.w	ip, #0
 8022492:	f300 811f 	bgt.w	80226d4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 8022496:	9b07      	ldr	r3, [sp, #28]
 8022498:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802249c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802249e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80224a2:	4423      	add	r3, r4
 80224a4:	9309      	str	r3, [sp, #36]	; 0x24
 80224a6:	e0bd      	b.n	8022624 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 80224a8:	1c57      	adds	r7, r2, #1
 80224aa:	f040 80ae 	bne.w	802260a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80224ae:	9908      	ldr	r1, [sp, #32]
 80224b0:	428a      	cmp	r2, r1
 80224b2:	f280 80aa 	bge.w	802260a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80224b6:	1c5e      	adds	r6, r3, #1
 80224b8:	f2c0 80a7 	blt.w	802260a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80224bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80224be:	4293      	cmp	r3, r2
 80224c0:	f280 80a3 	bge.w	802260a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80224c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80224c8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80224ca:	f1ba 0f00 	cmp.w	sl, #0
 80224ce:	dde2      	ble.n	8022496 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 80224d0:	ea5f 4028 	movs.w	r0, r8, asr #16
 80224d4:	f3c8 3303 	ubfx	r3, r8, #12, #4
 80224d8:	ea4f 412b 	mov.w	r1, fp, asr #16
 80224dc:	f3cb 3203 	ubfx	r2, fp, #12, #4
 80224e0:	f100 80df 	bmi.w	80226a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 80224e4:	1c45      	adds	r5, r0, #1
 80224e6:	9f08      	ldr	r7, [sp, #32]
 80224e8:	42af      	cmp	r7, r5
 80224ea:	f340 80dc 	ble.w	80226a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80224ee:	2900      	cmp	r1, #0
 80224f0:	f2c0 80d9 	blt.w	80226a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80224f4:	1c4d      	adds	r5, r1, #1
 80224f6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80224f8:	42af      	cmp	r7, r5
 80224fa:	f340 80d4 	ble.w	80226a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80224fe:	9d08      	ldr	r5, [sp, #32]
 8022500:	fb05 0101 	mla	r1, r5, r1, r0
 8022504:	980c      	ldr	r0, [sp, #48]	; 0x30
 8022506:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802250a:	1845      	adds	r5, r0, r1
 802250c:	5c40      	ldrb	r0, [r0, r1]
 802250e:	792f      	ldrb	r7, [r5, #4]
 8022510:	7869      	ldrb	r1, [r5, #1]
 8022512:	9711      	str	r7, [sp, #68]	; 0x44
 8022514:	796f      	ldrb	r7, [r5, #5]
 8022516:	f895 e002 	ldrb.w	lr, [r5, #2]
 802251a:	f895 9003 	ldrb.w	r9, [r5, #3]
 802251e:	9712      	str	r7, [sp, #72]	; 0x48
 8022520:	b17a      	cbz	r2, 8022542 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 8022522:	3505      	adds	r5, #5
 8022524:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022526:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022528:	19ef      	adds	r7, r5, r7
 802252a:	5d2d      	ldrb	r5, [r5, r4]
 802252c:	787c      	ldrb	r4, [r7, #1]
 802252e:	9513      	str	r5, [sp, #76]	; 0x4c
 8022530:	9415      	str	r4, [sp, #84]	; 0x54
 8022532:	78bc      	ldrb	r4, [r7, #2]
 8022534:	9417      	str	r4, [sp, #92]	; 0x5c
 8022536:	78fc      	ldrb	r4, [r7, #3]
 8022538:	9414      	str	r4, [sp, #80]	; 0x50
 802253a:	793c      	ldrb	r4, [r7, #4]
 802253c:	9416      	str	r4, [sp, #88]	; 0x58
 802253e:	797c      	ldrb	r4, [r7, #5]
 8022540:	9418      	str	r4, [sp, #96]	; 0x60
 8022542:	b29b      	uxth	r3, r3
 8022544:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022546:	b292      	uxth	r2, r2
 8022548:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 802254c:	fb03 f702 	mul.w	r7, r3, r2
 8022550:	011b      	lsls	r3, r3, #4
 8022552:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 8022556:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 802255a:	1bdb      	subs	r3, r3, r7
 802255c:	b292      	uxth	r2, r2
 802255e:	b29b      	uxth	r3, r3
 8022560:	ebac 0c02 	sub.w	ip, ip, r2
 8022564:	fb03 f909 	mul.w	r9, r3, r9
 8022568:	fa1f fc8c 	uxth.w	ip, ip
 802256c:	fb0c 9000 	mla	r0, ip, r0, r9
 8022570:	f896 9000 	ldrb.w	r9, [r6]
 8022574:	fb02 0004 	mla	r0, r2, r4, r0
 8022578:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802257a:	fb07 0004 	mla	r0, r7, r4, r0
 802257e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022580:	fb19 f904 	smulbb	r9, r9, r4
 8022584:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022588:	fb00 9005 	mla	r0, r0, r5, r9
 802258c:	b280      	uxth	r0, r0
 802258e:	f100 0901 	add.w	r9, r0, #1
 8022592:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8022596:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022598:	4358      	muls	r0, r3
 802259a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802259e:	fb0c 0101 	mla	r1, ip, r1, r0
 80225a2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80225a4:	f886 9000 	strb.w	r9, [r6]
 80225a8:	fb02 1100 	mla	r1, r2, r0, r1
 80225ac:	9816      	ldr	r0, [sp, #88]	; 0x58
 80225ae:	fb07 1100 	mla	r1, r7, r0, r1
 80225b2:	7870      	ldrb	r0, [r6, #1]
 80225b4:	fb10 f004 	smulbb	r0, r0, r4
 80225b8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80225bc:	fb01 0105 	mla	r1, r1, r5, r0
 80225c0:	b289      	uxth	r1, r1
 80225c2:	1c48      	adds	r0, r1, #1
 80225c4:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80225c8:	1209      	asrs	r1, r1, #8
 80225ca:	7071      	strb	r1, [r6, #1]
 80225cc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80225ce:	434b      	muls	r3, r1
 80225d0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80225d2:	fb0c 330e 	mla	r3, ip, lr, r3
 80225d6:	fb02 3201 	mla	r2, r2, r1, r3
 80225da:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80225dc:	fb07 2703 	mla	r7, r7, r3, r2
 80225e0:	78b2      	ldrb	r2, [r6, #2]
 80225e2:	fb12 f204 	smulbb	r2, r2, r4
 80225e6:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80225ea:	fb07 2505 	mla	r5, r7, r5, r2
 80225ee:	b2ad      	uxth	r5, r5
 80225f0:	1c6f      	adds	r7, r5, #1
 80225f2:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 80225f6:	122d      	asrs	r5, r5, #8
 80225f8:	70b5      	strb	r5, [r6, #2]
 80225fa:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80225fc:	3603      	adds	r6, #3
 80225fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022602:	4498      	add	r8, r3
 8022604:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8022606:	449b      	add	fp, r3
 8022608:	e75f      	b.n	80224ca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 802260a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 802260c:	4498      	add	r8, r3
 802260e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8022610:	449b      	add	fp, r3
 8022612:	9b07      	ldr	r3, [sp, #28]
 8022614:	3b01      	subs	r3, #1
 8022616:	9307      	str	r3, [sp, #28]
 8022618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802261a:	3303      	adds	r3, #3
 802261c:	9309      	str	r3, [sp, #36]	; 0x24
 802261e:	e709      	b.n	8022434 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8022620:	f47f af1b 	bne.w	802245a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 8022624:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022626:	2b00      	cmp	r3, #0
 8022628:	f340 80e3 	ble.w	80227f2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 802262c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022630:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022632:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022636:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802263a:	eef0 6a48 	vmov.f32	s13, s16
 802263e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022642:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022646:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802264a:	ee16 8a90 	vmov	r8, s13
 802264e:	eef0 6a68 	vmov.f32	s13, s17
 8022652:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022656:	ee16 ba90 	vmov	fp, s13
 802265a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802265e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022662:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022666:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802266a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802266e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022672:	ee18 2a10 	vmov	r2, s16
 8022676:	eeb0 8a47 	vmov.f32	s16, s14
 802267a:	fb92 f3f3 	sdiv	r3, r2, r3
 802267e:	ee18 2a90 	vmov	r2, s17
 8022682:	9335      	str	r3, [sp, #212]	; 0xd4
 8022684:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022686:	eef0 8a67 	vmov.f32	s17, s15
 802268a:	fb92 f3f3 	sdiv	r3, r2, r3
 802268e:	9336      	str	r3, [sp, #216]	; 0xd8
 8022690:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022692:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022694:	3b01      	subs	r3, #1
 8022696:	930e      	str	r3, [sp, #56]	; 0x38
 8022698:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802269a:	bf08      	it	eq
 802269c:	4613      	moveq	r3, r2
 802269e:	9307      	str	r3, [sp, #28]
 80226a0:	e6c1      	b.n	8022426 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 80226a2:	1c45      	adds	r5, r0, #1
 80226a4:	d1a9      	bne.n	80225fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80226a6:	9c08      	ldr	r4, [sp, #32]
 80226a8:	42a0      	cmp	r0, r4
 80226aa:	daa6      	bge.n	80225fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80226ac:	1c4c      	adds	r4, r1, #1
 80226ae:	dba4      	blt.n	80225fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80226b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80226b2:	428c      	cmp	r4, r1
 80226b4:	dda1      	ble.n	80225fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80226b6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80226b8:	9001      	str	r0, [sp, #4]
 80226ba:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80226bc:	e9cd 1302 	strd	r1, r3, [sp, #8]
 80226c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80226c2:	4631      	mov	r1, r6
 80226c4:	e9cd 2404 	strd	r2, r4, [sp, #16]
 80226c8:	9300      	str	r3, [sp, #0]
 80226ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80226cc:	9b08      	ldr	r3, [sp, #32]
 80226ce:	f7ff fd5b 	bl	8022188 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 80226d2:	e792      	b.n	80225fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80226d4:	ea4f 4228 	mov.w	r2, r8, asr #16
 80226d8:	9c08      	ldr	r4, [sp, #32]
 80226da:	ea4f 402b 	mov.w	r0, fp, asr #16
 80226de:	f3cb 3103 	ubfx	r1, fp, #12, #4
 80226e2:	f3c8 3303 	ubfx	r3, r8, #12, #4
 80226e6:	fb04 2000 	mla	r0, r4, r0, r2
 80226ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80226ec:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80226ee:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80226f2:	4402      	add	r2, r0
 80226f4:	5c25      	ldrb	r5, [r4, r0]
 80226f6:	7894      	ldrb	r4, [r2, #2]
 80226f8:	7850      	ldrb	r0, [r2, #1]
 80226fa:	9411      	str	r4, [sp, #68]	; 0x44
 80226fc:	7954      	ldrb	r4, [r2, #5]
 80226fe:	f892 a003 	ldrb.w	sl, [r2, #3]
 8022702:	f892 9004 	ldrb.w	r9, [r2, #4]
 8022706:	9412      	str	r4, [sp, #72]	; 0x48
 8022708:	b171      	cbz	r1, 8022728 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802270a:	3205      	adds	r2, #5
 802270c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802270e:	1917      	adds	r7, r2, r4
 8022710:	5d12      	ldrb	r2, [r2, r4]
 8022712:	9219      	str	r2, [sp, #100]	; 0x64
 8022714:	787a      	ldrb	r2, [r7, #1]
 8022716:	921b      	str	r2, [sp, #108]	; 0x6c
 8022718:	78ba      	ldrb	r2, [r7, #2]
 802271a:	921d      	str	r2, [sp, #116]	; 0x74
 802271c:	78fa      	ldrb	r2, [r7, #3]
 802271e:	921a      	str	r2, [sp, #104]	; 0x68
 8022720:	793a      	ldrb	r2, [r7, #4]
 8022722:	921c      	str	r2, [sp, #112]	; 0x70
 8022724:	797a      	ldrb	r2, [r7, #5]
 8022726:	921e      	str	r2, [sp, #120]	; 0x78
 8022728:	b29b      	uxth	r3, r3
 802272a:	9c19      	ldr	r4, [sp, #100]	; 0x64
 802272c:	b289      	uxth	r1, r1
 802272e:	3603      	adds	r6, #3
 8022730:	f10c 3cff 	add.w	ip, ip, #4294967295
 8022734:	fb03 f201 	mul.w	r2, r3, r1
 8022738:	011b      	lsls	r3, r3, #4
 802273a:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 802273e:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8022742:	1a9b      	subs	r3, r3, r2
 8022744:	b289      	uxth	r1, r1
 8022746:	b29b      	uxth	r3, r3
 8022748:	1a7f      	subs	r7, r7, r1
 802274a:	fb03 fa0a 	mul.w	sl, r3, sl
 802274e:	b2bf      	uxth	r7, r7
 8022750:	fb03 f909 	mul.w	r9, r3, r9
 8022754:	fb07 a505 	mla	r5, r7, r5, sl
 8022758:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 802275c:	fb07 9000 	mla	r0, r7, r0, r9
 8022760:	fb01 5504 	mla	r5, r1, r4, r5
 8022764:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8022766:	fb02 5504 	mla	r5, r2, r4, r5
 802276a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802276c:	fb1a fa04 	smulbb	sl, sl, r4
 8022770:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8022774:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8022776:	fb05 a50e 	mla	r5, r5, lr, sl
 802277a:	fb01 0004 	mla	r0, r1, r4, r0
 802277e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8022780:	b2ad      	uxth	r5, r5
 8022782:	fb02 0004 	mla	r0, r2, r4, r0
 8022786:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022788:	f105 0a01 	add.w	sl, r5, #1
 802278c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022790:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8022794:	122d      	asrs	r5, r5, #8
 8022796:	f806 5c06 	strb.w	r5, [r6, #-6]
 802279a:	f816 5c05 	ldrb.w	r5, [r6, #-5]
 802279e:	fb15 f504 	smulbb	r5, r5, r4
 80227a2:	fb00 500e 	mla	r0, r0, lr, r5
 80227a6:	b280      	uxth	r0, r0
 80227a8:	1c45      	adds	r5, r0, #1
 80227aa:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80227ae:	1200      	asrs	r0, r0, #8
 80227b0:	f806 0c05 	strb.w	r0, [r6, #-5]
 80227b4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80227b6:	4343      	muls	r3, r0
 80227b8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80227ba:	fb07 3300 	mla	r3, r7, r0, r3
 80227be:	981d      	ldr	r0, [sp, #116]	; 0x74
 80227c0:	fb01 3100 	mla	r1, r1, r0, r3
 80227c4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80227c6:	fb02 1203 	mla	r2, r2, r3, r1
 80227ca:	f816 1c04 	ldrb.w	r1, [r6, #-4]
 80227ce:	fb11 f104 	smulbb	r1, r1, r4
 80227d2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80227d6:	fb02 120e 	mla	r2, r2, lr, r1
 80227da:	b292      	uxth	r2, r2
 80227dc:	1c53      	adds	r3, r2, #1
 80227de:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80227e2:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80227e4:	1212      	asrs	r2, r2, #8
 80227e6:	4498      	add	r8, r3
 80227e8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80227ea:	f806 2c04 	strb.w	r2, [r6, #-4]
 80227ee:	449b      	add	fp, r3
 80227f0:	e64d      	b.n	802248e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 80227f2:	b021      	add	sp, #132	; 0x84
 80227f4:	ecbd 8b08 	vpop	{d8-d11}
 80227f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080227fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 80227fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022800:	b085      	sub	sp, #20
 8022802:	784d      	ldrb	r5, [r1, #1]
 8022804:	788e      	ldrb	r6, [r1, #2]
 8022806:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 802280a:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 802280e:	9403      	str	r4, [sp, #12]
 8022810:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8022814:	780c      	ldrb	r4, [r1, #0]
 8022816:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 802281a:	fb07 ce03 	mla	lr, r7, r3, ip
 802281e:	2f00      	cmp	r7, #0
 8022820:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8022824:	eb02 0b0e 	add.w	fp, r2, lr
 8022828:	db56      	blt.n	80228d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 802282a:	45b9      	cmp	r9, r7
 802282c:	dd54      	ble.n	80228d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 802282e:	f1bc 0f00 	cmp.w	ip, #0
 8022832:	db4d      	blt.n	80228d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8022834:	4563      	cmp	r3, ip
 8022836:	dd4b      	ble.n	80228d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8022838:	f812 200e 	ldrb.w	r2, [r2, lr]
 802283c:	9200      	str	r2, [sp, #0]
 802283e:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8022842:	9201      	str	r2, [sp, #4]
 8022844:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8022848:	9202      	str	r2, [sp, #8]
 802284a:	f11c 0201 	adds.w	r2, ip, #1
 802284e:	d44a      	bmi.n	80228e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8022850:	4293      	cmp	r3, r2
 8022852:	dd48      	ble.n	80228e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8022854:	2800      	cmp	r0, #0
 8022856:	d046      	beq.n	80228e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8022858:	f89b e003 	ldrb.w	lr, [fp, #3]
 802285c:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8022860:	f89b a005 	ldrb.w	sl, [fp, #5]
 8022864:	3701      	adds	r7, #1
 8022866:	d446      	bmi.n	80228f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8022868:	45b9      	cmp	r9, r7
 802286a:	dd44      	ble.n	80228f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 802286c:	9a03      	ldr	r2, [sp, #12]
 802286e:	2a00      	cmp	r2, #0
 8022870:	d045      	beq.n	80228fe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 8022872:	f1bc 0f00 	cmp.w	ip, #0
 8022876:	db3a      	blt.n	80228ee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8022878:	4563      	cmp	r3, ip
 802287a:	dd38      	ble.n	80228ee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 802287c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8022880:	f04f 0903 	mov.w	r9, #3
 8022884:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8022888:	fb03 b209 	mla	r2, r3, r9, fp
 802288c:	fb03 b909 	mla	r9, r3, r9, fp
 8022890:	7852      	ldrb	r2, [r2, #1]
 8022892:	f899 9002 	ldrb.w	r9, [r9, #2]
 8022896:	f11c 0c01 	adds.w	ip, ip, #1
 802289a:	d40d      	bmi.n	80228b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 802289c:	4563      	cmp	r3, ip
 802289e:	dd0b      	ble.n	80228b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80228a0:	b160      	cbz	r0, 80228bc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 80228a2:	2603      	movs	r6, #3
 80228a4:	fb13 6406 	smlabb	r4, r3, r6, r6
 80228a8:	fb03 b506 	mla	r5, r3, r6, fp
 80228ac:	fb03 b306 	mla	r3, r3, r6, fp
 80228b0:	f81b 4004 	ldrb.w	r4, [fp, r4]
 80228b4:	792d      	ldrb	r5, [r5, #4]
 80228b6:	795e      	ldrb	r6, [r3, #5]
 80228b8:	280f      	cmp	r0, #15
 80228ba:	d802      	bhi.n	80228c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 80228bc:	9b03      	ldr	r3, [sp, #12]
 80228be:	2b0f      	cmp	r3, #15
 80228c0:	d922      	bls.n	8022908 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 80228c2:	4b2f      	ldr	r3, [pc, #188]	; (8022980 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 80228c4:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80228c8:	4a2e      	ldr	r2, [pc, #184]	; (8022984 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 80228ca:	482f      	ldr	r0, [pc, #188]	; (8022988 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 80228cc:	f003 ff96 	bl	80267fc <__assert_func>
 80228d0:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80228d4:	9400      	str	r4, [sp, #0]
 80228d6:	e7b8      	b.n	802284a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 80228d8:	46b2      	mov	sl, r6
 80228da:	46a8      	mov	r8, r5
 80228dc:	46a6      	mov	lr, r4
 80228de:	9400      	str	r4, [sp, #0]
 80228e0:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80228e4:	e7be      	b.n	8022864 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 80228e6:	46b2      	mov	sl, r6
 80228e8:	46a8      	mov	r8, r5
 80228ea:	46a6      	mov	lr, r4
 80228ec:	e7ba      	b.n	8022864 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 80228ee:	46b1      	mov	r9, r6
 80228f0:	462a      	mov	r2, r5
 80228f2:	4627      	mov	r7, r4
 80228f4:	e7cf      	b.n	8022896 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 80228f6:	46b1      	mov	r9, r6
 80228f8:	462a      	mov	r2, r5
 80228fa:	4627      	mov	r7, r4
 80228fc:	e7dc      	b.n	80228b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80228fe:	280f      	cmp	r0, #15
 8022900:	d8df      	bhi.n	80228c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8022902:	46b1      	mov	r9, r6
 8022904:	462a      	mov	r2, r5
 8022906:	4627      	mov	r7, r4
 8022908:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 802290c:	b280      	uxth	r0, r0
 802290e:	fb00 f30b 	mul.w	r3, r0, fp
 8022912:	0100      	lsls	r0, r0, #4
 8022914:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 8022918:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 802291c:	1ac0      	subs	r0, r0, r3
 802291e:	fa1f fb8b 	uxth.w	fp, fp
 8022922:	b280      	uxth	r0, r0
 8022924:	ebac 0c0b 	sub.w	ip, ip, fp
 8022928:	9003      	str	r0, [sp, #12]
 802292a:	fa1f fc8c 	uxth.w	ip, ip
 802292e:	fb00 fe0e 	mul.w	lr, r0, lr
 8022932:	9800      	ldr	r0, [sp, #0]
 8022934:	fb0c ee00 	mla	lr, ip, r0, lr
 8022938:	9803      	ldr	r0, [sp, #12]
 802293a:	fb00 f808 	mul.w	r8, r0, r8
 802293e:	9801      	ldr	r0, [sp, #4]
 8022940:	fb0b ee07 	mla	lr, fp, r7, lr
 8022944:	fb0c 8800 	mla	r8, ip, r0, r8
 8022948:	fb03 ee04 	mla	lr, r3, r4, lr
 802294c:	fb0b 8202 	mla	r2, fp, r2, r8
 8022950:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022954:	fb03 2505 	mla	r5, r3, r5, r2
 8022958:	9a03      	ldr	r2, [sp, #12]
 802295a:	f881 e000 	strb.w	lr, [r1]
 802295e:	fb02 f00a 	mul.w	r0, r2, sl
 8022962:	9a02      	ldr	r2, [sp, #8]
 8022964:	122d      	asrs	r5, r5, #8
 8022966:	fb0c 0c02 	mla	ip, ip, r2, r0
 802296a:	704d      	strb	r5, [r1, #1]
 802296c:	fb0b c909 	mla	r9, fp, r9, ip
 8022970:	fb03 9606 	mla	r6, r3, r6, r9
 8022974:	1236      	asrs	r6, r6, #8
 8022976:	708e      	strb	r6, [r1, #2]
 8022978:	b005      	add	sp, #20
 802297a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802297e:	bf00      	nop
 8022980:	0802b2c7 	.word	0x0802b2c7
 8022984:	0802b7be 	.word	0x0802b7be
 8022988:	0802b390 	.word	0x0802b390

0802298c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802298c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022990:	ed2d 8b0a 	vpush	{d8-d12}
 8022994:	b09d      	sub	sp, #116	; 0x74
 8022996:	eeb0 aa40 	vmov.f32	s20, s0
 802299a:	eef0 9a60 	vmov.f32	s19, s1
 802299e:	9306      	str	r3, [sp, #24]
 80229a0:	eeb0 9a41 	vmov.f32	s18, s2
 80229a4:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 80229a8:	eeb0 8a62 	vmov.f32	s16, s5
 80229ac:	901b      	str	r0, [sp, #108]	; 0x6c
 80229ae:	eef0 8a43 	vmov.f32	s17, s6
 80229b2:	9307      	str	r3, [sp, #28]
 80229b4:	eeb0 ca44 	vmov.f32	s24, s8
 80229b8:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 80229bc:	eef0 ba64 	vmov.f32	s23, s9
 80229c0:	eeb0 ba45 	vmov.f32	s22, s10
 80229c4:	9309      	str	r3, [sp, #36]	; 0x24
 80229c6:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80229ca:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 80229ce:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80229d0:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 80229d4:	6850      	ldr	r0, [r2, #4]
 80229d6:	6812      	ldr	r2, [r2, #0]
 80229d8:	fb00 1303 	mla	r3, r0, r3, r1
 80229dc:	9907      	ldr	r1, [sp, #28]
 80229de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80229e2:	18d3      	adds	r3, r2, r3
 80229e4:	2203      	movs	r2, #3
 80229e6:	9308      	str	r3, [sp, #32]
 80229e8:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80229ea:	681b      	ldr	r3, [r3, #0]
 80229ec:	930a      	str	r3, [sp, #40]	; 0x28
 80229ee:	f06f 0304 	mvn.w	r3, #4
 80229f2:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 80229f6:	fb11 3302 	smlabb	r3, r1, r2, r3
 80229fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80229fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80229fe:	2b00      	cmp	r3, #0
 8022a00:	dc03      	bgt.n	8022a0a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8022a02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022a04:	2b00      	cmp	r3, #0
 8022a06:	f340 8193 	ble.w	8022d30 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 8022a0a:	9b06      	ldr	r3, [sp, #24]
 8022a0c:	2b00      	cmp	r3, #0
 8022a0e:	f340 80d0 	ble.w	8022bb2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 8022a12:	1432      	asrs	r2, r6, #16
 8022a14:	ea4f 4325 	mov.w	r3, r5, asr #16
 8022a18:	d42f      	bmi.n	8022a7a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 8022a1a:	1c51      	adds	r1, r2, #1
 8022a1c:	9807      	ldr	r0, [sp, #28]
 8022a1e:	4281      	cmp	r1, r0
 8022a20:	da2e      	bge.n	8022a80 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8022a22:	2b00      	cmp	r3, #0
 8022a24:	db2c      	blt.n	8022a80 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8022a26:	1c59      	adds	r1, r3, #1
 8022a28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022a2a:	4288      	cmp	r0, r1
 8022a2c:	dd28      	ble.n	8022a80 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8022a2e:	9b06      	ldr	r3, [sp, #24]
 8022a30:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8022a32:	3b01      	subs	r3, #1
 8022a34:	fb02 6203 	mla	r2, r2, r3, r6
 8022a38:	1412      	asrs	r2, r2, #16
 8022a3a:	d42c      	bmi.n	8022a96 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8022a3c:	3201      	adds	r2, #1
 8022a3e:	9907      	ldr	r1, [sp, #28]
 8022a40:	4291      	cmp	r1, r2
 8022a42:	dd28      	ble.n	8022a96 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8022a44:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8022a46:	fb02 5303 	mla	r3, r2, r3, r5
 8022a4a:	141b      	asrs	r3, r3, #16
 8022a4c:	d423      	bmi.n	8022a96 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8022a4e:	3301      	adds	r3, #1
 8022a50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022a52:	429a      	cmp	r2, r3
 8022a54:	dd1f      	ble.n	8022a96 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8022a56:	9b08      	ldr	r3, [sp, #32]
 8022a58:	f8dd e018 	ldr.w	lr, [sp, #24]
 8022a5c:	f103 0c03 	add.w	ip, r3, #3
 8022a60:	f1be 0f00 	cmp.w	lr, #0
 8022a64:	f300 80fa 	bgt.w	8022c5c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8022a68:	9b06      	ldr	r3, [sp, #24]
 8022a6a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022a6e:	9b08      	ldr	r3, [sp, #32]
 8022a70:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022a74:	4423      	add	r3, r4
 8022a76:	9308      	str	r3, [sp, #32]
 8022a78:	e09d      	b.n	8022bb6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8022a7a:	1c51      	adds	r1, r2, #1
 8022a7c:	f040 808e 	bne.w	8022b9c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8022a80:	9907      	ldr	r1, [sp, #28]
 8022a82:	428a      	cmp	r2, r1
 8022a84:	f280 808a 	bge.w	8022b9c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8022a88:	1c5f      	adds	r7, r3, #1
 8022a8a:	f2c0 8087 	blt.w	8022b9c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8022a8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022a90:	4293      	cmp	r3, r2
 8022a92:	f280 8083 	bge.w	8022b9c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8022a96:	9f06      	ldr	r7, [sp, #24]
 8022a98:	f8dd a020 	ldr.w	sl, [sp, #32]
 8022a9c:	2f00      	cmp	r7, #0
 8022a9e:	dde3      	ble.n	8022a68 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 8022aa0:	1432      	asrs	r2, r6, #16
 8022aa2:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022aa6:	ea4f 4325 	mov.w	r3, r5, asr #16
 8022aaa:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 8022aae:	f100 80bf 	bmi.w	8022c30 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 8022ab2:	1c50      	adds	r0, r2, #1
 8022ab4:	9c07      	ldr	r4, [sp, #28]
 8022ab6:	4284      	cmp	r4, r0
 8022ab8:	f340 80bc 	ble.w	8022c34 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8022abc:	2b00      	cmp	r3, #0
 8022abe:	f2c0 80b9 	blt.w	8022c34 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8022ac2:	1c58      	adds	r0, r3, #1
 8022ac4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022ac6:	4284      	cmp	r4, r0
 8022ac8:	f340 80b4 	ble.w	8022c34 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8022acc:	9807      	ldr	r0, [sp, #28]
 8022ace:	fb00 2303 	mla	r3, r0, r3, r2
 8022ad2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022ad4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8022ad6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022ada:	441a      	add	r2, r3
 8022adc:	f810 c003 	ldrb.w	ip, [r0, r3]
 8022ae0:	7953      	ldrb	r3, [r2, #5]
 8022ae2:	7850      	ldrb	r0, [r2, #1]
 8022ae4:	f892 e002 	ldrb.w	lr, [r2, #2]
 8022ae8:	f892 9003 	ldrb.w	r9, [r2, #3]
 8022aec:	f892 8004 	ldrb.w	r8, [r2, #4]
 8022af0:	930e      	str	r3, [sp, #56]	; 0x38
 8022af2:	f1bb 0f00 	cmp.w	fp, #0
 8022af6:	d00f      	beq.n	8022b18 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 8022af8:	3205      	adds	r2, #5
 8022afa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022afc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022afe:	18d3      	adds	r3, r2, r3
 8022b00:	5d12      	ldrb	r2, [r2, r4]
 8022b02:	920f      	str	r2, [sp, #60]	; 0x3c
 8022b04:	785a      	ldrb	r2, [r3, #1]
 8022b06:	9211      	str	r2, [sp, #68]	; 0x44
 8022b08:	789a      	ldrb	r2, [r3, #2]
 8022b0a:	9213      	str	r2, [sp, #76]	; 0x4c
 8022b0c:	78da      	ldrb	r2, [r3, #3]
 8022b0e:	9210      	str	r2, [sp, #64]	; 0x40
 8022b10:	791a      	ldrb	r2, [r3, #4]
 8022b12:	795b      	ldrb	r3, [r3, #5]
 8022b14:	9212      	str	r2, [sp, #72]	; 0x48
 8022b16:	9314      	str	r3, [sp, #80]	; 0x50
 8022b18:	b28b      	uxth	r3, r1
 8022b1a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022b1c:	fa1f f28b 	uxth.w	r2, fp
 8022b20:	fb03 fb02 	mul.w	fp, r3, r2
 8022b24:	011b      	lsls	r3, r3, #4
 8022b26:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8022b2a:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8022b2e:	eba3 030b 	sub.w	r3, r3, fp
 8022b32:	b292      	uxth	r2, r2
 8022b34:	b29b      	uxth	r3, r3
 8022b36:	1a89      	subs	r1, r1, r2
 8022b38:	fb03 f808 	mul.w	r8, r3, r8
 8022b3c:	b289      	uxth	r1, r1
 8022b3e:	fb03 f909 	mul.w	r9, r3, r9
 8022b42:	fb01 8800 	mla	r8, r1, r0, r8
 8022b46:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022b48:	fb01 990c 	mla	r9, r1, ip, r9
 8022b4c:	fb02 8800 	mla	r8, r2, r0, r8
 8022b50:	9812      	ldr	r0, [sp, #72]	; 0x48
 8022b52:	fb02 9904 	mla	r9, r2, r4, r9
 8022b56:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022b58:	fb0b 8800 	mla	r8, fp, r0, r8
 8022b5c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8022b5e:	fb0b 9904 	mla	r9, fp, r4, r9
 8022b62:	4343      	muls	r3, r0
 8022b64:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022b68:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022b6c:	fb01 330e 	mla	r3, r1, lr, r3
 8022b70:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8022b72:	f88a 9000 	strb.w	r9, [sl]
 8022b76:	fb02 3201 	mla	r2, r2, r1, r3
 8022b7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022b7c:	f88a 8001 	strb.w	r8, [sl, #1]
 8022b80:	fb0b 2b03 	mla	fp, fp, r3, r2
 8022b84:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8022b88:	f88a b002 	strb.w	fp, [sl, #2]
 8022b8c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8022b8e:	f10a 0a03 	add.w	sl, sl, #3
 8022b92:	3f01      	subs	r7, #1
 8022b94:	441e      	add	r6, r3
 8022b96:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8022b98:	441d      	add	r5, r3
 8022b9a:	e77f      	b.n	8022a9c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8022b9c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8022b9e:	441e      	add	r6, r3
 8022ba0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8022ba2:	441d      	add	r5, r3
 8022ba4:	9b06      	ldr	r3, [sp, #24]
 8022ba6:	3b01      	subs	r3, #1
 8022ba8:	9306      	str	r3, [sp, #24]
 8022baa:	9b08      	ldr	r3, [sp, #32]
 8022bac:	3303      	adds	r3, #3
 8022bae:	9308      	str	r3, [sp, #32]
 8022bb0:	e72b      	b.n	8022a0a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8022bb2:	f47f af3c 	bne.w	8022a2e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 8022bb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022bb8:	2b00      	cmp	r3, #0
 8022bba:	f340 80b9 	ble.w	8022d30 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 8022bbe:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8022bc2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022bc4:	ee79 9aab 	vadd.f32	s19, s19, s23
 8022bc8:	eef0 6a48 	vmov.f32	s13, s16
 8022bcc:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8022bd0:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8022bd4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022bd8:	ee16 6a90 	vmov	r6, s13
 8022bdc:	eef0 6a68 	vmov.f32	s13, s17
 8022be0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022be4:	ee16 5a90 	vmov	r5, s13
 8022be8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022bec:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022bf0:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022bf4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022bf8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022bfc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022c00:	ee18 2a10 	vmov	r2, s16
 8022c04:	eeb0 8a47 	vmov.f32	s16, s14
 8022c08:	fb92 f3f3 	sdiv	r3, r2, r3
 8022c0c:	ee18 2a90 	vmov	r2, s17
 8022c10:	9333      	str	r3, [sp, #204]	; 0xcc
 8022c12:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022c14:	eef0 8a67 	vmov.f32	s17, s15
 8022c18:	fb92 f3f3 	sdiv	r3, r2, r3
 8022c1c:	9334      	str	r3, [sp, #208]	; 0xd0
 8022c1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022c20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022c22:	3b01      	subs	r3, #1
 8022c24:	930c      	str	r3, [sp, #48]	; 0x30
 8022c26:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022c28:	bf08      	it	eq
 8022c2a:	4613      	moveq	r3, r2
 8022c2c:	9306      	str	r3, [sp, #24]
 8022c2e:	e6e5      	b.n	80229fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8022c30:	1c54      	adds	r4, r2, #1
 8022c32:	d1ab      	bne.n	8022b8c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8022c34:	9807      	ldr	r0, [sp, #28]
 8022c36:	4282      	cmp	r2, r0
 8022c38:	daa8      	bge.n	8022b8c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8022c3a:	1c58      	adds	r0, r3, #1
 8022c3c:	dba6      	blt.n	8022b8c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8022c3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022c40:	4298      	cmp	r0, r3
 8022c42:	dda3      	ble.n	8022b8c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8022c44:	9000      	str	r0, [sp, #0]
 8022c46:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8022c48:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8022c4c:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 8022c50:	9b07      	ldr	r3, [sp, #28]
 8022c52:	4651      	mov	r1, sl
 8022c54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022c56:	f7ff fdd1 	bl	80227fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8022c5a:	e797      	b.n	8022b8c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8022c5c:	1431      	asrs	r1, r6, #16
 8022c5e:	9c07      	ldr	r4, [sp, #28]
 8022c60:	1428      	asrs	r0, r5, #16
 8022c62:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8022c66:	f3c6 3303 	ubfx	r3, r6, #12, #4
 8022c6a:	fb04 1000 	mla	r0, r4, r0, r1
 8022c6e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8022c70:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022c72:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022c76:	4401      	add	r1, r0
 8022c78:	5c20      	ldrb	r0, [r4, r0]
 8022c7a:	f891 8002 	ldrb.w	r8, [r1, #2]
 8022c7e:	900e      	str	r0, [sp, #56]	; 0x38
 8022c80:	f891 a003 	ldrb.w	sl, [r1, #3]
 8022c84:	7848      	ldrb	r0, [r1, #1]
 8022c86:	f891 9004 	ldrb.w	r9, [r1, #4]
 8022c8a:	f891 b005 	ldrb.w	fp, [r1, #5]
 8022c8e:	b172      	cbz	r2, 8022cae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 8022c90:	3105      	adds	r1, #5
 8022c92:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022c94:	190f      	adds	r7, r1, r4
 8022c96:	5d09      	ldrb	r1, [r1, r4]
 8022c98:	9115      	str	r1, [sp, #84]	; 0x54
 8022c9a:	7879      	ldrb	r1, [r7, #1]
 8022c9c:	9117      	str	r1, [sp, #92]	; 0x5c
 8022c9e:	78b9      	ldrb	r1, [r7, #2]
 8022ca0:	9119      	str	r1, [sp, #100]	; 0x64
 8022ca2:	78f9      	ldrb	r1, [r7, #3]
 8022ca4:	9116      	str	r1, [sp, #88]	; 0x58
 8022ca6:	7939      	ldrb	r1, [r7, #4]
 8022ca8:	9118      	str	r1, [sp, #96]	; 0x60
 8022caa:	7979      	ldrb	r1, [r7, #5]
 8022cac:	911a      	str	r1, [sp, #104]	; 0x68
 8022cae:	b29b      	uxth	r3, r3
 8022cb0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022cb2:	b292      	uxth	r2, r2
 8022cb4:	f10c 0c03 	add.w	ip, ip, #3
 8022cb8:	f10e 3eff 	add.w	lr, lr, #4294967295
 8022cbc:	fb03 f102 	mul.w	r1, r3, r2
 8022cc0:	011b      	lsls	r3, r3, #4
 8022cc2:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 8022cc6:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8022cca:	1a5b      	subs	r3, r3, r1
 8022ccc:	b292      	uxth	r2, r2
 8022cce:	b29b      	uxth	r3, r3
 8022cd0:	1abf      	subs	r7, r7, r2
 8022cd2:	fb03 f909 	mul.w	r9, r3, r9
 8022cd6:	b2bf      	uxth	r7, r7
 8022cd8:	fb03 fa0a 	mul.w	sl, r3, sl
 8022cdc:	fb03 f30b 	mul.w	r3, r3, fp
 8022ce0:	fb07 9900 	mla	r9, r7, r0, r9
 8022ce4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8022ce6:	fb07 aa04 	mla	sl, r7, r4, sl
 8022cea:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022cec:	fb02 9900 	mla	r9, r2, r0, r9
 8022cf0:	9818      	ldr	r0, [sp, #96]	; 0x60
 8022cf2:	fb07 3308 	mla	r3, r7, r8, r3
 8022cf6:	fb01 9900 	mla	r9, r1, r0, r9
 8022cfa:	9819      	ldr	r0, [sp, #100]	; 0x64
 8022cfc:	fb02 aa04 	mla	sl, r2, r4, sl
 8022d00:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8022d02:	fb02 3200 	mla	r2, r2, r0, r3
 8022d06:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8022d08:	fb01 aa04 	mla	sl, r1, r4, sl
 8022d0c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022d10:	fb01 2103 	mla	r1, r1, r3, r2
 8022d14:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8022d16:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022d1a:	f80c 9c05 	strb.w	r9, [ip, #-5]
 8022d1e:	1209      	asrs	r1, r1, #8
 8022d20:	441e      	add	r6, r3
 8022d22:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8022d24:	f80c ac06 	strb.w	sl, [ip, #-6]
 8022d28:	f80c 1c04 	strb.w	r1, [ip, #-4]
 8022d2c:	441d      	add	r5, r3
 8022d2e:	e697      	b.n	8022a60 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 8022d30:	b01d      	add	sp, #116	; 0x74
 8022d32:	ecbd 8b0a 	vpop	{d8-d12}
 8022d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08022d3c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8022d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d40:	b085      	sub	sp, #20
 8022d42:	7888      	ldrb	r0, [r1, #2]
 8022d44:	4691      	mov	r9, r2
 8022d46:	9000      	str	r0, [sp, #0]
 8022d48:	7848      	ldrb	r0, [r1, #1]
 8022d4a:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8022d4e:	9001      	str	r0, [sp, #4]
 8022d50:	7808      	ldrb	r0, [r1, #0]
 8022d52:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8022d56:	9002      	str	r0, [sp, #8]
 8022d58:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8022d5c:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8022d60:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8022d64:	fb04 c603 	mla	r6, r4, r3, ip
 8022d68:	2c00      	cmp	r4, #0
 8022d6a:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 8022d6e:	9a00      	ldr	r2, [sp, #0]
 8022d70:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8022d74:	9a01      	ldr	r2, [sp, #4]
 8022d76:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8022d7a:	db3a      	blt.n	8022df2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8022d7c:	45a0      	cmp	r8, r4
 8022d7e:	dd38      	ble.n	8022df2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8022d80:	f1bc 0f00 	cmp.w	ip, #0
 8022d84:	db33      	blt.n	8022dee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8022d86:	4563      	cmp	r3, ip
 8022d88:	dd31      	ble.n	8022dee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8022d8a:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8022d8e:	f11c 0601 	adds.w	r6, ip, #1
 8022d92:	d431      	bmi.n	8022df8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8022d94:	42b3      	cmp	r3, r6
 8022d96:	dd2f      	ble.n	8022df8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8022d98:	b375      	cbz	r5, 8022df8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8022d9a:	f8de 6004 	ldr.w	r6, [lr, #4]
 8022d9e:	3401      	adds	r4, #1
 8022da0:	d42e      	bmi.n	8022e00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8022da2:	45a0      	cmp	r8, r4
 8022da4:	dd2c      	ble.n	8022e00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8022da6:	b35f      	cbz	r7, 8022e00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8022da8:	f1bc 0f00 	cmp.w	ip, #0
 8022dac:	db26      	blt.n	8022dfc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8022dae:	4563      	cmp	r3, ip
 8022db0:	dd24      	ble.n	8022dfc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8022db2:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8022db6:	f11c 0c01 	adds.w	ip, ip, #1
 8022dba:	d405      	bmi.n	8022dc8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8022dbc:	4563      	cmp	r3, ip
 8022dbe:	dd03      	ble.n	8022dc8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8022dc0:	b115      	cbz	r5, 8022dc8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8022dc2:	3301      	adds	r3, #1
 8022dc4:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8022dc8:	2d0f      	cmp	r5, #15
 8022dca:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8022dce:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8022dd2:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8022dd6:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8022dda:	d801      	bhi.n	8022de0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 8022ddc:	2f0f      	cmp	r7, #15
 8022dde:	d911      	bls.n	8022e04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 8022de0:	4b80      	ldr	r3, [pc, #512]	; (8022fe4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 8022de2:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8022de6:	4a80      	ldr	r2, [pc, #512]	; (8022fe8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 8022de8:	4880      	ldr	r0, [pc, #512]	; (8022fec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2b0>)
 8022dea:	f003 fd07 	bl	80267fc <__assert_func>
 8022dee:	4602      	mov	r2, r0
 8022df0:	e7cd      	b.n	8022d8e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 8022df2:	4606      	mov	r6, r0
 8022df4:	4602      	mov	r2, r0
 8022df6:	e7d2      	b.n	8022d9e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8022df8:	4606      	mov	r6, r0
 8022dfa:	e7d0      	b.n	8022d9e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8022dfc:	4604      	mov	r4, r0
 8022dfe:	e7da      	b.n	8022db6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 8022e00:	4604      	mov	r4, r0
 8022e02:	e7e1      	b.n	8022dc8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8022e04:	b2ab      	uxth	r3, r5
 8022e06:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8022e0a:	b2bf      	uxth	r7, r7
 8022e0c:	fb03 fe07 	mul.w	lr, r3, r7
 8022e10:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8022e14:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8022e18:	eba3 0c0e 	sub.w	ip, r3, lr
 8022e1c:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8022e20:	b2bf      	uxth	r7, r7
 8022e22:	fa1f fc8c 	uxth.w	ip, ip
 8022e26:	eba5 0507 	sub.w	r5, r5, r7
 8022e2a:	fb0c f30a 	mul.w	r3, ip, sl
 8022e2e:	b2ad      	uxth	r5, r5
 8022e30:	fb05 330b 	mla	r3, r5, fp, r3
 8022e34:	fb07 3309 	mla	r3, r7, r9, r3
 8022e38:	fb0e 3308 	mla	r3, lr, r8, r3
 8022e3c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022e40:	9303      	str	r3, [sp, #12]
 8022e42:	d018      	beq.n	8022e76 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x13a>
 8022e44:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8022e48:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022e4c:	fb0b f303 	mul.w	r3, fp, r3
 8022e50:	fb0b fb02 	mul.w	fp, fp, r2
 8022e54:	0a1a      	lsrs	r2, r3, #8
 8022e56:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8022e5a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022e5e:	441a      	add	r2, r3
 8022e60:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8022e64:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8022e68:	0a12      	lsrs	r2, r2, #8
 8022e6a:	0a1b      	lsrs	r3, r3, #8
 8022e6c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022e70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022e74:	431a      	orrs	r2, r3
 8022e76:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022e7a:	d019      	beq.n	8022eb0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x174>
 8022e7c:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8022e80:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022e84:	fb0a fb0b 	mul.w	fp, sl, fp
 8022e88:	fb0a fa06 	mul.w	sl, sl, r6
 8022e8c:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8022e90:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022e94:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8022e98:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022e9c:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8022ea0:	445e      	add	r6, fp
 8022ea2:	0a1b      	lsrs	r3, r3, #8
 8022ea4:	0a36      	lsrs	r6, r6, #8
 8022ea6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022eaa:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022eae:	431e      	orrs	r6, r3
 8022eb0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022eb4:	d019      	beq.n	8022eea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1ae>
 8022eb6:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8022eba:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022ebe:	fb09 fa0a 	mul.w	sl, r9, sl
 8022ec2:	fb09 f904 	mul.w	r9, r9, r4
 8022ec6:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8022eca:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022ece:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8022ed2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022ed6:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8022eda:	4454      	add	r4, sl
 8022edc:	0a1b      	lsrs	r3, r3, #8
 8022ede:	0a24      	lsrs	r4, r4, #8
 8022ee0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022ee4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022ee8:	431c      	orrs	r4, r3
 8022eea:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022eee:	d019      	beq.n	8022f24 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e8>
 8022ef0:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8022ef4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022ef8:	fb08 f909 	mul.w	r9, r8, r9
 8022efc:	fb08 f800 	mul.w	r8, r8, r0
 8022f00:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8022f04:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8022f08:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8022f0c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022f10:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8022f14:	4448      	add	r0, r9
 8022f16:	0a1b      	lsrs	r3, r3, #8
 8022f18:	0a00      	lsrs	r0, r0, #8
 8022f1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022f1e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022f22:	4318      	orrs	r0, r3
 8022f24:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8022f28:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022f2c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8022f30:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022f34:	fb0c f808 	mul.w	r8, ip, r8
 8022f38:	fb0c f606 	mul.w	r6, ip, r6
 8022f3c:	fb05 8803 	mla	r8, r5, r3, r8
 8022f40:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8022f44:	fb05 6202 	mla	r2, r5, r2, r6
 8022f48:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022f4c:	fb07 8803 	mla	r8, r7, r3, r8
 8022f50:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8022f54:	fb07 2704 	mla	r7, r7, r4, r2
 8022f58:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022f5c:	fb0e 8303 	mla	r3, lr, r3, r8
 8022f60:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8022f64:	fb0e 7e00 	mla	lr, lr, r0, r7
 8022f68:	9803      	ldr	r0, [sp, #12]
 8022f6a:	b292      	uxth	r2, r2
 8022f6c:	9c02      	ldr	r4, [sp, #8]
 8022f6e:	0a1b      	lsrs	r3, r3, #8
 8022f70:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022f74:	4350      	muls	r0, r2
 8022f76:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022f7a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022f7e:	ea43 0e0e 	orr.w	lr, r3, lr
 8022f82:	1c43      	adds	r3, r0, #1
 8022f84:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022f88:	fa5f f08e 	uxtb.w	r0, lr
 8022f8c:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8022f90:	b2db      	uxtb	r3, r3
 8022f92:	fb14 f403 	smulbb	r4, r4, r3
 8022f96:	fb00 4002 	mla	r0, r0, r2, r4
 8022f9a:	b280      	uxth	r0, r0
 8022f9c:	1c44      	adds	r4, r0, #1
 8022f9e:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8022fa2:	9c01      	ldr	r4, [sp, #4]
 8022fa4:	fb14 f403 	smulbb	r4, r4, r3
 8022fa8:	1200      	asrs	r0, r0, #8
 8022faa:	7008      	strb	r0, [r1, #0]
 8022fac:	f3ce 2007 	ubfx	r0, lr, #8, #8
 8022fb0:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8022fb4:	fb00 4002 	mla	r0, r0, r2, r4
 8022fb8:	b280      	uxth	r0, r0
 8022fba:	1c44      	adds	r4, r0, #1
 8022fbc:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8022fc0:	1200      	asrs	r0, r0, #8
 8022fc2:	7048      	strb	r0, [r1, #1]
 8022fc4:	9800      	ldr	r0, [sp, #0]
 8022fc6:	fb10 f303 	smulbb	r3, r0, r3
 8022fca:	fb0e 3202 	mla	r2, lr, r2, r3
 8022fce:	b292      	uxth	r2, r2
 8022fd0:	f102 0e01 	add.w	lr, r2, #1
 8022fd4:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8022fd8:	1212      	asrs	r2, r2, #8
 8022fda:	708a      	strb	r2, [r1, #2]
 8022fdc:	b005      	add	sp, #20
 8022fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022fe2:	bf00      	nop
 8022fe4:	0802b2c7 	.word	0x0802b2c7
 8022fe8:	0802b7be 	.word	0x0802b7be
 8022fec:	0802b390 	.word	0x0802b390

08022ff0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ff4:	ed2d 8b08 	vpush	{d8-d11}
 8022ff8:	b099      	sub	sp, #100	; 0x64
 8022ffa:	eeb0 aa40 	vmov.f32	s20, s0
 8022ffe:	eef0 9a60 	vmov.f32	s19, s1
 8023002:	9306      	str	r3, [sp, #24]
 8023004:	eeb0 9a41 	vmov.f32	s18, s2
 8023008:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 802300c:	eeb0 8a62 	vmov.f32	s16, s5
 8023010:	9216      	str	r2, [sp, #88]	; 0x58
 8023012:	eef0 8a43 	vmov.f32	s17, s6
 8023016:	9307      	str	r3, [sp, #28]
 8023018:	eef0 ba44 	vmov.f32	s23, s8
 802301c:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 8023020:	eeb0 ba64 	vmov.f32	s22, s9
 8023024:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8023026:	eef0 aa45 	vmov.f32	s21, s10
 802302a:	9310      	str	r3, [sp, #64]	; 0x40
 802302c:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 8023030:	9017      	str	r0, [sp, #92]	; 0x5c
 8023032:	9112      	str	r1, [sp, #72]	; 0x48
 8023034:	6850      	ldr	r0, [r2, #4]
 8023036:	9315      	str	r3, [sp, #84]	; 0x54
 8023038:	6812      	ldr	r2, [r2, #0]
 802303a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 802303c:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8023040:	fb00 1303 	mla	r3, r0, r3, r1
 8023044:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023048:	18d3      	adds	r3, r2, r3
 802304a:	930a      	str	r3, [sp, #40]	; 0x28
 802304c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802304e:	681b      	ldr	r3, [r3, #0]
 8023050:	9311      	str	r3, [sp, #68]	; 0x44
 8023052:	9b07      	ldr	r3, [sp, #28]
 8023054:	009b      	lsls	r3, r3, #2
 8023056:	930e      	str	r3, [sp, #56]	; 0x38
 8023058:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802305a:	2b00      	cmp	r3, #0
 802305c:	dc03      	bgt.n	8023066 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802305e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023060:	2b00      	cmp	r3, #0
 8023062:	f340 833b 	ble.w	80236dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8023066:	9b06      	ldr	r3, [sp, #24]
 8023068:	2b00      	cmp	r3, #0
 802306a:	f340 8197 	ble.w	802339c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 802306e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023070:	1423      	asrs	r3, r4, #16
 8023072:	1412      	asrs	r2, r2, #16
 8023074:	d432      	bmi.n	80230dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8023076:	1c51      	adds	r1, r2, #1
 8023078:	9807      	ldr	r0, [sp, #28]
 802307a:	4288      	cmp	r0, r1
 802307c:	dd31      	ble.n	80230e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 802307e:	2b00      	cmp	r3, #0
 8023080:	db2f      	blt.n	80230e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8023082:	1c59      	adds	r1, r3, #1
 8023084:	9810      	ldr	r0, [sp, #64]	; 0x40
 8023086:	4288      	cmp	r0, r1
 8023088:	dd2b      	ble.n	80230e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 802308a:	9b06      	ldr	r3, [sp, #24]
 802308c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802308e:	3b01      	subs	r3, #1
 8023090:	992b      	ldr	r1, [sp, #172]	; 0xac
 8023092:	fb02 1203 	mla	r2, r2, r3, r1
 8023096:	1412      	asrs	r2, r2, #16
 8023098:	d42e      	bmi.n	80230f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 802309a:	3201      	adds	r2, #1
 802309c:	9907      	ldr	r1, [sp, #28]
 802309e:	4291      	cmp	r1, r2
 80230a0:	dd2a      	ble.n	80230f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 80230a2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80230a4:	fb02 4303 	mla	r3, r2, r3, r4
 80230a8:	141b      	asrs	r3, r3, #16
 80230aa:	d425      	bmi.n	80230f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 80230ac:	3301      	adds	r3, #1
 80230ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80230b0:	429a      	cmp	r2, r3
 80230b2:	dd21      	ble.n	80230f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 80230b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80230b6:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 80230ba:	f103 0e03 	add.w	lr, r3, #3
 80230be:	9b06      	ldr	r3, [sp, #24]
 80230c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80230c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80230c4:	2b00      	cmp	r3, #0
 80230c6:	f300 81d2 	bgt.w	802346e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47e>
 80230ca:	9b06      	ldr	r3, [sp, #24]
 80230cc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80230d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80230d2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80230d6:	4423      	add	r3, r4
 80230d8:	930a      	str	r3, [sp, #40]	; 0x28
 80230da:	e161      	b.n	80233a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 80230dc:	1c51      	adds	r1, r2, #1
 80230de:	f040 8150 	bne.w	8023382 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80230e2:	9907      	ldr	r1, [sp, #28]
 80230e4:	428a      	cmp	r2, r1
 80230e6:	f280 814c 	bge.w	8023382 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80230ea:	1c5a      	adds	r2, r3, #1
 80230ec:	f2c0 8149 	blt.w	8023382 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80230f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80230f2:	4293      	cmp	r3, r2
 80230f4:	f280 8145 	bge.w	8023382 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80230f8:	9b06      	ldr	r3, [sp, #24]
 80230fa:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80230fc:	9314      	str	r3, [sp, #80]	; 0x50
 80230fe:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8023102:	9313      	str	r3, [sp, #76]	; 0x4c
 8023104:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8023106:	2b00      	cmp	r3, #0
 8023108:	dddf      	ble.n	80230ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 802310a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802310c:	1423      	asrs	r3, r4, #16
 802310e:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8023112:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8023116:	1412      	asrs	r2, r2, #16
 8023118:	f100 8190 	bmi.w	802343c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 802311c:	1c55      	adds	r5, r2, #1
 802311e:	9f07      	ldr	r7, [sp, #28]
 8023120:	42af      	cmp	r7, r5
 8023122:	f340 818d 	ble.w	8023440 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8023126:	2b00      	cmp	r3, #0
 8023128:	f2c0 818a 	blt.w	8023440 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 802312c:	1c5d      	adds	r5, r3, #1
 802312e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8023130:	42af      	cmp	r7, r5
 8023132:	f340 8185 	ble.w	8023440 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8023136:	9d07      	ldr	r5, [sp, #28]
 8023138:	fb03 2305 	mla	r3, r3, r5, r2
 802313c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802313e:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8023142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023146:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802314a:	2800      	cmp	r0, #0
 802314c:	f000 8167 	beq.w	802341e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8023150:	686a      	ldr	r2, [r5, #4]
 8023152:	920b      	str	r2, [sp, #44]	; 0x2c
 8023154:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8023158:	2900      	cmp	r1, #0
 802315a:	f000 8169 	beq.w	8023430 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 802315e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023160:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8023162:	18aa      	adds	r2, r5, r2
 8023164:	59ed      	ldr	r5, [r5, r7]
 8023166:	6852      	ldr	r2, [r2, #4]
 8023168:	9508      	str	r5, [sp, #32]
 802316a:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 802316e:	0e15      	lsrs	r5, r2, #24
 8023170:	920c      	str	r2, [sp, #48]	; 0x30
 8023172:	b280      	uxth	r0, r0
 8023174:	b289      	uxth	r1, r1
 8023176:	fb00 fb01 	mul.w	fp, r0, r1
 802317a:	0100      	lsls	r0, r0, #4
 802317c:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 8023180:	eba0 090b 	sub.w	r9, r0, fp
 8023184:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8023188:	b289      	uxth	r1, r1
 802318a:	fa1f f989 	uxth.w	r9, r9
 802318e:	1a52      	subs	r2, r2, r1
 8023190:	fb09 f008 	mul.w	r0, r9, r8
 8023194:	b292      	uxth	r2, r2
 8023196:	fb02 000c 	mla	r0, r2, ip, r0
 802319a:	fb01 000a 	mla	r0, r1, sl, r0
 802319e:	fb0b 0005 	mla	r0, fp, r5, r0
 80231a2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80231a6:	2800      	cmp	r0, #0
 80231a8:	f000 80e0 	beq.w	802336c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80231ac:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80231b0:	d01b      	beq.n	80231ea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fa>
 80231b2:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80231b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80231ba:	fb0c fe0e 	mul.w	lr, ip, lr
 80231be:	fb0c fc03 	mul.w	ip, ip, r3
 80231c2:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80231c6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80231ca:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80231ce:	4473      	add	r3, lr
 80231d0:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 80231d4:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 80231d8:	0a1b      	lsrs	r3, r3, #8
 80231da:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80231de:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80231e2:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80231e6:	ea43 030e 	orr.w	r3, r3, lr
 80231ea:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80231ee:	d01e      	beq.n	802322e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 80231f0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80231f2:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80231f6:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 80231fa:	fb08 fc0c 	mul.w	ip, r8, ip
 80231fe:	fb08 f80e 	mul.w	r8, r8, lr
 8023202:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023206:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802320a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802320e:	44e6      	add	lr, ip
 8023210:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8023214:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8023218:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802321c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023220:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023224:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8023228:	ea4e 0708 	orr.w	r7, lr, r8
 802322c:	970b      	str	r7, [sp, #44]	; 0x2c
 802322e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8023232:	d01e      	beq.n	8023272 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8023234:	9f08      	ldr	r7, [sp, #32]
 8023236:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 802323a:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802323e:	fb0a f808 	mul.w	r8, sl, r8
 8023242:	fb0a fa0c 	mul.w	sl, sl, ip
 8023246:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 802324a:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802324e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023252:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023256:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802325a:	44c6      	add	lr, r8
 802325c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023260:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023264:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023268:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802326c:	ea4e 070a 	orr.w	r7, lr, sl
 8023270:	9708      	str	r7, [sp, #32]
 8023272:	2dff      	cmp	r5, #255	; 0xff
 8023274:	d01d      	beq.n	80232b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 8023276:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8023278:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 802327c:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8023280:	fb05 f808 	mul.w	r8, r5, r8
 8023284:	fb05 f50c 	mul.w	r5, r5, ip
 8023288:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 802328c:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8023290:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8023294:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023298:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802329c:	44c6      	add	lr, r8
 802329e:	0a2d      	lsrs	r5, r5, #8
 80232a0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80232a4:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80232a8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80232ac:	ea4e 0505 	orr.w	r5, lr, r5
 80232b0:	950c      	str	r5, [sp, #48]	; 0x30
 80232b2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80232b4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80232b8:	9f08      	ldr	r7, [sp, #32]
 80232ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80232be:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80232c2:	fb09 f505 	mul.w	r5, r9, r5
 80232c6:	fb02 550c 	mla	r5, r2, ip, r5
 80232ca:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80232ce:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80232d0:	fb01 550c 	mla	r5, r1, ip, r5
 80232d4:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80232d8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80232da:	fb0b 550c 	mla	r5, fp, ip, r5
 80232de:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80232e2:	fb09 f90c 	mul.w	r9, r9, ip
 80232e6:	0a2d      	lsrs	r5, r5, #8
 80232e8:	fb02 9303 	mla	r3, r2, r3, r9
 80232ec:	9a08      	ldr	r2, [sp, #32]
 80232ee:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80232f2:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 80232f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80232f8:	fb01 330e 	mla	r3, r1, lr, r3
 80232fc:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8023300:	fb0b 3b01 	mla	fp, fp, r1, r3
 8023304:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023306:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8023308:	4343      	muls	r3, r0
 802330a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802330e:	1c58      	adds	r0, r3, #1
 8023310:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8023314:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8023318:	ea45 050b 	orr.w	r5, r5, fp
 802331c:	7833      	ldrb	r3, [r6, #0]
 802331e:	b2ea      	uxtb	r2, r5
 8023320:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8023324:	fb12 f201 	smulbb	r2, r2, r1
 8023328:	b2c0      	uxtb	r0, r0
 802332a:	fb03 2300 	mla	r3, r3, r0, r2
 802332e:	b29b      	uxth	r3, r3
 8023330:	1c5a      	adds	r2, r3, #1
 8023332:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023336:	7872      	ldrb	r2, [r6, #1]
 8023338:	fb12 f200 	smulbb	r2, r2, r0
 802333c:	121b      	asrs	r3, r3, #8
 802333e:	7033      	strb	r3, [r6, #0]
 8023340:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8023344:	0c2d      	lsrs	r5, r5, #16
 8023346:	fb03 2301 	mla	r3, r3, r1, r2
 802334a:	b29b      	uxth	r3, r3
 802334c:	1c5a      	adds	r2, r3, #1
 802334e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023352:	121b      	asrs	r3, r3, #8
 8023354:	7073      	strb	r3, [r6, #1]
 8023356:	78b3      	ldrb	r3, [r6, #2]
 8023358:	fb13 f000 	smulbb	r0, r3, r0
 802335c:	fb05 0501 	mla	r5, r5, r1, r0
 8023360:	b2ad      	uxth	r5, r5
 8023362:	1c6b      	adds	r3, r5, #1
 8023364:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8023368:	122d      	asrs	r5, r5, #8
 802336a:	70b5      	strb	r5, [r6, #2]
 802336c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802336e:	3603      	adds	r6, #3
 8023370:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8023372:	4413      	add	r3, r2
 8023374:	932b      	str	r3, [sp, #172]	; 0xac
 8023376:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023378:	441c      	add	r4, r3
 802337a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802337c:	3b01      	subs	r3, #1
 802337e:	9314      	str	r3, [sp, #80]	; 0x50
 8023380:	e6c0      	b.n	8023104 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 8023382:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023384:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8023386:	4413      	add	r3, r2
 8023388:	932b      	str	r3, [sp, #172]	; 0xac
 802338a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802338c:	441c      	add	r4, r3
 802338e:	9b06      	ldr	r3, [sp, #24]
 8023390:	3b01      	subs	r3, #1
 8023392:	9306      	str	r3, [sp, #24]
 8023394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023396:	3303      	adds	r3, #3
 8023398:	930a      	str	r3, [sp, #40]	; 0x28
 802339a:	e664      	b.n	8023066 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802339c:	f47f ae75 	bne.w	802308a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 80233a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80233a2:	2b00      	cmp	r3, #0
 80233a4:	f340 819a 	ble.w	80236dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 80233a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80233ac:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80233ae:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80233b2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80233b6:	eef0 6a48 	vmov.f32	s13, s16
 80233ba:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80233be:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80233c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80233c6:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 80233ca:	eef0 6a68 	vmov.f32	s13, s17
 80233ce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80233d2:	ee16 4a90 	vmov	r4, s13
 80233d6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80233da:	ee69 7a27 	vmul.f32	s15, s18, s15
 80233de:	ee37 8a48 	vsub.f32	s16, s14, s16
 80233e2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80233e6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80233ea:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80233ee:	ee18 2a10 	vmov	r2, s16
 80233f2:	eeb0 8a47 	vmov.f32	s16, s14
 80233f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80233fa:	ee18 2a90 	vmov	r2, s17
 80233fe:	932d      	str	r3, [sp, #180]	; 0xb4
 8023400:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023402:	eef0 8a67 	vmov.f32	s17, s15
 8023406:	fb92 f3f3 	sdiv	r3, r2, r3
 802340a:	932e      	str	r3, [sp, #184]	; 0xb8
 802340c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802340e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8023410:	3b01      	subs	r3, #1
 8023412:	9312      	str	r3, [sp, #72]	; 0x48
 8023414:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023416:	bf08      	it	eq
 8023418:	4613      	moveq	r3, r2
 802341a:	9306      	str	r3, [sp, #24]
 802341c:	e61c      	b.n	8023058 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 802341e:	b151      	cbz	r1, 8023436 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8023420:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023422:	58aa      	ldr	r2, [r5, r2]
 8023424:	25ff      	movs	r5, #255	; 0xff
 8023426:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 802342a:	9208      	str	r2, [sp, #32]
 802342c:	46a8      	mov	r8, r5
 802342e:	e6a0      	b.n	8023172 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8023430:	25ff      	movs	r5, #255	; 0xff
 8023432:	46aa      	mov	sl, r5
 8023434:	e69d      	b.n	8023172 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8023436:	25ff      	movs	r5, #255	; 0xff
 8023438:	46aa      	mov	sl, r5
 802343a:	e7f7      	b.n	802342c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 802343c:	1c57      	adds	r7, r2, #1
 802343e:	d195      	bne.n	802336c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8023440:	9d07      	ldr	r5, [sp, #28]
 8023442:	4295      	cmp	r5, r2
 8023444:	dd92      	ble.n	802336c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8023446:	1c5d      	adds	r5, r3, #1
 8023448:	db90      	blt.n	802336c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802344a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802344c:	429d      	cmp	r5, r3
 802344e:	dd8d      	ble.n	802336c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8023450:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023452:	9201      	str	r2, [sp, #4]
 8023454:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023456:	e9cd 3002 	strd	r3, r0, [sp, #8]
 802345a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802345c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802345e:	9300      	str	r3, [sp, #0]
 8023460:	9b07      	ldr	r3, [sp, #28]
 8023462:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8023466:	4631      	mov	r1, r6
 8023468:	f7ff fc68 	bl	8022d3c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 802346c:	e77e      	b.n	802336c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802346e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023470:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8023474:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023476:	9d07      	ldr	r5, [sp, #28]
 8023478:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802347c:	1412      	asrs	r2, r2, #16
 802347e:	1423      	asrs	r3, r4, #16
 8023480:	fb05 2303 	mla	r3, r5, r3, r2
 8023484:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023486:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 802348a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802348e:	0e1e      	lsrs	r6, r3, #24
 8023490:	2900      	cmp	r1, #0
 8023492:	f000 8114 	beq.w	80236be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ce>
 8023496:	686a      	ldr	r2, [r5, #4]
 8023498:	920d      	str	r2, [sp, #52]	; 0x34
 802349a:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 802349e:	2800      	cmp	r0, #0
 80234a0:	f000 8116 	beq.w	80236d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 80234a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80234a6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80234a8:	18aa      	adds	r2, r5, r2
 80234aa:	59ed      	ldr	r5, [r5, r7]
 80234ac:	6852      	ldr	r2, [r2, #4]
 80234ae:	9509      	str	r5, [sp, #36]	; 0x24
 80234b0:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80234b4:	0e15      	lsrs	r5, r2, #24
 80234b6:	920f      	str	r2, [sp, #60]	; 0x3c
 80234b8:	b289      	uxth	r1, r1
 80234ba:	b280      	uxth	r0, r0
 80234bc:	fb01 fa00 	mul.w	sl, r1, r0
 80234c0:	0109      	lsls	r1, r1, #4
 80234c2:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80234c6:	eba1 080a 	sub.w	r8, r1, sl
 80234ca:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80234ce:	b280      	uxth	r0, r0
 80234d0:	fa1f f888 	uxth.w	r8, r8
 80234d4:	1a12      	subs	r2, r2, r0
 80234d6:	fb08 f10c 	mul.w	r1, r8, ip
 80234da:	b292      	uxth	r2, r2
 80234dc:	fb02 1106 	mla	r1, r2, r6, r1
 80234e0:	fb00 1109 	mla	r1, r0, r9, r1
 80234e4:	fb0a 1105 	mla	r1, sl, r5, r1
 80234e8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80234ec:	2900      	cmp	r1, #0
 80234ee:	f000 80da 	beq.w	80236a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 80234f2:	2eff      	cmp	r6, #255	; 0xff
 80234f4:	d016      	beq.n	8023524 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x534>
 80234f6:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80234fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80234fe:	4377      	muls	r7, r6
 8023500:	435e      	muls	r6, r3
 8023502:	0a3b      	lsrs	r3, r7, #8
 8023504:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023508:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802350c:	443b      	add	r3, r7
 802350e:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8023512:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8023516:	0a1b      	lsrs	r3, r3, #8
 8023518:	0a3f      	lsrs	r7, r7, #8
 802351a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802351e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023522:	433b      	orrs	r3, r7
 8023524:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023528:	d01d      	beq.n	8023566 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x576>
 802352a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 802352c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802352e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023532:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023536:	fb0c f606 	mul.w	r6, ip, r6
 802353a:	fb0c fc07 	mul.w	ip, ip, r7
 802353e:	0a37      	lsrs	r7, r6, #8
 8023540:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8023544:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023548:	4437      	add	r7, r6
 802354a:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 802354e:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8023552:	0a3f      	lsrs	r7, r7, #8
 8023554:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023558:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802355c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023560:	ea47 060c 	orr.w	r6, r7, ip
 8023564:	960d      	str	r6, [sp, #52]	; 0x34
 8023566:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802356a:	d01d      	beq.n	80235a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b8>
 802356c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802356e:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8023572:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023576:	fb09 fc0c 	mul.w	ip, r9, ip
 802357a:	fb09 f906 	mul.w	r9, r9, r6
 802357e:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8023582:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023586:	f509 7680 	add.w	r6, r9, #256	; 0x100
 802358a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802358e:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8023592:	4467      	add	r7, ip
 8023594:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023598:	0a3f      	lsrs	r7, r7, #8
 802359a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802359e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80235a2:	ea47 0609 	orr.w	r6, r7, r9
 80235a6:	9609      	str	r6, [sp, #36]	; 0x24
 80235a8:	2dff      	cmp	r5, #255	; 0xff
 80235aa:	d01a      	beq.n	80235e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 80235ac:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80235ae:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80235b2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80235b6:	fb05 fc0c 	mul.w	ip, r5, ip
 80235ba:	4375      	muls	r5, r6
 80235bc:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80235c0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80235c4:	f505 7680 	add.w	r6, r5, #256	; 0x100
 80235c8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80235cc:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80235d0:	4467      	add	r7, ip
 80235d2:	0a2d      	lsrs	r5, r5, #8
 80235d4:	0a3f      	lsrs	r7, r7, #8
 80235d6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80235da:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80235de:	433d      	orrs	r5, r7
 80235e0:	950f      	str	r5, [sp, #60]	; 0x3c
 80235e2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80235e4:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 80235e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80235ec:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80235f0:	fb08 f505 	mul.w	r5, r8, r5
 80235f4:	fb02 5506 	mla	r5, r2, r6, r5
 80235f8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80235fa:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80235fe:	fb00 5506 	mla	r5, r0, r6, r5
 8023602:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8023604:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023608:	fb0a 5506 	mla	r5, sl, r6, r5
 802360c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 802360e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023612:	0a2d      	lsrs	r5, r5, #8
 8023614:	fb08 f806 	mul.w	r8, r8, r6
 8023618:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802361c:	fb02 8303 	mla	r3, r2, r3, r8
 8023620:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023622:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8023626:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023628:	fb00 3307 	mla	r3, r0, r7, r3
 802362c:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8023630:	fb0a 3c0c 	mla	ip, sl, ip, r3
 8023634:	fb01 f30b 	mul.w	r3, r1, fp
 8023638:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802363c:	1c59      	adds	r1, r3, #1
 802363e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023642:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023646:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 802364a:	ea45 050c 	orr.w	r5, r5, ip
 802364e:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8023652:	b2ea      	uxtb	r2, r5
 8023654:	b2c9      	uxtb	r1, r1
 8023656:	fb12 f20b 	smulbb	r2, r2, fp
 802365a:	fb03 2301 	mla	r3, r3, r1, r2
 802365e:	b29b      	uxth	r3, r3
 8023660:	1c5a      	adds	r2, r3, #1
 8023662:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023666:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 802366a:	fb12 f201 	smulbb	r2, r2, r1
 802366e:	121b      	asrs	r3, r3, #8
 8023670:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8023674:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8023678:	0c2d      	lsrs	r5, r5, #16
 802367a:	fb03 230b 	mla	r3, r3, fp, r2
 802367e:	b29b      	uxth	r3, r3
 8023680:	1c5a      	adds	r2, r3, #1
 8023682:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023686:	121b      	asrs	r3, r3, #8
 8023688:	f80e 3c02 	strb.w	r3, [lr, #-2]
 802368c:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8023690:	fb13 f101 	smulbb	r1, r3, r1
 8023694:	fb05 150b 	mla	r5, r5, fp, r1
 8023698:	b2ad      	uxth	r5, r5
 802369a:	1c69      	adds	r1, r5, #1
 802369c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80236a0:	122d      	asrs	r5, r5, #8
 80236a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80236a6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80236a8:	f10e 0e03 	add.w	lr, lr, #3
 80236ac:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80236ae:	4413      	add	r3, r2
 80236b0:	932b      	str	r3, [sp, #172]	; 0xac
 80236b2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80236b4:	441c      	add	r4, r3
 80236b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80236b8:	3b01      	subs	r3, #1
 80236ba:	9313      	str	r3, [sp, #76]	; 0x4c
 80236bc:	e501      	b.n	80230c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 80236be:	b150      	cbz	r0, 80236d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e6>
 80236c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80236c2:	58aa      	ldr	r2, [r5, r2]
 80236c4:	25ff      	movs	r5, #255	; 0xff
 80236c6:	ea4f 6912 	mov.w	r9, r2, lsr #24
 80236ca:	9209      	str	r2, [sp, #36]	; 0x24
 80236cc:	46ac      	mov	ip, r5
 80236ce:	e6f3      	b.n	80234b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 80236d0:	25ff      	movs	r5, #255	; 0xff
 80236d2:	46a9      	mov	r9, r5
 80236d4:	e6f0      	b.n	80234b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 80236d6:	25ff      	movs	r5, #255	; 0xff
 80236d8:	46a9      	mov	r9, r5
 80236da:	e7f7      	b.n	80236cc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6dc>
 80236dc:	b019      	add	sp, #100	; 0x64
 80236de:	ecbd 8b08 	vpop	{d8-d11}
 80236e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080236e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 80236e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80236ec:	b085      	sub	sp, #20
 80236ee:	7888      	ldrb	r0, [r1, #2]
 80236f0:	4691      	mov	r9, r2
 80236f2:	9000      	str	r0, [sp, #0]
 80236f4:	7848      	ldrb	r0, [r1, #1]
 80236f6:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 80236fa:	9001      	str	r0, [sp, #4]
 80236fc:	7808      	ldrb	r0, [r1, #0]
 80236fe:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8023702:	9002      	str	r0, [sp, #8]
 8023704:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8023708:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 802370c:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8023710:	fb04 c603 	mla	r6, r4, r3, ip
 8023714:	2c00      	cmp	r4, #0
 8023716:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 802371a:	9a00      	ldr	r2, [sp, #0]
 802371c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8023720:	9a01      	ldr	r2, [sp, #4]
 8023722:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8023726:	db3a      	blt.n	802379e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8023728:	45a0      	cmp	r8, r4
 802372a:	dd38      	ble.n	802379e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 802372c:	f1bc 0f00 	cmp.w	ip, #0
 8023730:	db33      	blt.n	802379a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8023732:	4563      	cmp	r3, ip
 8023734:	dd31      	ble.n	802379a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8023736:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 802373a:	f11c 0601 	adds.w	r6, ip, #1
 802373e:	d431      	bmi.n	80237a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8023740:	42b3      	cmp	r3, r6
 8023742:	dd2f      	ble.n	80237a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8023744:	b375      	cbz	r5, 80237a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8023746:	f8de 6004 	ldr.w	r6, [lr, #4]
 802374a:	3401      	adds	r4, #1
 802374c:	d42e      	bmi.n	80237ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 802374e:	45a0      	cmp	r8, r4
 8023750:	dd2c      	ble.n	80237ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8023752:	b35f      	cbz	r7, 80237ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8023754:	f1bc 0f00 	cmp.w	ip, #0
 8023758:	db26      	blt.n	80237a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 802375a:	4563      	cmp	r3, ip
 802375c:	dd24      	ble.n	80237a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 802375e:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8023762:	f11c 0c01 	adds.w	ip, ip, #1
 8023766:	d405      	bmi.n	8023774 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8023768:	4563      	cmp	r3, ip
 802376a:	dd03      	ble.n	8023774 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802376c:	b115      	cbz	r5, 8023774 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802376e:	3301      	adds	r3, #1
 8023770:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8023774:	2d0f      	cmp	r5, #15
 8023776:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802377a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802377e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8023782:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8023786:	d801      	bhi.n	802378c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 8023788:	2f0f      	cmp	r7, #15
 802378a:	d911      	bls.n	80237b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 802378c:	4b77      	ldr	r3, [pc, #476]	; (802396c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 802378e:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8023792:	4a77      	ldr	r2, [pc, #476]	; (8023970 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 8023794:	4877      	ldr	r0, [pc, #476]	; (8023974 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x28c>)
 8023796:	f003 f831 	bl	80267fc <__assert_func>
 802379a:	4602      	mov	r2, r0
 802379c:	e7cd      	b.n	802373a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 802379e:	4606      	mov	r6, r0
 80237a0:	4602      	mov	r2, r0
 80237a2:	e7d2      	b.n	802374a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 80237a4:	4606      	mov	r6, r0
 80237a6:	e7d0      	b.n	802374a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 80237a8:	4604      	mov	r4, r0
 80237aa:	e7da      	b.n	8023762 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 80237ac:	4604      	mov	r4, r0
 80237ae:	e7e1      	b.n	8023774 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80237b0:	b2ab      	uxth	r3, r5
 80237b2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80237b6:	b2bf      	uxth	r7, r7
 80237b8:	fb03 fe07 	mul.w	lr, r3, r7
 80237bc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80237c0:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80237c4:	eba3 0c0e 	sub.w	ip, r3, lr
 80237c8:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 80237cc:	b2bf      	uxth	r7, r7
 80237ce:	fa1f fc8c 	uxth.w	ip, ip
 80237d2:	eba5 0507 	sub.w	r5, r5, r7
 80237d6:	fb0c f30a 	mul.w	r3, ip, sl
 80237da:	b2ad      	uxth	r5, r5
 80237dc:	fb05 330b 	mla	r3, r5, fp, r3
 80237e0:	fb07 3309 	mla	r3, r7, r9, r3
 80237e4:	fb0e 3308 	mla	r3, lr, r8, r3
 80237e8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80237ec:	9303      	str	r3, [sp, #12]
 80237ee:	d018      	beq.n	8023822 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x13a>
 80237f0:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80237f4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80237f8:	fb0b f303 	mul.w	r3, fp, r3
 80237fc:	fb0b fb02 	mul.w	fp, fp, r2
 8023800:	0a1a      	lsrs	r2, r3, #8
 8023802:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8023806:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802380a:	441a      	add	r2, r3
 802380c:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8023810:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8023814:	0a12      	lsrs	r2, r2, #8
 8023816:	0a1b      	lsrs	r3, r3, #8
 8023818:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802381c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023820:	431a      	orrs	r2, r3
 8023822:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8023826:	d019      	beq.n	802385c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x174>
 8023828:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 802382c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023830:	fb0a fb0b 	mul.w	fp, sl, fp
 8023834:	fb0a fa06 	mul.w	sl, sl, r6
 8023838:	ea4f 261b 	mov.w	r6, fp, lsr #8
 802383c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023840:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8023844:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023848:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 802384c:	445e      	add	r6, fp
 802384e:	0a1b      	lsrs	r3, r3, #8
 8023850:	0a36      	lsrs	r6, r6, #8
 8023852:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023856:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802385a:	431e      	orrs	r6, r3
 802385c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023860:	d019      	beq.n	8023896 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1ae>
 8023862:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8023866:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802386a:	fb09 fa0a 	mul.w	sl, r9, sl
 802386e:	fb09 f904 	mul.w	r9, r9, r4
 8023872:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8023876:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802387a:	f509 7380 	add.w	r3, r9, #256	; 0x100
 802387e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023882:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8023886:	4454      	add	r4, sl
 8023888:	0a1b      	lsrs	r3, r3, #8
 802388a:	0a24      	lsrs	r4, r4, #8
 802388c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023890:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023894:	431c      	orrs	r4, r3
 8023896:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802389a:	d019      	beq.n	80238d0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e8>
 802389c:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 80238a0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80238a4:	fb08 f909 	mul.w	r9, r8, r9
 80238a8:	fb08 f800 	mul.w	r8, r8, r0
 80238ac:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80238b0:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80238b4:	f508 7380 	add.w	r3, r8, #256	; 0x100
 80238b8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80238bc:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 80238c0:	4448      	add	r0, r9
 80238c2:	0a1b      	lsrs	r3, r3, #8
 80238c4:	0a00      	lsrs	r0, r0, #8
 80238c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80238ca:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80238ce:	4318      	orrs	r0, r3
 80238d0:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80238d4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80238d8:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80238dc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80238e0:	fb0c f808 	mul.w	r8, ip, r8
 80238e4:	fb0c f606 	mul.w	r6, ip, r6
 80238e8:	fb05 8803 	mla	r8, r5, r3, r8
 80238ec:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 80238f0:	fb05 6202 	mla	r2, r5, r2, r6
 80238f4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80238f8:	fb07 8803 	mla	r8, r7, r3, r8
 80238fc:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8023900:	fb07 2704 	mla	r7, r7, r4, r2
 8023904:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023908:	fb0e 8303 	mla	r3, lr, r3, r8
 802390c:	fb0e 7e00 	mla	lr, lr, r0, r7
 8023910:	9802      	ldr	r0, [sp, #8]
 8023912:	0a1b      	lsrs	r3, r3, #8
 8023914:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023918:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802391c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023920:	ea43 0e0e 	orr.w	lr, r3, lr
 8023924:	9b03      	ldr	r3, [sp, #12]
 8023926:	43db      	mvns	r3, r3
 8023928:	b2db      	uxtb	r3, r3
 802392a:	4358      	muls	r0, r3
 802392c:	1c42      	adds	r2, r0, #1
 802392e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8023932:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8023936:	700a      	strb	r2, [r1, #0]
 8023938:	9a01      	ldr	r2, [sp, #4]
 802393a:	435a      	muls	r2, r3
 802393c:	1c50      	adds	r0, r2, #1
 802393e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8023942:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8023946:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 802394a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802394e:	704a      	strb	r2, [r1, #1]
 8023950:	9a00      	ldr	r2, [sp, #0]
 8023952:	435a      	muls	r2, r3
 8023954:	4613      	mov	r3, r2
 8023956:	3201      	adds	r2, #1
 8023958:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802395c:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8023960:	f881 e002 	strb.w	lr, [r1, #2]
 8023964:	b005      	add	sp, #20
 8023966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802396a:	bf00      	nop
 802396c:	0802b2c7 	.word	0x0802b2c7
 8023970:	0802b7be 	.word	0x0802b7be
 8023974:	0802b390 	.word	0x0802b390

08023978 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8023978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802397c:	ed2d 8b08 	vpush	{d8-d11}
 8023980:	b097      	sub	sp, #92	; 0x5c
 8023982:	eeb0 aa40 	vmov.f32	s20, s0
 8023986:	eef0 9a60 	vmov.f32	s19, s1
 802398a:	9306      	str	r3, [sp, #24]
 802398c:	eeb0 9a41 	vmov.f32	s18, s2
 8023990:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 8023994:	eeb0 8a62 	vmov.f32	s16, s5
 8023998:	9214      	str	r2, [sp, #80]	; 0x50
 802399a:	eef0 8a43 	vmov.f32	s17, s6
 802399e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80239a0:	eef0 ba44 	vmov.f32	s23, s8
 80239a4:	9307      	str	r3, [sp, #28]
 80239a6:	eeb0 ba64 	vmov.f32	s22, s9
 80239aa:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 80239ae:	eef0 aa45 	vmov.f32	s21, s10
 80239b2:	9015      	str	r0, [sp, #84]	; 0x54
 80239b4:	9112      	str	r1, [sp, #72]	; 0x48
 80239b6:	6850      	ldr	r0, [r2, #4]
 80239b8:	9310      	str	r3, [sp, #64]	; 0x40
 80239ba:	6812      	ldr	r2, [r2, #0]
 80239bc:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80239be:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80239c2:	fb00 1303 	mla	r3, r0, r3, r1
 80239c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80239ca:	18d3      	adds	r3, r2, r3
 80239cc:	930a      	str	r3, [sp, #40]	; 0x28
 80239ce:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80239d0:	681b      	ldr	r3, [r3, #0]
 80239d2:	9311      	str	r3, [sp, #68]	; 0x44
 80239d4:	9b07      	ldr	r3, [sp, #28]
 80239d6:	009b      	lsls	r3, r3, #2
 80239d8:	930e      	str	r3, [sp, #56]	; 0x38
 80239da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80239dc:	2b00      	cmp	r3, #0
 80239de:	dc03      	bgt.n	80239e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80239e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80239e2:	2b00      	cmp	r3, #0
 80239e4:	f340 832e 	ble.w	8024044 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 80239e8:	9b06      	ldr	r3, [sp, #24]
 80239ea:	2b00      	cmp	r3, #0
 80239ec:	f340 8186 	ble.w	8023cfc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x384>
 80239f0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80239f2:	1423      	asrs	r3, r4, #16
 80239f4:	1412      	asrs	r2, r2, #16
 80239f6:	d42f      	bmi.n	8023a58 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 80239f8:	1c51      	adds	r1, r2, #1
 80239fa:	9807      	ldr	r0, [sp, #28]
 80239fc:	4288      	cmp	r0, r1
 80239fe:	dd2e      	ble.n	8023a5e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8023a00:	2b00      	cmp	r3, #0
 8023a02:	db2c      	blt.n	8023a5e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8023a04:	1c59      	adds	r1, r3, #1
 8023a06:	9810      	ldr	r0, [sp, #64]	; 0x40
 8023a08:	4288      	cmp	r0, r1
 8023a0a:	dd28      	ble.n	8023a5e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8023a0c:	9b06      	ldr	r3, [sp, #24]
 8023a0e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023a10:	3b01      	subs	r3, #1
 8023a12:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8023a14:	fb02 1203 	mla	r2, r2, r3, r1
 8023a18:	1412      	asrs	r2, r2, #16
 8023a1a:	d42b      	bmi.n	8023a74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8023a1c:	3201      	adds	r2, #1
 8023a1e:	9907      	ldr	r1, [sp, #28]
 8023a20:	4291      	cmp	r1, r2
 8023a22:	dd27      	ble.n	8023a74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8023a24:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8023a26:	fb02 4303 	mla	r3, r2, r3, r4
 8023a2a:	141b      	asrs	r3, r3, #16
 8023a2c:	d422      	bmi.n	8023a74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8023a2e:	3301      	adds	r3, #1
 8023a30:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023a32:	429a      	cmp	r2, r3
 8023a34:	dd1e      	ble.n	8023a74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8023a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023a38:	f8dd b018 	ldr.w	fp, [sp, #24]
 8023a3c:	1cdd      	adds	r5, r3, #3
 8023a3e:	f1bb 0f00 	cmp.w	fp, #0
 8023a42:	f300 81c4 	bgt.w	8023dce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 8023a46:	9b06      	ldr	r3, [sp, #24]
 8023a48:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023a4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023a4e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023a52:	4423      	add	r3, r4
 8023a54:	930a      	str	r3, [sp, #40]	; 0x28
 8023a56:	e153      	b.n	8023d00 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 8023a58:	1c51      	adds	r1, r2, #1
 8023a5a:	f040 8142 	bne.w	8023ce2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8023a5e:	9907      	ldr	r1, [sp, #28]
 8023a60:	428a      	cmp	r2, r1
 8023a62:	f280 813e 	bge.w	8023ce2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8023a66:	1c5a      	adds	r2, r3, #1
 8023a68:	f2c0 813b 	blt.w	8023ce2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8023a6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023a6e:	4293      	cmp	r3, r2
 8023a70:	f280 8137 	bge.w	8023ce2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8023a74:	9b06      	ldr	r3, [sp, #24]
 8023a76:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8023a78:	9313      	str	r3, [sp, #76]	; 0x4c
 8023a7a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023a7c:	2b00      	cmp	r3, #0
 8023a7e:	dde2      	ble.n	8023a46 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 8023a80:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8023a82:	1423      	asrs	r3, r4, #16
 8023a84:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023a86:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8023a8a:	1409      	asrs	r1, r1, #16
 8023a8c:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8023a90:	f100 8187 	bmi.w	8023da2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 8023a94:	1c4e      	adds	r6, r1, #1
 8023a96:	9f07      	ldr	r7, [sp, #28]
 8023a98:	42b7      	cmp	r7, r6
 8023a9a:	f340 8184 	ble.w	8023da6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8023a9e:	2b00      	cmp	r3, #0
 8023aa0:	f2c0 8181 	blt.w	8023da6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8023aa4:	1c5e      	adds	r6, r3, #1
 8023aa6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8023aa8:	42b7      	cmp	r7, r6
 8023aaa:	f340 817c 	ble.w	8023da6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8023aae:	9e07      	ldr	r6, [sp, #28]
 8023ab0:	fb03 1306 	mla	r3, r3, r6, r1
 8023ab4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8023ab6:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8023aba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8023abe:	0e1f      	lsrs	r7, r3, #24
 8023ac0:	2a00      	cmp	r2, #0
 8023ac2:	f000 815c 	beq.w	8023d7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 8023ac6:	6871      	ldr	r1, [r6, #4]
 8023ac8:	910b      	str	r1, [sp, #44]	; 0x2c
 8023aca:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8023ace:	2800      	cmp	r0, #0
 8023ad0:	f000 815e 	beq.w	8023d90 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x418>
 8023ad4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8023ad6:	eb06 0c01 	add.w	ip, r6, r1
 8023ada:	5876      	ldr	r6, [r6, r1]
 8023adc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8023ae0:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8023ae4:	9608      	str	r6, [sp, #32]
 8023ae6:	0e0e      	lsrs	r6, r1, #24
 8023ae8:	910c      	str	r1, [sp, #48]	; 0x30
 8023aea:	b292      	uxth	r2, r2
 8023aec:	b280      	uxth	r0, r0
 8023aee:	fb02 fa00 	mul.w	sl, r2, r0
 8023af2:	0112      	lsls	r2, r2, #4
 8023af4:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8023af8:	eba2 080a 	sub.w	r8, r2, sl
 8023afc:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8023b00:	b280      	uxth	r0, r0
 8023b02:	fa1f f888 	uxth.w	r8, r8
 8023b06:	1a09      	subs	r1, r1, r0
 8023b08:	fb08 f20e 	mul.w	r2, r8, lr
 8023b0c:	b289      	uxth	r1, r1
 8023b0e:	fb01 2207 	mla	r2, r1, r7, r2
 8023b12:	fb00 2209 	mla	r2, r0, r9, r2
 8023b16:	fb0a 2206 	mla	r2, sl, r6, r2
 8023b1a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023b1e:	2a00      	cmp	r2, #0
 8023b20:	f000 80d4 	beq.w	8023ccc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8023b24:	2fff      	cmp	r7, #255	; 0xff
 8023b26:	d01a      	beq.n	8023b5e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e6>
 8023b28:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8023b2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023b30:	fb07 fc0c 	mul.w	ip, r7, ip
 8023b34:	435f      	muls	r7, r3
 8023b36:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8023b3a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023b3e:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 8023b42:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023b46:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8023b4a:	4463      	add	r3, ip
 8023b4c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8023b50:	0a1b      	lsrs	r3, r3, #8
 8023b52:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8023b56:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023b5a:	ea43 030b 	orr.w	r3, r3, fp
 8023b5e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023b62:	d01e      	beq.n	8023ba2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8023b64:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8023b66:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 8023b6a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023b6e:	fb0e fb0b 	mul.w	fp, lr, fp
 8023b72:	fb0e fe07 	mul.w	lr, lr, r7
 8023b76:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8023b7a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023b7e:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8023b82:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023b86:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8023b8a:	44dc      	add	ip, fp
 8023b8c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023b90:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023b94:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023b98:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023b9c:	ea4c 070e 	orr.w	r7, ip, lr
 8023ba0:	970b      	str	r7, [sp, #44]	; 0x2c
 8023ba2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023ba6:	d01e      	beq.n	8023be6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8023ba8:	9f08      	ldr	r7, [sp, #32]
 8023baa:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8023bae:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023bb2:	fb09 fe0e 	mul.w	lr, r9, lr
 8023bb6:	fb09 f907 	mul.w	r9, r9, r7
 8023bba:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8023bbe:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8023bc2:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8023bc6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023bca:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8023bce:	44f4      	add	ip, lr
 8023bd0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023bd4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023bd8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023bdc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023be0:	ea4c 0709 	orr.w	r7, ip, r9
 8023be4:	9708      	str	r7, [sp, #32]
 8023be6:	2eff      	cmp	r6, #255	; 0xff
 8023be8:	d01c      	beq.n	8023c24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 8023bea:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8023bec:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8023bf0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023bf4:	fb06 fe0e 	mul.w	lr, r6, lr
 8023bf8:	437e      	muls	r6, r7
 8023bfa:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8023bfe:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8023c02:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8023c06:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023c0a:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8023c0e:	44f4      	add	ip, lr
 8023c10:	0a36      	lsrs	r6, r6, #8
 8023c12:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023c16:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023c1a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023c1e:	ea4c 0606 	orr.w	r6, ip, r6
 8023c22:	960c      	str	r6, [sp, #48]	; 0x30
 8023c24:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8023c26:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8023c2a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023c2e:	2aff      	cmp	r2, #255	; 0xff
 8023c30:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023c34:	fb08 f606 	mul.w	r6, r8, r6
 8023c38:	fb01 6607 	mla	r6, r1, r7, r6
 8023c3c:	9f08      	ldr	r7, [sp, #32]
 8023c3e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023c42:	fb00 6607 	mla	r6, r0, r7, r6
 8023c46:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8023c48:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023c4c:	fb0a 6607 	mla	r6, sl, r7, r6
 8023c50:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8023c52:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023c56:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8023c5a:	fb08 f807 	mul.w	r8, r8, r7
 8023c5e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023c62:	fb01 8303 	mla	r3, r1, r3, r8
 8023c66:	9908      	ldr	r1, [sp, #32]
 8023c68:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8023c6c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023c6e:	fb00 330c 	mla	r3, r0, ip, r3
 8023c72:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8023c76:	fb0a 3a00 	mla	sl, sl, r0, r3
 8023c7a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023c7e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023c82:	ea46 060a 	orr.w	r6, r6, sl
 8023c86:	b2f0      	uxtb	r0, r6
 8023c88:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8023c8c:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8023c90:	f000 8084 	beq.w	8023d9c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8023c94:	43d2      	mvns	r2, r2
 8023c96:	782b      	ldrb	r3, [r5, #0]
 8023c98:	b2d2      	uxtb	r2, r2
 8023c9a:	fb03 f702 	mul.w	r7, r3, r2
 8023c9e:	1c7b      	adds	r3, r7, #1
 8023ca0:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8023ca4:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8023ca8:	702b      	strb	r3, [r5, #0]
 8023caa:	786b      	ldrb	r3, [r5, #1]
 8023cac:	fb03 f002 	mul.w	r0, r3, r2
 8023cb0:	1c43      	adds	r3, r0, #1
 8023cb2:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8023cb6:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8023cba:	706b      	strb	r3, [r5, #1]
 8023cbc:	78ab      	ldrb	r3, [r5, #2]
 8023cbe:	4353      	muls	r3, r2
 8023cc0:	1c5a      	adds	r2, r3, #1
 8023cc2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023cc6:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8023cca:	70ae      	strb	r6, [r5, #2]
 8023ccc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023cce:	3503      	adds	r5, #3
 8023cd0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023cd2:	4413      	add	r3, r2
 8023cd4:	9329      	str	r3, [sp, #164]	; 0xa4
 8023cd6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023cd8:	441c      	add	r4, r3
 8023cda:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023cdc:	3b01      	subs	r3, #1
 8023cde:	9313      	str	r3, [sp, #76]	; 0x4c
 8023ce0:	e6cb      	b.n	8023a7a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8023ce2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023ce4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023ce6:	4413      	add	r3, r2
 8023ce8:	9329      	str	r3, [sp, #164]	; 0xa4
 8023cea:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023cec:	441c      	add	r4, r3
 8023cee:	9b06      	ldr	r3, [sp, #24]
 8023cf0:	3b01      	subs	r3, #1
 8023cf2:	9306      	str	r3, [sp, #24]
 8023cf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023cf6:	3303      	adds	r3, #3
 8023cf8:	930a      	str	r3, [sp, #40]	; 0x28
 8023cfa:	e675      	b.n	80239e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8023cfc:	f47f ae86 	bne.w	8023a0c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8023d00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023d02:	2b00      	cmp	r3, #0
 8023d04:	f340 819e 	ble.w	8024044 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8023d08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023d0c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023d0e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023d12:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023d16:	eef0 6a48 	vmov.f32	s13, s16
 8023d1a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023d1e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023d22:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023d26:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8023d2a:	eef0 6a68 	vmov.f32	s13, s17
 8023d2e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023d32:	ee16 4a90 	vmov	r4, s13
 8023d36:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023d3a:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023d3e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023d42:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023d46:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023d4a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023d4e:	ee18 2a10 	vmov	r2, s16
 8023d52:	eeb0 8a47 	vmov.f32	s16, s14
 8023d56:	fb92 f3f3 	sdiv	r3, r2, r3
 8023d5a:	ee18 2a90 	vmov	r2, s17
 8023d5e:	932b      	str	r3, [sp, #172]	; 0xac
 8023d60:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023d62:	eef0 8a67 	vmov.f32	s17, s15
 8023d66:	fb92 f3f3 	sdiv	r3, r2, r3
 8023d6a:	932c      	str	r3, [sp, #176]	; 0xb0
 8023d6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023d6e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023d70:	3b01      	subs	r3, #1
 8023d72:	9312      	str	r3, [sp, #72]	; 0x48
 8023d74:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023d76:	bf08      	it	eq
 8023d78:	4613      	moveq	r3, r2
 8023d7a:	9306      	str	r3, [sp, #24]
 8023d7c:	e62d      	b.n	80239da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 8023d7e:	b150      	cbz	r0, 8023d96 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41e>
 8023d80:	990e      	ldr	r1, [sp, #56]	; 0x38
 8023d82:	5871      	ldr	r1, [r6, r1]
 8023d84:	26ff      	movs	r6, #255	; 0xff
 8023d86:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8023d8a:	9108      	str	r1, [sp, #32]
 8023d8c:	46b6      	mov	lr, r6
 8023d8e:	e6ac      	b.n	8023aea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8023d90:	26ff      	movs	r6, #255	; 0xff
 8023d92:	46b1      	mov	r9, r6
 8023d94:	e6a9      	b.n	8023aea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8023d96:	26ff      	movs	r6, #255	; 0xff
 8023d98:	46b1      	mov	r9, r6
 8023d9a:	e7f7      	b.n	8023d8c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8023d9c:	7028      	strb	r0, [r5, #0]
 8023d9e:	7069      	strb	r1, [r5, #1]
 8023da0:	e793      	b.n	8023cca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 8023da2:	1c4f      	adds	r7, r1, #1
 8023da4:	d192      	bne.n	8023ccc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8023da6:	9e07      	ldr	r6, [sp, #28]
 8023da8:	428e      	cmp	r6, r1
 8023daa:	dd8f      	ble.n	8023ccc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8023dac:	1c5e      	adds	r6, r3, #1
 8023dae:	db8d      	blt.n	8023ccc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8023db0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8023db2:	429e      	cmp	r6, r3
 8023db4:	dd8a      	ble.n	8023ccc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8023db6:	9600      	str	r6, [sp, #0]
 8023db8:	e9cd 2003 	strd	r2, r0, [sp, #12]
 8023dbc:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8023dc0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023dc2:	4629      	mov	r1, r5
 8023dc4:	9b07      	ldr	r3, [sp, #28]
 8023dc6:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023dc8:	f7ff fc8e 	bl	80236e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8023dcc:	e77e      	b.n	8023ccc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8023dce:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023dd0:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8023dd4:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8023dd6:	9e07      	ldr	r6, [sp, #28]
 8023dd8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023ddc:	1409      	asrs	r1, r1, #16
 8023dde:	1423      	asrs	r3, r4, #16
 8023de0:	fb06 1303 	mla	r3, r6, r3, r1
 8023de4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8023de6:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8023dea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8023dee:	0e1f      	lsrs	r7, r3, #24
 8023df0:	2a00      	cmp	r2, #0
 8023df2:	f000 8113 	beq.w	802401c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 8023df6:	6871      	ldr	r1, [r6, #4]
 8023df8:	910d      	str	r1, [sp, #52]	; 0x34
 8023dfa:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8023dfe:	2800      	cmp	r0, #0
 8023e00:	f000 8115 	beq.w	802402e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8023e04:	990e      	ldr	r1, [sp, #56]	; 0x38
 8023e06:	eb06 0c01 	add.w	ip, r6, r1
 8023e0a:	5876      	ldr	r6, [r6, r1]
 8023e0c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8023e10:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8023e14:	9609      	str	r6, [sp, #36]	; 0x24
 8023e16:	0e0e      	lsrs	r6, r1, #24
 8023e18:	910f      	str	r1, [sp, #60]	; 0x3c
 8023e1a:	b292      	uxth	r2, r2
 8023e1c:	b280      	uxth	r0, r0
 8023e1e:	fb02 fa00 	mul.w	sl, r2, r0
 8023e22:	0112      	lsls	r2, r2, #4
 8023e24:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8023e28:	eba2 080a 	sub.w	r8, r2, sl
 8023e2c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8023e30:	b280      	uxth	r0, r0
 8023e32:	fa1f f888 	uxth.w	r8, r8
 8023e36:	1a09      	subs	r1, r1, r0
 8023e38:	fb08 f20e 	mul.w	r2, r8, lr
 8023e3c:	b289      	uxth	r1, r1
 8023e3e:	fb01 2207 	mla	r2, r1, r7, r2
 8023e42:	fb00 2209 	mla	r2, r0, r9, r2
 8023e46:	fb0a 2206 	mla	r2, sl, r6, r2
 8023e4a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023e4e:	2a00      	cmp	r2, #0
 8023e50:	f000 80da 	beq.w	8024008 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 8023e54:	2fff      	cmp	r7, #255	; 0xff
 8023e56:	d01a      	beq.n	8023e8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 8023e58:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8023e5c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023e60:	fb07 fc0c 	mul.w	ip, r7, ip
 8023e64:	435f      	muls	r7, r3
 8023e66:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8023e6a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023e6e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023e72:	4463      	add	r3, ip
 8023e74:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8023e78:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8023e7c:	0a1b      	lsrs	r3, r3, #8
 8023e7e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023e82:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023e86:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023e8a:	ea43 030c 	orr.w	r3, r3, ip
 8023e8e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023e92:	d021      	beq.n	8023ed8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x560>
 8023e94:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8023e96:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023e9a:	fb0e f707 	mul.w	r7, lr, r7
 8023e9e:	9713      	str	r7, [sp, #76]	; 0x4c
 8023ea0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8023ea2:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8023ea6:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8023ea8:	fb0e fe0c 	mul.w	lr, lr, ip
 8023eac:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023eb0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023eb4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023eb8:	44bc      	add	ip, r7
 8023eba:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8023ebe:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8023ec2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023ec6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023eca:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023ece:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023ed2:	ea4c 070e 	orr.w	r7, ip, lr
 8023ed6:	970d      	str	r7, [sp, #52]	; 0x34
 8023ed8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023edc:	d01e      	beq.n	8023f1c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a4>
 8023ede:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8023ee0:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8023ee4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023ee8:	fb09 fe0e 	mul.w	lr, r9, lr
 8023eec:	fb09 f907 	mul.w	r9, r9, r7
 8023ef0:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8023ef4:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8023ef8:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8023efc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023f00:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8023f04:	44f4      	add	ip, lr
 8023f06:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023f0a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023f0e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023f12:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023f16:	ea4c 0709 	orr.w	r7, ip, r9
 8023f1a:	9709      	str	r7, [sp, #36]	; 0x24
 8023f1c:	2eff      	cmp	r6, #255	; 0xff
 8023f1e:	d01c      	beq.n	8023f5a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e2>
 8023f20:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8023f22:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8023f26:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023f2a:	fb06 fe0e 	mul.w	lr, r6, lr
 8023f2e:	437e      	muls	r6, r7
 8023f30:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8023f34:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8023f38:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8023f3c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023f40:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8023f44:	44f4      	add	ip, lr
 8023f46:	0a36      	lsrs	r6, r6, #8
 8023f48:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023f4c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023f50:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023f54:	ea4c 0606 	orr.w	r6, ip, r6
 8023f58:	960f      	str	r6, [sp, #60]	; 0x3c
 8023f5a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8023f5c:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8023f60:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023f64:	2aff      	cmp	r2, #255	; 0xff
 8023f66:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023f6a:	fb08 f606 	mul.w	r6, r8, r6
 8023f6e:	fb01 6607 	mla	r6, r1, r7, r6
 8023f72:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8023f74:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023f78:	fb00 6607 	mla	r6, r0, r7, r6
 8023f7c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8023f7e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023f82:	fb0a 6607 	mla	r6, sl, r7, r6
 8023f86:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8023f88:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023f8c:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8023f90:	fb08 f807 	mul.w	r8, r8, r7
 8023f94:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023f98:	fb01 8303 	mla	r3, r1, r3, r8
 8023f9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023f9e:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8023fa2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8023fa4:	fb00 330c 	mla	r3, r0, ip, r3
 8023fa8:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8023fac:	fb0a 3e0e 	mla	lr, sl, lr, r3
 8023fb0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023fb4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023fb8:	ea46 060e 	orr.w	r6, r6, lr
 8023fbc:	b2f0      	uxtb	r0, r6
 8023fbe:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8023fc2:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8023fc6:	d038      	beq.n	802403a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 8023fc8:	43d2      	mvns	r2, r2
 8023fca:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8023fce:	b2d2      	uxtb	r2, r2
 8023fd0:	4357      	muls	r7, r2
 8023fd2:	1c7b      	adds	r3, r7, #1
 8023fd4:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8023fd8:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8023fdc:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 8023fe0:	4350      	muls	r0, r2
 8023fe2:	f805 3c03 	strb.w	r3, [r5, #-3]
 8023fe6:	1c43      	adds	r3, r0, #1
 8023fe8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8023fec:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023ff0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8023ff4:	4353      	muls	r3, r2
 8023ff6:	f805 1c02 	strb.w	r1, [r5, #-2]
 8023ffa:	1c5a      	adds	r2, r3, #1
 8023ffc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8024000:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8024004:	f805 6c01 	strb.w	r6, [r5, #-1]
 8024008:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802400a:	3503      	adds	r5, #3
 802400c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802400e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024012:	4413      	add	r3, r2
 8024014:	9329      	str	r3, [sp, #164]	; 0xa4
 8024016:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024018:	441c      	add	r4, r3
 802401a:	e510      	b.n	8023a3e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 802401c:	b150      	cbz	r0, 8024034 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 802401e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8024020:	5871      	ldr	r1, [r6, r1]
 8024022:	26ff      	movs	r6, #255	; 0xff
 8024024:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8024028:	9109      	str	r1, [sp, #36]	; 0x24
 802402a:	46b6      	mov	lr, r6
 802402c:	e6f5      	b.n	8023e1a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 802402e:	26ff      	movs	r6, #255	; 0xff
 8024030:	46b1      	mov	r9, r6
 8024032:	e6f2      	b.n	8023e1a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8024034:	26ff      	movs	r6, #255	; 0xff
 8024036:	46b1      	mov	r9, r6
 8024038:	e7f7      	b.n	802402a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 802403a:	f805 0c03 	strb.w	r0, [r5, #-3]
 802403e:	f805 1c02 	strb.w	r1, [r5, #-2]
 8024042:	e7df      	b.n	8024004 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 8024044:	b017      	add	sp, #92	; 0x5c
 8024046:	ecbd 8b08 	vpop	{d8-d11}
 802404a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08024050 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8024050:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024054:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8024058:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 802405c:	2800      	cmp	r0, #0
 802405e:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8024062:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8024066:	fb0c 0e03 	mla	lr, ip, r3, r0
 802406a:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 802406e:	db6b      	blt.n	8024148 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8024070:	4580      	cmp	r8, r0
 8024072:	dd69      	ble.n	8024148 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8024074:	f1bc 0f00 	cmp.w	ip, #0
 8024078:	db66      	blt.n	8024148 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 802407a:	45e1      	cmp	r9, ip
 802407c:	dd64      	ble.n	8024148 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 802407e:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8024082:	f01e 0f01 	tst.w	lr, #1
 8024086:	5d16      	ldrb	r6, [r2, r4]
 8024088:	bf0c      	ite	eq
 802408a:	f006 060f 	andeq.w	r6, r6, #15
 802408e:	1136      	asrne	r6, r6, #4
 8024090:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8024094:	b2f6      	uxtb	r6, r6
 8024096:	f110 0a01 	adds.w	sl, r0, #1
 802409a:	d457      	bmi.n	802414c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 802409c:	45d0      	cmp	r8, sl
 802409e:	dd55      	ble.n	802414c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80240a0:	f1bc 0f00 	cmp.w	ip, #0
 80240a4:	db52      	blt.n	802414c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80240a6:	45e1      	cmp	r9, ip
 80240a8:	dd50      	ble.n	802414c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80240aa:	2f00      	cmp	r7, #0
 80240ac:	f000 80ac 	beq.w	8024208 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 80240b0:	f10e 0b01 	add.w	fp, lr, #1
 80240b4:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80240b8:	f01b 0f01 	tst.w	fp, #1
 80240bc:	5d14      	ldrb	r4, [r2, r4]
 80240be:	bf0c      	ite	eq
 80240c0:	f004 040f 	andeq.w	r4, r4, #15
 80240c4:	1124      	asrne	r4, r4, #4
 80240c6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80240ca:	b2e4      	uxtb	r4, r4
 80240cc:	2d00      	cmp	r5, #0
 80240ce:	f000 8096 	beq.w	80241fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 80240d2:	2800      	cmp	r0, #0
 80240d4:	f10c 0c01 	add.w	ip, ip, #1
 80240d8:	db3c      	blt.n	8024154 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80240da:	4580      	cmp	r8, r0
 80240dc:	dd3a      	ble.n	8024154 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80240de:	f1bc 0f00 	cmp.w	ip, #0
 80240e2:	db37      	blt.n	8024154 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80240e4:	45e1      	cmp	r9, ip
 80240e6:	dd35      	ble.n	8024154 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80240e8:	eb03 0b0e 	add.w	fp, r3, lr
 80240ec:	ea4f 005b 	mov.w	r0, fp, lsr #1
 80240f0:	f01b 0f01 	tst.w	fp, #1
 80240f4:	5c10      	ldrb	r0, [r2, r0]
 80240f6:	bf0c      	ite	eq
 80240f8:	f000 000f 	andeq.w	r0, r0, #15
 80240fc:	1100      	asrne	r0, r0, #4
 80240fe:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024102:	b2c0      	uxtb	r0, r0
 8024104:	f1ba 0f00 	cmp.w	sl, #0
 8024108:	db26      	blt.n	8024158 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 802410a:	45d0      	cmp	r8, sl
 802410c:	dd24      	ble.n	8024158 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 802410e:	f1bc 0f00 	cmp.w	ip, #0
 8024112:	db21      	blt.n	8024158 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8024114:	45e1      	cmp	r9, ip
 8024116:	dd1f      	ble.n	8024158 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8024118:	b307      	cbz	r7, 802415c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 802411a:	3301      	adds	r3, #1
 802411c:	449e      	add	lr, r3
 802411e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8024122:	f01e 0f01 	tst.w	lr, #1
 8024126:	5cd3      	ldrb	r3, [r2, r3]
 8024128:	bf0c      	ite	eq
 802412a:	f003 030f 	andeq.w	r3, r3, #15
 802412e:	111b      	asrne	r3, r3, #4
 8024130:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024134:	b2db      	uxtb	r3, r3
 8024136:	2f0f      	cmp	r7, #15
 8024138:	d911      	bls.n	802415e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 802413a:	4b35      	ldr	r3, [pc, #212]	; (8024210 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 802413c:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8024140:	4a34      	ldr	r2, [pc, #208]	; (8024214 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 8024142:	4835      	ldr	r0, [pc, #212]	; (8024218 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8024144:	f002 fb5a 	bl	80267fc <__assert_func>
 8024148:	2600      	movs	r6, #0
 802414a:	e7a4      	b.n	8024096 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 802414c:	2400      	movs	r4, #0
 802414e:	e7bd      	b.n	80240cc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 8024150:	463c      	mov	r4, r7
 8024152:	e7be      	b.n	80240d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8024154:	2000      	movs	r0, #0
 8024156:	e7d5      	b.n	8024104 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8024158:	2300      	movs	r3, #0
 802415a:	e7ec      	b.n	8024136 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 802415c:	463b      	mov	r3, r7
 802415e:	2d0f      	cmp	r5, #15
 8024160:	d8eb      	bhi.n	802413a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8024162:	b2bf      	uxth	r7, r7
 8024164:	b2ad      	uxth	r5, r5
 8024166:	fb07 f205 	mul.w	r2, r7, r5
 802416a:	013f      	lsls	r7, r7, #4
 802416c:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8024170:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8024174:	1abf      	subs	r7, r7, r2
 8024176:	b2ad      	uxth	r5, r5
 8024178:	b2bf      	uxth	r7, r7
 802417a:	ebac 0c05 	sub.w	ip, ip, r5
 802417e:	437c      	muls	r4, r7
 8024180:	fa1f fc8c 	uxth.w	ip, ip
 8024184:	fb06 440c 	mla	r4, r6, ip, r4
 8024188:	fb05 4400 	mla	r4, r5, r0, r4
 802418c:	fb02 4203 	mla	r2, r2, r3, r4
 8024190:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8024194:	b38a      	cbz	r2, 80241fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 8024196:	4b21      	ldr	r3, [pc, #132]	; (802421c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8024198:	681c      	ldr	r4, [r3, #0]
 802419a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 802419e:	b2e5      	uxtb	r5, r4
 80241a0:	4353      	muls	r3, r2
 80241a2:	1c5a      	adds	r2, r3, #1
 80241a4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80241a8:	1212      	asrs	r2, r2, #8
 80241aa:	b290      	uxth	r0, r2
 80241ac:	43d2      	mvns	r2, r2
 80241ae:	fb15 f500 	smulbb	r5, r5, r0
 80241b2:	b2d3      	uxtb	r3, r2
 80241b4:	780a      	ldrb	r2, [r1, #0]
 80241b6:	fb02 5203 	mla	r2, r2, r3, r5
 80241ba:	b292      	uxth	r2, r2
 80241bc:	1c55      	adds	r5, r2, #1
 80241be:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80241c2:	784d      	ldrb	r5, [r1, #1]
 80241c4:	fb15 f503 	smulbb	r5, r5, r3
 80241c8:	1212      	asrs	r2, r2, #8
 80241ca:	700a      	strb	r2, [r1, #0]
 80241cc:	f3c4 2207 	ubfx	r2, r4, #8, #8
 80241d0:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80241d4:	fb02 5200 	mla	r2, r2, r0, r5
 80241d8:	b292      	uxth	r2, r2
 80241da:	1c55      	adds	r5, r2, #1
 80241dc:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80241e0:	1212      	asrs	r2, r2, #8
 80241e2:	704a      	strb	r2, [r1, #1]
 80241e4:	788a      	ldrb	r2, [r1, #2]
 80241e6:	fb12 f303 	smulbb	r3, r2, r3
 80241ea:	fb04 3300 	mla	r3, r4, r0, r3
 80241ee:	b29b      	uxth	r3, r3
 80241f0:	1c5a      	adds	r2, r3, #1
 80241f2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80241f6:	121b      	asrs	r3, r3, #8
 80241f8:	708b      	strb	r3, [r1, #2]
 80241fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80241fe:	2f0f      	cmp	r7, #15
 8024200:	d89b      	bhi.n	802413a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8024202:	462b      	mov	r3, r5
 8024204:	4628      	mov	r0, r5
 8024206:	e7ac      	b.n	8024162 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 8024208:	2d00      	cmp	r5, #0
 802420a:	d1a1      	bne.n	8024150 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 802420c:	462c      	mov	r4, r5
 802420e:	e7f8      	b.n	8024202 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 8024210:	0802b2c7 	.word	0x0802b2c7
 8024214:	0802b7be 	.word	0x0802b7be
 8024218:	0802b390 	.word	0x0802b390
 802421c:	2000c6b4 	.word	0x2000c6b4

08024220 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8024220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024224:	ed2d 8b08 	vpush	{d8-d11}
 8024228:	b097      	sub	sp, #92	; 0x5c
 802422a:	eeb0 aa40 	vmov.f32	s20, s0
 802422e:	eef0 9a60 	vmov.f32	s19, s1
 8024232:	9308      	str	r3, [sp, #32]
 8024234:	eeb0 9a41 	vmov.f32	s18, s2
 8024238:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 802423c:	eeb0 8a62 	vmov.f32	s16, s5
 8024240:	9214      	str	r2, [sp, #80]	; 0x50
 8024242:	eef0 8a43 	vmov.f32	s17, s6
 8024246:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8024248:	eef0 ba44 	vmov.f32	s23, s8
 802424c:	9309      	str	r3, [sp, #36]	; 0x24
 802424e:	eeb0 ba64 	vmov.f32	s22, s9
 8024252:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8024256:	eef0 aa45 	vmov.f32	s21, s10
 802425a:	9015      	str	r0, [sp, #84]	; 0x54
 802425c:	910c      	str	r1, [sp, #48]	; 0x30
 802425e:	930e      	str	r3, [sp, #56]	; 0x38
 8024260:	6850      	ldr	r0, [r2, #4]
 8024262:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 8024266:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802426a:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 802426e:	fb00 1803 	mla	r8, r0, r3, r1
 8024272:	6813      	ldr	r3, [r2, #0]
 8024274:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8024278:	4498      	add	r8, r3
 802427a:	f10b 0301 	add.w	r3, fp, #1
 802427e:	f023 0301 	bic.w	r3, r3, #1
 8024282:	930f      	str	r3, [sp, #60]	; 0x3c
 8024284:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8024286:	681f      	ldr	r7, [r3, #0]
 8024288:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802428a:	2b00      	cmp	r3, #0
 802428c:	dc03      	bgt.n	8024296 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802428e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024290:	2b00      	cmp	r3, #0
 8024292:	f340 8238 	ble.w	8024706 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8024296:	9b08      	ldr	r3, [sp, #32]
 8024298:	2b00      	cmp	r3, #0
 802429a:	f340 810c 	ble.w	80244b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 802429e:	142a      	asrs	r2, r5, #16
 80242a0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80242a4:	d42c      	bmi.n	8024300 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 80242a6:	1c51      	adds	r1, r2, #1
 80242a8:	458b      	cmp	fp, r1
 80242aa:	dd2c      	ble.n	8024306 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80242ac:	2b00      	cmp	r3, #0
 80242ae:	db2a      	blt.n	8024306 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80242b0:	1c59      	adds	r1, r3, #1
 80242b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80242b4:	4288      	cmp	r0, r1
 80242b6:	dd26      	ble.n	8024306 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80242b8:	9b08      	ldr	r3, [sp, #32]
 80242ba:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80242bc:	3b01      	subs	r3, #1
 80242be:	fb02 5203 	mla	r2, r2, r3, r5
 80242c2:	1412      	asrs	r2, r2, #16
 80242c4:	d429      	bmi.n	802431a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80242c6:	3201      	adds	r2, #1
 80242c8:	4593      	cmp	fp, r2
 80242ca:	dd26      	ble.n	802431a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80242cc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80242ce:	fb02 6303 	mla	r3, r2, r3, r6
 80242d2:	141b      	asrs	r3, r3, #16
 80242d4:	d421      	bmi.n	802431a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80242d6:	3301      	adds	r3, #1
 80242d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80242da:	429a      	cmp	r2, r3
 80242dc:	dd1d      	ble.n	802431a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80242de:	f108 0e03 	add.w	lr, r8, #3
 80242e2:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80242e6:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80242ea:	f1b9 0f00 	cmp.w	r9, #0
 80242ee:	f300 814f 	bgt.w	8024590 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x370>
 80242f2:	9b08      	ldr	r3, [sp, #32]
 80242f4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80242f8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80242fc:	44a0      	add	r8, r4
 80242fe:	e0dc      	b.n	80244ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 8024300:	1c51      	adds	r1, r2, #1
 8024302:	f040 80ce 	bne.w	80244a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8024306:	4593      	cmp	fp, r2
 8024308:	f340 80cb 	ble.w	80244a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 802430c:	1c5a      	adds	r2, r3, #1
 802430e:	f2c0 80c8 	blt.w	80244a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8024312:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024314:	4293      	cmp	r3, r2
 8024316:	f280 80c4 	bge.w	80244a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 802431a:	9b08      	ldr	r3, [sp, #32]
 802431c:	46c1      	mov	r9, r8
 802431e:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8024322:	930d      	str	r3, [sp, #52]	; 0x34
 8024324:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024326:	2b00      	cmp	r3, #0
 8024328:	dde3      	ble.n	80242f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 802432a:	1428      	asrs	r0, r5, #16
 802432c:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8024330:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024334:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024338:	f100 8111 	bmi.w	802455e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 802433c:	f100 0c01 	add.w	ip, r0, #1
 8024340:	45e3      	cmp	fp, ip
 8024342:	f340 810e 	ble.w	8024562 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8024346:	2b00      	cmp	r3, #0
 8024348:	f2c0 810b 	blt.w	8024562 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 802434c:	f103 0c01 	add.w	ip, r3, #1
 8024350:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8024352:	4564      	cmp	r4, ip
 8024354:	f340 8105 	ble.w	8024562 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8024358:	fb03 030a 	mla	r3, r3, sl, r0
 802435c:	0858      	lsrs	r0, r3, #1
 802435e:	07dc      	lsls	r4, r3, #31
 8024360:	5c38      	ldrb	r0, [r7, r0]
 8024362:	bf54      	ite	pl
 8024364:	f000 000f 	andpl.w	r0, r0, #15
 8024368:	1100      	asrmi	r0, r0, #4
 802436a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802436e:	b2c0      	uxtb	r0, r0
 8024370:	2a00      	cmp	r2, #0
 8024372:	f000 80e1 	beq.w	8024538 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x318>
 8024376:	f103 0e01 	add.w	lr, r3, #1
 802437a:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802437e:	f01e 0f01 	tst.w	lr, #1
 8024382:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024386:	bf0c      	ite	eq
 8024388:	f00c 0c0f 	andeq.w	ip, ip, #15
 802438c:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8024390:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024394:	fa5f f48c 	uxtb.w	r4, ip
 8024398:	9410      	str	r4, [sp, #64]	; 0x40
 802439a:	b1f9      	cbz	r1, 80243dc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 802439c:	4453      	add	r3, sl
 802439e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80243a2:	07dc      	lsls	r4, r3, #31
 80243a4:	f103 0301 	add.w	r3, r3, #1
 80243a8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80243ac:	bf54      	ite	pl
 80243ae:	f00c 0c0f 	andpl.w	ip, ip, #15
 80243b2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80243b6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80243ba:	fa5f f48c 	uxtb.w	r4, ip
 80243be:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80243c2:	940a      	str	r4, [sp, #40]	; 0x28
 80243c4:	07dc      	lsls	r4, r3, #31
 80243c6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80243ca:	bf54      	ite	pl
 80243cc:	f00c 030f 	andpl.w	r3, ip, #15
 80243d0:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80243d4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80243d8:	b2db      	uxtb	r3, r3
 80243da:	9311      	str	r3, [sp, #68]	; 0x44
 80243dc:	b292      	uxth	r2, r2
 80243de:	b289      	uxth	r1, r1
 80243e0:	0113      	lsls	r3, r2, #4
 80243e2:	fb02 fc01 	mul.w	ip, r2, r1
 80243e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80243e8:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80243ec:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 80243f0:	eba3 030c 	sub.w	r3, r3, ip
 80243f4:	b289      	uxth	r1, r1
 80243f6:	b29b      	uxth	r3, r3
 80243f8:	ebae 0e01 	sub.w	lr, lr, r1
 80243fc:	4353      	muls	r3, r2
 80243fe:	fa1f fe8e 	uxth.w	lr, lr
 8024402:	fb00 320e 	mla	r2, r0, lr, r3
 8024406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024408:	fb01 2203 	mla	r2, r1, r3, r2
 802440c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802440e:	fb0c 2203 	mla	r2, ip, r3, r2
 8024412:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8024416:	2a00      	cmp	r2, #0
 8024418:	d039      	beq.n	802448e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802441a:	4bbd      	ldr	r3, [pc, #756]	; (8024710 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 802441c:	6819      	ldr	r1, [r3, #0]
 802441e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024420:	fa5f fc81 	uxtb.w	ip, r1
 8024424:	435a      	muls	r2, r3
 8024426:	1c53      	adds	r3, r2, #1
 8024428:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802442c:	1212      	asrs	r2, r2, #8
 802442e:	b290      	uxth	r0, r2
 8024430:	43d2      	mvns	r2, r2
 8024432:	fb1c fc00 	smulbb	ip, ip, r0
 8024436:	b2d3      	uxtb	r3, r2
 8024438:	f899 2000 	ldrb.w	r2, [r9]
 802443c:	fb02 c203 	mla	r2, r2, r3, ip
 8024440:	b292      	uxth	r2, r2
 8024442:	f102 0c01 	add.w	ip, r2, #1
 8024446:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802444a:	f899 c001 	ldrb.w	ip, [r9, #1]
 802444e:	fb1c fc03 	smulbb	ip, ip, r3
 8024452:	1212      	asrs	r2, r2, #8
 8024454:	f889 2000 	strb.w	r2, [r9]
 8024458:	f3c1 2207 	ubfx	r2, r1, #8, #8
 802445c:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8024460:	fb02 c200 	mla	r2, r2, r0, ip
 8024464:	b292      	uxth	r2, r2
 8024466:	f102 0c01 	add.w	ip, r2, #1
 802446a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802446e:	1212      	asrs	r2, r2, #8
 8024470:	f889 2001 	strb.w	r2, [r9, #1]
 8024474:	f899 2002 	ldrb.w	r2, [r9, #2]
 8024478:	fb12 f303 	smulbb	r3, r2, r3
 802447c:	fb01 3300 	mla	r3, r1, r0, r3
 8024480:	b29b      	uxth	r3, r3
 8024482:	1c5a      	adds	r2, r3, #1
 8024484:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024488:	121b      	asrs	r3, r3, #8
 802448a:	f889 3002 	strb.w	r3, [r9, #2]
 802448e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024490:	f109 0903 	add.w	r9, r9, #3
 8024494:	441d      	add	r5, r3
 8024496:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024498:	441e      	add	r6, r3
 802449a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802449c:	3b01      	subs	r3, #1
 802449e:	930d      	str	r3, [sp, #52]	; 0x34
 80244a0:	e740      	b.n	8024324 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80244a2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80244a4:	f108 0803 	add.w	r8, r8, #3
 80244a8:	441d      	add	r5, r3
 80244aa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80244ac:	441e      	add	r6, r3
 80244ae:	9b08      	ldr	r3, [sp, #32]
 80244b0:	3b01      	subs	r3, #1
 80244b2:	9308      	str	r3, [sp, #32]
 80244b4:	e6ef      	b.n	8024296 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80244b6:	f47f aeff 	bne.w	80242b8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80244ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80244bc:	2b00      	cmp	r3, #0
 80244be:	f340 8122 	ble.w	8024706 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 80244c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80244c6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80244c8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80244cc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80244d0:	eef0 6a48 	vmov.f32	s13, s16
 80244d4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80244d8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80244dc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80244e0:	ee16 5a90 	vmov	r5, s13
 80244e4:	eef0 6a68 	vmov.f32	s13, s17
 80244e8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80244ec:	ee16 6a90 	vmov	r6, s13
 80244f0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80244f4:	ee69 7a27 	vmul.f32	s15, s18, s15
 80244f8:	ee37 8a48 	vsub.f32	s16, s14, s16
 80244fc:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024500:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024504:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024508:	ee18 2a10 	vmov	r2, s16
 802450c:	eeb0 8a47 	vmov.f32	s16, s14
 8024510:	fb92 f3f3 	sdiv	r3, r2, r3
 8024514:	ee18 2a90 	vmov	r2, s17
 8024518:	932b      	str	r3, [sp, #172]	; 0xac
 802451a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802451c:	eef0 8a67 	vmov.f32	s17, s15
 8024520:	fb92 f3f3 	sdiv	r3, r2, r3
 8024524:	932c      	str	r3, [sp, #176]	; 0xb0
 8024526:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024528:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802452a:	3b01      	subs	r3, #1
 802452c:	930c      	str	r3, [sp, #48]	; 0x30
 802452e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024530:	bf08      	it	eq
 8024532:	4613      	moveq	r3, r2
 8024534:	9308      	str	r3, [sp, #32]
 8024536:	e6a7      	b.n	8024288 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8024538:	2900      	cmp	r1, #0
 802453a:	f43f af4f 	beq.w	80243dc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 802453e:	4453      	add	r3, sl
 8024540:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024544:	07db      	lsls	r3, r3, #31
 8024546:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802454a:	bf54      	ite	pl
 802454c:	f00c 030f 	andpl.w	r3, ip, #15
 8024550:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8024554:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024558:	b2db      	uxtb	r3, r3
 802455a:	930a      	str	r3, [sp, #40]	; 0x28
 802455c:	e73e      	b.n	80243dc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 802455e:	1c44      	adds	r4, r0, #1
 8024560:	d195      	bne.n	802448e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8024562:	4583      	cmp	fp, r0
 8024564:	dd93      	ble.n	802448e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8024566:	1c5c      	adds	r4, r3, #1
 8024568:	db91      	blt.n	802448e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802456a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802456c:	429c      	cmp	r4, r3
 802456e:	dd8e      	ble.n	802448e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8024570:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024572:	9002      	str	r0, [sp, #8]
 8024574:	9815      	ldr	r0, [sp, #84]	; 0x54
 8024576:	e9cd 3203 	strd	r3, r2, [sp, #12]
 802457a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802457c:	463a      	mov	r2, r7
 802457e:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8024582:	e9cd b300 	strd	fp, r3, [sp]
 8024586:	4649      	mov	r1, r9
 8024588:	4653      	mov	r3, sl
 802458a:	f7ff fd61 	bl	8024050 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 802458e:	e77e      	b.n	802448e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8024590:	142a      	asrs	r2, r5, #16
 8024592:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024596:	1433      	asrs	r3, r6, #16
 8024598:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802459c:	fb0a 2303 	mla	r3, sl, r3, r2
 80245a0:	085a      	lsrs	r2, r3, #1
 80245a2:	07dc      	lsls	r4, r3, #31
 80245a4:	5cba      	ldrb	r2, [r7, r2]
 80245a6:	bf54      	ite	pl
 80245a8:	f002 020f 	andpl.w	r2, r2, #15
 80245ac:	1112      	asrmi	r2, r2, #4
 80245ae:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80245b2:	b2d2      	uxtb	r2, r2
 80245b4:	2900      	cmp	r1, #0
 80245b6:	f000 8093 	beq.w	80246e0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c0>
 80245ba:	1c5c      	adds	r4, r3, #1
 80245bc:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 80245c0:	07e4      	lsls	r4, r4, #31
 80245c2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80245c6:	bf54      	ite	pl
 80245c8:	f00c 0c0f 	andpl.w	ip, ip, #15
 80245cc:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80245d0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80245d4:	fa5f f48c 	uxtb.w	r4, ip
 80245d8:	9412      	str	r4, [sp, #72]	; 0x48
 80245da:	b300      	cbz	r0, 802461e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80245dc:	4453      	add	r3, sl
 80245de:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80245e2:	07dc      	lsls	r4, r3, #31
 80245e4:	f103 0301 	add.w	r3, r3, #1
 80245e8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80245ec:	bf54      	ite	pl
 80245ee:	f00c 0c0f 	andpl.w	ip, ip, #15
 80245f2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80245f6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80245fa:	fa5f f48c 	uxtb.w	r4, ip
 80245fe:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024602:	940b      	str	r4, [sp, #44]	; 0x2c
 8024604:	07dc      	lsls	r4, r3, #31
 8024606:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802460a:	bf54      	ite	pl
 802460c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024610:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024614:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024618:	fa5f f38c 	uxtb.w	r3, ip
 802461c:	9313      	str	r3, [sp, #76]	; 0x4c
 802461e:	b289      	uxth	r1, r1
 8024620:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024622:	b280      	uxth	r0, r0
 8024624:	fb01 f300 	mul.w	r3, r1, r0
 8024628:	0109      	lsls	r1, r1, #4
 802462a:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802462e:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8024632:	1ac9      	subs	r1, r1, r3
 8024634:	b280      	uxth	r0, r0
 8024636:	b289      	uxth	r1, r1
 8024638:	ebac 0c00 	sub.w	ip, ip, r0
 802463c:	4361      	muls	r1, r4
 802463e:	fa1f fc8c 	uxth.w	ip, ip
 8024642:	fb02 120c 	mla	r2, r2, ip, r1
 8024646:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8024648:	fb00 2001 	mla	r0, r0, r1, r2
 802464c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802464e:	fb03 0302 	mla	r3, r3, r2, r0
 8024652:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024656:	2b00      	cmp	r3, #0
 8024658:	d039      	beq.n	80246ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 802465a:	4a2d      	ldr	r2, [pc, #180]	; (8024710 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 802465c:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8024660:	6810      	ldr	r0, [r2, #0]
 8024662:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024664:	fa5f fc80 	uxtb.w	ip, r0
 8024668:	4353      	muls	r3, r2
 802466a:	1c5a      	adds	r2, r3, #1
 802466c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024670:	121b      	asrs	r3, r3, #8
 8024672:	b29a      	uxth	r2, r3
 8024674:	43db      	mvns	r3, r3
 8024676:	fb1c fc02 	smulbb	ip, ip, r2
 802467a:	b2db      	uxtb	r3, r3
 802467c:	fb01 c103 	mla	r1, r1, r3, ip
 8024680:	b289      	uxth	r1, r1
 8024682:	f101 0c01 	add.w	ip, r1, #1
 8024686:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802468a:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 802468e:	fb1c fc03 	smulbb	ip, ip, r3
 8024692:	1209      	asrs	r1, r1, #8
 8024694:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8024698:	f3c0 2107 	ubfx	r1, r0, #8, #8
 802469c:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80246a0:	fb01 c102 	mla	r1, r1, r2, ip
 80246a4:	b289      	uxth	r1, r1
 80246a6:	f101 0c01 	add.w	ip, r1, #1
 80246aa:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80246ae:	1209      	asrs	r1, r1, #8
 80246b0:	f80e 1c02 	strb.w	r1, [lr, #-2]
 80246b4:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 80246b8:	fb11 f303 	smulbb	r3, r1, r3
 80246bc:	fb00 3002 	mla	r0, r0, r2, r3
 80246c0:	b280      	uxth	r0, r0
 80246c2:	1c42      	adds	r2, r0, #1
 80246c4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80246c8:	1200      	asrs	r0, r0, #8
 80246ca:	f80e 0c01 	strb.w	r0, [lr, #-1]
 80246ce:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80246d0:	f10e 0e03 	add.w	lr, lr, #3
 80246d4:	f109 39ff 	add.w	r9, r9, #4294967295
 80246d8:	441d      	add	r5, r3
 80246da:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80246dc:	441e      	add	r6, r3
 80246de:	e604      	b.n	80242ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 80246e0:	2800      	cmp	r0, #0
 80246e2:	d09c      	beq.n	802461e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80246e4:	4453      	add	r3, sl
 80246e6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80246ea:	07db      	lsls	r3, r3, #31
 80246ec:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80246f0:	bf54      	ite	pl
 80246f2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80246f6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80246fa:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80246fe:	fa5f f38c 	uxtb.w	r3, ip
 8024702:	930b      	str	r3, [sp, #44]	; 0x2c
 8024704:	e78b      	b.n	802461e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8024706:	b017      	add	sp, #92	; 0x5c
 8024708:	ecbd 8b08 	vpop	{d8-d11}
 802470c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024710:	2000c6b4 	.word	0x2000c6b4

08024714 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8024714:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024718:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 802471c:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8024720:	2800      	cmp	r0, #0
 8024722:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8024726:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 802472a:	fb0c 0e03 	mla	lr, ip, r3, r0
 802472e:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8024732:	db6b      	blt.n	802480c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8024734:	4580      	cmp	r8, r0
 8024736:	dd69      	ble.n	802480c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8024738:	f1bc 0f00 	cmp.w	ip, #0
 802473c:	db66      	blt.n	802480c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 802473e:	45e1      	cmp	r9, ip
 8024740:	dd64      	ble.n	802480c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8024742:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8024746:	f01e 0f01 	tst.w	lr, #1
 802474a:	5d16      	ldrb	r6, [r2, r4]
 802474c:	bf0c      	ite	eq
 802474e:	f006 060f 	andeq.w	r6, r6, #15
 8024752:	1136      	asrne	r6, r6, #4
 8024754:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8024758:	b2f6      	uxtb	r6, r6
 802475a:	f110 0a01 	adds.w	sl, r0, #1
 802475e:	d457      	bmi.n	8024810 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8024760:	45d0      	cmp	r8, sl
 8024762:	dd55      	ble.n	8024810 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8024764:	f1bc 0f00 	cmp.w	ip, #0
 8024768:	db52      	blt.n	8024810 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 802476a:	45e1      	cmp	r9, ip
 802476c:	dd50      	ble.n	8024810 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 802476e:	2f00      	cmp	r7, #0
 8024770:	f000 80a5 	beq.w	80248be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 8024774:	f10e 0b01 	add.w	fp, lr, #1
 8024778:	ea4f 045b 	mov.w	r4, fp, lsr #1
 802477c:	f01b 0f01 	tst.w	fp, #1
 8024780:	5d14      	ldrb	r4, [r2, r4]
 8024782:	bf0c      	ite	eq
 8024784:	f004 040f 	andeq.w	r4, r4, #15
 8024788:	1124      	asrne	r4, r4, #4
 802478a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802478e:	b2e4      	uxtb	r4, r4
 8024790:	2d00      	cmp	r5, #0
 8024792:	f000 808f 	beq.w	80248b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 8024796:	2800      	cmp	r0, #0
 8024798:	f10c 0c01 	add.w	ip, ip, #1
 802479c:	db3c      	blt.n	8024818 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 802479e:	4580      	cmp	r8, r0
 80247a0:	dd3a      	ble.n	8024818 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80247a2:	f1bc 0f00 	cmp.w	ip, #0
 80247a6:	db37      	blt.n	8024818 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80247a8:	45e1      	cmp	r9, ip
 80247aa:	dd35      	ble.n	8024818 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80247ac:	eb03 0b0e 	add.w	fp, r3, lr
 80247b0:	ea4f 005b 	mov.w	r0, fp, lsr #1
 80247b4:	f01b 0f01 	tst.w	fp, #1
 80247b8:	5c10      	ldrb	r0, [r2, r0]
 80247ba:	bf0c      	ite	eq
 80247bc:	f000 000f 	andeq.w	r0, r0, #15
 80247c0:	1100      	asrne	r0, r0, #4
 80247c2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80247c6:	b2c0      	uxtb	r0, r0
 80247c8:	f1ba 0f00 	cmp.w	sl, #0
 80247cc:	db26      	blt.n	802481c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80247ce:	45d0      	cmp	r8, sl
 80247d0:	dd24      	ble.n	802481c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80247d2:	f1bc 0f00 	cmp.w	ip, #0
 80247d6:	db21      	blt.n	802481c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80247d8:	45e1      	cmp	r9, ip
 80247da:	dd1f      	ble.n	802481c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80247dc:	b307      	cbz	r7, 8024820 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 80247de:	3301      	adds	r3, #1
 80247e0:	449e      	add	lr, r3
 80247e2:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80247e6:	f01e 0f01 	tst.w	lr, #1
 80247ea:	5cd3      	ldrb	r3, [r2, r3]
 80247ec:	bf0c      	ite	eq
 80247ee:	f003 030f 	andeq.w	r3, r3, #15
 80247f2:	111b      	asrne	r3, r3, #4
 80247f4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80247f8:	b2db      	uxtb	r3, r3
 80247fa:	2f0f      	cmp	r7, #15
 80247fc:	d911      	bls.n	8024822 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 80247fe:	4b32      	ldr	r3, [pc, #200]	; (80248c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 8024800:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8024804:	4a31      	ldr	r2, [pc, #196]	; (80248cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 8024806:	4832      	ldr	r0, [pc, #200]	; (80248d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 8024808:	f001 fff8 	bl	80267fc <__assert_func>
 802480c:	2600      	movs	r6, #0
 802480e:	e7a4      	b.n	802475a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 8024810:	2400      	movs	r4, #0
 8024812:	e7bd      	b.n	8024790 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 8024814:	463c      	mov	r4, r7
 8024816:	e7be      	b.n	8024796 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 8024818:	2000      	movs	r0, #0
 802481a:	e7d5      	b.n	80247c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 802481c:	2300      	movs	r3, #0
 802481e:	e7ec      	b.n	80247fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 8024820:	463b      	mov	r3, r7
 8024822:	2d0f      	cmp	r5, #15
 8024824:	d8eb      	bhi.n	80247fe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8024826:	b2bf      	uxth	r7, r7
 8024828:	b2ad      	uxth	r5, r5
 802482a:	fb07 f205 	mul.w	r2, r7, r5
 802482e:	013f      	lsls	r7, r7, #4
 8024830:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8024834:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8024838:	1abf      	subs	r7, r7, r2
 802483a:	b2ad      	uxth	r5, r5
 802483c:	b2bf      	uxth	r7, r7
 802483e:	ebac 0c05 	sub.w	ip, ip, r5
 8024842:	437c      	muls	r4, r7
 8024844:	fa1f fc8c 	uxth.w	ip, ip
 8024848:	fb06 440c 	mla	r4, r6, ip, r4
 802484c:	fb05 4400 	mla	r4, r5, r0, r4
 8024850:	fb02 4303 	mla	r3, r2, r3, r4
 8024854:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024858:	b353      	cbz	r3, 80248b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 802485a:	4a1e      	ldr	r2, [pc, #120]	; (80248d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 802485c:	7808      	ldrb	r0, [r1, #0]
 802485e:	6814      	ldr	r4, [r2, #0]
 8024860:	b29a      	uxth	r2, r3
 8024862:	43db      	mvns	r3, r3
 8024864:	b2e5      	uxtb	r5, r4
 8024866:	b2db      	uxtb	r3, r3
 8024868:	fb15 f502 	smulbb	r5, r5, r2
 802486c:	fb00 5003 	mla	r0, r0, r3, r5
 8024870:	b280      	uxth	r0, r0
 8024872:	1c45      	adds	r5, r0, #1
 8024874:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8024878:	784d      	ldrb	r5, [r1, #1]
 802487a:	fb15 f503 	smulbb	r5, r5, r3
 802487e:	1200      	asrs	r0, r0, #8
 8024880:	7008      	strb	r0, [r1, #0]
 8024882:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8024886:	f3c4 4407 	ubfx	r4, r4, #16, #8
 802488a:	fb00 5002 	mla	r0, r0, r2, r5
 802488e:	b280      	uxth	r0, r0
 8024890:	1c45      	adds	r5, r0, #1
 8024892:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8024896:	1200      	asrs	r0, r0, #8
 8024898:	7048      	strb	r0, [r1, #1]
 802489a:	7888      	ldrb	r0, [r1, #2]
 802489c:	fb10 f303 	smulbb	r3, r0, r3
 80248a0:	fb04 3202 	mla	r2, r4, r2, r3
 80248a4:	b292      	uxth	r2, r2
 80248a6:	1c53      	adds	r3, r2, #1
 80248a8:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80248ac:	1212      	asrs	r2, r2, #8
 80248ae:	708a      	strb	r2, [r1, #2]
 80248b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80248b4:	2f0f      	cmp	r7, #15
 80248b6:	d8a2      	bhi.n	80247fe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 80248b8:	462b      	mov	r3, r5
 80248ba:	4628      	mov	r0, r5
 80248bc:	e7b3      	b.n	8024826 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 80248be:	2d00      	cmp	r5, #0
 80248c0:	d1a8      	bne.n	8024814 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 80248c2:	462c      	mov	r4, r5
 80248c4:	e7f8      	b.n	80248b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 80248c6:	bf00      	nop
 80248c8:	0802b2c7 	.word	0x0802b2c7
 80248cc:	0802b7be 	.word	0x0802b7be
 80248d0:	0802b390 	.word	0x0802b390
 80248d4:	2000c6b4 	.word	0x2000c6b4

080248d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80248d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80248dc:	ed2d 8b08 	vpush	{d8-d11}
 80248e0:	b095      	sub	sp, #84	; 0x54
 80248e2:	461c      	mov	r4, r3
 80248e4:	eeb0 aa40 	vmov.f32	s20, s0
 80248e8:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 80248ec:	eef0 9a60 	vmov.f32	s19, s1
 80248f0:	920e      	str	r2, [sp, #56]	; 0x38
 80248f2:	eeb0 9a41 	vmov.f32	s18, s2
 80248f6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80248f8:	eeb0 8a62 	vmov.f32	s16, s5
 80248fc:	9307      	str	r3, [sp, #28]
 80248fe:	eef0 8a43 	vmov.f32	s17, s6
 8024902:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8024906:	eef0 ba44 	vmov.f32	s23, s8
 802490a:	9013      	str	r0, [sp, #76]	; 0x4c
 802490c:	eeb0 ba64 	vmov.f32	s22, s9
 8024910:	9109      	str	r1, [sp, #36]	; 0x24
 8024912:	eef0 aa45 	vmov.f32	s21, s10
 8024916:	9308      	str	r3, [sp, #32]
 8024918:	6850      	ldr	r0, [r2, #4]
 802491a:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 802491e:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 8024922:	fb00 1803 	mla	r8, r0, r3, r1
 8024926:	6813      	ldr	r3, [r2, #0]
 8024928:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802492c:	4498      	add	r8, r3
 802492e:	9b07      	ldr	r3, [sp, #28]
 8024930:	3301      	adds	r3, #1
 8024932:	f023 0301 	bic.w	r3, r3, #1
 8024936:	930b      	str	r3, [sp, #44]	; 0x2c
 8024938:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802493a:	681f      	ldr	r7, [r3, #0]
 802493c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802493e:	2b00      	cmp	r3, #0
 8024940:	dc03      	bgt.n	802494a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8024942:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024944:	2b00      	cmp	r3, #0
 8024946:	f340 8238 	ble.w	8024dba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 802494a:	2c00      	cmp	r4, #0
 802494c:	f340 8109 	ble.w	8024b62 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 8024950:	142a      	asrs	r2, r5, #16
 8024952:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024956:	d42b      	bmi.n	80249b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8024958:	1c51      	adds	r1, r2, #1
 802495a:	9807      	ldr	r0, [sp, #28]
 802495c:	4288      	cmp	r0, r1
 802495e:	dd2a      	ble.n	80249b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8024960:	2b00      	cmp	r3, #0
 8024962:	db28      	blt.n	80249b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8024964:	1c59      	adds	r1, r3, #1
 8024966:	9808      	ldr	r0, [sp, #32]
 8024968:	4288      	cmp	r0, r1
 802496a:	dd24      	ble.n	80249b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 802496c:	1e63      	subs	r3, r4, #1
 802496e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024970:	fb02 5203 	mla	r2, r2, r3, r5
 8024974:	1412      	asrs	r2, r2, #16
 8024976:	d429      	bmi.n	80249cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8024978:	3201      	adds	r2, #1
 802497a:	9907      	ldr	r1, [sp, #28]
 802497c:	4291      	cmp	r1, r2
 802497e:	dd25      	ble.n	80249cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8024980:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8024982:	fb02 6303 	mla	r3, r2, r3, r6
 8024986:	141b      	asrs	r3, r3, #16
 8024988:	d420      	bmi.n	80249cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802498a:	3301      	adds	r3, #1
 802498c:	9a08      	ldr	r2, [sp, #32]
 802498e:	429a      	cmp	r2, r3
 8024990:	dd1c      	ble.n	80249cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8024992:	f108 0e03 	add.w	lr, r8, #3
 8024996:	46a1      	mov	r9, r4
 8024998:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 802499c:	f1b9 0f00 	cmp.w	r9, #0
 80249a0:	f300 8155 	bgt.w	8024c4e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 80249a4:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80249a8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80249ac:	44a0      	add	r8, r4
 80249ae:	e0da      	b.n	8024b66 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80249b0:	1c50      	adds	r0, r2, #1
 80249b2:	f040 80ce 	bne.w	8024b52 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80249b6:	9907      	ldr	r1, [sp, #28]
 80249b8:	4291      	cmp	r1, r2
 80249ba:	f340 80ca 	ble.w	8024b52 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80249be:	1c59      	adds	r1, r3, #1
 80249c0:	f2c0 80c7 	blt.w	8024b52 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80249c4:	9a08      	ldr	r2, [sp, #32]
 80249c6:	4293      	cmp	r3, r2
 80249c8:	f280 80c3 	bge.w	8024b52 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80249cc:	46a3      	mov	fp, r4
 80249ce:	46c1      	mov	r9, r8
 80249d0:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 80249d4:	f1bb 0f00 	cmp.w	fp, #0
 80249d8:	dde4      	ble.n	80249a4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 80249da:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80249de:	1428      	asrs	r0, r5, #16
 80249e0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80249e4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80249e8:	920a      	str	r2, [sp, #40]	; 0x28
 80249ea:	f100 8116 	bmi.w	8024c1a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80249ee:	f100 0c01 	add.w	ip, r0, #1
 80249f2:	9a07      	ldr	r2, [sp, #28]
 80249f4:	4562      	cmp	r2, ip
 80249f6:	f340 8112 	ble.w	8024c1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80249fa:	2b00      	cmp	r3, #0
 80249fc:	f2c0 810f 	blt.w	8024c1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8024a00:	f103 0c01 	add.w	ip, r3, #1
 8024a04:	9a08      	ldr	r2, [sp, #32]
 8024a06:	4562      	cmp	r2, ip
 8024a08:	f340 8109 	ble.w	8024c1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8024a0c:	fb03 030a 	mla	r3, r3, sl, r0
 8024a10:	0858      	lsrs	r0, r3, #1
 8024a12:	07da      	lsls	r2, r3, #31
 8024a14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024a16:	5c38      	ldrb	r0, [r7, r0]
 8024a18:	bf54      	ite	pl
 8024a1a:	f000 000f 	andpl.w	r0, r0, #15
 8024a1e:	1100      	asrmi	r0, r0, #4
 8024a20:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024a24:	b2c0      	uxtb	r0, r0
 8024a26:	2a00      	cmp	r2, #0
 8024a28:	f000 80dd 	beq.w	8024be6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30e>
 8024a2c:	f103 0e01 	add.w	lr, r3, #1
 8024a30:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8024a34:	f01e 0f01 	tst.w	lr, #1
 8024a38:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024a3c:	bf0c      	ite	eq
 8024a3e:	f00c 0c0f 	andeq.w	ip, ip, #15
 8024a42:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8024a46:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024a4a:	fa5f fc8c 	uxtb.w	ip, ip
 8024a4e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8024a52:	b301      	cbz	r1, 8024a96 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8024a54:	4453      	add	r3, sl
 8024a56:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024a5a:	07da      	lsls	r2, r3, #31
 8024a5c:	f103 0301 	add.w	r3, r3, #1
 8024a60:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024a64:	bf54      	ite	pl
 8024a66:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024a6a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024a6e:	07da      	lsls	r2, r3, #31
 8024a70:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024a74:	fa5f fc8c 	uxtb.w	ip, ip
 8024a78:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8024a7c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024a80:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024a84:	bf54      	ite	pl
 8024a86:	f00c 030f 	andpl.w	r3, ip, #15
 8024a8a:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8024a8e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024a92:	b2db      	uxtb	r3, r3
 8024a94:	9310      	str	r3, [sp, #64]	; 0x40
 8024a96:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8024a9a:	b289      	uxth	r1, r1
 8024a9c:	fb02 f301 	mul.w	r3, r2, r1
 8024aa0:	0112      	lsls	r2, r2, #4
 8024aa2:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8024aa6:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8024aaa:	1ad2      	subs	r2, r2, r3
 8024aac:	fa1f fe81 	uxth.w	lr, r1
 8024ab0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8024ab2:	b292      	uxth	r2, r2
 8024ab4:	ebac 0c0e 	sub.w	ip, ip, lr
 8024ab8:	434a      	muls	r2, r1
 8024aba:	fa1f fc8c 	uxth.w	ip, ip
 8024abe:	fb00 200c 	mla	r0, r0, ip, r2
 8024ac2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024ac4:	fb0e 0002 	mla	r0, lr, r2, r0
 8024ac8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024aca:	fb03 0002 	mla	r0, r3, r2, r0
 8024ace:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024ad2:	b3a8      	cbz	r0, 8024b40 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8024ad4:	4bbb      	ldr	r3, [pc, #748]	; (8024dc4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8024ad6:	28ff      	cmp	r0, #255	; 0xff
 8024ad8:	681b      	ldr	r3, [r3, #0]
 8024ada:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 8024ade:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8024ae2:	b2db      	uxtb	r3, r3
 8024ae4:	f000 8092 	beq.w	8024c0c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x334>
 8024ae8:	b282      	uxth	r2, r0
 8024aea:	43c0      	mvns	r0, r0
 8024aec:	f899 e000 	ldrb.w	lr, [r9]
 8024af0:	fb13 f302 	smulbb	r3, r3, r2
 8024af4:	b2c0      	uxtb	r0, r0
 8024af6:	fb11 f102 	smulbb	r1, r1, r2
 8024afa:	fb0e 3300 	mla	r3, lr, r0, r3
 8024afe:	fb1c f202 	smulbb	r2, ip, r2
 8024b02:	b29b      	uxth	r3, r3
 8024b04:	f103 0e01 	add.w	lr, r3, #1
 8024b08:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8024b0c:	121b      	asrs	r3, r3, #8
 8024b0e:	f889 3000 	strb.w	r3, [r9]
 8024b12:	f899 3001 	ldrb.w	r3, [r9, #1]
 8024b16:	fb03 1100 	mla	r1, r3, r0, r1
 8024b1a:	b289      	uxth	r1, r1
 8024b1c:	1c4b      	adds	r3, r1, #1
 8024b1e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8024b22:	f899 3002 	ldrb.w	r3, [r9, #2]
 8024b26:	fb03 2000 	mla	r0, r3, r0, r2
 8024b2a:	1209      	asrs	r1, r1, #8
 8024b2c:	b280      	uxth	r0, r0
 8024b2e:	f889 1001 	strb.w	r1, [r9, #1]
 8024b32:	f100 0c01 	add.w	ip, r0, #1
 8024b36:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8024b3a:	1200      	asrs	r0, r0, #8
 8024b3c:	f889 0002 	strb.w	r0, [r9, #2]
 8024b40:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024b42:	f109 0903 	add.w	r9, r9, #3
 8024b46:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024b4a:	441d      	add	r5, r3
 8024b4c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024b4e:	441e      	add	r6, r3
 8024b50:	e740      	b.n	80249d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8024b52:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024b54:	3c01      	subs	r4, #1
 8024b56:	f108 0803 	add.w	r8, r8, #3
 8024b5a:	441d      	add	r5, r3
 8024b5c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024b5e:	441e      	add	r6, r3
 8024b60:	e6f3      	b.n	802494a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8024b62:	f47f af03 	bne.w	802496c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8024b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024b68:	2b00      	cmp	r3, #0
 8024b6a:	f340 8126 	ble.w	8024dba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8024b6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024b72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024b74:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024b78:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024b7c:	eef0 6a48 	vmov.f32	s13, s16
 8024b80:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024b84:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024b88:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024b8c:	ee16 5a90 	vmov	r5, s13
 8024b90:	eef0 6a68 	vmov.f32	s13, s17
 8024b94:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024b98:	ee16 6a90 	vmov	r6, s13
 8024b9c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024ba0:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024ba4:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024ba8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024bac:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024bb0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024bb4:	ee18 2a10 	vmov	r2, s16
 8024bb8:	eeb0 8a47 	vmov.f32	s16, s14
 8024bbc:	fb92 f3f3 	sdiv	r3, r2, r3
 8024bc0:	ee18 2a90 	vmov	r2, s17
 8024bc4:	9329      	str	r3, [sp, #164]	; 0xa4
 8024bc6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024bc8:	eef0 8a67 	vmov.f32	s17, s15
 8024bcc:	fb92 f3f3 	sdiv	r3, r2, r3
 8024bd0:	932a      	str	r3, [sp, #168]	; 0xa8
 8024bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024bd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024bd6:	3b01      	subs	r3, #1
 8024bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8024bda:	bf08      	it	eq
 8024bdc:	4614      	moveq	r4, r2
 8024bde:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024be0:	bf18      	it	ne
 8024be2:	461c      	movne	r4, r3
 8024be4:	e6aa      	b.n	802493c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8024be6:	2900      	cmp	r1, #0
 8024be8:	f43f af55 	beq.w	8024a96 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8024bec:	4453      	add	r3, sl
 8024bee:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024bf2:	07db      	lsls	r3, r3, #31
 8024bf4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024bf8:	bf54      	ite	pl
 8024bfa:	f00c 030f 	andpl.w	r3, ip, #15
 8024bfe:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8024c02:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024c06:	b2db      	uxtb	r3, r3
 8024c08:	930c      	str	r3, [sp, #48]	; 0x30
 8024c0a:	e744      	b.n	8024a96 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8024c0c:	f889 3000 	strb.w	r3, [r9]
 8024c10:	f889 1001 	strb.w	r1, [r9, #1]
 8024c14:	f889 c002 	strb.w	ip, [r9, #2]
 8024c18:	e792      	b.n	8024b40 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8024c1a:	1c42      	adds	r2, r0, #1
 8024c1c:	d190      	bne.n	8024b40 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8024c1e:	9a07      	ldr	r2, [sp, #28]
 8024c20:	4282      	cmp	r2, r0
 8024c22:	dd8d      	ble.n	8024b40 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8024c24:	1c5a      	adds	r2, r3, #1
 8024c26:	db8b      	blt.n	8024b40 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8024c28:	9a08      	ldr	r2, [sp, #32]
 8024c2a:	429a      	cmp	r2, r3
 8024c2c:	dd88      	ble.n	8024b40 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8024c2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024c30:	9105      	str	r1, [sp, #20]
 8024c32:	4649      	mov	r1, r9
 8024c34:	9002      	str	r0, [sp, #8]
 8024c36:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8024c38:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8024c3c:	9b08      	ldr	r3, [sp, #32]
 8024c3e:	463a      	mov	r2, r7
 8024c40:	9301      	str	r3, [sp, #4]
 8024c42:	9b07      	ldr	r3, [sp, #28]
 8024c44:	9300      	str	r3, [sp, #0]
 8024c46:	4653      	mov	r3, sl
 8024c48:	f7ff fd64 	bl	8024714 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8024c4c:	e778      	b.n	8024b40 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8024c4e:	142a      	asrs	r2, r5, #16
 8024c50:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024c54:	1433      	asrs	r3, r6, #16
 8024c56:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8024c5a:	fb0a 2303 	mla	r3, sl, r3, r2
 8024c5e:	085a      	lsrs	r2, r3, #1
 8024c60:	07d9      	lsls	r1, r3, #31
 8024c62:	5cba      	ldrb	r2, [r7, r2]
 8024c64:	bf54      	ite	pl
 8024c66:	f002 020f 	andpl.w	r2, r2, #15
 8024c6a:	1112      	asrmi	r2, r2, #4
 8024c6c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8024c70:	b2d2      	uxtb	r2, r2
 8024c72:	2800      	cmp	r0, #0
 8024c74:	f000 808a 	beq.w	8024d8c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 8024c78:	f103 0b01 	add.w	fp, r3, #1
 8024c7c:	ea4f 015b 	mov.w	r1, fp, lsr #1
 8024c80:	f01b 0f01 	tst.w	fp, #1
 8024c84:	5c79      	ldrb	r1, [r7, r1]
 8024c86:	bf0c      	ite	eq
 8024c88:	f001 010f 	andeq.w	r1, r1, #15
 8024c8c:	1109      	asrne	r1, r1, #4
 8024c8e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024c92:	b2c9      	uxtb	r1, r1
 8024c94:	9111      	str	r1, [sp, #68]	; 0x44
 8024c96:	f1bc 0f00 	cmp.w	ip, #0
 8024c9a:	d019      	beq.n	8024cd0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8024c9c:	4453      	add	r3, sl
 8024c9e:	0859      	lsrs	r1, r3, #1
 8024ca0:	f013 0f01 	tst.w	r3, #1
 8024ca4:	f103 0301 	add.w	r3, r3, #1
 8024ca8:	5c79      	ldrb	r1, [r7, r1]
 8024caa:	bf0c      	ite	eq
 8024cac:	f001 010f 	andeq.w	r1, r1, #15
 8024cb0:	1109      	asrne	r1, r1, #4
 8024cb2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024cb6:	b2c9      	uxtb	r1, r1
 8024cb8:	910d      	str	r1, [sp, #52]	; 0x34
 8024cba:	0859      	lsrs	r1, r3, #1
 8024cbc:	07db      	lsls	r3, r3, #31
 8024cbe:	5c79      	ldrb	r1, [r7, r1]
 8024cc0:	bf54      	ite	pl
 8024cc2:	f001 010f 	andpl.w	r1, r1, #15
 8024cc6:	1109      	asrmi	r1, r1, #4
 8024cc8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024ccc:	b2c9      	uxtb	r1, r1
 8024cce:	9112      	str	r1, [sp, #72]	; 0x48
 8024cd0:	b280      	uxth	r0, r0
 8024cd2:	fa1f fc8c 	uxth.w	ip, ip
 8024cd6:	fb00 f30c 	mul.w	r3, r0, ip
 8024cda:	0100      	lsls	r0, r0, #4
 8024cdc:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8024ce0:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8024ce4:	1ac0      	subs	r0, r0, r3
 8024ce6:	fa1f fc8c 	uxth.w	ip, ip
 8024cea:	b280      	uxth	r0, r0
 8024cec:	eba1 010c 	sub.w	r1, r1, ip
 8024cf0:	fa1f fb81 	uxth.w	fp, r1
 8024cf4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8024cf6:	4348      	muls	r0, r1
 8024cf8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8024cfa:	fb02 020b 	mla	r2, r2, fp, r0
 8024cfe:	fb0c 2c01 	mla	ip, ip, r1, r2
 8024d02:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8024d04:	fb03 c302 	mla	r3, r3, r2, ip
 8024d08:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024d0c:	b3ab      	cbz	r3, 8024d7a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8024d0e:	4a2d      	ldr	r2, [pc, #180]	; (8024dc4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8024d10:	2bff      	cmp	r3, #255	; 0xff
 8024d12:	6811      	ldr	r1, [r2, #0]
 8024d14:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 8024d18:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 8024d1c:	b2c9      	uxtb	r1, r1
 8024d1e:	d045      	beq.n	8024dac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 8024d20:	b298      	uxth	r0, r3
 8024d22:	43db      	mvns	r3, r3
 8024d24:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 8024d28:	fb11 f100 	smulbb	r1, r1, r0
 8024d2c:	b2db      	uxtb	r3, r3
 8024d2e:	fb1c fc00 	smulbb	ip, ip, r0
 8024d32:	fb02 1103 	mla	r1, r2, r3, r1
 8024d36:	fb1b f000 	smulbb	r0, fp, r0
 8024d3a:	b289      	uxth	r1, r1
 8024d3c:	1c4a      	adds	r2, r1, #1
 8024d3e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024d42:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8024d46:	fb02 cc03 	mla	ip, r2, r3, ip
 8024d4a:	1209      	asrs	r1, r1, #8
 8024d4c:	fa1f fc8c 	uxth.w	ip, ip
 8024d50:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8024d54:	f10c 0201 	add.w	r2, ip, #1
 8024d58:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8024d5c:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 8024d60:	fb02 0303 	mla	r3, r2, r3, r0
 8024d64:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8024d68:	b29b      	uxth	r3, r3
 8024d6a:	f80e cc02 	strb.w	ip, [lr, #-2]
 8024d6e:	1c5a      	adds	r2, r3, #1
 8024d70:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024d74:	121b      	asrs	r3, r3, #8
 8024d76:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8024d7a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024d7c:	f10e 0e03 	add.w	lr, lr, #3
 8024d80:	f109 39ff 	add.w	r9, r9, #4294967295
 8024d84:	441d      	add	r5, r3
 8024d86:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024d88:	441e      	add	r6, r3
 8024d8a:	e607      	b.n	802499c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 8024d8c:	f1bc 0f00 	cmp.w	ip, #0
 8024d90:	d09e      	beq.n	8024cd0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8024d92:	4453      	add	r3, sl
 8024d94:	0859      	lsrs	r1, r3, #1
 8024d96:	07db      	lsls	r3, r3, #31
 8024d98:	5c79      	ldrb	r1, [r7, r1]
 8024d9a:	bf54      	ite	pl
 8024d9c:	f001 010f 	andpl.w	r1, r1, #15
 8024da0:	1109      	asrmi	r1, r1, #4
 8024da2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024da6:	b2c9      	uxtb	r1, r1
 8024da8:	910d      	str	r1, [sp, #52]	; 0x34
 8024daa:	e791      	b.n	8024cd0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8024dac:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8024db0:	f80e cc02 	strb.w	ip, [lr, #-2]
 8024db4:	f80e bc01 	strb.w	fp, [lr, #-1]
 8024db8:	e7df      	b.n	8024d7a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8024dba:	b015      	add	sp, #84	; 0x54
 8024dbc:	ecbd 8b08 	vpop	{d8-d11}
 8024dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024dc4:	2000c6b4 	.word	0x2000c6b4

08024dc8 <CRC_Lock>:
 8024dc8:	4a1d      	ldr	r2, [pc, #116]	; (8024e40 <CRC_Lock+0x78>)
 8024dca:	b530      	push	{r4, r5, lr}
 8024dcc:	6813      	ldr	r3, [r2, #0]
 8024dce:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8024dd2:	f24c 2540 	movw	r5, #49728	; 0xc240
 8024dd6:	f023 0301 	bic.w	r3, r3, #1
 8024dda:	6013      	str	r3, [r2, #0]
 8024ddc:	4b19      	ldr	r3, [pc, #100]	; (8024e44 <CRC_Lock+0x7c>)
 8024dde:	681a      	ldr	r2, [r3, #0]
 8024de0:	4022      	ands	r2, r4
 8024de2:	42aa      	cmp	r2, r5
 8024de4:	d005      	beq.n	8024df2 <CRC_Lock+0x2a>
 8024de6:	681b      	ldr	r3, [r3, #0]
 8024de8:	f24c 2270 	movw	r2, #49776	; 0xc270
 8024dec:	4023      	ands	r3, r4
 8024dee:	4293      	cmp	r3, r2
 8024df0:	d11d      	bne.n	8024e2e <CRC_Lock+0x66>
 8024df2:	4b15      	ldr	r3, [pc, #84]	; (8024e48 <CRC_Lock+0x80>)
 8024df4:	681b      	ldr	r3, [r3, #0]
 8024df6:	b9d3      	cbnz	r3, 8024e2e <CRC_Lock+0x66>
 8024df8:	4a14      	ldr	r2, [pc, #80]	; (8024e4c <CRC_Lock+0x84>)
 8024dfa:	6813      	ldr	r3, [r2, #0]
 8024dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024e00:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8024e04:	d006      	beq.n	8024e14 <CRC_Lock+0x4c>
 8024e06:	6813      	ldr	r3, [r2, #0]
 8024e08:	f240 4283 	movw	r2, #1155	; 0x483
 8024e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024e10:	4293      	cmp	r3, r2
 8024e12:	d10c      	bne.n	8024e2e <CRC_Lock+0x66>
 8024e14:	4b0e      	ldr	r3, [pc, #56]	; (8024e50 <CRC_Lock+0x88>)
 8024e16:	2201      	movs	r2, #1
 8024e18:	601a      	str	r2, [r3, #0]
 8024e1a:	681a      	ldr	r2, [r3, #0]
 8024e1c:	2a00      	cmp	r2, #0
 8024e1e:	d1fc      	bne.n	8024e1a <CRC_Lock+0x52>
 8024e20:	4b0c      	ldr	r3, [pc, #48]	; (8024e54 <CRC_Lock+0x8c>)
 8024e22:	6018      	str	r0, [r3, #0]
 8024e24:	6818      	ldr	r0, [r3, #0]
 8024e26:	1a43      	subs	r3, r0, r1
 8024e28:	4258      	negs	r0, r3
 8024e2a:	4158      	adcs	r0, r3
 8024e2c:	bd30      	pop	{r4, r5, pc}
 8024e2e:	4b0a      	ldr	r3, [pc, #40]	; (8024e58 <CRC_Lock+0x90>)
 8024e30:	2201      	movs	r2, #1
 8024e32:	601a      	str	r2, [r3, #0]
 8024e34:	681a      	ldr	r2, [r3, #0]
 8024e36:	2a00      	cmp	r2, #0
 8024e38:	d1fc      	bne.n	8024e34 <CRC_Lock+0x6c>
 8024e3a:	4b08      	ldr	r3, [pc, #32]	; (8024e5c <CRC_Lock+0x94>)
 8024e3c:	e7f1      	b.n	8024e22 <CRC_Lock+0x5a>
 8024e3e:	bf00      	nop
 8024e40:	e0002000 	.word	0xe0002000
 8024e44:	e000ed00 	.word	0xe000ed00
 8024e48:	e0042000 	.word	0xe0042000
 8024e4c:	5c001000 	.word	0x5c001000
 8024e50:	58024c08 	.word	0x58024c08
 8024e54:	58024c00 	.word	0x58024c00
 8024e58:	40023008 	.word	0x40023008
 8024e5c:	40023000 	.word	0x40023000

08024e60 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8024e60:	6101      	str	r1, [r0, #16]
 8024e62:	4770      	bx	lr

08024e64 <_ZN8touchgfx8Gestures4tickEv>:
 8024e64:	7b83      	ldrb	r3, [r0, #14]
 8024e66:	b14b      	cbz	r3, 8024e7c <_ZN8touchgfx8Gestures4tickEv+0x18>
 8024e68:	8903      	ldrh	r3, [r0, #8]
 8024e6a:	3301      	adds	r3, #1
 8024e6c:	b29b      	uxth	r3, r3
 8024e6e:	2b07      	cmp	r3, #7
 8024e70:	8103      	strh	r3, [r0, #8]
 8024e72:	bf81      	itttt	hi
 8024e74:	2300      	movhi	r3, #0
 8024e76:	8143      	strhhi	r3, [r0, #10]
 8024e78:	8183      	strhhi	r3, [r0, #12]
 8024e7a:	7383      	strbhi	r3, [r0, #14]
 8024e7c:	4770      	bx	lr
	...

08024e80 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8024e80:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8024e84:	4604      	mov	r4, r0
 8024e86:	4698      	mov	r8, r3
 8024e88:	8880      	ldrh	r0, [r0, #4]
 8024e8a:	4617      	mov	r7, r2
 8024e8c:	4b1d      	ldr	r3, [pc, #116]	; (8024f04 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8024e8e:	460e      	mov	r6, r1
 8024e90:	f8ad 0006 	strh.w	r0, [sp, #6]
 8024e94:	eba8 0000 	sub.w	r0, r8, r0
 8024e98:	9300      	str	r3, [sp, #0]
 8024e9a:	2300      	movs	r3, #0
 8024e9c:	b280      	uxth	r0, r0
 8024e9e:	8aa2      	ldrh	r2, [r4, #20]
 8024ea0:	f88d 3004 	strb.w	r3, [sp, #4]
 8024ea4:	b203      	sxth	r3, r0
 8024ea6:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8024eaa:	88e1      	ldrh	r1, [r4, #6]
 8024eac:	2b00      	cmp	r3, #0
 8024eae:	f8ad 800a 	strh.w	r8, [sp, #10]
 8024eb2:	f8ad 1008 	strh.w	r1, [sp, #8]
 8024eb6:	bfb8      	it	lt
 8024eb8:	4240      	neglt	r0, r0
 8024eba:	f8ad 500c 	strh.w	r5, [sp, #12]
 8024ebe:	bfb8      	it	lt
 8024ec0:	b203      	sxthlt	r3, r0
 8024ec2:	4293      	cmp	r3, r2
 8024ec4:	dc08      	bgt.n	8024ed8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8024ec6:	1a69      	subs	r1, r5, r1
 8024ec8:	b289      	uxth	r1, r1
 8024eca:	b20b      	sxth	r3, r1
 8024ecc:	2b00      	cmp	r3, #0
 8024ece:	bfbc      	itt	lt
 8024ed0:	4249      	neglt	r1, r1
 8024ed2:	b20b      	sxthlt	r3, r1
 8024ed4:	429a      	cmp	r2, r3
 8024ed6:	da13      	bge.n	8024f00 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8024ed8:	6920      	ldr	r0, [r4, #16]
 8024eda:	4669      	mov	r1, sp
 8024edc:	eba8 0606 	sub.w	r6, r8, r6
 8024ee0:	1bef      	subs	r7, r5, r7
 8024ee2:	6803      	ldr	r3, [r0, #0]
 8024ee4:	685b      	ldr	r3, [r3, #4]
 8024ee6:	4798      	blx	r3
 8024ee8:	2300      	movs	r3, #0
 8024eea:	2001      	movs	r0, #1
 8024eec:	8166      	strh	r6, [r4, #10]
 8024eee:	8123      	strh	r3, [r4, #8]
 8024ef0:	81a7      	strh	r7, [r4, #12]
 8024ef2:	f8a4 8004 	strh.w	r8, [r4, #4]
 8024ef6:	80e5      	strh	r5, [r4, #6]
 8024ef8:	73a0      	strb	r0, [r4, #14]
 8024efa:	b004      	add	sp, #16
 8024efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024f00:	2000      	movs	r0, #0
 8024f02:	e7fa      	b.n	8024efa <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8024f04:	0802a464 	.word	0x0802a464

08024f08 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8024f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024f0a:	461e      	mov	r6, r3
 8024f0c:	1e4b      	subs	r3, r1, #1
 8024f0e:	b085      	sub	sp, #20
 8024f10:	4604      	mov	r4, r0
 8024f12:	2b01      	cmp	r3, #1
 8024f14:	460d      	mov	r5, r1
 8024f16:	4617      	mov	r7, r2
 8024f18:	d84b      	bhi.n	8024fb2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8024f1a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8024f1e:	1cd3      	adds	r3, r2, #3
 8024f20:	b29b      	uxth	r3, r3
 8024f22:	2b06      	cmp	r3, #6
 8024f24:	d916      	bls.n	8024f54 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8024f26:	f8df c098 	ldr.w	ip, [pc, #152]	; 8024fc0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8024f2a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8024f2e:	f8cd c004 	str.w	ip, [sp, #4]
 8024f32:	f04f 0c00 	mov.w	ip, #0
 8024f36:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8024f3a:	6900      	ldr	r0, [r0, #16]
 8024f3c:	f8ad 100c 	strh.w	r1, [sp, #12]
 8024f40:	a901      	add	r1, sp, #4
 8024f42:	f88d c008 	strb.w	ip, [sp, #8]
 8024f46:	f8ad 200a 	strh.w	r2, [sp, #10]
 8024f4a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024f4e:	6803      	ldr	r3, [r0, #0]
 8024f50:	689b      	ldr	r3, [r3, #8]
 8024f52:	4798      	blx	r3
 8024f54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024f58:	1cd3      	adds	r3, r2, #3
 8024f5a:	b29b      	uxth	r3, r3
 8024f5c:	2b06      	cmp	r3, #6
 8024f5e:	d916      	bls.n	8024f8e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024f60:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8024fc0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8024f64:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8024f68:	f8cd c004 	str.w	ip, [sp, #4]
 8024f6c:	f04f 0c01 	mov.w	ip, #1
 8024f70:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8024f74:	6920      	ldr	r0, [r4, #16]
 8024f76:	f8ad 100c 	strh.w	r1, [sp, #12]
 8024f7a:	a901      	add	r1, sp, #4
 8024f7c:	f88d c008 	strb.w	ip, [sp, #8]
 8024f80:	f8ad 200a 	strh.w	r2, [sp, #10]
 8024f84:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024f88:	6803      	ldr	r3, [r0, #0]
 8024f8a:	689b      	ldr	r3, [r3, #8]
 8024f8c:	4798      	blx	r3
 8024f8e:	4b0b      	ldr	r3, [pc, #44]	; (8024fbc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 8024f90:	a901      	add	r1, sp, #4
 8024f92:	6920      	ldr	r0, [r4, #16]
 8024f94:	9301      	str	r3, [sp, #4]
 8024f96:	2300      	movs	r3, #0
 8024f98:	f88d 5008 	strb.w	r5, [sp, #8]
 8024f9c:	f8ad 700a 	strh.w	r7, [sp, #10]
 8024fa0:	f8ad 600c 	strh.w	r6, [sp, #12]
 8024fa4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024fa8:	6803      	ldr	r3, [r0, #0]
 8024faa:	681b      	ldr	r3, [r3, #0]
 8024fac:	4798      	blx	r3
 8024fae:	b005      	add	sp, #20
 8024fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024fb2:	2900      	cmp	r1, #0
 8024fb4:	d1eb      	bne.n	8024f8e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024fb6:	80a2      	strh	r2, [r4, #4]
 8024fb8:	80c6      	strh	r6, [r0, #6]
 8024fba:	e7e8      	b.n	8024f8e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024fbc:	0802a450 	.word	0x0802a450
 8024fc0:	0802a478 	.word	0x0802a478

08024fc4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>:
 8024fc4:	10c9      	asrs	r1, r1, #3
 8024fc6:	2900      	cmp	r1, #0
 8024fc8:	bfb8      	it	lt
 8024fca:	4249      	neglt	r1, r1
 8024fcc:	2801      	cmp	r0, #1
 8024fce:	d108      	bne.n	8024fe2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8024fd0:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8024fd4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8024fd8:	4601      	mov	r1, r0
 8024fda:	dd02      	ble.n	8024fe2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8024fdc:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8024fe0:	4770      	bx	lr
 8024fe2:	29ff      	cmp	r1, #255	; 0xff
 8024fe4:	bfa8      	it	ge
 8024fe6:	21ff      	movge	r1, #255	; 0xff
 8024fe8:	4608      	mov	r0, r1
 8024fea:	4770      	bx	lr

08024fec <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8024fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ff0:	688c      	ldr	r4, [r1, #8]
 8024ff2:	b087      	sub	sp, #28
 8024ff4:	4607      	mov	r7, r0
 8024ff6:	2c00      	cmp	r4, #0
 8024ff8:	db2b      	blt.n	8025052 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8024ffa:	6803      	ldr	r3, [r0, #0]
 8024ffc:	68da      	ldr	r2, [r3, #12]
 8024ffe:	42a2      	cmp	r2, r4
 8025000:	dd27      	ble.n	8025052 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8025002:	681a      	ldr	r2, [r3, #0]
 8025004:	691e      	ldr	r6, [r3, #16]
 8025006:	68cd      	ldr	r5, [r1, #12]
 8025008:	fb06 2604 	mla	r6, r6, r4, r2
 802500c:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8025010:	698a      	ldr	r2, [r1, #24]
 8025012:	f893 a004 	ldrb.w	sl, [r3, #4]
 8025016:	f8d1 8020 	ldr.w	r8, [r1, #32]
 802501a:	9205      	str	r2, [sp, #20]
 802501c:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 8025020:	9b05      	ldr	r3, [sp, #20]
 8025022:	6839      	ldr	r1, [r7, #0]
 8025024:	eb03 0c02 	add.w	ip, r3, r2
 8025028:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 802502c:	6889      	ldr	r1, [r1, #8]
 802502e:	1898      	adds	r0, r3, r2
 8025030:	4288      	cmp	r0, r1
 8025032:	db02      	blt.n	802503a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 8025034:	1a8b      	subs	r3, r1, r2
 8025036:	2b00      	cmp	r3, #0
 8025038:	dd09      	ble.n	802504e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 802503a:	6878      	ldr	r0, [r7, #4]
 802503c:	6801      	ldr	r1, [r0, #0]
 802503e:	9400      	str	r4, [sp, #0]
 8025040:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8025044:	4653      	mov	r3, sl
 8025046:	f8d1 b008 	ldr.w	fp, [r1, #8]
 802504a:	4631      	mov	r1, r6
 802504c:	47d8      	blx	fp
 802504e:	3d01      	subs	r5, #1
 8025050:	d1e4      	bne.n	802501c <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 8025052:	b007      	add	sp, #28
 8025054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025058 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8025058:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 802505c:	b90b      	cbnz	r3, 8025062 <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 802505e:	f001 b974 	b.w	802634a <_ZN8touchgfx7Outline6lineToEii>
 8025062:	4770      	bx	lr

08025064 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8025064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025068:	4604      	mov	r4, r0
 802506a:	2600      	movs	r6, #0
 802506c:	4b8e      	ldr	r3, [pc, #568]	; (80252a8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x244>)
 802506e:	f100 0518 	add.w	r5, r0, #24
 8025072:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 8025076:	b086      	sub	sp, #24
 8025078:	4690      	mov	r8, r2
 802507a:	e9c0 3100 	strd	r3, r1, [r0]
 802507e:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8025082:	e9c0 6604 	strd	r6, r6, [r0, #16]
 8025086:	4628      	mov	r0, r5
 8025088:	f001 fb75 	bl	8026776 <_ZN8touchgfx15RenderingBufferC1Ev>
 802508c:	4638      	mov	r0, r7
 802508e:	f000 fb45 	bl	802571c <_ZN8touchgfx7OutlineC1Ev>
 8025092:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8025096:	f001 fb23 	bl	80266e0 <_ZN8touchgfx8ScanlineC1Ev>
 802509a:	2301      	movs	r3, #1
 802509c:	f884 6098 	strb.w	r6, [r4, #152]	; 0x98
 80250a0:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
 80250a4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 80250a8:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
 80250ac:	f8a4 60ac 	strh.w	r6, [r4, #172]	; 0xac
 80250b0:	e9c4 6629 	strd	r6, r6, [r4, #164]	; 0xa4
 80250b4:	e9c4 662c 	strd	r6, r6, [r4, #176]	; 0xb0
 80250b8:	f7f4 fbe6 	bl	8019888 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 80250bc:	b928      	cbnz	r0, 80250ca <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x66>
 80250be:	4b7b      	ldr	r3, [pc, #492]	; (80252ac <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 80250c0:	2118      	movs	r1, #24
 80250c2:	4a7b      	ldr	r2, [pc, #492]	; (80252b0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 80250c4:	487b      	ldr	r0, [pc, #492]	; (80252b4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 80250c6:	f001 fb99 	bl	80267fc <__assert_func>
 80250ca:	f9b8 2000 	ldrsh.w	r2, [r8]
 80250ce:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80250d2:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80250d6:	4410      	add	r0, r2
 80250d8:	9602      	str	r6, [sp, #8]
 80250da:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 80250de:	b280      	uxth	r0, r0
 80250e0:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 80250e4:	fa0f fa80 	sxth.w	sl, r0
 80250e8:	f1ba 0f00 	cmp.w	sl, #0
 80250ec:	dd70      	ble.n	80251d0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80250ee:	4591      	cmp	r9, r2
 80250f0:	dd6e      	ble.n	80251d0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80250f2:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 80250f6:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80250fa:	440b      	add	r3, r1
 80250fc:	b29b      	uxth	r3, r3
 80250fe:	b21e      	sxth	r6, r3
 8025100:	2e00      	cmp	r6, #0
 8025102:	dd65      	ble.n	80251d0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8025104:	458e      	cmp	lr, r1
 8025106:	dd63      	ble.n	80251d0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8025108:	45d1      	cmp	r9, sl
 802510a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 802510e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8025112:	bfb8      	it	lt
 8025114:	fa1f f089 	uxthlt.w	r0, r9
 8025118:	45b6      	cmp	lr, r6
 802511a:	f8ad 2008 	strh.w	r2, [sp, #8]
 802511e:	bfb8      	it	lt
 8025120:	fa1f f38e 	uxthlt.w	r3, lr
 8025124:	1a80      	subs	r0, r0, r2
 8025126:	f8ad 100a 	strh.w	r1, [sp, #10]
 802512a:	1a5b      	subs	r3, r3, r1
 802512c:	f8ad 000c 	strh.w	r0, [sp, #12]
 8025130:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025134:	f10d 0808 	add.w	r8, sp, #8
 8025138:	ae04      	add	r6, sp, #16
 802513a:	e898 0003 	ldmia.w	r8, {r0, r1}
 802513e:	e886 0003 	stmia.w	r6, {r0, r1}
 8025142:	f8dc 3000 	ldr.w	r3, [ip]
 8025146:	4660      	mov	r0, ip
 8025148:	4631      	mov	r1, r6
 802514a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802514c:	4798      	blx	r3
 802514e:	6861      	ldr	r1, [r4, #4]
 8025150:	4640      	mov	r0, r8
 8025152:	3104      	adds	r1, #4
 8025154:	f7f5 fa06 	bl	801a564 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8025158:	4630      	mov	r0, r6
 802515a:	f7f5 fa1b 	bl	801a594 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802515e:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8025162:	f7f4 fb21 	bl	80197a8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 8025166:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
 802516a:	4638      	mov	r0, r7
 802516c:	f000 fab2 	bl	80256d4 <_ZN8touchgfx7Outline5resetEv>
 8025170:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8025174:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8025178:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 802517c:	015b      	lsls	r3, r3, #5
 802517e:	f8a4 209c 	strh.w	r2, [r4, #156]	; 0x9c
 8025182:	0152      	lsls	r2, r2, #5
 8025184:	60e3      	str	r3, [r4, #12]
 8025186:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802518a:	60a2      	str	r2, [r4, #8]
 802518c:	015b      	lsls	r3, r3, #5
 802518e:	6123      	str	r3, [r4, #16]
 8025190:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8025194:	015b      	lsls	r3, r3, #5
 8025196:	6163      	str	r3, [r4, #20]
 8025198:	4b47      	ldr	r3, [pc, #284]	; (80252b8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 802519a:	6818      	ldr	r0, [r3, #0]
 802519c:	6803      	ldr	r3, [r0, #0]
 802519e:	6a1b      	ldr	r3, [r3, #32]
 80251a0:	4798      	blx	r3
 80251a2:	4606      	mov	r6, r0
 80251a4:	f7ea ff10 	bl	800ffc8 <_ZN8touchgfx3HAL3lcdEv>
 80251a8:	6803      	ldr	r3, [r0, #0]
 80251aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80251ac:	4798      	blx	r3
 80251ae:	4607      	mov	r7, r0
 80251b0:	f7ea ff0a 	bl	800ffc8 <_ZN8touchgfx3HAL3lcdEv>
 80251b4:	6803      	ldr	r3, [r0, #0]
 80251b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80251b8:	4798      	blx	r3
 80251ba:	280c      	cmp	r0, #12
 80251bc:	d854      	bhi.n	8025268 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 80251be:	e8df f000 	tbb	[pc, r0]
 80251c2:	554b      	.short	0x554b
 80251c4:	2b6e0a66 	.word	0x2b6e0a66
 80251c8:	5f5f5f3b 	.word	0x5f5f5f3b
 80251cc:	5f5f      	.short	0x5f5f
 80251ce:	6e          	.byte	0x6e
 80251cf:	00          	.byte	0x00
 80251d0:	2300      	movs	r3, #0
 80251d2:	9303      	str	r3, [sp, #12]
 80251d4:	e7ae      	b.n	8025134 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd0>
 80251d6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80251da:	2108      	movs	r1, #8
 80251dc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80251e0:	fb92 f1f1 	sdiv	r1, r2, r1
 80251e4:	fb07 1303 	mla	r3, r7, r3, r1
 80251e8:	441e      	add	r6, r3
 80251ea:	4253      	negs	r3, r2
 80251ec:	f002 0207 	and.w	r2, r2, #7
 80251f0:	f003 0307 	and.w	r3, r3, #7
 80251f4:	bf58      	it	pl
 80251f6:	425a      	negpl	r2, r3
 80251f8:	b2d2      	uxtb	r2, r2
 80251fa:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80251fe:	4628      	mov	r0, r5
 8025200:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8025204:	66e1      	str	r1, [r4, #108]	; 0x6c
 8025206:	e9cd 1700 	strd	r1, r7, [sp]
 802520a:	4631      	mov	r1, r6
 802520c:	f001 fabb 	bl	8026786 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 8025210:	4620      	mov	r0, r4
 8025212:	b006      	add	sp, #24
 8025214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025218:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802521c:	2104      	movs	r1, #4
 802521e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8025222:	fb92 f1f1 	sdiv	r1, r2, r1
 8025226:	fb07 1303 	mla	r3, r7, r3, r1
 802522a:	441e      	add	r6, r3
 802522c:	4253      	negs	r3, r2
 802522e:	f002 0203 	and.w	r2, r2, #3
 8025232:	f003 0303 	and.w	r3, r3, #3
 8025236:	e7dd      	b.n	80251f4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x190>
 8025238:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802523c:	2102      	movs	r1, #2
 802523e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8025242:	2a00      	cmp	r2, #0
 8025244:	fb92 f1f1 	sdiv	r1, r2, r1
 8025248:	f002 0201 	and.w	r2, r2, #1
 802524c:	fb07 1303 	mla	r3, r7, r3, r1
 8025250:	bfb8      	it	lt
 8025252:	4252      	neglt	r2, r2
 8025254:	441e      	add	r6, r3
 8025256:	e7cf      	b.n	80251f8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 8025258:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802525c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8025260:	437b      	muls	r3, r7
 8025262:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8025266:	441e      	add	r6, r3
 8025268:	2200      	movs	r2, #0
 802526a:	e7c6      	b.n	80251fa <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x196>
 802526c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8025270:	2103      	movs	r1, #3
 8025272:	fb07 f203 	mul.w	r2, r7, r3
 8025276:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 802527a:	fb13 2301 	smlabb	r3, r3, r1, r2
 802527e:	e7f2      	b.n	8025266 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8025280:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8025284:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8025288:	fb07 2303 	mla	r3, r7, r3, r2
 802528c:	e7eb      	b.n	8025266 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 802528e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8025292:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8025296:	437b      	muls	r3, r7
 8025298:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802529c:	e7e3      	b.n	8025266 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 802529e:	4b07      	ldr	r3, [pc, #28]	; (80252bc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 80252a0:	2156      	movs	r1, #86	; 0x56
 80252a2:	4a03      	ldr	r2, [pc, #12]	; (80252b0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 80252a4:	e70e      	b.n	80250c4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x60>
 80252a6:	bf00      	nop
 80252a8:	0802bae4 	.word	0x0802bae4
 80252ac:	0802ba2e 	.word	0x0802ba2e
 80252b0:	0802baec 	.word	0x0802baec
 80252b4:	0802ba8a 	.word	0x0802ba8a
 80252b8:	2000c68c 	.word	0x2000c68c
 80252bc:	0802babe 	.word	0x0802babe

080252c0 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 80252c0:	6812      	ldr	r2, [r2, #0]
 80252c2:	2a00      	cmp	r2, #0
 80252c4:	db0b      	blt.n	80252de <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 80252c6:	9800      	ldr	r0, [sp, #0]
 80252c8:	6800      	ldr	r0, [r0, #0]
 80252ca:	4290      	cmp	r0, r2
 80252cc:	bfd4      	ite	le
 80252ce:	2002      	movle	r0, #2
 80252d0:	2000      	movgt	r0, #0
 80252d2:	680a      	ldr	r2, [r1, #0]
 80252d4:	2a00      	cmp	r2, #0
 80252d6:	da04      	bge.n	80252e2 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 80252d8:	f040 0004 	orr.w	r0, r0, #4
 80252dc:	4770      	bx	lr
 80252de:	2001      	movs	r0, #1
 80252e0:	e7f7      	b.n	80252d2 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 80252e2:	681b      	ldr	r3, [r3, #0]
 80252e4:	4293      	cmp	r3, r2
 80252e6:	bfd8      	it	le
 80252e8:	f040 0008 	orrle.w	r0, r0, #8
 80252ec:	4770      	bx	lr
	...

080252f0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 80252f0:	4b07      	ldr	r3, [pc, #28]	; (8025310 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 80252f2:	b510      	push	{r4, lr}
 80252f4:	781b      	ldrb	r3, [r3, #0]
 80252f6:	2b01      	cmp	r3, #1
 80252f8:	d108      	bne.n	802530c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 80252fa:	6843      	ldr	r3, [r0, #4]
 80252fc:	6814      	ldr	r4, [r2, #0]
 80252fe:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8025302:	680b      	ldr	r3, [r1, #0]
 8025304:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8025308:	6013      	str	r3, [r2, #0]
 802530a:	600c      	str	r4, [r1, #0]
 802530c:	bd10      	pop	{r4, pc}
 802530e:	bf00      	nop
 8025310:	2000c684 	.word	0x2000c684

08025314 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8025314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025316:	b085      	sub	sp, #20
 8025318:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 802531c:	4604      	mov	r4, r0
 802531e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8025322:	b33b      	cbz	r3, 8025374 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 8025324:	aa02      	add	r2, sp, #8
 8025326:	a903      	add	r1, sp, #12
 8025328:	f7ff ffe2 	bl	80252f0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802532c:	68a3      	ldr	r3, [r4, #8]
 802532e:	9e03      	ldr	r6, [sp, #12]
 8025330:	aa02      	add	r2, sp, #8
 8025332:	9f02      	ldr	r7, [sp, #8]
 8025334:	a903      	add	r1, sp, #12
 8025336:	1af6      	subs	r6, r6, r3
 8025338:	68e3      	ldr	r3, [r4, #12]
 802533a:	4620      	mov	r0, r4
 802533c:	1aff      	subs	r7, r7, r3
 802533e:	f104 0314 	add.w	r3, r4, #20
 8025342:	9603      	str	r6, [sp, #12]
 8025344:	9300      	str	r3, [sp, #0]
 8025346:	f104 0310 	add.w	r3, r4, #16
 802534a:	9702      	str	r7, [sp, #8]
 802534c:	f7ff ffb8 	bl	80252c0 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8025350:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 8025354:	4605      	mov	r5, r0
 8025356:	b97b      	cbnz	r3, 8025378 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 8025358:	463a      	mov	r2, r7
 802535a:	4631      	mov	r1, r6
 802535c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8025360:	f7ff fe7a 	bl	8025058 <_ZN8touchgfx10Rasterizer6lineToEii>
 8025364:	9b03      	ldr	r3, [sp, #12]
 8025366:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 802536a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 802536e:	9b02      	ldr	r3, [sp, #8]
 8025370:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8025374:	b005      	add	sp, #20
 8025376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025378:	b110      	cbz	r0, 8025380 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 802537a:	ea13 0200 	ands.w	r2, r3, r0
 802537e:	d11c      	bne.n	80253ba <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8025380:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
 8025384:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 8025388:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
 802538c:	b188      	cbz	r0, 80253b2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 802538e:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 8025392:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8025396:	b913      	cbnz	r3, 802539e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 8025398:	4630      	mov	r0, r6
 802539a:	f001 f806 	bl	80263aa <_ZN8touchgfx7Outline6moveToEii>
 802539e:	2300      	movs	r3, #0
 80253a0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 80253a4:	2301      	movs	r3, #1
 80253a6:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 80253aa:	4630      	mov	r0, r6
 80253ac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80253b0:	e7d6      	b.n	8025360 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 80253b2:	4630      	mov	r0, r6
 80253b4:	f7ff fe50 	bl	8025058 <_ZN8touchgfx10Rasterizer6lineToEii>
 80253b8:	e7f7      	b.n	80253aa <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 80253ba:	4615      	mov	r5, r2
 80253bc:	e7d2      	b.n	8025364 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

080253be <_ZN8touchgfx6Canvas5closeEv>:
 80253be:	b538      	push	{r3, r4, r5, lr}
 80253c0:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80253c4:	4604      	mov	r4, r0
 80253c6:	b993      	cbnz	r3, 80253ee <_ZN8touchgfx6Canvas5closeEv+0x30>
 80253c8:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 80253cc:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 80253d0:	4213      	tst	r3, r2
 80253d2:	d10c      	bne.n	80253ee <_ZN8touchgfx6Canvas5closeEv+0x30>
 80253d4:	f100 052c 	add.w	r5, r0, #44	; 0x2c
 80253d8:	b123      	cbz	r3, 80253e4 <_ZN8touchgfx6Canvas5closeEv+0x26>
 80253da:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
 80253de:	4628      	mov	r0, r5
 80253e0:	f7ff fe3a 	bl	8025058 <_ZN8touchgfx10Rasterizer6lineToEii>
 80253e4:	4628      	mov	r0, r5
 80253e6:	e9d4 122c 	ldrd	r1, r2, [r4, #176]	; 0xb0
 80253ea:	f7ff fe35 	bl	8025058 <_ZN8touchgfx10Rasterizer6lineToEii>
 80253ee:	2300      	movs	r3, #0
 80253f0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 80253f4:	bd38      	pop	{r3, r4, r5, pc}

080253f6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 80253f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80253f8:	b085      	sub	sp, #20
 80253fa:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80253fe:	4604      	mov	r4, r0
 8025400:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8025404:	b353      	cbz	r3, 802545c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 8025406:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 802540a:	b90b      	cbnz	r3, 8025410 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 802540c:	f7ff ffd7 	bl	80253be <_ZN8touchgfx6Canvas5closeEv>
 8025410:	aa02      	add	r2, sp, #8
 8025412:	a903      	add	r1, sp, #12
 8025414:	4620      	mov	r0, r4
 8025416:	f7ff ff6b 	bl	80252f0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802541a:	68a3      	ldr	r3, [r4, #8]
 802541c:	9d03      	ldr	r5, [sp, #12]
 802541e:	aa02      	add	r2, sp, #8
 8025420:	9e02      	ldr	r6, [sp, #8]
 8025422:	a903      	add	r1, sp, #12
 8025424:	1aed      	subs	r5, r5, r3
 8025426:	68e3      	ldr	r3, [r4, #12]
 8025428:	4620      	mov	r0, r4
 802542a:	1af6      	subs	r6, r6, r3
 802542c:	f104 0314 	add.w	r3, r4, #20
 8025430:	9503      	str	r5, [sp, #12]
 8025432:	9300      	str	r3, [sp, #0]
 8025434:	f104 0310 	add.w	r3, r4, #16
 8025438:	9602      	str	r6, [sp, #8]
 802543a:	f7ff ff41 	bl	80252c0 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 802543e:	4607      	mov	r7, r0
 8025440:	b170      	cbz	r0, 8025460 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 8025442:	2301      	movs	r3, #1
 8025444:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8025448:	9a03      	ldr	r2, [sp, #12]
 802544a:	9b02      	ldr	r3, [sp, #8]
 802544c:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 8025450:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 8025454:	f884 70ac 	strb.w	r7, [r4, #172]	; 0xac
 8025458:	e9c4 2329 	strd	r2, r3, [r4, #164]	; 0xa4
 802545c:	b005      	add	sp, #20
 802545e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025460:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8025464:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
 8025468:	b92b      	cbnz	r3, 8025476 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 802546a:	4632      	mov	r2, r6
 802546c:	4629      	mov	r1, r5
 802546e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8025472:	f000 ff9a 	bl	80263aa <_ZN8touchgfx7Outline6moveToEii>
 8025476:	2300      	movs	r3, #0
 8025478:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 802547c:	2301      	movs	r3, #1
 802547e:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8025482:	e7e1      	b.n	8025448 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

08025484 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 8025484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025488:	4604      	mov	r4, r0
 802548a:	b087      	sub	sp, #28
 802548c:	9105      	str	r1, [sp, #20]
 802548e:	f001 f8d0 	bl	8026632 <_ZN8touchgfx7Outline8getCellsEv>
 8025492:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8025496:	4605      	mov	r5, r0
 8025498:	f1b9 0f00 	cmp.w	r9, #0
 802549c:	d103      	bne.n	80254a6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 802549e:	2001      	movs	r0, #1
 80254a0:	b007      	add	sp, #28
 80254a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80254a6:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 80254aa:	2e00      	cmp	r6, #0
 80254ac:	d139      	bne.n	8025522 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 80254ae:	f104 0848 	add.w	r8, r4, #72	; 0x48
 80254b2:	f105 0708 	add.w	r7, r5, #8
 80254b6:	4640      	mov	r0, r8
 80254b8:	f001 f8fd 	bl	80266b6 <_ZN8touchgfx8Scanline5resetEv>
 80254bc:	f109 33ff 	add.w	r3, r9, #4294967295
 80254c0:	9303      	str	r3, [sp, #12]
 80254c2:	f9b5 b000 	ldrsh.w	fp, [r5]
 80254c6:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 80254ca:	46da      	mov	sl, fp
 80254cc:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80254d0:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 80254d4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80254d8:	9b03      	ldr	r3, [sp, #12]
 80254da:	4416      	add	r6, r2
 80254dc:	9504      	str	r5, [sp, #16]
 80254de:	463d      	mov	r5, r7
 80254e0:	3b01      	subs	r3, #1
 80254e2:	9303      	str	r3, [sp, #12]
 80254e4:	3301      	adds	r3, #1
 80254e6:	d01e      	beq.n	8025526 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 80254e8:	3708      	adds	r7, #8
 80254ea:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 80254ee:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 80254f2:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 80254f6:	4290      	cmp	r0, r2
 80254f8:	d11e      	bne.n	8025538 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 80254fa:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 80254fe:	4411      	add	r1, r2
 8025500:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 8025504:	e7e8      	b.n	80254d8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 8025506:	1c91      	adds	r1, r2, #2
 8025508:	f04f 0301 	mov.w	r3, #1
 802550c:	65e1      	str	r1, [r4, #92]	; 0x5c
 802550e:	8053      	strh	r3, [r2, #2]
 8025510:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8025512:	1c91      	adds	r1, r2, #2
 8025514:	65a1      	str	r1, [r4, #88]	; 0x58
 8025516:	f8a2 b002 	strh.w	fp, [r2, #2]
 802551a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 802551c:	3201      	adds	r2, #1
 802551e:	6562      	str	r2, [r4, #84]	; 0x54
 8025520:	e03a      	b.n	8025598 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 8025522:	2000      	movs	r0, #0
 8025524:	e7bc      	b.n	80254a0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 8025526:	b951      	cbnz	r1, 802553e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 8025528:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802552a:	2b00      	cmp	r3, #0
 802552c:	d0b7      	beq.n	802549e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 802552e:	4641      	mov	r1, r8
 8025530:	9805      	ldr	r0, [sp, #20]
 8025532:	f7ff fd5b 	bl	8024fec <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8025536:	e7b2      	b.n	802549e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8025538:	2900      	cmp	r1, #0
 802553a:	d035      	beq.n	80255a8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 802553c:	9504      	str	r5, [sp, #16]
 802553e:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 8025542:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8025546:	f7ff fd3d 	bl	8024fc4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 802554a:	4605      	mov	r5, r0
 802554c:	b330      	cbz	r0, 802559c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802554e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8025550:	b182      	cbz	r2, 8025574 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8025552:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8025554:	454a      	cmp	r2, r9
 8025556:	d00d      	beq.n	8025574 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8025558:	4641      	mov	r1, r8
 802555a:	9805      	ldr	r0, [sp, #20]
 802555c:	f7ff fd46 	bl	8024fec <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8025560:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8025564:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8025566:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 802556a:	65e2      	str	r2, [r4, #92]	; 0x5c
 802556c:	2300      	movs	r3, #0
 802556e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8025570:	6563      	str	r3, [r4, #84]	; 0x54
 8025572:	65a2      	str	r2, [r4, #88]	; 0x58
 8025574:	f1bb 0f00 	cmp.w	fp, #0
 8025578:	db10      	blt.n	802559c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802557a:	f7f4 f993 	bl	80198a4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802557e:	4583      	cmp	fp, r0
 8025580:	d20c      	bcs.n	802559c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8025582:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8025584:	f802 500b 	strb.w	r5, [r2, fp]
 8025588:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 802558a:	3201      	adds	r2, #1
 802558c:	455a      	cmp	r2, fp
 802558e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8025590:	d1b9      	bne.n	8025506 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 8025592:	8811      	ldrh	r1, [r2, #0]
 8025594:	3101      	adds	r1, #1
 8025596:	8011      	strh	r1, [r2, #0]
 8025598:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 802559c:	9b03      	ldr	r3, [sp, #12]
 802559e:	3301      	adds	r3, #1
 80255a0:	d0c2      	beq.n	8025528 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 80255a2:	f10b 0a01 	add.w	sl, fp, #1
 80255a6:	9d04      	ldr	r5, [sp, #16]
 80255a8:	f9b5 3000 	ldrsh.w	r3, [r5]
 80255ac:	4553      	cmp	r3, sl
 80255ae:	dd88      	ble.n	80254c2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 80255b0:	01b1      	lsls	r1, r6, #6
 80255b2:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 80255b6:	f7ff fd05 	bl	8024fc4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 80255ba:	4683      	mov	fp, r0
 80255bc:	2800      	cmp	r0, #0
 80255be:	d080      	beq.n	80254c2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 80255c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80255c2:	b183      	cbz	r3, 80255e6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 80255c4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80255c6:	454b      	cmp	r3, r9
 80255c8:	d00d      	beq.n	80255e6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 80255ca:	4641      	mov	r1, r8
 80255cc:	9805      	ldr	r0, [sp, #20]
 80255ce:	f7ff fd0d 	bl	8024fec <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80255d2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80255d6:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 80255da:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80255dc:	65e3      	str	r3, [r4, #92]	; 0x5c
 80255de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80255e0:	65a3      	str	r3, [r4, #88]	; 0x58
 80255e2:	2300      	movs	r3, #0
 80255e4:	6563      	str	r3, [r4, #84]	; 0x54
 80255e6:	f9b5 3000 	ldrsh.w	r3, [r5]
 80255ea:	464a      	mov	r2, r9
 80255ec:	f8cd b000 	str.w	fp, [sp]
 80255f0:	4651      	mov	r1, sl
 80255f2:	eba3 030a 	sub.w	r3, r3, sl
 80255f6:	4640      	mov	r0, r8
 80255f8:	f001 f884 	bl	8026704 <_ZN8touchgfx8Scanline7addSpanEiijj>
 80255fc:	e761      	b.n	80254c2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

080255fe <_ZN8touchgfx6Canvas6renderEv>:
 80255fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8025600:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8025604:	4604      	mov	r4, r0
 8025606:	b913      	cbnz	r3, 802560e <_ZN8touchgfx6Canvas6renderEv+0x10>
 8025608:	2001      	movs	r0, #1
 802560a:	b003      	add	sp, #12
 802560c:	bd30      	pop	{r4, r5, pc}
 802560e:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8025612:	2b00      	cmp	r3, #0
 8025614:	d131      	bne.n	802567a <_ZN8touchgfx6Canvas6renderEv+0x7c>
 8025616:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
 802561a:	2b00      	cmp	r3, #0
 802561c:	d0f4      	beq.n	8025608 <_ZN8touchgfx6Canvas6renderEv+0xa>
 802561e:	6840      	ldr	r0, [r0, #4]
 8025620:	6803      	ldr	r3, [r0, #0]
 8025622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8025624:	4798      	blx	r3
 8025626:	2800      	cmp	r0, #0
 8025628:	d0ee      	beq.n	8025608 <_ZN8touchgfx6Canvas6renderEv+0xa>
 802562a:	4620      	mov	r0, r4
 802562c:	f7ff fec7 	bl	80253be <_ZN8touchgfx6Canvas5closeEv>
 8025630:	6860      	ldr	r0, [r4, #4]
 8025632:	6803      	ldr	r3, [r0, #0]
 8025634:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8025636:	4798      	blx	r3
 8025638:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 802563c:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 8025640:	f7f3 f8c9 	bl	80187d6 <_ZN8touchgfx15AbstractPainter9setOffsetEtt>
 8025644:	6860      	ldr	r0, [r4, #4]
 8025646:	6803      	ldr	r3, [r0, #0]
 8025648:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802564a:	4798      	blx	r3
 802564c:	4605      	mov	r5, r0
 802564e:	6860      	ldr	r0, [r4, #4]
 8025650:	6803      	ldr	r3, [r0, #0]
 8025652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8025654:	4798      	blx	r3
 8025656:	4601      	mov	r1, r0
 8025658:	4628      	mov	r0, r5
 802565a:	f7f3 f8bf 	bl	80187dc <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>
 802565e:	6860      	ldr	r0, [r4, #4]
 8025660:	6803      	ldr	r3, [r0, #0]
 8025662:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8025664:	4798      	blx	r3
 8025666:	f104 0318 	add.w	r3, r4, #24
 802566a:	4669      	mov	r1, sp
 802566c:	e9cd 3000 	strd	r3, r0, [sp]
 8025670:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8025674:	f7ff ff06 	bl	8025484 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 8025678:	e7c7      	b.n	802560a <_ZN8touchgfx6Canvas6renderEv+0xc>
 802567a:	2000      	movs	r0, #0
 802567c:	e7c5      	b.n	802560a <_ZN8touchgfx6Canvas6renderEv+0xc>
	...

08025680 <_ZN8touchgfx6CanvasD1Ev>:
 8025680:	b538      	push	{r3, r4, r5, lr}
 8025682:	4605      	mov	r5, r0
 8025684:	4b08      	ldr	r3, [pc, #32]	; (80256a8 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 8025686:	4604      	mov	r4, r0
 8025688:	f845 3b2c 	str.w	r3, [r5], #44
 802568c:	4b07      	ldr	r3, [pc, #28]	; (80256ac <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 802568e:	6818      	ldr	r0, [r3, #0]
 8025690:	6803      	ldr	r3, [r0, #0]
 8025692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025694:	4798      	blx	r3
 8025696:	4628      	mov	r0, r5
 8025698:	f000 f814 	bl	80256c4 <_ZN8touchgfx7OutlineD1Ev>
 802569c:	f104 0018 	add.w	r0, r4, #24
 80256a0:	f001 f870 	bl	8026784 <_ZN8touchgfx15RenderingBufferD1Ev>
 80256a4:	4620      	mov	r0, r4
 80256a6:	bd38      	pop	{r3, r4, r5, pc}
 80256a8:	0802bae4 	.word	0x0802bae4
 80256ac:	2000c68c 	.word	0x2000c68c

080256b0 <_ZN8touchgfx6CanvasD0Ev>:
 80256b0:	b510      	push	{r4, lr}
 80256b2:	4604      	mov	r4, r0
 80256b4:	f7ff ffe4 	bl	8025680 <_ZN8touchgfx6CanvasD1Ev>
 80256b8:	21b8      	movs	r1, #184	; 0xb8
 80256ba:	4620      	mov	r0, r4
 80256bc:	f001 f870 	bl	80267a0 <_ZdlPvj>
 80256c0:	4620      	mov	r0, r4
 80256c2:	bd10      	pop	{r4, pc}

080256c4 <_ZN8touchgfx7OutlineD1Ev>:
 80256c4:	4770      	bx	lr

080256c6 <_ZN8touchgfx7OutlineD0Ev>:
 80256c6:	b510      	push	{r4, lr}
 80256c8:	4604      	mov	r4, r0
 80256ca:	2148      	movs	r1, #72	; 0x48
 80256cc:	f001 f868 	bl	80267a0 <_ZdlPvj>
 80256d0:	4620      	mov	r0, r4
 80256d2:	bd10      	pop	{r4, pc}

080256d4 <_ZN8touchgfx7Outline5resetEv>:
 80256d4:	b510      	push	{r4, lr}
 80256d6:	4604      	mov	r4, r0
 80256d8:	f7f4 f8fc 	bl	80198d4 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 80256dc:	60e0      	str	r0, [r4, #12]
 80256de:	f7f4 f8ff 	bl	80198e0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 80256e2:	68e3      	ldr	r3, [r4, #12]
 80256e4:	2200      	movs	r2, #0
 80256e6:	08c0      	lsrs	r0, r0, #3
 80256e8:	6123      	str	r3, [r4, #16]
 80256ea:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80256ee:	6060      	str	r0, [r4, #4]
 80256f0:	82a3      	strh	r3, [r4, #20]
 80256f2:	82e3      	strh	r3, [r4, #22]
 80256f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80256f6:	60a2      	str	r2, [r4, #8]
 80256f8:	f023 0301 	bic.w	r3, r3, #1
 80256fc:	8322      	strh	r2, [r4, #24]
 80256fe:	8362      	strh	r2, [r4, #26]
 8025700:	f043 0302 	orr.w	r3, r3, #2
 8025704:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8025708:	63e3      	str	r3, [r4, #60]	; 0x3c
 802570a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802570e:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8025712:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8025716:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 802571a:	bd10      	pop	{r4, pc}

0802571c <_ZN8touchgfx7OutlineC1Ev>:
 802571c:	4b0f      	ldr	r3, [pc, #60]	; (802575c <_ZN8touchgfx7OutlineC1Ev+0x40>)
 802571e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8025722:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8025726:	b510      	push	{r4, lr}
 8025728:	6003      	str	r3, [r0, #0]
 802572a:	2300      	movs	r3, #0
 802572c:	4604      	mov	r4, r0
 802572e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8025732:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8025736:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802573a:	e9c0 3305 	strd	r3, r3, [r0, #20]
 802573e:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8025742:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 8025746:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 802574a:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 802574e:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 8025752:	f7ff ffbf 	bl	80256d4 <_ZN8touchgfx7Outline5resetEv>
 8025756:	4620      	mov	r0, r4
 8025758:	bd10      	pop	{r4, pc}
 802575a:	bf00      	nop
 802575c:	0802bb44 	.word	0x0802bb44

08025760 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8025760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025764:	b093      	sub	sp, #76	; 0x4c
 8025766:	4604      	mov	r4, r0
 8025768:	1156      	asrs	r6, r2, #5
 802576a:	f002 0e1f 	and.w	lr, r2, #31
 802576e:	981c      	ldr	r0, [sp, #112]	; 0x70
 8025770:	9305      	str	r3, [sp, #20]
 8025772:	1143      	asrs	r3, r0, #5
 8025774:	1145      	asrs	r5, r0, #5
 8025776:	930c      	str	r3, [sp, #48]	; 0x30
 8025778:	f000 031f 	and.w	r3, r0, #31
 802577c:	9303      	str	r3, [sp, #12]
 802577e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8025780:	42b3      	cmp	r3, r6
 8025782:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8025784:	bfc8      	it	gt
 8025786:	6326      	strgt	r6, [r4, #48]	; 0x30
 8025788:	42b3      	cmp	r3, r6
 802578a:	bfdc      	itt	le
 802578c:	1c73      	addle	r3, r6, #1
 802578e:	63a3      	strle	r3, [r4, #56]	; 0x38
 8025790:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8025792:	42ab      	cmp	r3, r5
 8025794:	bfc8      	it	gt
 8025796:	462b      	movgt	r3, r5
 8025798:	ea4f 1560 	mov.w	r5, r0, asr #5
 802579c:	bfc8      	it	gt
 802579e:	6323      	strgt	r3, [r4, #48]	; 0x30
 80257a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80257a2:	42ab      	cmp	r3, r5
 80257a4:	bfd8      	it	le
 80257a6:	462b      	movle	r3, r5
 80257a8:	ea4f 1561 	mov.w	r5, r1, asr #5
 80257ac:	bfdc      	itt	le
 80257ae:	3301      	addle	r3, #1
 80257b0:	63a3      	strle	r3, [r4, #56]	; 0x38
 80257b2:	9b05      	ldr	r3, [sp, #20]
 80257b4:	eba3 0a01 	sub.w	sl, r3, r1
 80257b8:	1143      	asrs	r3, r0, #5
 80257ba:	429e      	cmp	r6, r3
 80257bc:	f040 8119 	bne.w	80259f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x292>
 80257c0:	9b05      	ldr	r3, [sp, #20]
 80257c2:	ea4f 1c63 	mov.w	ip, r3, asr #5
 80257c6:	9b03      	ldr	r3, [sp, #12]
 80257c8:	459e      	cmp	lr, r3
 80257ca:	d12c      	bne.n	8025826 <_ZN8touchgfx7Outline10renderLineEiiii+0xc6>
 80257cc:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80257d0:	eb0c 4106 	add.w	r1, ip, r6, lsl #16
 80257d4:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80257d8:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 80257dc:	4291      	cmp	r1, r2
 80257de:	d037      	beq.n	8025850 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80257e0:	8b61      	ldrh	r1, [r4, #26]
 80257e2:	8b22      	ldrh	r2, [r4, #24]
 80257e4:	430a      	orrs	r2, r1
 80257e6:	d00b      	beq.n	8025800 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80257e8:	2b00      	cmp	r3, #0
 80257ea:	db09      	blt.n	8025800 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80257ec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80257ee:	429a      	cmp	r2, r3
 80257f0:	dd06      	ble.n	8025800 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80257f2:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80257f6:	429a      	cmp	r2, r3
 80257f8:	d308      	bcc.n	802580c <_ZN8touchgfx7Outline10renderLineEiiii+0xac>
 80257fa:	2301      	movs	r3, #1
 80257fc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025800:	f8a4 c014 	strh.w	ip, [r4, #20]
 8025804:	82e6      	strh	r6, [r4, #22]
 8025806:	2300      	movs	r3, #0
 8025808:	8323      	strh	r3, [r4, #24]
 802580a:	e0c6      	b.n	802599a <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 802580c:	f104 0314 	add.w	r3, r4, #20
 8025810:	6922      	ldr	r2, [r4, #16]
 8025812:	cb03      	ldmia	r3!, {r0, r1}
 8025814:	6010      	str	r0, [r2, #0]
 8025816:	6051      	str	r1, [r2, #4]
 8025818:	6923      	ldr	r3, [r4, #16]
 802581a:	3308      	adds	r3, #8
 802581c:	6123      	str	r3, [r4, #16]
 802581e:	68a3      	ldr	r3, [r4, #8]
 8025820:	3301      	adds	r3, #1
 8025822:	60a3      	str	r3, [r4, #8]
 8025824:	e7ec      	b.n	8025800 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8025826:	9b05      	ldr	r3, [sp, #20]
 8025828:	45ac      	cmp	ip, r5
 802582a:	f001 011f 	and.w	r1, r1, #31
 802582e:	8b20      	ldrh	r0, [r4, #24]
 8025830:	f003 031f 	and.w	r3, r3, #31
 8025834:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8025838:	9304      	str	r3, [sp, #16]
 802583a:	9b03      	ldr	r3, [sp, #12]
 802583c:	eba3 020e 	sub.w	r2, r3, lr
 8025840:	d109      	bne.n	8025856 <_ZN8touchgfx7Outline10renderLineEiiii+0xf6>
 8025842:	9b04      	ldr	r3, [sp, #16]
 8025844:	4410      	add	r0, r2
 8025846:	4419      	add	r1, r3
 8025848:	8320      	strh	r0, [r4, #24]
 802584a:	fb02 8201 	mla	r2, r2, r1, r8
 802584e:	8362      	strh	r2, [r4, #26]
 8025850:	b013      	add	sp, #76	; 0x4c
 8025852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025856:	f1ba 0f00 	cmp.w	sl, #0
 802585a:	f2c0 80a0 	blt.w	802599e <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 802585e:	f1c1 0320 	rsb	r3, r1, #32
 8025862:	f04f 0b20 	mov.w	fp, #32
 8025866:	435a      	muls	r2, r3
 8025868:	2301      	movs	r3, #1
 802586a:	9302      	str	r3, [sp, #8]
 802586c:	4459      	add	r1, fp
 802586e:	fb92 f7fa 	sdiv	r7, r2, sl
 8025872:	fb0a 2217 	mls	r2, sl, r7, r2
 8025876:	2a00      	cmp	r2, #0
 8025878:	bfbc      	itt	lt
 802587a:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802587e:	4452      	addlt	r2, sl
 8025880:	fb07 8101 	mla	r1, r7, r1, r8
 8025884:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8025888:	4438      	add	r0, r7
 802588a:	b20b      	sxth	r3, r1
 802588c:	9902      	ldr	r1, [sp, #8]
 802588e:	b200      	sxth	r0, r0
 8025890:	9301      	str	r3, [sp, #4]
 8025892:	8363      	strh	r3, [r4, #26]
 8025894:	186b      	adds	r3, r5, r1
 8025896:	0435      	lsls	r5, r6, #16
 8025898:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 802589c:	8320      	strh	r0, [r4, #24]
 802589e:	eb03 0905 	add.w	r9, r3, r5
 80258a2:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 80258a6:	9300      	str	r3, [sp, #0]
 80258a8:	45c1      	cmp	r9, r8
 80258aa:	9505      	str	r5, [sp, #20]
 80258ac:	d014      	beq.n	80258d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x178>
 80258ae:	9b01      	ldr	r3, [sp, #4]
 80258b0:	4303      	orrs	r3, r0
 80258b2:	d00b      	beq.n	80258cc <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80258b4:	2900      	cmp	r1, #0
 80258b6:	db09      	blt.n	80258cc <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80258b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80258ba:	428b      	cmp	r3, r1
 80258bc:	dd06      	ble.n	80258cc <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80258be:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80258c2:	4299      	cmp	r1, r3
 80258c4:	d374      	bcc.n	80259b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 80258c6:	2301      	movs	r3, #1
 80258c8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80258cc:	9b00      	ldr	r3, [sp, #0]
 80258ce:	82e6      	strh	r6, [r4, #22]
 80258d0:	82a3      	strh	r3, [r4, #20]
 80258d2:	2300      	movs	r3, #0
 80258d4:	8323      	strh	r3, [r4, #24]
 80258d6:	8363      	strh	r3, [r4, #26]
 80258d8:	9900      	ldr	r1, [sp, #0]
 80258da:	eb0e 0307 	add.w	r3, lr, r7
 80258de:	458c      	cmp	ip, r1
 80258e0:	d04e      	beq.n	8025980 <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 80258e2:	9903      	ldr	r1, [sp, #12]
 80258e4:	eba2 020a 	sub.w	r2, r2, sl
 80258e8:	1ac9      	subs	r1, r1, r3
 80258ea:	9201      	str	r2, [sp, #4]
 80258ec:	440f      	add	r7, r1
 80258ee:	017f      	lsls	r7, r7, #5
 80258f0:	fb97 fefa 	sdiv	lr, r7, sl
 80258f4:	fb0a 771e 	mls	r7, sl, lr, r7
 80258f8:	2f00      	cmp	r7, #0
 80258fa:	bfbc      	itt	lt
 80258fc:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8025900:	4457      	addlt	r7, sl
 8025902:	f10e 0101 	add.w	r1, lr, #1
 8025906:	9106      	str	r1, [sp, #24]
 8025908:	9a01      	ldr	r2, [sp, #4]
 802590a:	8b20      	ldrh	r0, [r4, #24]
 802590c:	19d2      	adds	r2, r2, r7
 802590e:	8b61      	ldrh	r1, [r4, #26]
 8025910:	9d02      	ldr	r5, [sp, #8]
 8025912:	9201      	str	r2, [sp, #4]
 8025914:	bf5b      	ittet	pl
 8025916:	eba2 020a 	subpl.w	r2, r2, sl
 802591a:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 802591e:	46f0      	movmi	r8, lr
 8025920:	9201      	strpl	r2, [sp, #4]
 8025922:	9a00      	ldr	r2, [sp, #0]
 8025924:	4440      	add	r0, r8
 8025926:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 802592a:	4443      	add	r3, r8
 802592c:	442a      	add	r2, r5
 802592e:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8025932:	9d05      	ldr	r5, [sp, #20]
 8025934:	b200      	sxth	r0, r0
 8025936:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 802593a:	b209      	sxth	r1, r1
 802593c:	4415      	add	r5, r2
 802593e:	8320      	strh	r0, [r4, #24]
 8025940:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8025944:	8361      	strh	r1, [r4, #26]
 8025946:	9200      	str	r2, [sp, #0]
 8025948:	454d      	cmp	r5, r9
 802594a:	d016      	beq.n	802597a <_ZN8touchgfx7Outline10renderLineEiiii+0x21a>
 802594c:	4301      	orrs	r1, r0
 802594e:	d00d      	beq.n	802596c <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8025950:	f1b8 0f00 	cmp.w	r8, #0
 8025954:	db0a      	blt.n	802596c <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8025956:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025958:	4541      	cmp	r1, r8
 802595a:	dd07      	ble.n	802596c <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 802595c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025960:	4288      	cmp	r0, r1
 8025962:	d335      	bcc.n	80259d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 8025964:	f04f 0101 	mov.w	r1, #1
 8025968:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802596c:	9900      	ldr	r1, [sp, #0]
 802596e:	82e6      	strh	r6, [r4, #22]
 8025970:	82a1      	strh	r1, [r4, #20]
 8025972:	f04f 0100 	mov.w	r1, #0
 8025976:	8321      	strh	r1, [r4, #24]
 8025978:	8361      	strh	r1, [r4, #26]
 802597a:	9a00      	ldr	r2, [sp, #0]
 802597c:	4594      	cmp	ip, r2
 802597e:	d1c3      	bne.n	8025908 <_ZN8touchgfx7Outline10renderLineEiiii+0x1a8>
 8025980:	9a03      	ldr	r2, [sp, #12]
 8025982:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 8025986:	1ad3      	subs	r3, r2, r3
 8025988:	8b22      	ldrh	r2, [r4, #24]
 802598a:	441a      	add	r2, r3
 802598c:	8322      	strh	r2, [r4, #24]
 802598e:	9a04      	ldr	r2, [sp, #16]
 8025990:	3220      	adds	r2, #32
 8025992:	eba2 020b 	sub.w	r2, r2, fp
 8025996:	fb03 c302 	mla	r3, r3, r2, ip
 802599a:	8363      	strh	r3, [r4, #26]
 802599c:	e758      	b.n	8025850 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802599e:	f04f 33ff 	mov.w	r3, #4294967295
 80259a2:	434a      	muls	r2, r1
 80259a4:	f1ca 0a00 	rsb	sl, sl, #0
 80259a8:	f04f 0b00 	mov.w	fp, #0
 80259ac:	9302      	str	r3, [sp, #8]
 80259ae:	e75d      	b.n	802586c <_ZN8touchgfx7Outline10renderLineEiiii+0x10c>
 80259b0:	f104 0314 	add.w	r3, r4, #20
 80259b4:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80259b8:	cb03      	ldmia	r3!, {r0, r1}
 80259ba:	f8c8 0000 	str.w	r0, [r8]
 80259be:	f8c8 1004 	str.w	r1, [r8, #4]
 80259c2:	6923      	ldr	r3, [r4, #16]
 80259c4:	3308      	adds	r3, #8
 80259c6:	6123      	str	r3, [r4, #16]
 80259c8:	68a3      	ldr	r3, [r4, #8]
 80259ca:	3301      	adds	r3, #1
 80259cc:	60a3      	str	r3, [r4, #8]
 80259ce:	e77d      	b.n	80258cc <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80259d0:	f104 0814 	add.w	r8, r4, #20
 80259d4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80259d8:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80259dc:	f8c9 0000 	str.w	r0, [r9]
 80259e0:	f8c9 1004 	str.w	r1, [r9, #4]
 80259e4:	6921      	ldr	r1, [r4, #16]
 80259e6:	3108      	adds	r1, #8
 80259e8:	6121      	str	r1, [r4, #16]
 80259ea:	68a1      	ldr	r1, [r4, #8]
 80259ec:	3101      	adds	r1, #1
 80259ee:	60a1      	str	r1, [r4, #8]
 80259f0:	e7bc      	b.n	802596c <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 80259f2:	1a83      	subs	r3, r0, r2
 80259f4:	9301      	str	r3, [sp, #4]
 80259f6:	f1ba 0f00 	cmp.w	sl, #0
 80259fa:	f040 8094 	bne.w	8025b26 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c6>
 80259fe:	9a01      	ldr	r2, [sp, #4]
 8025a00:	0049      	lsls	r1, r1, #1
 8025a02:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8025a06:	2a00      	cmp	r2, #0
 8025a08:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 8025a0c:	8b62      	ldrh	r2, [r4, #26]
 8025a0e:	bfaa      	itet	ge
 8025a10:	f04f 0a20 	movge.w	sl, #32
 8025a14:	f04f 38ff 	movlt.w	r8, #4294967295
 8025a18:	f04f 0801 	movge.w	r8, #1
 8025a1c:	8b21      	ldrh	r1, [r4, #24]
 8025a1e:	ebaa 0e0e 	sub.w	lr, sl, lr
 8025a22:	4471      	add	r1, lr
 8025a24:	fb0e 2e03 	mla	lr, lr, r3, r2
 8025a28:	eb08 0206 	add.w	r2, r8, r6
 8025a2c:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8025a30:	b209      	sxth	r1, r1
 8025a32:	eb05 4702 	add.w	r7, r5, r2, lsl #16
 8025a36:	eb06 4600 	add.w	r6, r6, r0, lsl #16
 8025a3a:	8321      	strh	r1, [r4, #24]
 8025a3c:	fa0f fe8e 	sxth.w	lr, lr
 8025a40:	42b7      	cmp	r7, r6
 8025a42:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8025a46:	d013      	beq.n	8025a70 <_ZN8touchgfx7Outline10renderLineEiiii+0x310>
 8025a48:	ea51 010e 	orrs.w	r1, r1, lr
 8025a4c:	d00b      	beq.n	8025a66 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8025a4e:	2800      	cmp	r0, #0
 8025a50:	db09      	blt.n	8025a66 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8025a52:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025a54:	4281      	cmp	r1, r0
 8025a56:	dd06      	ble.n	8025a66 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8025a58:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025a5c:	4288      	cmp	r0, r1
 8025a5e:	d339      	bcc.n	8025ad4 <_ZN8touchgfx7Outline10renderLineEiiii+0x374>
 8025a60:	2101      	movs	r1, #1
 8025a62:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8025a66:	2100      	movs	r1, #0
 8025a68:	82a5      	strh	r5, [r4, #20]
 8025a6a:	82e2      	strh	r2, [r4, #22]
 8025a6c:	8321      	strh	r1, [r4, #24]
 8025a6e:	8361      	strh	r1, [r4, #26]
 8025a70:	f1aa 0610 	sub.w	r6, sl, #16
 8025a74:	f04f 0e00 	mov.w	lr, #0
 8025a78:	f04f 0b01 	mov.w	fp, #1
 8025a7c:	0076      	lsls	r6, r6, #1
 8025a7e:	fb06 f703 	mul.w	r7, r6, r3
 8025a82:	b236      	sxth	r6, r6
 8025a84:	b23f      	sxth	r7, r7
 8025a86:	ea46 0107 	orr.w	r1, r6, r7
 8025a8a:	9100      	str	r1, [sp, #0]
 8025a8c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8025a8e:	428a      	cmp	r2, r1
 8025a90:	d03e      	beq.n	8025b10 <_ZN8touchgfx7Outline10renderLineEiiii+0x3b0>
 8025a92:	4442      	add	r2, r8
 8025a94:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8025a98:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8025a9c:	eb05 4c02 	add.w	ip, r5, r2, lsl #16
 8025aa0:	8326      	strh	r6, [r4, #24]
 8025aa2:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 8025aa6:	8367      	strh	r7, [r4, #26]
 8025aa8:	4584      	cmp	ip, r0
 8025aaa:	d0ef      	beq.n	8025a8c <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8025aac:	9800      	ldr	r0, [sp, #0]
 8025aae:	b150      	cbz	r0, 8025ac6 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8025ab0:	2900      	cmp	r1, #0
 8025ab2:	db08      	blt.n	8025ac6 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8025ab4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8025ab6:	4288      	cmp	r0, r1
 8025ab8:	dd05      	ble.n	8025ac6 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8025aba:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025abe:	4288      	cmp	r0, r1
 8025ac0:	d315      	bcc.n	8025aee <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8025ac2:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 8025ac6:	82a5      	strh	r5, [r4, #20]
 8025ac8:	82e2      	strh	r2, [r4, #22]
 8025aca:	f8a4 e018 	strh.w	lr, [r4, #24]
 8025ace:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8025ad2:	e7db      	b.n	8025a8c <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8025ad4:	f104 0614 	add.w	r6, r4, #20
 8025ad8:	6927      	ldr	r7, [r4, #16]
 8025ada:	ce03      	ldmia	r6!, {r0, r1}
 8025adc:	6038      	str	r0, [r7, #0]
 8025ade:	6079      	str	r1, [r7, #4]
 8025ae0:	6921      	ldr	r1, [r4, #16]
 8025ae2:	3108      	adds	r1, #8
 8025ae4:	6121      	str	r1, [r4, #16]
 8025ae6:	68a1      	ldr	r1, [r4, #8]
 8025ae8:	3101      	adds	r1, #1
 8025aea:	60a1      	str	r1, [r4, #8]
 8025aec:	e7bb      	b.n	8025a66 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8025aee:	f104 0c14 	add.w	ip, r4, #20
 8025af2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8025af6:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8025afa:	f8c9 0000 	str.w	r0, [r9]
 8025afe:	f8c9 1004 	str.w	r1, [r9, #4]
 8025b02:	6921      	ldr	r1, [r4, #16]
 8025b04:	3108      	adds	r1, #8
 8025b06:	6121      	str	r1, [r4, #16]
 8025b08:	68a1      	ldr	r1, [r4, #8]
 8025b0a:	3101      	adds	r1, #1
 8025b0c:	60a1      	str	r1, [r4, #8]
 8025b0e:	e7da      	b.n	8025ac6 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8025b10:	9a03      	ldr	r2, [sp, #12]
 8025b12:	8b61      	ldrh	r1, [r4, #26]
 8025b14:	f1a2 0c20 	sub.w	ip, r2, #32
 8025b18:	8b22      	ldrh	r2, [r4, #24]
 8025b1a:	44d4      	add	ip, sl
 8025b1c:	4462      	add	r2, ip
 8025b1e:	fb0c 1303 	mla	r3, ip, r3, r1
 8025b22:	8322      	strh	r2, [r4, #24]
 8025b24:	e739      	b.n	802599a <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8025b26:	9b01      	ldr	r3, [sp, #4]
 8025b28:	2b00      	cmp	r3, #0
 8025b2a:	db3f      	blt.n	8025bac <_ZN8touchgfx7Outline10renderLineEiiii+0x44c>
 8025b2c:	2201      	movs	r2, #1
 8025b2e:	f1ce 0320 	rsb	r3, lr, #32
 8025b32:	920b      	str	r2, [sp, #44]	; 0x2c
 8025b34:	2220      	movs	r2, #32
 8025b36:	fb0a f303 	mul.w	r3, sl, r3
 8025b3a:	9202      	str	r2, [sp, #8]
 8025b3c:	9a01      	ldr	r2, [sp, #4]
 8025b3e:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8025b42:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8025b46:	fb93 f7f2 	sdiv	r7, r3, r2
 8025b4a:	fb02 3317 	mls	r3, r2, r7, r3
 8025b4e:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8025b52:	2b00      	cmp	r3, #0
 8025b54:	9308      	str	r3, [sp, #32]
 8025b56:	bfbc      	itt	lt
 8025b58:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8025b5c:	189b      	addlt	r3, r3, r2
 8025b5e:	eb07 0b01 	add.w	fp, r7, r1
 8025b62:	bfb8      	it	lt
 8025b64:	9308      	strlt	r3, [sp, #32]
 8025b66:	ea4f 136b 	mov.w	r3, fp, asr #5
 8025b6a:	9304      	str	r3, [sp, #16]
 8025b6c:	9b02      	ldr	r3, [sp, #8]
 8025b6e:	4573      	cmp	r3, lr
 8025b70:	d133      	bne.n	8025bda <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 8025b72:	9b04      	ldr	r3, [sp, #16]
 8025b74:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 8025b78:	454b      	cmp	r3, r9
 8025b7a:	d045      	beq.n	8025c08 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8025b7c:	8b62      	ldrh	r2, [r4, #26]
 8025b7e:	8b23      	ldrh	r3, [r4, #24]
 8025b80:	4313      	orrs	r3, r2
 8025b82:	d00c      	beq.n	8025b9e <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8025b84:	f1b8 0f00 	cmp.w	r8, #0
 8025b88:	db09      	blt.n	8025b9e <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8025b8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025b8c:	4543      	cmp	r3, r8
 8025b8e:	dd06      	ble.n	8025b9e <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8025b90:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8025b94:	429a      	cmp	r2, r3
 8025b96:	d313      	bcc.n	8025bc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x460>
 8025b98:	2301      	movs	r3, #1
 8025b9a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025b9e:	9b04      	ldr	r3, [sp, #16]
 8025ba0:	82e6      	strh	r6, [r4, #22]
 8025ba2:	82a3      	strh	r3, [r4, #20]
 8025ba4:	2300      	movs	r3, #0
 8025ba6:	8323      	strh	r3, [r4, #24]
 8025ba8:	8363      	strh	r3, [r4, #26]
 8025baa:	e02d      	b.n	8025c08 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8025bac:	9a01      	ldr	r2, [sp, #4]
 8025bae:	fb0a f30e 	mul.w	r3, sl, lr
 8025bb2:	4252      	negs	r2, r2
 8025bb4:	9201      	str	r2, [sp, #4]
 8025bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8025bba:	920b      	str	r2, [sp, #44]	; 0x2c
 8025bbc:	2200      	movs	r2, #0
 8025bbe:	e7bc      	b.n	8025b3a <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8025bc0:	f104 0314 	add.w	r3, r4, #20
 8025bc4:	6922      	ldr	r2, [r4, #16]
 8025bc6:	cb03      	ldmia	r3!, {r0, r1}
 8025bc8:	6010      	str	r0, [r2, #0]
 8025bca:	6051      	str	r1, [r2, #4]
 8025bcc:	6923      	ldr	r3, [r4, #16]
 8025bce:	3308      	adds	r3, #8
 8025bd0:	6123      	str	r3, [r4, #16]
 8025bd2:	68a3      	ldr	r3, [r4, #8]
 8025bd4:	3301      	adds	r3, #1
 8025bd6:	60a3      	str	r3, [r4, #8]
 8025bd8:	e7e1      	b.n	8025b9e <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8025bda:	f00b 031f 	and.w	r3, fp, #31
 8025bde:	f001 011f 	and.w	r1, r1, #31
 8025be2:	8b20      	ldrh	r0, [r4, #24]
 8025be4:	9309      	str	r3, [sp, #36]	; 0x24
 8025be6:	9b02      	ldr	r3, [sp, #8]
 8025be8:	eba3 020e 	sub.w	r2, r3, lr
 8025bec:	8b63      	ldrh	r3, [r4, #26]
 8025bee:	9300      	str	r3, [sp, #0]
 8025bf0:	9b04      	ldr	r3, [sp, #16]
 8025bf2:	42ab      	cmp	r3, r5
 8025bf4:	f040 80ef 	bne.w	8025dd6 <_ZN8touchgfx7Outline10renderLineEiiii+0x676>
 8025bf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025bfa:	4410      	add	r0, r2
 8025bfc:	4419      	add	r1, r3
 8025bfe:	9b00      	ldr	r3, [sp, #0]
 8025c00:	8320      	strh	r0, [r4, #24]
 8025c02:	fb02 3101 	mla	r1, r2, r1, r3
 8025c06:	8361      	strh	r1, [r4, #26]
 8025c08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025c0a:	9904      	ldr	r1, [sp, #16]
 8025c0c:	4433      	add	r3, r6
 8025c0e:	9300      	str	r3, [sp, #0]
 8025c10:	9a00      	ldr	r2, [sp, #0]
 8025c12:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8025c16:	eb01 4002 	add.w	r0, r1, r2, lsl #16
 8025c1a:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8025c1e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8025c22:	4288      	cmp	r0, r1
 8025c24:	d018      	beq.n	8025c58 <_ZN8touchgfx7Outline10renderLineEiiii+0x4f8>
 8025c26:	8b60      	ldrh	r0, [r4, #26]
 8025c28:	8b21      	ldrh	r1, [r4, #24]
 8025c2a:	ea50 0201 	orrs.w	r2, r0, r1
 8025c2e:	d00c      	beq.n	8025c4a <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8025c30:	2b00      	cmp	r3, #0
 8025c32:	db0a      	blt.n	8025c4a <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8025c34:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025c36:	4299      	cmp	r1, r3
 8025c38:	dd07      	ble.n	8025c4a <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8025c3a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8025c3e:	4299      	cmp	r1, r3
 8025c40:	f0c0 818b 	bcc.w	8025f5a <_ZN8touchgfx7Outline10renderLineEiiii+0x7fa>
 8025c44:	2301      	movs	r3, #1
 8025c46:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025c4a:	9b04      	ldr	r3, [sp, #16]
 8025c4c:	82a3      	strh	r3, [r4, #20]
 8025c4e:	9b00      	ldr	r3, [sp, #0]
 8025c50:	82e3      	strh	r3, [r4, #22]
 8025c52:	2300      	movs	r3, #0
 8025c54:	8323      	strh	r3, [r4, #24]
 8025c56:	8363      	strh	r3, [r4, #26]
 8025c58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025c5a:	9a00      	ldr	r2, [sp, #0]
 8025c5c:	4293      	cmp	r3, r2
 8025c5e:	f000 808d 	beq.w	8025d7c <_ZN8touchgfx7Outline10renderLineEiiii+0x61c>
 8025c62:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8025c66:	9901      	ldr	r1, [sp, #4]
 8025c68:	9801      	ldr	r0, [sp, #4]
 8025c6a:	fb93 f1f1 	sdiv	r1, r3, r1
 8025c6e:	fb00 3311 	mls	r3, r0, r1, r3
 8025c72:	9106      	str	r1, [sp, #24]
 8025c74:	2b00      	cmp	r3, #0
 8025c76:	9307      	str	r3, [sp, #28]
 8025c78:	da04      	bge.n	8025c84 <_ZN8touchgfx7Outline10renderLineEiiii+0x524>
 8025c7a:	1e4b      	subs	r3, r1, #1
 8025c7c:	9306      	str	r3, [sp, #24]
 8025c7e:	9b07      	ldr	r3, [sp, #28]
 8025c80:	4403      	add	r3, r0
 8025c82:	9307      	str	r3, [sp, #28]
 8025c84:	9b08      	ldr	r3, [sp, #32]
 8025c86:	f04f 0c00 	mov.w	ip, #0
 8025c8a:	9901      	ldr	r1, [sp, #4]
 8025c8c:	1a5b      	subs	r3, r3, r1
 8025c8e:	4659      	mov	r1, fp
 8025c90:	9308      	str	r3, [sp, #32]
 8025c92:	9b02      	ldr	r3, [sp, #8]
 8025c94:	f1c3 0320 	rsb	r3, r3, #32
 8025c98:	930a      	str	r3, [sp, #40]	; 0x28
 8025c9a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8025c9c:	9b02      	ldr	r3, [sp, #8]
 8025c9e:	1a1b      	subs	r3, r3, r0
 8025ca0:	9309      	str	r3, [sp, #36]	; 0x24
 8025ca2:	f9b4 e016 	ldrsh.w	lr, [r4, #22]
 8025ca6:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8025caa:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 8025cae:	eb08 480e 	add.w	r8, r8, lr, lsl #16
 8025cb2:	181b      	adds	r3, r3, r0
 8025cb4:	bf58      	it	pl
 8025cb6:	9801      	ldrpl	r0, [sp, #4]
 8025cb8:	9308      	str	r3, [sp, #32]
 8025cba:	bf54      	ite	pl
 8025cbc:	1a1b      	subpl	r3, r3, r0
 8025cbe:	9d06      	ldrmi	r5, [sp, #24]
 8025cc0:	9802      	ldr	r0, [sp, #8]
 8025cc2:	bf5e      	ittt	pl
 8025cc4:	9308      	strpl	r3, [sp, #32]
 8025cc6:	9b06      	ldrpl	r3, [sp, #24]
 8025cc8:	1c5d      	addpl	r5, r3, #1
 8025cca:	44ab      	add	fp, r5
 8025ccc:	ea4f 136b 	mov.w	r3, fp, asr #5
 8025cd0:	9304      	str	r3, [sp, #16]
 8025cd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025cd4:	4283      	cmp	r3, r0
 8025cd6:	f040 815a 	bne.w	8025f8e <_ZN8touchgfx7Outline10renderLineEiiii+0x82e>
 8025cda:	9b04      	ldr	r3, [sp, #16]
 8025cdc:	9a00      	ldr	r2, [sp, #0]
 8025cde:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8025ce2:	4543      	cmp	r3, r8
 8025ce4:	d01a      	beq.n	8025d1c <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8025ce6:	8b61      	ldrh	r1, [r4, #26]
 8025ce8:	8b23      	ldrh	r3, [r4, #24]
 8025cea:	430b      	orrs	r3, r1
 8025cec:	d00e      	beq.n	8025d0c <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8025cee:	f1be 0f00 	cmp.w	lr, #0
 8025cf2:	db0b      	blt.n	8025d0c <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8025cf4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025cf6:	4573      	cmp	r3, lr
 8025cf8:	dd08      	ble.n	8025d0c <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8025cfa:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8025cfe:	4299      	cmp	r1, r3
 8025d00:	f0c0 8138 	bcc.w	8025f74 <_ZN8touchgfx7Outline10renderLineEiiii+0x814>
 8025d04:	f04f 0301 	mov.w	r3, #1
 8025d08:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025d0c:	9b04      	ldr	r3, [sp, #16]
 8025d0e:	f8a4 c018 	strh.w	ip, [r4, #24]
 8025d12:	82a3      	strh	r3, [r4, #20]
 8025d14:	9b00      	ldr	r3, [sp, #0]
 8025d16:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8025d1a:	82e3      	strh	r3, [r4, #22]
 8025d1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025d1e:	9a00      	ldr	r2, [sp, #0]
 8025d20:	441a      	add	r2, r3
 8025d22:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8025d26:	9200      	str	r2, [sp, #0]
 8025d28:	9900      	ldr	r1, [sp, #0]
 8025d2a:	9a04      	ldr	r2, [sp, #16]
 8025d2c:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 8025d30:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8025d34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8025d38:	4288      	cmp	r0, r1
 8025d3a:	d01a      	beq.n	8025d72 <_ZN8touchgfx7Outline10renderLineEiiii+0x612>
 8025d3c:	8b60      	ldrh	r0, [r4, #26]
 8025d3e:	8b21      	ldrh	r1, [r4, #24]
 8025d40:	ea50 0201 	orrs.w	r2, r0, r1
 8025d44:	d00d      	beq.n	8025d62 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8025d46:	2b00      	cmp	r3, #0
 8025d48:	db0b      	blt.n	8025d62 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8025d4a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025d4c:	4299      	cmp	r1, r3
 8025d4e:	dd08      	ble.n	8025d62 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8025d50:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8025d54:	4299      	cmp	r1, r3
 8025d56:	f0c0 81f9 	bcc.w	802614c <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 8025d5a:	f04f 0301 	mov.w	r3, #1
 8025d5e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025d62:	9b04      	ldr	r3, [sp, #16]
 8025d64:	f8a4 c018 	strh.w	ip, [r4, #24]
 8025d68:	82a3      	strh	r3, [r4, #20]
 8025d6a:	9b00      	ldr	r3, [sp, #0]
 8025d6c:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8025d70:	82e3      	strh	r3, [r4, #22]
 8025d72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025d74:	4659      	mov	r1, fp
 8025d76:	9a00      	ldr	r2, [sp, #0]
 8025d78:	4293      	cmp	r3, r2
 8025d7a:	d192      	bne.n	8025ca2 <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8025d7c:	9b02      	ldr	r3, [sp, #8]
 8025d7e:	f1c3 0c20 	rsb	ip, r3, #32
 8025d82:	9b05      	ldr	r3, [sp, #20]
 8025d84:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8025d88:	9b03      	ldr	r3, [sp, #12]
 8025d8a:	459c      	cmp	ip, r3
 8025d8c:	f040 81f8 	bne.w	8026180 <_ZN8touchgfx7Outline10renderLineEiiii+0xa20>
 8025d90:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8025d94:	9a00      	ldr	r2, [sp, #0]
 8025d96:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8025d9a:	eb0e 4002 	add.w	r0, lr, r2, lsl #16
 8025d9e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8025da2:	4288      	cmp	r0, r1
 8025da4:	f43f ad54 	beq.w	8025850 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8025da8:	8b60      	ldrh	r0, [r4, #26]
 8025daa:	8b21      	ldrh	r1, [r4, #24]
 8025dac:	ea50 0201 	orrs.w	r2, r0, r1
 8025db0:	d00c      	beq.n	8025dcc <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8025db2:	2b00      	cmp	r3, #0
 8025db4:	db0a      	blt.n	8025dcc <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8025db6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025db8:	4299      	cmp	r1, r3
 8025dba:	dd07      	ble.n	8025dcc <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8025dbc:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8025dc0:	4299      	cmp	r1, r3
 8025dc2:	f0c0 81d0 	bcc.w	8026166 <_ZN8touchgfx7Outline10renderLineEiiii+0xa06>
 8025dc6:	2301      	movs	r3, #1
 8025dc8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025dcc:	9b00      	ldr	r3, [sp, #0]
 8025dce:	f8a4 e014 	strh.w	lr, [r4, #20]
 8025dd2:	82e3      	strh	r3, [r4, #22]
 8025dd4:	e517      	b.n	8025806 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6>
 8025dd6:	2f00      	cmp	r7, #0
 8025dd8:	f2c0 8097 	blt.w	8025f0a <_ZN8touchgfx7Outline10renderLineEiiii+0x7aa>
 8025ddc:	2301      	movs	r3, #1
 8025dde:	f1c1 0c20 	rsb	ip, r1, #32
 8025de2:	9307      	str	r3, [sp, #28]
 8025de4:	2320      	movs	r3, #32
 8025de6:	fb02 f20c 	mul.w	r2, r2, ip
 8025dea:	9306      	str	r3, [sp, #24]
 8025dec:	9b06      	ldr	r3, [sp, #24]
 8025dee:	fb92 fcf7 	sdiv	ip, r2, r7
 8025df2:	fb07 221c 	mls	r2, r7, ip, r2
 8025df6:	4419      	add	r1, r3
 8025df8:	9b00      	ldr	r3, [sp, #0]
 8025dfa:	2a00      	cmp	r2, #0
 8025dfc:	bfbc      	itt	lt
 8025dfe:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8025e02:	19d2      	addlt	r2, r2, r7
 8025e04:	fb0c 3101 	mla	r1, ip, r1, r3
 8025e08:	9b07      	ldr	r3, [sp, #28]
 8025e0a:	4460      	add	r0, ip
 8025e0c:	441d      	add	r5, r3
 8025e0e:	0433      	lsls	r3, r6, #16
 8025e10:	b200      	sxth	r0, r0
 8025e12:	930a      	str	r3, [sp, #40]	; 0x28
 8025e14:	18eb      	adds	r3, r5, r3
 8025e16:	b209      	sxth	r1, r1
 8025e18:	8320      	strh	r0, [r4, #24]
 8025e1a:	454b      	cmp	r3, r9
 8025e1c:	8361      	strh	r1, [r4, #26]
 8025e1e:	d014      	beq.n	8025e4a <_ZN8touchgfx7Outline10renderLineEiiii+0x6ea>
 8025e20:	ea50 0301 	orrs.w	r3, r0, r1
 8025e24:	d00c      	beq.n	8025e40 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8025e26:	f1b8 0f00 	cmp.w	r8, #0
 8025e2a:	db09      	blt.n	8025e40 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8025e2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025e2e:	4543      	cmp	r3, r8
 8025e30:	dd06      	ble.n	8025e40 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8025e32:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8025e36:	4299      	cmp	r1, r3
 8025e38:	d36e      	bcc.n	8025f18 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8025e3a:	2301      	movs	r3, #1
 8025e3c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025e40:	2300      	movs	r3, #0
 8025e42:	82a5      	strh	r5, [r4, #20]
 8025e44:	82e6      	strh	r6, [r4, #22]
 8025e46:	8323      	strh	r3, [r4, #24]
 8025e48:	8363      	strh	r3, [r4, #26]
 8025e4a:	9904      	ldr	r1, [sp, #16]
 8025e4c:	eb0e 030c 	add.w	r3, lr, ip
 8025e50:	42a9      	cmp	r1, r5
 8025e52:	d04d      	beq.n	8025ef0 <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 8025e54:	9902      	ldr	r1, [sp, #8]
 8025e56:	1bd2      	subs	r2, r2, r7
 8025e58:	1ac9      	subs	r1, r1, r3
 8025e5a:	9200      	str	r2, [sp, #0]
 8025e5c:	448c      	add	ip, r1
 8025e5e:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8025e62:	fb9c fef7 	sdiv	lr, ip, r7
 8025e66:	fb07 cc1e 	mls	ip, r7, lr, ip
 8025e6a:	f1bc 0f00 	cmp.w	ip, #0
 8025e6e:	bfbc      	itt	lt
 8025e70:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8025e74:	44bc      	addlt	ip, r7
 8025e76:	f10e 0101 	add.w	r1, lr, #1
 8025e7a:	910d      	str	r1, [sp, #52]	; 0x34
 8025e7c:	9a00      	ldr	r2, [sp, #0]
 8025e7e:	8b20      	ldrh	r0, [r4, #24]
 8025e80:	eb12 020c 	adds.w	r2, r2, ip
 8025e84:	8b61      	ldrh	r1, [r4, #26]
 8025e86:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8025e8a:	9200      	str	r2, [sp, #0]
 8025e8c:	bf5b      	ittet	pl
 8025e8e:	1bd2      	subpl	r2, r2, r7
 8025e90:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 8025e94:	46f0      	movmi	r8, lr
 8025e96:	9200      	strpl	r2, [sp, #0]
 8025e98:	9a07      	ldr	r2, [sp, #28]
 8025e9a:	4440      	add	r0, r8
 8025e9c:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8025ea0:	4443      	add	r3, r8
 8025ea2:	4415      	add	r5, r2
 8025ea4:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8025ea8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025eaa:	b200      	sxth	r0, r0
 8025eac:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8025eb0:	442a      	add	r2, r5
 8025eb2:	b209      	sxth	r1, r1
 8025eb4:	8320      	strh	r0, [r4, #24]
 8025eb6:	454a      	cmp	r2, r9
 8025eb8:	8361      	strh	r1, [r4, #26]
 8025eba:	d016      	beq.n	8025eea <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8025ebc:	ea50 0201 	orrs.w	r2, r0, r1
 8025ec0:	d00d      	beq.n	8025ede <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8025ec2:	f1b8 0f00 	cmp.w	r8, #0
 8025ec6:	db0a      	blt.n	8025ede <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8025ec8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025eca:	4541      	cmp	r1, r8
 8025ecc:	dd07      	ble.n	8025ede <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8025ece:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025ed2:	4288      	cmp	r0, r1
 8025ed4:	d330      	bcc.n	8025f38 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d8>
 8025ed6:	f04f 0201 	mov.w	r2, #1
 8025eda:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8025ede:	f04f 0200 	mov.w	r2, #0
 8025ee2:	82a5      	strh	r5, [r4, #20]
 8025ee4:	82e6      	strh	r6, [r4, #22]
 8025ee6:	8322      	strh	r2, [r4, #24]
 8025ee8:	8362      	strh	r2, [r4, #26]
 8025eea:	9904      	ldr	r1, [sp, #16]
 8025eec:	42a9      	cmp	r1, r5
 8025eee:	d1c5      	bne.n	8025e7c <_ZN8touchgfx7Outline10renderLineEiiii+0x71c>
 8025ef0:	9a02      	ldr	r2, [sp, #8]
 8025ef2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025ef4:	1ad3      	subs	r3, r2, r3
 8025ef6:	8b22      	ldrh	r2, [r4, #24]
 8025ef8:	3120      	adds	r1, #32
 8025efa:	441a      	add	r2, r3
 8025efc:	8322      	strh	r2, [r4, #24]
 8025efe:	9a06      	ldr	r2, [sp, #24]
 8025f00:	1a89      	subs	r1, r1, r2
 8025f02:	8b62      	ldrh	r2, [r4, #26]
 8025f04:	fb03 2301 	mla	r3, r3, r1, r2
 8025f08:	e64e      	b.n	8025ba8 <_ZN8touchgfx7Outline10renderLineEiiii+0x448>
 8025f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8025f0e:	434a      	muls	r2, r1
 8025f10:	427f      	negs	r7, r7
 8025f12:	9307      	str	r3, [sp, #28]
 8025f14:	2300      	movs	r3, #0
 8025f16:	e768      	b.n	8025dea <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 8025f18:	f104 0314 	add.w	r3, r4, #20
 8025f1c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8025f20:	cb03      	ldmia	r3!, {r0, r1}
 8025f22:	f8c8 0000 	str.w	r0, [r8]
 8025f26:	f8c8 1004 	str.w	r1, [r8, #4]
 8025f2a:	6923      	ldr	r3, [r4, #16]
 8025f2c:	3308      	adds	r3, #8
 8025f2e:	6123      	str	r3, [r4, #16]
 8025f30:	68a3      	ldr	r3, [r4, #8]
 8025f32:	3301      	adds	r3, #1
 8025f34:	60a3      	str	r3, [r4, #8]
 8025f36:	e783      	b.n	8025e40 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8025f38:	f104 0814 	add.w	r8, r4, #20
 8025f3c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8025f40:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8025f44:	f8c9 0000 	str.w	r0, [r9]
 8025f48:	f8c9 1004 	str.w	r1, [r9, #4]
 8025f4c:	6921      	ldr	r1, [r4, #16]
 8025f4e:	3108      	adds	r1, #8
 8025f50:	6121      	str	r1, [r4, #16]
 8025f52:	68a1      	ldr	r1, [r4, #8]
 8025f54:	3101      	adds	r1, #1
 8025f56:	60a1      	str	r1, [r4, #8]
 8025f58:	e7c1      	b.n	8025ede <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8025f5a:	f104 0314 	add.w	r3, r4, #20
 8025f5e:	6925      	ldr	r5, [r4, #16]
 8025f60:	cb03      	ldmia	r3!, {r0, r1}
 8025f62:	6028      	str	r0, [r5, #0]
 8025f64:	6069      	str	r1, [r5, #4]
 8025f66:	6923      	ldr	r3, [r4, #16]
 8025f68:	3308      	adds	r3, #8
 8025f6a:	6123      	str	r3, [r4, #16]
 8025f6c:	68a3      	ldr	r3, [r4, #8]
 8025f6e:	3301      	adds	r3, #1
 8025f70:	60a3      	str	r3, [r4, #8]
 8025f72:	e66a      	b.n	8025c4a <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8025f74:	f104 0314 	add.w	r3, r4, #20
 8025f78:	6925      	ldr	r5, [r4, #16]
 8025f7a:	cb03      	ldmia	r3!, {r0, r1}
 8025f7c:	6028      	str	r0, [r5, #0]
 8025f7e:	6069      	str	r1, [r5, #4]
 8025f80:	6923      	ldr	r3, [r4, #16]
 8025f82:	3308      	adds	r3, #8
 8025f84:	6123      	str	r3, [r4, #16]
 8025f86:	68a3      	ldr	r3, [r4, #8]
 8025f88:	3301      	adds	r3, #1
 8025f8a:	60a3      	str	r3, [r4, #8]
 8025f8c:	e6be      	b.n	8025d0c <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8025f8e:	f00b 031f 	and.w	r3, fp, #31
 8025f92:	114f      	asrs	r7, r1, #5
 8025f94:	8b20      	ldrh	r0, [r4, #24]
 8025f96:	f001 011f 	and.w	r1, r1, #31
 8025f9a:	930f      	str	r3, [sp, #60]	; 0x3c
 8025f9c:	9b04      	ldr	r3, [sp, #16]
 8025f9e:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8025fa2:	429f      	cmp	r7, r3
 8025fa4:	d10a      	bne.n	8025fbc <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 8025fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025fa8:	4418      	add	r0, r3
 8025faa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025fac:	4419      	add	r1, r3
 8025fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025fb0:	8320      	strh	r0, [r4, #24]
 8025fb2:	fb03 9901 	mla	r9, r3, r1, r9
 8025fb6:	f8a4 901a 	strh.w	r9, [r4, #26]
 8025fba:	e6af      	b.n	8025d1c <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8025fbc:	2d00      	cmp	r5, #0
 8025fbe:	f2c0 809b 	blt.w	80260f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 8025fc2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8025fc4:	f1c1 0320 	rsb	r3, r1, #32
 8025fc8:	4373      	muls	r3, r6
 8025fca:	2601      	movs	r6, #1
 8025fcc:	960e      	str	r6, [sp, #56]	; 0x38
 8025fce:	2620      	movs	r6, #32
 8025fd0:	960d      	str	r6, [sp, #52]	; 0x34
 8025fd2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8025fd4:	fb93 f6f5 	sdiv	r6, r3, r5
 8025fd8:	4411      	add	r1, r2
 8025fda:	fb05 3316 	mls	r3, r5, r6, r3
 8025fde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025fe0:	2b00      	cmp	r3, #0
 8025fe2:	4417      	add	r7, r2
 8025fe4:	9a00      	ldr	r2, [sp, #0]
 8025fe6:	bfbc      	itt	lt
 8025fe8:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8025fec:	195b      	addlt	r3, r3, r5
 8025fee:	0412      	lsls	r2, r2, #16
 8025ff0:	fb06 9101 	mla	r1, r6, r1, r9
 8025ff4:	4430      	add	r0, r6
 8025ff6:	eb07 0902 	add.w	r9, r7, r2
 8025ffa:	9210      	str	r2, [sp, #64]	; 0x40
 8025ffc:	b200      	sxth	r0, r0
 8025ffe:	b209      	sxth	r1, r1
 8026000:	45c1      	cmp	r9, r8
 8026002:	8320      	strh	r0, [r4, #24]
 8026004:	8361      	strh	r1, [r4, #26]
 8026006:	d017      	beq.n	8026038 <_ZN8touchgfx7Outline10renderLineEiiii+0x8d8>
 8026008:	ea50 0201 	orrs.w	r2, r0, r1
 802600c:	d00d      	beq.n	802602a <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 802600e:	f1be 0f00 	cmp.w	lr, #0
 8026012:	db0a      	blt.n	802602a <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8026014:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8026016:	4571      	cmp	r1, lr
 8026018:	dd07      	ble.n	802602a <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 802601a:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802601e:	4288      	cmp	r0, r1
 8026020:	d372      	bcc.n	8026108 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 8026022:	f04f 0201 	mov.w	r2, #1
 8026026:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802602a:	9a00      	ldr	r2, [sp, #0]
 802602c:	82a7      	strh	r7, [r4, #20]
 802602e:	82e2      	strh	r2, [r4, #22]
 8026030:	f8a4 c018 	strh.w	ip, [r4, #24]
 8026034:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8026038:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802603a:	eb02 0e06 	add.w	lr, r2, r6
 802603e:	9a04      	ldr	r2, [sp, #16]
 8026040:	42ba      	cmp	r2, r7
 8026042:	d049      	beq.n	80260d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x978>
 8026044:	9a02      	ldr	r2, [sp, #8]
 8026046:	1b5b      	subs	r3, r3, r5
 8026048:	eba2 010e 	sub.w	r1, r2, lr
 802604c:	440e      	add	r6, r1
 802604e:	0176      	lsls	r6, r6, #5
 8026050:	fb96 f8f5 	sdiv	r8, r6, r5
 8026054:	fb05 6618 	mls	r6, r5, r8, r6
 8026058:	2e00      	cmp	r6, #0
 802605a:	bfbc      	itt	lt
 802605c:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8026060:	1976      	addlt	r6, r6, r5
 8026062:	f108 0201 	add.w	r2, r8, #1
 8026066:	9211      	str	r2, [sp, #68]	; 0x44
 8026068:	199b      	adds	r3, r3, r6
 802606a:	8b20      	ldrh	r0, [r4, #24]
 802606c:	8b61      	ldrh	r1, [r4, #26]
 802606e:	bf54      	ite	pl
 8026070:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 8026074:	46c1      	movmi	r9, r8
 8026076:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026078:	bf58      	it	pl
 802607a:	1b5b      	subpl	r3, r3, r5
 802607c:	4448      	add	r0, r9
 802607e:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8026082:	4417      	add	r7, r2
 8026084:	44ce      	add	lr, r9
 8026086:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026088:	b200      	sxth	r0, r0
 802608a:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 802608e:	b209      	sxth	r1, r1
 8026090:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8026094:	443a      	add	r2, r7
 8026096:	8320      	strh	r0, [r4, #24]
 8026098:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 802609c:	8361      	strh	r1, [r4, #26]
 802609e:	4552      	cmp	r2, sl
 80260a0:	d017      	beq.n	80260d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x972>
 80260a2:	ea50 0201 	orrs.w	r2, r0, r1
 80260a6:	d00d      	beq.n	80260c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 80260a8:	f1b9 0f00 	cmp.w	r9, #0
 80260ac:	db0a      	blt.n	80260c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 80260ae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80260b0:	4549      	cmp	r1, r9
 80260b2:	dd07      	ble.n	80260c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 80260b4:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80260b8:	4288      	cmp	r0, r1
 80260ba:	d336      	bcc.n	802612a <_ZN8touchgfx7Outline10renderLineEiiii+0x9ca>
 80260bc:	f04f 0201 	mov.w	r2, #1
 80260c0:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80260c4:	9a00      	ldr	r2, [sp, #0]
 80260c6:	82a7      	strh	r7, [r4, #20]
 80260c8:	82e2      	strh	r2, [r4, #22]
 80260ca:	f8a4 c018 	strh.w	ip, [r4, #24]
 80260ce:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80260d2:	9a04      	ldr	r2, [sp, #16]
 80260d4:	42ba      	cmp	r2, r7
 80260d6:	d1c7      	bne.n	8026068 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 80260d8:	9b02      	ldr	r3, [sp, #8]
 80260da:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80260dc:	eba3 0e0e 	sub.w	lr, r3, lr
 80260e0:	8b23      	ldrh	r3, [r4, #24]
 80260e2:	3120      	adds	r1, #32
 80260e4:	4473      	add	r3, lr
 80260e6:	8323      	strh	r3, [r4, #24]
 80260e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80260ea:	1ac9      	subs	r1, r1, r3
 80260ec:	8b63      	ldrh	r3, [r4, #26]
 80260ee:	fb0e 3e01 	mla	lr, lr, r1, r3
 80260f2:	f8a4 e01a 	strh.w	lr, [r4, #26]
 80260f6:	e611      	b.n	8025d1c <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 80260f8:	f04f 36ff 	mov.w	r6, #4294967295
 80260fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80260fe:	426d      	negs	r5, r5
 8026100:	960e      	str	r6, [sp, #56]	; 0x38
 8026102:	2600      	movs	r6, #0
 8026104:	434b      	muls	r3, r1
 8026106:	e763      	b.n	8025fd0 <_ZN8touchgfx7Outline10renderLineEiiii+0x870>
 8026108:	f104 0e14 	add.w	lr, r4, #20
 802610c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8026110:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8026114:	f8c8 0000 	str.w	r0, [r8]
 8026118:	f8c8 1004 	str.w	r1, [r8, #4]
 802611c:	6921      	ldr	r1, [r4, #16]
 802611e:	3108      	adds	r1, #8
 8026120:	6121      	str	r1, [r4, #16]
 8026122:	68a1      	ldr	r1, [r4, #8]
 8026124:	3101      	adds	r1, #1
 8026126:	60a1      	str	r1, [r4, #8]
 8026128:	e77f      	b.n	802602a <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 802612a:	f104 0914 	add.w	r9, r4, #20
 802612e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8026132:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8026136:	f8ca 0000 	str.w	r0, [sl]
 802613a:	f8ca 1004 	str.w	r1, [sl, #4]
 802613e:	6921      	ldr	r1, [r4, #16]
 8026140:	3108      	adds	r1, #8
 8026142:	6121      	str	r1, [r4, #16]
 8026144:	68a1      	ldr	r1, [r4, #8]
 8026146:	3101      	adds	r1, #1
 8026148:	60a1      	str	r1, [r4, #8]
 802614a:	e7bb      	b.n	80260c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 802614c:	f104 0314 	add.w	r3, r4, #20
 8026150:	6925      	ldr	r5, [r4, #16]
 8026152:	cb03      	ldmia	r3!, {r0, r1}
 8026154:	6028      	str	r0, [r5, #0]
 8026156:	6069      	str	r1, [r5, #4]
 8026158:	6923      	ldr	r3, [r4, #16]
 802615a:	3308      	adds	r3, #8
 802615c:	6123      	str	r3, [r4, #16]
 802615e:	68a3      	ldr	r3, [r4, #8]
 8026160:	3301      	adds	r3, #1
 8026162:	60a3      	str	r3, [r4, #8]
 8026164:	e5fd      	b.n	8025d62 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8026166:	f104 0314 	add.w	r3, r4, #20
 802616a:	6925      	ldr	r5, [r4, #16]
 802616c:	cb03      	ldmia	r3!, {r0, r1}
 802616e:	6028      	str	r0, [r5, #0]
 8026170:	6069      	str	r1, [r5, #4]
 8026172:	6923      	ldr	r3, [r4, #16]
 8026174:	3308      	adds	r3, #8
 8026176:	6123      	str	r3, [r4, #16]
 8026178:	68a3      	ldr	r3, [r4, #8]
 802617a:	3301      	adds	r3, #1
 802617c:	60a3      	str	r3, [r4, #8]
 802617e:	e625      	b.n	8025dcc <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8026180:	9b05      	ldr	r3, [sp, #20]
 8026182:	ea4f 176b 	mov.w	r7, fp, asr #5
 8026186:	f00b 081f 	and.w	r8, fp, #31
 802618a:	8b20      	ldrh	r0, [r4, #24]
 802618c:	f003 031f 	and.w	r3, r3, #31
 8026190:	4577      	cmp	r7, lr
 8026192:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8026196:	9302      	str	r3, [sp, #8]
 8026198:	9b03      	ldr	r3, [sp, #12]
 802619a:	eba3 050c 	sub.w	r5, r3, ip
 802619e:	d108      	bne.n	80261b2 <_ZN8touchgfx7Outline10renderLineEiiii+0xa52>
 80261a0:	9b02      	ldr	r3, [sp, #8]
 80261a2:	4428      	add	r0, r5
 80261a4:	4498      	add	r8, r3
 80261a6:	8320      	strh	r0, [r4, #24]
 80261a8:	fb05 9508 	mla	r5, r5, r8, r9
 80261ac:	8365      	strh	r5, [r4, #26]
 80261ae:	f7ff bb4f 	b.w	8025850 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80261b2:	9b05      	ldr	r3, [sp, #20]
 80261b4:	ebb3 030b 	subs.w	r3, r3, fp
 80261b8:	f100 809c 	bmi.w	80262f4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb94>
 80261bc:	f1c8 0120 	rsb	r1, r8, #32
 80261c0:	2201      	movs	r2, #1
 80261c2:	f04f 0b20 	mov.w	fp, #32
 80261c6:	434d      	muls	r5, r1
 80261c8:	9201      	str	r2, [sp, #4]
 80261ca:	9a01      	ldr	r2, [sp, #4]
 80261cc:	44d8      	add	r8, fp
 80261ce:	fb95 f6f3 	sdiv	r6, r5, r3
 80261d2:	fb03 5516 	mls	r5, r3, r6, r5
 80261d6:	4417      	add	r7, r2
 80261d8:	9a00      	ldr	r2, [sp, #0]
 80261da:	2d00      	cmp	r5, #0
 80261dc:	ea4f 4202 	mov.w	r2, r2, lsl #16
 80261e0:	bfbc      	itt	lt
 80261e2:	f106 36ff 	addlt.w	r6, r6, #4294967295
 80261e6:	18ed      	addlt	r5, r5, r3
 80261e8:	eb07 0a02 	add.w	sl, r7, r2
 80261ec:	9204      	str	r2, [sp, #16]
 80261ee:	fb06 9808 	mla	r8, r6, r8, r9
 80261f2:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80261f6:	4430      	add	r0, r6
 80261f8:	fa0f f188 	sxth.w	r1, r8
 80261fc:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8026200:	b200      	sxth	r0, r0
 8026202:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8026206:	8361      	strh	r1, [r4, #26]
 8026208:	8320      	strh	r0, [r4, #24]
 802620a:	45ca      	cmp	sl, r9
 802620c:	d015      	beq.n	802623a <_ZN8touchgfx7Outline10renderLineEiiii+0xada>
 802620e:	ea50 0201 	orrs.w	r2, r0, r1
 8026212:	d00c      	beq.n	802622e <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8026214:	f1b8 0f00 	cmp.w	r8, #0
 8026218:	db09      	blt.n	802622e <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 802621a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802621c:	4541      	cmp	r1, r8
 802621e:	dd06      	ble.n	802622e <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8026220:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8026224:	4288      	cmp	r0, r1
 8026226:	d36e      	bcc.n	8026306 <_ZN8touchgfx7Outline10renderLineEiiii+0xba6>
 8026228:	2101      	movs	r1, #1
 802622a:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802622e:	2100      	movs	r1, #0
 8026230:	9a00      	ldr	r2, [sp, #0]
 8026232:	82a7      	strh	r7, [r4, #20]
 8026234:	82e2      	strh	r2, [r4, #22]
 8026236:	8321      	strh	r1, [r4, #24]
 8026238:	8361      	strh	r1, [r4, #26]
 802623a:	45be      	cmp	lr, r7
 802623c:	44b4      	add	ip, r6
 802623e:	d048      	beq.n	80262d2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb72>
 8026240:	9a03      	ldr	r2, [sp, #12]
 8026242:	1aed      	subs	r5, r5, r3
 8026244:	eba2 010c 	sub.w	r1, r2, ip
 8026248:	440e      	add	r6, r1
 802624a:	0176      	lsls	r6, r6, #5
 802624c:	fb96 f8f3 	sdiv	r8, r6, r3
 8026250:	fb03 6618 	mls	r6, r3, r8, r6
 8026254:	2e00      	cmp	r6, #0
 8026256:	bfbc      	itt	lt
 8026258:	f108 38ff 	addlt.w	r8, r8, #4294967295
 802625c:	18f6      	addlt	r6, r6, r3
 802625e:	f108 0201 	add.w	r2, r8, #1
 8026262:	9205      	str	r2, [sp, #20]
 8026264:	19ad      	adds	r5, r5, r6
 8026266:	8b20      	ldrh	r0, [r4, #24]
 8026268:	8b61      	ldrh	r1, [r4, #26]
 802626a:	bf54      	ite	pl
 802626c:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 8026270:	46c1      	movmi	r9, r8
 8026272:	9a01      	ldr	r2, [sp, #4]
 8026274:	bf58      	it	pl
 8026276:	1aed      	subpl	r5, r5, r3
 8026278:	4448      	add	r0, r9
 802627a:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 802627e:	4417      	add	r7, r2
 8026280:	44cc      	add	ip, r9
 8026282:	9a04      	ldr	r2, [sp, #16]
 8026284:	b200      	sxth	r0, r0
 8026286:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 802628a:	b209      	sxth	r1, r1
 802628c:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8026290:	443a      	add	r2, r7
 8026292:	8320      	strh	r0, [r4, #24]
 8026294:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8026298:	8361      	strh	r1, [r4, #26]
 802629a:	4552      	cmp	r2, sl
 802629c:	d017      	beq.n	80262ce <_ZN8touchgfx7Outline10renderLineEiiii+0xb6e>
 802629e:	ea50 0201 	orrs.w	r2, r0, r1
 80262a2:	d00d      	beq.n	80262c0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 80262a4:	f1b9 0f00 	cmp.w	r9, #0
 80262a8:	db0a      	blt.n	80262c0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 80262aa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80262ac:	4549      	cmp	r1, r9
 80262ae:	dd07      	ble.n	80262c0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 80262b0:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80262b4:	4288      	cmp	r0, r1
 80262b6:	d337      	bcc.n	8026328 <_ZN8touchgfx7Outline10renderLineEiiii+0xbc8>
 80262b8:	f04f 0201 	mov.w	r2, #1
 80262bc:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80262c0:	9a00      	ldr	r2, [sp, #0]
 80262c2:	82a7      	strh	r7, [r4, #20]
 80262c4:	82e2      	strh	r2, [r4, #22]
 80262c6:	f04f 0200 	mov.w	r2, #0
 80262ca:	8322      	strh	r2, [r4, #24]
 80262cc:	8362      	strh	r2, [r4, #26]
 80262ce:	45be      	cmp	lr, r7
 80262d0:	d1c8      	bne.n	8026264 <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 80262d2:	9b03      	ldr	r3, [sp, #12]
 80262d4:	8b62      	ldrh	r2, [r4, #26]
 80262d6:	eba3 0c0c 	sub.w	ip, r3, ip
 80262da:	8b23      	ldrh	r3, [r4, #24]
 80262dc:	4463      	add	r3, ip
 80262de:	8323      	strh	r3, [r4, #24]
 80262e0:	9b02      	ldr	r3, [sp, #8]
 80262e2:	3320      	adds	r3, #32
 80262e4:	eba3 030b 	sub.w	r3, r3, fp
 80262e8:	fb0c 2c03 	mla	ip, ip, r3, r2
 80262ec:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80262f0:	f7ff baae 	b.w	8025850 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80262f4:	f04f 32ff 	mov.w	r2, #4294967295
 80262f8:	fb05 f508 	mul.w	r5, r5, r8
 80262fc:	425b      	negs	r3, r3
 80262fe:	f04f 0b00 	mov.w	fp, #0
 8026302:	9201      	str	r2, [sp, #4]
 8026304:	e761      	b.n	80261ca <_ZN8touchgfx7Outline10renderLineEiiii+0xa6a>
 8026306:	f104 0814 	add.w	r8, r4, #20
 802630a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802630e:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8026312:	f8c9 0000 	str.w	r0, [r9]
 8026316:	f8c9 1004 	str.w	r1, [r9, #4]
 802631a:	6921      	ldr	r1, [r4, #16]
 802631c:	3108      	adds	r1, #8
 802631e:	6121      	str	r1, [r4, #16]
 8026320:	68a1      	ldr	r1, [r4, #8]
 8026322:	3101      	adds	r1, #1
 8026324:	60a1      	str	r1, [r4, #8]
 8026326:	e782      	b.n	802622e <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8026328:	f104 0914 	add.w	r9, r4, #20
 802632c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8026330:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8026334:	f8ca 0000 	str.w	r0, [sl]
 8026338:	f8ca 1004 	str.w	r1, [sl, #4]
 802633c:	6921      	ldr	r1, [r4, #16]
 802633e:	3108      	adds	r1, #8
 8026340:	6121      	str	r1, [r4, #16]
 8026342:	68a1      	ldr	r1, [r4, #8]
 8026344:	3101      	adds	r1, #1
 8026346:	60a1      	str	r1, [r4, #8]
 8026348:	e7ba      	b.n	80262c0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>

0802634a <_ZN8touchgfx7Outline6lineToEii>:
 802634a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802634c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802634e:	4604      	mov	r4, r0
 8026350:	460d      	mov	r5, r1
 8026352:	4616      	mov	r6, r2
 8026354:	079b      	lsls	r3, r3, #30
 8026356:	d526      	bpl.n	80263a6 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8026358:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 802635c:	ea85 0001 	eor.w	r0, r5, r1
 8026360:	ea86 0302 	eor.w	r3, r6, r2
 8026364:	4303      	orrs	r3, r0
 8026366:	d01e      	beq.n	80263a6 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8026368:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802636a:	114b      	asrs	r3, r1, #5
 802636c:	9600      	str	r6, [sp, #0]
 802636e:	4283      	cmp	r3, r0
 8026370:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8026372:	bfb8      	it	lt
 8026374:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8026376:	3301      	adds	r3, #1
 8026378:	4283      	cmp	r3, r0
 802637a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802637c:	bfc8      	it	gt
 802637e:	6363      	strgt	r3, [r4, #52]	; 0x34
 8026380:	116b      	asrs	r3, r5, #5
 8026382:	4283      	cmp	r3, r0
 8026384:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8026386:	bfb8      	it	lt
 8026388:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802638a:	3301      	adds	r3, #1
 802638c:	4283      	cmp	r3, r0
 802638e:	4620      	mov	r0, r4
 8026390:	bfc8      	it	gt
 8026392:	6363      	strgt	r3, [r4, #52]	; 0x34
 8026394:	462b      	mov	r3, r5
 8026396:	f7ff f9e3 	bl	8025760 <_ZN8touchgfx7Outline10renderLineEiiii>
 802639a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802639c:	f043 0301 	orr.w	r3, r3, #1
 80263a0:	e9c4 5607 	strd	r5, r6, [r4, #28]
 80263a4:	63e3      	str	r3, [r4, #60]	; 0x3c
 80263a6:	b002      	add	sp, #8
 80263a8:	bd70      	pop	{r4, r5, r6, pc}

080263aa <_ZN8touchgfx7Outline6moveToEii>:
 80263aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80263ac:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80263ae:	4615      	mov	r5, r2
 80263b0:	4604      	mov	r4, r0
 80263b2:	460e      	mov	r6, r1
 80263b4:	079a      	lsls	r2, r3, #30
 80263b6:	d401      	bmi.n	80263bc <_ZN8touchgfx7Outline6moveToEii+0x12>
 80263b8:	f7ff f98c 	bl	80256d4 <_ZN8touchgfx7Outline5resetEv>
 80263bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80263be:	07db      	lsls	r3, r3, #31
 80263c0:	d504      	bpl.n	80263cc <_ZN8touchgfx7Outline6moveToEii+0x22>
 80263c2:	4620      	mov	r0, r4
 80263c4:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 80263c8:	f7ff ffbf 	bl	802634a <_ZN8touchgfx7Outline6lineToEii>
 80263cc:	ea4f 1c66 	mov.w	ip, r6, asr #5
 80263d0:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80263d4:	116f      	asrs	r7, r5, #5
 80263d6:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80263da:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 80263de:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 80263e2:	4291      	cmp	r1, r2
 80263e4:	d015      	beq.n	8026412 <_ZN8touchgfx7Outline6moveToEii+0x68>
 80263e6:	8b61      	ldrh	r1, [r4, #26]
 80263e8:	8b22      	ldrh	r2, [r4, #24]
 80263ea:	430a      	orrs	r2, r1
 80263ec:	d00b      	beq.n	8026406 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80263ee:	2b00      	cmp	r3, #0
 80263f0:	db09      	blt.n	8026406 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80263f2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80263f4:	429a      	cmp	r2, r3
 80263f6:	dd06      	ble.n	8026406 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80263f8:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80263fc:	429a      	cmp	r2, r3
 80263fe:	d30d      	bcc.n	802641c <_ZN8touchgfx7Outline6moveToEii+0x72>
 8026400:	2301      	movs	r3, #1
 8026402:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8026406:	2300      	movs	r3, #0
 8026408:	f8a4 c014 	strh.w	ip, [r4, #20]
 802640c:	82e7      	strh	r7, [r4, #22]
 802640e:	8323      	strh	r3, [r4, #24]
 8026410:	8363      	strh	r3, [r4, #26]
 8026412:	61e6      	str	r6, [r4, #28]
 8026414:	62a5      	str	r5, [r4, #40]	; 0x28
 8026416:	e9c4 5608 	strd	r5, r6, [r4, #32]
 802641a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802641c:	f104 0314 	add.w	r3, r4, #20
 8026420:	6922      	ldr	r2, [r4, #16]
 8026422:	cb03      	ldmia	r3!, {r0, r1}
 8026424:	6010      	str	r0, [r2, #0]
 8026426:	6051      	str	r1, [r2, #4]
 8026428:	6923      	ldr	r3, [r4, #16]
 802642a:	3308      	adds	r3, #8
 802642c:	6123      	str	r3, [r4, #16]
 802642e:	68a3      	ldr	r3, [r4, #8]
 8026430:	3301      	adds	r3, #1
 8026432:	60a3      	str	r3, [r4, #8]
 8026434:	e7e7      	b.n	8026406 <_ZN8touchgfx7Outline6moveToEii+0x5c>

08026436 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8026436:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802643a:	b0d1      	sub	sp, #324	; 0x144
 802643c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8026440:	466c      	mov	r4, sp
 8026442:	1a0d      	subs	r5, r1, r0
 8026444:	f100 0208 	add.w	r2, r0, #8
 8026448:	2d48      	cmp	r5, #72	; 0x48
 802644a:	f340 80ba 	ble.w	80265c2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 802644e:	112d      	asrs	r5, r5, #4
 8026450:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 8026454:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 8026458:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 802645c:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8026460:	f9b0 8000 	ldrsh.w	r8, [r0]
 8026464:	681e      	ldr	r6, [r3, #0]
 8026466:	6006      	str	r6, [r0, #0]
 8026468:	685e      	ldr	r6, [r3, #4]
 802646a:	6046      	str	r6, [r0, #4]
 802646c:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 8026470:	f8a3 c004 	strh.w	ip, [r3, #4]
 8026474:	f8a3 e002 	strh.w	lr, [r3, #2]
 8026478:	80df      	strh	r7, [r3, #6]
 802647a:	f1a1 0308 	sub.w	r3, r1, #8
 802647e:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8026482:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 8026486:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 802648a:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802648e:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8026492:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8026496:	45ac      	cmp	ip, r5
 8026498:	dd0f      	ble.n	80264ba <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 802649a:	681d      	ldr	r5, [r3, #0]
 802649c:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 80264a0:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 80264a4:	6015      	str	r5, [r2, #0]
 80264a6:	685d      	ldr	r5, [r3, #4]
 80264a8:	6055      	str	r5, [r2, #4]
 80264aa:	f821 7c08 	strh.w	r7, [r1, #-8]
 80264ae:	f821 6c06 	strh.w	r6, [r1, #-6]
 80264b2:	f821 ec04 	strh.w	lr, [r1, #-4]
 80264b6:	f821 cc02 	strh.w	ip, [r1, #-2]
 80264ba:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 80264be:	f9b0 7000 	ldrsh.w	r7, [r0]
 80264c2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80264c6:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80264ca:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 80264ce:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 80264d2:	4565      	cmp	r5, ip
 80264d4:	dd0d      	ble.n	80264f2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 80264d6:	6815      	ldr	r5, [r2, #0]
 80264d8:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80264dc:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80264e0:	6005      	str	r5, [r0, #0]
 80264e2:	6855      	ldr	r5, [r2, #4]
 80264e4:	8107      	strh	r7, [r0, #8]
 80264e6:	6045      	str	r5, [r0, #4]
 80264e8:	8146      	strh	r6, [r0, #10]
 80264ea:	f8a0 e00c 	strh.w	lr, [r0, #12]
 80264ee:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80264f2:	f9b0 7000 	ldrsh.w	r7, [r0]
 80264f6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80264fa:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 80264fe:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8026502:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8026506:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802650a:	45ac      	cmp	ip, r5
 802650c:	dd0f      	ble.n	802652e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802650e:	681d      	ldr	r5, [r3, #0]
 8026510:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8026514:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8026518:	6005      	str	r5, [r0, #0]
 802651a:	685d      	ldr	r5, [r3, #4]
 802651c:	6045      	str	r5, [r0, #4]
 802651e:	f821 7c08 	strh.w	r7, [r1, #-8]
 8026522:	f821 6c06 	strh.w	r6, [r1, #-6]
 8026526:	f821 ec04 	strh.w	lr, [r1, #-4]
 802652a:	f821 cc02 	strh.w	ip, [r1, #-2]
 802652e:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 8026532:	f102 0508 	add.w	r5, r2, #8
 8026536:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 802653a:	f9b0 e000 	ldrsh.w	lr, [r0]
 802653e:	462f      	mov	r7, r5
 8026540:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8026544:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 8026548:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 802654c:	45b2      	cmp	sl, r6
 802654e:	dc18      	bgt.n	8026582 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 8026550:	3b08      	subs	r3, #8
 8026552:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 8026556:	f9b3 6000 	ldrsh.w	r6, [r3]
 802655a:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 802655e:	45b2      	cmp	sl, r6
 8026560:	dbf6      	blt.n	8026550 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 8026562:	42ab      	cmp	r3, r5
 8026564:	681e      	ldr	r6, [r3, #0]
 8026566:	d30e      	bcc.n	8026586 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 8026568:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 802656c:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8026570:	602e      	str	r6, [r5, #0]
 8026572:	685e      	ldr	r6, [r3, #4]
 8026574:	606e      	str	r6, [r5, #4]
 8026576:	f8a3 9000 	strh.w	r9, [r3]
 802657a:	f8a3 8002 	strh.w	r8, [r3, #2]
 802657e:	809f      	strh	r7, [r3, #4]
 8026580:	80da      	strh	r2, [r3, #6]
 8026582:	462a      	mov	r2, r5
 8026584:	e7d3      	b.n	802652e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8026586:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 802658a:	6006      	str	r6, [r0, #0]
 802658c:	685e      	ldr	r6, [r3, #4]
 802658e:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8026592:	6046      	str	r6, [r0, #4]
 8026594:	1a1e      	subs	r6, r3, r0
 8026596:	80da      	strh	r2, [r3, #6]
 8026598:	1b4a      	subs	r2, r1, r5
 802659a:	f8a3 e000 	strh.w	lr, [r3]
 802659e:	10d2      	asrs	r2, r2, #3
 80265a0:	f8a3 c002 	strh.w	ip, [r3, #2]
 80265a4:	f8a3 8004 	strh.w	r8, [r3, #4]
 80265a8:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 80265ac:	bfb5      	itete	lt
 80265ae:	e9c4 0300 	strdlt	r0, r3, [r4]
 80265b2:	4607      	movge	r7, r0
 80265b4:	460b      	movlt	r3, r1
 80265b6:	e9c4 5100 	strdge	r5, r1, [r4]
 80265ba:	4638      	mov	r0, r7
 80265bc:	3408      	adds	r4, #8
 80265be:	4619      	mov	r1, r3
 80265c0:	e73f      	b.n	8026442 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 80265c2:	4291      	cmp	r1, r2
 80265c4:	d925      	bls.n	8026612 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 80265c6:	f1a2 0310 	sub.w	r3, r2, #16
 80265ca:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 80265ce:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 80265d2:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 80265d6:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 80265da:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 80265de:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 80265e2:	42b5      	cmp	r5, r6
 80265e4:	dd13      	ble.n	802660e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 80265e6:	461d      	mov	r5, r3
 80265e8:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 80265ec:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 80265f0:	3b08      	subs	r3, #8
 80265f2:	f855 6f08 	ldr.w	r6, [r5, #8]!
 80265f6:	619e      	str	r6, [r3, #24]
 80265f8:	42a8      	cmp	r0, r5
 80265fa:	686e      	ldr	r6, [r5, #4]
 80265fc:	f8a3 c010 	strh.w	ip, [r3, #16]
 8026600:	61de      	str	r6, [r3, #28]
 8026602:	825f      	strh	r7, [r3, #18]
 8026604:	f8a3 8014 	strh.w	r8, [r3, #20]
 8026608:	f8a3 e016 	strh.w	lr, [r3, #22]
 802660c:	d1dd      	bne.n	80265ca <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 802660e:	3208      	adds	r2, #8
 8026610:	e7d7      	b.n	80265c2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8026612:	466b      	mov	r3, sp
 8026614:	429c      	cmp	r4, r3
 8026616:	d903      	bls.n	8026620 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 8026618:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 802661c:	3c08      	subs	r4, #8
 802661e:	e710      	b.n	8026442 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8026620:	b051      	add	sp, #324	; 0x144
 8026622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026626 <_ZN8touchgfx7Outline9sortCellsEv>:
 8026626:	6881      	ldr	r1, [r0, #8]
 8026628:	b111      	cbz	r1, 8026630 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 802662a:	68c0      	ldr	r0, [r0, #12]
 802662c:	f7ff bf03 	b.w	8026436 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8026630:	4770      	bx	lr

08026632 <_ZN8touchgfx7Outline8getCellsEv>:
 8026632:	b510      	push	{r4, lr}
 8026634:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8026636:	4604      	mov	r4, r0
 8026638:	07da      	lsls	r2, r3, #31
 802663a:	d507      	bpl.n	802664c <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 802663c:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 8026640:	f7ff fe83 	bl	802634a <_ZN8touchgfx7Outline6lineToEii>
 8026644:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8026646:	f023 0301 	bic.w	r3, r3, #1
 802664a:	63e3      	str	r3, [r4, #60]	; 0x3c
 802664c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802664e:	079b      	lsls	r3, r3, #30
 8026650:	d51a      	bpl.n	8026688 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 8026652:	8b62      	ldrh	r2, [r4, #26]
 8026654:	8b23      	ldrh	r3, [r4, #24]
 8026656:	4313      	orrs	r3, r2
 8026658:	d00d      	beq.n	8026676 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802665a:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802665e:	2b00      	cmp	r3, #0
 8026660:	db09      	blt.n	8026676 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8026662:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8026664:	4293      	cmp	r3, r2
 8026666:	da06      	bge.n	8026676 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8026668:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 802666c:	429a      	cmp	r2, r3
 802666e:	d80d      	bhi.n	802668c <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 8026670:	2301      	movs	r3, #1
 8026672:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8026676:	68a0      	ldr	r0, [r4, #8]
 8026678:	b138      	cbz	r0, 802668a <_ZN8touchgfx7Outline8getCellsEv+0x58>
 802667a:	4620      	mov	r0, r4
 802667c:	f7ff ffd3 	bl	8026626 <_ZN8touchgfx7Outline9sortCellsEv>
 8026680:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8026682:	f023 0302 	bic.w	r3, r3, #2
 8026686:	63e3      	str	r3, [r4, #60]	; 0x3c
 8026688:	68e0      	ldr	r0, [r4, #12]
 802668a:	bd10      	pop	{r4, pc}
 802668c:	f104 0314 	add.w	r3, r4, #20
 8026690:	6922      	ldr	r2, [r4, #16]
 8026692:	cb03      	ldmia	r3!, {r0, r1}
 8026694:	6010      	str	r0, [r2, #0]
 8026696:	6051      	str	r1, [r2, #4]
 8026698:	6923      	ldr	r3, [r4, #16]
 802669a:	3308      	adds	r3, #8
 802669c:	6123      	str	r3, [r4, #16]
 802669e:	68a3      	ldr	r3, [r4, #8]
 80266a0:	3301      	adds	r3, #1
 80266a2:	60a3      	str	r3, [r4, #8]
 80266a4:	e7e7      	b.n	8026676 <_ZN8touchgfx7Outline8getCellsEv+0x44>

080266a6 <_ZN8touchgfx8ScanlineD1Ev>:
 80266a6:	4770      	bx	lr

080266a8 <_ZN8touchgfx8ScanlineD0Ev>:
 80266a8:	b510      	push	{r4, lr}
 80266aa:	4604      	mov	r4, r0
 80266ac:	2124      	movs	r1, #36	; 0x24
 80266ae:	f000 f877 	bl	80267a0 <_ZdlPvj>
 80266b2:	4620      	mov	r0, r4
 80266b4:	bd10      	pop	{r4, pc}

080266b6 <_ZN8touchgfx8Scanline5resetEv>:
 80266b6:	b510      	push	{r4, lr}
 80266b8:	4604      	mov	r4, r0
 80266ba:	f7f3 f8f9 	bl	80198b0 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 80266be:	61a0      	str	r0, [r4, #24]
 80266c0:	f7f3 f8fc 	bl	80198bc <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 80266c4:	61e0      	str	r0, [r4, #28]
 80266c6:	f7f3 f8ff 	bl	80198c8 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 80266ca:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80266ce:	6220      	str	r0, [r4, #32]
 80266d0:	6160      	str	r0, [r4, #20]
 80266d2:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80266d6:	69e3      	ldr	r3, [r4, #28]
 80266d8:	6123      	str	r3, [r4, #16]
 80266da:	2300      	movs	r3, #0
 80266dc:	60e3      	str	r3, [r4, #12]
 80266de:	bd10      	pop	{r4, pc}

080266e0 <_ZN8touchgfx8ScanlineC1Ev>:
 80266e0:	4b07      	ldr	r3, [pc, #28]	; (8026700 <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 80266e2:	b510      	push	{r4, lr}
 80266e4:	6003      	str	r3, [r0, #0]
 80266e6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80266ea:	4604      	mov	r4, r0
 80266ec:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80266f0:	2300      	movs	r3, #0
 80266f2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80266f6:	6143      	str	r3, [r0, #20]
 80266f8:	f7ff ffdd 	bl	80266b6 <_ZN8touchgfx8Scanline5resetEv>
 80266fc:	4620      	mov	r0, r4
 80266fe:	bd10      	pop	{r4, pc}
 8026700:	0802bb54 	.word	0x0802bb54

08026704 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 8026704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026708:	1e0c      	subs	r4, r1, #0
 802670a:	4605      	mov	r5, r0
 802670c:	4617      	mov	r7, r2
 802670e:	461e      	mov	r6, r3
 8026710:	da03      	bge.n	802671a <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 8026712:	4426      	add	r6, r4
 8026714:	2e01      	cmp	r6, #1
 8026716:	d421      	bmi.n	802675c <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8026718:	2400      	movs	r4, #0
 802671a:	f7f3 f8c3 	bl	80198a4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802671e:	42a0      	cmp	r0, r4
 8026720:	d91c      	bls.n	802675c <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8026722:	eb04 0806 	add.w	r8, r4, r6
 8026726:	f7f3 f8bd 	bl	80198a4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802672a:	4580      	cmp	r8, r0
 802672c:	d902      	bls.n	8026734 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 802672e:	f7f3 f8b9 	bl	80198a4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8026732:	1b06      	subs	r6, r0, r4
 8026734:	69a8      	ldr	r0, [r5, #24]
 8026736:	4632      	mov	r2, r6
 8026738:	f89d 1018 	ldrb.w	r1, [sp, #24]
 802673c:	4420      	add	r0, r4
 802673e:	f7f4 fdb0 	bl	801b2a2 <_ZN8touchgfx6memsetEPvhm>
 8026742:	686b      	ldr	r3, [r5, #4]
 8026744:	b2b2      	uxth	r2, r6
 8026746:	3301      	adds	r3, #1
 8026748:	42a3      	cmp	r3, r4
 802674a:	696b      	ldr	r3, [r5, #20]
 802674c:	d108      	bne.n	8026760 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 802674e:	8819      	ldrh	r1, [r3, #0]
 8026750:	440a      	add	r2, r1
 8026752:	801a      	strh	r2, [r3, #0]
 8026754:	3c01      	subs	r4, #1
 8026756:	4434      	add	r4, r6
 8026758:	e9c5 4701 	strd	r4, r7, [r5, #4]
 802675c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026760:	1c99      	adds	r1, r3, #2
 8026762:	6169      	str	r1, [r5, #20]
 8026764:	805a      	strh	r2, [r3, #2]
 8026766:	692b      	ldr	r3, [r5, #16]
 8026768:	1c9a      	adds	r2, r3, #2
 802676a:	612a      	str	r2, [r5, #16]
 802676c:	805c      	strh	r4, [r3, #2]
 802676e:	68eb      	ldr	r3, [r5, #12]
 8026770:	3301      	adds	r3, #1
 8026772:	60eb      	str	r3, [r5, #12]
 8026774:	e7ee      	b.n	8026754 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

08026776 <_ZN8touchgfx15RenderingBufferC1Ev>:
 8026776:	2200      	movs	r2, #0
 8026778:	6002      	str	r2, [r0, #0]
 802677a:	7102      	strb	r2, [r0, #4]
 802677c:	6102      	str	r2, [r0, #16]
 802677e:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8026782:	4770      	bx	lr

08026784 <_ZN8touchgfx15RenderingBufferD1Ev>:
 8026784:	4770      	bx	lr

08026786 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 8026786:	6083      	str	r3, [r0, #8]
 8026788:	9b00      	ldr	r3, [sp, #0]
 802678a:	6001      	str	r1, [r0, #0]
 802678c:	60c3      	str	r3, [r0, #12]
 802678e:	9b01      	ldr	r3, [sp, #4]
 8026790:	7102      	strb	r2, [r0, #4]
 8026792:	6103      	str	r3, [r0, #16]
 8026794:	4770      	bx	lr

08026796 <__aeabi_atexit>:
 8026796:	460b      	mov	r3, r1
 8026798:	4601      	mov	r1, r0
 802679a:	4618      	mov	r0, r3
 802679c:	f000 b90e 	b.w	80269bc <__cxa_atexit>

080267a0 <_ZdlPvj>:
 80267a0:	f000 b812 	b.w	80267c8 <_ZdlPv>

080267a4 <__cxa_guard_acquire>:
 80267a4:	6803      	ldr	r3, [r0, #0]
 80267a6:	07db      	lsls	r3, r3, #31
 80267a8:	d406      	bmi.n	80267b8 <__cxa_guard_acquire+0x14>
 80267aa:	7843      	ldrb	r3, [r0, #1]
 80267ac:	b103      	cbz	r3, 80267b0 <__cxa_guard_acquire+0xc>
 80267ae:	deff      	udf	#255	; 0xff
 80267b0:	2301      	movs	r3, #1
 80267b2:	7043      	strb	r3, [r0, #1]
 80267b4:	4618      	mov	r0, r3
 80267b6:	4770      	bx	lr
 80267b8:	2000      	movs	r0, #0
 80267ba:	4770      	bx	lr

080267bc <__cxa_guard_release>:
 80267bc:	2301      	movs	r3, #1
 80267be:	6003      	str	r3, [r0, #0]
 80267c0:	4770      	bx	lr

080267c2 <__cxa_pure_virtual>:
 80267c2:	b508      	push	{r3, lr}
 80267c4:	f000 f80e 	bl	80267e4 <_ZSt9terminatev>

080267c8 <_ZdlPv>:
 80267c8:	f000 b844 	b.w	8026854 <free>

080267cc <_ZN10__cxxabiv111__terminateEPFvvE>:
 80267cc:	b508      	push	{r3, lr}
 80267ce:	4780      	blx	r0
 80267d0:	f000 f80d 	bl	80267ee <abort>

080267d4 <_ZSt13get_terminatev>:
 80267d4:	4b02      	ldr	r3, [pc, #8]	; (80267e0 <_ZSt13get_terminatev+0xc>)
 80267d6:	6818      	ldr	r0, [r3, #0]
 80267d8:	f3bf 8f5b 	dmb	ish
 80267dc:	4770      	bx	lr
 80267de:	bf00      	nop
 80267e0:	200000a4 	.word	0x200000a4

080267e4 <_ZSt9terminatev>:
 80267e4:	b508      	push	{r3, lr}
 80267e6:	f7ff fff5 	bl	80267d4 <_ZSt13get_terminatev>
 80267ea:	f7ff ffef 	bl	80267cc <_ZN10__cxxabiv111__terminateEPFvvE>

080267ee <abort>:
 80267ee:	b508      	push	{r3, lr}
 80267f0:	2006      	movs	r0, #6
 80267f2:	f000 fa27 	bl	8026c44 <raise>
 80267f6:	2001      	movs	r0, #1
 80267f8:	f7dd fa26 	bl	8003c48 <_exit>

080267fc <__assert_func>:
 80267fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80267fe:	4614      	mov	r4, r2
 8026800:	461a      	mov	r2, r3
 8026802:	4b09      	ldr	r3, [pc, #36]	; (8026828 <__assert_func+0x2c>)
 8026804:	681b      	ldr	r3, [r3, #0]
 8026806:	4605      	mov	r5, r0
 8026808:	68d8      	ldr	r0, [r3, #12]
 802680a:	b14c      	cbz	r4, 8026820 <__assert_func+0x24>
 802680c:	4b07      	ldr	r3, [pc, #28]	; (802682c <__assert_func+0x30>)
 802680e:	9100      	str	r1, [sp, #0]
 8026810:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8026814:	4906      	ldr	r1, [pc, #24]	; (8026830 <__assert_func+0x34>)
 8026816:	462b      	mov	r3, r5
 8026818:	f000 f970 	bl	8026afc <fiprintf>
 802681c:	f7ff ffe7 	bl	80267ee <abort>
 8026820:	4b04      	ldr	r3, [pc, #16]	; (8026834 <__assert_func+0x38>)
 8026822:	461c      	mov	r4, r3
 8026824:	e7f3      	b.n	802680e <__assert_func+0x12>
 8026826:	bf00      	nop
 8026828:	20000100 	.word	0x20000100
 802682c:	0802bb5c 	.word	0x0802bb5c
 8026830:	0802bb69 	.word	0x0802bb69
 8026834:	0802bb97 	.word	0x0802bb97

08026838 <atexit>:
 8026838:	2300      	movs	r3, #0
 802683a:	4601      	mov	r1, r0
 802683c:	461a      	mov	r2, r3
 802683e:	4618      	mov	r0, r3
 8026840:	f000 baac 	b.w	8026d9c <__register_exitproc>

08026844 <malloc>:
 8026844:	4b02      	ldr	r3, [pc, #8]	; (8026850 <malloc+0xc>)
 8026846:	4601      	mov	r1, r0
 8026848:	6818      	ldr	r0, [r3, #0]
 802684a:	f000 b82b 	b.w	80268a4 <_malloc_r>
 802684e:	bf00      	nop
 8026850:	20000100 	.word	0x20000100

08026854 <free>:
 8026854:	4b02      	ldr	r3, [pc, #8]	; (8026860 <free+0xc>)
 8026856:	4601      	mov	r1, r0
 8026858:	6818      	ldr	r0, [r3, #0]
 802685a:	f000 bafd 	b.w	8026e58 <_free_r>
 802685e:	bf00      	nop
 8026860:	20000100 	.word	0x20000100

08026864 <sbrk_aligned>:
 8026864:	b570      	push	{r4, r5, r6, lr}
 8026866:	4e0e      	ldr	r6, [pc, #56]	; (80268a0 <sbrk_aligned+0x3c>)
 8026868:	460c      	mov	r4, r1
 802686a:	6831      	ldr	r1, [r6, #0]
 802686c:	4605      	mov	r5, r0
 802686e:	b911      	cbnz	r1, 8026876 <sbrk_aligned+0x12>
 8026870:	f000 fa38 	bl	8026ce4 <_sbrk_r>
 8026874:	6030      	str	r0, [r6, #0]
 8026876:	4621      	mov	r1, r4
 8026878:	4628      	mov	r0, r5
 802687a:	f000 fa33 	bl	8026ce4 <_sbrk_r>
 802687e:	1c43      	adds	r3, r0, #1
 8026880:	d00a      	beq.n	8026898 <sbrk_aligned+0x34>
 8026882:	1cc4      	adds	r4, r0, #3
 8026884:	f024 0403 	bic.w	r4, r4, #3
 8026888:	42a0      	cmp	r0, r4
 802688a:	d007      	beq.n	802689c <sbrk_aligned+0x38>
 802688c:	1a21      	subs	r1, r4, r0
 802688e:	4628      	mov	r0, r5
 8026890:	f000 fa28 	bl	8026ce4 <_sbrk_r>
 8026894:	3001      	adds	r0, #1
 8026896:	d101      	bne.n	802689c <sbrk_aligned+0x38>
 8026898:	f04f 34ff 	mov.w	r4, #4294967295
 802689c:	4620      	mov	r0, r4
 802689e:	bd70      	pop	{r4, r5, r6, pc}
 80268a0:	2000c7ac 	.word	0x2000c7ac

080268a4 <_malloc_r>:
 80268a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80268a8:	1ccd      	adds	r5, r1, #3
 80268aa:	f025 0503 	bic.w	r5, r5, #3
 80268ae:	3508      	adds	r5, #8
 80268b0:	2d0c      	cmp	r5, #12
 80268b2:	bf38      	it	cc
 80268b4:	250c      	movcc	r5, #12
 80268b6:	2d00      	cmp	r5, #0
 80268b8:	4607      	mov	r7, r0
 80268ba:	db01      	blt.n	80268c0 <_malloc_r+0x1c>
 80268bc:	42a9      	cmp	r1, r5
 80268be:	d905      	bls.n	80268cc <_malloc_r+0x28>
 80268c0:	230c      	movs	r3, #12
 80268c2:	603b      	str	r3, [r7, #0]
 80268c4:	2600      	movs	r6, #0
 80268c6:	4630      	mov	r0, r6
 80268c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80268cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80269a0 <_malloc_r+0xfc>
 80268d0:	f000 f868 	bl	80269a4 <__malloc_lock>
 80268d4:	f8d8 3000 	ldr.w	r3, [r8]
 80268d8:	461c      	mov	r4, r3
 80268da:	bb5c      	cbnz	r4, 8026934 <_malloc_r+0x90>
 80268dc:	4629      	mov	r1, r5
 80268de:	4638      	mov	r0, r7
 80268e0:	f7ff ffc0 	bl	8026864 <sbrk_aligned>
 80268e4:	1c43      	adds	r3, r0, #1
 80268e6:	4604      	mov	r4, r0
 80268e8:	d155      	bne.n	8026996 <_malloc_r+0xf2>
 80268ea:	f8d8 4000 	ldr.w	r4, [r8]
 80268ee:	4626      	mov	r6, r4
 80268f0:	2e00      	cmp	r6, #0
 80268f2:	d145      	bne.n	8026980 <_malloc_r+0xdc>
 80268f4:	2c00      	cmp	r4, #0
 80268f6:	d048      	beq.n	802698a <_malloc_r+0xe6>
 80268f8:	6823      	ldr	r3, [r4, #0]
 80268fa:	4631      	mov	r1, r6
 80268fc:	4638      	mov	r0, r7
 80268fe:	eb04 0903 	add.w	r9, r4, r3
 8026902:	f000 f9ef 	bl	8026ce4 <_sbrk_r>
 8026906:	4581      	cmp	r9, r0
 8026908:	d13f      	bne.n	802698a <_malloc_r+0xe6>
 802690a:	6821      	ldr	r1, [r4, #0]
 802690c:	1a6d      	subs	r5, r5, r1
 802690e:	4629      	mov	r1, r5
 8026910:	4638      	mov	r0, r7
 8026912:	f7ff ffa7 	bl	8026864 <sbrk_aligned>
 8026916:	3001      	adds	r0, #1
 8026918:	d037      	beq.n	802698a <_malloc_r+0xe6>
 802691a:	6823      	ldr	r3, [r4, #0]
 802691c:	442b      	add	r3, r5
 802691e:	6023      	str	r3, [r4, #0]
 8026920:	f8d8 3000 	ldr.w	r3, [r8]
 8026924:	2b00      	cmp	r3, #0
 8026926:	d038      	beq.n	802699a <_malloc_r+0xf6>
 8026928:	685a      	ldr	r2, [r3, #4]
 802692a:	42a2      	cmp	r2, r4
 802692c:	d12b      	bne.n	8026986 <_malloc_r+0xe2>
 802692e:	2200      	movs	r2, #0
 8026930:	605a      	str	r2, [r3, #4]
 8026932:	e00f      	b.n	8026954 <_malloc_r+0xb0>
 8026934:	6822      	ldr	r2, [r4, #0]
 8026936:	1b52      	subs	r2, r2, r5
 8026938:	d41f      	bmi.n	802697a <_malloc_r+0xd6>
 802693a:	2a0b      	cmp	r2, #11
 802693c:	d917      	bls.n	802696e <_malloc_r+0xca>
 802693e:	1961      	adds	r1, r4, r5
 8026940:	42a3      	cmp	r3, r4
 8026942:	6025      	str	r5, [r4, #0]
 8026944:	bf18      	it	ne
 8026946:	6059      	strne	r1, [r3, #4]
 8026948:	6863      	ldr	r3, [r4, #4]
 802694a:	bf08      	it	eq
 802694c:	f8c8 1000 	streq.w	r1, [r8]
 8026950:	5162      	str	r2, [r4, r5]
 8026952:	604b      	str	r3, [r1, #4]
 8026954:	4638      	mov	r0, r7
 8026956:	f104 060b 	add.w	r6, r4, #11
 802695a:	f000 f829 	bl	80269b0 <__malloc_unlock>
 802695e:	f026 0607 	bic.w	r6, r6, #7
 8026962:	1d23      	adds	r3, r4, #4
 8026964:	1af2      	subs	r2, r6, r3
 8026966:	d0ae      	beq.n	80268c6 <_malloc_r+0x22>
 8026968:	1b9b      	subs	r3, r3, r6
 802696a:	50a3      	str	r3, [r4, r2]
 802696c:	e7ab      	b.n	80268c6 <_malloc_r+0x22>
 802696e:	42a3      	cmp	r3, r4
 8026970:	6862      	ldr	r2, [r4, #4]
 8026972:	d1dd      	bne.n	8026930 <_malloc_r+0x8c>
 8026974:	f8c8 2000 	str.w	r2, [r8]
 8026978:	e7ec      	b.n	8026954 <_malloc_r+0xb0>
 802697a:	4623      	mov	r3, r4
 802697c:	6864      	ldr	r4, [r4, #4]
 802697e:	e7ac      	b.n	80268da <_malloc_r+0x36>
 8026980:	4634      	mov	r4, r6
 8026982:	6876      	ldr	r6, [r6, #4]
 8026984:	e7b4      	b.n	80268f0 <_malloc_r+0x4c>
 8026986:	4613      	mov	r3, r2
 8026988:	e7cc      	b.n	8026924 <_malloc_r+0x80>
 802698a:	230c      	movs	r3, #12
 802698c:	603b      	str	r3, [r7, #0]
 802698e:	4638      	mov	r0, r7
 8026990:	f000 f80e 	bl	80269b0 <__malloc_unlock>
 8026994:	e797      	b.n	80268c6 <_malloc_r+0x22>
 8026996:	6025      	str	r5, [r4, #0]
 8026998:	e7dc      	b.n	8026954 <_malloc_r+0xb0>
 802699a:	605b      	str	r3, [r3, #4]
 802699c:	deff      	udf	#255	; 0xff
 802699e:	bf00      	nop
 80269a0:	2000c7a8 	.word	0x2000c7a8

080269a4 <__malloc_lock>:
 80269a4:	4801      	ldr	r0, [pc, #4]	; (80269ac <__malloc_lock+0x8>)
 80269a6:	f000 b9e9 	b.w	8026d7c <__retarget_lock_acquire_recursive>
 80269aa:	bf00      	nop
 80269ac:	2000c8f1 	.word	0x2000c8f1

080269b0 <__malloc_unlock>:
 80269b0:	4801      	ldr	r0, [pc, #4]	; (80269b8 <__malloc_unlock+0x8>)
 80269b2:	f000 b9e4 	b.w	8026d7e <__retarget_lock_release_recursive>
 80269b6:	bf00      	nop
 80269b8:	2000c8f1 	.word	0x2000c8f1

080269bc <__cxa_atexit>:
 80269bc:	b510      	push	{r4, lr}
 80269be:	4c05      	ldr	r4, [pc, #20]	; (80269d4 <__cxa_atexit+0x18>)
 80269c0:	4613      	mov	r3, r2
 80269c2:	b12c      	cbz	r4, 80269d0 <__cxa_atexit+0x14>
 80269c4:	460a      	mov	r2, r1
 80269c6:	4601      	mov	r1, r0
 80269c8:	2002      	movs	r0, #2
 80269ca:	f000 f9e7 	bl	8026d9c <__register_exitproc>
 80269ce:	bd10      	pop	{r4, pc}
 80269d0:	4620      	mov	r0, r4
 80269d2:	e7fc      	b.n	80269ce <__cxa_atexit+0x12>
 80269d4:	08026d9d 	.word	0x08026d9d

080269d8 <std>:
 80269d8:	2300      	movs	r3, #0
 80269da:	b510      	push	{r4, lr}
 80269dc:	4604      	mov	r4, r0
 80269de:	e9c0 3300 	strd	r3, r3, [r0]
 80269e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80269e6:	6083      	str	r3, [r0, #8]
 80269e8:	8181      	strh	r1, [r0, #12]
 80269ea:	6643      	str	r3, [r0, #100]	; 0x64
 80269ec:	81c2      	strh	r2, [r0, #14]
 80269ee:	6183      	str	r3, [r0, #24]
 80269f0:	4619      	mov	r1, r3
 80269f2:	2208      	movs	r2, #8
 80269f4:	305c      	adds	r0, #92	; 0x5c
 80269f6:	f000 f8f4 	bl	8026be2 <memset>
 80269fa:	4b05      	ldr	r3, [pc, #20]	; (8026a10 <std+0x38>)
 80269fc:	6263      	str	r3, [r4, #36]	; 0x24
 80269fe:	4b05      	ldr	r3, [pc, #20]	; (8026a14 <std+0x3c>)
 8026a00:	62a3      	str	r3, [r4, #40]	; 0x28
 8026a02:	4b05      	ldr	r3, [pc, #20]	; (8026a18 <std+0x40>)
 8026a04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8026a06:	4b05      	ldr	r3, [pc, #20]	; (8026a1c <std+0x44>)
 8026a08:	6224      	str	r4, [r4, #32]
 8026a0a:	6323      	str	r3, [r4, #48]	; 0x30
 8026a0c:	bd10      	pop	{r4, pc}
 8026a0e:	bf00      	nop
 8026a10:	08026b5d 	.word	0x08026b5d
 8026a14:	08026b7f 	.word	0x08026b7f
 8026a18:	08026bb7 	.word	0x08026bb7
 8026a1c:	08026bdb 	.word	0x08026bdb

08026a20 <stdio_exit_handler>:
 8026a20:	4a02      	ldr	r2, [pc, #8]	; (8026a2c <stdio_exit_handler+0xc>)
 8026a22:	4903      	ldr	r1, [pc, #12]	; (8026a30 <stdio_exit_handler+0x10>)
 8026a24:	4803      	ldr	r0, [pc, #12]	; (8026a34 <stdio_exit_handler+0x14>)
 8026a26:	f000 b87b 	b.w	8026b20 <_fwalk_sglue>
 8026a2a:	bf00      	nop
 8026a2c:	200000a8 	.word	0x200000a8
 8026a30:	080275a5 	.word	0x080275a5
 8026a34:	200000b4 	.word	0x200000b4

08026a38 <cleanup_stdio>:
 8026a38:	6841      	ldr	r1, [r0, #4]
 8026a3a:	4b0c      	ldr	r3, [pc, #48]	; (8026a6c <cleanup_stdio+0x34>)
 8026a3c:	4299      	cmp	r1, r3
 8026a3e:	b510      	push	{r4, lr}
 8026a40:	4604      	mov	r4, r0
 8026a42:	d001      	beq.n	8026a48 <cleanup_stdio+0x10>
 8026a44:	f000 fdae 	bl	80275a4 <_fflush_r>
 8026a48:	68a1      	ldr	r1, [r4, #8]
 8026a4a:	4b09      	ldr	r3, [pc, #36]	; (8026a70 <cleanup_stdio+0x38>)
 8026a4c:	4299      	cmp	r1, r3
 8026a4e:	d002      	beq.n	8026a56 <cleanup_stdio+0x1e>
 8026a50:	4620      	mov	r0, r4
 8026a52:	f000 fda7 	bl	80275a4 <_fflush_r>
 8026a56:	68e1      	ldr	r1, [r4, #12]
 8026a58:	4b06      	ldr	r3, [pc, #24]	; (8026a74 <cleanup_stdio+0x3c>)
 8026a5a:	4299      	cmp	r1, r3
 8026a5c:	d004      	beq.n	8026a68 <cleanup_stdio+0x30>
 8026a5e:	4620      	mov	r0, r4
 8026a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026a64:	f000 bd9e 	b.w	80275a4 <_fflush_r>
 8026a68:	bd10      	pop	{r4, pc}
 8026a6a:	bf00      	nop
 8026a6c:	2000c7b0 	.word	0x2000c7b0
 8026a70:	2000c818 	.word	0x2000c818
 8026a74:	2000c880 	.word	0x2000c880

08026a78 <global_stdio_init.part.0>:
 8026a78:	b510      	push	{r4, lr}
 8026a7a:	4b0b      	ldr	r3, [pc, #44]	; (8026aa8 <global_stdio_init.part.0+0x30>)
 8026a7c:	4c0b      	ldr	r4, [pc, #44]	; (8026aac <global_stdio_init.part.0+0x34>)
 8026a7e:	4a0c      	ldr	r2, [pc, #48]	; (8026ab0 <global_stdio_init.part.0+0x38>)
 8026a80:	601a      	str	r2, [r3, #0]
 8026a82:	4620      	mov	r0, r4
 8026a84:	2200      	movs	r2, #0
 8026a86:	2104      	movs	r1, #4
 8026a88:	f7ff ffa6 	bl	80269d8 <std>
 8026a8c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8026a90:	2201      	movs	r2, #1
 8026a92:	2109      	movs	r1, #9
 8026a94:	f7ff ffa0 	bl	80269d8 <std>
 8026a98:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8026a9c:	2202      	movs	r2, #2
 8026a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026aa2:	2112      	movs	r1, #18
 8026aa4:	f7ff bf98 	b.w	80269d8 <std>
 8026aa8:	2000c8e8 	.word	0x2000c8e8
 8026aac:	2000c7b0 	.word	0x2000c7b0
 8026ab0:	08026a21 	.word	0x08026a21

08026ab4 <__sfp_lock_acquire>:
 8026ab4:	4801      	ldr	r0, [pc, #4]	; (8026abc <__sfp_lock_acquire+0x8>)
 8026ab6:	f000 b961 	b.w	8026d7c <__retarget_lock_acquire_recursive>
 8026aba:	bf00      	nop
 8026abc:	2000c8f2 	.word	0x2000c8f2

08026ac0 <__sfp_lock_release>:
 8026ac0:	4801      	ldr	r0, [pc, #4]	; (8026ac8 <__sfp_lock_release+0x8>)
 8026ac2:	f000 b95c 	b.w	8026d7e <__retarget_lock_release_recursive>
 8026ac6:	bf00      	nop
 8026ac8:	2000c8f2 	.word	0x2000c8f2

08026acc <__sinit>:
 8026acc:	b510      	push	{r4, lr}
 8026ace:	4604      	mov	r4, r0
 8026ad0:	f7ff fff0 	bl	8026ab4 <__sfp_lock_acquire>
 8026ad4:	6a23      	ldr	r3, [r4, #32]
 8026ad6:	b11b      	cbz	r3, 8026ae0 <__sinit+0x14>
 8026ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026adc:	f7ff bff0 	b.w	8026ac0 <__sfp_lock_release>
 8026ae0:	4b04      	ldr	r3, [pc, #16]	; (8026af4 <__sinit+0x28>)
 8026ae2:	6223      	str	r3, [r4, #32]
 8026ae4:	4b04      	ldr	r3, [pc, #16]	; (8026af8 <__sinit+0x2c>)
 8026ae6:	681b      	ldr	r3, [r3, #0]
 8026ae8:	2b00      	cmp	r3, #0
 8026aea:	d1f5      	bne.n	8026ad8 <__sinit+0xc>
 8026aec:	f7ff ffc4 	bl	8026a78 <global_stdio_init.part.0>
 8026af0:	e7f2      	b.n	8026ad8 <__sinit+0xc>
 8026af2:	bf00      	nop
 8026af4:	08026a39 	.word	0x08026a39
 8026af8:	2000c8e8 	.word	0x2000c8e8

08026afc <fiprintf>:
 8026afc:	b40e      	push	{r1, r2, r3}
 8026afe:	b503      	push	{r0, r1, lr}
 8026b00:	4601      	mov	r1, r0
 8026b02:	ab03      	add	r3, sp, #12
 8026b04:	4805      	ldr	r0, [pc, #20]	; (8026b1c <fiprintf+0x20>)
 8026b06:	f853 2b04 	ldr.w	r2, [r3], #4
 8026b0a:	6800      	ldr	r0, [r0, #0]
 8026b0c:	9301      	str	r3, [sp, #4]
 8026b0e:	f000 fa19 	bl	8026f44 <_vfiprintf_r>
 8026b12:	b002      	add	sp, #8
 8026b14:	f85d eb04 	ldr.w	lr, [sp], #4
 8026b18:	b003      	add	sp, #12
 8026b1a:	4770      	bx	lr
 8026b1c:	20000100 	.word	0x20000100

08026b20 <_fwalk_sglue>:
 8026b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026b24:	4607      	mov	r7, r0
 8026b26:	4688      	mov	r8, r1
 8026b28:	4614      	mov	r4, r2
 8026b2a:	2600      	movs	r6, #0
 8026b2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8026b30:	f1b9 0901 	subs.w	r9, r9, #1
 8026b34:	d505      	bpl.n	8026b42 <_fwalk_sglue+0x22>
 8026b36:	6824      	ldr	r4, [r4, #0]
 8026b38:	2c00      	cmp	r4, #0
 8026b3a:	d1f7      	bne.n	8026b2c <_fwalk_sglue+0xc>
 8026b3c:	4630      	mov	r0, r6
 8026b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026b42:	89ab      	ldrh	r3, [r5, #12]
 8026b44:	2b01      	cmp	r3, #1
 8026b46:	d907      	bls.n	8026b58 <_fwalk_sglue+0x38>
 8026b48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8026b4c:	3301      	adds	r3, #1
 8026b4e:	d003      	beq.n	8026b58 <_fwalk_sglue+0x38>
 8026b50:	4629      	mov	r1, r5
 8026b52:	4638      	mov	r0, r7
 8026b54:	47c0      	blx	r8
 8026b56:	4306      	orrs	r6, r0
 8026b58:	3568      	adds	r5, #104	; 0x68
 8026b5a:	e7e9      	b.n	8026b30 <_fwalk_sglue+0x10>

08026b5c <__sread>:
 8026b5c:	b510      	push	{r4, lr}
 8026b5e:	460c      	mov	r4, r1
 8026b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026b64:	f000 f898 	bl	8026c98 <_read_r>
 8026b68:	2800      	cmp	r0, #0
 8026b6a:	bfab      	itete	ge
 8026b6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8026b6e:	89a3      	ldrhlt	r3, [r4, #12]
 8026b70:	181b      	addge	r3, r3, r0
 8026b72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8026b76:	bfac      	ite	ge
 8026b78:	6563      	strge	r3, [r4, #84]	; 0x54
 8026b7a:	81a3      	strhlt	r3, [r4, #12]
 8026b7c:	bd10      	pop	{r4, pc}

08026b7e <__swrite>:
 8026b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026b82:	461f      	mov	r7, r3
 8026b84:	898b      	ldrh	r3, [r1, #12]
 8026b86:	05db      	lsls	r3, r3, #23
 8026b88:	4605      	mov	r5, r0
 8026b8a:	460c      	mov	r4, r1
 8026b8c:	4616      	mov	r6, r2
 8026b8e:	d505      	bpl.n	8026b9c <__swrite+0x1e>
 8026b90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026b94:	2302      	movs	r3, #2
 8026b96:	2200      	movs	r2, #0
 8026b98:	f000 f86c 	bl	8026c74 <_lseek_r>
 8026b9c:	89a3      	ldrh	r3, [r4, #12]
 8026b9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026ba2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8026ba6:	81a3      	strh	r3, [r4, #12]
 8026ba8:	4632      	mov	r2, r6
 8026baa:	463b      	mov	r3, r7
 8026bac:	4628      	mov	r0, r5
 8026bae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026bb2:	f000 b8a7 	b.w	8026d04 <_write_r>

08026bb6 <__sseek>:
 8026bb6:	b510      	push	{r4, lr}
 8026bb8:	460c      	mov	r4, r1
 8026bba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026bbe:	f000 f859 	bl	8026c74 <_lseek_r>
 8026bc2:	1c43      	adds	r3, r0, #1
 8026bc4:	89a3      	ldrh	r3, [r4, #12]
 8026bc6:	bf15      	itete	ne
 8026bc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8026bca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8026bce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8026bd2:	81a3      	strheq	r3, [r4, #12]
 8026bd4:	bf18      	it	ne
 8026bd6:	81a3      	strhne	r3, [r4, #12]
 8026bd8:	bd10      	pop	{r4, pc}

08026bda <__sclose>:
 8026bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026bde:	f000 b839 	b.w	8026c54 <_close_r>

08026be2 <memset>:
 8026be2:	4402      	add	r2, r0
 8026be4:	4603      	mov	r3, r0
 8026be6:	4293      	cmp	r3, r2
 8026be8:	d100      	bne.n	8026bec <memset+0xa>
 8026bea:	4770      	bx	lr
 8026bec:	f803 1b01 	strb.w	r1, [r3], #1
 8026bf0:	e7f9      	b.n	8026be6 <memset+0x4>

08026bf2 <_raise_r>:
 8026bf2:	291f      	cmp	r1, #31
 8026bf4:	b538      	push	{r3, r4, r5, lr}
 8026bf6:	4604      	mov	r4, r0
 8026bf8:	460d      	mov	r5, r1
 8026bfa:	d904      	bls.n	8026c06 <_raise_r+0x14>
 8026bfc:	2316      	movs	r3, #22
 8026bfe:	6003      	str	r3, [r0, #0]
 8026c00:	f04f 30ff 	mov.w	r0, #4294967295
 8026c04:	bd38      	pop	{r3, r4, r5, pc}
 8026c06:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8026c08:	b112      	cbz	r2, 8026c10 <_raise_r+0x1e>
 8026c0a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8026c0e:	b94b      	cbnz	r3, 8026c24 <_raise_r+0x32>
 8026c10:	4620      	mov	r0, r4
 8026c12:	f000 f865 	bl	8026ce0 <_getpid_r>
 8026c16:	462a      	mov	r2, r5
 8026c18:	4601      	mov	r1, r0
 8026c1a:	4620      	mov	r0, r4
 8026c1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026c20:	f000 b84c 	b.w	8026cbc <_kill_r>
 8026c24:	2b01      	cmp	r3, #1
 8026c26:	d00a      	beq.n	8026c3e <_raise_r+0x4c>
 8026c28:	1c59      	adds	r1, r3, #1
 8026c2a:	d103      	bne.n	8026c34 <_raise_r+0x42>
 8026c2c:	2316      	movs	r3, #22
 8026c2e:	6003      	str	r3, [r0, #0]
 8026c30:	2001      	movs	r0, #1
 8026c32:	e7e7      	b.n	8026c04 <_raise_r+0x12>
 8026c34:	2400      	movs	r4, #0
 8026c36:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8026c3a:	4628      	mov	r0, r5
 8026c3c:	4798      	blx	r3
 8026c3e:	2000      	movs	r0, #0
 8026c40:	e7e0      	b.n	8026c04 <_raise_r+0x12>
	...

08026c44 <raise>:
 8026c44:	4b02      	ldr	r3, [pc, #8]	; (8026c50 <raise+0xc>)
 8026c46:	4601      	mov	r1, r0
 8026c48:	6818      	ldr	r0, [r3, #0]
 8026c4a:	f7ff bfd2 	b.w	8026bf2 <_raise_r>
 8026c4e:	bf00      	nop
 8026c50:	20000100 	.word	0x20000100

08026c54 <_close_r>:
 8026c54:	b538      	push	{r3, r4, r5, lr}
 8026c56:	4d06      	ldr	r5, [pc, #24]	; (8026c70 <_close_r+0x1c>)
 8026c58:	2300      	movs	r3, #0
 8026c5a:	4604      	mov	r4, r0
 8026c5c:	4608      	mov	r0, r1
 8026c5e:	602b      	str	r3, [r5, #0]
 8026c60:	f7dd f835 	bl	8003cce <_close>
 8026c64:	1c43      	adds	r3, r0, #1
 8026c66:	d102      	bne.n	8026c6e <_close_r+0x1a>
 8026c68:	682b      	ldr	r3, [r5, #0]
 8026c6a:	b103      	cbz	r3, 8026c6e <_close_r+0x1a>
 8026c6c:	6023      	str	r3, [r4, #0]
 8026c6e:	bd38      	pop	{r3, r4, r5, pc}
 8026c70:	2000c8ec 	.word	0x2000c8ec

08026c74 <_lseek_r>:
 8026c74:	b538      	push	{r3, r4, r5, lr}
 8026c76:	4d07      	ldr	r5, [pc, #28]	; (8026c94 <_lseek_r+0x20>)
 8026c78:	4604      	mov	r4, r0
 8026c7a:	4608      	mov	r0, r1
 8026c7c:	4611      	mov	r1, r2
 8026c7e:	2200      	movs	r2, #0
 8026c80:	602a      	str	r2, [r5, #0]
 8026c82:	461a      	mov	r2, r3
 8026c84:	f7dd f84a 	bl	8003d1c <_lseek>
 8026c88:	1c43      	adds	r3, r0, #1
 8026c8a:	d102      	bne.n	8026c92 <_lseek_r+0x1e>
 8026c8c:	682b      	ldr	r3, [r5, #0]
 8026c8e:	b103      	cbz	r3, 8026c92 <_lseek_r+0x1e>
 8026c90:	6023      	str	r3, [r4, #0]
 8026c92:	bd38      	pop	{r3, r4, r5, pc}
 8026c94:	2000c8ec 	.word	0x2000c8ec

08026c98 <_read_r>:
 8026c98:	b538      	push	{r3, r4, r5, lr}
 8026c9a:	4d07      	ldr	r5, [pc, #28]	; (8026cb8 <_read_r+0x20>)
 8026c9c:	4604      	mov	r4, r0
 8026c9e:	4608      	mov	r0, r1
 8026ca0:	4611      	mov	r1, r2
 8026ca2:	2200      	movs	r2, #0
 8026ca4:	602a      	str	r2, [r5, #0]
 8026ca6:	461a      	mov	r2, r3
 8026ca8:	f7dc ffd8 	bl	8003c5c <_read>
 8026cac:	1c43      	adds	r3, r0, #1
 8026cae:	d102      	bne.n	8026cb6 <_read_r+0x1e>
 8026cb0:	682b      	ldr	r3, [r5, #0]
 8026cb2:	b103      	cbz	r3, 8026cb6 <_read_r+0x1e>
 8026cb4:	6023      	str	r3, [r4, #0]
 8026cb6:	bd38      	pop	{r3, r4, r5, pc}
 8026cb8:	2000c8ec 	.word	0x2000c8ec

08026cbc <_kill_r>:
 8026cbc:	b538      	push	{r3, r4, r5, lr}
 8026cbe:	4d07      	ldr	r5, [pc, #28]	; (8026cdc <_kill_r+0x20>)
 8026cc0:	2300      	movs	r3, #0
 8026cc2:	4604      	mov	r4, r0
 8026cc4:	4608      	mov	r0, r1
 8026cc6:	4611      	mov	r1, r2
 8026cc8:	602b      	str	r3, [r5, #0]
 8026cca:	f7dc ffad 	bl	8003c28 <_kill>
 8026cce:	1c43      	adds	r3, r0, #1
 8026cd0:	d102      	bne.n	8026cd8 <_kill_r+0x1c>
 8026cd2:	682b      	ldr	r3, [r5, #0]
 8026cd4:	b103      	cbz	r3, 8026cd8 <_kill_r+0x1c>
 8026cd6:	6023      	str	r3, [r4, #0]
 8026cd8:	bd38      	pop	{r3, r4, r5, pc}
 8026cda:	bf00      	nop
 8026cdc:	2000c8ec 	.word	0x2000c8ec

08026ce0 <_getpid_r>:
 8026ce0:	f7dc bf9a 	b.w	8003c18 <_getpid>

08026ce4 <_sbrk_r>:
 8026ce4:	b538      	push	{r3, r4, r5, lr}
 8026ce6:	4d06      	ldr	r5, [pc, #24]	; (8026d00 <_sbrk_r+0x1c>)
 8026ce8:	2300      	movs	r3, #0
 8026cea:	4604      	mov	r4, r0
 8026cec:	4608      	mov	r0, r1
 8026cee:	602b      	str	r3, [r5, #0]
 8026cf0:	f7dd f822 	bl	8003d38 <_sbrk>
 8026cf4:	1c43      	adds	r3, r0, #1
 8026cf6:	d102      	bne.n	8026cfe <_sbrk_r+0x1a>
 8026cf8:	682b      	ldr	r3, [r5, #0]
 8026cfa:	b103      	cbz	r3, 8026cfe <_sbrk_r+0x1a>
 8026cfc:	6023      	str	r3, [r4, #0]
 8026cfe:	bd38      	pop	{r3, r4, r5, pc}
 8026d00:	2000c8ec 	.word	0x2000c8ec

08026d04 <_write_r>:
 8026d04:	b538      	push	{r3, r4, r5, lr}
 8026d06:	4d07      	ldr	r5, [pc, #28]	; (8026d24 <_write_r+0x20>)
 8026d08:	4604      	mov	r4, r0
 8026d0a:	4608      	mov	r0, r1
 8026d0c:	4611      	mov	r1, r2
 8026d0e:	2200      	movs	r2, #0
 8026d10:	602a      	str	r2, [r5, #0]
 8026d12:	461a      	mov	r2, r3
 8026d14:	f7dc ffbf 	bl	8003c96 <_write>
 8026d18:	1c43      	adds	r3, r0, #1
 8026d1a:	d102      	bne.n	8026d22 <_write_r+0x1e>
 8026d1c:	682b      	ldr	r3, [r5, #0]
 8026d1e:	b103      	cbz	r3, 8026d22 <_write_r+0x1e>
 8026d20:	6023      	str	r3, [r4, #0]
 8026d22:	bd38      	pop	{r3, r4, r5, pc}
 8026d24:	2000c8ec 	.word	0x2000c8ec

08026d28 <__errno>:
 8026d28:	4b01      	ldr	r3, [pc, #4]	; (8026d30 <__errno+0x8>)
 8026d2a:	6818      	ldr	r0, [r3, #0]
 8026d2c:	4770      	bx	lr
 8026d2e:	bf00      	nop
 8026d30:	20000100 	.word	0x20000100

08026d34 <__libc_init_array>:
 8026d34:	b570      	push	{r4, r5, r6, lr}
 8026d36:	4d0d      	ldr	r5, [pc, #52]	; (8026d6c <__libc_init_array+0x38>)
 8026d38:	4c0d      	ldr	r4, [pc, #52]	; (8026d70 <__libc_init_array+0x3c>)
 8026d3a:	1b64      	subs	r4, r4, r5
 8026d3c:	10a4      	asrs	r4, r4, #2
 8026d3e:	2600      	movs	r6, #0
 8026d40:	42a6      	cmp	r6, r4
 8026d42:	d109      	bne.n	8026d58 <__libc_init_array+0x24>
 8026d44:	4d0b      	ldr	r5, [pc, #44]	; (8026d74 <__libc_init_array+0x40>)
 8026d46:	4c0c      	ldr	r4, [pc, #48]	; (8026d78 <__libc_init_array+0x44>)
 8026d48:	f000 fd6e 	bl	8027828 <_init>
 8026d4c:	1b64      	subs	r4, r4, r5
 8026d4e:	10a4      	asrs	r4, r4, #2
 8026d50:	2600      	movs	r6, #0
 8026d52:	42a6      	cmp	r6, r4
 8026d54:	d105      	bne.n	8026d62 <__libc_init_array+0x2e>
 8026d56:	bd70      	pop	{r4, r5, r6, pc}
 8026d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8026d5c:	4798      	blx	r3
 8026d5e:	3601      	adds	r6, #1
 8026d60:	e7ee      	b.n	8026d40 <__libc_init_array+0xc>
 8026d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8026d66:	4798      	blx	r3
 8026d68:	3601      	adds	r6, #1
 8026d6a:	e7f2      	b.n	8026d52 <__libc_init_array+0x1e>
 8026d6c:	0806350c 	.word	0x0806350c
 8026d70:	0806350c 	.word	0x0806350c
 8026d74:	0806350c 	.word	0x0806350c
 8026d78:	08063520 	.word	0x08063520

08026d7c <__retarget_lock_acquire_recursive>:
 8026d7c:	4770      	bx	lr

08026d7e <__retarget_lock_release_recursive>:
 8026d7e:	4770      	bx	lr

08026d80 <memcpy>:
 8026d80:	440a      	add	r2, r1
 8026d82:	4291      	cmp	r1, r2
 8026d84:	f100 33ff 	add.w	r3, r0, #4294967295
 8026d88:	d100      	bne.n	8026d8c <memcpy+0xc>
 8026d8a:	4770      	bx	lr
 8026d8c:	b510      	push	{r4, lr}
 8026d8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8026d92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8026d96:	4291      	cmp	r1, r2
 8026d98:	d1f9      	bne.n	8026d8e <memcpy+0xe>
 8026d9a:	bd10      	pop	{r4, pc}

08026d9c <__register_exitproc>:
 8026d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026da0:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8026e54 <__register_exitproc+0xb8>
 8026da4:	4606      	mov	r6, r0
 8026da6:	f8d8 0000 	ldr.w	r0, [r8]
 8026daa:	461f      	mov	r7, r3
 8026dac:	460d      	mov	r5, r1
 8026dae:	4691      	mov	r9, r2
 8026db0:	f7ff ffe4 	bl	8026d7c <__retarget_lock_acquire_recursive>
 8026db4:	4b23      	ldr	r3, [pc, #140]	; (8026e44 <__register_exitproc+0xa8>)
 8026db6:	681c      	ldr	r4, [r3, #0]
 8026db8:	b934      	cbnz	r4, 8026dc8 <__register_exitproc+0x2c>
 8026dba:	4c23      	ldr	r4, [pc, #140]	; (8026e48 <__register_exitproc+0xac>)
 8026dbc:	601c      	str	r4, [r3, #0]
 8026dbe:	4b23      	ldr	r3, [pc, #140]	; (8026e4c <__register_exitproc+0xb0>)
 8026dc0:	b113      	cbz	r3, 8026dc8 <__register_exitproc+0x2c>
 8026dc2:	681b      	ldr	r3, [r3, #0]
 8026dc4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8026dc8:	6863      	ldr	r3, [r4, #4]
 8026dca:	2b1f      	cmp	r3, #31
 8026dcc:	dd07      	ble.n	8026dde <__register_exitproc+0x42>
 8026dce:	f8d8 0000 	ldr.w	r0, [r8]
 8026dd2:	f7ff ffd4 	bl	8026d7e <__retarget_lock_release_recursive>
 8026dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8026dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026dde:	b32e      	cbz	r6, 8026e2c <__register_exitproc+0x90>
 8026de0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8026de4:	b968      	cbnz	r0, 8026e02 <__register_exitproc+0x66>
 8026de6:	4b1a      	ldr	r3, [pc, #104]	; (8026e50 <__register_exitproc+0xb4>)
 8026de8:	2b00      	cmp	r3, #0
 8026dea:	d0f0      	beq.n	8026dce <__register_exitproc+0x32>
 8026dec:	f44f 7084 	mov.w	r0, #264	; 0x108
 8026df0:	f7ff fd28 	bl	8026844 <malloc>
 8026df4:	2800      	cmp	r0, #0
 8026df6:	d0ea      	beq.n	8026dce <__register_exitproc+0x32>
 8026df8:	2300      	movs	r3, #0
 8026dfa:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8026dfe:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8026e02:	6863      	ldr	r3, [r4, #4]
 8026e04:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8026e08:	2201      	movs	r2, #1
 8026e0a:	409a      	lsls	r2, r3
 8026e0c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8026e10:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8026e14:	4313      	orrs	r3, r2
 8026e16:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8026e1a:	2e02      	cmp	r6, #2
 8026e1c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8026e20:	bf02      	ittt	eq
 8026e22:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8026e26:	4313      	orreq	r3, r2
 8026e28:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8026e2c:	6863      	ldr	r3, [r4, #4]
 8026e2e:	f8d8 0000 	ldr.w	r0, [r8]
 8026e32:	1c5a      	adds	r2, r3, #1
 8026e34:	3302      	adds	r3, #2
 8026e36:	6062      	str	r2, [r4, #4]
 8026e38:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8026e3c:	f7ff ff9f 	bl	8026d7e <__retarget_lock_release_recursive>
 8026e40:	2000      	movs	r0, #0
 8026e42:	e7ca      	b.n	8026dda <__register_exitproc+0x3e>
 8026e44:	2000c980 	.word	0x2000c980
 8026e48:	2000c8f4 	.word	0x2000c8f4
 8026e4c:	0802bb98 	.word	0x0802bb98
 8026e50:	08026845 	.word	0x08026845
 8026e54:	20000104 	.word	0x20000104

08026e58 <_free_r>:
 8026e58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8026e5a:	2900      	cmp	r1, #0
 8026e5c:	d044      	beq.n	8026ee8 <_free_r+0x90>
 8026e5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026e62:	9001      	str	r0, [sp, #4]
 8026e64:	2b00      	cmp	r3, #0
 8026e66:	f1a1 0404 	sub.w	r4, r1, #4
 8026e6a:	bfb8      	it	lt
 8026e6c:	18e4      	addlt	r4, r4, r3
 8026e6e:	f7ff fd99 	bl	80269a4 <__malloc_lock>
 8026e72:	4a1e      	ldr	r2, [pc, #120]	; (8026eec <_free_r+0x94>)
 8026e74:	9801      	ldr	r0, [sp, #4]
 8026e76:	6813      	ldr	r3, [r2, #0]
 8026e78:	b933      	cbnz	r3, 8026e88 <_free_r+0x30>
 8026e7a:	6063      	str	r3, [r4, #4]
 8026e7c:	6014      	str	r4, [r2, #0]
 8026e7e:	b003      	add	sp, #12
 8026e80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8026e84:	f7ff bd94 	b.w	80269b0 <__malloc_unlock>
 8026e88:	42a3      	cmp	r3, r4
 8026e8a:	d908      	bls.n	8026e9e <_free_r+0x46>
 8026e8c:	6825      	ldr	r5, [r4, #0]
 8026e8e:	1961      	adds	r1, r4, r5
 8026e90:	428b      	cmp	r3, r1
 8026e92:	bf01      	itttt	eq
 8026e94:	6819      	ldreq	r1, [r3, #0]
 8026e96:	685b      	ldreq	r3, [r3, #4]
 8026e98:	1949      	addeq	r1, r1, r5
 8026e9a:	6021      	streq	r1, [r4, #0]
 8026e9c:	e7ed      	b.n	8026e7a <_free_r+0x22>
 8026e9e:	461a      	mov	r2, r3
 8026ea0:	685b      	ldr	r3, [r3, #4]
 8026ea2:	b10b      	cbz	r3, 8026ea8 <_free_r+0x50>
 8026ea4:	42a3      	cmp	r3, r4
 8026ea6:	d9fa      	bls.n	8026e9e <_free_r+0x46>
 8026ea8:	6811      	ldr	r1, [r2, #0]
 8026eaa:	1855      	adds	r5, r2, r1
 8026eac:	42a5      	cmp	r5, r4
 8026eae:	d10b      	bne.n	8026ec8 <_free_r+0x70>
 8026eb0:	6824      	ldr	r4, [r4, #0]
 8026eb2:	4421      	add	r1, r4
 8026eb4:	1854      	adds	r4, r2, r1
 8026eb6:	42a3      	cmp	r3, r4
 8026eb8:	6011      	str	r1, [r2, #0]
 8026eba:	d1e0      	bne.n	8026e7e <_free_r+0x26>
 8026ebc:	681c      	ldr	r4, [r3, #0]
 8026ebe:	685b      	ldr	r3, [r3, #4]
 8026ec0:	6053      	str	r3, [r2, #4]
 8026ec2:	440c      	add	r4, r1
 8026ec4:	6014      	str	r4, [r2, #0]
 8026ec6:	e7da      	b.n	8026e7e <_free_r+0x26>
 8026ec8:	d902      	bls.n	8026ed0 <_free_r+0x78>
 8026eca:	230c      	movs	r3, #12
 8026ecc:	6003      	str	r3, [r0, #0]
 8026ece:	e7d6      	b.n	8026e7e <_free_r+0x26>
 8026ed0:	6825      	ldr	r5, [r4, #0]
 8026ed2:	1961      	adds	r1, r4, r5
 8026ed4:	428b      	cmp	r3, r1
 8026ed6:	bf04      	itt	eq
 8026ed8:	6819      	ldreq	r1, [r3, #0]
 8026eda:	685b      	ldreq	r3, [r3, #4]
 8026edc:	6063      	str	r3, [r4, #4]
 8026ede:	bf04      	itt	eq
 8026ee0:	1949      	addeq	r1, r1, r5
 8026ee2:	6021      	streq	r1, [r4, #0]
 8026ee4:	6054      	str	r4, [r2, #4]
 8026ee6:	e7ca      	b.n	8026e7e <_free_r+0x26>
 8026ee8:	b003      	add	sp, #12
 8026eea:	bd30      	pop	{r4, r5, pc}
 8026eec:	2000c7a8 	.word	0x2000c7a8

08026ef0 <__sfputc_r>:
 8026ef0:	6893      	ldr	r3, [r2, #8]
 8026ef2:	3b01      	subs	r3, #1
 8026ef4:	2b00      	cmp	r3, #0
 8026ef6:	b410      	push	{r4}
 8026ef8:	6093      	str	r3, [r2, #8]
 8026efa:	da08      	bge.n	8026f0e <__sfputc_r+0x1e>
 8026efc:	6994      	ldr	r4, [r2, #24]
 8026efe:	42a3      	cmp	r3, r4
 8026f00:	db01      	blt.n	8026f06 <__sfputc_r+0x16>
 8026f02:	290a      	cmp	r1, #10
 8026f04:	d103      	bne.n	8026f0e <__sfputc_r+0x1e>
 8026f06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026f0a:	f000 bb73 	b.w	80275f4 <__swbuf_r>
 8026f0e:	6813      	ldr	r3, [r2, #0]
 8026f10:	1c58      	adds	r0, r3, #1
 8026f12:	6010      	str	r0, [r2, #0]
 8026f14:	7019      	strb	r1, [r3, #0]
 8026f16:	4608      	mov	r0, r1
 8026f18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026f1c:	4770      	bx	lr

08026f1e <__sfputs_r>:
 8026f1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026f20:	4606      	mov	r6, r0
 8026f22:	460f      	mov	r7, r1
 8026f24:	4614      	mov	r4, r2
 8026f26:	18d5      	adds	r5, r2, r3
 8026f28:	42ac      	cmp	r4, r5
 8026f2a:	d101      	bne.n	8026f30 <__sfputs_r+0x12>
 8026f2c:	2000      	movs	r0, #0
 8026f2e:	e007      	b.n	8026f40 <__sfputs_r+0x22>
 8026f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026f34:	463a      	mov	r2, r7
 8026f36:	4630      	mov	r0, r6
 8026f38:	f7ff ffda 	bl	8026ef0 <__sfputc_r>
 8026f3c:	1c43      	adds	r3, r0, #1
 8026f3e:	d1f3      	bne.n	8026f28 <__sfputs_r+0xa>
 8026f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08026f44 <_vfiprintf_r>:
 8026f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026f48:	460d      	mov	r5, r1
 8026f4a:	b09d      	sub	sp, #116	; 0x74
 8026f4c:	4614      	mov	r4, r2
 8026f4e:	4698      	mov	r8, r3
 8026f50:	4606      	mov	r6, r0
 8026f52:	b118      	cbz	r0, 8026f5c <_vfiprintf_r+0x18>
 8026f54:	6a03      	ldr	r3, [r0, #32]
 8026f56:	b90b      	cbnz	r3, 8026f5c <_vfiprintf_r+0x18>
 8026f58:	f7ff fdb8 	bl	8026acc <__sinit>
 8026f5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026f5e:	07d9      	lsls	r1, r3, #31
 8026f60:	d405      	bmi.n	8026f6e <_vfiprintf_r+0x2a>
 8026f62:	89ab      	ldrh	r3, [r5, #12]
 8026f64:	059a      	lsls	r2, r3, #22
 8026f66:	d402      	bmi.n	8026f6e <_vfiprintf_r+0x2a>
 8026f68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026f6a:	f7ff ff07 	bl	8026d7c <__retarget_lock_acquire_recursive>
 8026f6e:	89ab      	ldrh	r3, [r5, #12]
 8026f70:	071b      	lsls	r3, r3, #28
 8026f72:	d501      	bpl.n	8026f78 <_vfiprintf_r+0x34>
 8026f74:	692b      	ldr	r3, [r5, #16]
 8026f76:	b99b      	cbnz	r3, 8026fa0 <_vfiprintf_r+0x5c>
 8026f78:	4629      	mov	r1, r5
 8026f7a:	4630      	mov	r0, r6
 8026f7c:	f000 fb78 	bl	8027670 <__swsetup_r>
 8026f80:	b170      	cbz	r0, 8026fa0 <_vfiprintf_r+0x5c>
 8026f82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026f84:	07dc      	lsls	r4, r3, #31
 8026f86:	d504      	bpl.n	8026f92 <_vfiprintf_r+0x4e>
 8026f88:	f04f 30ff 	mov.w	r0, #4294967295
 8026f8c:	b01d      	add	sp, #116	; 0x74
 8026f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026f92:	89ab      	ldrh	r3, [r5, #12]
 8026f94:	0598      	lsls	r0, r3, #22
 8026f96:	d4f7      	bmi.n	8026f88 <_vfiprintf_r+0x44>
 8026f98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026f9a:	f7ff fef0 	bl	8026d7e <__retarget_lock_release_recursive>
 8026f9e:	e7f3      	b.n	8026f88 <_vfiprintf_r+0x44>
 8026fa0:	2300      	movs	r3, #0
 8026fa2:	9309      	str	r3, [sp, #36]	; 0x24
 8026fa4:	2320      	movs	r3, #32
 8026fa6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8026faa:	f8cd 800c 	str.w	r8, [sp, #12]
 8026fae:	2330      	movs	r3, #48	; 0x30
 8026fb0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8027164 <_vfiprintf_r+0x220>
 8026fb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8026fb8:	f04f 0901 	mov.w	r9, #1
 8026fbc:	4623      	mov	r3, r4
 8026fbe:	469a      	mov	sl, r3
 8026fc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026fc4:	b10a      	cbz	r2, 8026fca <_vfiprintf_r+0x86>
 8026fc6:	2a25      	cmp	r2, #37	; 0x25
 8026fc8:	d1f9      	bne.n	8026fbe <_vfiprintf_r+0x7a>
 8026fca:	ebba 0b04 	subs.w	fp, sl, r4
 8026fce:	d00b      	beq.n	8026fe8 <_vfiprintf_r+0xa4>
 8026fd0:	465b      	mov	r3, fp
 8026fd2:	4622      	mov	r2, r4
 8026fd4:	4629      	mov	r1, r5
 8026fd6:	4630      	mov	r0, r6
 8026fd8:	f7ff ffa1 	bl	8026f1e <__sfputs_r>
 8026fdc:	3001      	adds	r0, #1
 8026fde:	f000 80a9 	beq.w	8027134 <_vfiprintf_r+0x1f0>
 8026fe2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026fe4:	445a      	add	r2, fp
 8026fe6:	9209      	str	r2, [sp, #36]	; 0x24
 8026fe8:	f89a 3000 	ldrb.w	r3, [sl]
 8026fec:	2b00      	cmp	r3, #0
 8026fee:	f000 80a1 	beq.w	8027134 <_vfiprintf_r+0x1f0>
 8026ff2:	2300      	movs	r3, #0
 8026ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8026ff8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8026ffc:	f10a 0a01 	add.w	sl, sl, #1
 8027000:	9304      	str	r3, [sp, #16]
 8027002:	9307      	str	r3, [sp, #28]
 8027004:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8027008:	931a      	str	r3, [sp, #104]	; 0x68
 802700a:	4654      	mov	r4, sl
 802700c:	2205      	movs	r2, #5
 802700e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027012:	4854      	ldr	r0, [pc, #336]	; (8027164 <_vfiprintf_r+0x220>)
 8027014:	f7d9 f8fc 	bl	8000210 <memchr>
 8027018:	9a04      	ldr	r2, [sp, #16]
 802701a:	b9d8      	cbnz	r0, 8027054 <_vfiprintf_r+0x110>
 802701c:	06d1      	lsls	r1, r2, #27
 802701e:	bf44      	itt	mi
 8027020:	2320      	movmi	r3, #32
 8027022:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027026:	0713      	lsls	r3, r2, #28
 8027028:	bf44      	itt	mi
 802702a:	232b      	movmi	r3, #43	; 0x2b
 802702c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027030:	f89a 3000 	ldrb.w	r3, [sl]
 8027034:	2b2a      	cmp	r3, #42	; 0x2a
 8027036:	d015      	beq.n	8027064 <_vfiprintf_r+0x120>
 8027038:	9a07      	ldr	r2, [sp, #28]
 802703a:	4654      	mov	r4, sl
 802703c:	2000      	movs	r0, #0
 802703e:	f04f 0c0a 	mov.w	ip, #10
 8027042:	4621      	mov	r1, r4
 8027044:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027048:	3b30      	subs	r3, #48	; 0x30
 802704a:	2b09      	cmp	r3, #9
 802704c:	d94d      	bls.n	80270ea <_vfiprintf_r+0x1a6>
 802704e:	b1b0      	cbz	r0, 802707e <_vfiprintf_r+0x13a>
 8027050:	9207      	str	r2, [sp, #28]
 8027052:	e014      	b.n	802707e <_vfiprintf_r+0x13a>
 8027054:	eba0 0308 	sub.w	r3, r0, r8
 8027058:	fa09 f303 	lsl.w	r3, r9, r3
 802705c:	4313      	orrs	r3, r2
 802705e:	9304      	str	r3, [sp, #16]
 8027060:	46a2      	mov	sl, r4
 8027062:	e7d2      	b.n	802700a <_vfiprintf_r+0xc6>
 8027064:	9b03      	ldr	r3, [sp, #12]
 8027066:	1d19      	adds	r1, r3, #4
 8027068:	681b      	ldr	r3, [r3, #0]
 802706a:	9103      	str	r1, [sp, #12]
 802706c:	2b00      	cmp	r3, #0
 802706e:	bfbb      	ittet	lt
 8027070:	425b      	neglt	r3, r3
 8027072:	f042 0202 	orrlt.w	r2, r2, #2
 8027076:	9307      	strge	r3, [sp, #28]
 8027078:	9307      	strlt	r3, [sp, #28]
 802707a:	bfb8      	it	lt
 802707c:	9204      	strlt	r2, [sp, #16]
 802707e:	7823      	ldrb	r3, [r4, #0]
 8027080:	2b2e      	cmp	r3, #46	; 0x2e
 8027082:	d10c      	bne.n	802709e <_vfiprintf_r+0x15a>
 8027084:	7863      	ldrb	r3, [r4, #1]
 8027086:	2b2a      	cmp	r3, #42	; 0x2a
 8027088:	d134      	bne.n	80270f4 <_vfiprintf_r+0x1b0>
 802708a:	9b03      	ldr	r3, [sp, #12]
 802708c:	1d1a      	adds	r2, r3, #4
 802708e:	681b      	ldr	r3, [r3, #0]
 8027090:	9203      	str	r2, [sp, #12]
 8027092:	2b00      	cmp	r3, #0
 8027094:	bfb8      	it	lt
 8027096:	f04f 33ff 	movlt.w	r3, #4294967295
 802709a:	3402      	adds	r4, #2
 802709c:	9305      	str	r3, [sp, #20]
 802709e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8027174 <_vfiprintf_r+0x230>
 80270a2:	7821      	ldrb	r1, [r4, #0]
 80270a4:	2203      	movs	r2, #3
 80270a6:	4650      	mov	r0, sl
 80270a8:	f7d9 f8b2 	bl	8000210 <memchr>
 80270ac:	b138      	cbz	r0, 80270be <_vfiprintf_r+0x17a>
 80270ae:	9b04      	ldr	r3, [sp, #16]
 80270b0:	eba0 000a 	sub.w	r0, r0, sl
 80270b4:	2240      	movs	r2, #64	; 0x40
 80270b6:	4082      	lsls	r2, r0
 80270b8:	4313      	orrs	r3, r2
 80270ba:	3401      	adds	r4, #1
 80270bc:	9304      	str	r3, [sp, #16]
 80270be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80270c2:	4829      	ldr	r0, [pc, #164]	; (8027168 <_vfiprintf_r+0x224>)
 80270c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80270c8:	2206      	movs	r2, #6
 80270ca:	f7d9 f8a1 	bl	8000210 <memchr>
 80270ce:	2800      	cmp	r0, #0
 80270d0:	d03f      	beq.n	8027152 <_vfiprintf_r+0x20e>
 80270d2:	4b26      	ldr	r3, [pc, #152]	; (802716c <_vfiprintf_r+0x228>)
 80270d4:	bb1b      	cbnz	r3, 802711e <_vfiprintf_r+0x1da>
 80270d6:	9b03      	ldr	r3, [sp, #12]
 80270d8:	3307      	adds	r3, #7
 80270da:	f023 0307 	bic.w	r3, r3, #7
 80270de:	3308      	adds	r3, #8
 80270e0:	9303      	str	r3, [sp, #12]
 80270e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80270e4:	443b      	add	r3, r7
 80270e6:	9309      	str	r3, [sp, #36]	; 0x24
 80270e8:	e768      	b.n	8026fbc <_vfiprintf_r+0x78>
 80270ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80270ee:	460c      	mov	r4, r1
 80270f0:	2001      	movs	r0, #1
 80270f2:	e7a6      	b.n	8027042 <_vfiprintf_r+0xfe>
 80270f4:	2300      	movs	r3, #0
 80270f6:	3401      	adds	r4, #1
 80270f8:	9305      	str	r3, [sp, #20]
 80270fa:	4619      	mov	r1, r3
 80270fc:	f04f 0c0a 	mov.w	ip, #10
 8027100:	4620      	mov	r0, r4
 8027102:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027106:	3a30      	subs	r2, #48	; 0x30
 8027108:	2a09      	cmp	r2, #9
 802710a:	d903      	bls.n	8027114 <_vfiprintf_r+0x1d0>
 802710c:	2b00      	cmp	r3, #0
 802710e:	d0c6      	beq.n	802709e <_vfiprintf_r+0x15a>
 8027110:	9105      	str	r1, [sp, #20]
 8027112:	e7c4      	b.n	802709e <_vfiprintf_r+0x15a>
 8027114:	fb0c 2101 	mla	r1, ip, r1, r2
 8027118:	4604      	mov	r4, r0
 802711a:	2301      	movs	r3, #1
 802711c:	e7f0      	b.n	8027100 <_vfiprintf_r+0x1bc>
 802711e:	ab03      	add	r3, sp, #12
 8027120:	9300      	str	r3, [sp, #0]
 8027122:	462a      	mov	r2, r5
 8027124:	4b12      	ldr	r3, [pc, #72]	; (8027170 <_vfiprintf_r+0x22c>)
 8027126:	a904      	add	r1, sp, #16
 8027128:	4630      	mov	r0, r6
 802712a:	f3af 8000 	nop.w
 802712e:	4607      	mov	r7, r0
 8027130:	1c78      	adds	r0, r7, #1
 8027132:	d1d6      	bne.n	80270e2 <_vfiprintf_r+0x19e>
 8027134:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027136:	07d9      	lsls	r1, r3, #31
 8027138:	d405      	bmi.n	8027146 <_vfiprintf_r+0x202>
 802713a:	89ab      	ldrh	r3, [r5, #12]
 802713c:	059a      	lsls	r2, r3, #22
 802713e:	d402      	bmi.n	8027146 <_vfiprintf_r+0x202>
 8027140:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027142:	f7ff fe1c 	bl	8026d7e <__retarget_lock_release_recursive>
 8027146:	89ab      	ldrh	r3, [r5, #12]
 8027148:	065b      	lsls	r3, r3, #25
 802714a:	f53f af1d 	bmi.w	8026f88 <_vfiprintf_r+0x44>
 802714e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8027150:	e71c      	b.n	8026f8c <_vfiprintf_r+0x48>
 8027152:	ab03      	add	r3, sp, #12
 8027154:	9300      	str	r3, [sp, #0]
 8027156:	462a      	mov	r2, r5
 8027158:	4b05      	ldr	r3, [pc, #20]	; (8027170 <_vfiprintf_r+0x22c>)
 802715a:	a904      	add	r1, sp, #16
 802715c:	4630      	mov	r0, r6
 802715e:	f000 f879 	bl	8027254 <_printf_i>
 8027162:	e7e4      	b.n	802712e <_vfiprintf_r+0x1ea>
 8027164:	0802bb9c 	.word	0x0802bb9c
 8027168:	0802bba6 	.word	0x0802bba6
 802716c:	00000000 	.word	0x00000000
 8027170:	08026f1f 	.word	0x08026f1f
 8027174:	0802bba2 	.word	0x0802bba2

08027178 <_printf_common>:
 8027178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802717c:	4616      	mov	r6, r2
 802717e:	4699      	mov	r9, r3
 8027180:	688a      	ldr	r2, [r1, #8]
 8027182:	690b      	ldr	r3, [r1, #16]
 8027184:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8027188:	4293      	cmp	r3, r2
 802718a:	bfb8      	it	lt
 802718c:	4613      	movlt	r3, r2
 802718e:	6033      	str	r3, [r6, #0]
 8027190:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8027194:	4607      	mov	r7, r0
 8027196:	460c      	mov	r4, r1
 8027198:	b10a      	cbz	r2, 802719e <_printf_common+0x26>
 802719a:	3301      	adds	r3, #1
 802719c:	6033      	str	r3, [r6, #0]
 802719e:	6823      	ldr	r3, [r4, #0]
 80271a0:	0699      	lsls	r1, r3, #26
 80271a2:	bf42      	ittt	mi
 80271a4:	6833      	ldrmi	r3, [r6, #0]
 80271a6:	3302      	addmi	r3, #2
 80271a8:	6033      	strmi	r3, [r6, #0]
 80271aa:	6825      	ldr	r5, [r4, #0]
 80271ac:	f015 0506 	ands.w	r5, r5, #6
 80271b0:	d106      	bne.n	80271c0 <_printf_common+0x48>
 80271b2:	f104 0a19 	add.w	sl, r4, #25
 80271b6:	68e3      	ldr	r3, [r4, #12]
 80271b8:	6832      	ldr	r2, [r6, #0]
 80271ba:	1a9b      	subs	r3, r3, r2
 80271bc:	42ab      	cmp	r3, r5
 80271be:	dc26      	bgt.n	802720e <_printf_common+0x96>
 80271c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80271c4:	1e13      	subs	r3, r2, #0
 80271c6:	6822      	ldr	r2, [r4, #0]
 80271c8:	bf18      	it	ne
 80271ca:	2301      	movne	r3, #1
 80271cc:	0692      	lsls	r2, r2, #26
 80271ce:	d42b      	bmi.n	8027228 <_printf_common+0xb0>
 80271d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80271d4:	4649      	mov	r1, r9
 80271d6:	4638      	mov	r0, r7
 80271d8:	47c0      	blx	r8
 80271da:	3001      	adds	r0, #1
 80271dc:	d01e      	beq.n	802721c <_printf_common+0xa4>
 80271de:	6823      	ldr	r3, [r4, #0]
 80271e0:	6922      	ldr	r2, [r4, #16]
 80271e2:	f003 0306 	and.w	r3, r3, #6
 80271e6:	2b04      	cmp	r3, #4
 80271e8:	bf02      	ittt	eq
 80271ea:	68e5      	ldreq	r5, [r4, #12]
 80271ec:	6833      	ldreq	r3, [r6, #0]
 80271ee:	1aed      	subeq	r5, r5, r3
 80271f0:	68a3      	ldr	r3, [r4, #8]
 80271f2:	bf0c      	ite	eq
 80271f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80271f8:	2500      	movne	r5, #0
 80271fa:	4293      	cmp	r3, r2
 80271fc:	bfc4      	itt	gt
 80271fe:	1a9b      	subgt	r3, r3, r2
 8027200:	18ed      	addgt	r5, r5, r3
 8027202:	2600      	movs	r6, #0
 8027204:	341a      	adds	r4, #26
 8027206:	42b5      	cmp	r5, r6
 8027208:	d11a      	bne.n	8027240 <_printf_common+0xc8>
 802720a:	2000      	movs	r0, #0
 802720c:	e008      	b.n	8027220 <_printf_common+0xa8>
 802720e:	2301      	movs	r3, #1
 8027210:	4652      	mov	r2, sl
 8027212:	4649      	mov	r1, r9
 8027214:	4638      	mov	r0, r7
 8027216:	47c0      	blx	r8
 8027218:	3001      	adds	r0, #1
 802721a:	d103      	bne.n	8027224 <_printf_common+0xac>
 802721c:	f04f 30ff 	mov.w	r0, #4294967295
 8027220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027224:	3501      	adds	r5, #1
 8027226:	e7c6      	b.n	80271b6 <_printf_common+0x3e>
 8027228:	18e1      	adds	r1, r4, r3
 802722a:	1c5a      	adds	r2, r3, #1
 802722c:	2030      	movs	r0, #48	; 0x30
 802722e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8027232:	4422      	add	r2, r4
 8027234:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8027238:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802723c:	3302      	adds	r3, #2
 802723e:	e7c7      	b.n	80271d0 <_printf_common+0x58>
 8027240:	2301      	movs	r3, #1
 8027242:	4622      	mov	r2, r4
 8027244:	4649      	mov	r1, r9
 8027246:	4638      	mov	r0, r7
 8027248:	47c0      	blx	r8
 802724a:	3001      	adds	r0, #1
 802724c:	d0e6      	beq.n	802721c <_printf_common+0xa4>
 802724e:	3601      	adds	r6, #1
 8027250:	e7d9      	b.n	8027206 <_printf_common+0x8e>
	...

08027254 <_printf_i>:
 8027254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8027258:	7e0f      	ldrb	r7, [r1, #24]
 802725a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802725c:	2f78      	cmp	r7, #120	; 0x78
 802725e:	4691      	mov	r9, r2
 8027260:	4680      	mov	r8, r0
 8027262:	460c      	mov	r4, r1
 8027264:	469a      	mov	sl, r3
 8027266:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802726a:	d807      	bhi.n	802727c <_printf_i+0x28>
 802726c:	2f62      	cmp	r7, #98	; 0x62
 802726e:	d80a      	bhi.n	8027286 <_printf_i+0x32>
 8027270:	2f00      	cmp	r7, #0
 8027272:	f000 80d4 	beq.w	802741e <_printf_i+0x1ca>
 8027276:	2f58      	cmp	r7, #88	; 0x58
 8027278:	f000 80c0 	beq.w	80273fc <_printf_i+0x1a8>
 802727c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8027280:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8027284:	e03a      	b.n	80272fc <_printf_i+0xa8>
 8027286:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802728a:	2b15      	cmp	r3, #21
 802728c:	d8f6      	bhi.n	802727c <_printf_i+0x28>
 802728e:	a101      	add	r1, pc, #4	; (adr r1, 8027294 <_printf_i+0x40>)
 8027290:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8027294:	080272ed 	.word	0x080272ed
 8027298:	08027301 	.word	0x08027301
 802729c:	0802727d 	.word	0x0802727d
 80272a0:	0802727d 	.word	0x0802727d
 80272a4:	0802727d 	.word	0x0802727d
 80272a8:	0802727d 	.word	0x0802727d
 80272ac:	08027301 	.word	0x08027301
 80272b0:	0802727d 	.word	0x0802727d
 80272b4:	0802727d 	.word	0x0802727d
 80272b8:	0802727d 	.word	0x0802727d
 80272bc:	0802727d 	.word	0x0802727d
 80272c0:	08027405 	.word	0x08027405
 80272c4:	0802732d 	.word	0x0802732d
 80272c8:	080273bf 	.word	0x080273bf
 80272cc:	0802727d 	.word	0x0802727d
 80272d0:	0802727d 	.word	0x0802727d
 80272d4:	08027427 	.word	0x08027427
 80272d8:	0802727d 	.word	0x0802727d
 80272dc:	0802732d 	.word	0x0802732d
 80272e0:	0802727d 	.word	0x0802727d
 80272e4:	0802727d 	.word	0x0802727d
 80272e8:	080273c7 	.word	0x080273c7
 80272ec:	682b      	ldr	r3, [r5, #0]
 80272ee:	1d1a      	adds	r2, r3, #4
 80272f0:	681b      	ldr	r3, [r3, #0]
 80272f2:	602a      	str	r2, [r5, #0]
 80272f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80272f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80272fc:	2301      	movs	r3, #1
 80272fe:	e09f      	b.n	8027440 <_printf_i+0x1ec>
 8027300:	6820      	ldr	r0, [r4, #0]
 8027302:	682b      	ldr	r3, [r5, #0]
 8027304:	0607      	lsls	r7, r0, #24
 8027306:	f103 0104 	add.w	r1, r3, #4
 802730a:	6029      	str	r1, [r5, #0]
 802730c:	d501      	bpl.n	8027312 <_printf_i+0xbe>
 802730e:	681e      	ldr	r6, [r3, #0]
 8027310:	e003      	b.n	802731a <_printf_i+0xc6>
 8027312:	0646      	lsls	r6, r0, #25
 8027314:	d5fb      	bpl.n	802730e <_printf_i+0xba>
 8027316:	f9b3 6000 	ldrsh.w	r6, [r3]
 802731a:	2e00      	cmp	r6, #0
 802731c:	da03      	bge.n	8027326 <_printf_i+0xd2>
 802731e:	232d      	movs	r3, #45	; 0x2d
 8027320:	4276      	negs	r6, r6
 8027322:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027326:	485a      	ldr	r0, [pc, #360]	; (8027490 <_printf_i+0x23c>)
 8027328:	230a      	movs	r3, #10
 802732a:	e012      	b.n	8027352 <_printf_i+0xfe>
 802732c:	682b      	ldr	r3, [r5, #0]
 802732e:	6820      	ldr	r0, [r4, #0]
 8027330:	1d19      	adds	r1, r3, #4
 8027332:	6029      	str	r1, [r5, #0]
 8027334:	0605      	lsls	r5, r0, #24
 8027336:	d501      	bpl.n	802733c <_printf_i+0xe8>
 8027338:	681e      	ldr	r6, [r3, #0]
 802733a:	e002      	b.n	8027342 <_printf_i+0xee>
 802733c:	0641      	lsls	r1, r0, #25
 802733e:	d5fb      	bpl.n	8027338 <_printf_i+0xe4>
 8027340:	881e      	ldrh	r6, [r3, #0]
 8027342:	4853      	ldr	r0, [pc, #332]	; (8027490 <_printf_i+0x23c>)
 8027344:	2f6f      	cmp	r7, #111	; 0x6f
 8027346:	bf0c      	ite	eq
 8027348:	2308      	moveq	r3, #8
 802734a:	230a      	movne	r3, #10
 802734c:	2100      	movs	r1, #0
 802734e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8027352:	6865      	ldr	r5, [r4, #4]
 8027354:	60a5      	str	r5, [r4, #8]
 8027356:	2d00      	cmp	r5, #0
 8027358:	bfa2      	ittt	ge
 802735a:	6821      	ldrge	r1, [r4, #0]
 802735c:	f021 0104 	bicge.w	r1, r1, #4
 8027360:	6021      	strge	r1, [r4, #0]
 8027362:	b90e      	cbnz	r6, 8027368 <_printf_i+0x114>
 8027364:	2d00      	cmp	r5, #0
 8027366:	d04b      	beq.n	8027400 <_printf_i+0x1ac>
 8027368:	4615      	mov	r5, r2
 802736a:	fbb6 f1f3 	udiv	r1, r6, r3
 802736e:	fb03 6711 	mls	r7, r3, r1, r6
 8027372:	5dc7      	ldrb	r7, [r0, r7]
 8027374:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8027378:	4637      	mov	r7, r6
 802737a:	42bb      	cmp	r3, r7
 802737c:	460e      	mov	r6, r1
 802737e:	d9f4      	bls.n	802736a <_printf_i+0x116>
 8027380:	2b08      	cmp	r3, #8
 8027382:	d10b      	bne.n	802739c <_printf_i+0x148>
 8027384:	6823      	ldr	r3, [r4, #0]
 8027386:	07de      	lsls	r6, r3, #31
 8027388:	d508      	bpl.n	802739c <_printf_i+0x148>
 802738a:	6923      	ldr	r3, [r4, #16]
 802738c:	6861      	ldr	r1, [r4, #4]
 802738e:	4299      	cmp	r1, r3
 8027390:	bfde      	ittt	le
 8027392:	2330      	movle	r3, #48	; 0x30
 8027394:	f805 3c01 	strble.w	r3, [r5, #-1]
 8027398:	f105 35ff 	addle.w	r5, r5, #4294967295
 802739c:	1b52      	subs	r2, r2, r5
 802739e:	6122      	str	r2, [r4, #16]
 80273a0:	f8cd a000 	str.w	sl, [sp]
 80273a4:	464b      	mov	r3, r9
 80273a6:	aa03      	add	r2, sp, #12
 80273a8:	4621      	mov	r1, r4
 80273aa:	4640      	mov	r0, r8
 80273ac:	f7ff fee4 	bl	8027178 <_printf_common>
 80273b0:	3001      	adds	r0, #1
 80273b2:	d14a      	bne.n	802744a <_printf_i+0x1f6>
 80273b4:	f04f 30ff 	mov.w	r0, #4294967295
 80273b8:	b004      	add	sp, #16
 80273ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80273be:	6823      	ldr	r3, [r4, #0]
 80273c0:	f043 0320 	orr.w	r3, r3, #32
 80273c4:	6023      	str	r3, [r4, #0]
 80273c6:	4833      	ldr	r0, [pc, #204]	; (8027494 <_printf_i+0x240>)
 80273c8:	2778      	movs	r7, #120	; 0x78
 80273ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80273ce:	6823      	ldr	r3, [r4, #0]
 80273d0:	6829      	ldr	r1, [r5, #0]
 80273d2:	061f      	lsls	r7, r3, #24
 80273d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80273d8:	d402      	bmi.n	80273e0 <_printf_i+0x18c>
 80273da:	065f      	lsls	r7, r3, #25
 80273dc:	bf48      	it	mi
 80273de:	b2b6      	uxthmi	r6, r6
 80273e0:	07df      	lsls	r7, r3, #31
 80273e2:	bf48      	it	mi
 80273e4:	f043 0320 	orrmi.w	r3, r3, #32
 80273e8:	6029      	str	r1, [r5, #0]
 80273ea:	bf48      	it	mi
 80273ec:	6023      	strmi	r3, [r4, #0]
 80273ee:	b91e      	cbnz	r6, 80273f8 <_printf_i+0x1a4>
 80273f0:	6823      	ldr	r3, [r4, #0]
 80273f2:	f023 0320 	bic.w	r3, r3, #32
 80273f6:	6023      	str	r3, [r4, #0]
 80273f8:	2310      	movs	r3, #16
 80273fa:	e7a7      	b.n	802734c <_printf_i+0xf8>
 80273fc:	4824      	ldr	r0, [pc, #144]	; (8027490 <_printf_i+0x23c>)
 80273fe:	e7e4      	b.n	80273ca <_printf_i+0x176>
 8027400:	4615      	mov	r5, r2
 8027402:	e7bd      	b.n	8027380 <_printf_i+0x12c>
 8027404:	682b      	ldr	r3, [r5, #0]
 8027406:	6826      	ldr	r6, [r4, #0]
 8027408:	6961      	ldr	r1, [r4, #20]
 802740a:	1d18      	adds	r0, r3, #4
 802740c:	6028      	str	r0, [r5, #0]
 802740e:	0635      	lsls	r5, r6, #24
 8027410:	681b      	ldr	r3, [r3, #0]
 8027412:	d501      	bpl.n	8027418 <_printf_i+0x1c4>
 8027414:	6019      	str	r1, [r3, #0]
 8027416:	e002      	b.n	802741e <_printf_i+0x1ca>
 8027418:	0670      	lsls	r0, r6, #25
 802741a:	d5fb      	bpl.n	8027414 <_printf_i+0x1c0>
 802741c:	8019      	strh	r1, [r3, #0]
 802741e:	2300      	movs	r3, #0
 8027420:	6123      	str	r3, [r4, #16]
 8027422:	4615      	mov	r5, r2
 8027424:	e7bc      	b.n	80273a0 <_printf_i+0x14c>
 8027426:	682b      	ldr	r3, [r5, #0]
 8027428:	1d1a      	adds	r2, r3, #4
 802742a:	602a      	str	r2, [r5, #0]
 802742c:	681d      	ldr	r5, [r3, #0]
 802742e:	6862      	ldr	r2, [r4, #4]
 8027430:	2100      	movs	r1, #0
 8027432:	4628      	mov	r0, r5
 8027434:	f7d8 feec 	bl	8000210 <memchr>
 8027438:	b108      	cbz	r0, 802743e <_printf_i+0x1ea>
 802743a:	1b40      	subs	r0, r0, r5
 802743c:	6060      	str	r0, [r4, #4]
 802743e:	6863      	ldr	r3, [r4, #4]
 8027440:	6123      	str	r3, [r4, #16]
 8027442:	2300      	movs	r3, #0
 8027444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027448:	e7aa      	b.n	80273a0 <_printf_i+0x14c>
 802744a:	6923      	ldr	r3, [r4, #16]
 802744c:	462a      	mov	r2, r5
 802744e:	4649      	mov	r1, r9
 8027450:	4640      	mov	r0, r8
 8027452:	47d0      	blx	sl
 8027454:	3001      	adds	r0, #1
 8027456:	d0ad      	beq.n	80273b4 <_printf_i+0x160>
 8027458:	6823      	ldr	r3, [r4, #0]
 802745a:	079b      	lsls	r3, r3, #30
 802745c:	d413      	bmi.n	8027486 <_printf_i+0x232>
 802745e:	68e0      	ldr	r0, [r4, #12]
 8027460:	9b03      	ldr	r3, [sp, #12]
 8027462:	4298      	cmp	r0, r3
 8027464:	bfb8      	it	lt
 8027466:	4618      	movlt	r0, r3
 8027468:	e7a6      	b.n	80273b8 <_printf_i+0x164>
 802746a:	2301      	movs	r3, #1
 802746c:	4632      	mov	r2, r6
 802746e:	4649      	mov	r1, r9
 8027470:	4640      	mov	r0, r8
 8027472:	47d0      	blx	sl
 8027474:	3001      	adds	r0, #1
 8027476:	d09d      	beq.n	80273b4 <_printf_i+0x160>
 8027478:	3501      	adds	r5, #1
 802747a:	68e3      	ldr	r3, [r4, #12]
 802747c:	9903      	ldr	r1, [sp, #12]
 802747e:	1a5b      	subs	r3, r3, r1
 8027480:	42ab      	cmp	r3, r5
 8027482:	dcf2      	bgt.n	802746a <_printf_i+0x216>
 8027484:	e7eb      	b.n	802745e <_printf_i+0x20a>
 8027486:	2500      	movs	r5, #0
 8027488:	f104 0619 	add.w	r6, r4, #25
 802748c:	e7f5      	b.n	802747a <_printf_i+0x226>
 802748e:	bf00      	nop
 8027490:	0802bbad 	.word	0x0802bbad
 8027494:	0802bbbe 	.word	0x0802bbbe

08027498 <__sflush_r>:
 8027498:	898a      	ldrh	r2, [r1, #12]
 802749a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802749e:	4605      	mov	r5, r0
 80274a0:	0710      	lsls	r0, r2, #28
 80274a2:	460c      	mov	r4, r1
 80274a4:	d458      	bmi.n	8027558 <__sflush_r+0xc0>
 80274a6:	684b      	ldr	r3, [r1, #4]
 80274a8:	2b00      	cmp	r3, #0
 80274aa:	dc05      	bgt.n	80274b8 <__sflush_r+0x20>
 80274ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80274ae:	2b00      	cmp	r3, #0
 80274b0:	dc02      	bgt.n	80274b8 <__sflush_r+0x20>
 80274b2:	2000      	movs	r0, #0
 80274b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80274b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80274ba:	2e00      	cmp	r6, #0
 80274bc:	d0f9      	beq.n	80274b2 <__sflush_r+0x1a>
 80274be:	2300      	movs	r3, #0
 80274c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80274c4:	682f      	ldr	r7, [r5, #0]
 80274c6:	6a21      	ldr	r1, [r4, #32]
 80274c8:	602b      	str	r3, [r5, #0]
 80274ca:	d032      	beq.n	8027532 <__sflush_r+0x9a>
 80274cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80274ce:	89a3      	ldrh	r3, [r4, #12]
 80274d0:	075a      	lsls	r2, r3, #29
 80274d2:	d505      	bpl.n	80274e0 <__sflush_r+0x48>
 80274d4:	6863      	ldr	r3, [r4, #4]
 80274d6:	1ac0      	subs	r0, r0, r3
 80274d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80274da:	b10b      	cbz	r3, 80274e0 <__sflush_r+0x48>
 80274dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80274de:	1ac0      	subs	r0, r0, r3
 80274e0:	2300      	movs	r3, #0
 80274e2:	4602      	mov	r2, r0
 80274e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80274e6:	6a21      	ldr	r1, [r4, #32]
 80274e8:	4628      	mov	r0, r5
 80274ea:	47b0      	blx	r6
 80274ec:	1c43      	adds	r3, r0, #1
 80274ee:	89a3      	ldrh	r3, [r4, #12]
 80274f0:	d106      	bne.n	8027500 <__sflush_r+0x68>
 80274f2:	6829      	ldr	r1, [r5, #0]
 80274f4:	291d      	cmp	r1, #29
 80274f6:	d82b      	bhi.n	8027550 <__sflush_r+0xb8>
 80274f8:	4a29      	ldr	r2, [pc, #164]	; (80275a0 <__sflush_r+0x108>)
 80274fa:	410a      	asrs	r2, r1
 80274fc:	07d6      	lsls	r6, r2, #31
 80274fe:	d427      	bmi.n	8027550 <__sflush_r+0xb8>
 8027500:	2200      	movs	r2, #0
 8027502:	6062      	str	r2, [r4, #4]
 8027504:	04d9      	lsls	r1, r3, #19
 8027506:	6922      	ldr	r2, [r4, #16]
 8027508:	6022      	str	r2, [r4, #0]
 802750a:	d504      	bpl.n	8027516 <__sflush_r+0x7e>
 802750c:	1c42      	adds	r2, r0, #1
 802750e:	d101      	bne.n	8027514 <__sflush_r+0x7c>
 8027510:	682b      	ldr	r3, [r5, #0]
 8027512:	b903      	cbnz	r3, 8027516 <__sflush_r+0x7e>
 8027514:	6560      	str	r0, [r4, #84]	; 0x54
 8027516:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027518:	602f      	str	r7, [r5, #0]
 802751a:	2900      	cmp	r1, #0
 802751c:	d0c9      	beq.n	80274b2 <__sflush_r+0x1a>
 802751e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027522:	4299      	cmp	r1, r3
 8027524:	d002      	beq.n	802752c <__sflush_r+0x94>
 8027526:	4628      	mov	r0, r5
 8027528:	f7ff fc96 	bl	8026e58 <_free_r>
 802752c:	2000      	movs	r0, #0
 802752e:	6360      	str	r0, [r4, #52]	; 0x34
 8027530:	e7c0      	b.n	80274b4 <__sflush_r+0x1c>
 8027532:	2301      	movs	r3, #1
 8027534:	4628      	mov	r0, r5
 8027536:	47b0      	blx	r6
 8027538:	1c41      	adds	r1, r0, #1
 802753a:	d1c8      	bne.n	80274ce <__sflush_r+0x36>
 802753c:	682b      	ldr	r3, [r5, #0]
 802753e:	2b00      	cmp	r3, #0
 8027540:	d0c5      	beq.n	80274ce <__sflush_r+0x36>
 8027542:	2b1d      	cmp	r3, #29
 8027544:	d001      	beq.n	802754a <__sflush_r+0xb2>
 8027546:	2b16      	cmp	r3, #22
 8027548:	d101      	bne.n	802754e <__sflush_r+0xb6>
 802754a:	602f      	str	r7, [r5, #0]
 802754c:	e7b1      	b.n	80274b2 <__sflush_r+0x1a>
 802754e:	89a3      	ldrh	r3, [r4, #12]
 8027550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027554:	81a3      	strh	r3, [r4, #12]
 8027556:	e7ad      	b.n	80274b4 <__sflush_r+0x1c>
 8027558:	690f      	ldr	r7, [r1, #16]
 802755a:	2f00      	cmp	r7, #0
 802755c:	d0a9      	beq.n	80274b2 <__sflush_r+0x1a>
 802755e:	0793      	lsls	r3, r2, #30
 8027560:	680e      	ldr	r6, [r1, #0]
 8027562:	bf08      	it	eq
 8027564:	694b      	ldreq	r3, [r1, #20]
 8027566:	600f      	str	r7, [r1, #0]
 8027568:	bf18      	it	ne
 802756a:	2300      	movne	r3, #0
 802756c:	eba6 0807 	sub.w	r8, r6, r7
 8027570:	608b      	str	r3, [r1, #8]
 8027572:	f1b8 0f00 	cmp.w	r8, #0
 8027576:	dd9c      	ble.n	80274b2 <__sflush_r+0x1a>
 8027578:	6a21      	ldr	r1, [r4, #32]
 802757a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802757c:	4643      	mov	r3, r8
 802757e:	463a      	mov	r2, r7
 8027580:	4628      	mov	r0, r5
 8027582:	47b0      	blx	r6
 8027584:	2800      	cmp	r0, #0
 8027586:	dc06      	bgt.n	8027596 <__sflush_r+0xfe>
 8027588:	89a3      	ldrh	r3, [r4, #12]
 802758a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802758e:	81a3      	strh	r3, [r4, #12]
 8027590:	f04f 30ff 	mov.w	r0, #4294967295
 8027594:	e78e      	b.n	80274b4 <__sflush_r+0x1c>
 8027596:	4407      	add	r7, r0
 8027598:	eba8 0800 	sub.w	r8, r8, r0
 802759c:	e7e9      	b.n	8027572 <__sflush_r+0xda>
 802759e:	bf00      	nop
 80275a0:	dfbffffe 	.word	0xdfbffffe

080275a4 <_fflush_r>:
 80275a4:	b538      	push	{r3, r4, r5, lr}
 80275a6:	690b      	ldr	r3, [r1, #16]
 80275a8:	4605      	mov	r5, r0
 80275aa:	460c      	mov	r4, r1
 80275ac:	b913      	cbnz	r3, 80275b4 <_fflush_r+0x10>
 80275ae:	2500      	movs	r5, #0
 80275b0:	4628      	mov	r0, r5
 80275b2:	bd38      	pop	{r3, r4, r5, pc}
 80275b4:	b118      	cbz	r0, 80275be <_fflush_r+0x1a>
 80275b6:	6a03      	ldr	r3, [r0, #32]
 80275b8:	b90b      	cbnz	r3, 80275be <_fflush_r+0x1a>
 80275ba:	f7ff fa87 	bl	8026acc <__sinit>
 80275be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80275c2:	2b00      	cmp	r3, #0
 80275c4:	d0f3      	beq.n	80275ae <_fflush_r+0xa>
 80275c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80275c8:	07d0      	lsls	r0, r2, #31
 80275ca:	d404      	bmi.n	80275d6 <_fflush_r+0x32>
 80275cc:	0599      	lsls	r1, r3, #22
 80275ce:	d402      	bmi.n	80275d6 <_fflush_r+0x32>
 80275d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80275d2:	f7ff fbd3 	bl	8026d7c <__retarget_lock_acquire_recursive>
 80275d6:	4628      	mov	r0, r5
 80275d8:	4621      	mov	r1, r4
 80275da:	f7ff ff5d 	bl	8027498 <__sflush_r>
 80275de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80275e0:	07da      	lsls	r2, r3, #31
 80275e2:	4605      	mov	r5, r0
 80275e4:	d4e4      	bmi.n	80275b0 <_fflush_r+0xc>
 80275e6:	89a3      	ldrh	r3, [r4, #12]
 80275e8:	059b      	lsls	r3, r3, #22
 80275ea:	d4e1      	bmi.n	80275b0 <_fflush_r+0xc>
 80275ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80275ee:	f7ff fbc6 	bl	8026d7e <__retarget_lock_release_recursive>
 80275f2:	e7dd      	b.n	80275b0 <_fflush_r+0xc>

080275f4 <__swbuf_r>:
 80275f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80275f6:	460e      	mov	r6, r1
 80275f8:	4614      	mov	r4, r2
 80275fa:	4605      	mov	r5, r0
 80275fc:	b118      	cbz	r0, 8027606 <__swbuf_r+0x12>
 80275fe:	6a03      	ldr	r3, [r0, #32]
 8027600:	b90b      	cbnz	r3, 8027606 <__swbuf_r+0x12>
 8027602:	f7ff fa63 	bl	8026acc <__sinit>
 8027606:	69a3      	ldr	r3, [r4, #24]
 8027608:	60a3      	str	r3, [r4, #8]
 802760a:	89a3      	ldrh	r3, [r4, #12]
 802760c:	071a      	lsls	r2, r3, #28
 802760e:	d525      	bpl.n	802765c <__swbuf_r+0x68>
 8027610:	6923      	ldr	r3, [r4, #16]
 8027612:	b31b      	cbz	r3, 802765c <__swbuf_r+0x68>
 8027614:	6823      	ldr	r3, [r4, #0]
 8027616:	6922      	ldr	r2, [r4, #16]
 8027618:	1a98      	subs	r0, r3, r2
 802761a:	6963      	ldr	r3, [r4, #20]
 802761c:	b2f6      	uxtb	r6, r6
 802761e:	4283      	cmp	r3, r0
 8027620:	4637      	mov	r7, r6
 8027622:	dc04      	bgt.n	802762e <__swbuf_r+0x3a>
 8027624:	4621      	mov	r1, r4
 8027626:	4628      	mov	r0, r5
 8027628:	f7ff ffbc 	bl	80275a4 <_fflush_r>
 802762c:	b9e0      	cbnz	r0, 8027668 <__swbuf_r+0x74>
 802762e:	68a3      	ldr	r3, [r4, #8]
 8027630:	3b01      	subs	r3, #1
 8027632:	60a3      	str	r3, [r4, #8]
 8027634:	6823      	ldr	r3, [r4, #0]
 8027636:	1c5a      	adds	r2, r3, #1
 8027638:	6022      	str	r2, [r4, #0]
 802763a:	701e      	strb	r6, [r3, #0]
 802763c:	6962      	ldr	r2, [r4, #20]
 802763e:	1c43      	adds	r3, r0, #1
 8027640:	429a      	cmp	r2, r3
 8027642:	d004      	beq.n	802764e <__swbuf_r+0x5a>
 8027644:	89a3      	ldrh	r3, [r4, #12]
 8027646:	07db      	lsls	r3, r3, #31
 8027648:	d506      	bpl.n	8027658 <__swbuf_r+0x64>
 802764a:	2e0a      	cmp	r6, #10
 802764c:	d104      	bne.n	8027658 <__swbuf_r+0x64>
 802764e:	4621      	mov	r1, r4
 8027650:	4628      	mov	r0, r5
 8027652:	f7ff ffa7 	bl	80275a4 <_fflush_r>
 8027656:	b938      	cbnz	r0, 8027668 <__swbuf_r+0x74>
 8027658:	4638      	mov	r0, r7
 802765a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802765c:	4621      	mov	r1, r4
 802765e:	4628      	mov	r0, r5
 8027660:	f000 f806 	bl	8027670 <__swsetup_r>
 8027664:	2800      	cmp	r0, #0
 8027666:	d0d5      	beq.n	8027614 <__swbuf_r+0x20>
 8027668:	f04f 37ff 	mov.w	r7, #4294967295
 802766c:	e7f4      	b.n	8027658 <__swbuf_r+0x64>
	...

08027670 <__swsetup_r>:
 8027670:	b538      	push	{r3, r4, r5, lr}
 8027672:	4b2a      	ldr	r3, [pc, #168]	; (802771c <__swsetup_r+0xac>)
 8027674:	4605      	mov	r5, r0
 8027676:	6818      	ldr	r0, [r3, #0]
 8027678:	460c      	mov	r4, r1
 802767a:	b118      	cbz	r0, 8027684 <__swsetup_r+0x14>
 802767c:	6a03      	ldr	r3, [r0, #32]
 802767e:	b90b      	cbnz	r3, 8027684 <__swsetup_r+0x14>
 8027680:	f7ff fa24 	bl	8026acc <__sinit>
 8027684:	89a3      	ldrh	r3, [r4, #12]
 8027686:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802768a:	0718      	lsls	r0, r3, #28
 802768c:	d422      	bmi.n	80276d4 <__swsetup_r+0x64>
 802768e:	06d9      	lsls	r1, r3, #27
 8027690:	d407      	bmi.n	80276a2 <__swsetup_r+0x32>
 8027692:	2309      	movs	r3, #9
 8027694:	602b      	str	r3, [r5, #0]
 8027696:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802769a:	81a3      	strh	r3, [r4, #12]
 802769c:	f04f 30ff 	mov.w	r0, #4294967295
 80276a0:	e034      	b.n	802770c <__swsetup_r+0x9c>
 80276a2:	0758      	lsls	r0, r3, #29
 80276a4:	d512      	bpl.n	80276cc <__swsetup_r+0x5c>
 80276a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80276a8:	b141      	cbz	r1, 80276bc <__swsetup_r+0x4c>
 80276aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80276ae:	4299      	cmp	r1, r3
 80276b0:	d002      	beq.n	80276b8 <__swsetup_r+0x48>
 80276b2:	4628      	mov	r0, r5
 80276b4:	f7ff fbd0 	bl	8026e58 <_free_r>
 80276b8:	2300      	movs	r3, #0
 80276ba:	6363      	str	r3, [r4, #52]	; 0x34
 80276bc:	89a3      	ldrh	r3, [r4, #12]
 80276be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80276c2:	81a3      	strh	r3, [r4, #12]
 80276c4:	2300      	movs	r3, #0
 80276c6:	6063      	str	r3, [r4, #4]
 80276c8:	6923      	ldr	r3, [r4, #16]
 80276ca:	6023      	str	r3, [r4, #0]
 80276cc:	89a3      	ldrh	r3, [r4, #12]
 80276ce:	f043 0308 	orr.w	r3, r3, #8
 80276d2:	81a3      	strh	r3, [r4, #12]
 80276d4:	6923      	ldr	r3, [r4, #16]
 80276d6:	b94b      	cbnz	r3, 80276ec <__swsetup_r+0x7c>
 80276d8:	89a3      	ldrh	r3, [r4, #12]
 80276da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80276de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80276e2:	d003      	beq.n	80276ec <__swsetup_r+0x7c>
 80276e4:	4621      	mov	r1, r4
 80276e6:	4628      	mov	r0, r5
 80276e8:	f000 f840 	bl	802776c <__smakebuf_r>
 80276ec:	89a0      	ldrh	r0, [r4, #12]
 80276ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80276f2:	f010 0301 	ands.w	r3, r0, #1
 80276f6:	d00a      	beq.n	802770e <__swsetup_r+0x9e>
 80276f8:	2300      	movs	r3, #0
 80276fa:	60a3      	str	r3, [r4, #8]
 80276fc:	6963      	ldr	r3, [r4, #20]
 80276fe:	425b      	negs	r3, r3
 8027700:	61a3      	str	r3, [r4, #24]
 8027702:	6923      	ldr	r3, [r4, #16]
 8027704:	b943      	cbnz	r3, 8027718 <__swsetup_r+0xa8>
 8027706:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802770a:	d1c4      	bne.n	8027696 <__swsetup_r+0x26>
 802770c:	bd38      	pop	{r3, r4, r5, pc}
 802770e:	0781      	lsls	r1, r0, #30
 8027710:	bf58      	it	pl
 8027712:	6963      	ldrpl	r3, [r4, #20]
 8027714:	60a3      	str	r3, [r4, #8]
 8027716:	e7f4      	b.n	8027702 <__swsetup_r+0x92>
 8027718:	2000      	movs	r0, #0
 802771a:	e7f7      	b.n	802770c <__swsetup_r+0x9c>
 802771c:	20000100 	.word	0x20000100

08027720 <__swhatbuf_r>:
 8027720:	b570      	push	{r4, r5, r6, lr}
 8027722:	460c      	mov	r4, r1
 8027724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027728:	2900      	cmp	r1, #0
 802772a:	b096      	sub	sp, #88	; 0x58
 802772c:	4615      	mov	r5, r2
 802772e:	461e      	mov	r6, r3
 8027730:	da0d      	bge.n	802774e <__swhatbuf_r+0x2e>
 8027732:	89a3      	ldrh	r3, [r4, #12]
 8027734:	f013 0f80 	tst.w	r3, #128	; 0x80
 8027738:	f04f 0100 	mov.w	r1, #0
 802773c:	bf0c      	ite	eq
 802773e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8027742:	2340      	movne	r3, #64	; 0x40
 8027744:	2000      	movs	r0, #0
 8027746:	6031      	str	r1, [r6, #0]
 8027748:	602b      	str	r3, [r5, #0]
 802774a:	b016      	add	sp, #88	; 0x58
 802774c:	bd70      	pop	{r4, r5, r6, pc}
 802774e:	466a      	mov	r2, sp
 8027750:	f000 f848 	bl	80277e4 <_fstat_r>
 8027754:	2800      	cmp	r0, #0
 8027756:	dbec      	blt.n	8027732 <__swhatbuf_r+0x12>
 8027758:	9901      	ldr	r1, [sp, #4]
 802775a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 802775e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8027762:	4259      	negs	r1, r3
 8027764:	4159      	adcs	r1, r3
 8027766:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802776a:	e7eb      	b.n	8027744 <__swhatbuf_r+0x24>

0802776c <__smakebuf_r>:
 802776c:	898b      	ldrh	r3, [r1, #12]
 802776e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8027770:	079d      	lsls	r5, r3, #30
 8027772:	4606      	mov	r6, r0
 8027774:	460c      	mov	r4, r1
 8027776:	d507      	bpl.n	8027788 <__smakebuf_r+0x1c>
 8027778:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802777c:	6023      	str	r3, [r4, #0]
 802777e:	6123      	str	r3, [r4, #16]
 8027780:	2301      	movs	r3, #1
 8027782:	6163      	str	r3, [r4, #20]
 8027784:	b002      	add	sp, #8
 8027786:	bd70      	pop	{r4, r5, r6, pc}
 8027788:	ab01      	add	r3, sp, #4
 802778a:	466a      	mov	r2, sp
 802778c:	f7ff ffc8 	bl	8027720 <__swhatbuf_r>
 8027790:	9900      	ldr	r1, [sp, #0]
 8027792:	4605      	mov	r5, r0
 8027794:	4630      	mov	r0, r6
 8027796:	f7ff f885 	bl	80268a4 <_malloc_r>
 802779a:	b948      	cbnz	r0, 80277b0 <__smakebuf_r+0x44>
 802779c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80277a0:	059a      	lsls	r2, r3, #22
 80277a2:	d4ef      	bmi.n	8027784 <__smakebuf_r+0x18>
 80277a4:	f023 0303 	bic.w	r3, r3, #3
 80277a8:	f043 0302 	orr.w	r3, r3, #2
 80277ac:	81a3      	strh	r3, [r4, #12]
 80277ae:	e7e3      	b.n	8027778 <__smakebuf_r+0xc>
 80277b0:	89a3      	ldrh	r3, [r4, #12]
 80277b2:	6020      	str	r0, [r4, #0]
 80277b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80277b8:	81a3      	strh	r3, [r4, #12]
 80277ba:	9b00      	ldr	r3, [sp, #0]
 80277bc:	6163      	str	r3, [r4, #20]
 80277be:	9b01      	ldr	r3, [sp, #4]
 80277c0:	6120      	str	r0, [r4, #16]
 80277c2:	b15b      	cbz	r3, 80277dc <__smakebuf_r+0x70>
 80277c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80277c8:	4630      	mov	r0, r6
 80277ca:	f000 f81d 	bl	8027808 <_isatty_r>
 80277ce:	b128      	cbz	r0, 80277dc <__smakebuf_r+0x70>
 80277d0:	89a3      	ldrh	r3, [r4, #12]
 80277d2:	f023 0303 	bic.w	r3, r3, #3
 80277d6:	f043 0301 	orr.w	r3, r3, #1
 80277da:	81a3      	strh	r3, [r4, #12]
 80277dc:	89a3      	ldrh	r3, [r4, #12]
 80277de:	431d      	orrs	r5, r3
 80277e0:	81a5      	strh	r5, [r4, #12]
 80277e2:	e7cf      	b.n	8027784 <__smakebuf_r+0x18>

080277e4 <_fstat_r>:
 80277e4:	b538      	push	{r3, r4, r5, lr}
 80277e6:	4d07      	ldr	r5, [pc, #28]	; (8027804 <_fstat_r+0x20>)
 80277e8:	2300      	movs	r3, #0
 80277ea:	4604      	mov	r4, r0
 80277ec:	4608      	mov	r0, r1
 80277ee:	4611      	mov	r1, r2
 80277f0:	602b      	str	r3, [r5, #0]
 80277f2:	f7dc fa78 	bl	8003ce6 <_fstat>
 80277f6:	1c43      	adds	r3, r0, #1
 80277f8:	d102      	bne.n	8027800 <_fstat_r+0x1c>
 80277fa:	682b      	ldr	r3, [r5, #0]
 80277fc:	b103      	cbz	r3, 8027800 <_fstat_r+0x1c>
 80277fe:	6023      	str	r3, [r4, #0]
 8027800:	bd38      	pop	{r3, r4, r5, pc}
 8027802:	bf00      	nop
 8027804:	2000c8ec 	.word	0x2000c8ec

08027808 <_isatty_r>:
 8027808:	b538      	push	{r3, r4, r5, lr}
 802780a:	4d06      	ldr	r5, [pc, #24]	; (8027824 <_isatty_r+0x1c>)
 802780c:	2300      	movs	r3, #0
 802780e:	4604      	mov	r4, r0
 8027810:	4608      	mov	r0, r1
 8027812:	602b      	str	r3, [r5, #0]
 8027814:	f7dc fa77 	bl	8003d06 <_isatty>
 8027818:	1c43      	adds	r3, r0, #1
 802781a:	d102      	bne.n	8027822 <_isatty_r+0x1a>
 802781c:	682b      	ldr	r3, [r5, #0]
 802781e:	b103      	cbz	r3, 8027822 <_isatty_r+0x1a>
 8027820:	6023      	str	r3, [r4, #0]
 8027822:	bd38      	pop	{r3, r4, r5, pc}
 8027824:	2000c8ec 	.word	0x2000c8ec

08027828 <_init>:
 8027828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802782a:	bf00      	nop
 802782c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802782e:	bc08      	pop	{r3}
 8027830:	469e      	mov	lr, r3
 8027832:	4770      	bx	lr

08027834 <_fini>:
 8027834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027836:	bf00      	nop
 8027838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802783a:	bc08      	pop	{r3}
 802783c:	469e      	mov	lr, r3
 802783e:	4770      	bx	lr

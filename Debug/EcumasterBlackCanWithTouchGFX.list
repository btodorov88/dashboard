
EcumasterBlackCanWithTouchGFX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00026fa4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004390  08027174  08027174  00037174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00003c8e  0802b504  0802b504  0003b504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 000334f8  0802f194  0802f194  0003f194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000234  0806268c  0806268c  0007268c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  080628c0  080628c0  00080110  2**0
                  CONTENTS
  7 .ARM          00000008  080628c0  080628c0  000728c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  080628c8  080628c8  00080110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  080628c8  080628c8  000728c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  080628dc  080628dc  000728dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000110  20000000  080628e4  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000c8a4  20000110  080629f4  00080110  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  2000c9b4  080629f4  0008c9b4  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00080110  2**0
                  CONTENTS, READONLY
 15 .comment      000000c2  00000000  00000000  00080140  2**0
                  CONTENTS, READONLY
 16 .debug_info   000597bd  00000000  00000000  00080202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000105c4  00000000  00000000  000d99bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00004148  00000000  00000000  000e9f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00003021  00000000  00000000  000ee0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0003a452  00000000  00000000  000f10f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00051629  00000000  00000000  0012b543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00131552  00000000  00000000  0017cb6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  00011954  00000000  00000000  002ae0c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000003f  00000000  00000000  002bfa14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000110 	.word	0x20000110
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0802715c 	.word	0x0802715c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000114 	.word	0x20000114
 800020c:	0802715c 	.word	0x0802715c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	; 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__gedf2>:
 800087c:	f04f 3cff 	mov.w	ip, #4294967295
 8000880:	e006      	b.n	8000890 <__cmpdf2+0x4>
 8000882:	bf00      	nop

08000884 <__ledf2>:
 8000884:	f04f 0c01 	mov.w	ip, #1
 8000888:	e002      	b.n	8000890 <__cmpdf2+0x4>
 800088a:	bf00      	nop

0800088c <__cmpdf2>:
 800088c:	f04f 0c01 	mov.w	ip, #1
 8000890:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000894:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000898:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800089c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008a0:	bf18      	it	ne
 80008a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80008a6:	d01b      	beq.n	80008e0 <__cmpdf2+0x54>
 80008a8:	b001      	add	sp, #4
 80008aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80008ae:	bf0c      	ite	eq
 80008b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008b4:	ea91 0f03 	teqne	r1, r3
 80008b8:	bf02      	ittt	eq
 80008ba:	ea90 0f02 	teqeq	r0, r2
 80008be:	2000      	moveq	r0, #0
 80008c0:	4770      	bxeq	lr
 80008c2:	f110 0f00 	cmn.w	r0, #0
 80008c6:	ea91 0f03 	teq	r1, r3
 80008ca:	bf58      	it	pl
 80008cc:	4299      	cmppl	r1, r3
 80008ce:	bf08      	it	eq
 80008d0:	4290      	cmpeq	r0, r2
 80008d2:	bf2c      	ite	cs
 80008d4:	17d8      	asrcs	r0, r3, #31
 80008d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008da:	f040 0001 	orr.w	r0, r0, #1
 80008de:	4770      	bx	lr
 80008e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008e8:	d102      	bne.n	80008f0 <__cmpdf2+0x64>
 80008ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ee:	d107      	bne.n	8000900 <__cmpdf2+0x74>
 80008f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008f8:	d1d6      	bne.n	80008a8 <__cmpdf2+0x1c>
 80008fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008fe:	d0d3      	beq.n	80008a8 <__cmpdf2+0x1c>
 8000900:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop

08000908 <__aeabi_cdrcmple>:
 8000908:	4684      	mov	ip, r0
 800090a:	4610      	mov	r0, r2
 800090c:	4662      	mov	r2, ip
 800090e:	468c      	mov	ip, r1
 8000910:	4619      	mov	r1, r3
 8000912:	4663      	mov	r3, ip
 8000914:	e000      	b.n	8000918 <__aeabi_cdcmpeq>
 8000916:	bf00      	nop

08000918 <__aeabi_cdcmpeq>:
 8000918:	b501      	push	{r0, lr}
 800091a:	f7ff ffb7 	bl	800088c <__cmpdf2>
 800091e:	2800      	cmp	r0, #0
 8000920:	bf48      	it	mi
 8000922:	f110 0f00 	cmnmi.w	r0, #0
 8000926:	bd01      	pop	{r0, pc}

08000928 <__aeabi_dcmpeq>:
 8000928:	f84d ed08 	str.w	lr, [sp, #-8]!
 800092c:	f7ff fff4 	bl	8000918 <__aeabi_cdcmpeq>
 8000930:	bf0c      	ite	eq
 8000932:	2001      	moveq	r0, #1
 8000934:	2000      	movne	r0, #0
 8000936:	f85d fb08 	ldr.w	pc, [sp], #8
 800093a:	bf00      	nop

0800093c <__aeabi_dcmplt>:
 800093c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000940:	f7ff ffea 	bl	8000918 <__aeabi_cdcmpeq>
 8000944:	bf34      	ite	cc
 8000946:	2001      	movcc	r0, #1
 8000948:	2000      	movcs	r0, #0
 800094a:	f85d fb08 	ldr.w	pc, [sp], #8
 800094e:	bf00      	nop

08000950 <__aeabi_dcmple>:
 8000950:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000954:	f7ff ffe0 	bl	8000918 <__aeabi_cdcmpeq>
 8000958:	bf94      	ite	ls
 800095a:	2001      	movls	r0, #1
 800095c:	2000      	movhi	r0, #0
 800095e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000962:	bf00      	nop

08000964 <__aeabi_dcmpge>:
 8000964:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000968:	f7ff ffce 	bl	8000908 <__aeabi_cdrcmple>
 800096c:	bf94      	ite	ls
 800096e:	2001      	movls	r0, #1
 8000970:	2000      	movhi	r0, #0
 8000972:	f85d fb08 	ldr.w	pc, [sp], #8
 8000976:	bf00      	nop

08000978 <__aeabi_dcmpgt>:
 8000978:	f84d ed08 	str.w	lr, [sp, #-8]!
 800097c:	f7ff ffc4 	bl	8000908 <__aeabi_cdrcmple>
 8000980:	bf34      	ite	cc
 8000982:	2001      	movcc	r0, #1
 8000984:	2000      	movcs	r0, #0
 8000986:	f85d fb08 	ldr.w	pc, [sp], #8
 800098a:	bf00      	nop

0800098c <__aeabi_d2iz>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000994:	d215      	bcs.n	80009c2 <__aeabi_d2iz+0x36>
 8000996:	d511      	bpl.n	80009bc <__aeabi_d2iz+0x30>
 8000998:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800099c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a0:	d912      	bls.n	80009c8 <__aeabi_d2iz+0x3c>
 80009a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009b2:	fa23 f002 	lsr.w	r0, r3, r2
 80009b6:	bf18      	it	ne
 80009b8:	4240      	negne	r0, r0
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009c6:	d105      	bne.n	80009d4 <__aeabi_d2iz+0x48>
 80009c8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009cc:	bf08      	it	eq
 80009ce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_d2f>:
 80009dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009e4:	bf24      	itt	cs
 80009e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ee:	d90d      	bls.n	8000a0c <__aeabi_d2f+0x30>
 80009f0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009fc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a04:	bf08      	it	eq
 8000a06:	f020 0001 	biceq.w	r0, r0, #1
 8000a0a:	4770      	bx	lr
 8000a0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a10:	d121      	bne.n	8000a56 <__aeabi_d2f+0x7a>
 8000a12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a16:	bfbc      	itt	lt
 8000a18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a1c:	4770      	bxlt	lr
 8000a1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a26:	f1c2 0218 	rsb	r2, r2, #24
 8000a2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a32:	fa20 f002 	lsr.w	r0, r0, r2
 8000a36:	bf18      	it	ne
 8000a38:	f040 0001 	orrne.w	r0, r0, #1
 8000a3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a48:	ea40 000c 	orr.w	r0, r0, ip
 8000a4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a54:	e7cc      	b.n	80009f0 <__aeabi_d2f+0x14>
 8000a56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a5a:	d107      	bne.n	8000a6c <__aeabi_d2f+0x90>
 8000a5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a60:	bf1e      	ittt	ne
 8000a62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a6a:	4770      	bxne	lr
 8000a6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b970 	b.w	8000d74 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9e08      	ldr	r6, [sp, #32]
 8000ab2:	460d      	mov	r5, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	460f      	mov	r7, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14a      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4694      	mov	ip, r2
 8000ac0:	d965      	bls.n	8000b8e <__udivmoddi4+0xe2>
 8000ac2:	fab2 f382 	clz	r3, r2
 8000ac6:	b143      	cbz	r3, 8000ada <__udivmoddi4+0x2e>
 8000ac8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000acc:	f1c3 0220 	rsb	r2, r3, #32
 8000ad0:	409f      	lsls	r7, r3
 8000ad2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ad6:	4317      	orrs	r7, r2
 8000ad8:	409c      	lsls	r4, r3
 8000ada:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ade:	fa1f f58c 	uxth.w	r5, ip
 8000ae2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ae6:	0c22      	lsrs	r2, r4, #16
 8000ae8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000aec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000af0:	fb01 f005 	mul.w	r0, r1, r5
 8000af4:	4290      	cmp	r0, r2
 8000af6:	d90a      	bls.n	8000b0e <__udivmoddi4+0x62>
 8000af8:	eb1c 0202 	adds.w	r2, ip, r2
 8000afc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b00:	f080 811c 	bcs.w	8000d3c <__udivmoddi4+0x290>
 8000b04:	4290      	cmp	r0, r2
 8000b06:	f240 8119 	bls.w	8000d3c <__udivmoddi4+0x290>
 8000b0a:	3902      	subs	r1, #2
 8000b0c:	4462      	add	r2, ip
 8000b0e:	1a12      	subs	r2, r2, r0
 8000b10:	b2a4      	uxth	r4, r4
 8000b12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b1a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b1e:	fb00 f505 	mul.w	r5, r0, r5
 8000b22:	42a5      	cmp	r5, r4
 8000b24:	d90a      	bls.n	8000b3c <__udivmoddi4+0x90>
 8000b26:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b2e:	f080 8107 	bcs.w	8000d40 <__udivmoddi4+0x294>
 8000b32:	42a5      	cmp	r5, r4
 8000b34:	f240 8104 	bls.w	8000d40 <__udivmoddi4+0x294>
 8000b38:	4464      	add	r4, ip
 8000b3a:	3802      	subs	r0, #2
 8000b3c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b40:	1b64      	subs	r4, r4, r5
 8000b42:	2100      	movs	r1, #0
 8000b44:	b11e      	cbz	r6, 8000b4e <__udivmoddi4+0xa2>
 8000b46:	40dc      	lsrs	r4, r3
 8000b48:	2300      	movs	r3, #0
 8000b4a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0xbc>
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	f000 80ed 	beq.w	8000d36 <__udivmoddi4+0x28a>
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b62:	4608      	mov	r0, r1
 8000b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b68:	fab3 f183 	clz	r1, r3
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	d149      	bne.n	8000c04 <__udivmoddi4+0x158>
 8000b70:	42ab      	cmp	r3, r5
 8000b72:	d302      	bcc.n	8000b7a <__udivmoddi4+0xce>
 8000b74:	4282      	cmp	r2, r0
 8000b76:	f200 80f8 	bhi.w	8000d6a <__udivmoddi4+0x2be>
 8000b7a:	1a84      	subs	r4, r0, r2
 8000b7c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b80:	2001      	movs	r0, #1
 8000b82:	4617      	mov	r7, r2
 8000b84:	2e00      	cmp	r6, #0
 8000b86:	d0e2      	beq.n	8000b4e <__udivmoddi4+0xa2>
 8000b88:	e9c6 4700 	strd	r4, r7, [r6]
 8000b8c:	e7df      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b8e:	b902      	cbnz	r2, 8000b92 <__udivmoddi4+0xe6>
 8000b90:	deff      	udf	#255	; 0xff
 8000b92:	fab2 f382 	clz	r3, r2
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f040 8090 	bne.w	8000cbc <__udivmoddi4+0x210>
 8000b9c:	1a8a      	subs	r2, r1, r2
 8000b9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba2:	fa1f fe8c 	uxth.w	lr, ip
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bac:	fb07 2015 	mls	r0, r7, r5, r2
 8000bb0:	0c22      	lsrs	r2, r4, #16
 8000bb2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bb6:	fb0e f005 	mul.w	r0, lr, r5
 8000bba:	4290      	cmp	r0, r2
 8000bbc:	d908      	bls.n	8000bd0 <__udivmoddi4+0x124>
 8000bbe:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x122>
 8000bc8:	4290      	cmp	r0, r2
 8000bca:	f200 80cb 	bhi.w	8000d64 <__udivmoddi4+0x2b8>
 8000bce:	4645      	mov	r5, r8
 8000bd0:	1a12      	subs	r2, r2, r0
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bd8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bdc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000be0:	fb0e fe00 	mul.w	lr, lr, r0
 8000be4:	45a6      	cmp	lr, r4
 8000be6:	d908      	bls.n	8000bfa <__udivmoddi4+0x14e>
 8000be8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bec:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bf0:	d202      	bcs.n	8000bf8 <__udivmoddi4+0x14c>
 8000bf2:	45a6      	cmp	lr, r4
 8000bf4:	f200 80bb 	bhi.w	8000d6e <__udivmoddi4+0x2c2>
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	eba4 040e 	sub.w	r4, r4, lr
 8000bfe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c02:	e79f      	b.n	8000b44 <__udivmoddi4+0x98>
 8000c04:	f1c1 0720 	rsb	r7, r1, #32
 8000c08:	408b      	lsls	r3, r1
 8000c0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c12:	fa05 f401 	lsl.w	r4, r5, r1
 8000c16:	fa20 f307 	lsr.w	r3, r0, r7
 8000c1a:	40fd      	lsrs	r5, r7
 8000c1c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c20:	4323      	orrs	r3, r4
 8000c22:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c26:	fa1f fe8c 	uxth.w	lr, ip
 8000c2a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c2e:	0c1c      	lsrs	r4, r3, #16
 8000c30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c34:	fb08 f50e 	mul.w	r5, r8, lr
 8000c38:	42a5      	cmp	r5, r4
 8000c3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c3e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c42:	d90b      	bls.n	8000c5c <__udivmoddi4+0x1b0>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c4c:	f080 8088 	bcs.w	8000d60 <__udivmoddi4+0x2b4>
 8000c50:	42a5      	cmp	r5, r4
 8000c52:	f240 8085 	bls.w	8000d60 <__udivmoddi4+0x2b4>
 8000c56:	f1a8 0802 	sub.w	r8, r8, #2
 8000c5a:	4464      	add	r4, ip
 8000c5c:	1b64      	subs	r4, r4, r5
 8000c5e:	b29d      	uxth	r5, r3
 8000c60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c64:	fb09 4413 	mls	r4, r9, r3, r4
 8000c68:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c6c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c70:	45a6      	cmp	lr, r4
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x1da>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c7c:	d26c      	bcs.n	8000d58 <__udivmoddi4+0x2ac>
 8000c7e:	45a6      	cmp	lr, r4
 8000c80:	d96a      	bls.n	8000d58 <__udivmoddi4+0x2ac>
 8000c82:	3b02      	subs	r3, #2
 8000c84:	4464      	add	r4, ip
 8000c86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c8a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c8e:	eba4 040e 	sub.w	r4, r4, lr
 8000c92:	42ac      	cmp	r4, r5
 8000c94:	46c8      	mov	r8, r9
 8000c96:	46ae      	mov	lr, r5
 8000c98:	d356      	bcc.n	8000d48 <__udivmoddi4+0x29c>
 8000c9a:	d053      	beq.n	8000d44 <__udivmoddi4+0x298>
 8000c9c:	b156      	cbz	r6, 8000cb4 <__udivmoddi4+0x208>
 8000c9e:	ebb0 0208 	subs.w	r2, r0, r8
 8000ca2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ca6:	fa04 f707 	lsl.w	r7, r4, r7
 8000caa:	40ca      	lsrs	r2, r1
 8000cac:	40cc      	lsrs	r4, r1
 8000cae:	4317      	orrs	r7, r2
 8000cb0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbc:	f1c3 0120 	rsb	r1, r3, #32
 8000cc0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cc8:	fa25 f101 	lsr.w	r1, r5, r1
 8000ccc:	409d      	lsls	r5, r3
 8000cce:	432a      	orrs	r2, r5
 8000cd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd4:	fa1f fe8c 	uxth.w	lr, ip
 8000cd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cdc:	fb07 1510 	mls	r5, r7, r0, r1
 8000ce0:	0c11      	lsrs	r1, r2, #16
 8000ce2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ce6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cea:	428d      	cmp	r5, r1
 8000cec:	fa04 f403 	lsl.w	r4, r4, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x258>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cfa:	d22f      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000cfc:	428d      	cmp	r5, r1
 8000cfe:	d92d      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d00:	3802      	subs	r0, #2
 8000d02:	4461      	add	r1, ip
 8000d04:	1b49      	subs	r1, r1, r5
 8000d06:	b292      	uxth	r2, r2
 8000d08:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d0c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d14:	fb05 f10e 	mul.w	r1, r5, lr
 8000d18:	4291      	cmp	r1, r2
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x282>
 8000d1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d20:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d24:	d216      	bcs.n	8000d54 <__udivmoddi4+0x2a8>
 8000d26:	4291      	cmp	r1, r2
 8000d28:	d914      	bls.n	8000d54 <__udivmoddi4+0x2a8>
 8000d2a:	3d02      	subs	r5, #2
 8000d2c:	4462      	add	r2, ip
 8000d2e:	1a52      	subs	r2, r2, r1
 8000d30:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d34:	e738      	b.n	8000ba8 <__udivmoddi4+0xfc>
 8000d36:	4631      	mov	r1, r6
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e708      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000d3c:	4639      	mov	r1, r7
 8000d3e:	e6e6      	b.n	8000b0e <__udivmoddi4+0x62>
 8000d40:	4610      	mov	r0, r2
 8000d42:	e6fb      	b.n	8000b3c <__udivmoddi4+0x90>
 8000d44:	4548      	cmp	r0, r9
 8000d46:	d2a9      	bcs.n	8000c9c <__udivmoddi4+0x1f0>
 8000d48:	ebb9 0802 	subs.w	r8, r9, r2
 8000d4c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d50:	3b01      	subs	r3, #1
 8000d52:	e7a3      	b.n	8000c9c <__udivmoddi4+0x1f0>
 8000d54:	4645      	mov	r5, r8
 8000d56:	e7ea      	b.n	8000d2e <__udivmoddi4+0x282>
 8000d58:	462b      	mov	r3, r5
 8000d5a:	e794      	b.n	8000c86 <__udivmoddi4+0x1da>
 8000d5c:	4640      	mov	r0, r8
 8000d5e:	e7d1      	b.n	8000d04 <__udivmoddi4+0x258>
 8000d60:	46d0      	mov	r8, sl
 8000d62:	e77b      	b.n	8000c5c <__udivmoddi4+0x1b0>
 8000d64:	3d02      	subs	r5, #2
 8000d66:	4462      	add	r2, ip
 8000d68:	e732      	b.n	8000bd0 <__udivmoddi4+0x124>
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e70a      	b.n	8000b84 <__udivmoddi4+0xd8>
 8000d6e:	4464      	add	r4, ip
 8000d70:	3802      	subs	r0, #2
 8000d72:	e742      	b.n	8000bfa <__udivmoddi4+0x14e>

08000d74 <__aeabi_idiv0>:
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000d86:	b480      	push	{r7}
 8000d88:	b083      	sub	sp, #12
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
 8000d8e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
	...

08000dac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4a07      	ldr	r2, [pc, #28]	; (8000dd8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000dbc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	4a06      	ldr	r2, [pc, #24]	; (8000ddc <vApplicationGetIdleTaskMemory+0x30>)
 8000dc2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2280      	movs	r2, #128	; 0x80
 8000dc8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	2000012c 	.word	0x2000012c
 8000ddc:	20000184 	.word	0x20000184

08000de0 <SecondTask>:

extern xQueueHandle messageQ;
extern xQueueHandle settingsMessageQ;

void SecondTask(void const* argument)
{
 8000de0:	b5b0      	push	{r4, r5, r7, lr}
 8000de2:	b09e      	sub	sp, #120	; 0x78
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]

	settings_message settings_val = {7000, 1, 2, 3, 4, 5, 6, 7, 8, 0};
 8000de8:	4b83      	ldr	r3, [pc, #524]	; (8000ff8 <SecondTask+0x218>)
 8000dea:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000dee:	461d      	mov	r5, r3
 8000df0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000df2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000df4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000df6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000df8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000dfc:	e884 0003 	stmia.w	r4, {r0, r1}
	xQueueSend(settingsMessageQ, &settings_val,0);
 8000e00:	4b7e      	ldr	r3, [pc, #504]	; (8000ffc <SecondTask+0x21c>)
 8000e02:	6818      	ldr	r0, [r3, #0]
 8000e04:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000e08:	2300      	movs	r3, #0
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f00b ff8c 	bl	800cd28 <xQueueGenericSend>
	osDelay(150);
 8000e10:	2096      	movs	r0, #150	; 0x96
 8000e12:	f00b fc97 	bl	800c744 <osDelay>

	static const int demo_mode = 0;
	for(;;)
	{
		if(demo_mode)
 8000e16:	4b7a      	ldr	r3, [pc, #488]	; (8001000 <SecondTask+0x220>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f000 8127 	beq.w	800106e <SecondTask+0x28e>
		{
			rpm = (rpm >= 8000) ? 0: rpm + 100;
 8000e20:	4b78      	ldr	r3, [pc, #480]	; (8001004 <SecondTask+0x224>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000e28:	da03      	bge.n	8000e32 <SecondTask+0x52>
 8000e2a:	4b76      	ldr	r3, [pc, #472]	; (8001004 <SecondTask+0x224>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	3364      	adds	r3, #100	; 0x64
 8000e30:	e000      	b.n	8000e34 <SecondTask+0x54>
 8000e32:	2300      	movs	r3, #0
 8000e34:	4a73      	ldr	r2, [pc, #460]	; (8001004 <SecondTask+0x224>)
 8000e36:	6013      	str	r3, [r2, #0]
			clt = (clt >= 250) ? -40: clt + 3;
 8000e38:	4b73      	ldr	r3, [pc, #460]	; (8001008 <SecondTask+0x228>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2bf9      	cmp	r3, #249	; 0xf9
 8000e3e:	dc03      	bgt.n	8000e48 <SecondTask+0x68>
 8000e40:	4b71      	ldr	r3, [pc, #452]	; (8001008 <SecondTask+0x228>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	3303      	adds	r3, #3
 8000e46:	e001      	b.n	8000e4c <SecondTask+0x6c>
 8000e48:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8000e4c:	4a6e      	ldr	r2, [pc, #440]	; (8001008 <SecondTask+0x228>)
 8000e4e:	6013      	str	r3, [r2, #0]
			map = (map >= 450) ? 1: map + 6;
 8000e50:	4b6e      	ldr	r3, [pc, #440]	; (800100c <SecondTask+0x22c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000e58:	da03      	bge.n	8000e62 <SecondTask+0x82>
 8000e5a:	4b6c      	ldr	r3, [pc, #432]	; (800100c <SecondTask+0x22c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	3306      	adds	r3, #6
 8000e60:	e000      	b.n	8000e64 <SecondTask+0x84>
 8000e62:	2301      	movs	r3, #1
 8000e64:	4a69      	ldr	r2, [pc, #420]	; (800100c <SecondTask+0x22c>)
 8000e66:	6013      	str	r3, [r2, #0]
			lambda = (lambda >= 1.4) ? 0.6: lambda + 0.05;
 8000e68:	4b69      	ldr	r3, [pc, #420]	; (8001010 <SecondTask+0x230>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fcad 	bl	80007cc <__aeabi_f2d>
 8000e72:	a359      	add	r3, pc, #356	; (adr r3, 8000fd8 <SecondTask+0x1f8>)
 8000e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e78:	f7ff fd74 	bl	8000964 <__aeabi_dcmpge>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <SecondTask+0xa6>
 8000e82:	4b64      	ldr	r3, [pc, #400]	; (8001014 <SecondTask+0x234>)
 8000e84:	e010      	b.n	8000ea8 <SecondTask+0xc8>
 8000e86:	4b62      	ldr	r3, [pc, #392]	; (8001010 <SecondTask+0x230>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fc9e 	bl	80007cc <__aeabi_f2d>
 8000e90:	a353      	add	r3, pc, #332	; (adr r3, 8000fe0 <SecondTask+0x200>)
 8000e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e96:	f7ff fb3b 	bl	8000510 <__adddf3>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	4610      	mov	r0, r2
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f7ff fd9b 	bl	80009dc <__aeabi_d2f>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	4a59      	ldr	r2, [pc, #356]	; (8001010 <SecondTask+0x230>)
 8000eaa:	6013      	str	r3, [r2, #0]
			lambda_targ = (lambda_targ >= 1.4) ? 0.65: lambda_targ + 0.06;
 8000eac:	4b5a      	ldr	r3, [pc, #360]	; (8001018 <SecondTask+0x238>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff fc8b 	bl	80007cc <__aeabi_f2d>
 8000eb6:	a348      	add	r3, pc, #288	; (adr r3, 8000fd8 <SecondTask+0x1f8>)
 8000eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ebc:	f7ff fd52 	bl	8000964 <__aeabi_dcmpge>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <SecondTask+0xea>
 8000ec6:	4b55      	ldr	r3, [pc, #340]	; (800101c <SecondTask+0x23c>)
 8000ec8:	e010      	b.n	8000eec <SecondTask+0x10c>
 8000eca:	4b53      	ldr	r3, [pc, #332]	; (8001018 <SecondTask+0x238>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fc7c 	bl	80007cc <__aeabi_f2d>
 8000ed4:	a344      	add	r3, pc, #272	; (adr r3, 8000fe8 <SecondTask+0x208>)
 8000ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eda:	f7ff fb19 	bl	8000510 <__adddf3>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	4610      	mov	r0, r2
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f7ff fd79 	bl	80009dc <__aeabi_d2f>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4a4a      	ldr	r2, [pc, #296]	; (8001018 <SecondTask+0x238>)
 8000eee:	6013      	str	r3, [r2, #0]
			oil_tmp = (oil_tmp >= 160) ? 1: oil_tmp + 2;
 8000ef0:	4b4b      	ldr	r3, [pc, #300]	; (8001020 <SecondTask+0x240>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b9f      	cmp	r3, #159	; 0x9f
 8000ef6:	dc03      	bgt.n	8000f00 <SecondTask+0x120>
 8000ef8:	4b49      	ldr	r3, [pc, #292]	; (8001020 <SecondTask+0x240>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	3302      	adds	r3, #2
 8000efe:	e000      	b.n	8000f02 <SecondTask+0x122>
 8000f00:	2301      	movs	r3, #1
 8000f02:	4a47      	ldr	r2, [pc, #284]	; (8001020 <SecondTask+0x240>)
 8000f04:	6013      	str	r3, [r2, #0]
			oil_press = (oil_press >= 12.0) ? 0.1: oil_press + 0.1;
 8000f06:	4b47      	ldr	r3, [pc, #284]	; (8001024 <SecondTask+0x244>)
 8000f08:	edd3 7a00 	vldr	s15, [r3]
 8000f0c:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8000f10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f18:	db01      	blt.n	8000f1e <SecondTask+0x13e>
 8000f1a:	4b43      	ldr	r3, [pc, #268]	; (8001028 <SecondTask+0x248>)
 8000f1c:	e010      	b.n	8000f40 <SecondTask+0x160>
 8000f1e:	4b41      	ldr	r3, [pc, #260]	; (8001024 <SecondTask+0x244>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fc52 	bl	80007cc <__aeabi_f2d>
 8000f28:	a331      	add	r3, pc, #196	; (adr r3, 8000ff0 <SecondTask+0x210>)
 8000f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2e:	f7ff faef 	bl	8000510 <__adddf3>
 8000f32:	4602      	mov	r2, r0
 8000f34:	460b      	mov	r3, r1
 8000f36:	4610      	mov	r0, r2
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f7ff fd4f 	bl	80009dc <__aeabi_d2f>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	4a38      	ldr	r2, [pc, #224]	; (8001024 <SecondTask+0x244>)
 8000f42:	6013      	str	r3, [r2, #0]
			fuel_press = (fuel_press >= 100) ? 1: iat + 2;
 8000f44:	4b39      	ldr	r3, [pc, #228]	; (800102c <SecondTask+0x24c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b63      	cmp	r3, #99	; 0x63
 8000f4a:	dc03      	bgt.n	8000f54 <SecondTask+0x174>
 8000f4c:	4b38      	ldr	r3, [pc, #224]	; (8001030 <SecondTask+0x250>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	3302      	adds	r3, #2
 8000f52:	e000      	b.n	8000f56 <SecondTask+0x176>
 8000f54:	2301      	movs	r3, #1
 8000f56:	4a35      	ldr	r2, [pc, #212]	; (800102c <SecondTask+0x24c>)
 8000f58:	6013      	str	r3, [r2, #0]
			iat = (iat >= 100) ? 1: iat + 2;
 8000f5a:	4b35      	ldr	r3, [pc, #212]	; (8001030 <SecondTask+0x250>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2b63      	cmp	r3, #99	; 0x63
 8000f60:	dc03      	bgt.n	8000f6a <SecondTask+0x18a>
 8000f62:	4b33      	ldr	r3, [pc, #204]	; (8001030 <SecondTask+0x250>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	3302      	adds	r3, #2
 8000f68:	e000      	b.n	8000f6c <SecondTask+0x18c>
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	4a30      	ldr	r2, [pc, #192]	; (8001030 <SecondTask+0x250>)
 8000f6e:	6013      	str	r3, [r2, #0]
			egt = (egt >= 760) ? 500: egt +12;
 8000f70:	4b30      	ldr	r3, [pc, #192]	; (8001034 <SecondTask+0x254>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f5b3 7f3e 	cmp.w	r3, #760	; 0x2f8
 8000f78:	da03      	bge.n	8000f82 <SecondTask+0x1a2>
 8000f7a:	4b2e      	ldr	r3, [pc, #184]	; (8001034 <SecondTask+0x254>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	330c      	adds	r3, #12
 8000f80:	e001      	b.n	8000f86 <SecondTask+0x1a6>
 8000f82:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f86:	4a2b      	ldr	r2, [pc, #172]	; (8001034 <SecondTask+0x254>)
 8000f88:	6013      	str	r3, [r2, #0]
			egt_2 = (egt >= 760) ? 500: egt_2 +12;
 8000f8a:	4b2a      	ldr	r3, [pc, #168]	; (8001034 <SecondTask+0x254>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f5b3 7f3e 	cmp.w	r3, #760	; 0x2f8
 8000f92:	da03      	bge.n	8000f9c <SecondTask+0x1bc>
 8000f94:	4b28      	ldr	r3, [pc, #160]	; (8001038 <SecondTask+0x258>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	330c      	adds	r3, #12
 8000f9a:	e001      	b.n	8000fa0 <SecondTask+0x1c0>
 8000f9c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fa0:	4a25      	ldr	r2, [pc, #148]	; (8001038 <SecondTask+0x258>)
 8000fa2:	6013      	str	r3, [r2, #0]
			tps = (tps >= 100) ? 0: tps + 4;
 8000fa4:	4b25      	ldr	r3, [pc, #148]	; (800103c <SecondTask+0x25c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b63      	cmp	r3, #99	; 0x63
 8000faa:	dc03      	bgt.n	8000fb4 <SecondTask+0x1d4>
 8000fac:	4b23      	ldr	r3, [pc, #140]	; (800103c <SecondTask+0x25c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	3304      	adds	r3, #4
 8000fb2:	e000      	b.n	8000fb6 <SecondTask+0x1d6>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	4a21      	ldr	r2, [pc, #132]	; (800103c <SecondTask+0x25c>)
 8000fb8:	6013      	str	r3, [r2, #0]
			batt_v = (batt_v >= 20.0) ? 10.0: batt_v + 0.6;
 8000fba:	4b21      	ldr	r3, [pc, #132]	; (8001040 <SecondTask+0x260>)
 8000fbc:	edd3 7a00 	vldr	s15, [r3]
 8000fc0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000fc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fcc:	db3c      	blt.n	8001048 <SecondTask+0x268>
 8000fce:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <SecondTask+0x264>)
 8000fd0:	e04b      	b.n	800106a <SecondTask+0x28a>
 8000fd2:	bf00      	nop
 8000fd4:	f3af 8000 	nop.w
 8000fd8:	66666666 	.word	0x66666666
 8000fdc:	3ff66666 	.word	0x3ff66666
 8000fe0:	9999999a 	.word	0x9999999a
 8000fe4:	3fa99999 	.word	0x3fa99999
 8000fe8:	eb851eb8 	.word	0xeb851eb8
 8000fec:	3faeb851 	.word	0x3faeb851
 8000ff0:	9999999a 	.word	0x9999999a
 8000ff4:	3fb99999 	.word	0x3fb99999
 8000ff8:	08027174 	.word	0x08027174
 8000ffc:	20008ed8 	.word	0x20008ed8
 8001000:	08027c04 	.word	0x08027c04
 8001004:	20000ae8 	.word	0x20000ae8
 8001008:	20000af0 	.word	0x20000af0
 800100c:	20000004 	.word	0x20000004
 8001010:	20000af8 	.word	0x20000af8
 8001014:	3f19999a 	.word	0x3f19999a
 8001018:	20000008 	.word	0x20000008
 800101c:	3f266666 	.word	0x3f266666
 8001020:	20000b08 	.word	0x20000b08
 8001024:	20000b10 	.word	0x20000b10
 8001028:	3dcccccd 	.word	0x3dcccccd
 800102c:	20000b14 	.word	0x20000b14
 8001030:	20000b18 	.word	0x20000b18
 8001034:	20000b1c 	.word	0x20000b1c
 8001038:	20000b20 	.word	0x20000b20
 800103c:	20000b24 	.word	0x20000b24
 8001040:	20000b28 	.word	0x20000b28
 8001044:	41200000 	.word	0x41200000
 8001048:	4b2b      	ldr	r3, [pc, #172]	; (80010f8 <SecondTask+0x318>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fbbd 	bl	80007cc <__aeabi_f2d>
 8001052:	a327      	add	r3, pc, #156	; (adr r3, 80010f0 <SecondTask+0x310>)
 8001054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001058:	f7ff fa5a 	bl	8000510 <__adddf3>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4610      	mov	r0, r2
 8001062:	4619      	mov	r1, r3
 8001064:	f7ff fcba 	bl	80009dc <__aeabi_d2f>
 8001068:	4603      	mov	r3, r0
 800106a:	4a23      	ldr	r2, [pc, #140]	; (80010f8 <SecondTask+0x318>)
 800106c:	6013      	str	r3, [r2, #0]
		}

		display_values dispVals = {rpm, max_rpm, clt, max_clt, speed, max_speed, lambda, max_lambda, oil_tmp, max_oil_tmp, oil_press, min_oil_press, fuel_press, min_fuel_press, iat, tps, batt_v};
 800106e:	4b23      	ldr	r3, [pc, #140]	; (80010fc <SecondTask+0x31c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	4b22      	ldr	r3, [pc, #136]	; (8001100 <SecondTask+0x320>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	4b22      	ldr	r3, [pc, #136]	; (8001104 <SecondTask+0x324>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	4b21      	ldr	r3, [pc, #132]	; (8001108 <SecondTask+0x328>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	61bb      	str	r3, [r7, #24]
 8001086:	4b21      	ldr	r3, [pc, #132]	; (800110c <SecondTask+0x32c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	61fb      	str	r3, [r7, #28]
 800108c:	4b20      	ldr	r3, [pc, #128]	; (8001110 <SecondTask+0x330>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	623b      	str	r3, [r7, #32]
 8001092:	4b20      	ldr	r3, [pc, #128]	; (8001114 <SecondTask+0x334>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
 8001098:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <SecondTask+0x338>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	62bb      	str	r3, [r7, #40]	; 0x28
 800109e:	4b1f      	ldr	r3, [pc, #124]	; (800111c <SecondTask+0x33c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010a4:	4b1e      	ldr	r3, [pc, #120]	; (8001120 <SecondTask+0x340>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	633b      	str	r3, [r7, #48]	; 0x30
 80010aa:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <SecondTask+0x344>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	637b      	str	r3, [r7, #52]	; 0x34
 80010b0:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <SecondTask+0x348>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80010b6:	4b1d      	ldr	r3, [pc, #116]	; (800112c <SecondTask+0x34c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010bc:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <SecondTask+0x350>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	643b      	str	r3, [r7, #64]	; 0x40
 80010c2:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <SecondTask+0x354>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	647b      	str	r3, [r7, #68]	; 0x44
 80010c8:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <SecondTask+0x358>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80010ce:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <SecondTask+0x318>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	64fb      	str	r3, [r7, #76]	; 0x4c
	    xQueueSend(messageQ, &dispVals,0);
 80010d4:	4b19      	ldr	r3, [pc, #100]	; (800113c <SecondTask+0x35c>)
 80010d6:	6818      	ldr	r0, [r3, #0]
 80010d8:	f107 010c 	add.w	r1, r7, #12
 80010dc:	2300      	movs	r3, #0
 80010de:	2200      	movs	r2, #0
 80010e0:	f00b fe22 	bl	800cd28 <xQueueGenericSend>
		osDelay(50);
 80010e4:	2032      	movs	r0, #50	; 0x32
 80010e6:	f00b fb2d 	bl	800c744 <osDelay>
	{
 80010ea:	e694      	b.n	8000e16 <SecondTask+0x36>
 80010ec:	f3af 8000 	nop.w
 80010f0:	33333333 	.word	0x33333333
 80010f4:	3fe33333 	.word	0x3fe33333
 80010f8:	20000b28 	.word	0x20000b28
 80010fc:	20000ae8 	.word	0x20000ae8
 8001100:	20000aec 	.word	0x20000aec
 8001104:	20000af0 	.word	0x20000af0
 8001108:	20000af4 	.word	0x20000af4
 800110c:	20000b00 	.word	0x20000b00
 8001110:	20000b04 	.word	0x20000b04
 8001114:	20000af8 	.word	0x20000af8
 8001118:	20000afc 	.word	0x20000afc
 800111c:	20000b08 	.word	0x20000b08
 8001120:	20000b0c 	.word	0x20000b0c
 8001124:	20000b10 	.word	0x20000b10
 8001128:	2000000c 	.word	0x2000000c
 800112c:	20000b14 	.word	0x20000b14
 8001130:	20000010 	.word	0x20000010
 8001134:	20000b18 	.word	0x20000b18
 8001138:	20000b24 	.word	0x20000b24
 800113c:	20008ed4 	.word	0x20008ed4

08001140 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001140:	b5b0      	push	{r4, r5, r7, lr}
 8001142:	b08e      	sub	sp, #56	; 0x38
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001146:	f002 fd56 	bl	8003bf6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800114a:	f000 f85f 	bl	800120c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800114e:	f001 fa29 	bl	80025a4 <MX_GPIO_Init>
  MX_ADC3_Init();
 8001152:	f000 f917 	bl	8001384 <MX_ADC3_Init>
  MX_CRC_Init();
 8001156:	f000 fb61 	bl	800181c <MX_CRC_Init>
  MX_DCMI_Init();
 800115a:	f000 fb81 	bl	8001860 <MX_DCMI_Init>
  MX_DMA2D_Init();
 800115e:	f000 fbb3 	bl	80018c8 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001162:	f001 f973 	bl	800244c <MX_FMC_Init>
  MX_LTDC_Init();
 8001166:	f000 fbe1 	bl	800192c <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800116a:	f000 fc61 	bl	8001a30 <MX_QUADSPI_Init>
  MX_RTC_Init();
 800116e:	f000 fc8b 	bl	8001a88 <MX_RTC_Init>
  MX_SAI2_Init();
 8001172:	f000 fd31 	bl	8001bd8 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8001176:	f000 fdd7 	bl	8001d28 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 800117a:	f000 fdf5 	bl	8001d68 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 800117e:	f000 fe23 	bl	8001dc8 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001182:	f000 fe5f 	bl	8001e44 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001186:	f000 ff09 	bl	8001f9c <MX_TIM2_Init>
  MX_TIM3_Init();
 800118a:	f000 ff7d 	bl	8002088 <MX_TIM3_Init>
  MX_TIM5_Init();
 800118e:	f000 fff1 	bl	8002174 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001192:	f001 f865 	bl	8002260 <MX_TIM8_Init>
  MX_TIM12_Init();
 8001196:	f001 f8b5 	bl	8002304 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 800119a:	f001 f8f7 	bl	800238c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800119e:	f001 f925 	bl	80023ec <MX_USART6_UART_Init>
  MX_FATFS_Init();
 80011a2:	f00a ff8b 	bl	800c0bc <MX_FATFS_Init>
  MX_CAN1_Init();
 80011a6:	f000 f93f 	bl	8001428 <MX_CAN1_Init>
  MX_TouchGFX_Init();
 80011aa:	f00e f83d 	bl	800f228 <MX_TouchGFX_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 80011ae:	4b13      	ldr	r3, [pc, #76]	; (80011fc <main+0xbc>)
 80011b0:	f107 041c 	add.w	r4, r7, #28
 80011b4:	461d      	mov	r5, r3
 80011b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80011c2:	f107 031c 	add.w	r3, r7, #28
 80011c6:	2100      	movs	r1, #0
 80011c8:	4618      	mov	r0, r3
 80011ca:	f00b fa6f 	bl	800c6ac <osThreadCreate>
 80011ce:	4603      	mov	r3, r0
 80011d0:	4a0b      	ldr	r2, [pc, #44]	; (8001200 <main+0xc0>)
 80011d2:	6013      	str	r3, [r2, #0]

  osThreadDef(second, SecondTask, osPriorityNormal, 0, 512);
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <main+0xc4>)
 80011d6:	463c      	mov	r4, r7
 80011d8:	461d      	mov	r5, r3
 80011da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  secondTaskHandle = osThreadCreate(osThread(second), NULL);
 80011e6:	463b      	mov	r3, r7
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f00b fa5e 	bl	800c6ac <osThreadCreate>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4a05      	ldr	r2, [pc, #20]	; (8001208 <main+0xc8>)
 80011f4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80011f6:	f00b fa36 	bl	800c666 <osKernelStart>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011fa:	e7fe      	b.n	80011fa <main+0xba>
 80011fc:	080271a8 	.word	0x080271a8
 8001200:	20000ad0 	.word	0x20000ad0
 8001204:	080271cc 	.word	0x080271cc
 8001208:	20000ad4 	.word	0x20000ad4

0800120c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b0b4      	sub	sp, #208	; 0xd0
 8001210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001212:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001216:	2230      	movs	r2, #48	; 0x30
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f025 f97b 	bl	8026516 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001220:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001230:	f107 0308 	add.w	r3, r7, #8
 8001234:	2284      	movs	r2, #132	; 0x84
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f025 f96c 	bl	8026516 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800123e:	f005 f9bb 	bl	80065b8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001242:	4b4d      	ldr	r3, [pc, #308]	; (8001378 <SystemClock_Config+0x16c>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	4a4c      	ldr	r2, [pc, #304]	; (8001378 <SystemClock_Config+0x16c>)
 8001248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800124c:	6413      	str	r3, [r2, #64]	; 0x40
 800124e:	4b4a      	ldr	r3, [pc, #296]	; (8001378 <SystemClock_Config+0x16c>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800125a:	4b48      	ldr	r3, [pc, #288]	; (800137c <SystemClock_Config+0x170>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a47      	ldr	r2, [pc, #284]	; (800137c <SystemClock_Config+0x170>)
 8001260:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	4b45      	ldr	r3, [pc, #276]	; (800137c <SystemClock_Config+0x170>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001272:	2309      	movs	r3, #9
 8001274:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001278:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800127c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001280:	2301      	movs	r3, #1
 8001282:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001286:	2302      	movs	r3, #2
 8001288:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800128c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001290:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001294:	2319      	movs	r3, #25
 8001296:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 800129a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800129e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012a2:	2302      	movs	r3, #2
 80012a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80012a8:	2309      	movs	r3, #9
 80012aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f005 faa2 	bl	80067fc <HAL_RCC_OscConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80012be:	f001 fba5 	bl	8002a0c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012c2:	f005 f989 	bl	80065d8 <HAL_PWREx_EnableOverDrive>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80012cc:	f001 fb9e 	bl	8002a0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d0:	230f      	movs	r3, #15
 80012d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d6:	2302      	movs	r3, #2
 80012d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012dc:	2300      	movs	r3, #0
 80012de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80012f2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80012f6:	2106      	movs	r1, #6
 80012f8:	4618      	mov	r0, r3
 80012fa:	f005 fd23 	bl	8006d44 <HAL_RCC_ClockConfig>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001304:	f001 fb82 	bl	8002a0c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8001308:	4b1d      	ldr	r3, [pc, #116]	; (8001380 <SystemClock_Config+0x174>)
 800130a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 800130c:	2364      	movs	r3, #100	; 0x64
 800130e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001310:	2302      	movs	r3, #2
 8001312:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001314:	2302      	movs	r3, #2
 8001316:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001318:	2302      	movs	r3, #2
 800131a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800131c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001320:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001322:	2305      	movs	r3, #5
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001326:	2302      	movs	r3, #2
 8001328:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800132a:	2303      	movs	r3, #3
 800132c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800132e:	2301      	movs	r3, #1
 8001330:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001332:	2301      	movs	r3, #1
 8001334:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001336:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800133a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800133c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001340:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001342:	2300      	movs	r3, #0
 8001344:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001346:	2300      	movs	r3, #0
 8001348:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800134a:	2300      	movs	r3, #0
 800134c:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800134e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001352:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001356:	2300      	movs	r3, #0
 8001358:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800135c:	f107 0308 	add.w	r3, r7, #8
 8001360:	4618      	mov	r0, r3
 8001362:	f005 ff07 	bl	8007174 <HAL_RCCEx_PeriphCLKConfig>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <SystemClock_Config+0x164>
  {
    Error_Handler();
 800136c:	f001 fb4e 	bl	8002a0c <Error_Handler>
  }
}
 8001370:	bf00      	nop
 8001372:	37d0      	adds	r7, #208	; 0xd0
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40023800 	.word	0x40023800
 800137c:	40007000 	.word	0x40007000
 8001380:	01b00868 	.word	0x01b00868

08001384 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800138a:	463b      	mov	r3, r7
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 8001396:	4b21      	ldr	r3, [pc, #132]	; (800141c <MX_ADC3_Init+0x98>)
 8001398:	4a21      	ldr	r2, [pc, #132]	; (8001420 <MX_ADC3_Init+0x9c>)
 800139a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800139c:	4b1f      	ldr	r3, [pc, #124]	; (800141c <MX_ADC3_Init+0x98>)
 800139e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013a2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80013a4:	4b1d      	ldr	r3, [pc, #116]	; (800141c <MX_ADC3_Init+0x98>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013aa:	4b1c      	ldr	r3, [pc, #112]	; (800141c <MX_ADC3_Init+0x98>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80013b0:	4b1a      	ldr	r3, [pc, #104]	; (800141c <MX_ADC3_Init+0x98>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80013b6:	4b19      	ldr	r3, [pc, #100]	; (800141c <MX_ADC3_Init+0x98>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013be:	4b17      	ldr	r3, [pc, #92]	; (800141c <MX_ADC3_Init+0x98>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013c4:	4b15      	ldr	r3, [pc, #84]	; (800141c <MX_ADC3_Init+0x98>)
 80013c6:	4a17      	ldr	r2, [pc, #92]	; (8001424 <MX_ADC3_Init+0xa0>)
 80013c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013ca:	4b14      	ldr	r3, [pc, #80]	; (800141c <MX_ADC3_Init+0x98>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <MX_ADC3_Init+0x98>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <MX_ADC3_Init+0x98>)
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013de:	4b0f      	ldr	r3, [pc, #60]	; (800141c <MX_ADC3_Init+0x98>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80013e4:	480d      	ldr	r0, [pc, #52]	; (800141c <MX_ADC3_Init+0x98>)
 80013e6:	f002 fc57 	bl	8003c98 <HAL_ADC_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80013f0:	f001 fb0c 	bl	8002a0c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80013f4:	2304      	movs	r3, #4
 80013f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013f8:	2301      	movs	r3, #1
 80013fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001400:	463b      	mov	r3, r7
 8001402:	4619      	mov	r1, r3
 8001404:	4805      	ldr	r0, [pc, #20]	; (800141c <MX_ADC3_Init+0x98>)
 8001406:	f002 fc8b 	bl	8003d20 <HAL_ADC_ConfigChannel>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001410:	f001 fafc 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001414:	bf00      	nop
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000384 	.word	0x20000384
 8001420:	40012200 	.word	0x40012200
 8001424:	0f000001 	.word	0x0f000001

08001428 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800142e:	4b30      	ldr	r3, [pc, #192]	; (80014f0 <MX_CAN1_Init+0xc8>)
 8001430:	4a30      	ldr	r2, [pc, #192]	; (80014f4 <MX_CAN1_Init+0xcc>)
 8001432:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8001434:	4b2e      	ldr	r3, [pc, #184]	; (80014f0 <MX_CAN1_Init+0xc8>)
 8001436:	2205      	movs	r2, #5
 8001438:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800143a:	4b2d      	ldr	r3, [pc, #180]	; (80014f0 <MX_CAN1_Init+0xc8>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001440:	4b2b      	ldr	r3, [pc, #172]	; (80014f0 <MX_CAN1_Init+0xc8>)
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8001446:	4b2a      	ldr	r3, [pc, #168]	; (80014f0 <MX_CAN1_Init+0xc8>)
 8001448:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800144c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800144e:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <MX_CAN1_Init+0xc8>)
 8001450:	2200      	movs	r2, #0
 8001452:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001454:	4b26      	ldr	r3, [pc, #152]	; (80014f0 <MX_CAN1_Init+0xc8>)
 8001456:	2200      	movs	r2, #0
 8001458:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800145a:	4b25      	ldr	r3, [pc, #148]	; (80014f0 <MX_CAN1_Init+0xc8>)
 800145c:	2200      	movs	r2, #0
 800145e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001460:	4b23      	ldr	r3, [pc, #140]	; (80014f0 <MX_CAN1_Init+0xc8>)
 8001462:	2200      	movs	r2, #0
 8001464:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001466:	4b22      	ldr	r3, [pc, #136]	; (80014f0 <MX_CAN1_Init+0xc8>)
 8001468:	2200      	movs	r2, #0
 800146a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800146c:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <MX_CAN1_Init+0xc8>)
 800146e:	2200      	movs	r2, #0
 8001470:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001472:	4b1f      	ldr	r3, [pc, #124]	; (80014f0 <MX_CAN1_Init+0xc8>)
 8001474:	2200      	movs	r2, #0
 8001476:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001478:	481d      	ldr	r0, [pc, #116]	; (80014f0 <MX_CAN1_Init+0xc8>)
 800147a:	f002 fe95 	bl	80041a8 <HAL_CAN_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001484:	f001 fac2 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800148c:	2300      	movs	r3, #0
 800148e:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001490:	2301      	movs	r3, #1
 8001492:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8001494:	2300      	movs	r3, #0
 8001496:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8001498:	2300      	movs	r3, #0
 800149a:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800149c:	2300      	movs	r3, #0
 800149e:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80014a8:	2301      	movs	r3, #1
 80014aa:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80014ac:	230e      	movs	r3, #14
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80014b0:	463b      	mov	r3, r7
 80014b2:	4619      	mov	r1, r3
 80014b4:	480e      	ldr	r0, [pc, #56]	; (80014f0 <MX_CAN1_Init+0xc8>)
 80014b6:	f002 ff73 	bl	80043a0 <HAL_CAN_ConfigFilter>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_CAN1_Init+0x9c>
  {
    /* Filter configuration Error */
    Error_Handler();
 80014c0:	f001 faa4 	bl	8002a0c <Error_Handler>
  }

  /*##-3- Start the CAN peripheral ###########################################*/
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80014c4:	480a      	ldr	r0, [pc, #40]	; (80014f0 <MX_CAN1_Init+0xc8>)
 80014c6:	f003 f84b 	bl	8004560 <HAL_CAN_Start>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_CAN1_Init+0xac>
  {
   /* Start Error */
   Error_Handler();
 80014d0:	f001 fa9c 	bl	8002a0c <Error_Handler>
  }

  /*##-4- Activate CAN RX notification #######################################*/
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80014d4:	2102      	movs	r1, #2
 80014d6:	4806      	ldr	r0, [pc, #24]	; (80014f0 <MX_CAN1_Init+0xc8>)
 80014d8:	f003 f998 	bl	800480c <HAL_CAN_ActivateNotification>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_CAN1_Init+0xbe>
  {
    /* Notification Error */
    Error_Handler();
 80014e2:	f001 fa93 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 80014e6:	bf00      	nop
 80014e8:	3728      	adds	r7, #40	; 0x28
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	200003cc 	.word	0x200003cc
 80014f4:	40006400 	.word	0x40006400

080014f8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001500:	4b9b      	ldr	r3, [pc, #620]	; (8001770 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8001502:	4a9c      	ldr	r2, [pc, #624]	; (8001774 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8001504:	2100      	movs	r1, #0
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f003 f86e 	bl	80045e8 <HAL_CAN_GetRxMessage>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    /* Reception Error */
    Error_Handler();
 8001512:	f001 fa7b 	bl	8002a0c <Error_Handler>
  }

  /* Package one */
  if ((RxHeader.StdId == 0x360) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8001516:	4b97      	ldr	r3, [pc, #604]	; (8001774 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f5b3 7f58 	cmp.w	r3, #864	; 0x360
 800151e:	d13a      	bne.n	8001596 <HAL_CAN_RxFifo0MsgPendingCallback+0x9e>
 8001520:	4b94      	ldr	r3, [pc, #592]	; (8001774 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d136      	bne.n	8001596 <HAL_CAN_RxFifo0MsgPendingCallback+0x9e>
 8001528:	4b92      	ldr	r3, [pc, #584]	; (8001774 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	2b08      	cmp	r3, #8
 800152e:	d132      	bne.n	8001596 <HAL_CAN_RxFifo0MsgPendingCallback+0x9e>
  {
	 uint16_t rpm_in = (RxData[0] << 8) | (RxData[1] << 0);
 8001530:	4b8f      	ldr	r3, [pc, #572]	; (8001770 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	021b      	lsls	r3, r3, #8
 8001536:	b21a      	sxth	r2, r3
 8001538:	4b8d      	ldr	r3, [pc, #564]	; (8001770 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 800153a:	785b      	ldrb	r3, [r3, #1]
 800153c:	b21b      	sxth	r3, r3
 800153e:	4313      	orrs	r3, r2
 8001540:	b21b      	sxth	r3, r3
 8001542:	83fb      	strh	r3, [r7, #30]
	 uint16_t tps_in = (RxData[4] << 8) | (RxData[5] << 0);
 8001544:	4b8a      	ldr	r3, [pc, #552]	; (8001770 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8001546:	791b      	ldrb	r3, [r3, #4]
 8001548:	021b      	lsls	r3, r3, #8
 800154a:	b21a      	sxth	r2, r3
 800154c:	4b88      	ldr	r3, [pc, #544]	; (8001770 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 800154e:	795b      	ldrb	r3, [r3, #5]
 8001550:	b21b      	sxth	r3, r3
 8001552:	4313      	orrs	r3, r2
 8001554:	b21b      	sxth	r3, r3
 8001556:	83bb      	strh	r3, [r7, #28]

	 rpm = (int)rpm_in;
 8001558:	8bfb      	ldrh	r3, [r7, #30]
 800155a:	4a87      	ldr	r2, [pc, #540]	; (8001778 <HAL_CAN_RxFifo0MsgPendingCallback+0x280>)
 800155c:	6013      	str	r3, [r2, #0]
	 if(rpm > max_rpm) {
 800155e:	4b86      	ldr	r3, [pc, #536]	; (8001778 <HAL_CAN_RxFifo0MsgPendingCallback+0x280>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	4b86      	ldr	r3, [pc, #536]	; (800177c <HAL_CAN_RxFifo0MsgPendingCallback+0x284>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	429a      	cmp	r2, r3
 8001568:	dd03      	ble.n	8001572 <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
		 max_rpm = rpm;
 800156a:	4b83      	ldr	r3, [pc, #524]	; (8001778 <HAL_CAN_RxFifo0MsgPendingCallback+0x280>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a83      	ldr	r2, [pc, #524]	; (800177c <HAL_CAN_RxFifo0MsgPendingCallback+0x284>)
 8001570:	6013      	str	r3, [r2, #0]
	 }
	 tps = (int)tps_in * 0.1;
 8001572:	8bbb      	ldrh	r3, [r7, #28]
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff f917 	bl	80007a8 <__aeabi_i2d>
 800157a:	a37b      	add	r3, pc, #492	; (adr r3, 8001768 <HAL_CAN_RxFifo0MsgPendingCallback+0x270>)
 800157c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001580:	f7fe fe96 	bl	80002b0 <__aeabi_dmul>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4610      	mov	r0, r2
 800158a:	4619      	mov	r1, r3
 800158c:	f7ff f9fe 	bl	800098c <__aeabi_d2iz>
 8001590:	4603      	mov	r3, r0
 8001592:	4a7b      	ldr	r2, [pc, #492]	; (8001780 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 8001594:	6013      	str	r3, [r2, #0]
  }

  if ((RxHeader.StdId == 0x370) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8001596:	4b77      	ldr	r3, [pc, #476]	; (8001774 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f5b3 7f5c 	cmp.w	r3, #880	; 0x370
 800159e:	d12d      	bne.n	80015fc <HAL_CAN_RxFifo0MsgPendingCallback+0x104>
 80015a0:	4b74      	ldr	r3, [pc, #464]	; (8001774 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d129      	bne.n	80015fc <HAL_CAN_RxFifo0MsgPendingCallback+0x104>
 80015a8:	4b72      	ldr	r3, [pc, #456]	; (8001774 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	2b08      	cmp	r3, #8
 80015ae:	d125      	bne.n	80015fc <HAL_CAN_RxFifo0MsgPendingCallback+0x104>
  {
	 uint16_t speed_in = (RxData[0] << 8) | (RxData[1] << 0);
 80015b0:	4b6f      	ldr	r3, [pc, #444]	; (8001770 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	021b      	lsls	r3, r3, #8
 80015b6:	b21a      	sxth	r2, r3
 80015b8:	4b6d      	ldr	r3, [pc, #436]	; (8001770 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 80015ba:	785b      	ldrb	r3, [r3, #1]
 80015bc:	b21b      	sxth	r3, r3
 80015be:	4313      	orrs	r3, r2
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	837b      	strh	r3, [r7, #26]

	 speed = (int)speed_in * 0.1;
 80015c4:	8b7b      	ldrh	r3, [r7, #26]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff f8ee 	bl	80007a8 <__aeabi_i2d>
 80015cc:	a366      	add	r3, pc, #408	; (adr r3, 8001768 <HAL_CAN_RxFifo0MsgPendingCallback+0x270>)
 80015ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d2:	f7fe fe6d 	bl	80002b0 <__aeabi_dmul>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4610      	mov	r0, r2
 80015dc:	4619      	mov	r1, r3
 80015de:	f7ff f9d5 	bl	800098c <__aeabi_d2iz>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4a67      	ldr	r2, [pc, #412]	; (8001784 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 80015e6:	6013      	str	r3, [r2, #0]
	 if(speed > max_speed) {
 80015e8:	4b66      	ldr	r3, [pc, #408]	; (8001784 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4b66      	ldr	r3, [pc, #408]	; (8001788 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	dd03      	ble.n	80015fc <HAL_CAN_RxFifo0MsgPendingCallback+0x104>
		 max_speed = speed;
 80015f4:	4b63      	ldr	r3, [pc, #396]	; (8001784 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a63      	ldr	r2, [pc, #396]	; (8001788 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 80015fa:	6013      	str	r3, [r2, #0]
	 }
  }

  if ((RxHeader.StdId == 0x3E0) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 80015fc:	4b5d      	ldr	r3, [pc, #372]	; (8001774 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f5b3 7f78 	cmp.w	r3, #992	; 0x3e0
 8001604:	d157      	bne.n	80016b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1be>
 8001606:	4b5b      	ldr	r3, [pc, #364]	; (8001774 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d153      	bne.n	80016b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1be>
 800160e:	4b59      	ldr	r3, [pc, #356]	; (8001774 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	2b08      	cmp	r3, #8
 8001614:	d14f      	bne.n	80016b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1be>
  {
	 uint16_t clt_in = (RxData[0] << 8) | (RxData[1] << 0);
 8001616:	4b56      	ldr	r3, [pc, #344]	; (8001770 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	021b      	lsls	r3, r3, #8
 800161c:	b21a      	sxth	r2, r3
 800161e:	4b54      	ldr	r3, [pc, #336]	; (8001770 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8001620:	785b      	ldrb	r3, [r3, #1]
 8001622:	b21b      	sxth	r3, r3
 8001624:	4313      	orrs	r3, r2
 8001626:	b21b      	sxth	r3, r3
 8001628:	833b      	strh	r3, [r7, #24]
	 uint16_t iat_in = (RxData[2] << 8) | (RxData[3] << 0);
 800162a:	4b51      	ldr	r3, [pc, #324]	; (8001770 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 800162c:	789b      	ldrb	r3, [r3, #2]
 800162e:	021b      	lsls	r3, r3, #8
 8001630:	b21a      	sxth	r2, r3
 8001632:	4b4f      	ldr	r3, [pc, #316]	; (8001770 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8001634:	78db      	ldrb	r3, [r3, #3]
 8001636:	b21b      	sxth	r3, r3
 8001638:	4313      	orrs	r3, r2
 800163a:	b21b      	sxth	r3, r3
 800163c:	82fb      	strh	r3, [r7, #22]
	 uint16_t oil_tmp_in = (RxData[6] << 8) | (RxData[7] << 0);
 800163e:	4b4c      	ldr	r3, [pc, #304]	; (8001770 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8001640:	799b      	ldrb	r3, [r3, #6]
 8001642:	021b      	lsls	r3, r3, #8
 8001644:	b21a      	sxth	r2, r3
 8001646:	4b4a      	ldr	r3, [pc, #296]	; (8001770 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8001648:	79db      	ldrb	r3, [r3, #7]
 800164a:	b21b      	sxth	r3, r3
 800164c:	4313      	orrs	r3, r2
 800164e:	b21b      	sxth	r3, r3
 8001650:	82bb      	strh	r3, [r7, #20]

	 clt = ((int)clt_in - 2731) * 0.1;
 8001652:	8b3b      	ldrh	r3, [r7, #24]
 8001654:	f6a3 23ab 	subw	r3, r3, #2731	; 0xaab
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff f8a5 	bl	80007a8 <__aeabi_i2d>
 800165e:	a342      	add	r3, pc, #264	; (adr r3, 8001768 <HAL_CAN_RxFifo0MsgPendingCallback+0x270>)
 8001660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001664:	f7fe fe24 	bl	80002b0 <__aeabi_dmul>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4610      	mov	r0, r2
 800166e:	4619      	mov	r1, r3
 8001670:	f7ff f98c 	bl	800098c <__aeabi_d2iz>
 8001674:	4603      	mov	r3, r0
 8001676:	4a45      	ldr	r2, [pc, #276]	; (800178c <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 8001678:	6013      	str	r3, [r2, #0]
	 if(clt > max_clt){
 800167a:	4b44      	ldr	r3, [pc, #272]	; (800178c <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	4b44      	ldr	r3, [pc, #272]	; (8001790 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	dd03      	ble.n	800168e <HAL_CAN_RxFifo0MsgPendingCallback+0x196>
		 max_clt = clt;
 8001686:	4b41      	ldr	r3, [pc, #260]	; (800178c <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a41      	ldr	r2, [pc, #260]	; (8001790 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 800168c:	6013      	str	r3, [r2, #0]
	 }

	 iat = ((int)iat_in - 2731) * 0.1;
 800168e:	8afb      	ldrh	r3, [r7, #22]
 8001690:	f6a3 23ab 	subw	r3, r3, #2731	; 0xaab
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff f887 	bl	80007a8 <__aeabi_i2d>
 800169a:	a333      	add	r3, pc, #204	; (adr r3, 8001768 <HAL_CAN_RxFifo0MsgPendingCallback+0x270>)
 800169c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a0:	f7fe fe06 	bl	80002b0 <__aeabi_dmul>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4610      	mov	r0, r2
 80016aa:	4619      	mov	r1, r3
 80016ac:	f7ff f96e 	bl	800098c <__aeabi_d2iz>
 80016b0:	4603      	mov	r3, r0
 80016b2:	4a38      	ldr	r2, [pc, #224]	; (8001794 <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 80016b4:	6013      	str	r3, [r2, #0]
//	 if(oil_tmp > max_oil_tmp){
//		 max_oil_tmp = oil_tmp;
//	 }
  }

  if ((RxHeader.StdId == 0x368) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 80016b6:	4b2f      	ldr	r3, [pc, #188]	; (8001774 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 80016be:	d12c      	bne.n	800171a <HAL_CAN_RxFifo0MsgPendingCallback+0x222>
 80016c0:	4b2c      	ldr	r3, [pc, #176]	; (8001774 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d128      	bne.n	800171a <HAL_CAN_RxFifo0MsgPendingCallback+0x222>
 80016c8:	4b2a      	ldr	r3, [pc, #168]	; (8001774 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	2b08      	cmp	r3, #8
 80016ce:	d124      	bne.n	800171a <HAL_CAN_RxFifo0MsgPendingCallback+0x222>
  {
	 uint16_t lambda_in = (RxData[0] << 8) | (RxData[1] << 0);
 80016d0:	4b27      	ldr	r3, [pc, #156]	; (8001770 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	021b      	lsls	r3, r3, #8
 80016d6:	b21a      	sxth	r2, r3
 80016d8:	4b25      	ldr	r3, [pc, #148]	; (8001770 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 80016da:	785b      	ldrb	r3, [r3, #1]
 80016dc:	b21b      	sxth	r3, r3
 80016de:	4313      	orrs	r3, r2
 80016e0:	b21b      	sxth	r3, r3
 80016e2:	827b      	strh	r3, [r7, #18]
	 lambda = ((float)lambda_in)*0.001f;
 80016e4:	8a7b      	ldrh	r3, [r7, #18]
 80016e6:	ee07 3a90 	vmov	s15, r3
 80016ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016ee:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001798 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>
 80016f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016f6:	4b29      	ldr	r3, [pc, #164]	; (800179c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80016f8:	edc3 7a00 	vstr	s15, [r3]
	 if(lambda > max_lambda){
 80016fc:	4b27      	ldr	r3, [pc, #156]	; (800179c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80016fe:	ed93 7a00 	vldr	s14, [r3]
 8001702:	4b27      	ldr	r3, [pc, #156]	; (80017a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8001704:	edd3 7a00 	vldr	s15, [r3]
 8001708:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800170c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001710:	dd03      	ble.n	800171a <HAL_CAN_RxFifo0MsgPendingCallback+0x222>
		 max_lambda = lambda;
 8001712:	4b22      	ldr	r3, [pc, #136]	; (800179c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a22      	ldr	r2, [pc, #136]	; (80017a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8001718:	6013      	str	r3, [r2, #0]
	 }
   }

  if ((RxHeader.StdId == 0x372) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 800171a:	4b16      	ldr	r3, [pc, #88]	; (8001774 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f240 3272 	movw	r2, #882	; 0x372
 8001722:	4293      	cmp	r3, r2
 8001724:	d142      	bne.n	80017ac <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>
 8001726:	4b13      	ldr	r3, [pc, #76]	; (8001774 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d13e      	bne.n	80017ac <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>
 800172e:	4b11      	ldr	r3, [pc, #68]	; (8001774 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	2b08      	cmp	r3, #8
 8001734:	d13a      	bne.n	80017ac <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>
  {
	 uint16_t batt_in = (RxData[0] << 8) | (RxData[1] << 0);
 8001736:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	021b      	lsls	r3, r3, #8
 800173c:	b21a      	sxth	r2, r3
 800173e:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8001740:	785b      	ldrb	r3, [r3, #1]
 8001742:	b21b      	sxth	r3, r3
 8001744:	4313      	orrs	r3, r2
 8001746:	b21b      	sxth	r3, r3
 8001748:	823b      	strh	r3, [r7, #16]
	 float battery_voltage = ((float)batt_in)*0.1f;
 800174a:	8a3b      	ldrh	r3, [r7, #16]
 800174c:	ee07 3a90 	vmov	s15, r3
 8001750:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001754:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80017a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>
 8001758:	ee67 7a87 	vmul.f32	s15, s15, s14
 800175c:	edc7 7a03 	vstr	s15, [r7, #12]
	 batt_v = battery_voltage;
 8001760:	4a11      	ldr	r2, [pc, #68]	; (80017a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	e021      	b.n	80017ac <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>
 8001768:	9999999a 	.word	0x9999999a
 800176c:	3fb99999 	.word	0x3fb99999
 8001770:	20000410 	.word	0x20000410
 8001774:	200003f4 	.word	0x200003f4
 8001778:	20000ae8 	.word	0x20000ae8
 800177c:	20000aec 	.word	0x20000aec
 8001780:	20000b24 	.word	0x20000b24
 8001784:	20000b00 	.word	0x20000b00
 8001788:	20000b04 	.word	0x20000b04
 800178c:	20000af0 	.word	0x20000af0
 8001790:	20000af4 	.word	0x20000af4
 8001794:	20000b18 	.word	0x20000b18
 8001798:	3a83126f 	.word	0x3a83126f
 800179c:	20000af8 	.word	0x20000af8
 80017a0:	20000afc 	.word	0x20000afc
 80017a4:	3dcccccd 	.word	0x3dcccccd
 80017a8:	20000b28 	.word	0x20000b28
	 (void)batt_v;
  }

  if ((RxHeader.StdId == 0x500) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 3))
 80017ac:	4b16      	ldr	r3, [pc, #88]	; (8001808 <HAL_CAN_RxFifo0MsgPendingCallback+0x310>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80017b4:	d123      	bne.n	80017fe <HAL_CAN_RxFifo0MsgPendingCallback+0x306>
 80017b6:	4b14      	ldr	r3, [pc, #80]	; (8001808 <HAL_CAN_RxFifo0MsgPendingCallback+0x310>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d11f      	bne.n	80017fe <HAL_CAN_RxFifo0MsgPendingCallback+0x306>
 80017be:	4b12      	ldr	r3, [pc, #72]	; (8001808 <HAL_CAN_RxFifo0MsgPendingCallback+0x310>)
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	2b03      	cmp	r3, #3
 80017c4:	d11b      	bne.n	80017fe <HAL_CAN_RxFifo0MsgPendingCallback+0x306>
    {
  	 uint8_t lambda_targ_in = RxData[0];
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <HAL_CAN_RxFifo0MsgPendingCallback+0x314>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	72fb      	strb	r3, [r7, #11]
  	 uint16_t fuel_p_d = (RxData[1] << 0) | (RxData[2] << 8);
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <HAL_CAN_RxFifo0MsgPendingCallback+0x314>)
 80017ce:	785b      	ldrb	r3, [r3, #1]
 80017d0:	b21a      	sxth	r2, r3
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <HAL_CAN_RxFifo0MsgPendingCallback+0x314>)
 80017d4:	789b      	ldrb	r3, [r3, #2]
 80017d6:	021b      	lsls	r3, r3, #8
 80017d8:	b21b      	sxth	r3, r3
 80017da:	4313      	orrs	r3, r2
 80017dc:	b21b      	sxth	r3, r3
 80017de:	813b      	strh	r3, [r7, #8]
  	 lambda_targ = ((float)lambda_targ_in) / 100;
 80017e0:	7afb      	ldrb	r3, [r7, #11]
 80017e2:	ee07 3a90 	vmov	s15, r3
 80017e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017ea:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001810 <HAL_CAN_RxFifo0MsgPendingCallback+0x318>
 80017ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017f2:	4b08      	ldr	r3, [pc, #32]	; (8001814 <HAL_CAN_RxFifo0MsgPendingCallback+0x31c>)
 80017f4:	edc3 7a00 	vstr	s15, [r3]
  	 fuel_press = ((int)fuel_p_d);
 80017f8:	893b      	ldrh	r3, [r7, #8]
 80017fa:	4a07      	ldr	r2, [pc, #28]	; (8001818 <HAL_CAN_RxFifo0MsgPendingCallback+0x320>)
 80017fc:	6013      	str	r3, [r2, #0]
    }
}
 80017fe:	bf00      	nop
 8001800:	3720      	adds	r7, #32
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	200003f4 	.word	0x200003f4
 800180c:	20000410 	.word	0x20000410
 8001810:	42c80000 	.word	0x42c80000
 8001814:	20000008 	.word	0x20000008
 8001818:	20000b14 	.word	0x20000b14

0800181c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001820:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <MX_CRC_Init+0x3c>)
 8001822:	4a0e      	ldr	r2, [pc, #56]	; (800185c <MX_CRC_Init+0x40>)
 8001824:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001826:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <MX_CRC_Init+0x3c>)
 8001828:	2200      	movs	r2, #0
 800182a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800182c:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <MX_CRC_Init+0x3c>)
 800182e:	2200      	movs	r2, #0
 8001830:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <MX_CRC_Init+0x3c>)
 8001834:	2200      	movs	r2, #0
 8001836:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001838:	4b07      	ldr	r3, [pc, #28]	; (8001858 <MX_CRC_Init+0x3c>)
 800183a:	2200      	movs	r2, #0
 800183c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <MX_CRC_Init+0x3c>)
 8001840:	2201      	movs	r2, #1
 8001842:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001844:	4804      	ldr	r0, [pc, #16]	; (8001858 <MX_CRC_Init+0x3c>)
 8001846:	f003 fb4b 	bl	8004ee0 <HAL_CRC_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001850:	f001 f8dc 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000418 	.word	0x20000418
 800185c:	40023000 	.word	0x40023000

08001860 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001864:	4b16      	ldr	r3, [pc, #88]	; (80018c0 <MX_DCMI_Init+0x60>)
 8001866:	4a17      	ldr	r2, [pc, #92]	; (80018c4 <MX_DCMI_Init+0x64>)
 8001868:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800186a:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <MX_DCMI_Init+0x60>)
 800186c:	2200      	movs	r2, #0
 800186e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001870:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <MX_DCMI_Init+0x60>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001876:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <MX_DCMI_Init+0x60>)
 8001878:	2200      	movs	r2, #0
 800187a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800187c:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <MX_DCMI_Init+0x60>)
 800187e:	2200      	movs	r2, #0
 8001880:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001882:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <MX_DCMI_Init+0x60>)
 8001884:	2200      	movs	r2, #0
 8001886:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001888:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <MX_DCMI_Init+0x60>)
 800188a:	2200      	movs	r2, #0
 800188c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800188e:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <MX_DCMI_Init+0x60>)
 8001890:	2200      	movs	r2, #0
 8001892:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001894:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <MX_DCMI_Init+0x60>)
 8001896:	2200      	movs	r2, #0
 8001898:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <MX_DCMI_Init+0x60>)
 800189c:	2200      	movs	r2, #0
 800189e:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80018a0:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <MX_DCMI_Init+0x60>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <MX_DCMI_Init+0x60>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80018ac:	4804      	ldr	r0, [pc, #16]	; (80018c0 <MX_DCMI_Init+0x60>)
 80018ae:	f003 fc01 	bl	80050b4 <HAL_DCMI_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80018b8:	f001 f8a8 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	2000043c 	.word	0x2000043c
 80018c4:	50050000 	.word	0x50050000

080018c8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80018cc:	4b15      	ldr	r3, [pc, #84]	; (8001924 <MX_DMA2D_Init+0x5c>)
 80018ce:	4a16      	ldr	r2, [pc, #88]	; (8001928 <MX_DMA2D_Init+0x60>)
 80018d0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80018d2:	4b14      	ldr	r3, [pc, #80]	; (8001924 <MX_DMA2D_Init+0x5c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80018d8:	4b12      	ldr	r3, [pc, #72]	; (8001924 <MX_DMA2D_Init+0x5c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80018de:	4b11      	ldr	r3, [pc, #68]	; (8001924 <MX_DMA2D_Init+0x5c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80018e4:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <MX_DMA2D_Init+0x5c>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80018ea:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <MX_DMA2D_Init+0x5c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <MX_DMA2D_Init+0x5c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80018f6:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <MX_DMA2D_Init+0x5c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80018fc:	4809      	ldr	r0, [pc, #36]	; (8001924 <MX_DMA2D_Init+0x5c>)
 80018fe:	f003 fced 	bl	80052dc <HAL_DMA2D_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001908:	f001 f880 	bl	8002a0c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800190c:	2101      	movs	r1, #1
 800190e:	4805      	ldr	r0, [pc, #20]	; (8001924 <MX_DMA2D_Init+0x5c>)
 8001910:	f003 ffae 	bl	8005870 <HAL_DMA2D_ConfigLayer>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800191a:	f001 f877 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	2000048c 	.word	0x2000048c
 8001928:	4002b000 	.word	0x4002b000

0800192c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08e      	sub	sp, #56	; 0x38
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	2234      	movs	r2, #52	; 0x34
 8001936:	2100      	movs	r1, #0
 8001938:	4618      	mov	r0, r3
 800193a:	f024 fdec 	bl	8026516 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800193e:	4b3a      	ldr	r3, [pc, #232]	; (8001a28 <MX_LTDC_Init+0xfc>)
 8001940:	4a3a      	ldr	r2, [pc, #232]	; (8001a2c <MX_LTDC_Init+0x100>)
 8001942:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001944:	4b38      	ldr	r3, [pc, #224]	; (8001a28 <MX_LTDC_Init+0xfc>)
 8001946:	2200      	movs	r2, #0
 8001948:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800194a:	4b37      	ldr	r3, [pc, #220]	; (8001a28 <MX_LTDC_Init+0xfc>)
 800194c:	2200      	movs	r2, #0
 800194e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001950:	4b35      	ldr	r3, [pc, #212]	; (8001a28 <MX_LTDC_Init+0xfc>)
 8001952:	2200      	movs	r2, #0
 8001954:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001956:	4b34      	ldr	r3, [pc, #208]	; (8001a28 <MX_LTDC_Init+0xfc>)
 8001958:	2200      	movs	r2, #0
 800195a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800195c:	4b32      	ldr	r3, [pc, #200]	; (8001a28 <MX_LTDC_Init+0xfc>)
 800195e:	2228      	movs	r2, #40	; 0x28
 8001960:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001962:	4b31      	ldr	r3, [pc, #196]	; (8001a28 <MX_LTDC_Init+0xfc>)
 8001964:	2209      	movs	r2, #9
 8001966:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001968:	4b2f      	ldr	r3, [pc, #188]	; (8001a28 <MX_LTDC_Init+0xfc>)
 800196a:	2235      	movs	r2, #53	; 0x35
 800196c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800196e:	4b2e      	ldr	r3, [pc, #184]	; (8001a28 <MX_LTDC_Init+0xfc>)
 8001970:	220b      	movs	r2, #11
 8001972:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001974:	4b2c      	ldr	r3, [pc, #176]	; (8001a28 <MX_LTDC_Init+0xfc>)
 8001976:	f240 2215 	movw	r2, #533	; 0x215
 800197a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800197c:	4b2a      	ldr	r3, [pc, #168]	; (8001a28 <MX_LTDC_Init+0xfc>)
 800197e:	f240 121b 	movw	r2, #283	; 0x11b
 8001982:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001984:	4b28      	ldr	r3, [pc, #160]	; (8001a28 <MX_LTDC_Init+0xfc>)
 8001986:	f240 2235 	movw	r2, #565	; 0x235
 800198a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800198c:	4b26      	ldr	r3, [pc, #152]	; (8001a28 <MX_LTDC_Init+0xfc>)
 800198e:	f240 121d 	movw	r2, #285	; 0x11d
 8001992:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001994:	4b24      	ldr	r3, [pc, #144]	; (8001a28 <MX_LTDC_Init+0xfc>)
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800199c:	4b22      	ldr	r3, [pc, #136]	; (8001a28 <MX_LTDC_Init+0xfc>)
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80019a4:	4b20      	ldr	r3, [pc, #128]	; (8001a28 <MX_LTDC_Init+0xfc>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80019ac:	481e      	ldr	r0, [pc, #120]	; (8001a28 <MX_LTDC_Init+0xfc>)
 80019ae:	f004 fa6b 	bl	8005e88 <HAL_LTDC_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80019b8:	f001 f828 	bl	8002a0c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80019bc:	2300      	movs	r3, #0
 80019be:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80019c0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80019c4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80019ca:	f44f 7388 	mov.w	r3, #272	; 0x110
 80019ce:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 80019d0:	2301      	movs	r3, #1
 80019d2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80019d4:	23ff      	movs	r3, #255	; 0xff
 80019d6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80019dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019e0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80019e2:	2305      	movs	r3, #5
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80019e6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80019ea:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80019ec:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80019f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80019f2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80019f6:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4805      	ldr	r0, [pc, #20]	; (8001a28 <MX_LTDC_Init+0xfc>)
 8001a12:	f004 fbc1 	bl	8006198 <HAL_LTDC_ConfigLayer>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001a1c:	f000 fff6 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001a20:	bf00      	nop
 8001a22:	3738      	adds	r7, #56	; 0x38
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	200004cc 	.word	0x200004cc
 8001a2c:	40016800 	.word	0x40016800

08001a30 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <MX_QUADSPI_Init+0x50>)
 8001a36:	4a13      	ldr	r2, [pc, #76]	; (8001a84 <MX_QUADSPI_Init+0x54>)
 8001a38:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <MX_QUADSPI_Init+0x50>)
 8001a3c:	22ff      	movs	r2, #255	; 0xff
 8001a3e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001a40:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <MX_QUADSPI_Init+0x50>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <MX_QUADSPI_Init+0x50>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <MX_QUADSPI_Init+0x50>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001a52:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <MX_QUADSPI_Init+0x50>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001a58:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <MX_QUADSPI_Init+0x50>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001a5e:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <MX_QUADSPI_Init+0x50>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <MX_QUADSPI_Init+0x50>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001a6a:	4805      	ldr	r0, [pc, #20]	; (8001a80 <MX_QUADSPI_Init+0x50>)
 8001a6c:	f004 fe04 	bl	8006678 <HAL_QSPI_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001a76:	f000 ffc9 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000574 	.word	0x20000574
 8001a84:	a0001000 	.word	0xa0001000

08001a88 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b092      	sub	sp, #72	; 0x48
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001a8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	60da      	str	r2, [r3, #12]
 8001a9c:	611a      	str	r2, [r3, #16]
 8001a9e:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001aa4:	463b      	mov	r3, r7
 8001aa6:	222c      	movs	r2, #44	; 0x2c
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f024 fd33 	bl	8026516 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001ab0:	4b47      	ldr	r3, [pc, #284]	; (8001bd0 <MX_RTC_Init+0x148>)
 8001ab2:	4a48      	ldr	r2, [pc, #288]	; (8001bd4 <MX_RTC_Init+0x14c>)
 8001ab4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001ab6:	4b46      	ldr	r3, [pc, #280]	; (8001bd0 <MX_RTC_Init+0x148>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001abc:	4b44      	ldr	r3, [pc, #272]	; (8001bd0 <MX_RTC_Init+0x148>)
 8001abe:	227f      	movs	r2, #127	; 0x7f
 8001ac0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001ac2:	4b43      	ldr	r3, [pc, #268]	; (8001bd0 <MX_RTC_Init+0x148>)
 8001ac4:	22ff      	movs	r2, #255	; 0xff
 8001ac6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ac8:	4b41      	ldr	r3, [pc, #260]	; (8001bd0 <MX_RTC_Init+0x148>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ace:	4b40      	ldr	r3, [pc, #256]	; (8001bd0 <MX_RTC_Init+0x148>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ad4:	4b3e      	ldr	r3, [pc, #248]	; (8001bd0 <MX_RTC_Init+0x148>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ada:	483d      	ldr	r0, [pc, #244]	; (8001bd0 <MX_RTC_Init+0x148>)
 8001adc:	f006 f87a 	bl	8007bd4 <HAL_RTC_Init>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001ae6:	f000 ff91 	bl	8002a0c <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001afc:	2300      	movs	r3, #0
 8001afe:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b00:	2300      	movs	r3, #0
 8001b02:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001b04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b08:	2201      	movs	r2, #1
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4830      	ldr	r0, [pc, #192]	; (8001bd0 <MX_RTC_Init+0x148>)
 8001b0e:	f006 f8dd 	bl	8007ccc <HAL_RTC_SetTime>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001b18:	f000 ff78 	bl	8002a0c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001b22:	2301      	movs	r3, #1
 8001b24:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001b34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b38:	2201      	movs	r2, #1
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4824      	ldr	r0, [pc, #144]	; (8001bd0 <MX_RTC_Init+0x148>)
 8001b3e:	f006 f983 	bl	8007e48 <HAL_RTC_SetDate>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001b48:	f000 ff60 	bl	8002a0c <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001b64:	2300      	movs	r3, #0
 8001b66:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001b70:	2301      	movs	r3, #1
 8001b72:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001b76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001b7c:	463b      	mov	r3, r7
 8001b7e:	2201      	movs	r2, #1
 8001b80:	4619      	mov	r1, r3
 8001b82:	4813      	ldr	r0, [pc, #76]	; (8001bd0 <MX_RTC_Init+0x148>)
 8001b84:	f006 fa08 	bl	8007f98 <HAL_RTC_SetAlarm>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001b8e:	f000 ff3d 	bl	8002a0c <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 8001b92:	2301      	movs	r3, #1
 8001b94:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 8001b98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001b9e:	463b      	mov	r3, r7
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	480a      	ldr	r0, [pc, #40]	; (8001bd0 <MX_RTC_Init+0x148>)
 8001ba6:	f006 f9f7 	bl	8007f98 <HAL_RTC_SetAlarm>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 8001bb0:	f000 ff2c 	bl	8002a0c <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	4805      	ldr	r0, [pc, #20]	; (8001bd0 <MX_RTC_Init+0x148>)
 8001bba:	f006 fb77 	bl	80082ac <HAL_RTCEx_SetTimeStamp>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_RTC_Init+0x140>
  {
    Error_Handler();
 8001bc4:	f000 ff22 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001bc8:	bf00      	nop
 8001bca:	3748      	adds	r7, #72	; 0x48
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	200005c0 	.word	0x200005c0
 8001bd4:	40002800 	.word	0x40002800

08001bd8 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001bdc:	4b4d      	ldr	r3, [pc, #308]	; (8001d14 <MX_SAI2_Init+0x13c>)
 8001bde:	4a4e      	ldr	r2, [pc, #312]	; (8001d18 <MX_SAI2_Init+0x140>)
 8001be0:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001be2:	4b4c      	ldr	r3, [pc, #304]	; (8001d14 <MX_SAI2_Init+0x13c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001be8:	4b4a      	ldr	r3, [pc, #296]	; (8001d14 <MX_SAI2_Init+0x13c>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001bee:	4b49      	ldr	r3, [pc, #292]	; (8001d14 <MX_SAI2_Init+0x13c>)
 8001bf0:	2240      	movs	r2, #64	; 0x40
 8001bf2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001bf4:	4b47      	ldr	r3, [pc, #284]	; (8001d14 <MX_SAI2_Init+0x13c>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001bfa:	4b46      	ldr	r3, [pc, #280]	; (8001d14 <MX_SAI2_Init+0x13c>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001c00:	4b44      	ldr	r3, [pc, #272]	; (8001d14 <MX_SAI2_Init+0x13c>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001c06:	4b43      	ldr	r3, [pc, #268]	; (8001d14 <MX_SAI2_Init+0x13c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001c0c:	4b41      	ldr	r3, [pc, #260]	; (8001d14 <MX_SAI2_Init+0x13c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001c12:	4b40      	ldr	r3, [pc, #256]	; (8001d14 <MX_SAI2_Init+0x13c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001c18:	4b3e      	ldr	r3, [pc, #248]	; (8001d14 <MX_SAI2_Init+0x13c>)
 8001c1a:	4a40      	ldr	r2, [pc, #256]	; (8001d1c <MX_SAI2_Init+0x144>)
 8001c1c:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001c1e:	4b3d      	ldr	r3, [pc, #244]	; (8001d14 <MX_SAI2_Init+0x13c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001c24:	4b3b      	ldr	r3, [pc, #236]	; (8001d14 <MX_SAI2_Init+0x13c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001c2a:	4b3a      	ldr	r3, [pc, #232]	; (8001d14 <MX_SAI2_Init+0x13c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001c30:	4b38      	ldr	r3, [pc, #224]	; (8001d14 <MX_SAI2_Init+0x13c>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001c36:	4b37      	ldr	r3, [pc, #220]	; (8001d14 <MX_SAI2_Init+0x13c>)
 8001c38:	2208      	movs	r2, #8
 8001c3a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001c3c:	4b35      	ldr	r3, [pc, #212]	; (8001d14 <MX_SAI2_Init+0x13c>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001c42:	4b34      	ldr	r3, [pc, #208]	; (8001d14 <MX_SAI2_Init+0x13c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001c48:	4b32      	ldr	r3, [pc, #200]	; (8001d14 <MX_SAI2_Init+0x13c>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001c4e:	4b31      	ldr	r3, [pc, #196]	; (8001d14 <MX_SAI2_Init+0x13c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001c54:	4b2f      	ldr	r3, [pc, #188]	; (8001d14 <MX_SAI2_Init+0x13c>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001c5a:	4b2e      	ldr	r3, [pc, #184]	; (8001d14 <MX_SAI2_Init+0x13c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001c60:	4b2c      	ldr	r3, [pc, #176]	; (8001d14 <MX_SAI2_Init+0x13c>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001c66:	4b2b      	ldr	r3, [pc, #172]	; (8001d14 <MX_SAI2_Init+0x13c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001c6c:	4829      	ldr	r0, [pc, #164]	; (8001d14 <MX_SAI2_Init+0x13c>)
 8001c6e:	f006 fb73 	bl	8008358 <HAL_SAI_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001c78:	f000 fec8 	bl	8002a0c <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001c7c:	4b28      	ldr	r3, [pc, #160]	; (8001d20 <MX_SAI2_Init+0x148>)
 8001c7e:	4a29      	ldr	r2, [pc, #164]	; (8001d24 <MX_SAI2_Init+0x14c>)
 8001c80:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001c82:	4b27      	ldr	r3, [pc, #156]	; (8001d20 <MX_SAI2_Init+0x148>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001c88:	4b25      	ldr	r3, [pc, #148]	; (8001d20 <MX_SAI2_Init+0x148>)
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001c8e:	4b24      	ldr	r3, [pc, #144]	; (8001d20 <MX_SAI2_Init+0x148>)
 8001c90:	2240      	movs	r2, #64	; 0x40
 8001c92:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001c94:	4b22      	ldr	r3, [pc, #136]	; (8001d20 <MX_SAI2_Init+0x148>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001c9a:	4b21      	ldr	r3, [pc, #132]	; (8001d20 <MX_SAI2_Init+0x148>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001ca0:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <MX_SAI2_Init+0x148>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001ca6:	4b1e      	ldr	r3, [pc, #120]	; (8001d20 <MX_SAI2_Init+0x148>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001cac:	4b1c      	ldr	r3, [pc, #112]	; (8001d20 <MX_SAI2_Init+0x148>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001cb2:	4b1b      	ldr	r3, [pc, #108]	; (8001d20 <MX_SAI2_Init+0x148>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001cb8:	4b19      	ldr	r3, [pc, #100]	; (8001d20 <MX_SAI2_Init+0x148>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001cbe:	4b18      	ldr	r3, [pc, #96]	; (8001d20 <MX_SAI2_Init+0x148>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001cc4:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <MX_SAI2_Init+0x148>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001cca:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <MX_SAI2_Init+0x148>)
 8001ccc:	2208      	movs	r2, #8
 8001cce:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001cd0:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <MX_SAI2_Init+0x148>)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001cd6:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <MX_SAI2_Init+0x148>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001cdc:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <MX_SAI2_Init+0x148>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001ce2:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <MX_SAI2_Init+0x148>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001ce8:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <MX_SAI2_Init+0x148>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001cee:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <MX_SAI2_Init+0x148>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001cf4:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <MX_SAI2_Init+0x148>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001cfa:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <MX_SAI2_Init+0x148>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001d00:	4807      	ldr	r0, [pc, #28]	; (8001d20 <MX_SAI2_Init+0x148>)
 8001d02:	f006 fb29 	bl	8008358 <HAL_SAI_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001d0c:	f000 fe7e 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	200005e0 	.word	0x200005e0
 8001d18:	40015c04 	.word	0x40015c04
 8001d1c:	0002ee00 	.word	0x0002ee00
 8001d20:	20000664 	.word	0x20000664
 8001d24:	40015c24 	.word	0x40015c24

08001d28 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <MX_SDMMC1_SD_Init+0x38>)
 8001d2e:	4a0d      	ldr	r2, [pc, #52]	; (8001d64 <MX_SDMMC1_SD_Init+0x3c>)
 8001d30:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001d32:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <MX_SDMMC1_SD_Init+0x38>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001d38:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <MX_SDMMC1_SD_Init+0x38>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001d3e:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <MX_SDMMC1_SD_Init+0x38>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <MX_SDMMC1_SD_Init+0x38>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001d4a:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <MX_SDMMC1_SD_Init+0x38>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001d50:	4b03      	ldr	r3, [pc, #12]	; (8001d60 <MX_SDMMC1_SD_Init+0x38>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001d56:	bf00      	nop
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	200006e8 	.word	0x200006e8
 8001d64:	40012c00 	.word	0x40012c00

08001d68 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001d6c:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <MX_SPDIFRX_Init+0x5c>)
 8001d6e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001d72:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001d74:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <MX_SPDIFRX_Init+0x5c>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001d7a:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <MX_SPDIFRX_Init+0x5c>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001d80:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <MX_SPDIFRX_Init+0x5c>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001d86:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <MX_SPDIFRX_Init+0x5c>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001d8c:	4b0d      	ldr	r3, [pc, #52]	; (8001dc4 <MX_SPDIFRX_Init+0x5c>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001d92:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <MX_SPDIFRX_Init+0x5c>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001d98:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <MX_SPDIFRX_Init+0x5c>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001d9e:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <MX_SPDIFRX_Init+0x5c>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001da4:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <MX_SPDIFRX_Init+0x5c>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <MX_SPDIFRX_Init+0x5c>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001db0:	4804      	ldr	r0, [pc, #16]	; (8001dc4 <MX_SPDIFRX_Init+0x5c>)
 8001db2:	f007 fd69 	bl	8009888 <HAL_SPDIFRX_Init>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001dbc:	f000 fe26 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001dc0:	bf00      	nop
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	2000076c 	.word	0x2000076c

08001dc8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001dcc:	4b1b      	ldr	r3, [pc, #108]	; (8001e3c <MX_SPI2_Init+0x74>)
 8001dce:	4a1c      	ldr	r2, [pc, #112]	; (8001e40 <MX_SPI2_Init+0x78>)
 8001dd0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001dd2:	4b1a      	ldr	r3, [pc, #104]	; (8001e3c <MX_SPI2_Init+0x74>)
 8001dd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001dd8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001dda:	4b18      	ldr	r3, [pc, #96]	; (8001e3c <MX_SPI2_Init+0x74>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001de0:	4b16      	ldr	r3, [pc, #88]	; (8001e3c <MX_SPI2_Init+0x74>)
 8001de2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001de6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001de8:	4b14      	ldr	r3, [pc, #80]	; (8001e3c <MX_SPI2_Init+0x74>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dee:	4b13      	ldr	r3, [pc, #76]	; (8001e3c <MX_SPI2_Init+0x74>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001df4:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <MX_SPI2_Init+0x74>)
 8001df6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dfa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dfc:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <MX_SPI2_Init+0x74>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e02:	4b0e      	ldr	r3, [pc, #56]	; (8001e3c <MX_SPI2_Init+0x74>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e08:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <MX_SPI2_Init+0x74>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e0e:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <MX_SPI2_Init+0x74>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001e14:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <MX_SPI2_Init+0x74>)
 8001e16:	2207      	movs	r2, #7
 8001e18:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e1a:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <MX_SPI2_Init+0x74>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e20:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <MX_SPI2_Init+0x74>)
 8001e22:	2208      	movs	r2, #8
 8001e24:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e26:	4805      	ldr	r0, [pc, #20]	; (8001e3c <MX_SPI2_Init+0x74>)
 8001e28:	f007 fd8a 	bl	8009940 <HAL_SPI_Init>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001e32:	f000 fdeb 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200007b8 	.word	0x200007b8
 8001e40:	40003800 	.word	0x40003800

08001e44 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b09a      	sub	sp, #104	; 0x68
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	605a      	str	r2, [r3, #4]
 8001e54:	609a      	str	r2, [r3, #8]
 8001e56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e58:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	611a      	str	r2, [r3, #16]
 8001e74:	615a      	str	r2, [r3, #20]
 8001e76:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e78:	1d3b      	adds	r3, r7, #4
 8001e7a:	222c      	movs	r2, #44	; 0x2c
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f024 fb49 	bl	8026516 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e84:	4b43      	ldr	r3, [pc, #268]	; (8001f94 <MX_TIM1_Init+0x150>)
 8001e86:	4a44      	ldr	r2, [pc, #272]	; (8001f98 <MX_TIM1_Init+0x154>)
 8001e88:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e8a:	4b42      	ldr	r3, [pc, #264]	; (8001f94 <MX_TIM1_Init+0x150>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e90:	4b40      	ldr	r3, [pc, #256]	; (8001f94 <MX_TIM1_Init+0x150>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001e96:	4b3f      	ldr	r3, [pc, #252]	; (8001f94 <MX_TIM1_Init+0x150>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e9c:	4b3d      	ldr	r3, [pc, #244]	; (8001f94 <MX_TIM1_Init+0x150>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ea2:	4b3c      	ldr	r3, [pc, #240]	; (8001f94 <MX_TIM1_Init+0x150>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea8:	4b3a      	ldr	r3, [pc, #232]	; (8001f94 <MX_TIM1_Init+0x150>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001eae:	4839      	ldr	r0, [pc, #228]	; (8001f94 <MX_TIM1_Init+0x150>)
 8001eb0:	f007 fdd8 	bl	8009a64 <HAL_TIM_Base_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001eba:	f000 fda7 	bl	8002a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ebe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec2:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ec4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4832      	ldr	r0, [pc, #200]	; (8001f94 <MX_TIM1_Init+0x150>)
 8001ecc:	f008 f882 	bl	8009fd4 <HAL_TIM_ConfigClockSource>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001ed6:	f000 fd99 	bl	8002a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001eda:	482e      	ldr	r0, [pc, #184]	; (8001f94 <MX_TIM1_Init+0x150>)
 8001edc:	f007 fe18 	bl	8009b10 <HAL_TIM_PWM_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001ee6:	f000 fd91 	bl	8002a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eea:	2300      	movs	r3, #0
 8001eec:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ef6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001efa:	4619      	mov	r1, r3
 8001efc:	4825      	ldr	r0, [pc, #148]	; (8001f94 <MX_TIM1_Init+0x150>)
 8001efe:	f008 fcef 	bl	800a8e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001f08:	f000 fd80 	bl	8002a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f0c:	2360      	movs	r3, #96	; 0x60
 8001f0e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f14:	2300      	movs	r3, #0
 8001f16:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f20:	2300      	movs	r3, #0
 8001f22:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f24:	2300      	movs	r3, #0
 8001f26:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4818      	ldr	r0, [pc, #96]	; (8001f94 <MX_TIM1_Init+0x150>)
 8001f32:	f007 ff37 	bl	8009da4 <HAL_TIM_PWM_ConfigChannel>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001f3c:	f000 fd66 	bl	8002a0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f58:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f70:	1d3b      	adds	r3, r7, #4
 8001f72:	4619      	mov	r1, r3
 8001f74:	4807      	ldr	r0, [pc, #28]	; (8001f94 <MX_TIM1_Init+0x150>)
 8001f76:	f008 fd41 	bl	800a9fc <HAL_TIMEx_ConfigBreakDeadTime>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001f80:	f000 fd44 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f84:	4803      	ldr	r0, [pc, #12]	; (8001f94 <MX_TIM1_Init+0x150>)
 8001f86:	f001 fa3b 	bl	8003400 <HAL_TIM_MspPostInit>

}
 8001f8a:	bf00      	nop
 8001f8c:	3768      	adds	r7, #104	; 0x68
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	2000081c 	.word	0x2000081c
 8001f98:	40010000 	.word	0x40010000

08001f9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08e      	sub	sp, #56	; 0x38
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	605a      	str	r2, [r3, #4]
 8001fac:	609a      	str	r2, [r3, #8]
 8001fae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb0:	f107 031c 	add.w	r3, r7, #28
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fbc:	463b      	mov	r3, r7
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	60da      	str	r2, [r3, #12]
 8001fc8:	611a      	str	r2, [r3, #16]
 8001fca:	615a      	str	r2, [r3, #20]
 8001fcc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fce:	4b2d      	ldr	r3, [pc, #180]	; (8002084 <MX_TIM2_Init+0xe8>)
 8001fd0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fd4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001fd6:	4b2b      	ldr	r3, [pc, #172]	; (8002084 <MX_TIM2_Init+0xe8>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fdc:	4b29      	ldr	r3, [pc, #164]	; (8002084 <MX_TIM2_Init+0xe8>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001fe2:	4b28      	ldr	r3, [pc, #160]	; (8002084 <MX_TIM2_Init+0xe8>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe8:	4b26      	ldr	r3, [pc, #152]	; (8002084 <MX_TIM2_Init+0xe8>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fee:	4b25      	ldr	r3, [pc, #148]	; (8002084 <MX_TIM2_Init+0xe8>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ff4:	4823      	ldr	r0, [pc, #140]	; (8002084 <MX_TIM2_Init+0xe8>)
 8001ff6:	f007 fd35 	bl	8009a64 <HAL_TIM_Base_Init>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002000:	f000 fd04 	bl	8002a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002008:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800200a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800200e:	4619      	mov	r1, r3
 8002010:	481c      	ldr	r0, [pc, #112]	; (8002084 <MX_TIM2_Init+0xe8>)
 8002012:	f007 ffdf 	bl	8009fd4 <HAL_TIM_ConfigClockSource>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800201c:	f000 fcf6 	bl	8002a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002020:	4818      	ldr	r0, [pc, #96]	; (8002084 <MX_TIM2_Init+0xe8>)
 8002022:	f007 fd75 	bl	8009b10 <HAL_TIM_PWM_Init>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800202c:	f000 fcee 	bl	8002a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002030:	2300      	movs	r3, #0
 8002032:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002034:	2300      	movs	r3, #0
 8002036:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002038:	f107 031c 	add.w	r3, r7, #28
 800203c:	4619      	mov	r1, r3
 800203e:	4811      	ldr	r0, [pc, #68]	; (8002084 <MX_TIM2_Init+0xe8>)
 8002040:	f008 fc4e 	bl	800a8e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800204a:	f000 fcdf 	bl	8002a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800204e:	2360      	movs	r3, #96	; 0x60
 8002050:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002052:	2300      	movs	r3, #0
 8002054:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002056:	2300      	movs	r3, #0
 8002058:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800205e:	463b      	mov	r3, r7
 8002060:	2200      	movs	r2, #0
 8002062:	4619      	mov	r1, r3
 8002064:	4807      	ldr	r0, [pc, #28]	; (8002084 <MX_TIM2_Init+0xe8>)
 8002066:	f007 fe9d 	bl	8009da4 <HAL_TIM_PWM_ConfigChannel>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002070:	f000 fccc 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002074:	4803      	ldr	r0, [pc, #12]	; (8002084 <MX_TIM2_Init+0xe8>)
 8002076:	f001 f9c3 	bl	8003400 <HAL_TIM_MspPostInit>

}
 800207a:	bf00      	nop
 800207c:	3738      	adds	r7, #56	; 0x38
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	2000085c 	.word	0x2000085c

08002088 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08e      	sub	sp, #56	; 0x38
 800208c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800208e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	609a      	str	r2, [r3, #8]
 800209a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800209c:	f107 031c 	add.w	r3, r7, #28
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020a8:	463b      	mov	r3, r7
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]
 80020b2:	60da      	str	r2, [r3, #12]
 80020b4:	611a      	str	r2, [r3, #16]
 80020b6:	615a      	str	r2, [r3, #20]
 80020b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020ba:	4b2c      	ldr	r3, [pc, #176]	; (800216c <MX_TIM3_Init+0xe4>)
 80020bc:	4a2c      	ldr	r2, [pc, #176]	; (8002170 <MX_TIM3_Init+0xe8>)
 80020be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80020c0:	4b2a      	ldr	r3, [pc, #168]	; (800216c <MX_TIM3_Init+0xe4>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c6:	4b29      	ldr	r3, [pc, #164]	; (800216c <MX_TIM3_Init+0xe4>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80020cc:	4b27      	ldr	r3, [pc, #156]	; (800216c <MX_TIM3_Init+0xe4>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020d2:	4b26      	ldr	r3, [pc, #152]	; (800216c <MX_TIM3_Init+0xe4>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020d8:	4b24      	ldr	r3, [pc, #144]	; (800216c <MX_TIM3_Init+0xe4>)
 80020da:	2200      	movs	r2, #0
 80020dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020de:	4823      	ldr	r0, [pc, #140]	; (800216c <MX_TIM3_Init+0xe4>)
 80020e0:	f007 fcc0 	bl	8009a64 <HAL_TIM_Base_Init>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80020ea:	f000 fc8f 	bl	8002a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020f2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020f8:	4619      	mov	r1, r3
 80020fa:	481c      	ldr	r0, [pc, #112]	; (800216c <MX_TIM3_Init+0xe4>)
 80020fc:	f007 ff6a 	bl	8009fd4 <HAL_TIM_ConfigClockSource>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002106:	f000 fc81 	bl	8002a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800210a:	4818      	ldr	r0, [pc, #96]	; (800216c <MX_TIM3_Init+0xe4>)
 800210c:	f007 fd00 	bl	8009b10 <HAL_TIM_PWM_Init>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002116:	f000 fc79 	bl	8002a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800211a:	2300      	movs	r3, #0
 800211c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800211e:	2300      	movs	r3, #0
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002122:	f107 031c 	add.w	r3, r7, #28
 8002126:	4619      	mov	r1, r3
 8002128:	4810      	ldr	r0, [pc, #64]	; (800216c <MX_TIM3_Init+0xe4>)
 800212a:	f008 fbd9 	bl	800a8e0 <HAL_TIMEx_MasterConfigSynchronization>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002134:	f000 fc6a 	bl	8002a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002138:	2360      	movs	r3, #96	; 0x60
 800213a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002140:	2300      	movs	r3, #0
 8002142:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002144:	2300      	movs	r3, #0
 8002146:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002148:	463b      	mov	r3, r7
 800214a:	2200      	movs	r2, #0
 800214c:	4619      	mov	r1, r3
 800214e:	4807      	ldr	r0, [pc, #28]	; (800216c <MX_TIM3_Init+0xe4>)
 8002150:	f007 fe28 	bl	8009da4 <HAL_TIM_PWM_ConfigChannel>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800215a:	f000 fc57 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800215e:	4803      	ldr	r0, [pc, #12]	; (800216c <MX_TIM3_Init+0xe4>)
 8002160:	f001 f94e 	bl	8003400 <HAL_TIM_MspPostInit>

}
 8002164:	bf00      	nop
 8002166:	3738      	adds	r7, #56	; 0x38
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	2000089c 	.word	0x2000089c
 8002170:	40000400 	.word	0x40000400

08002174 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08e      	sub	sp, #56	; 0x38
 8002178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800217a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	605a      	str	r2, [r3, #4]
 8002184:	609a      	str	r2, [r3, #8]
 8002186:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002188:	f107 031c 	add.w	r3, r7, #28
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002194:	463b      	mov	r3, r7
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	609a      	str	r2, [r3, #8]
 800219e:	60da      	str	r2, [r3, #12]
 80021a0:	611a      	str	r2, [r3, #16]
 80021a2:	615a      	str	r2, [r3, #20]
 80021a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80021a6:	4b2c      	ldr	r3, [pc, #176]	; (8002258 <MX_TIM5_Init+0xe4>)
 80021a8:	4a2c      	ldr	r2, [pc, #176]	; (800225c <MX_TIM5_Init+0xe8>)
 80021aa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80021ac:	4b2a      	ldr	r3, [pc, #168]	; (8002258 <MX_TIM5_Init+0xe4>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b2:	4b29      	ldr	r3, [pc, #164]	; (8002258 <MX_TIM5_Init+0xe4>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 80021b8:	4b27      	ldr	r3, [pc, #156]	; (8002258 <MX_TIM5_Init+0xe4>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021be:	4b26      	ldr	r3, [pc, #152]	; (8002258 <MX_TIM5_Init+0xe4>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c4:	4b24      	ldr	r3, [pc, #144]	; (8002258 <MX_TIM5_Init+0xe4>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80021ca:	4823      	ldr	r0, [pc, #140]	; (8002258 <MX_TIM5_Init+0xe4>)
 80021cc:	f007 fc4a 	bl	8009a64 <HAL_TIM_Base_Init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80021d6:	f000 fc19 	bl	8002a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80021e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021e4:	4619      	mov	r1, r3
 80021e6:	481c      	ldr	r0, [pc, #112]	; (8002258 <MX_TIM5_Init+0xe4>)
 80021e8:	f007 fef4 	bl	8009fd4 <HAL_TIM_ConfigClockSource>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 80021f2:	f000 fc0b 	bl	8002a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80021f6:	4818      	ldr	r0, [pc, #96]	; (8002258 <MX_TIM5_Init+0xe4>)
 80021f8:	f007 fc8a 	bl	8009b10 <HAL_TIM_PWM_Init>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8002202:	f000 fc03 	bl	8002a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800220a:	2300      	movs	r3, #0
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800220e:	f107 031c 	add.w	r3, r7, #28
 8002212:	4619      	mov	r1, r3
 8002214:	4810      	ldr	r0, [pc, #64]	; (8002258 <MX_TIM5_Init+0xe4>)
 8002216:	f008 fb63 	bl	800a8e0 <HAL_TIMEx_MasterConfigSynchronization>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8002220:	f000 fbf4 	bl	8002a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002224:	2360      	movs	r3, #96	; 0x60
 8002226:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002228:	2300      	movs	r3, #0
 800222a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800222c:	2300      	movs	r3, #0
 800222e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002230:	2300      	movs	r3, #0
 8002232:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002234:	463b      	mov	r3, r7
 8002236:	220c      	movs	r2, #12
 8002238:	4619      	mov	r1, r3
 800223a:	4807      	ldr	r0, [pc, #28]	; (8002258 <MX_TIM5_Init+0xe4>)
 800223c:	f007 fdb2 	bl	8009da4 <HAL_TIM_PWM_ConfigChannel>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8002246:	f000 fbe1 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800224a:	4803      	ldr	r0, [pc, #12]	; (8002258 <MX_TIM5_Init+0xe4>)
 800224c:	f001 f8d8 	bl	8003400 <HAL_TIM_MspPostInit>

}
 8002250:	bf00      	nop
 8002252:	3738      	adds	r7, #56	; 0x38
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	200008dc 	.word	0x200008dc
 800225c:	40000c00 	.word	0x40000c00

08002260 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b088      	sub	sp, #32
 8002264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002266:	f107 0310 	add.w	r3, r7, #16
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	605a      	str	r2, [r3, #4]
 8002270:	609a      	str	r2, [r3, #8]
 8002272:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002274:	1d3b      	adds	r3, r7, #4
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	605a      	str	r2, [r3, #4]
 800227c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800227e:	4b1f      	ldr	r3, [pc, #124]	; (80022fc <MX_TIM8_Init+0x9c>)
 8002280:	4a1f      	ldr	r2, [pc, #124]	; (8002300 <MX_TIM8_Init+0xa0>)
 8002282:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002284:	4b1d      	ldr	r3, [pc, #116]	; (80022fc <MX_TIM8_Init+0x9c>)
 8002286:	2200      	movs	r2, #0
 8002288:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800228a:	4b1c      	ldr	r3, [pc, #112]	; (80022fc <MX_TIM8_Init+0x9c>)
 800228c:	2200      	movs	r2, #0
 800228e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 8002290:	4b1a      	ldr	r3, [pc, #104]	; (80022fc <MX_TIM8_Init+0x9c>)
 8002292:	2200      	movs	r2, #0
 8002294:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002296:	4b19      	ldr	r3, [pc, #100]	; (80022fc <MX_TIM8_Init+0x9c>)
 8002298:	2200      	movs	r2, #0
 800229a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800229c:	4b17      	ldr	r3, [pc, #92]	; (80022fc <MX_TIM8_Init+0x9c>)
 800229e:	2200      	movs	r2, #0
 80022a0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022a2:	4b16      	ldr	r3, [pc, #88]	; (80022fc <MX_TIM8_Init+0x9c>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80022a8:	4814      	ldr	r0, [pc, #80]	; (80022fc <MX_TIM8_Init+0x9c>)
 80022aa:	f007 fbdb 	bl	8009a64 <HAL_TIM_Base_Init>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 80022b4:	f000 fbaa 	bl	8002a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80022be:	f107 0310 	add.w	r3, r7, #16
 80022c2:	4619      	mov	r1, r3
 80022c4:	480d      	ldr	r0, [pc, #52]	; (80022fc <MX_TIM8_Init+0x9c>)
 80022c6:	f007 fe85 	bl	8009fd4 <HAL_TIM_ConfigClockSource>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 80022d0:	f000 fb9c 	bl	8002a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022d4:	2300      	movs	r3, #0
 80022d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80022d8:	2300      	movs	r3, #0
 80022da:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022dc:	2300      	movs	r3, #0
 80022de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80022e0:	1d3b      	adds	r3, r7, #4
 80022e2:	4619      	mov	r1, r3
 80022e4:	4805      	ldr	r0, [pc, #20]	; (80022fc <MX_TIM8_Init+0x9c>)
 80022e6:	f008 fafb 	bl	800a8e0 <HAL_TIMEx_MasterConfigSynchronization>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 80022f0:	f000 fb8c 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80022f4:	bf00      	nop
 80022f6:	3720      	adds	r7, #32
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	2000091c 	.word	0x2000091c
 8002300:	40010400 	.word	0x40010400

08002304 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800230a:	1d3b      	adds	r3, r7, #4
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	611a      	str	r2, [r3, #16]
 8002318:	615a      	str	r2, [r3, #20]
 800231a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800231c:	4b19      	ldr	r3, [pc, #100]	; (8002384 <MX_TIM12_Init+0x80>)
 800231e:	4a1a      	ldr	r2, [pc, #104]	; (8002388 <MX_TIM12_Init+0x84>)
 8002320:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002322:	4b18      	ldr	r3, [pc, #96]	; (8002384 <MX_TIM12_Init+0x80>)
 8002324:	2200      	movs	r2, #0
 8002326:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002328:	4b16      	ldr	r3, [pc, #88]	; (8002384 <MX_TIM12_Init+0x80>)
 800232a:	2200      	movs	r2, #0
 800232c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 800232e:	4b15      	ldr	r3, [pc, #84]	; (8002384 <MX_TIM12_Init+0x80>)
 8002330:	2200      	movs	r2, #0
 8002332:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002334:	4b13      	ldr	r3, [pc, #76]	; (8002384 <MX_TIM12_Init+0x80>)
 8002336:	2200      	movs	r2, #0
 8002338:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800233a:	4b12      	ldr	r3, [pc, #72]	; (8002384 <MX_TIM12_Init+0x80>)
 800233c:	2200      	movs	r2, #0
 800233e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002340:	4810      	ldr	r0, [pc, #64]	; (8002384 <MX_TIM12_Init+0x80>)
 8002342:	f007 fbe5 	bl	8009b10 <HAL_TIM_PWM_Init>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 800234c:	f000 fb5e 	bl	8002a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002350:	2360      	movs	r3, #96	; 0x60
 8002352:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002354:	2300      	movs	r3, #0
 8002356:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002358:	2300      	movs	r3, #0
 800235a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002360:	1d3b      	adds	r3, r7, #4
 8002362:	2200      	movs	r2, #0
 8002364:	4619      	mov	r1, r3
 8002366:	4807      	ldr	r0, [pc, #28]	; (8002384 <MX_TIM12_Init+0x80>)
 8002368:	f007 fd1c 	bl	8009da4 <HAL_TIM_PWM_ConfigChannel>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8002372:	f000 fb4b 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002376:	4803      	ldr	r0, [pc, #12]	; (8002384 <MX_TIM12_Init+0x80>)
 8002378:	f001 f842 	bl	8003400 <HAL_TIM_MspPostInit>

}
 800237c:	bf00      	nop
 800237e:	3720      	adds	r7, #32
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	2000095c 	.word	0x2000095c
 8002388:	40001800 	.word	0x40001800

0800238c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002390:	4b14      	ldr	r3, [pc, #80]	; (80023e4 <MX_USART1_UART_Init+0x58>)
 8002392:	4a15      	ldr	r2, [pc, #84]	; (80023e8 <MX_USART1_UART_Init+0x5c>)
 8002394:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002396:	4b13      	ldr	r3, [pc, #76]	; (80023e4 <MX_USART1_UART_Init+0x58>)
 8002398:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800239c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800239e:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <MX_USART1_UART_Init+0x58>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023a4:	4b0f      	ldr	r3, [pc, #60]	; (80023e4 <MX_USART1_UART_Init+0x58>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023aa:	4b0e      	ldr	r3, [pc, #56]	; (80023e4 <MX_USART1_UART_Init+0x58>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023b0:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <MX_USART1_UART_Init+0x58>)
 80023b2:	220c      	movs	r2, #12
 80023b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023b6:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <MX_USART1_UART_Init+0x58>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023bc:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <MX_USART1_UART_Init+0x58>)
 80023be:	2200      	movs	r2, #0
 80023c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023c2:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <MX_USART1_UART_Init+0x58>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023c8:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <MX_USART1_UART_Init+0x58>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023ce:	4805      	ldr	r0, [pc, #20]	; (80023e4 <MX_USART1_UART_Init+0x58>)
 80023d0:	f008 fbb0 	bl	800ab34 <HAL_UART_Init>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80023da:	f000 fb17 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	2000099c 	.word	0x2000099c
 80023e8:	40011000 	.word	0x40011000

080023ec <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80023f0:	4b14      	ldr	r3, [pc, #80]	; (8002444 <MX_USART6_UART_Init+0x58>)
 80023f2:	4a15      	ldr	r2, [pc, #84]	; (8002448 <MX_USART6_UART_Init+0x5c>)
 80023f4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80023f6:	4b13      	ldr	r3, [pc, #76]	; (8002444 <MX_USART6_UART_Init+0x58>)
 80023f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023fc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80023fe:	4b11      	ldr	r3, [pc, #68]	; (8002444 <MX_USART6_UART_Init+0x58>)
 8002400:	2200      	movs	r2, #0
 8002402:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002404:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <MX_USART6_UART_Init+0x58>)
 8002406:	2200      	movs	r2, #0
 8002408:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800240a:	4b0e      	ldr	r3, [pc, #56]	; (8002444 <MX_USART6_UART_Init+0x58>)
 800240c:	2200      	movs	r2, #0
 800240e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <MX_USART6_UART_Init+0x58>)
 8002412:	220c      	movs	r2, #12
 8002414:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002416:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <MX_USART6_UART_Init+0x58>)
 8002418:	2200      	movs	r2, #0
 800241a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800241c:	4b09      	ldr	r3, [pc, #36]	; (8002444 <MX_USART6_UART_Init+0x58>)
 800241e:	2200      	movs	r2, #0
 8002420:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002422:	4b08      	ldr	r3, [pc, #32]	; (8002444 <MX_USART6_UART_Init+0x58>)
 8002424:	2200      	movs	r2, #0
 8002426:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002428:	4b06      	ldr	r3, [pc, #24]	; (8002444 <MX_USART6_UART_Init+0x58>)
 800242a:	2200      	movs	r2, #0
 800242c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800242e:	4805      	ldr	r0, [pc, #20]	; (8002444 <MX_USART6_UART_Init+0x58>)
 8002430:	f008 fb80 	bl	800ab34 <HAL_UART_Init>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800243a:	f000 fae7 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20000a1c 	.word	0x20000a1c
 8002448:	40011400 	.word	0x40011400

0800244c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b088      	sub	sp, #32
 8002450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002452:	1d3b      	adds	r3, r7, #4
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	605a      	str	r2, [r3, #4]
 800245a:	609a      	str	r2, [r3, #8]
 800245c:	60da      	str	r2, [r3, #12]
 800245e:	611a      	str	r2, [r3, #16]
 8002460:	615a      	str	r2, [r3, #20]
 8002462:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002464:	4b4c      	ldr	r3, [pc, #304]	; (8002598 <MX_FMC_Init+0x14c>)
 8002466:	4a4d      	ldr	r2, [pc, #308]	; (800259c <MX_FMC_Init+0x150>)
 8002468:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800246a:	4b4b      	ldr	r3, [pc, #300]	; (8002598 <MX_FMC_Init+0x14c>)
 800246c:	2200      	movs	r2, #0
 800246e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002470:	4b49      	ldr	r3, [pc, #292]	; (8002598 <MX_FMC_Init+0x14c>)
 8002472:	2200      	movs	r2, #0
 8002474:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002476:	4b48      	ldr	r3, [pc, #288]	; (8002598 <MX_FMC_Init+0x14c>)
 8002478:	2204      	movs	r2, #4
 800247a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800247c:	4b46      	ldr	r3, [pc, #280]	; (8002598 <MX_FMC_Init+0x14c>)
 800247e:	2210      	movs	r2, #16
 8002480:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002482:	4b45      	ldr	r3, [pc, #276]	; (8002598 <MX_FMC_Init+0x14c>)
 8002484:	2240      	movs	r2, #64	; 0x40
 8002486:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002488:	4b43      	ldr	r3, [pc, #268]	; (8002598 <MX_FMC_Init+0x14c>)
 800248a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800248e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002490:	4b41      	ldr	r3, [pc, #260]	; (8002598 <MX_FMC_Init+0x14c>)
 8002492:	2200      	movs	r2, #0
 8002494:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002496:	4b40      	ldr	r3, [pc, #256]	; (8002598 <MX_FMC_Init+0x14c>)
 8002498:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800249c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800249e:	4b3e      	ldr	r3, [pc, #248]	; (8002598 <MX_FMC_Init+0x14c>)
 80024a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024a4:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80024a6:	4b3c      	ldr	r3, [pc, #240]	; (8002598 <MX_FMC_Init+0x14c>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80024ac:	2302      	movs	r3, #2
 80024ae:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80024b0:	2307      	movs	r3, #7
 80024b2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80024b4:	2304      	movs	r3, #4
 80024b6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80024b8:	2307      	movs	r3, #7
 80024ba:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80024bc:	2303      	movs	r3, #3
 80024be:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80024c0:	2302      	movs	r3, #2
 80024c2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80024c4:	2302      	movs	r3, #2
 80024c6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80024c8:	1d3b      	adds	r3, r7, #4
 80024ca:	4619      	mov	r1, r3
 80024cc:	4832      	ldr	r0, [pc, #200]	; (8002598 <MX_FMC_Init+0x14c>)
 80024ce:	f007 f95b 	bl	8009788 <HAL_SDRAM_Init>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80024d8:	f000 fa98 	bl	8002a0c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  __IO uint32_t tmpmrd = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	603b      	str	r3, [r7, #0]

    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80024e0:	4b2f      	ldr	r3, [pc, #188]	; (80025a0 <MX_FMC_Init+0x154>)
 80024e2:	2201      	movs	r2, #1
 80024e4:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 80024e6:	4b2e      	ldr	r3, [pc, #184]	; (80025a0 <MX_FMC_Init+0x154>)
 80024e8:	2210      	movs	r2, #16
 80024ea:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 80024ec:	4b2c      	ldr	r3, [pc, #176]	; (80025a0 <MX_FMC_Init+0x154>)
 80024ee:	2201      	movs	r2, #1
 80024f0:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 80024f2:	4b2b      	ldr	r3, [pc, #172]	; (80025a0 <MX_FMC_Init+0x154>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80024f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024fc:	4928      	ldr	r1, [pc, #160]	; (80025a0 <MX_FMC_Init+0x154>)
 80024fe:	4826      	ldr	r0, [pc, #152]	; (8002598 <MX_FMC_Init+0x14c>)
 8002500:	f007 f976 	bl	80097f0 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 8002504:	2001      	movs	r0, #1
 8002506:	f001 fba3 	bl	8003c50 <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800250a:	4b25      	ldr	r3, [pc, #148]	; (80025a0 <MX_FMC_Init+0x154>)
 800250c:	2202      	movs	r2, #2
 800250e:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002510:	4b23      	ldr	r3, [pc, #140]	; (80025a0 <MX_FMC_Init+0x154>)
 8002512:	2210      	movs	r2, #16
 8002514:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8002516:	4b22      	ldr	r3, [pc, #136]	; (80025a0 <MX_FMC_Init+0x154>)
 8002518:	2201      	movs	r2, #1
 800251a:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 800251c:	4b20      	ldr	r3, [pc, #128]	; (80025a0 <MX_FMC_Init+0x154>)
 800251e:	2200      	movs	r2, #0
 8002520:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002522:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002526:	491e      	ldr	r1, [pc, #120]	; (80025a0 <MX_FMC_Init+0x154>)
 8002528:	481b      	ldr	r0, [pc, #108]	; (8002598 <MX_FMC_Init+0x14c>)
 800252a:	f007 f961 	bl	80097f0 <HAL_SDRAM_SendCommand>

    /* Step 4: Configure an Auto Refresh command */
    Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800252e:	4b1c      	ldr	r3, [pc, #112]	; (80025a0 <MX_FMC_Init+0x154>)
 8002530:	2203      	movs	r2, #3
 8002532:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002534:	4b1a      	ldr	r3, [pc, #104]	; (80025a0 <MX_FMC_Init+0x154>)
 8002536:	2210      	movs	r2, #16
 8002538:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 8;
 800253a:	4b19      	ldr	r3, [pc, #100]	; (80025a0 <MX_FMC_Init+0x154>)
 800253c:	2208      	movs	r2, #8
 800253e:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8002540:	4b17      	ldr	r3, [pc, #92]	; (80025a0 <MX_FMC_Init+0x154>)
 8002542:	2200      	movs	r2, #0
 8002544:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002546:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800254a:	4915      	ldr	r1, [pc, #84]	; (80025a0 <MX_FMC_Init+0x154>)
 800254c:	4812      	ldr	r0, [pc, #72]	; (8002598 <MX_FMC_Init+0x14c>)
 800254e:	f007 f94f 	bl	80097f0 <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 8002552:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002556:	603b      	str	r3, [r7, #0]
             SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
             SDRAM_MODEREG_CAS_LATENCY_3            | \
             SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
             SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002558:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <MX_FMC_Init+0x154>)
 800255a:	2204      	movs	r2, #4
 800255c:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800255e:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <MX_FMC_Init+0x154>)
 8002560:	2210      	movs	r2, #16
 8002562:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8002564:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <MX_FMC_Init+0x154>)
 8002566:	2201      	movs	r2, #1
 8002568:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	4a0c      	ldr	r2, [pc, #48]	; (80025a0 <MX_FMC_Init+0x154>)
 800256e:	60d3      	str	r3, [r2, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002570:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002574:	490a      	ldr	r1, [pc, #40]	; (80025a0 <MX_FMC_Init+0x154>)
 8002576:	4808      	ldr	r0, [pc, #32]	; (8002598 <MX_FMC_Init+0x14c>)
 8002578:	f007 f93a 	bl	80097f0 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 800257c:	f240 712b 	movw	r1, #1835	; 0x72b
 8002580:	4805      	ldr	r0, [pc, #20]	; (8002598 <MX_FMC_Init+0x14c>)
 8002582:	f007 f960 	bl	8009846 <HAL_SDRAM_ProgramRefreshRate>

    //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
    FMC_Bank1->BTCR[0] = 0x000030D2;
 8002586:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800258a:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800258e:	601a      	str	r2, [r3, #0]
  /* USER CODE END FMC_Init 2 */
}
 8002590:	bf00      	nop
 8002592:	3720      	adds	r7, #32
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	20000a9c 	.word	0x20000a9c
 800259c:	a0000140 	.word	0xa0000140
 80025a0:	20000ad8 	.word	0x20000ad8

080025a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b090      	sub	sp, #64	; 0x40
 80025a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	605a      	str	r2, [r3, #4]
 80025b4:	609a      	str	r2, [r3, #8]
 80025b6:	60da      	str	r2, [r3, #12]
 80025b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025ba:	4baf      	ldr	r3, [pc, #700]	; (8002878 <MX_GPIO_Init+0x2d4>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	4aae      	ldr	r2, [pc, #696]	; (8002878 <MX_GPIO_Init+0x2d4>)
 80025c0:	f043 0310 	orr.w	r3, r3, #16
 80025c4:	6313      	str	r3, [r2, #48]	; 0x30
 80025c6:	4bac      	ldr	r3, [pc, #688]	; (8002878 <MX_GPIO_Init+0x2d4>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	f003 0310 	and.w	r3, r3, #16
 80025ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80025d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80025d2:	4ba9      	ldr	r3, [pc, #676]	; (8002878 <MX_GPIO_Init+0x2d4>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	4aa8      	ldr	r2, [pc, #672]	; (8002878 <MX_GPIO_Init+0x2d4>)
 80025d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025dc:	6313      	str	r3, [r2, #48]	; 0x30
 80025de:	4ba6      	ldr	r3, [pc, #664]	; (8002878 <MX_GPIO_Init+0x2d4>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ea:	4ba3      	ldr	r3, [pc, #652]	; (8002878 <MX_GPIO_Init+0x2d4>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	4aa2      	ldr	r2, [pc, #648]	; (8002878 <MX_GPIO_Init+0x2d4>)
 80025f0:	f043 0302 	orr.w	r3, r3, #2
 80025f4:	6313      	str	r3, [r2, #48]	; 0x30
 80025f6:	4ba0      	ldr	r3, [pc, #640]	; (8002878 <MX_GPIO_Init+0x2d4>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	623b      	str	r3, [r7, #32]
 8002600:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002602:	4b9d      	ldr	r3, [pc, #628]	; (8002878 <MX_GPIO_Init+0x2d4>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	4a9c      	ldr	r2, [pc, #624]	; (8002878 <MX_GPIO_Init+0x2d4>)
 8002608:	f043 0308 	orr.w	r3, r3, #8
 800260c:	6313      	str	r3, [r2, #48]	; 0x30
 800260e:	4b9a      	ldr	r3, [pc, #616]	; (8002878 <MX_GPIO_Init+0x2d4>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	61fb      	str	r3, [r7, #28]
 8002618:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800261a:	4b97      	ldr	r3, [pc, #604]	; (8002878 <MX_GPIO_Init+0x2d4>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	4a96      	ldr	r2, [pc, #600]	; (8002878 <MX_GPIO_Init+0x2d4>)
 8002620:	f043 0304 	orr.w	r3, r3, #4
 8002624:	6313      	str	r3, [r2, #48]	; 0x30
 8002626:	4b94      	ldr	r3, [pc, #592]	; (8002878 <MX_GPIO_Init+0x2d4>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	f003 0304 	and.w	r3, r3, #4
 800262e:	61bb      	str	r3, [r7, #24]
 8002630:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002632:	4b91      	ldr	r3, [pc, #580]	; (8002878 <MX_GPIO_Init+0x2d4>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	4a90      	ldr	r2, [pc, #576]	; (8002878 <MX_GPIO_Init+0x2d4>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	6313      	str	r3, [r2, #48]	; 0x30
 800263e:	4b8e      	ldr	r3, [pc, #568]	; (8002878 <MX_GPIO_Init+0x2d4>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800264a:	4b8b      	ldr	r3, [pc, #556]	; (8002878 <MX_GPIO_Init+0x2d4>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	4a8a      	ldr	r2, [pc, #552]	; (8002878 <MX_GPIO_Init+0x2d4>)
 8002650:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002654:	6313      	str	r3, [r2, #48]	; 0x30
 8002656:	4b88      	ldr	r3, [pc, #544]	; (8002878 <MX_GPIO_Init+0x2d4>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002662:	4b85      	ldr	r3, [pc, #532]	; (8002878 <MX_GPIO_Init+0x2d4>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	4a84      	ldr	r2, [pc, #528]	; (8002878 <MX_GPIO_Init+0x2d4>)
 8002668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800266c:	6313      	str	r3, [r2, #48]	; 0x30
 800266e:	4b82      	ldr	r3, [pc, #520]	; (8002878 <MX_GPIO_Init+0x2d4>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800267a:	4b7f      	ldr	r3, [pc, #508]	; (8002878 <MX_GPIO_Init+0x2d4>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	4a7e      	ldr	r2, [pc, #504]	; (8002878 <MX_GPIO_Init+0x2d4>)
 8002680:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002684:	6313      	str	r3, [r2, #48]	; 0x30
 8002686:	4b7c      	ldr	r3, [pc, #496]	; (8002878 <MX_GPIO_Init+0x2d4>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800268e:	60bb      	str	r3, [r7, #8]
 8002690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002692:	4b79      	ldr	r3, [pc, #484]	; (8002878 <MX_GPIO_Init+0x2d4>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	4a78      	ldr	r2, [pc, #480]	; (8002878 <MX_GPIO_Init+0x2d4>)
 8002698:	f043 0320 	orr.w	r3, r3, #32
 800269c:	6313      	str	r3, [r2, #48]	; 0x30
 800269e:	4b76      	ldr	r3, [pc, #472]	; (8002878 <MX_GPIO_Init+0x2d4>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	f003 0320 	and.w	r3, r3, #32
 80026a6:	607b      	str	r3, [r7, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026aa:	4b73      	ldr	r3, [pc, #460]	; (8002878 <MX_GPIO_Init+0x2d4>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	4a72      	ldr	r2, [pc, #456]	; (8002878 <MX_GPIO_Init+0x2d4>)
 80026b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026b4:	6313      	str	r3, [r2, #48]	; 0x30
 80026b6:	4b70      	ldr	r3, [pc, #448]	; (8002878 <MX_GPIO_Init+0x2d4>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026be:	603b      	str	r3, [r7, #0]
 80026c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80026c2:	2201      	movs	r2, #1
 80026c4:	2120      	movs	r1, #32
 80026c6:	486d      	ldr	r0, [pc, #436]	; (800287c <MX_GPIO_Init+0x2d8>)
 80026c8:	f003 fbc4 	bl	8005e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80026cc:	2200      	movs	r2, #0
 80026ce:	210c      	movs	r1, #12
 80026d0:	486b      	ldr	r0, [pc, #428]	; (8002880 <MX_GPIO_Init+0x2dc>)
 80026d2:	f003 fbbf 	bl	8005e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80026d6:	2201      	movs	r2, #1
 80026d8:	2108      	movs	r1, #8
 80026da:	486a      	ldr	r0, [pc, #424]	; (8002884 <MX_GPIO_Init+0x2e0>)
 80026dc:	f003 fbba 	bl	8005e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80026e0:	2201      	movs	r2, #1
 80026e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026e6:	4866      	ldr	r0, [pc, #408]	; (8002880 <MX_GPIO_Init+0x2dc>)
 80026e8:	f003 fbb4 	bl	8005e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80026ec:	2200      	movs	r2, #0
 80026ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026f2:	4865      	ldr	r0, [pc, #404]	; (8002888 <MX_GPIO_Init+0x2e4>)
 80026f4:	f003 fbae 	bl	8005e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80026f8:	2200      	movs	r2, #0
 80026fa:	21c8      	movs	r1, #200	; 0xc8
 80026fc:	4863      	ldr	r0, [pc, #396]	; (800288c <MX_GPIO_Init+0x2e8>)
 80026fe:	f003 fba9 	bl	8005e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002702:	2308      	movs	r3, #8
 8002704:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002706:	2300      	movs	r3, #0
 8002708:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270a:	2300      	movs	r3, #0
 800270c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800270e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002712:	4619      	mov	r1, r3
 8002714:	485e      	ldr	r0, [pc, #376]	; (8002890 <MX_GPIO_Init+0x2ec>)
 8002716:	f003 f9d9 	bl	8005acc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800271a:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800271e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002720:	2302      	movs	r3, #2
 8002722:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002724:	2300      	movs	r3, #0
 8002726:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002728:	2303      	movs	r3, #3
 800272a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800272c:	230b      	movs	r3, #11
 800272e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002730:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002734:	4619      	mov	r1, r3
 8002736:	4855      	ldr	r0, [pc, #340]	; (800288c <MX_GPIO_Init+0x2e8>)
 8002738:	f003 f9c8 	bl	8005acc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 800273c:	f643 4323 	movw	r3, #15395	; 0x3c23
 8002740:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002742:	2302      	movs	r3, #2
 8002744:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002746:	2300      	movs	r3, #0
 8002748:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800274a:	2303      	movs	r3, #3
 800274c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800274e:	230a      	movs	r3, #10
 8002750:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002752:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002756:	4619      	mov	r1, r3
 8002758:	484e      	ldr	r0, [pc, #312]	; (8002894 <MX_GPIO_Init+0x2f0>)
 800275a:	f003 f9b7 	bl	8005acc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800275e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002762:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002764:	2300      	movs	r3, #0
 8002766:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002768:	2300      	movs	r3, #0
 800276a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800276c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002770:	4619      	mov	r1, r3
 8002772:	4849      	ldr	r0, [pc, #292]	; (8002898 <MX_GPIO_Init+0x2f4>)
 8002774:	f003 f9aa 	bl	8005acc <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002778:	2340      	movs	r3, #64	; 0x40
 800277a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800277c:	4b47      	ldr	r3, [pc, #284]	; (800289c <MX_GPIO_Init+0x2f8>)
 800277e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002780:	2300      	movs	r3, #0
 8002782:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002784:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002788:	4619      	mov	r1, r3
 800278a:	483c      	ldr	r0, [pc, #240]	; (800287c <MX_GPIO_Init+0x2d8>)
 800278c:	f003 f99e 	bl	8005acc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8002790:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002794:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002796:	2302      	movs	r3, #2
 8002798:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800279e:	2303      	movs	r3, #3
 80027a0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80027a2:	230a      	movs	r3, #10
 80027a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027aa:	4619      	mov	r1, r3
 80027ac:	483c      	ldr	r0, [pc, #240]	; (80028a0 <MX_GPIO_Init+0x2fc>)
 80027ae:	f003 f98d 	bl	8005acc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80027b2:	2320      	movs	r3, #32
 80027b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027b6:	2301      	movs	r3, #1
 80027b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027be:	2300      	movs	r3, #0
 80027c0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80027c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027c6:	4619      	mov	r1, r3
 80027c8:	482c      	ldr	r0, [pc, #176]	; (800287c <MX_GPIO_Init+0x2d8>)
 80027ca:	f003 f97f 	bl	8005acc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80027ce:	f241 030c 	movw	r3, #4108	; 0x100c
 80027d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027d4:	2301      	movs	r3, #1
 80027d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d8:	2300      	movs	r3, #0
 80027da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027dc:	2300      	movs	r3, #0
 80027de:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80027e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027e4:	4619      	mov	r1, r3
 80027e6:	4826      	ldr	r0, [pc, #152]	; (8002880 <MX_GPIO_Init+0x2dc>)
 80027e8:	f003 f970 	bl	8005acc <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80027ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027f2:	2300      	movs	r3, #0
 80027f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80027fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027fe:	4619      	mov	r1, r3
 8002800:	4828      	ldr	r0, [pc, #160]	; (80028a4 <MX_GPIO_Init+0x300>)
 8002802:	f003 f963 	bl	8005acc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002806:	2308      	movs	r3, #8
 8002808:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800280a:	2301      	movs	r3, #1
 800280c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280e:	2300      	movs	r3, #0
 8002810:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002812:	2300      	movs	r3, #0
 8002814:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002816:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800281a:	4619      	mov	r1, r3
 800281c:	4819      	ldr	r0, [pc, #100]	; (8002884 <MX_GPIO_Init+0x2e0>)
 800281e:	f003 f955 	bl	8005acc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002822:	2310      	movs	r3, #16
 8002824:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002826:	2300      	movs	r3, #0
 8002828:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282a:	2300      	movs	r3, #0
 800282c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800282e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002832:	4619      	mov	r1, r3
 8002834:	4811      	ldr	r0, [pc, #68]	; (800287c <MX_GPIO_Init+0x2d8>)
 8002836:	f003 f949 	bl	8005acc <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800283a:	f248 0304 	movw	r3, #32772	; 0x8004
 800283e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002840:	2300      	movs	r3, #0
 8002842:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002844:	2300      	movs	r3, #0
 8002846:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002848:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800284c:	4619      	mov	r1, r3
 800284e:	480e      	ldr	r0, [pc, #56]	; (8002888 <MX_GPIO_Init+0x2e4>)
 8002850:	f003 f93c 	bl	8005acc <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002854:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002858:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800285a:	2301      	movs	r3, #1
 800285c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285e:	2300      	movs	r3, #0
 8002860:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002862:	2300      	movs	r3, #0
 8002864:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002866:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800286a:	4619      	mov	r1, r3
 800286c:	4806      	ldr	r0, [pc, #24]	; (8002888 <MX_GPIO_Init+0x2e4>)
 800286e:	f003 f92d 	bl	8005acc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002872:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002876:	e017      	b.n	80028a8 <MX_GPIO_Init+0x304>
 8002878:	40023800 	.word	0x40023800
 800287c:	40020c00 	.word	0x40020c00
 8002880:	40022000 	.word	0x40022000
 8002884:	40022800 	.word	0x40022800
 8002888:	40021c00 	.word	0x40021c00
 800288c:	40021800 	.word	0x40021800
 8002890:	40021000 	.word	0x40021000
 8002894:	40020400 	.word	0x40020400
 8002898:	40022400 	.word	0x40022400
 800289c:	10120000 	.word	0x10120000
 80028a0:	40020000 	.word	0x40020000
 80028a4:	40020800 	.word	0x40020800
 80028a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80028aa:	4b44      	ldr	r3, [pc, #272]	; (80029bc <MX_GPIO_Init+0x418>)
 80028ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ae:	2300      	movs	r3, #0
 80028b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80028b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028b6:	4619      	mov	r1, r3
 80028b8:	4841      	ldr	r0, [pc, #260]	; (80029c0 <MX_GPIO_Init+0x41c>)
 80028ba:	f003 f907 	bl	8005acc <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80028be:	2310      	movs	r3, #16
 80028c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c2:	2302      	movs	r3, #2
 80028c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c6:	2300      	movs	r3, #0
 80028c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ca:	2303      	movs	r3, #3
 80028cc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80028ce:	230a      	movs	r3, #10
 80028d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80028d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028d6:	4619      	mov	r1, r3
 80028d8:	483a      	ldr	r0, [pc, #232]	; (80029c4 <MX_GPIO_Init+0x420>)
 80028da:	f003 f8f7 	bl	8005acc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80028de:	23c8      	movs	r3, #200	; 0xc8
 80028e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028e2:	2301      	movs	r3, #1
 80028e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ea:	2300      	movs	r3, #0
 80028ec:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028f2:	4619      	mov	r1, r3
 80028f4:	4834      	ldr	r0, [pc, #208]	; (80029c8 <MX_GPIO_Init+0x424>)
 80028f6:	f003 f8e9 	bl	8005acc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80028fa:	2305      	movs	r3, #5
 80028fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fe:	2302      	movs	r3, #2
 8002900:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002902:	2300      	movs	r3, #0
 8002904:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002906:	2303      	movs	r3, #3
 8002908:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800290a:	230a      	movs	r3, #10
 800290c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800290e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002912:	4619      	mov	r1, r3
 8002914:	482d      	ldr	r0, [pc, #180]	; (80029cc <MX_GPIO_Init+0x428>)
 8002916:	f003 f8d9 	bl	8005acc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800291a:	2332      	movs	r3, #50	; 0x32
 800291c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291e:	2302      	movs	r3, #2
 8002920:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002922:	2300      	movs	r3, #0
 8002924:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002926:	2303      	movs	r3, #3
 8002928:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800292a:	230b      	movs	r3, #11
 800292c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800292e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002932:	4619      	mov	r1, r3
 8002934:	4825      	ldr	r0, [pc, #148]	; (80029cc <MX_GPIO_Init+0x428>)
 8002936:	f003 f8c9 	bl	8005acc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800293a:	2304      	movs	r3, #4
 800293c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800293e:	2300      	movs	r3, #0
 8002940:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002942:	2300      	movs	r3, #0
 8002944:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002946:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800294a:	4619      	mov	r1, r3
 800294c:	481e      	ldr	r0, [pc, #120]	; (80029c8 <MX_GPIO_Init+0x424>)
 800294e:	f003 f8bd 	bl	8005acc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002952:	2386      	movs	r3, #134	; 0x86
 8002954:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002956:	2302      	movs	r3, #2
 8002958:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295a:	2300      	movs	r3, #0
 800295c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800295e:	2303      	movs	r3, #3
 8002960:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002962:	230b      	movs	r3, #11
 8002964:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002966:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800296a:	4619      	mov	r1, r3
 800296c:	4818      	ldr	r0, [pc, #96]	; (80029d0 <MX_GPIO_Init+0x42c>)
 800296e:	f003 f8ad 	bl	8005acc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002972:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002976:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002978:	2312      	movs	r3, #18
 800297a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800297c:	2301      	movs	r3, #1
 800297e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002980:	2303      	movs	r3, #3
 8002982:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002984:	2304      	movs	r3, #4
 8002986:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002988:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800298c:	4619      	mov	r1, r3
 800298e:	480d      	ldr	r0, [pc, #52]	; (80029c4 <MX_GPIO_Init+0x420>)
 8002990:	f003 f89c 	bl	8005acc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002994:	2328      	movs	r3, #40	; 0x28
 8002996:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002998:	2302      	movs	r3, #2
 800299a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299c:	2300      	movs	r3, #0
 800299e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a0:	2303      	movs	r3, #3
 80029a2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80029a4:	230a      	movs	r3, #10
 80029a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029ac:	4619      	mov	r1, r3
 80029ae:	4808      	ldr	r0, [pc, #32]	; (80029d0 <MX_GPIO_Init+0x42c>)
 80029b0:	f003 f88c 	bl	8005acc <HAL_GPIO_Init>

}
 80029b4:	bf00      	nop
 80029b6:	3740      	adds	r7, #64	; 0x40
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	10120000 	.word	0x10120000
 80029c0:	40022000 	.word	0x40022000
 80029c4:	40021c00 	.word	0x40021c00
 80029c8:	40021800 	.word	0x40021800
 80029cc:	40020800 	.word	0x40020800
 80029d0:	40020000 	.word	0x40020000

080029d4 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  MX_TouchGFX_Process();
 80029dc:	f00c fc2a 	bl	800f234 <MX_TouchGFX_Process>
  /* Infinite loop */

  for(;;)
  {
    osDelay(1);
 80029e0:	2001      	movs	r0, #1
 80029e2:	f009 feaf 	bl	800c744 <osDelay>
 80029e6:	e7fb      	b.n	80029e0 <StartDefaultTask+0xc>

080029e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a04      	ldr	r2, [pc, #16]	; (8002a08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d101      	bne.n	80029fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80029fa:	f001 f909 	bl	8003c10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40001000 	.word	0x40001000

08002a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002a10:	bf00      	nop
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
	...

08002a1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a22:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <HAL_MspInit+0x4c>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	4a10      	ldr	r2, [pc, #64]	; (8002a68 <HAL_MspInit+0x4c>)
 8002a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a2e:	4b0e      	ldr	r3, [pc, #56]	; (8002a68 <HAL_MspInit+0x4c>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a36:	607b      	str	r3, [r7, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a3a:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <HAL_MspInit+0x4c>)
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3e:	4a0a      	ldr	r2, [pc, #40]	; (8002a68 <HAL_MspInit+0x4c>)
 8002a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a44:	6453      	str	r3, [r2, #68]	; 0x44
 8002a46:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <HAL_MspInit+0x4c>)
 8002a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a4e:	603b      	str	r3, [r7, #0]
 8002a50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a52:	2200      	movs	r2, #0
 8002a54:	210f      	movs	r1, #15
 8002a56:	f06f 0001 	mvn.w	r0, #1
 8002a5a:	f002 fa09 	bl	8004e70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a5e:	bf00      	nop
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40023800 	.word	0x40023800

08002a6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08a      	sub	sp, #40	; 0x28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a74:	f107 0314 	add.w	r3, r7, #20
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	605a      	str	r2, [r3, #4]
 8002a7e:	609a      	str	r2, [r3, #8]
 8002a80:	60da      	str	r2, [r3, #12]
 8002a82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a21      	ldr	r2, [pc, #132]	; (8002b10 <HAL_ADC_MspInit+0xa4>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d13c      	bne.n	8002b08 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002a8e:	4b21      	ldr	r3, [pc, #132]	; (8002b14 <HAL_ADC_MspInit+0xa8>)
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	4a20      	ldr	r2, [pc, #128]	; (8002b14 <HAL_ADC_MspInit+0xa8>)
 8002a94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a98:	6453      	str	r3, [r2, #68]	; 0x44
 8002a9a:	4b1e      	ldr	r3, [pc, #120]	; (8002b14 <HAL_ADC_MspInit+0xa8>)
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa2:	613b      	str	r3, [r7, #16]
 8002aa4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002aa6:	4b1b      	ldr	r3, [pc, #108]	; (8002b14 <HAL_ADC_MspInit+0xa8>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	4a1a      	ldr	r2, [pc, #104]	; (8002b14 <HAL_ADC_MspInit+0xa8>)
 8002aac:	f043 0320 	orr.w	r3, r3, #32
 8002ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab2:	4b18      	ldr	r3, [pc, #96]	; (8002b14 <HAL_ADC_MspInit+0xa8>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	f003 0320 	and.w	r3, r3, #32
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002abe:	4b15      	ldr	r3, [pc, #84]	; (8002b14 <HAL_ADC_MspInit+0xa8>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	4a14      	ldr	r2, [pc, #80]	; (8002b14 <HAL_ADC_MspInit+0xa8>)
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aca:	4b12      	ldr	r3, [pc, #72]	; (8002b14 <HAL_ADC_MspInit+0xa8>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	60bb      	str	r3, [r7, #8]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 8002ad6:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002ada:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002adc:	2303      	movs	r3, #3
 8002ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ae4:	f107 0314 	add.w	r3, r7, #20
 8002ae8:	4619      	mov	r1, r3
 8002aea:	480b      	ldr	r0, [pc, #44]	; (8002b18 <HAL_ADC_MspInit+0xac>)
 8002aec:	f002 ffee 	bl	8005acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002af0:	2301      	movs	r3, #1
 8002af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002af4:	2303      	movs	r3, #3
 8002af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af8:	2300      	movs	r3, #0
 8002afa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	4619      	mov	r1, r3
 8002b02:	4806      	ldr	r0, [pc, #24]	; (8002b1c <HAL_ADC_MspInit+0xb0>)
 8002b04:	f002 ffe2 	bl	8005acc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002b08:	bf00      	nop
 8002b0a:	3728      	adds	r7, #40	; 0x28
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40012200 	.word	0x40012200
 8002b14:	40023800 	.word	0x40023800
 8002b18:	40021400 	.word	0x40021400
 8002b1c:	40020000 	.word	0x40020000

08002b20 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b08a      	sub	sp, #40	; 0x28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b28:	f107 0314 	add.w	r3, r7, #20
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	609a      	str	r2, [r3, #8]
 8002b34:	60da      	str	r2, [r3, #12]
 8002b36:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a1b      	ldr	r2, [pc, #108]	; (8002bac <HAL_CAN_MspInit+0x8c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d130      	bne.n	8002ba4 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002b42:	4b1b      	ldr	r3, [pc, #108]	; (8002bb0 <HAL_CAN_MspInit+0x90>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	4a1a      	ldr	r2, [pc, #104]	; (8002bb0 <HAL_CAN_MspInit+0x90>)
 8002b48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b4e:	4b18      	ldr	r3, [pc, #96]	; (8002bb0 <HAL_CAN_MspInit+0x90>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b56:	613b      	str	r3, [r7, #16]
 8002b58:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b5a:	4b15      	ldr	r3, [pc, #84]	; (8002bb0 <HAL_CAN_MspInit+0x90>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	4a14      	ldr	r2, [pc, #80]	; (8002bb0 <HAL_CAN_MspInit+0x90>)
 8002b60:	f043 0302 	orr.w	r3, r3, #2
 8002b64:	6313      	str	r3, [r2, #48]	; 0x30
 8002b66:	4b12      	ldr	r3, [pc, #72]	; (8002bb0 <HAL_CAN_MspInit+0x90>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b80:	2303      	movs	r3, #3
 8002b82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002b84:	2309      	movs	r3, #9
 8002b86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b88:	f107 0314 	add.w	r3, r7, #20
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4809      	ldr	r0, [pc, #36]	; (8002bb4 <HAL_CAN_MspInit+0x94>)
 8002b90:	f002 ff9c 	bl	8005acc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002b94:	2200      	movs	r2, #0
 8002b96:	2105      	movs	r1, #5
 8002b98:	2014      	movs	r0, #20
 8002b9a:	f002 f969 	bl	8004e70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002b9e:	2014      	movs	r0, #20
 8002ba0:	f002 f982 	bl	8004ea8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002ba4:	bf00      	nop
 8002ba6:	3728      	adds	r7, #40	; 0x28
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40006400 	.word	0x40006400
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	40020400 	.word	0x40020400

08002bb8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a0a      	ldr	r2, [pc, #40]	; (8002bf0 <HAL_CRC_MspInit+0x38>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d10b      	bne.n	8002be2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002bca:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <HAL_CRC_MspInit+0x3c>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	4a09      	ldr	r2, [pc, #36]	; (8002bf4 <HAL_CRC_MspInit+0x3c>)
 8002bd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd6:	4b07      	ldr	r3, [pc, #28]	; (8002bf4 <HAL_CRC_MspInit+0x3c>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002be2:	bf00      	nop
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	40023000 	.word	0x40023000
 8002bf4:	40023800 	.word	0x40023800

08002bf8 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08e      	sub	sp, #56	; 0x38
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	60da      	str	r2, [r3, #12]
 8002c0e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a50      	ldr	r2, [pc, #320]	; (8002d58 <HAL_DCMI_MspInit+0x160>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	f040 809a 	bne.w	8002d50 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002c1c:	4b4f      	ldr	r3, [pc, #316]	; (8002d5c <HAL_DCMI_MspInit+0x164>)
 8002c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c20:	4a4e      	ldr	r2, [pc, #312]	; (8002d5c <HAL_DCMI_MspInit+0x164>)
 8002c22:	f043 0301 	orr.w	r3, r3, #1
 8002c26:	6353      	str	r3, [r2, #52]	; 0x34
 8002c28:	4b4c      	ldr	r3, [pc, #304]	; (8002d5c <HAL_DCMI_MspInit+0x164>)
 8002c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	623b      	str	r3, [r7, #32]
 8002c32:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c34:	4b49      	ldr	r3, [pc, #292]	; (8002d5c <HAL_DCMI_MspInit+0x164>)
 8002c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c38:	4a48      	ldr	r2, [pc, #288]	; (8002d5c <HAL_DCMI_MspInit+0x164>)
 8002c3a:	f043 0310 	orr.w	r3, r3, #16
 8002c3e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c40:	4b46      	ldr	r3, [pc, #280]	; (8002d5c <HAL_DCMI_MspInit+0x164>)
 8002c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c44:	f003 0310 	and.w	r3, r3, #16
 8002c48:	61fb      	str	r3, [r7, #28]
 8002c4a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c4c:	4b43      	ldr	r3, [pc, #268]	; (8002d5c <HAL_DCMI_MspInit+0x164>)
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c50:	4a42      	ldr	r2, [pc, #264]	; (8002d5c <HAL_DCMI_MspInit+0x164>)
 8002c52:	f043 0308 	orr.w	r3, r3, #8
 8002c56:	6313      	str	r3, [r2, #48]	; 0x30
 8002c58:	4b40      	ldr	r3, [pc, #256]	; (8002d5c <HAL_DCMI_MspInit+0x164>)
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5c:	f003 0308 	and.w	r3, r3, #8
 8002c60:	61bb      	str	r3, [r7, #24]
 8002c62:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c64:	4b3d      	ldr	r3, [pc, #244]	; (8002d5c <HAL_DCMI_MspInit+0x164>)
 8002c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c68:	4a3c      	ldr	r2, [pc, #240]	; (8002d5c <HAL_DCMI_MspInit+0x164>)
 8002c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c6e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c70:	4b3a      	ldr	r3, [pc, #232]	; (8002d5c <HAL_DCMI_MspInit+0x164>)
 8002c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c78:	617b      	str	r3, [r7, #20]
 8002c7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c7c:	4b37      	ldr	r3, [pc, #220]	; (8002d5c <HAL_DCMI_MspInit+0x164>)
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c80:	4a36      	ldr	r2, [pc, #216]	; (8002d5c <HAL_DCMI_MspInit+0x164>)
 8002c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c86:	6313      	str	r3, [r2, #48]	; 0x30
 8002c88:	4b34      	ldr	r3, [pc, #208]	; (8002d5c <HAL_DCMI_MspInit+0x164>)
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c94:	4b31      	ldr	r3, [pc, #196]	; (8002d5c <HAL_DCMI_MspInit+0x164>)
 8002c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c98:	4a30      	ldr	r2, [pc, #192]	; (8002d5c <HAL_DCMI_MspInit+0x164>)
 8002c9a:	f043 0301 	orr.w	r3, r3, #1
 8002c9e:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca0:	4b2e      	ldr	r3, [pc, #184]	; (8002d5c <HAL_DCMI_MspInit+0x164>)
 8002ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002cac:	2360      	movs	r3, #96	; 0x60
 8002cae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002cbc:	230d      	movs	r3, #13
 8002cbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4826      	ldr	r0, [pc, #152]	; (8002d60 <HAL_DCMI_MspInit+0x168>)
 8002cc8:	f002 ff00 	bl	8005acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002ccc:	2308      	movs	r3, #8
 8002cce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002cdc:	230d      	movs	r3, #13
 8002cde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	481f      	ldr	r0, [pc, #124]	; (8002d64 <HAL_DCMI_MspInit+0x16c>)
 8002ce8:	f002 fef0 	bl	8005acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002cec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002cfe:	230d      	movs	r3, #13
 8002d00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002d02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d06:	4619      	mov	r1, r3
 8002d08:	4817      	ldr	r0, [pc, #92]	; (8002d68 <HAL_DCMI_MspInit+0x170>)
 8002d0a:	f002 fedf 	bl	8005acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 8002d0e:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002d12:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d14:	2302      	movs	r3, #2
 8002d16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002d20:	230d      	movs	r3, #13
 8002d22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4810      	ldr	r0, [pc, #64]	; (8002d6c <HAL_DCMI_MspInit+0x174>)
 8002d2c:	f002 fece 	bl	8005acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002d30:	2350      	movs	r3, #80	; 0x50
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d34:	2302      	movs	r3, #2
 8002d36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002d40:	230d      	movs	r3, #13
 8002d42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4809      	ldr	r0, [pc, #36]	; (8002d70 <HAL_DCMI_MspInit+0x178>)
 8002d4c:	f002 febe 	bl	8005acc <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002d50:	bf00      	nop
 8002d52:	3738      	adds	r7, #56	; 0x38
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	50050000 	.word	0x50050000
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	40021000 	.word	0x40021000
 8002d64:	40020c00 	.word	0x40020c00
 8002d68:	40021800 	.word	0x40021800
 8002d6c:	40021c00 	.word	0x40021c00
 8002d70:	40020000 	.word	0x40020000

08002d74 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a0d      	ldr	r2, [pc, #52]	; (8002db8 <HAL_DMA2D_MspInit+0x44>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d113      	bne.n	8002dae <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002d86:	4b0d      	ldr	r3, [pc, #52]	; (8002dbc <HAL_DMA2D_MspInit+0x48>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	4a0c      	ldr	r2, [pc, #48]	; (8002dbc <HAL_DMA2D_MspInit+0x48>)
 8002d8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d90:	6313      	str	r3, [r2, #48]	; 0x30
 8002d92:	4b0a      	ldr	r3, [pc, #40]	; (8002dbc <HAL_DMA2D_MspInit+0x48>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002d9e:	2200      	movs	r2, #0
 8002da0:	2105      	movs	r1, #5
 8002da2:	205a      	movs	r0, #90	; 0x5a
 8002da4:	f002 f864 	bl	8004e70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002da8:	205a      	movs	r0, #90	; 0x5a
 8002daa:	f002 f87d 	bl	8004ea8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002dae:	bf00      	nop
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	4002b000 	.word	0x4002b000
 8002dbc:	40023800 	.word	0x40023800

08002dc0 <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a07      	ldr	r2, [pc, #28]	; (8002dec <HAL_DMA2D_MspDeInit+0x2c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d108      	bne.n	8002de4 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 8002dd2:	4b07      	ldr	r3, [pc, #28]	; (8002df0 <HAL_DMA2D_MspDeInit+0x30>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	4a06      	ldr	r2, [pc, #24]	; (8002df0 <HAL_DMA2D_MspDeInit+0x30>)
 8002dd8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ddc:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 8002dde:	205a      	movs	r0, #90	; 0x5a
 8002de0:	f002 f870 	bl	8004ec4 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 8002de4:	bf00      	nop
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	4002b000 	.word	0x4002b000
 8002df0:	40023800 	.word	0x40023800

08002df4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b08e      	sub	sp, #56	; 0x38
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	605a      	str	r2, [r3, #4]
 8002e06:	609a      	str	r2, [r3, #8]
 8002e08:	60da      	str	r2, [r3, #12]
 8002e0a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a55      	ldr	r2, [pc, #340]	; (8002f68 <HAL_LTDC_MspInit+0x174>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	f040 80a3 	bne.w	8002f5e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002e18:	4b54      	ldr	r3, [pc, #336]	; (8002f6c <HAL_LTDC_MspInit+0x178>)
 8002e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1c:	4a53      	ldr	r2, [pc, #332]	; (8002f6c <HAL_LTDC_MspInit+0x178>)
 8002e1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e22:	6453      	str	r3, [r2, #68]	; 0x44
 8002e24:	4b51      	ldr	r3, [pc, #324]	; (8002f6c <HAL_LTDC_MspInit+0x178>)
 8002e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e2c:	623b      	str	r3, [r7, #32]
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e30:	4b4e      	ldr	r3, [pc, #312]	; (8002f6c <HAL_LTDC_MspInit+0x178>)
 8002e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e34:	4a4d      	ldr	r2, [pc, #308]	; (8002f6c <HAL_LTDC_MspInit+0x178>)
 8002e36:	f043 0310 	orr.w	r3, r3, #16
 8002e3a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e3c:	4b4b      	ldr	r3, [pc, #300]	; (8002f6c <HAL_LTDC_MspInit+0x178>)
 8002e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e40:	f003 0310 	and.w	r3, r3, #16
 8002e44:	61fb      	str	r3, [r7, #28]
 8002e46:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002e48:	4b48      	ldr	r3, [pc, #288]	; (8002f6c <HAL_LTDC_MspInit+0x178>)
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4c:	4a47      	ldr	r2, [pc, #284]	; (8002f6c <HAL_LTDC_MspInit+0x178>)
 8002e4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e52:	6313      	str	r3, [r2, #48]	; 0x30
 8002e54:	4b45      	ldr	r3, [pc, #276]	; (8002f6c <HAL_LTDC_MspInit+0x178>)
 8002e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e5c:	61bb      	str	r3, [r7, #24]
 8002e5e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002e60:	4b42      	ldr	r3, [pc, #264]	; (8002f6c <HAL_LTDC_MspInit+0x178>)
 8002e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e64:	4a41      	ldr	r2, [pc, #260]	; (8002f6c <HAL_LTDC_MspInit+0x178>)
 8002e66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e6a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e6c:	4b3f      	ldr	r3, [pc, #252]	; (8002f6c <HAL_LTDC_MspInit+0x178>)
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e74:	617b      	str	r3, [r7, #20]
 8002e76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e78:	4b3c      	ldr	r3, [pc, #240]	; (8002f6c <HAL_LTDC_MspInit+0x178>)
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7c:	4a3b      	ldr	r2, [pc, #236]	; (8002f6c <HAL_LTDC_MspInit+0x178>)
 8002e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e82:	6313      	str	r3, [r2, #48]	; 0x30
 8002e84:	4b39      	ldr	r3, [pc, #228]	; (8002f6c <HAL_LTDC_MspInit+0x178>)
 8002e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8c:	613b      	str	r3, [r7, #16]
 8002e8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002e90:	4b36      	ldr	r3, [pc, #216]	; (8002f6c <HAL_LTDC_MspInit+0x178>)
 8002e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e94:	4a35      	ldr	r2, [pc, #212]	; (8002f6c <HAL_LTDC_MspInit+0x178>)
 8002e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e9c:	4b33      	ldr	r3, [pc, #204]	; (8002f6c <HAL_LTDC_MspInit+0x178>)
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002ea8:	2310      	movs	r3, #16
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eac:	2302      	movs	r3, #2
 8002eae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002eb8:	230e      	movs	r3, #14
 8002eba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	482b      	ldr	r0, [pc, #172]	; (8002f70 <HAL_LTDC_MspInit+0x17c>)
 8002ec4:	f002 fe02 	bl	8005acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8002ec8:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ece:	2302      	movs	r3, #2
 8002ed0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002eda:	230e      	movs	r3, #14
 8002edc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4823      	ldr	r0, [pc, #140]	; (8002f74 <HAL_LTDC_MspInit+0x180>)
 8002ee6:	f002 fdf1 	bl	8005acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8002eea:	23f7      	movs	r3, #247	; 0xf7
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002efa:	230e      	movs	r3, #14
 8002efc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f02:	4619      	mov	r1, r3
 8002f04:	481c      	ldr	r0, [pc, #112]	; (8002f78 <HAL_LTDC_MspInit+0x184>)
 8002f06:	f002 fde1 	bl	8005acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002f0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f10:	2302      	movs	r3, #2
 8002f12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f14:	2300      	movs	r3, #0
 8002f16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002f1c:	2309      	movs	r3, #9
 8002f1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f24:	4619      	mov	r1, r3
 8002f26:	4815      	ldr	r0, [pc, #84]	; (8002f7c <HAL_LTDC_MspInit+0x188>)
 8002f28:	f002 fdd0 	bl	8005acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002f2c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f32:	2302      	movs	r3, #2
 8002f34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f36:	2300      	movs	r3, #0
 8002f38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f3e:	230e      	movs	r3, #14
 8002f40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002f42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f46:	4619      	mov	r1, r3
 8002f48:	480d      	ldr	r0, [pc, #52]	; (8002f80 <HAL_LTDC_MspInit+0x18c>)
 8002f4a:	f002 fdbf 	bl	8005acc <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002f4e:	2200      	movs	r2, #0
 8002f50:	2105      	movs	r1, #5
 8002f52:	2058      	movs	r0, #88	; 0x58
 8002f54:	f001 ff8c 	bl	8004e70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002f58:	2058      	movs	r0, #88	; 0x58
 8002f5a:	f001 ffa5 	bl	8004ea8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002f5e:	bf00      	nop
 8002f60:	3738      	adds	r7, #56	; 0x38
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	40016800 	.word	0x40016800
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	40021000 	.word	0x40021000
 8002f74:	40022400 	.word	0x40022400
 8002f78:	40022800 	.word	0x40022800
 8002f7c:	40021800 	.word	0x40021800
 8002f80:	40022000 	.word	0x40022000

08002f84 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b08c      	sub	sp, #48	; 0x30
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f8c:	f107 031c 	add.w	r3, r7, #28
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	609a      	str	r2, [r3, #8]
 8002f98:	60da      	str	r2, [r3, #12]
 8002f9a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a3b      	ldr	r2, [pc, #236]	; (8003090 <HAL_QSPI_MspInit+0x10c>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d170      	bne.n	8003088 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002fa6:	4b3b      	ldr	r3, [pc, #236]	; (8003094 <HAL_QSPI_MspInit+0x110>)
 8002fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002faa:	4a3a      	ldr	r2, [pc, #232]	; (8003094 <HAL_QSPI_MspInit+0x110>)
 8002fac:	f043 0302 	orr.w	r3, r3, #2
 8002fb0:	6393      	str	r3, [r2, #56]	; 0x38
 8002fb2:	4b38      	ldr	r3, [pc, #224]	; (8003094 <HAL_QSPI_MspInit+0x110>)
 8002fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	61bb      	str	r3, [r7, #24]
 8002fbc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fbe:	4b35      	ldr	r3, [pc, #212]	; (8003094 <HAL_QSPI_MspInit+0x110>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc2:	4a34      	ldr	r2, [pc, #208]	; (8003094 <HAL_QSPI_MspInit+0x110>)
 8002fc4:	f043 0310 	orr.w	r3, r3, #16
 8002fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fca:	4b32      	ldr	r3, [pc, #200]	; (8003094 <HAL_QSPI_MspInit+0x110>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	f003 0310 	and.w	r3, r3, #16
 8002fd2:	617b      	str	r3, [r7, #20]
 8002fd4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fd6:	4b2f      	ldr	r3, [pc, #188]	; (8003094 <HAL_QSPI_MspInit+0x110>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	4a2e      	ldr	r2, [pc, #184]	; (8003094 <HAL_QSPI_MspInit+0x110>)
 8002fdc:	f043 0302 	orr.w	r3, r3, #2
 8002fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe2:	4b2c      	ldr	r3, [pc, #176]	; (8003094 <HAL_QSPI_MspInit+0x110>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	613b      	str	r3, [r7, #16]
 8002fec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fee:	4b29      	ldr	r3, [pc, #164]	; (8003094 <HAL_QSPI_MspInit+0x110>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	4a28      	ldr	r2, [pc, #160]	; (8003094 <HAL_QSPI_MspInit+0x110>)
 8002ff4:	f043 0308 	orr.w	r3, r3, #8
 8002ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ffa:	4b26      	ldr	r3, [pc, #152]	; (8003094 <HAL_QSPI_MspInit+0x110>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8003006:	2304      	movs	r3, #4
 8003008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800300a:	2302      	movs	r3, #2
 800300c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300e:	2300      	movs	r3, #0
 8003010:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003012:	2303      	movs	r3, #3
 8003014:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003016:	2309      	movs	r3, #9
 8003018:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800301a:	f107 031c 	add.w	r3, r7, #28
 800301e:	4619      	mov	r1, r3
 8003020:	481d      	ldr	r0, [pc, #116]	; (8003098 <HAL_QSPI_MspInit+0x114>)
 8003022:	f002 fd53 	bl	8005acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8003026:	2340      	movs	r3, #64	; 0x40
 8003028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302a:	2302      	movs	r3, #2
 800302c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302e:	2300      	movs	r3, #0
 8003030:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003032:	2303      	movs	r3, #3
 8003034:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003036:	230a      	movs	r3, #10
 8003038:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800303a:	f107 031c 	add.w	r3, r7, #28
 800303e:	4619      	mov	r1, r3
 8003040:	4816      	ldr	r0, [pc, #88]	; (800309c <HAL_QSPI_MspInit+0x118>)
 8003042:	f002 fd43 	bl	8005acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003046:	2304      	movs	r3, #4
 8003048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800304a:	2302      	movs	r3, #2
 800304c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304e:	2300      	movs	r3, #0
 8003050:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003052:	2303      	movs	r3, #3
 8003054:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003056:	2309      	movs	r3, #9
 8003058:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800305a:	f107 031c 	add.w	r3, r7, #28
 800305e:	4619      	mov	r1, r3
 8003060:	480e      	ldr	r0, [pc, #56]	; (800309c <HAL_QSPI_MspInit+0x118>)
 8003062:	f002 fd33 	bl	8005acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8003066:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800306a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800306c:	2302      	movs	r3, #2
 800306e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003070:	2300      	movs	r3, #0
 8003072:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003074:	2303      	movs	r3, #3
 8003076:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003078:	2309      	movs	r3, #9
 800307a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800307c:	f107 031c 	add.w	r3, r7, #28
 8003080:	4619      	mov	r1, r3
 8003082:	4807      	ldr	r0, [pc, #28]	; (80030a0 <HAL_QSPI_MspInit+0x11c>)
 8003084:	f002 fd22 	bl	8005acc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8003088:	bf00      	nop
 800308a:	3730      	adds	r7, #48	; 0x30
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	a0001000 	.word	0xa0001000
 8003094:	40023800 	.word	0x40023800
 8003098:	40021000 	.word	0x40021000
 800309c:	40020400 	.word	0x40020400
 80030a0:	40020c00 	.word	0x40020c00

080030a4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a07      	ldr	r2, [pc, #28]	; (80030d0 <HAL_RTC_MspInit+0x2c>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d105      	bne.n	80030c2 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80030b6:	4b07      	ldr	r3, [pc, #28]	; (80030d4 <HAL_RTC_MspInit+0x30>)
 80030b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ba:	4a06      	ldr	r2, [pc, #24]	; (80030d4 <HAL_RTC_MspInit+0x30>)
 80030bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030c0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	40002800 	.word	0x40002800
 80030d4:	40023800 	.word	0x40023800

080030d8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08a      	sub	sp, #40	; 0x28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e0:	f107 0314 	add.w	r3, r7, #20
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	605a      	str	r2, [r3, #4]
 80030ea:	609a      	str	r2, [r3, #8]
 80030ec:	60da      	str	r2, [r3, #12]
 80030ee:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a25      	ldr	r2, [pc, #148]	; (800318c <HAL_SD_MspInit+0xb4>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d144      	bne.n	8003184 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80030fa:	4b25      	ldr	r3, [pc, #148]	; (8003190 <HAL_SD_MspInit+0xb8>)
 80030fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fe:	4a24      	ldr	r2, [pc, #144]	; (8003190 <HAL_SD_MspInit+0xb8>)
 8003100:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003104:	6453      	str	r3, [r2, #68]	; 0x44
 8003106:	4b22      	ldr	r3, [pc, #136]	; (8003190 <HAL_SD_MspInit+0xb8>)
 8003108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800310e:	613b      	str	r3, [r7, #16]
 8003110:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003112:	4b1f      	ldr	r3, [pc, #124]	; (8003190 <HAL_SD_MspInit+0xb8>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	4a1e      	ldr	r2, [pc, #120]	; (8003190 <HAL_SD_MspInit+0xb8>)
 8003118:	f043 0304 	orr.w	r3, r3, #4
 800311c:	6313      	str	r3, [r2, #48]	; 0x30
 800311e:	4b1c      	ldr	r3, [pc, #112]	; (8003190 <HAL_SD_MspInit+0xb8>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	f003 0304 	and.w	r3, r3, #4
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800312a:	4b19      	ldr	r3, [pc, #100]	; (8003190 <HAL_SD_MspInit+0xb8>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	4a18      	ldr	r2, [pc, #96]	; (8003190 <HAL_SD_MspInit+0xb8>)
 8003130:	f043 0308 	orr.w	r3, r3, #8
 8003134:	6313      	str	r3, [r2, #48]	; 0x30
 8003136:	4b16      	ldr	r3, [pc, #88]	; (8003190 <HAL_SD_MspInit+0xb8>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	f003 0308 	and.w	r3, r3, #8
 800313e:	60bb      	str	r3, [r7, #8]
 8003140:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8003142:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003146:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003148:	2302      	movs	r3, #2
 800314a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314c:	2300      	movs	r3, #0
 800314e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003150:	2303      	movs	r3, #3
 8003152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003154:	230c      	movs	r3, #12
 8003156:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003158:	f107 0314 	add.w	r3, r7, #20
 800315c:	4619      	mov	r1, r3
 800315e:	480d      	ldr	r0, [pc, #52]	; (8003194 <HAL_SD_MspInit+0xbc>)
 8003160:	f002 fcb4 	bl	8005acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8003164:	2304      	movs	r3, #4
 8003166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003168:	2302      	movs	r3, #2
 800316a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316c:	2300      	movs	r3, #0
 800316e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003170:	2303      	movs	r3, #3
 8003172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003174:	230c      	movs	r3, #12
 8003176:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8003178:	f107 0314 	add.w	r3, r7, #20
 800317c:	4619      	mov	r1, r3
 800317e:	4806      	ldr	r0, [pc, #24]	; (8003198 <HAL_SD_MspInit+0xc0>)
 8003180:	f002 fca4 	bl	8005acc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8003184:	bf00      	nop
 8003186:	3728      	adds	r7, #40	; 0x28
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40012c00 	.word	0x40012c00
 8003190:	40023800 	.word	0x40023800
 8003194:	40020800 	.word	0x40020800
 8003198:	40020c00 	.word	0x40020c00

0800319c <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08a      	sub	sp, #40	; 0x28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a4:	f107 0314 	add.w	r3, r7, #20
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	609a      	str	r2, [r3, #8]
 80031b0:	60da      	str	r2, [r3, #12]
 80031b2:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 80031bc:	d127      	bne.n	800320e <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80031be:	4b16      	ldr	r3, [pc, #88]	; (8003218 <HAL_SPDIFRX_MspInit+0x7c>)
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	4a15      	ldr	r2, [pc, #84]	; (8003218 <HAL_SPDIFRX_MspInit+0x7c>)
 80031c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c8:	6413      	str	r3, [r2, #64]	; 0x40
 80031ca:	4b13      	ldr	r3, [pc, #76]	; (8003218 <HAL_SPDIFRX_MspInit+0x7c>)
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d2:	613b      	str	r3, [r7, #16]
 80031d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031d6:	4b10      	ldr	r3, [pc, #64]	; (8003218 <HAL_SPDIFRX_MspInit+0x7c>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	4a0f      	ldr	r2, [pc, #60]	; (8003218 <HAL_SPDIFRX_MspInit+0x7c>)
 80031dc:	f043 0308 	orr.w	r3, r3, #8
 80031e0:	6313      	str	r3, [r2, #48]	; 0x30
 80031e2:	4b0d      	ldr	r3, [pc, #52]	; (8003218 <HAL_SPDIFRX_MspInit+0x7c>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80031ee:	2380      	movs	r3, #128	; 0x80
 80031f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f2:	2302      	movs	r3, #2
 80031f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f6:	2300      	movs	r3, #0
 80031f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031fa:	2300      	movs	r3, #0
 80031fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80031fe:	2308      	movs	r3, #8
 8003200:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8003202:	f107 0314 	add.w	r3, r7, #20
 8003206:	4619      	mov	r1, r3
 8003208:	4804      	ldr	r0, [pc, #16]	; (800321c <HAL_SPDIFRX_MspInit+0x80>)
 800320a:	f002 fc5f 	bl	8005acc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 800320e:	bf00      	nop
 8003210:	3728      	adds	r7, #40	; 0x28
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40023800 	.word	0x40023800
 800321c:	40020c00 	.word	0x40020c00

08003220 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b08a      	sub	sp, #40	; 0x28
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003228:	f107 0314 	add.w	r3, r7, #20
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	605a      	str	r2, [r3, #4]
 8003232:	609a      	str	r2, [r3, #8]
 8003234:	60da      	str	r2, [r3, #12]
 8003236:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a25      	ldr	r2, [pc, #148]	; (80032d4 <HAL_SPI_MspInit+0xb4>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d144      	bne.n	80032cc <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003242:	4b25      	ldr	r3, [pc, #148]	; (80032d8 <HAL_SPI_MspInit+0xb8>)
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	4a24      	ldr	r2, [pc, #144]	; (80032d8 <HAL_SPI_MspInit+0xb8>)
 8003248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800324c:	6413      	str	r3, [r2, #64]	; 0x40
 800324e:	4b22      	ldr	r3, [pc, #136]	; (80032d8 <HAL_SPI_MspInit+0xb8>)
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003256:	613b      	str	r3, [r7, #16]
 8003258:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800325a:	4b1f      	ldr	r3, [pc, #124]	; (80032d8 <HAL_SPI_MspInit+0xb8>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	4a1e      	ldr	r2, [pc, #120]	; (80032d8 <HAL_SPI_MspInit+0xb8>)
 8003260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003264:	6313      	str	r3, [r2, #48]	; 0x30
 8003266:	4b1c      	ldr	r3, [pc, #112]	; (80032d8 <HAL_SPI_MspInit+0xb8>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003272:	4b19      	ldr	r3, [pc, #100]	; (80032d8 <HAL_SPI_MspInit+0xb8>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	4a18      	ldr	r2, [pc, #96]	; (80032d8 <HAL_SPI_MspInit+0xb8>)
 8003278:	f043 0302 	orr.w	r3, r3, #2
 800327c:	6313      	str	r3, [r2, #48]	; 0x30
 800327e:	4b16      	ldr	r3, [pc, #88]	; (80032d8 <HAL_SPI_MspInit+0xb8>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	60bb      	str	r3, [r7, #8]
 8003288:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800328a:	2302      	movs	r3, #2
 800328c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328e:	2302      	movs	r3, #2
 8003290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003292:	2300      	movs	r3, #0
 8003294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003296:	2300      	movs	r3, #0
 8003298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800329a:	2305      	movs	r3, #5
 800329c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800329e:	f107 0314 	add.w	r3, r7, #20
 80032a2:	4619      	mov	r1, r3
 80032a4:	480d      	ldr	r0, [pc, #52]	; (80032dc <HAL_SPI_MspInit+0xbc>)
 80032a6:	f002 fc11 	bl	8005acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80032aa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80032ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b0:	2302      	movs	r3, #2
 80032b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b4:	2300      	movs	r3, #0
 80032b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b8:	2300      	movs	r3, #0
 80032ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80032bc:	2305      	movs	r3, #5
 80032be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032c0:	f107 0314 	add.w	r3, r7, #20
 80032c4:	4619      	mov	r1, r3
 80032c6:	4806      	ldr	r0, [pc, #24]	; (80032e0 <HAL_SPI_MspInit+0xc0>)
 80032c8:	f002 fc00 	bl	8005acc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80032cc:	bf00      	nop
 80032ce:	3728      	adds	r7, #40	; 0x28
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40003800 	.word	0x40003800
 80032d8:	40023800 	.word	0x40023800
 80032dc:	40022000 	.word	0x40022000
 80032e0:	40020400 	.word	0x40020400

080032e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b089      	sub	sp, #36	; 0x24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a2e      	ldr	r2, [pc, #184]	; (80033ac <HAL_TIM_Base_MspInit+0xc8>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d10c      	bne.n	8003310 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80032f6:	4b2e      	ldr	r3, [pc, #184]	; (80033b0 <HAL_TIM_Base_MspInit+0xcc>)
 80032f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fa:	4a2d      	ldr	r2, [pc, #180]	; (80033b0 <HAL_TIM_Base_MspInit+0xcc>)
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	6453      	str	r3, [r2, #68]	; 0x44
 8003302:	4b2b      	ldr	r3, [pc, #172]	; (80033b0 <HAL_TIM_Base_MspInit+0xcc>)
 8003304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	61fb      	str	r3, [r7, #28]
 800330c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800330e:	e046      	b.n	800339e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003318:	d10c      	bne.n	8003334 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800331a:	4b25      	ldr	r3, [pc, #148]	; (80033b0 <HAL_TIM_Base_MspInit+0xcc>)
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	4a24      	ldr	r2, [pc, #144]	; (80033b0 <HAL_TIM_Base_MspInit+0xcc>)
 8003320:	f043 0301 	orr.w	r3, r3, #1
 8003324:	6413      	str	r3, [r2, #64]	; 0x40
 8003326:	4b22      	ldr	r3, [pc, #136]	; (80033b0 <HAL_TIM_Base_MspInit+0xcc>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	61bb      	str	r3, [r7, #24]
 8003330:	69bb      	ldr	r3, [r7, #24]
}
 8003332:	e034      	b.n	800339e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a1e      	ldr	r2, [pc, #120]	; (80033b4 <HAL_TIM_Base_MspInit+0xd0>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d10c      	bne.n	8003358 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800333e:	4b1c      	ldr	r3, [pc, #112]	; (80033b0 <HAL_TIM_Base_MspInit+0xcc>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	4a1b      	ldr	r2, [pc, #108]	; (80033b0 <HAL_TIM_Base_MspInit+0xcc>)
 8003344:	f043 0302 	orr.w	r3, r3, #2
 8003348:	6413      	str	r3, [r2, #64]	; 0x40
 800334a:	4b19      	ldr	r3, [pc, #100]	; (80033b0 <HAL_TIM_Base_MspInit+0xcc>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	617b      	str	r3, [r7, #20]
 8003354:	697b      	ldr	r3, [r7, #20]
}
 8003356:	e022      	b.n	800339e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a16      	ldr	r2, [pc, #88]	; (80033b8 <HAL_TIM_Base_MspInit+0xd4>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d10c      	bne.n	800337c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003362:	4b13      	ldr	r3, [pc, #76]	; (80033b0 <HAL_TIM_Base_MspInit+0xcc>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	4a12      	ldr	r2, [pc, #72]	; (80033b0 <HAL_TIM_Base_MspInit+0xcc>)
 8003368:	f043 0308 	orr.w	r3, r3, #8
 800336c:	6413      	str	r3, [r2, #64]	; 0x40
 800336e:	4b10      	ldr	r3, [pc, #64]	; (80033b0 <HAL_TIM_Base_MspInit+0xcc>)
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	693b      	ldr	r3, [r7, #16]
}
 800337a:	e010      	b.n	800339e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a0e      	ldr	r2, [pc, #56]	; (80033bc <HAL_TIM_Base_MspInit+0xd8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d10b      	bne.n	800339e <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003386:	4b0a      	ldr	r3, [pc, #40]	; (80033b0 <HAL_TIM_Base_MspInit+0xcc>)
 8003388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338a:	4a09      	ldr	r2, [pc, #36]	; (80033b0 <HAL_TIM_Base_MspInit+0xcc>)
 800338c:	f043 0302 	orr.w	r3, r3, #2
 8003390:	6453      	str	r3, [r2, #68]	; 0x44
 8003392:	4b07      	ldr	r3, [pc, #28]	; (80033b0 <HAL_TIM_Base_MspInit+0xcc>)
 8003394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	68fb      	ldr	r3, [r7, #12]
}
 800339e:	bf00      	nop
 80033a0:	3724      	adds	r7, #36	; 0x24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	40010000 	.word	0x40010000
 80033b0:	40023800 	.word	0x40023800
 80033b4:	40000400 	.word	0x40000400
 80033b8:	40000c00 	.word	0x40000c00
 80033bc:	40010400 	.word	0x40010400

080033c0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a0a      	ldr	r2, [pc, #40]	; (80033f8 <HAL_TIM_PWM_MspInit+0x38>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d10b      	bne.n	80033ea <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80033d2:	4b0a      	ldr	r3, [pc, #40]	; (80033fc <HAL_TIM_PWM_MspInit+0x3c>)
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	4a09      	ldr	r2, [pc, #36]	; (80033fc <HAL_TIM_PWM_MspInit+0x3c>)
 80033d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033dc:	6413      	str	r3, [r2, #64]	; 0x40
 80033de:	4b07      	ldr	r3, [pc, #28]	; (80033fc <HAL_TIM_PWM_MspInit+0x3c>)
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80033ea:	bf00      	nop
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	40001800 	.word	0x40001800
 80033fc:	40023800 	.word	0x40023800

08003400 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08c      	sub	sp, #48	; 0x30
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003408:	f107 031c 	add.w	r3, r7, #28
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	605a      	str	r2, [r3, #4]
 8003412:	609a      	str	r2, [r3, #8]
 8003414:	60da      	str	r2, [r3, #12]
 8003416:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a56      	ldr	r2, [pc, #344]	; (8003578 <HAL_TIM_MspPostInit+0x178>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d11d      	bne.n	800345e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003422:	4b56      	ldr	r3, [pc, #344]	; (800357c <HAL_TIM_MspPostInit+0x17c>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	4a55      	ldr	r2, [pc, #340]	; (800357c <HAL_TIM_MspPostInit+0x17c>)
 8003428:	f043 0301 	orr.w	r3, r3, #1
 800342c:	6313      	str	r3, [r2, #48]	; 0x30
 800342e:	4b53      	ldr	r3, [pc, #332]	; (800357c <HAL_TIM_MspPostInit+0x17c>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	61bb      	str	r3, [r7, #24]
 8003438:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800343a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800343e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003440:	2302      	movs	r3, #2
 8003442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003444:	2300      	movs	r3, #0
 8003446:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003448:	2300      	movs	r3, #0
 800344a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800344c:	2301      	movs	r3, #1
 800344e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8003450:	f107 031c 	add.w	r3, r7, #28
 8003454:	4619      	mov	r1, r3
 8003456:	484a      	ldr	r0, [pc, #296]	; (8003580 <HAL_TIM_MspPostInit+0x180>)
 8003458:	f002 fb38 	bl	8005acc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800345c:	e087      	b.n	800356e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003466:	d11d      	bne.n	80034a4 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003468:	4b44      	ldr	r3, [pc, #272]	; (800357c <HAL_TIM_MspPostInit+0x17c>)
 800346a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346c:	4a43      	ldr	r2, [pc, #268]	; (800357c <HAL_TIM_MspPostInit+0x17c>)
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	6313      	str	r3, [r2, #48]	; 0x30
 8003474:	4b41      	ldr	r3, [pc, #260]	; (800357c <HAL_TIM_MspPostInit+0x17c>)
 8003476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	617b      	str	r3, [r7, #20]
 800347e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003480:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003486:	2302      	movs	r3, #2
 8003488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348a:	2300      	movs	r3, #0
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800348e:	2300      	movs	r3, #0
 8003490:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003492:	2301      	movs	r3, #1
 8003494:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8003496:	f107 031c 	add.w	r3, r7, #28
 800349a:	4619      	mov	r1, r3
 800349c:	4838      	ldr	r0, [pc, #224]	; (8003580 <HAL_TIM_MspPostInit+0x180>)
 800349e:	f002 fb15 	bl	8005acc <HAL_GPIO_Init>
}
 80034a2:	e064      	b.n	800356e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a36      	ldr	r2, [pc, #216]	; (8003584 <HAL_TIM_MspPostInit+0x184>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d11c      	bne.n	80034e8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ae:	4b33      	ldr	r3, [pc, #204]	; (800357c <HAL_TIM_MspPostInit+0x17c>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	4a32      	ldr	r2, [pc, #200]	; (800357c <HAL_TIM_MspPostInit+0x17c>)
 80034b4:	f043 0302 	orr.w	r3, r3, #2
 80034b8:	6313      	str	r3, [r2, #48]	; 0x30
 80034ba:	4b30      	ldr	r3, [pc, #192]	; (800357c <HAL_TIM_MspPostInit+0x17c>)
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	613b      	str	r3, [r7, #16]
 80034c4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80034c6:	2310      	movs	r3, #16
 80034c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ca:	2302      	movs	r3, #2
 80034cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d2:	2300      	movs	r3, #0
 80034d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80034d6:	2302      	movs	r3, #2
 80034d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80034da:	f107 031c 	add.w	r3, r7, #28
 80034de:	4619      	mov	r1, r3
 80034e0:	4829      	ldr	r0, [pc, #164]	; (8003588 <HAL_TIM_MspPostInit+0x188>)
 80034e2:	f002 faf3 	bl	8005acc <HAL_GPIO_Init>
}
 80034e6:	e042      	b.n	800356e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a27      	ldr	r2, [pc, #156]	; (800358c <HAL_TIM_MspPostInit+0x18c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d11c      	bne.n	800352c <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80034f2:	4b22      	ldr	r3, [pc, #136]	; (800357c <HAL_TIM_MspPostInit+0x17c>)
 80034f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f6:	4a21      	ldr	r2, [pc, #132]	; (800357c <HAL_TIM_MspPostInit+0x17c>)
 80034f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034fc:	6313      	str	r3, [r2, #48]	; 0x30
 80034fe:	4b1f      	ldr	r3, [pc, #124]	; (800357c <HAL_TIM_MspPostInit+0x17c>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800350a:	2301      	movs	r3, #1
 800350c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800350e:	2302      	movs	r3, #2
 8003510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003512:	2300      	movs	r3, #0
 8003514:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003516:	2300      	movs	r3, #0
 8003518:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800351a:	2302      	movs	r3, #2
 800351c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800351e:	f107 031c 	add.w	r3, r7, #28
 8003522:	4619      	mov	r1, r3
 8003524:	481a      	ldr	r0, [pc, #104]	; (8003590 <HAL_TIM_MspPostInit+0x190>)
 8003526:	f002 fad1 	bl	8005acc <HAL_GPIO_Init>
}
 800352a:	e020      	b.n	800356e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a18      	ldr	r2, [pc, #96]	; (8003594 <HAL_TIM_MspPostInit+0x194>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d11b      	bne.n	800356e <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003536:	4b11      	ldr	r3, [pc, #68]	; (800357c <HAL_TIM_MspPostInit+0x17c>)
 8003538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353a:	4a10      	ldr	r2, [pc, #64]	; (800357c <HAL_TIM_MspPostInit+0x17c>)
 800353c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003540:	6313      	str	r3, [r2, #48]	; 0x30
 8003542:	4b0e      	ldr	r3, [pc, #56]	; (800357c <HAL_TIM_MspPostInit+0x17c>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800354a:	60bb      	str	r3, [r7, #8]
 800354c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800354e:	2340      	movs	r3, #64	; 0x40
 8003550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003552:	2302      	movs	r3, #2
 8003554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003556:	2300      	movs	r3, #0
 8003558:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800355a:	2300      	movs	r3, #0
 800355c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800355e:	2309      	movs	r3, #9
 8003560:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8003562:	f107 031c 	add.w	r3, r7, #28
 8003566:	4619      	mov	r1, r3
 8003568:	480b      	ldr	r0, [pc, #44]	; (8003598 <HAL_TIM_MspPostInit+0x198>)
 800356a:	f002 faaf 	bl	8005acc <HAL_GPIO_Init>
}
 800356e:	bf00      	nop
 8003570:	3730      	adds	r7, #48	; 0x30
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40010000 	.word	0x40010000
 800357c:	40023800 	.word	0x40023800
 8003580:	40020000 	.word	0x40020000
 8003584:	40000400 	.word	0x40000400
 8003588:	40020400 	.word	0x40020400
 800358c:	40000c00 	.word	0x40000c00
 8003590:	40022000 	.word	0x40022000
 8003594:	40001800 	.word	0x40001800
 8003598:	40021c00 	.word	0x40021c00

0800359c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b08c      	sub	sp, #48	; 0x30
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a4:	f107 031c 	add.w	r3, r7, #28
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	605a      	str	r2, [r3, #4]
 80035ae:	609a      	str	r2, [r3, #8]
 80035b0:	60da      	str	r2, [r3, #12]
 80035b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a3c      	ldr	r2, [pc, #240]	; (80036ac <HAL_UART_MspInit+0x110>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d145      	bne.n	800364a <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80035be:	4b3c      	ldr	r3, [pc, #240]	; (80036b0 <HAL_UART_MspInit+0x114>)
 80035c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c2:	4a3b      	ldr	r2, [pc, #236]	; (80036b0 <HAL_UART_MspInit+0x114>)
 80035c4:	f043 0310 	orr.w	r3, r3, #16
 80035c8:	6453      	str	r3, [r2, #68]	; 0x44
 80035ca:	4b39      	ldr	r3, [pc, #228]	; (80036b0 <HAL_UART_MspInit+0x114>)
 80035cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ce:	f003 0310 	and.w	r3, r3, #16
 80035d2:	61bb      	str	r3, [r7, #24]
 80035d4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035d6:	4b36      	ldr	r3, [pc, #216]	; (80036b0 <HAL_UART_MspInit+0x114>)
 80035d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035da:	4a35      	ldr	r2, [pc, #212]	; (80036b0 <HAL_UART_MspInit+0x114>)
 80035dc:	f043 0302 	orr.w	r3, r3, #2
 80035e0:	6313      	str	r3, [r2, #48]	; 0x30
 80035e2:	4b33      	ldr	r3, [pc, #204]	; (80036b0 <HAL_UART_MspInit+0x114>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	617b      	str	r3, [r7, #20]
 80035ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ee:	4b30      	ldr	r3, [pc, #192]	; (80036b0 <HAL_UART_MspInit+0x114>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	4a2f      	ldr	r2, [pc, #188]	; (80036b0 <HAL_UART_MspInit+0x114>)
 80035f4:	f043 0301 	orr.w	r3, r3, #1
 80035f8:	6313      	str	r3, [r2, #48]	; 0x30
 80035fa:	4b2d      	ldr	r3, [pc, #180]	; (80036b0 <HAL_UART_MspInit+0x114>)
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	613b      	str	r3, [r7, #16]
 8003604:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003606:	2380      	movs	r3, #128	; 0x80
 8003608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800360a:	2302      	movs	r3, #2
 800360c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360e:	2300      	movs	r3, #0
 8003610:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003612:	2300      	movs	r3, #0
 8003614:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003616:	2307      	movs	r3, #7
 8003618:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800361a:	f107 031c 	add.w	r3, r7, #28
 800361e:	4619      	mov	r1, r3
 8003620:	4824      	ldr	r0, [pc, #144]	; (80036b4 <HAL_UART_MspInit+0x118>)
 8003622:	f002 fa53 	bl	8005acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003626:	f44f 7300 	mov.w	r3, #512	; 0x200
 800362a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800362c:	2302      	movs	r3, #2
 800362e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003630:	2300      	movs	r3, #0
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003634:	2300      	movs	r3, #0
 8003636:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003638:	2307      	movs	r3, #7
 800363a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800363c:	f107 031c 	add.w	r3, r7, #28
 8003640:	4619      	mov	r1, r3
 8003642:	481d      	ldr	r0, [pc, #116]	; (80036b8 <HAL_UART_MspInit+0x11c>)
 8003644:	f002 fa42 	bl	8005acc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003648:	e02c      	b.n	80036a4 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a1b      	ldr	r2, [pc, #108]	; (80036bc <HAL_UART_MspInit+0x120>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d127      	bne.n	80036a4 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003654:	4b16      	ldr	r3, [pc, #88]	; (80036b0 <HAL_UART_MspInit+0x114>)
 8003656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003658:	4a15      	ldr	r2, [pc, #84]	; (80036b0 <HAL_UART_MspInit+0x114>)
 800365a:	f043 0320 	orr.w	r3, r3, #32
 800365e:	6453      	str	r3, [r2, #68]	; 0x44
 8003660:	4b13      	ldr	r3, [pc, #76]	; (80036b0 <HAL_UART_MspInit+0x114>)
 8003662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003664:	f003 0320 	and.w	r3, r3, #32
 8003668:	60fb      	str	r3, [r7, #12]
 800366a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800366c:	4b10      	ldr	r3, [pc, #64]	; (80036b0 <HAL_UART_MspInit+0x114>)
 800366e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003670:	4a0f      	ldr	r2, [pc, #60]	; (80036b0 <HAL_UART_MspInit+0x114>)
 8003672:	f043 0304 	orr.w	r3, r3, #4
 8003676:	6313      	str	r3, [r2, #48]	; 0x30
 8003678:	4b0d      	ldr	r3, [pc, #52]	; (80036b0 <HAL_UART_MspInit+0x114>)
 800367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	60bb      	str	r3, [r7, #8]
 8003682:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003684:	23c0      	movs	r3, #192	; 0xc0
 8003686:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003688:	2302      	movs	r3, #2
 800368a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368c:	2300      	movs	r3, #0
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003690:	2303      	movs	r3, #3
 8003692:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003694:	2308      	movs	r3, #8
 8003696:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003698:	f107 031c 	add.w	r3, r7, #28
 800369c:	4619      	mov	r1, r3
 800369e:	4808      	ldr	r0, [pc, #32]	; (80036c0 <HAL_UART_MspInit+0x124>)
 80036a0:	f002 fa14 	bl	8005acc <HAL_GPIO_Init>
}
 80036a4:	bf00      	nop
 80036a6:	3730      	adds	r7, #48	; 0x30
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40011000 	.word	0x40011000
 80036b0:	40023800 	.word	0x40023800
 80036b4:	40020400 	.word	0x40020400
 80036b8:	40020000 	.word	0x40020000
 80036bc:	40011400 	.word	0x40011400
 80036c0:	40020800 	.word	0x40020800

080036c4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80036ca:	1d3b      	adds	r3, r7, #4
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	605a      	str	r2, [r3, #4]
 80036d2:	609a      	str	r2, [r3, #8]
 80036d4:	60da      	str	r2, [r3, #12]
 80036d6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80036d8:	4b3a      	ldr	r3, [pc, #232]	; (80037c4 <HAL_FMC_MspInit+0x100>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d16d      	bne.n	80037bc <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80036e0:	4b38      	ldr	r3, [pc, #224]	; (80037c4 <HAL_FMC_MspInit+0x100>)
 80036e2:	2201      	movs	r2, #1
 80036e4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80036e6:	4b38      	ldr	r3, [pc, #224]	; (80037c8 <HAL_FMC_MspInit+0x104>)
 80036e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ea:	4a37      	ldr	r2, [pc, #220]	; (80037c8 <HAL_FMC_MspInit+0x104>)
 80036ec:	f043 0301 	orr.w	r3, r3, #1
 80036f0:	6393      	str	r3, [r2, #56]	; 0x38
 80036f2:	4b35      	ldr	r3, [pc, #212]	; (80037c8 <HAL_FMC_MspInit+0x104>)
 80036f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	603b      	str	r3, [r7, #0]
 80036fc:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 80036fe:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003702:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003704:	2302      	movs	r3, #2
 8003706:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003708:	2300      	movs	r3, #0
 800370a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800370c:	2303      	movs	r3, #3
 800370e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003710:	230c      	movs	r3, #12
 8003712:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003714:	1d3b      	adds	r3, r7, #4
 8003716:	4619      	mov	r1, r3
 8003718:	482c      	ldr	r0, [pc, #176]	; (80037cc <HAL_FMC_MspInit+0x108>)
 800371a:	f002 f9d7 	bl	8005acc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 800371e:	f248 1333 	movw	r3, #33075	; 0x8133
 8003722:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003724:	2302      	movs	r3, #2
 8003726:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003728:	2300      	movs	r3, #0
 800372a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800372c:	2303      	movs	r3, #3
 800372e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003730:	230c      	movs	r3, #12
 8003732:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003734:	1d3b      	adds	r3, r7, #4
 8003736:	4619      	mov	r1, r3
 8003738:	4825      	ldr	r0, [pc, #148]	; (80037d0 <HAL_FMC_MspInit+0x10c>)
 800373a:	f002 f9c7 	bl	8005acc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800373e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003742:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003744:	2302      	movs	r3, #2
 8003746:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003748:	2300      	movs	r3, #0
 800374a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800374c:	2303      	movs	r3, #3
 800374e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003750:	230c      	movs	r3, #12
 8003752:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003754:	1d3b      	adds	r3, r7, #4
 8003756:	4619      	mov	r1, r3
 8003758:	481e      	ldr	r0, [pc, #120]	; (80037d4 <HAL_FMC_MspInit+0x110>)
 800375a:	f002 f9b7 	bl	8005acc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800375e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003762:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003764:	2302      	movs	r3, #2
 8003766:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003768:	2300      	movs	r3, #0
 800376a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800376c:	2303      	movs	r3, #3
 800376e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003770:	230c      	movs	r3, #12
 8003772:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003774:	1d3b      	adds	r3, r7, #4
 8003776:	4619      	mov	r1, r3
 8003778:	4817      	ldr	r0, [pc, #92]	; (80037d8 <HAL_FMC_MspInit+0x114>)
 800377a:	f002 f9a7 	bl	8005acc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800377e:	2328      	movs	r3, #40	; 0x28
 8003780:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003782:	2302      	movs	r3, #2
 8003784:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003786:	2300      	movs	r3, #0
 8003788:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800378a:	2303      	movs	r3, #3
 800378c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800378e:	230c      	movs	r3, #12
 8003790:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003792:	1d3b      	adds	r3, r7, #4
 8003794:	4619      	mov	r1, r3
 8003796:	4811      	ldr	r0, [pc, #68]	; (80037dc <HAL_FMC_MspInit+0x118>)
 8003798:	f002 f998 	bl	8005acc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800379c:	2308      	movs	r3, #8
 800379e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a0:	2302      	movs	r3, #2
 80037a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a4:	2300      	movs	r3, #0
 80037a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037a8:	2303      	movs	r3, #3
 80037aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80037ac:	230c      	movs	r3, #12
 80037ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80037b0:	1d3b      	adds	r3, r7, #4
 80037b2:	4619      	mov	r1, r3
 80037b4:	480a      	ldr	r0, [pc, #40]	; (80037e0 <HAL_FMC_MspInit+0x11c>)
 80037b6:	f002 f989 	bl	8005acc <HAL_GPIO_Init>
 80037ba:	e000      	b.n	80037be <HAL_FMC_MspInit+0xfa>
    return;
 80037bc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	20000b2c 	.word	0x20000b2c
 80037c8:	40023800 	.word	0x40023800
 80037cc:	40021000 	.word	0x40021000
 80037d0:	40021800 	.word	0x40021800
 80037d4:	40020c00 	.word	0x40020c00
 80037d8:	40021400 	.word	0x40021400
 80037dc:	40021c00 	.word	0x40021c00
 80037e0:	40020800 	.word	0x40020800

080037e4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80037ec:	f7ff ff6a 	bl	80036c4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80037f0:	bf00      	nop
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b08a      	sub	sp, #40	; 0x28
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a2b      	ldr	r2, [pc, #172]	; (80038b4 <HAL_SAI_MspInit+0xbc>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d124      	bne.n	8003854 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800380a:	4b2b      	ldr	r3, [pc, #172]	; (80038b8 <HAL_SAI_MspInit+0xc0>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10b      	bne.n	800382a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003812:	4b2a      	ldr	r3, [pc, #168]	; (80038bc <HAL_SAI_MspInit+0xc4>)
 8003814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003816:	4a29      	ldr	r2, [pc, #164]	; (80038bc <HAL_SAI_MspInit+0xc4>)
 8003818:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800381c:	6453      	str	r3, [r2, #68]	; 0x44
 800381e:	4b27      	ldr	r3, [pc, #156]	; (80038bc <HAL_SAI_MspInit+0xc4>)
 8003820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003822:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003826:	613b      	str	r3, [r7, #16]
 8003828:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800382a:	4b23      	ldr	r3, [pc, #140]	; (80038b8 <HAL_SAI_MspInit+0xc0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	3301      	adds	r3, #1
 8003830:	4a21      	ldr	r2, [pc, #132]	; (80038b8 <HAL_SAI_MspInit+0xc0>)
 8003832:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8003834:	23f0      	movs	r3, #240	; 0xf0
 8003836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003838:	2302      	movs	r3, #2
 800383a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800383c:	2300      	movs	r3, #0
 800383e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003840:	2300      	movs	r3, #0
 8003842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003844:	230a      	movs	r3, #10
 8003846:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003848:	f107 0314 	add.w	r3, r7, #20
 800384c:	4619      	mov	r1, r3
 800384e:	481c      	ldr	r0, [pc, #112]	; (80038c0 <HAL_SAI_MspInit+0xc8>)
 8003850:	f002 f93c 	bl	8005acc <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a1a      	ldr	r2, [pc, #104]	; (80038c4 <HAL_SAI_MspInit+0xcc>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d125      	bne.n	80038aa <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800385e:	4b16      	ldr	r3, [pc, #88]	; (80038b8 <HAL_SAI_MspInit+0xc0>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10b      	bne.n	800387e <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003866:	4b15      	ldr	r3, [pc, #84]	; (80038bc <HAL_SAI_MspInit+0xc4>)
 8003868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386a:	4a14      	ldr	r2, [pc, #80]	; (80038bc <HAL_SAI_MspInit+0xc4>)
 800386c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003870:	6453      	str	r3, [r2, #68]	; 0x44
 8003872:	4b12      	ldr	r3, [pc, #72]	; (80038bc <HAL_SAI_MspInit+0xc4>)
 8003874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003876:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800387e:	4b0e      	ldr	r3, [pc, #56]	; (80038b8 <HAL_SAI_MspInit+0xc0>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	3301      	adds	r3, #1
 8003884:	4a0c      	ldr	r2, [pc, #48]	; (80038b8 <HAL_SAI_MspInit+0xc0>)
 8003886:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003888:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800388c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800388e:	2302      	movs	r3, #2
 8003890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003892:	2300      	movs	r3, #0
 8003894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003896:	2300      	movs	r3, #0
 8003898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800389a:	230a      	movs	r3, #10
 800389c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800389e:	f107 0314 	add.w	r3, r7, #20
 80038a2:	4619      	mov	r1, r3
 80038a4:	4808      	ldr	r0, [pc, #32]	; (80038c8 <HAL_SAI_MspInit+0xd0>)
 80038a6:	f002 f911 	bl	8005acc <HAL_GPIO_Init>

    }
}
 80038aa:	bf00      	nop
 80038ac:	3728      	adds	r7, #40	; 0x28
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	40015c04 	.word	0x40015c04
 80038b8:	20000b30 	.word	0x20000b30
 80038bc:	40023800 	.word	0x40023800
 80038c0:	40022000 	.word	0x40022000
 80038c4:	40015c24 	.word	0x40015c24
 80038c8:	40021800 	.word	0x40021800

080038cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08c      	sub	sp, #48	; 0x30
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80038d4:	2300      	movs	r3, #0
 80038d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80038d8:	2300      	movs	r3, #0
 80038da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80038dc:	2200      	movs	r2, #0
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	2036      	movs	r0, #54	; 0x36
 80038e2:	f001 fac5 	bl	8004e70 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80038e6:	2036      	movs	r0, #54	; 0x36
 80038e8:	f001 fade 	bl	8004ea8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80038ec:	4b1f      	ldr	r3, [pc, #124]	; (800396c <HAL_InitTick+0xa0>)
 80038ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f0:	4a1e      	ldr	r2, [pc, #120]	; (800396c <HAL_InitTick+0xa0>)
 80038f2:	f043 0310 	orr.w	r3, r3, #16
 80038f6:	6413      	str	r3, [r2, #64]	; 0x40
 80038f8:	4b1c      	ldr	r3, [pc, #112]	; (800396c <HAL_InitTick+0xa0>)
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	f003 0310 	and.w	r3, r3, #16
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003904:	f107 0210 	add.w	r2, r7, #16
 8003908:	f107 0314 	add.w	r3, r7, #20
 800390c:	4611      	mov	r1, r2
 800390e:	4618      	mov	r0, r3
 8003910:	f003 fbfe 	bl	8007110 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003914:	f003 fbd4 	bl	80070c0 <HAL_RCC_GetPCLK1Freq>
 8003918:	4603      	mov	r3, r0
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800391e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003920:	4a13      	ldr	r2, [pc, #76]	; (8003970 <HAL_InitTick+0xa4>)
 8003922:	fba2 2303 	umull	r2, r3, r2, r3
 8003926:	0c9b      	lsrs	r3, r3, #18
 8003928:	3b01      	subs	r3, #1
 800392a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800392c:	4b11      	ldr	r3, [pc, #68]	; (8003974 <HAL_InitTick+0xa8>)
 800392e:	4a12      	ldr	r2, [pc, #72]	; (8003978 <HAL_InitTick+0xac>)
 8003930:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8003932:	4b10      	ldr	r3, [pc, #64]	; (8003974 <HAL_InitTick+0xa8>)
 8003934:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003938:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800393a:	4a0e      	ldr	r2, [pc, #56]	; (8003974 <HAL_InitTick+0xa8>)
 800393c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003940:	4b0c      	ldr	r3, [pc, #48]	; (8003974 <HAL_InitTick+0xa8>)
 8003942:	2200      	movs	r2, #0
 8003944:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003946:	4b0b      	ldr	r3, [pc, #44]	; (8003974 <HAL_InitTick+0xa8>)
 8003948:	2200      	movs	r2, #0
 800394a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800394c:	4809      	ldr	r0, [pc, #36]	; (8003974 <HAL_InitTick+0xa8>)
 800394e:	f006 f889 	bl	8009a64 <HAL_TIM_Base_Init>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d104      	bne.n	8003962 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003958:	4806      	ldr	r0, [pc, #24]	; (8003974 <HAL_InitTick+0xa8>)
 800395a:	f006 f8af 	bl	8009abc <HAL_TIM_Base_Start_IT>
 800395e:	4603      	mov	r3, r0
 8003960:	e000      	b.n	8003964 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
}
 8003964:	4618      	mov	r0, r3
 8003966:	3730      	adds	r7, #48	; 0x30
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40023800 	.word	0x40023800
 8003970:	431bde83 	.word	0x431bde83
 8003974:	20000b34 	.word	0x20000b34
 8003978:	40001000 	.word	0x40001000

0800397c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003980:	bf00      	nop
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr

0800398a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800398a:	b480      	push	{r7}
 800398c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800398e:	e7fe      	b.n	800398e <HardFault_Handler+0x4>

08003990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003994:	e7fe      	b.n	8003994 <MemManage_Handler+0x4>

08003996 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003996:	b480      	push	{r7}
 8003998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800399a:	e7fe      	b.n	800399a <BusFault_Handler+0x4>

0800399c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039a0:	e7fe      	b.n	80039a0 <UsageFault_Handler+0x4>

080039a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039a2:	b480      	push	{r7}
 80039a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039a6:	bf00      	nop
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80039b4:	4802      	ldr	r0, [pc, #8]	; (80039c0 <CAN1_RX0_IRQHandler+0x10>)
 80039b6:	f000 ff4f 	bl	8004858 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80039ba:	bf00      	nop
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	200003cc 	.word	0x200003cc

080039c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80039c8:	4802      	ldr	r0, [pc, #8]	; (80039d4 <TIM6_DAC_IRQHandler+0x10>)
 80039ca:	f006 f8cc 	bl	8009b66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80039ce:	bf00      	nop
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	20000b34 	.word	0x20000b34

080039d8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80039dc:	4802      	ldr	r0, [pc, #8]	; (80039e8 <LTDC_IRQHandler+0x10>)
 80039de:	f002 fb23 	bl	8006028 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80039e2:	bf00      	nop
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	200004cc 	.word	0x200004cc

080039ec <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80039f0:	4802      	ldr	r0, [pc, #8]	; (80039fc <DMA2D_IRQHandler+0x10>)
 80039f2:	f001 fe2c 	bl	800564e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80039f6:	bf00      	nop
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	2000048c 	.word	0x2000048c

08003a00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
	return 1;
 8003a04:	2301      	movs	r3, #1
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <_kill>:

int _kill(int pid, int sig)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003a1a:	f022 fe1f 	bl	802665c <__errno>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2216      	movs	r2, #22
 8003a22:	601a      	str	r2, [r3, #0]
	return -1;
 8003a24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3708      	adds	r7, #8
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <_exit>:

void _exit (int status)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003a38:	f04f 31ff 	mov.w	r1, #4294967295
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f7ff ffe7 	bl	8003a10 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003a42:	e7fe      	b.n	8003a42 <_exit+0x12>

08003a44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a50:	2300      	movs	r3, #0
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	e00a      	b.n	8003a6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003a56:	f3af 8000 	nop.w
 8003a5a:	4601      	mov	r1, r0
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	1c5a      	adds	r2, r3, #1
 8003a60:	60ba      	str	r2, [r7, #8]
 8003a62:	b2ca      	uxtb	r2, r1
 8003a64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	617b      	str	r3, [r7, #20]
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	dbf0      	blt.n	8003a56 <_read+0x12>
	}

return len;
 8003a74:	687b      	ldr	r3, [r7, #4]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3718      	adds	r7, #24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b086      	sub	sp, #24
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	60f8      	str	r0, [r7, #12]
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	617b      	str	r3, [r7, #20]
 8003a8e:	e009      	b.n	8003aa4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	1c5a      	adds	r2, r3, #1
 8003a94:	60ba      	str	r2, [r7, #8]
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	617b      	str	r3, [r7, #20]
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	dbf1      	blt.n	8003a90 <_write+0x12>
	}
	return len;
 8003aac:	687b      	ldr	r3, [r7, #4]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3718      	adds	r7, #24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <_close>:

int _close(int file)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
	return -1;
 8003abe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
 8003ad6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ade:	605a      	str	r2, [r3, #4]
	return 0;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <_isatty>:

int _isatty(int file)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
	return 1;
 8003af6:	2301      	movs	r3, #1
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
	return 0;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
	...

08003b20 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003b28:	4b11      	ldr	r3, [pc, #68]	; (8003b70 <_sbrk+0x50>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d102      	bne.n	8003b36 <_sbrk+0x16>
		heap_end = &end;
 8003b30:	4b0f      	ldr	r3, [pc, #60]	; (8003b70 <_sbrk+0x50>)
 8003b32:	4a10      	ldr	r2, [pc, #64]	; (8003b74 <_sbrk+0x54>)
 8003b34:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003b36:	4b0e      	ldr	r3, [pc, #56]	; (8003b70 <_sbrk+0x50>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003b3c:	4b0c      	ldr	r3, [pc, #48]	; (8003b70 <_sbrk+0x50>)
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4413      	add	r3, r2
 8003b44:	466a      	mov	r2, sp
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d907      	bls.n	8003b5a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003b4a:	f022 fd87 	bl	802665c <__errno>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	220c      	movs	r2, #12
 8003b52:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003b54:	f04f 33ff 	mov.w	r3, #4294967295
 8003b58:	e006      	b.n	8003b68 <_sbrk+0x48>
	}

	heap_end += incr;
 8003b5a:	4b05      	ldr	r3, [pc, #20]	; (8003b70 <_sbrk+0x50>)
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4413      	add	r3, r2
 8003b62:	4a03      	ldr	r2, [pc, #12]	; (8003b70 <_sbrk+0x50>)
 8003b64:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003b66:	68fb      	ldr	r3, [r7, #12]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	20000b74 	.word	0x20000b74
 8003b74:	2000c9b8 	.word	0x2000c9b8

08003b78 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b7c:	4b08      	ldr	r3, [pc, #32]	; (8003ba0 <SystemInit+0x28>)
 8003b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b82:	4a07      	ldr	r2, [pc, #28]	; (8003ba0 <SystemInit+0x28>)
 8003b84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003b8c:	4b04      	ldr	r3, [pc, #16]	; (8003ba0 <SystemInit+0x28>)
 8003b8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b92:	609a      	str	r2, [r3, #8]
#endif
}
 8003b94:	bf00      	nop
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	e000ed00 	.word	0xe000ed00

08003ba4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003ba4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003bdc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003ba8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003baa:	e003      	b.n	8003bb4 <LoopCopyDataInit>

08003bac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003bac:	4b0c      	ldr	r3, [pc, #48]	; (8003be0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003bae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003bb0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003bb2:	3104      	adds	r1, #4

08003bb4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003bb4:	480b      	ldr	r0, [pc, #44]	; (8003be4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003bb6:	4b0c      	ldr	r3, [pc, #48]	; (8003be8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003bb8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003bba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003bbc:	d3f6      	bcc.n	8003bac <CopyDataInit>
  ldr  r2, =_sbss
 8003bbe:	4a0b      	ldr	r2, [pc, #44]	; (8003bec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003bc0:	e002      	b.n	8003bc8 <LoopFillZerobss>

08003bc2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003bc2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003bc4:	f842 3b04 	str.w	r3, [r2], #4

08003bc8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003bc8:	4b09      	ldr	r3, [pc, #36]	; (8003bf0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003bca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003bcc:	d3f9      	bcc.n	8003bc2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003bce:	f7ff ffd3 	bl	8003b78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003bd2:	f022 fd49 	bl	8026668 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bd6:	f7fd fab3 	bl	8001140 <main>
  bx  lr    
 8003bda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003bdc:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003be0:	080628e4 	.word	0x080628e4
  ldr  r0, =_sdata
 8003be4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003be8:	20000110 	.word	0x20000110
  ldr  r2, =_sbss
 8003bec:	20000110 	.word	0x20000110
  ldr  r3, = _ebss
 8003bf0:	2000c9b4 	.word	0x2000c9b4

08003bf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bf4:	e7fe      	b.n	8003bf4 <ADC_IRQHandler>

08003bf6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bfa:	2003      	movs	r0, #3
 8003bfc:	f001 f92d 	bl	8004e5a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c00:	2000      	movs	r0, #0
 8003c02:	f7ff fe63 	bl	80038cc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003c06:	f7fe ff09 	bl	8002a1c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c14:	4b06      	ldr	r3, [pc, #24]	; (8003c30 <HAL_IncTick+0x20>)
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	4b06      	ldr	r3, [pc, #24]	; (8003c34 <HAL_IncTick+0x24>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4413      	add	r3, r2
 8003c20:	4a04      	ldr	r2, [pc, #16]	; (8003c34 <HAL_IncTick+0x24>)
 8003c22:	6013      	str	r3, [r2, #0]
}
 8003c24:	bf00      	nop
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	2000001c 	.word	0x2000001c
 8003c34:	20000b78 	.word	0x20000b78

08003c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8003c3c:	4b03      	ldr	r3, [pc, #12]	; (8003c4c <HAL_GetTick+0x14>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	20000b78 	.word	0x20000b78

08003c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c58:	f7ff ffee 	bl	8003c38 <HAL_GetTick>
 8003c5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c68:	d005      	beq.n	8003c76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c6a:	4b0a      	ldr	r3, [pc, #40]	; (8003c94 <HAL_Delay+0x44>)
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4413      	add	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c76:	bf00      	nop
 8003c78:	f7ff ffde 	bl	8003c38 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d8f7      	bhi.n	8003c78 <HAL_Delay+0x28>
  {
  }
}
 8003c88:	bf00      	nop
 8003c8a:	bf00      	nop
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	2000001c 	.word	0x2000001c

08003c98 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e031      	b.n	8003d12 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d109      	bne.n	8003cca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7fe fed8 	bl	8002a6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	f003 0310 	and.w	r3, r3, #16
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d116      	bne.n	8003d04 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cda:	4b10      	ldr	r3, [pc, #64]	; (8003d1c <HAL_ADC_Init+0x84>)
 8003cdc:	4013      	ands	r3, r2
 8003cde:	f043 0202 	orr.w	r2, r3, #2
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f964 	bl	8003fb4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	f023 0303 	bic.w	r3, r3, #3
 8003cfa:	f043 0201 	orr.w	r2, r3, #1
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	641a      	str	r2, [r3, #64]	; 0x40
 8003d02:	e001      	b.n	8003d08 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	ffffeefd 	.word	0xffffeefd

08003d20 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d101      	bne.n	8003d3c <HAL_ADC_ConfigChannel+0x1c>
 8003d38:	2302      	movs	r3, #2
 8003d3a:	e12a      	b.n	8003f92 <HAL_ADC_ConfigChannel+0x272>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b09      	cmp	r3, #9
 8003d4a:	d93a      	bls.n	8003dc2 <HAL_ADC_ConfigChannel+0xa2>
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d54:	d035      	beq.n	8003dc2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68d9      	ldr	r1, [r3, #12]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	461a      	mov	r2, r3
 8003d64:	4613      	mov	r3, r2
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	4413      	add	r3, r2
 8003d6a:	3b1e      	subs	r3, #30
 8003d6c:	2207      	movs	r2, #7
 8003d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d72:	43da      	mvns	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	400a      	ands	r2, r1
 8003d7a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a87      	ldr	r2, [pc, #540]	; (8003fa0 <HAL_ADC_ConfigChannel+0x280>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d10a      	bne.n	8003d9c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68d9      	ldr	r1, [r3, #12]
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	061a      	lsls	r2, r3, #24
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d9a:	e035      	b.n	8003e08 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68d9      	ldr	r1, [r3, #12]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	689a      	ldr	r2, [r3, #8]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	4618      	mov	r0, r3
 8003dae:	4603      	mov	r3, r0
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	4403      	add	r3, r0
 8003db4:	3b1e      	subs	r3, #30
 8003db6:	409a      	lsls	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003dc0:	e022      	b.n	8003e08 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6919      	ldr	r1, [r3, #16]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	461a      	mov	r2, r3
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	4413      	add	r3, r2
 8003dd6:	2207      	movs	r2, #7
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	43da      	mvns	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	400a      	ands	r2, r1
 8003de4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6919      	ldr	r1, [r3, #16]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	4618      	mov	r0, r3
 8003df8:	4603      	mov	r3, r0
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	4403      	add	r3, r0
 8003dfe:	409a      	lsls	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	2b06      	cmp	r3, #6
 8003e0e:	d824      	bhi.n	8003e5a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4413      	add	r3, r2
 8003e20:	3b05      	subs	r3, #5
 8003e22:	221f      	movs	r2, #31
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	43da      	mvns	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	400a      	ands	r2, r1
 8003e30:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	4618      	mov	r0, r3
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	4613      	mov	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4413      	add	r3, r2
 8003e4a:	3b05      	subs	r3, #5
 8003e4c:	fa00 f203 	lsl.w	r2, r0, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	635a      	str	r2, [r3, #52]	; 0x34
 8003e58:	e04c      	b.n	8003ef4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2b0c      	cmp	r3, #12
 8003e60:	d824      	bhi.n	8003eac <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	3b23      	subs	r3, #35	; 0x23
 8003e74:	221f      	movs	r2, #31
 8003e76:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7a:	43da      	mvns	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	400a      	ands	r2, r1
 8003e82:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	4618      	mov	r0, r3
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	4613      	mov	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	3b23      	subs	r3, #35	; 0x23
 8003e9e:	fa00 f203 	lsl.w	r2, r0, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	631a      	str	r2, [r3, #48]	; 0x30
 8003eaa:	e023      	b.n	8003ef4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4413      	add	r3, r2
 8003ebc:	3b41      	subs	r3, #65	; 0x41
 8003ebe:	221f      	movs	r2, #31
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	43da      	mvns	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	400a      	ands	r2, r1
 8003ecc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	4618      	mov	r0, r3
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	3b41      	subs	r3, #65	; 0x41
 8003ee8:	fa00 f203 	lsl.w	r2, r0, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a2a      	ldr	r2, [pc, #168]	; (8003fa4 <HAL_ADC_ConfigChannel+0x284>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d10a      	bne.n	8003f14 <HAL_ADC_ConfigChannel+0x1f4>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f06:	d105      	bne.n	8003f14 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003f08:	4b27      	ldr	r3, [pc, #156]	; (8003fa8 <HAL_ADC_ConfigChannel+0x288>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	4a26      	ldr	r2, [pc, #152]	; (8003fa8 <HAL_ADC_ConfigChannel+0x288>)
 8003f0e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003f12:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a22      	ldr	r2, [pc, #136]	; (8003fa4 <HAL_ADC_ConfigChannel+0x284>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d109      	bne.n	8003f32 <HAL_ADC_ConfigChannel+0x212>
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b12      	cmp	r3, #18
 8003f24:	d105      	bne.n	8003f32 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003f26:	4b20      	ldr	r3, [pc, #128]	; (8003fa8 <HAL_ADC_ConfigChannel+0x288>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	4a1f      	ldr	r2, [pc, #124]	; (8003fa8 <HAL_ADC_ConfigChannel+0x288>)
 8003f2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f30:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a1b      	ldr	r2, [pc, #108]	; (8003fa4 <HAL_ADC_ConfigChannel+0x284>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d125      	bne.n	8003f88 <HAL_ADC_ConfigChannel+0x268>
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a17      	ldr	r2, [pc, #92]	; (8003fa0 <HAL_ADC_ConfigChannel+0x280>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d003      	beq.n	8003f4e <HAL_ADC_ConfigChannel+0x22e>
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2b11      	cmp	r3, #17
 8003f4c:	d11c      	bne.n	8003f88 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003f4e:	4b16      	ldr	r3, [pc, #88]	; (8003fa8 <HAL_ADC_ConfigChannel+0x288>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	4a15      	ldr	r2, [pc, #84]	; (8003fa8 <HAL_ADC_ConfigChannel+0x288>)
 8003f54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f58:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a10      	ldr	r2, [pc, #64]	; (8003fa0 <HAL_ADC_ConfigChannel+0x280>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d111      	bne.n	8003f88 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003f64:	4b11      	ldr	r3, [pc, #68]	; (8003fac <HAL_ADC_ConfigChannel+0x28c>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a11      	ldr	r2, [pc, #68]	; (8003fb0 <HAL_ADC_ConfigChannel+0x290>)
 8003f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6e:	0c9a      	lsrs	r2, r3, #18
 8003f70:	4613      	mov	r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4413      	add	r3, r2
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003f7a:	e002      	b.n	8003f82 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1f9      	bne.n	8003f7c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	10000012 	.word	0x10000012
 8003fa4:	40012000 	.word	0x40012000
 8003fa8:	40012300 	.word	0x40012300
 8003fac:	20000014 	.word	0x20000014
 8003fb0:	431bde83 	.word	0x431bde83

08003fb4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003fbc:	4b78      	ldr	r3, [pc, #480]	; (80041a0 <ADC_Init+0x1ec>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	4a77      	ldr	r2, [pc, #476]	; (80041a0 <ADC_Init+0x1ec>)
 8003fc2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003fc6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003fc8:	4b75      	ldr	r3, [pc, #468]	; (80041a0 <ADC_Init+0x1ec>)
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	4973      	ldr	r1, [pc, #460]	; (80041a0 <ADC_Init+0x1ec>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fe4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6859      	ldr	r1, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	021a      	lsls	r2, r3, #8
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004008:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6859      	ldr	r1, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689a      	ldr	r2, [r3, #8]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	430a      	orrs	r2, r1
 800401a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689a      	ldr	r2, [r3, #8]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800402a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6899      	ldr	r1, [r3, #8]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004042:	4a58      	ldr	r2, [pc, #352]	; (80041a4 <ADC_Init+0x1f0>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d022      	beq.n	800408e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004056:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6899      	ldr	r1, [r3, #8]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004078:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6899      	ldr	r1, [r3, #8]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	609a      	str	r2, [r3, #8]
 800408c:	e00f      	b.n	80040ae <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800409c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80040ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 0202 	bic.w	r2, r2, #2
 80040bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6899      	ldr	r1, [r3, #8]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	005a      	lsls	r2, r3, #1
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d01b      	beq.n	8004114 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80040fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6859      	ldr	r1, [r3, #4]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004106:	3b01      	subs	r3, #1
 8004108:	035a      	lsls	r2, r3, #13
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	605a      	str	r2, [r3, #4]
 8004112:	e007      	b.n	8004124 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004122:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004132:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	3b01      	subs	r3, #1
 8004140:	051a      	lsls	r2, r3, #20
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	689a      	ldr	r2, [r3, #8]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004158:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6899      	ldr	r1, [r3, #8]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004166:	025a      	lsls	r2, r3, #9
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689a      	ldr	r2, [r3, #8]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800417e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6899      	ldr	r1, [r3, #8]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	029a      	lsls	r2, r3, #10
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	609a      	str	r2, [r3, #8]
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	40012300 	.word	0x40012300
 80041a4:	0f000001 	.word	0x0f000001

080041a8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e0ed      	b.n	8004396 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d102      	bne.n	80041cc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7fe fcaa 	bl	8002b20 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0202 	bic.w	r2, r2, #2
 80041da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041dc:	f7ff fd2c 	bl	8003c38 <HAL_GetTick>
 80041e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80041e2:	e012      	b.n	800420a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80041e4:	f7ff fd28 	bl	8003c38 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b0a      	cmp	r3, #10
 80041f0:	d90b      	bls.n	800420a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2205      	movs	r2, #5
 8004202:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e0c5      	b.n	8004396 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1e5      	bne.n	80041e4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0201 	orr.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004228:	f7ff fd06 	bl	8003c38 <HAL_GetTick>
 800422c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800422e:	e012      	b.n	8004256 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004230:	f7ff fd02 	bl	8003c38 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b0a      	cmp	r3, #10
 800423c:	d90b      	bls.n	8004256 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004242:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2205      	movs	r2, #5
 800424e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e09f      	b.n	8004396 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b00      	cmp	r3, #0
 8004262:	d0e5      	beq.n	8004230 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	7e1b      	ldrb	r3, [r3, #24]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d108      	bne.n	800427e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	e007      	b.n	800428e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800428c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	7e5b      	ldrb	r3, [r3, #25]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d108      	bne.n	80042a8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042a4:	601a      	str	r2, [r3, #0]
 80042a6:	e007      	b.n	80042b8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	7e9b      	ldrb	r3, [r3, #26]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d108      	bne.n	80042d2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f042 0220 	orr.w	r2, r2, #32
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	e007      	b.n	80042e2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 0220 	bic.w	r2, r2, #32
 80042e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	7edb      	ldrb	r3, [r3, #27]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d108      	bne.n	80042fc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 0210 	bic.w	r2, r2, #16
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	e007      	b.n	800430c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0210 	orr.w	r2, r2, #16
 800430a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	7f1b      	ldrb	r3, [r3, #28]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d108      	bne.n	8004326 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0208 	orr.w	r2, r2, #8
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	e007      	b.n	8004336 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0208 	bic.w	r2, r2, #8
 8004334:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	7f5b      	ldrb	r3, [r3, #29]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d108      	bne.n	8004350 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f042 0204 	orr.w	r2, r2, #4
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	e007      	b.n	8004360 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0204 	bic.w	r2, r2, #4
 800435e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	431a      	orrs	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	ea42 0103 	orr.w	r1, r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	1e5a      	subs	r2, r3, #1
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
	...

080043a0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b087      	sub	sp, #28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043b6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80043b8:	7cfb      	ldrb	r3, [r7, #19]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d003      	beq.n	80043c6 <HAL_CAN_ConfigFilter+0x26>
 80043be:	7cfb      	ldrb	r3, [r7, #19]
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	f040 80be 	bne.w	8004542 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80043c6:	4b65      	ldr	r3, [pc, #404]	; (800455c <HAL_CAN_ConfigFilter+0x1bc>)
 80043c8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80043d0:	f043 0201 	orr.w	r2, r3, #1
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80043e0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f4:	021b      	lsls	r3, r3, #8
 80043f6:	431a      	orrs	r2, r3
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	f003 031f 	and.w	r3, r3, #31
 8004406:	2201      	movs	r2, #1
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	43db      	mvns	r3, r3
 8004418:	401a      	ands	r2, r3
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d123      	bne.n	8004470 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	43db      	mvns	r3, r3
 8004432:	401a      	ands	r2, r3
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800444a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	3248      	adds	r2, #72	; 0x48
 8004450:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004464:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004466:	6979      	ldr	r1, [r7, #20]
 8004468:	3348      	adds	r3, #72	; 0x48
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	440b      	add	r3, r1
 800446e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	69db      	ldr	r3, [r3, #28]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d122      	bne.n	80044be <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	431a      	orrs	r2, r3
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004494:	683a      	ldr	r2, [r7, #0]
 8004496:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004498:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	3248      	adds	r2, #72	; 0x48
 800449e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80044b2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80044b4:	6979      	ldr	r1, [r7, #20]
 80044b6:	3348      	adds	r3, #72	; 0x48
 80044b8:	00db      	lsls	r3, r3, #3
 80044ba:	440b      	add	r3, r1
 80044bc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d109      	bne.n	80044da <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	43db      	mvns	r3, r3
 80044d0:	401a      	ands	r2, r3
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80044d8:	e007      	b.n	80044ea <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	431a      	orrs	r2, r3
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d109      	bne.n	8004506 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	43db      	mvns	r3, r3
 80044fc:	401a      	ands	r2, r3
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004504:	e007      	b.n	8004516 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	431a      	orrs	r2, r3
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d107      	bne.n	800452e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	431a      	orrs	r2, r3
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004534:	f023 0201 	bic.w	r2, r3, #1
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	e006      	b.n	8004550 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
  }
}
 8004550:	4618      	mov	r0, r3
 8004552:	371c      	adds	r7, #28
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	40006400 	.word	0x40006400

08004560 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b01      	cmp	r3, #1
 8004572:	d12e      	bne.n	80045d2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2202      	movs	r2, #2
 8004578:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 0201 	bic.w	r2, r2, #1
 800458a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800458c:	f7ff fb54 	bl	8003c38 <HAL_GetTick>
 8004590:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004592:	e012      	b.n	80045ba <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004594:	f7ff fb50 	bl	8003c38 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b0a      	cmp	r3, #10
 80045a0:	d90b      	bls.n	80045ba <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2205      	movs	r2, #5
 80045b2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e012      	b.n	80045e0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1e5      	bne.n	8004594 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80045ce:	2300      	movs	r3, #0
 80045d0:	e006      	b.n	80045e0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
  }
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80045e8:	b480      	push	{r7}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
 80045f4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045fc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80045fe:	7dfb      	ldrb	r3, [r7, #23]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d003      	beq.n	800460c <HAL_CAN_GetRxMessage+0x24>
 8004604:	7dfb      	ldrb	r3, [r7, #23]
 8004606:	2b02      	cmp	r3, #2
 8004608:	f040 80f3 	bne.w	80047f2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10e      	bne.n	8004630 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f003 0303 	and.w	r3, r3, #3
 800461c:	2b00      	cmp	r3, #0
 800461e:	d116      	bne.n	800464e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e0e7      	b.n	8004800 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	f003 0303 	and.w	r3, r3, #3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d107      	bne.n	800464e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e0d8      	b.n	8004800 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	331b      	adds	r3, #27
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	4413      	add	r3, r2
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0204 	and.w	r2, r3, #4
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10c      	bne.n	8004686 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	331b      	adds	r3, #27
 8004674:	011b      	lsls	r3, r3, #4
 8004676:	4413      	add	r3, r2
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	0d5b      	lsrs	r3, r3, #21
 800467c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	601a      	str	r2, [r3, #0]
 8004684:	e00b      	b.n	800469e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	331b      	adds	r3, #27
 800468e:	011b      	lsls	r3, r3, #4
 8004690:	4413      	add	r3, r2
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	08db      	lsrs	r3, r3, #3
 8004696:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	331b      	adds	r3, #27
 80046a6:	011b      	lsls	r3, r3, #4
 80046a8:	4413      	add	r3, r2
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0202 	and.w	r2, r3, #2
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	331b      	adds	r3, #27
 80046bc:	011b      	lsls	r3, r3, #4
 80046be:	4413      	add	r3, r2
 80046c0:	3304      	adds	r3, #4
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 020f 	and.w	r2, r3, #15
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	331b      	adds	r3, #27
 80046d4:	011b      	lsls	r3, r3, #4
 80046d6:	4413      	add	r3, r2
 80046d8:	3304      	adds	r3, #4
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	0a1b      	lsrs	r3, r3, #8
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	331b      	adds	r3, #27
 80046ec:	011b      	lsls	r3, r3, #4
 80046ee:	4413      	add	r3, r2
 80046f0:	3304      	adds	r3, #4
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	0c1b      	lsrs	r3, r3, #16
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	011b      	lsls	r3, r3, #4
 8004704:	4413      	add	r3, r2
 8004706:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	b2da      	uxtb	r2, r3
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	011b      	lsls	r3, r3, #4
 800471a:	4413      	add	r3, r2
 800471c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	0a1a      	lsrs	r2, r3, #8
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	3301      	adds	r3, #1
 8004728:	b2d2      	uxtb	r2, r2
 800472a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	011b      	lsls	r3, r3, #4
 8004734:	4413      	add	r3, r2
 8004736:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	0c1a      	lsrs	r2, r3, #16
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	3302      	adds	r3, #2
 8004742:	b2d2      	uxtb	r2, r2
 8004744:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	011b      	lsls	r3, r3, #4
 800474e:	4413      	add	r3, r2
 8004750:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	0e1a      	lsrs	r2, r3, #24
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	3303      	adds	r3, #3
 800475c:	b2d2      	uxtb	r2, r2
 800475e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	011b      	lsls	r3, r3, #4
 8004768:	4413      	add	r3, r2
 800476a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	3304      	adds	r3, #4
 8004774:	b2d2      	uxtb	r2, r2
 8004776:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	011b      	lsls	r3, r3, #4
 8004780:	4413      	add	r3, r2
 8004782:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	0a1a      	lsrs	r2, r3, #8
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	3305      	adds	r3, #5
 800478e:	b2d2      	uxtb	r2, r2
 8004790:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	011b      	lsls	r3, r3, #4
 800479a:	4413      	add	r3, r2
 800479c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	0c1a      	lsrs	r2, r3, #16
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	3306      	adds	r3, #6
 80047a8:	b2d2      	uxtb	r2, r2
 80047aa:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	011b      	lsls	r3, r3, #4
 80047b4:	4413      	add	r3, r2
 80047b6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	0e1a      	lsrs	r2, r3, #24
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	3307      	adds	r3, #7
 80047c2:	b2d2      	uxtb	r2, r2
 80047c4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d108      	bne.n	80047de <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68da      	ldr	r2, [r3, #12]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0220 	orr.w	r2, r2, #32
 80047da:	60da      	str	r2, [r3, #12]
 80047dc:	e007      	b.n	80047ee <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	691a      	ldr	r2, [r3, #16]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f042 0220 	orr.w	r2, r2, #32
 80047ec:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80047ee:	2300      	movs	r3, #0
 80047f0:	e006      	b.n	8004800 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
  }
}
 8004800:	4618      	mov	r0, r3
 8004802:	371c      	adds	r7, #28
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 3020 	ldrb.w	r3, [r3, #32]
 800481c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800481e:	7bfb      	ldrb	r3, [r7, #15]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d002      	beq.n	800482a <HAL_CAN_ActivateNotification+0x1e>
 8004824:	7bfb      	ldrb	r3, [r7, #15]
 8004826:	2b02      	cmp	r3, #2
 8004828:	d109      	bne.n	800483e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6959      	ldr	r1, [r3, #20]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	e006      	b.n	800484c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
  }
}
 800484c:	4618      	mov	r0, r3
 800484e:	3714      	adds	r7, #20
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b08a      	sub	sp, #40	; 0x28
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004860:	2300      	movs	r3, #0
 8004862:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b00      	cmp	r3, #0
 800489c:	d07c      	beq.n	8004998 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	f003 0301 	and.w	r3, r3, #1
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d023      	beq.n	80048f0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2201      	movs	r2, #1
 80048ae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f983 	bl	8004bc6 <HAL_CAN_TxMailbox0CompleteCallback>
 80048c0:	e016      	b.n	80048f0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d004      	beq.n	80048d6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80048d2:	627b      	str	r3, [r7, #36]	; 0x24
 80048d4:	e00c      	b.n	80048f0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	f003 0308 	and.w	r3, r3, #8
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d004      	beq.n	80048ea <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80048e6:	627b      	str	r3, [r7, #36]	; 0x24
 80048e8:	e002      	b.n	80048f0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f989 	bl	8004c02 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d024      	beq.n	8004944 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004902:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f963 	bl	8004bda <HAL_CAN_TxMailbox1CompleteCallback>
 8004914:	e016      	b.n	8004944 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800491c:	2b00      	cmp	r3, #0
 800491e:	d004      	beq.n	800492a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004926:	627b      	str	r3, [r7, #36]	; 0x24
 8004928:	e00c      	b.n	8004944 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004930:	2b00      	cmp	r3, #0
 8004932:	d004      	beq.n	800493e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800493a:	627b      	str	r3, [r7, #36]	; 0x24
 800493c:	e002      	b.n	8004944 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f969 	bl	8004c16 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d024      	beq.n	8004998 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004956:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f943 	bl	8004bee <HAL_CAN_TxMailbox2CompleteCallback>
 8004968:	e016      	b.n	8004998 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d004      	beq.n	800497e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800497a:	627b      	str	r3, [r7, #36]	; 0x24
 800497c:	e00c      	b.n	8004998 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d004      	beq.n	8004992 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800498e:	627b      	str	r3, [r7, #36]	; 0x24
 8004990:	e002      	b.n	8004998 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f949 	bl	8004c2a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004998:	6a3b      	ldr	r3, [r7, #32]
 800499a:	f003 0308 	and.w	r3, r3, #8
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00c      	beq.n	80049bc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	f003 0310 	and.w	r3, r3, #16
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d007      	beq.n	80049bc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80049ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2210      	movs	r2, #16
 80049ba:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80049bc:	6a3b      	ldr	r3, [r7, #32]
 80049be:	f003 0304 	and.w	r3, r3, #4
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00b      	beq.n	80049de <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f003 0308 	and.w	r3, r3, #8
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d006      	beq.n	80049de <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2208      	movs	r2, #8
 80049d6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f930 	bl	8004c3e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d009      	beq.n	80049fc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f003 0303 	and.w	r3, r3, #3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d002      	beq.n	80049fc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7fc fd7e 	bl	80014f8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00c      	beq.n	8004a20 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	f003 0310 	and.w	r3, r3, #16
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d007      	beq.n	8004a20 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a16:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2210      	movs	r2, #16
 8004a1e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004a20:	6a3b      	ldr	r3, [r7, #32]
 8004a22:	f003 0320 	and.w	r3, r3, #32
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00b      	beq.n	8004a42 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	f003 0308 	and.w	r3, r3, #8
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d006      	beq.n	8004a42 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2208      	movs	r2, #8
 8004a3a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f912 	bl	8004c66 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004a42:	6a3b      	ldr	r3, [r7, #32]
 8004a44:	f003 0310 	and.w	r3, r3, #16
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d009      	beq.n	8004a60 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	f003 0303 	and.w	r3, r3, #3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d002      	beq.n	8004a60 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f8f9 	bl	8004c52 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004a60:	6a3b      	ldr	r3, [r7, #32]
 8004a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00b      	beq.n	8004a82 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	f003 0310 	and.w	r3, r3, #16
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d006      	beq.n	8004a82 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2210      	movs	r2, #16
 8004a7a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f8fc 	bl	8004c7a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004a82:	6a3b      	ldr	r3, [r7, #32]
 8004a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00b      	beq.n	8004aa4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	f003 0308 	and.w	r3, r3, #8
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d006      	beq.n	8004aa4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2208      	movs	r2, #8
 8004a9c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f8f5 	bl	8004c8e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004aa4:	6a3b      	ldr	r3, [r7, #32]
 8004aa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d07b      	beq.n	8004ba6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	f003 0304 	and.w	r3, r3, #4
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d072      	beq.n	8004b9e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004ab8:	6a3b      	ldr	r3, [r7, #32]
 8004aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d008      	beq.n	8004ad4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d003      	beq.n	8004ad4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ace:	f043 0301 	orr.w	r3, r3, #1
 8004ad2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d008      	beq.n	8004af0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d003      	beq.n	8004af0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aea:	f043 0302 	orr.w	r3, r3, #2
 8004aee:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004af0:	6a3b      	ldr	r3, [r7, #32]
 8004af2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d008      	beq.n	8004b0c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d003      	beq.n	8004b0c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	f043 0304 	orr.w	r3, r3, #4
 8004b0a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004b0c:	6a3b      	ldr	r3, [r7, #32]
 8004b0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d043      	beq.n	8004b9e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d03e      	beq.n	8004b9e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b26:	2b60      	cmp	r3, #96	; 0x60
 8004b28:	d02b      	beq.n	8004b82 <HAL_CAN_IRQHandler+0x32a>
 8004b2a:	2b60      	cmp	r3, #96	; 0x60
 8004b2c:	d82e      	bhi.n	8004b8c <HAL_CAN_IRQHandler+0x334>
 8004b2e:	2b50      	cmp	r3, #80	; 0x50
 8004b30:	d022      	beq.n	8004b78 <HAL_CAN_IRQHandler+0x320>
 8004b32:	2b50      	cmp	r3, #80	; 0x50
 8004b34:	d82a      	bhi.n	8004b8c <HAL_CAN_IRQHandler+0x334>
 8004b36:	2b40      	cmp	r3, #64	; 0x40
 8004b38:	d019      	beq.n	8004b6e <HAL_CAN_IRQHandler+0x316>
 8004b3a:	2b40      	cmp	r3, #64	; 0x40
 8004b3c:	d826      	bhi.n	8004b8c <HAL_CAN_IRQHandler+0x334>
 8004b3e:	2b30      	cmp	r3, #48	; 0x30
 8004b40:	d010      	beq.n	8004b64 <HAL_CAN_IRQHandler+0x30c>
 8004b42:	2b30      	cmp	r3, #48	; 0x30
 8004b44:	d822      	bhi.n	8004b8c <HAL_CAN_IRQHandler+0x334>
 8004b46:	2b10      	cmp	r3, #16
 8004b48:	d002      	beq.n	8004b50 <HAL_CAN_IRQHandler+0x2f8>
 8004b4a:	2b20      	cmp	r3, #32
 8004b4c:	d005      	beq.n	8004b5a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004b4e:	e01d      	b.n	8004b8c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	f043 0308 	orr.w	r3, r3, #8
 8004b56:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004b58:	e019      	b.n	8004b8e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	f043 0310 	orr.w	r3, r3, #16
 8004b60:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004b62:	e014      	b.n	8004b8e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	f043 0320 	orr.w	r3, r3, #32
 8004b6a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004b6c:	e00f      	b.n	8004b8e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b74:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004b76:	e00a      	b.n	8004b8e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b7e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004b80:	e005      	b.n	8004b8e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b88:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004b8a:	e000      	b.n	8004b8e <HAL_CAN_IRQHandler+0x336>
            break;
 8004b8c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	699a      	ldr	r2, [r3, #24]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004b9c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2204      	movs	r2, #4
 8004ba4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d008      	beq.n	8004bbe <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 f872 	bl	8004ca2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004bbe:	bf00      	nop
 8004bc0:	3728      	adds	r7, #40	; 0x28
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b083      	sub	sp, #12
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004bce:	bf00      	nop
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b083      	sub	sp, #12
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004be2:	bf00      	nop
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr

08004bee <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b083      	sub	sp, #12
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b083      	sub	sp, #12
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004c46:	bf00      	nop
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b083      	sub	sp, #12
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004c5a:	bf00      	nop
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004c66:	b480      	push	{r7}
 8004c68:	b083      	sub	sp, #12
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004c6e:	bf00      	nop
 8004c70:	370c      	adds	r7, #12
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr

08004c7a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b083      	sub	sp, #12
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004c82:	bf00      	nop
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b083      	sub	sp, #12
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b083      	sub	sp, #12
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004caa:	bf00      	nop
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
	...

08004cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f003 0307 	and.w	r3, r3, #7
 8004cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004cc8:	4b0b      	ldr	r3, [pc, #44]	; (8004cf8 <__NVIC_SetPriorityGrouping+0x40>)
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004ce0:	4b06      	ldr	r3, [pc, #24]	; (8004cfc <__NVIC_SetPriorityGrouping+0x44>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ce6:	4a04      	ldr	r2, [pc, #16]	; (8004cf8 <__NVIC_SetPriorityGrouping+0x40>)
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	60d3      	str	r3, [r2, #12]
}
 8004cec:	bf00      	nop
 8004cee:	3714      	adds	r7, #20
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr
 8004cf8:	e000ed00 	.word	0xe000ed00
 8004cfc:	05fa0000 	.word	0x05fa0000

08004d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d04:	4b04      	ldr	r3, [pc, #16]	; (8004d18 <__NVIC_GetPriorityGrouping+0x18>)
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	0a1b      	lsrs	r3, r3, #8
 8004d0a:	f003 0307 	and.w	r3, r3, #7
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr
 8004d18:	e000ed00 	.word	0xe000ed00

08004d1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	4603      	mov	r3, r0
 8004d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	db0b      	blt.n	8004d46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d2e:	79fb      	ldrb	r3, [r7, #7]
 8004d30:	f003 021f 	and.w	r2, r3, #31
 8004d34:	4907      	ldr	r1, [pc, #28]	; (8004d54 <__NVIC_EnableIRQ+0x38>)
 8004d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d3a:	095b      	lsrs	r3, r3, #5
 8004d3c:	2001      	movs	r0, #1
 8004d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8004d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004d46:	bf00      	nop
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	e000e100 	.word	0xe000e100

08004d58 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	4603      	mov	r3, r0
 8004d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	db12      	blt.n	8004d90 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d6a:	79fb      	ldrb	r3, [r7, #7]
 8004d6c:	f003 021f 	and.w	r2, r3, #31
 8004d70:	490a      	ldr	r1, [pc, #40]	; (8004d9c <__NVIC_DisableIRQ+0x44>)
 8004d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d76:	095b      	lsrs	r3, r3, #5
 8004d78:	2001      	movs	r0, #1
 8004d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8004d7e:	3320      	adds	r3, #32
 8004d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004d84:	f3bf 8f4f 	dsb	sy
}
 8004d88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004d8a:	f3bf 8f6f 	isb	sy
}
 8004d8e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	e000e100 	.word	0xe000e100

08004da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	4603      	mov	r3, r0
 8004da8:	6039      	str	r1, [r7, #0]
 8004daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	db0a      	blt.n	8004dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	490c      	ldr	r1, [pc, #48]	; (8004dec <__NVIC_SetPriority+0x4c>)
 8004dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dbe:	0112      	lsls	r2, r2, #4
 8004dc0:	b2d2      	uxtb	r2, r2
 8004dc2:	440b      	add	r3, r1
 8004dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004dc8:	e00a      	b.n	8004de0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	b2da      	uxtb	r2, r3
 8004dce:	4908      	ldr	r1, [pc, #32]	; (8004df0 <__NVIC_SetPriority+0x50>)
 8004dd0:	79fb      	ldrb	r3, [r7, #7]
 8004dd2:	f003 030f 	and.w	r3, r3, #15
 8004dd6:	3b04      	subs	r3, #4
 8004dd8:	0112      	lsls	r2, r2, #4
 8004dda:	b2d2      	uxtb	r2, r2
 8004ddc:	440b      	add	r3, r1
 8004dde:	761a      	strb	r2, [r3, #24]
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	e000e100 	.word	0xe000e100
 8004df0:	e000ed00 	.word	0xe000ed00

08004df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b089      	sub	sp, #36	; 0x24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f003 0307 	and.w	r3, r3, #7
 8004e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	f1c3 0307 	rsb	r3, r3, #7
 8004e0e:	2b04      	cmp	r3, #4
 8004e10:	bf28      	it	cs
 8004e12:	2304      	movcs	r3, #4
 8004e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	3304      	adds	r3, #4
 8004e1a:	2b06      	cmp	r3, #6
 8004e1c:	d902      	bls.n	8004e24 <NVIC_EncodePriority+0x30>
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	3b03      	subs	r3, #3
 8004e22:	e000      	b.n	8004e26 <NVIC_EncodePriority+0x32>
 8004e24:	2300      	movs	r3, #0
 8004e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e28:	f04f 32ff 	mov.w	r2, #4294967295
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e32:	43da      	mvns	r2, r3
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	401a      	ands	r2, r3
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	fa01 f303 	lsl.w	r3, r1, r3
 8004e46:	43d9      	mvns	r1, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e4c:	4313      	orrs	r3, r2
         );
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3724      	adds	r7, #36	; 0x24
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b082      	sub	sp, #8
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7ff ff28 	bl	8004cb8 <__NVIC_SetPriorityGrouping>
}
 8004e68:	bf00      	nop
 8004e6a:	3708      	adds	r7, #8
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	4603      	mov	r3, r0
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
 8004e7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e82:	f7ff ff3d 	bl	8004d00 <__NVIC_GetPriorityGrouping>
 8004e86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	68b9      	ldr	r1, [r7, #8]
 8004e8c:	6978      	ldr	r0, [r7, #20]
 8004e8e:	f7ff ffb1 	bl	8004df4 <NVIC_EncodePriority>
 8004e92:	4602      	mov	r2, r0
 8004e94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e98:	4611      	mov	r1, r2
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7ff ff80 	bl	8004da0 <__NVIC_SetPriority>
}
 8004ea0:	bf00      	nop
 8004ea2:	3718      	adds	r7, #24
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	4603      	mov	r3, r0
 8004eb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7ff ff30 	bl	8004d1c <__NVIC_EnableIRQ>
}
 8004ebc:	bf00      	nop
 8004ebe:	3708      	adds	r7, #8
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	4603      	mov	r3, r0
 8004ecc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7ff ff40 	bl	8004d58 <__NVIC_DisableIRQ>
}
 8004ed8:	bf00      	nop
 8004eda:	3708      	adds	r7, #8
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e054      	b.n	8004f9c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	7f5b      	ldrb	r3, [r3, #29]
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d105      	bne.n	8004f08 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7fd fe58 	bl	8002bb8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	791b      	ldrb	r3, [r3, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10c      	bne.n	8004f30 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a22      	ldr	r2, [pc, #136]	; (8004fa4 <HAL_CRC_Init+0xc4>)
 8004f1c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	689a      	ldr	r2, [r3, #8]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 0218 	bic.w	r2, r2, #24
 8004f2c:	609a      	str	r2, [r3, #8]
 8004f2e:	e00c      	b.n	8004f4a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6899      	ldr	r1, [r3, #8]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	461a      	mov	r2, r3
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f834 	bl	8004fa8 <HAL_CRCEx_Polynomial_Set>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d001      	beq.n	8004f4a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e028      	b.n	8004f9c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	795b      	ldrb	r3, [r3, #5]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d105      	bne.n	8004f5e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f04f 32ff 	mov.w	r2, #4294967295
 8004f5a:	611a      	str	r2, [r3, #16]
 8004f5c:	e004      	b.n	8004f68 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	6912      	ldr	r2, [r2, #16]
 8004f66:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	695a      	ldr	r2, [r3, #20]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	699a      	ldr	r2, [r3, #24]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	430a      	orrs	r2, r1
 8004f92:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3708      	adds	r7, #8
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	04c11db7 	.word	0x04c11db7

08004fa8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004fb8:	231f      	movs	r3, #31
 8004fba:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004fbc:	bf00      	nop
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	1e5a      	subs	r2, r3, #1
 8004fc2:	613a      	str	r2, [r7, #16]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d009      	beq.n	8004fdc <HAL_CRCEx_Polynomial_Set+0x34>
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	f003 031f 	and.w	r3, r3, #31
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d0f0      	beq.n	8004fbe <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b18      	cmp	r3, #24
 8004fe0:	d846      	bhi.n	8005070 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004fe2:	a201      	add	r2, pc, #4	; (adr r2, 8004fe8 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe8:	08005077 	.word	0x08005077
 8004fec:	08005071 	.word	0x08005071
 8004ff0:	08005071 	.word	0x08005071
 8004ff4:	08005071 	.word	0x08005071
 8004ff8:	08005071 	.word	0x08005071
 8004ffc:	08005071 	.word	0x08005071
 8005000:	08005071 	.word	0x08005071
 8005004:	08005071 	.word	0x08005071
 8005008:	08005065 	.word	0x08005065
 800500c:	08005071 	.word	0x08005071
 8005010:	08005071 	.word	0x08005071
 8005014:	08005071 	.word	0x08005071
 8005018:	08005071 	.word	0x08005071
 800501c:	08005071 	.word	0x08005071
 8005020:	08005071 	.word	0x08005071
 8005024:	08005071 	.word	0x08005071
 8005028:	08005059 	.word	0x08005059
 800502c:	08005071 	.word	0x08005071
 8005030:	08005071 	.word	0x08005071
 8005034:	08005071 	.word	0x08005071
 8005038:	08005071 	.word	0x08005071
 800503c:	08005071 	.word	0x08005071
 8005040:	08005071 	.word	0x08005071
 8005044:	08005071 	.word	0x08005071
 8005048:	0800504d 	.word	0x0800504d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	2b06      	cmp	r3, #6
 8005050:	d913      	bls.n	800507a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005056:	e010      	b.n	800507a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	2b07      	cmp	r3, #7
 800505c:	d90f      	bls.n	800507e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005062:	e00c      	b.n	800507e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	2b0f      	cmp	r3, #15
 8005068:	d90b      	bls.n	8005082 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800506e:	e008      	b.n	8005082 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	75fb      	strb	r3, [r7, #23]
      break;
 8005074:	e006      	b.n	8005084 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005076:	bf00      	nop
 8005078:	e004      	b.n	8005084 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800507a:	bf00      	nop
 800507c:	e002      	b.n	8005084 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800507e:	bf00      	nop
 8005080:	e000      	b.n	8005084 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005082:	bf00      	nop
  }
  if (status == HAL_OK)
 8005084:	7dfb      	ldrb	r3, [r7, #23]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10d      	bne.n	80050a6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68ba      	ldr	r2, [r7, #8]
 8005090:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f023 0118 	bic.w	r1, r3, #24
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	430a      	orrs	r2, r1
 80050a4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80050a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	371c      	adds	r7, #28
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e069      	b.n	800519a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d102      	bne.n	80050d8 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f7fd fd90 	bl	8002bf8 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2202      	movs	r2, #2
 80050dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d002      	beq.n	80050ee <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	6819      	ldr	r1, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	4b2a      	ldr	r3, [pc, #168]	; (80051a4 <HAL_DCMI_Init+0xf0>)
 80050fa:	400b      	ands	r3, r1
 80050fc:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6819      	ldr	r1, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	695b      	ldr	r3, [r3, #20]
 800510c:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005112:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800511e:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800512a:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005136:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513c:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005142:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	430a      	orrs	r2, r1
 800514a:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	2b10      	cmp	r3, #16
 8005152:	d112      	bne.n	800517a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	7f1b      	ldrb	r3, [r3, #28]
 8005158:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	7f5b      	ldrb	r3, [r3, #29]
 800515e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005160:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	7f9b      	ldrb	r3, [r3, #30]
 8005166:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8005168:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	7fdb      	ldrb	r3, [r3, #31]
 8005170:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8005176:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005178:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68da      	ldr	r2, [r3, #12]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f042 021e 	orr.w	r2, r2, #30
 8005188:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3708      	adds	r7, #8
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	ffe0f007 	.word	0xffe0f007

080051a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
 80051b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051b6:	2300      	movs	r3, #0
 80051b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d101      	bne.n	80051ce <HAL_DMA_Start_IT+0x26>
 80051ca:	2302      	movs	r3, #2
 80051cc:	e048      	b.n	8005260 <HAL_DMA_Start_IT+0xb8>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d137      	bne.n	8005252 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2202      	movs	r2, #2
 80051e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	68b9      	ldr	r1, [r7, #8]
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 f842 	bl	8005280 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005200:	223f      	movs	r2, #63	; 0x3f
 8005202:	409a      	lsls	r2, r3
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f042 0216 	orr.w	r2, r2, #22
 8005216:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	695a      	ldr	r2, [r3, #20]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005226:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522c:	2b00      	cmp	r3, #0
 800522e:	d007      	beq.n	8005240 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f042 0208 	orr.w	r2, r2, #8
 800523e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f042 0201 	orr.w	r2, r2, #1
 800524e:	601a      	str	r2, [r3, #0]
 8005250:	e005      	b.n	800525e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800525a:	2302      	movs	r3, #2
 800525c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800525e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005260:	4618      	mov	r0, r3
 8005262:	3718      	adds	r7, #24
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005274:	4618      	mov	r0, r3
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
 800528c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800529c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	683a      	ldr	r2, [r7, #0]
 80052a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	2b40      	cmp	r3, #64	; 0x40
 80052ac:	d108      	bne.n	80052c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80052be:	e007      	b.n	80052d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68ba      	ldr	r2, [r7, #8]
 80052c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	60da      	str	r2, [r3, #12]
}
 80052d0:	bf00      	nop
 80052d2:	3714      	adds	r7, #20
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e039      	b.n	8005362 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d106      	bne.n	8005308 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7fd fd36 	bl	8002d74 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685a      	ldr	r2, [r3, #4]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532c:	f023 0107 	bic.w	r1, r3, #7
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689a      	ldr	r2, [r3, #8]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	430a      	orrs	r2, r1
 800533a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005342:	4b0a      	ldr	r3, [pc, #40]	; (800536c <HAL_DMA2D_Init+0x90>)
 8005344:	4013      	ands	r3, r2
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	68d1      	ldr	r1, [r2, #12]
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	6812      	ldr	r2, [r2, #0]
 800534e:	430b      	orrs	r3, r1
 8005350:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	ffffc000 	.word	0xffffc000

08005370 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e05f      	b.n	8005442 <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 8005382:	4b32      	ldr	r3, [pc, #200]	; (800544c <HAL_DMA2D_DeInit+0xdc>)
 8005384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005386:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d02e      	beq.n	80053ec <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	2b01      	cmp	r3, #1
 800539a:	d107      	bne.n	80053ac <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 f8c1 	bl	8005524 <HAL_DMA2D_Abort>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d021      	beq.n	80053ec <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e04a      	b.n	8005442 <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b2:	f003 0320 	and.w	r3, r3, #32
 80053b6:	2b20      	cmp	r3, #32
 80053b8:	d108      	bne.n	80053cc <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 80053ba:	2100      	movs	r1, #0
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f8f7 	bl	80055b0 <HAL_DMA2D_CLUTLoading_Abort>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d011      	beq.n	80053ec <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e03a      	b.n	8005442 <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	f003 0320 	and.w	r3, r3, #32
 80053d6:	2b20      	cmp	r3, #32
 80053d8:	d108      	bne.n	80053ec <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 80053da:	2101      	movs	r1, #1
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 f8e7 	bl	80055b0 <HAL_DMA2D_CLUTLoading_Abort>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d001      	beq.n	80053ec <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e02a      	b.n	8005442 <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2200      	movs	r2, #0
 80053f2:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	223f      	movs	r2, #63	; 0x3f
 80053fa:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2200      	movs	r2, #0
 8005402:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2200      	movs	r2, #0
 800540a:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2200      	movs	r2, #0
 8005412:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2200      	movs	r2, #0
 800541a:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2200      	movs	r2, #0
 8005422:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f7fd fccb 	bl	8002dc0 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3708      	adds	r7, #8
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	40023800 	.word	0x40023800

08005450 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af02      	add	r7, sp, #8
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
 800545c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005464:	2b01      	cmp	r3, #1
 8005466:	d101      	bne.n	800546c <HAL_DMA2D_Start_IT+0x1c>
 8005468:	2302      	movs	r3, #2
 800546a:	e020      	b.n	80054ae <HAL_DMA2D_Start_IT+0x5e>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2202      	movs	r2, #2
 8005478:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	9300      	str	r3, [sp, #0]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	68b9      	ldr	r1, [r7, #8]
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f000 fa84 	bl	8005994 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 800549a:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f042 0201 	orr.w	r2, r2, #1
 80054aa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b086      	sub	sp, #24
 80054ba:	af02      	add	r7, sp, #8
 80054bc:	60f8      	str	r0, [r7, #12]
 80054be:	60b9      	str	r1, [r7, #8]
 80054c0:	607a      	str	r2, [r7, #4]
 80054c2:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d101      	bne.n	80054d2 <HAL_DMA2D_BlendingStart_IT+0x1c>
 80054ce:	2302      	movs	r3, #2
 80054d0:	e024      	b.n	800551c <HAL_DMA2D_BlendingStart_IT+0x66>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2202      	movs	r2, #2
 80054de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	683a      	ldr	r2, [r7, #0]
 80054f2:	68b9      	ldr	r1, [r7, #8]
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f000 fa4d 	bl	8005994 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8005508:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f042 0201 	orr.w	r2, r2, #1
 8005518:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f023 0205 	bic.w	r2, r3, #5
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f042 0204 	orr.w	r2, r2, #4
 800553e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005540:	f7fe fb7a 	bl	8003c38 <HAL_GetTick>
 8005544:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005546:	e017      	b.n	8005578 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8005548:	f7fe fb76 	bl	8003c38 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005556:	d90f      	bls.n	8005578 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800555c:	f043 0220 	orr.w	r2, r3, #32
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2203      	movs	r2, #3
 8005568:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e017      	b.n	80055a8 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1e0      	bne.n	8005548 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 8005594:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	3324      	adds	r3, #36	; 0x24
 80055c0:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f042 0204 	orr.w	r2, r2, #4
 80055d0:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d103      	bne.n	80055e0 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	331c      	adds	r3, #28
 80055de:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 80055e0:	f7fe fb2a 	bl	8003c38 <HAL_GetTick>
 80055e4:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 80055e6:	e017      	b.n	8005618 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 80055e8:	f7fe fb26 	bl	8003c38 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055f6:	d90f      	bls.n	8005618 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055fc:	f043 0220 	orr.w	r2, r3, #32
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2203      	movs	r2, #3
 8005608:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e016      	b.n	8005646 <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0320 	and.w	r3, r3, #32
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1e1      	bne.n	80055e8 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 8005632:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3710      	adds	r7, #16
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b084      	sub	sp, #16
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f003 0301 	and.w	r3, r3, #1
 800566c:	2b00      	cmp	r3, #0
 800566e:	d026      	beq.n	80056be <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005676:	2b00      	cmp	r3, #0
 8005678:	d021      	beq.n	80056be <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005688:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800568e:	f043 0201 	orr.w	r2, r3, #1
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2201      	movs	r2, #1
 800569c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2204      	movs	r2, #4
 80056a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d003      	beq.n	80056be <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f003 0320 	and.w	r3, r3, #32
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d026      	beq.n	8005716 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d021      	beq.n	8005716 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056e0:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2220      	movs	r2, #32
 80056e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ee:	f043 0202 	orr.w	r2, r3, #2
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2204      	movs	r2, #4
 80056fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d003      	beq.n	8005716 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f003 0308 	and.w	r3, r3, #8
 800571c:	2b00      	cmp	r3, #0
 800571e:	d026      	beq.n	800576e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005726:	2b00      	cmp	r3, #0
 8005728:	d021      	beq.n	800576e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005738:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2208      	movs	r2, #8
 8005740:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005746:	f043 0204 	orr.w	r2, r3, #4
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2204      	movs	r2, #4
 8005752:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d003      	beq.n	800576e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f003 0304 	and.w	r3, r3, #4
 8005774:	2b00      	cmp	r3, #0
 8005776:	d013      	beq.n	80057a0 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00e      	beq.n	80057a0 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005790:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2204      	movs	r2, #4
 8005798:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f853 	bl	8005846 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d024      	beq.n	80057f4 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d01f      	beq.n	80057f4 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80057c2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2202      	movs	r2, #2
 80057ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d003      	beq.n	80057f4 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f003 0310 	and.w	r3, r3, #16
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d01f      	beq.n	800583e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d01a      	beq.n	800583e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005816:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2210      	movs	r2, #16
 800581e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 f80e 	bl	800585a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800583e:	bf00      	nop
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005846:	b480      	push	{r7}
 8005848:	b083      	sub	sp, #12
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800584e:	bf00      	nop
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800585a:	b480      	push	{r7}
 800585c:	b083      	sub	sp, #12
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005862:	bf00      	nop
 8005864:	370c      	adds	r7, #12
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
	...

08005870 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005870:	b480      	push	{r7}
 8005872:	b087      	sub	sp, #28
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005888:	2b01      	cmp	r3, #1
 800588a:	d101      	bne.n	8005890 <HAL_DMA2D_ConfigLayer+0x20>
 800588c:	2302      	movs	r3, #2
 800588e:	e079      	b.n	8005984 <HAL_DMA2D_ConfigLayer+0x114>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2202      	movs	r2, #2
 800589c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	011b      	lsls	r3, r3, #4
 80058a4:	3318      	adds	r3, #24
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	4413      	add	r3, r2
 80058aa:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	041b      	lsls	r3, r3, #16
 80058b6:	4313      	orrs	r3, r2
 80058b8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80058ba:	4b35      	ldr	r3, [pc, #212]	; (8005990 <HAL_DMA2D_ConfigLayer+0x120>)
 80058bc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	2b0a      	cmp	r3, #10
 80058c4:	d003      	beq.n	80058ce <HAL_DMA2D_ConfigLayer+0x5e>
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	2b09      	cmp	r3, #9
 80058cc:	d107      	bne.n	80058de <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	4313      	orrs	r3, r2
 80058da:	617b      	str	r3, [r7, #20]
 80058dc:	e005      	b.n	80058ea <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	061b      	lsls	r3, r3, #24
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d120      	bne.n	8005932 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	43db      	mvns	r3, r3
 80058fa:	ea02 0103 	and.w	r1, r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	430a      	orrs	r2, r1
 8005906:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	6812      	ldr	r2, [r2, #0]
 8005910:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	2b0a      	cmp	r3, #10
 8005918:	d003      	beq.n	8005922 <HAL_DMA2D_ConfigLayer+0xb2>
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	2b09      	cmp	r3, #9
 8005920:	d127      	bne.n	8005972 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	68da      	ldr	r2, [r3, #12]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800592e:	629a      	str	r2, [r3, #40]	; 0x28
 8005930:	e01f      	b.n	8005972 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	69da      	ldr	r2, [r3, #28]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	43db      	mvns	r3, r3
 800593c:	ea02 0103 	and.w	r1, r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	430a      	orrs	r2, r1
 8005948:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	6812      	ldr	r2, [r2, #0]
 8005952:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	2b0a      	cmp	r3, #10
 800595a:	d003      	beq.n	8005964 <HAL_DMA2D_ConfigLayer+0xf4>
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	2b09      	cmp	r3, #9
 8005962:	d106      	bne.n	8005972 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	68da      	ldr	r2, [r3, #12]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005970:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	371c      	adds	r7, #28
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	ff03000f 	.word	0xff03000f

08005994 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8005994:	b480      	push	{r7}
 8005996:	b08b      	sub	sp, #44	; 0x2c
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
 80059a0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	041a      	lsls	r2, r3, #16
 80059b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b2:	431a      	orrs	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	430a      	orrs	r2, r1
 80059ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80059cc:	d174      	bne.n	8005ab8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80059d4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80059dc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80059e4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d108      	bne.n	8005a06 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	431a      	orrs	r2, r3
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	627b      	str	r3, [r7, #36]	; 0x24
 8005a04:	e053      	b.n	8005aae <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d106      	bne.n	8005a1c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	627b      	str	r3, [r7, #36]	; 0x24
 8005a1a:	e048      	b.n	8005aae <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d111      	bne.n	8005a48 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	0cdb      	lsrs	r3, r3, #19
 8005a28:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	0a9b      	lsrs	r3, r3, #10
 8005a2e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	08db      	lsrs	r3, r3, #3
 8005a34:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	02db      	lsls	r3, r3, #11
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	627b      	str	r3, [r7, #36]	; 0x24
 8005a46:	e032      	b.n	8005aae <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	2b03      	cmp	r3, #3
 8005a4e:	d117      	bne.n	8005a80 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	0fdb      	lsrs	r3, r3, #31
 8005a54:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	0cdb      	lsrs	r3, r3, #19
 8005a5a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	0adb      	lsrs	r3, r3, #11
 8005a60:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	08db      	lsrs	r3, r3, #3
 8005a66:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	015a      	lsls	r2, r3, #5
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	029b      	lsls	r3, r3, #10
 8005a70:	431a      	orrs	r2, r3
 8005a72:	6a3b      	ldr	r3, [r7, #32]
 8005a74:	03db      	lsls	r3, r3, #15
 8005a76:	4313      	orrs	r3, r2
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a7e:	e016      	b.n	8005aae <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005a80:	6a3b      	ldr	r3, [r7, #32]
 8005a82:	0f1b      	lsrs	r3, r3, #28
 8005a84:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	0d1b      	lsrs	r3, r3, #20
 8005a8a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	0b1b      	lsrs	r3, r3, #12
 8005a90:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	091b      	lsrs	r3, r3, #4
 8005a96:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	011a      	lsls	r2, r3, #4
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	021b      	lsls	r3, r3, #8
 8005aa0:	431a      	orrs	r2, r3
 8005aa2:	6a3b      	ldr	r3, [r7, #32]
 8005aa4:	031b      	lsls	r3, r3, #12
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ab4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005ab6:	e003      	b.n	8005ac0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	60da      	str	r2, [r3, #12]
}
 8005ac0:	bf00      	nop
 8005ac2:	372c      	adds	r7, #44	; 0x2c
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b089      	sub	sp, #36	; 0x24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005ada:	2300      	movs	r3, #0
 8005adc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	61fb      	str	r3, [r7, #28]
 8005aea:	e175      	b.n	8005dd8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005aec:	2201      	movs	r2, #1
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	fa02 f303 	lsl.w	r3, r2, r3
 8005af4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	4013      	ands	r3, r2
 8005afe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	f040 8164 	bne.w	8005dd2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d00b      	beq.n	8005b2a <HAL_GPIO_Init+0x5e>
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d007      	beq.n	8005b2a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b1e:	2b11      	cmp	r3, #17
 8005b20:	d003      	beq.n	8005b2a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	2b12      	cmp	r3, #18
 8005b28:	d130      	bne.n	8005b8c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	005b      	lsls	r3, r3, #1
 8005b34:	2203      	movs	r2, #3
 8005b36:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3a:	43db      	mvns	r3, r3
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	4013      	ands	r3, r2
 8005b40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	68da      	ldr	r2, [r3, #12]
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	005b      	lsls	r3, r3, #1
 8005b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4e:	69ba      	ldr	r2, [r7, #24]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	69ba      	ldr	r2, [r7, #24]
 8005b58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b60:	2201      	movs	r2, #1
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	fa02 f303 	lsl.w	r3, r2, r3
 8005b68:	43db      	mvns	r3, r3
 8005b6a:	69ba      	ldr	r2, [r7, #24]
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	091b      	lsrs	r3, r3, #4
 8005b76:	f003 0201 	and.w	r2, r3, #1
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b80:	69ba      	ldr	r2, [r7, #24]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	69ba      	ldr	r2, [r7, #24]
 8005b8a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	005b      	lsls	r3, r3, #1
 8005b96:	2203      	movs	r2, #3
 8005b98:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9c:	43db      	mvns	r3, r3
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	689a      	ldr	r2, [r3, #8]
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	005b      	lsls	r3, r3, #1
 8005bac:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb0:	69ba      	ldr	r2, [r7, #24]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d003      	beq.n	8005bcc <HAL_GPIO_Init+0x100>
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	2b12      	cmp	r3, #18
 8005bca:	d123      	bne.n	8005c14 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	08da      	lsrs	r2, r3, #3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	3208      	adds	r2, #8
 8005bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	f003 0307 	and.w	r3, r3, #7
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	220f      	movs	r2, #15
 8005be4:	fa02 f303 	lsl.w	r3, r2, r3
 8005be8:	43db      	mvns	r3, r3
 8005bea:	69ba      	ldr	r2, [r7, #24]
 8005bec:	4013      	ands	r3, r2
 8005bee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	691a      	ldr	r2, [r3, #16]
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	f003 0307 	and.w	r3, r3, #7
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005c00:	69ba      	ldr	r2, [r7, #24]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	08da      	lsrs	r2, r3, #3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	3208      	adds	r2, #8
 8005c0e:	69b9      	ldr	r1, [r7, #24]
 8005c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	005b      	lsls	r3, r3, #1
 8005c1e:	2203      	movs	r2, #3
 8005c20:	fa02 f303 	lsl.w	r3, r2, r3
 8005c24:	43db      	mvns	r3, r3
 8005c26:	69ba      	ldr	r2, [r7, #24]
 8005c28:	4013      	ands	r3, r2
 8005c2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f003 0203 	and.w	r2, r3, #3
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	005b      	lsls	r3, r3, #1
 8005c38:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f000 80be 	beq.w	8005dd2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c56:	4b66      	ldr	r3, [pc, #408]	; (8005df0 <HAL_GPIO_Init+0x324>)
 8005c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c5a:	4a65      	ldr	r2, [pc, #404]	; (8005df0 <HAL_GPIO_Init+0x324>)
 8005c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c60:	6453      	str	r3, [r2, #68]	; 0x44
 8005c62:	4b63      	ldr	r3, [pc, #396]	; (8005df0 <HAL_GPIO_Init+0x324>)
 8005c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c6a:	60fb      	str	r3, [r7, #12]
 8005c6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005c6e:	4a61      	ldr	r2, [pc, #388]	; (8005df4 <HAL_GPIO_Init+0x328>)
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	089b      	lsrs	r3, r3, #2
 8005c74:	3302      	adds	r3, #2
 8005c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	f003 0303 	and.w	r3, r3, #3
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	220f      	movs	r2, #15
 8005c86:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8a:	43db      	mvns	r3, r3
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	4013      	ands	r3, r2
 8005c90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a58      	ldr	r2, [pc, #352]	; (8005df8 <HAL_GPIO_Init+0x32c>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d037      	beq.n	8005d0a <HAL_GPIO_Init+0x23e>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a57      	ldr	r2, [pc, #348]	; (8005dfc <HAL_GPIO_Init+0x330>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d031      	beq.n	8005d06 <HAL_GPIO_Init+0x23a>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a56      	ldr	r2, [pc, #344]	; (8005e00 <HAL_GPIO_Init+0x334>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d02b      	beq.n	8005d02 <HAL_GPIO_Init+0x236>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a55      	ldr	r2, [pc, #340]	; (8005e04 <HAL_GPIO_Init+0x338>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d025      	beq.n	8005cfe <HAL_GPIO_Init+0x232>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a54      	ldr	r2, [pc, #336]	; (8005e08 <HAL_GPIO_Init+0x33c>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d01f      	beq.n	8005cfa <HAL_GPIO_Init+0x22e>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a53      	ldr	r2, [pc, #332]	; (8005e0c <HAL_GPIO_Init+0x340>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d019      	beq.n	8005cf6 <HAL_GPIO_Init+0x22a>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a52      	ldr	r2, [pc, #328]	; (8005e10 <HAL_GPIO_Init+0x344>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d013      	beq.n	8005cf2 <HAL_GPIO_Init+0x226>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a51      	ldr	r2, [pc, #324]	; (8005e14 <HAL_GPIO_Init+0x348>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d00d      	beq.n	8005cee <HAL_GPIO_Init+0x222>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a50      	ldr	r2, [pc, #320]	; (8005e18 <HAL_GPIO_Init+0x34c>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d007      	beq.n	8005cea <HAL_GPIO_Init+0x21e>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a4f      	ldr	r2, [pc, #316]	; (8005e1c <HAL_GPIO_Init+0x350>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d101      	bne.n	8005ce6 <HAL_GPIO_Init+0x21a>
 8005ce2:	2309      	movs	r3, #9
 8005ce4:	e012      	b.n	8005d0c <HAL_GPIO_Init+0x240>
 8005ce6:	230a      	movs	r3, #10
 8005ce8:	e010      	b.n	8005d0c <HAL_GPIO_Init+0x240>
 8005cea:	2308      	movs	r3, #8
 8005cec:	e00e      	b.n	8005d0c <HAL_GPIO_Init+0x240>
 8005cee:	2307      	movs	r3, #7
 8005cf0:	e00c      	b.n	8005d0c <HAL_GPIO_Init+0x240>
 8005cf2:	2306      	movs	r3, #6
 8005cf4:	e00a      	b.n	8005d0c <HAL_GPIO_Init+0x240>
 8005cf6:	2305      	movs	r3, #5
 8005cf8:	e008      	b.n	8005d0c <HAL_GPIO_Init+0x240>
 8005cfa:	2304      	movs	r3, #4
 8005cfc:	e006      	b.n	8005d0c <HAL_GPIO_Init+0x240>
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e004      	b.n	8005d0c <HAL_GPIO_Init+0x240>
 8005d02:	2302      	movs	r3, #2
 8005d04:	e002      	b.n	8005d0c <HAL_GPIO_Init+0x240>
 8005d06:	2301      	movs	r3, #1
 8005d08:	e000      	b.n	8005d0c <HAL_GPIO_Init+0x240>
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	69fa      	ldr	r2, [r7, #28]
 8005d0e:	f002 0203 	and.w	r2, r2, #3
 8005d12:	0092      	lsls	r2, r2, #2
 8005d14:	4093      	lsls	r3, r2
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005d1c:	4935      	ldr	r1, [pc, #212]	; (8005df4 <HAL_GPIO_Init+0x328>)
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	089b      	lsrs	r3, r3, #2
 8005d22:	3302      	adds	r3, #2
 8005d24:	69ba      	ldr	r2, [r7, #24]
 8005d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005d2a:	4b3d      	ldr	r3, [pc, #244]	; (8005e20 <HAL_GPIO_Init+0x354>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	43db      	mvns	r3, r3
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	4013      	ands	r3, r2
 8005d38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d003      	beq.n	8005d4e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005d46:	69ba      	ldr	r2, [r7, #24]
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005d4e:	4a34      	ldr	r2, [pc, #208]	; (8005e20 <HAL_GPIO_Init+0x354>)
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005d54:	4b32      	ldr	r3, [pc, #200]	; (8005e20 <HAL_GPIO_Init+0x354>)
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	43db      	mvns	r3, r3
 8005d5e:	69ba      	ldr	r2, [r7, #24]
 8005d60:	4013      	ands	r3, r2
 8005d62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d003      	beq.n	8005d78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005d78:	4a29      	ldr	r2, [pc, #164]	; (8005e20 <HAL_GPIO_Init+0x354>)
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005d7e:	4b28      	ldr	r3, [pc, #160]	; (8005e20 <HAL_GPIO_Init+0x354>)
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	43db      	mvns	r3, r3
 8005d88:	69ba      	ldr	r2, [r7, #24]
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d003      	beq.n	8005da2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005da2:	4a1f      	ldr	r2, [pc, #124]	; (8005e20 <HAL_GPIO_Init+0x354>)
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005da8:	4b1d      	ldr	r3, [pc, #116]	; (8005e20 <HAL_GPIO_Init+0x354>)
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	43db      	mvns	r3, r3
 8005db2:	69ba      	ldr	r2, [r7, #24]
 8005db4:	4013      	ands	r3, r2
 8005db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d003      	beq.n	8005dcc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005dc4:	69ba      	ldr	r2, [r7, #24]
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005dcc:	4a14      	ldr	r2, [pc, #80]	; (8005e20 <HAL_GPIO_Init+0x354>)
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	61fb      	str	r3, [r7, #28]
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	2b0f      	cmp	r3, #15
 8005ddc:	f67f ae86 	bls.w	8005aec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005de0:	bf00      	nop
 8005de2:	bf00      	nop
 8005de4:	3724      	adds	r7, #36	; 0x24
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	40023800 	.word	0x40023800
 8005df4:	40013800 	.word	0x40013800
 8005df8:	40020000 	.word	0x40020000
 8005dfc:	40020400 	.word	0x40020400
 8005e00:	40020800 	.word	0x40020800
 8005e04:	40020c00 	.word	0x40020c00
 8005e08:	40021000 	.word	0x40021000
 8005e0c:	40021400 	.word	0x40021400
 8005e10:	40021800 	.word	0x40021800
 8005e14:	40021c00 	.word	0x40021c00
 8005e18:	40022000 	.word	0x40022000
 8005e1c:	40022400 	.word	0x40022400
 8005e20:	40013c00 	.word	0x40013c00

08005e24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	691a      	ldr	r2, [r3, #16]
 8005e34:	887b      	ldrh	r3, [r7, #2]
 8005e36:	4013      	ands	r3, r2
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d002      	beq.n	8005e42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	73fb      	strb	r3, [r7, #15]
 8005e40:	e001      	b.n	8005e46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005e42:	2300      	movs	r3, #0
 8005e44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3714      	adds	r7, #20
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	807b      	strh	r3, [r7, #2]
 8005e60:	4613      	mov	r3, r2
 8005e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005e64:	787b      	ldrb	r3, [r7, #1]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d003      	beq.n	8005e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e6a:	887a      	ldrh	r2, [r7, #2]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005e70:	e003      	b.n	8005e7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005e72:	887b      	ldrh	r3, [r7, #2]
 8005e74:	041a      	lsls	r2, r3, #16
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	619a      	str	r2, [r3, #24]
}
 8005e7a:	bf00      	nop
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
	...

08005e88 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e0bf      	b.n	800601a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d106      	bne.n	8005eb4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7fc ffa0 	bl	8002df4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	699a      	ldr	r2, [r3, #24]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005eca:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6999      	ldr	r1, [r3, #24]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005ee0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	430a      	orrs	r2, r1
 8005eee:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	6899      	ldr	r1, [r3, #8]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	4b4a      	ldr	r3, [pc, #296]	; (8006024 <HAL_LTDC_Init+0x19c>)
 8005efc:	400b      	ands	r3, r1
 8005efe:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	695b      	ldr	r3, [r3, #20]
 8005f04:	041b      	lsls	r3, r3, #16
 8005f06:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	6899      	ldr	r1, [r3, #8]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	699a      	ldr	r2, [r3, #24]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	431a      	orrs	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68d9      	ldr	r1, [r3, #12]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	4b3e      	ldr	r3, [pc, #248]	; (8006024 <HAL_LTDC_Init+0x19c>)
 8005f2a:	400b      	ands	r3, r1
 8005f2c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	69db      	ldr	r3, [r3, #28]
 8005f32:	041b      	lsls	r3, r3, #16
 8005f34:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68d9      	ldr	r1, [r3, #12]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a1a      	ldr	r2, [r3, #32]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	431a      	orrs	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	430a      	orrs	r2, r1
 8005f4a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6919      	ldr	r1, [r3, #16]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	4b33      	ldr	r3, [pc, #204]	; (8006024 <HAL_LTDC_Init+0x19c>)
 8005f58:	400b      	ands	r3, r1
 8005f5a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f60:	041b      	lsls	r3, r3, #16
 8005f62:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6919      	ldr	r1, [r3, #16]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	431a      	orrs	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	430a      	orrs	r2, r1
 8005f78:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	6959      	ldr	r1, [r3, #20]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	4b27      	ldr	r3, [pc, #156]	; (8006024 <HAL_LTDC_Init+0x19c>)
 8005f86:	400b      	ands	r3, r1
 8005f88:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8e:	041b      	lsls	r3, r3, #16
 8005f90:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	6959      	ldr	r1, [r3, #20]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	431a      	orrs	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fae:	021b      	lsls	r3, r3, #8
 8005fb0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005fb8:	041b      	lsls	r3, r3, #16
 8005fba:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005fca:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005fde:	431a      	orrs	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f042 0206 	orr.w	r2, r2, #6
 8005ff6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	699a      	ldr	r2, [r3, #24]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f042 0201 	orr.w	r2, r2, #1
 8006006:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	f000f800 	.word	0xf000f800

08006028 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006036:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800603e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f003 0304 	and.w	r3, r3, #4
 8006046:	2b00      	cmp	r3, #0
 8006048:	d023      	beq.n	8006092 <HAL_LTDC_IRQHandler+0x6a>
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	f003 0304 	and.w	r3, r3, #4
 8006050:	2b00      	cmp	r3, #0
 8006052:	d01e      	beq.n	8006092 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f022 0204 	bic.w	r2, r2, #4
 8006062:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2204      	movs	r2, #4
 800606a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006072:	f043 0201 	orr.w	r2, r3, #1
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2204      	movs	r2, #4
 8006080:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f86f 	bl	8006170 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f003 0302 	and.w	r3, r3, #2
 8006098:	2b00      	cmp	r3, #0
 800609a:	d023      	beq.n	80060e4 <HAL_LTDC_IRQHandler+0xbc>
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	f003 0302 	and.w	r3, r3, #2
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d01e      	beq.n	80060e4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 0202 	bic.w	r2, r2, #2
 80060b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2202      	movs	r2, #2
 80060bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80060c4:	f043 0202 	orr.w	r2, r3, #2
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2204      	movs	r2, #4
 80060d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f846 	bl	8006170 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d01b      	beq.n	8006126 <HAL_LTDC_IRQHandler+0xfe>
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	f003 0301 	and.w	r3, r3, #1
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d016      	beq.n	8006126 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 0201 	bic.w	r2, r2, #1
 8006106:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2201      	movs	r2, #1
 800610e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f010 f99f 	bl	8016464 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f003 0308 	and.w	r3, r3, #8
 800612c:	2b00      	cmp	r3, #0
 800612e:	d01b      	beq.n	8006168 <HAL_LTDC_IRQHandler+0x140>
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f003 0308 	and.w	r3, r3, #8
 8006136:	2b00      	cmp	r3, #0
 8006138:	d016      	beq.n	8006168 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f022 0208 	bic.w	r2, r2, #8
 8006148:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2208      	movs	r2, #8
 8006150:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f80e 	bl	8006184 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006168:	bf00      	nop
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006198:	b5b0      	push	{r4, r5, r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d101      	bne.n	80061b2 <HAL_LTDC_ConfigLayer+0x1a>
 80061ae:	2302      	movs	r3, #2
 80061b0:	e02c      	b.n	800620c <HAL_LTDC_ConfigLayer+0x74>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2202      	movs	r2, #2
 80061be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2134      	movs	r1, #52	; 0x34
 80061c8:	fb01 f303 	mul.w	r3, r1, r3
 80061cc:	4413      	add	r3, r2
 80061ce:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	4614      	mov	r4, r2
 80061d6:	461d      	mov	r5, r3
 80061d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061e4:	682b      	ldr	r3, [r5, #0]
 80061e6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	68b9      	ldr	r1, [r7, #8]
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f000 f849 	bl	8006284 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2201      	movs	r2, #1
 80061f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bdb0      	pop	{r4, r5, r7, pc}

08006214 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006224:	2b01      	cmp	r3, #1
 8006226:	d101      	bne.n	800622c <HAL_LTDC_ProgramLineEvent+0x18>
 8006228:	2302      	movs	r3, #2
 800622a:	e023      	b.n	8006274 <HAL_LTDC_ProgramLineEvent+0x60>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2202      	movs	r2, #2
 8006238:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f022 0201 	bic.w	r2, r2, #1
 800624a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800624c:	4a0c      	ldr	r2, [pc, #48]	; (8006280 <HAL_LTDC_ProgramLineEvent+0x6c>)
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f042 0201 	orr.w	r2, r2, #1
 8006260:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr
 8006280:	40016800 	.word	0x40016800

08006284 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006284:	b480      	push	{r7}
 8006286:	b089      	sub	sp, #36	; 0x24
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	0c1b      	lsrs	r3, r3, #16
 800629c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062a0:	4413      	add	r3, r2
 80062a2:	041b      	lsls	r3, r3, #16
 80062a4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	461a      	mov	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	01db      	lsls	r3, r3, #7
 80062b0:	4413      	add	r3, r2
 80062b2:	3384      	adds	r3, #132	; 0x84
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	6812      	ldr	r2, [r2, #0]
 80062ba:	4611      	mov	r1, r2
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	01d2      	lsls	r2, r2, #7
 80062c0:	440a      	add	r2, r1
 80062c2:	3284      	adds	r2, #132	; 0x84
 80062c4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80062c8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	0c1b      	lsrs	r3, r3, #16
 80062d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062da:	4413      	add	r3, r2
 80062dc:	1c5a      	adds	r2, r3, #1
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4619      	mov	r1, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	01db      	lsls	r3, r3, #7
 80062e8:	440b      	add	r3, r1
 80062ea:	3384      	adds	r3, #132	; 0x84
 80062ec:	4619      	mov	r1, r3
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	68da      	ldr	r2, [r3, #12]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006302:	4413      	add	r3, r2
 8006304:	041b      	lsls	r3, r3, #16
 8006306:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	461a      	mov	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	01db      	lsls	r3, r3, #7
 8006312:	4413      	add	r3, r2
 8006314:	3384      	adds	r3, #132	; 0x84
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	6812      	ldr	r2, [r2, #0]
 800631c:	4611      	mov	r1, r2
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	01d2      	lsls	r2, r2, #7
 8006322:	440a      	add	r2, r1
 8006324:	3284      	adds	r2, #132	; 0x84
 8006326:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800632a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	689a      	ldr	r2, [r3, #8]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800633a:	4413      	add	r3, r2
 800633c:	1c5a      	adds	r2, r3, #1
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4619      	mov	r1, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	01db      	lsls	r3, r3, #7
 8006348:	440b      	add	r3, r1
 800634a:	3384      	adds	r3, #132	; 0x84
 800634c:	4619      	mov	r1, r3
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	4313      	orrs	r3, r2
 8006352:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	461a      	mov	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	01db      	lsls	r3, r3, #7
 800635e:	4413      	add	r3, r2
 8006360:	3384      	adds	r3, #132	; 0x84
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	6812      	ldr	r2, [r2, #0]
 8006368:	4611      	mov	r1, r2
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	01d2      	lsls	r2, r2, #7
 800636e:	440a      	add	r2, r1
 8006370:	3284      	adds	r2, #132	; 0x84
 8006372:	f023 0307 	bic.w	r3, r3, #7
 8006376:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	461a      	mov	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	01db      	lsls	r3, r3, #7
 8006382:	4413      	add	r3, r2
 8006384:	3384      	adds	r3, #132	; 0x84
 8006386:	461a      	mov	r2, r3
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006394:	021b      	lsls	r3, r3, #8
 8006396:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800639e:	041b      	lsls	r3, r3, #16
 80063a0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	061b      	lsls	r3, r3, #24
 80063a8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	461a      	mov	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	01db      	lsls	r3, r3, #7
 80063b4:	4413      	add	r3, r2
 80063b6:	3384      	adds	r3, #132	; 0x84
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	461a      	mov	r2, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	01db      	lsls	r3, r3, #7
 80063c4:	4413      	add	r3, r2
 80063c6:	3384      	adds	r3, #132	; 0x84
 80063c8:	461a      	mov	r2, r3
 80063ca:	2300      	movs	r3, #0
 80063cc:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80063d4:	461a      	mov	r2, r3
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	431a      	orrs	r2, r3
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	431a      	orrs	r2, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4619      	mov	r1, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	01db      	lsls	r3, r3, #7
 80063e8:	440b      	add	r3, r1
 80063ea:	3384      	adds	r3, #132	; 0x84
 80063ec:	4619      	mov	r1, r3
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	461a      	mov	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	01db      	lsls	r3, r3, #7
 80063fe:	4413      	add	r3, r2
 8006400:	3384      	adds	r3, #132	; 0x84
 8006402:	695b      	ldr	r3, [r3, #20]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	6812      	ldr	r2, [r2, #0]
 8006408:	4611      	mov	r1, r2
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	01d2      	lsls	r2, r2, #7
 800640e:	440a      	add	r2, r1
 8006410:	3284      	adds	r2, #132	; 0x84
 8006412:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006416:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	461a      	mov	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	01db      	lsls	r3, r3, #7
 8006422:	4413      	add	r3, r2
 8006424:	3384      	adds	r3, #132	; 0x84
 8006426:	461a      	mov	r2, r3
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	695b      	ldr	r3, [r3, #20]
 800642c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	461a      	mov	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	01db      	lsls	r3, r3, #7
 8006438:	4413      	add	r3, r2
 800643a:	3384      	adds	r3, #132	; 0x84
 800643c:	69da      	ldr	r2, [r3, #28]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4619      	mov	r1, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	01db      	lsls	r3, r3, #7
 8006448:	440b      	add	r3, r1
 800644a:	3384      	adds	r3, #132	; 0x84
 800644c:	4619      	mov	r1, r3
 800644e:	4b58      	ldr	r3, [pc, #352]	; (80065b0 <LTDC_SetConfig+0x32c>)
 8006450:	4013      	ands	r3, r2
 8006452:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	69da      	ldr	r2, [r3, #28]
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	6a1b      	ldr	r3, [r3, #32]
 800645c:	68f9      	ldr	r1, [r7, #12]
 800645e:	6809      	ldr	r1, [r1, #0]
 8006460:	4608      	mov	r0, r1
 8006462:	6879      	ldr	r1, [r7, #4]
 8006464:	01c9      	lsls	r1, r1, #7
 8006466:	4401      	add	r1, r0
 8006468:	3184      	adds	r1, #132	; 0x84
 800646a:	4313      	orrs	r3, r2
 800646c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	461a      	mov	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	01db      	lsls	r3, r3, #7
 8006478:	4413      	add	r3, r2
 800647a:	3384      	adds	r3, #132	; 0x84
 800647c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	461a      	mov	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	01db      	lsls	r3, r3, #7
 8006488:	4413      	add	r3, r2
 800648a:	3384      	adds	r3, #132	; 0x84
 800648c:	461a      	mov	r2, r3
 800648e:	2300      	movs	r3, #0
 8006490:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	461a      	mov	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	01db      	lsls	r3, r3, #7
 800649c:	4413      	add	r3, r2
 800649e:	3384      	adds	r3, #132	; 0x84
 80064a0:	461a      	mov	r2, r3
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d102      	bne.n	80064b6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80064b0:	2304      	movs	r3, #4
 80064b2:	61fb      	str	r3, [r7, #28]
 80064b4:	e01b      	b.n	80064ee <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d102      	bne.n	80064c4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80064be:	2303      	movs	r3, #3
 80064c0:	61fb      	str	r3, [r7, #28]
 80064c2:	e014      	b.n	80064ee <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	2b04      	cmp	r3, #4
 80064ca:	d00b      	beq.n	80064e4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d007      	beq.n	80064e4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80064d8:	2b03      	cmp	r3, #3
 80064da:	d003      	beq.n	80064e4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80064e0:	2b07      	cmp	r3, #7
 80064e2:	d102      	bne.n	80064ea <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80064e4:	2302      	movs	r3, #2
 80064e6:	61fb      	str	r3, [r7, #28]
 80064e8:	e001      	b.n	80064ee <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80064ea:	2301      	movs	r3, #1
 80064ec:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	461a      	mov	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	01db      	lsls	r3, r3, #7
 80064f8:	4413      	add	r3, r2
 80064fa:	3384      	adds	r3, #132	; 0x84
 80064fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	6812      	ldr	r2, [r2, #0]
 8006502:	4611      	mov	r1, r2
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	01d2      	lsls	r2, r2, #7
 8006508:	440a      	add	r2, r1
 800650a:	3284      	adds	r2, #132	; 0x84
 800650c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006510:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006516:	69fa      	ldr	r2, [r7, #28]
 8006518:	fb02 f303 	mul.w	r3, r2, r3
 800651c:	041a      	lsls	r2, r3, #16
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	6859      	ldr	r1, [r3, #4]
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	1acb      	subs	r3, r1, r3
 8006528:	69f9      	ldr	r1, [r7, #28]
 800652a:	fb01 f303 	mul.w	r3, r1, r3
 800652e:	3303      	adds	r3, #3
 8006530:	68f9      	ldr	r1, [r7, #12]
 8006532:	6809      	ldr	r1, [r1, #0]
 8006534:	4608      	mov	r0, r1
 8006536:	6879      	ldr	r1, [r7, #4]
 8006538:	01c9      	lsls	r1, r1, #7
 800653a:	4401      	add	r1, r0
 800653c:	3184      	adds	r1, #132	; 0x84
 800653e:	4313      	orrs	r3, r2
 8006540:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	461a      	mov	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	01db      	lsls	r3, r3, #7
 800654c:	4413      	add	r3, r2
 800654e:	3384      	adds	r3, #132	; 0x84
 8006550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4619      	mov	r1, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	01db      	lsls	r3, r3, #7
 800655c:	440b      	add	r3, r1
 800655e:	3384      	adds	r3, #132	; 0x84
 8006560:	4619      	mov	r1, r3
 8006562:	4b14      	ldr	r3, [pc, #80]	; (80065b4 <LTDC_SetConfig+0x330>)
 8006564:	4013      	ands	r3, r2
 8006566:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	461a      	mov	r2, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	01db      	lsls	r3, r3, #7
 8006572:	4413      	add	r3, r2
 8006574:	3384      	adds	r3, #132	; 0x84
 8006576:	461a      	mov	r2, r3
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	461a      	mov	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	01db      	lsls	r3, r3, #7
 8006588:	4413      	add	r3, r2
 800658a:	3384      	adds	r3, #132	; 0x84
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	6812      	ldr	r2, [r2, #0]
 8006592:	4611      	mov	r1, r2
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	01d2      	lsls	r2, r2, #7
 8006598:	440a      	add	r2, r1
 800659a:	3284      	adds	r2, #132	; 0x84
 800659c:	f043 0301 	orr.w	r3, r3, #1
 80065a0:	6013      	str	r3, [r2, #0]
}
 80065a2:	bf00      	nop
 80065a4:	3724      	adds	r7, #36	; 0x24
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	fffff8f8 	.word	0xfffff8f8
 80065b4:	fffff800 	.word	0xfffff800

080065b8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80065b8:	b480      	push	{r7}
 80065ba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065bc:	4b05      	ldr	r3, [pc, #20]	; (80065d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a04      	ldr	r2, [pc, #16]	; (80065d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80065c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065c6:	6013      	str	r3, [r2, #0]
}
 80065c8:	bf00      	nop
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	40007000 	.word	0x40007000

080065d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80065de:	2300      	movs	r3, #0
 80065e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80065e2:	4b23      	ldr	r3, [pc, #140]	; (8006670 <HAL_PWREx_EnableOverDrive+0x98>)
 80065e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e6:	4a22      	ldr	r2, [pc, #136]	; (8006670 <HAL_PWREx_EnableOverDrive+0x98>)
 80065e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065ec:	6413      	str	r3, [r2, #64]	; 0x40
 80065ee:	4b20      	ldr	r3, [pc, #128]	; (8006670 <HAL_PWREx_EnableOverDrive+0x98>)
 80065f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065f6:	603b      	str	r3, [r7, #0]
 80065f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80065fa:	4b1e      	ldr	r3, [pc, #120]	; (8006674 <HAL_PWREx_EnableOverDrive+0x9c>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a1d      	ldr	r2, [pc, #116]	; (8006674 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006604:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006606:	f7fd fb17 	bl	8003c38 <HAL_GetTick>
 800660a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800660c:	e009      	b.n	8006622 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800660e:	f7fd fb13 	bl	8003c38 <HAL_GetTick>
 8006612:	4602      	mov	r2, r0
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800661c:	d901      	bls.n	8006622 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e022      	b.n	8006668 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006622:	4b14      	ldr	r3, [pc, #80]	; (8006674 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800662a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800662e:	d1ee      	bne.n	800660e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006630:	4b10      	ldr	r3, [pc, #64]	; (8006674 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a0f      	ldr	r2, [pc, #60]	; (8006674 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800663a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800663c:	f7fd fafc 	bl	8003c38 <HAL_GetTick>
 8006640:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006642:	e009      	b.n	8006658 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006644:	f7fd faf8 	bl	8003c38 <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006652:	d901      	bls.n	8006658 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e007      	b.n	8006668 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006658:	4b06      	ldr	r3, [pc, #24]	; (8006674 <HAL_PWREx_EnableOverDrive+0x9c>)
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006660:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006664:	d1ee      	bne.n	8006644 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3708      	adds	r7, #8
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	40023800 	.word	0x40023800
 8006674:	40007000 	.word	0x40007000

08006678 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af02      	add	r7, sp, #8
 800667e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006680:	f7fd fada 	bl	8003c38 <HAL_GetTick>
 8006684:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d101      	bne.n	8006690 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e067      	b.n	8006760 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006696:	b2db      	uxtb	r3, r3
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10b      	bne.n	80066b4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f7fc fc6d 	bl	8002f84 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80066aa:	f241 3188 	movw	r1, #5000	; 0x1388
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f85e 	bl	8006770 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	3b01      	subs	r3, #1
 80066c4:	021a      	lsls	r2, r3, #8
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	430a      	orrs	r2, r1
 80066cc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066d2:	9300      	str	r3, [sp, #0]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	2120      	movs	r1, #32
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f856 	bl	800678c <QSPI_WaitFlagStateUntilTimeout>
 80066e0:	4603      	mov	r3, r0
 80066e2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80066e4:	7afb      	ldrb	r3, [r7, #11]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d135      	bne.n	8006756 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	4b1d      	ldr	r3, [pc, #116]	; (8006768 <HAL_QSPI_Init+0xf0>)
 80066f2:	4013      	ands	r3, r2
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	6852      	ldr	r2, [r2, #4]
 80066f8:	0611      	lsls	r1, r2, #24
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	68d2      	ldr	r2, [r2, #12]
 80066fe:	4311      	orrs	r1, r2
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	69d2      	ldr	r2, [r2, #28]
 8006704:	4311      	orrs	r1, r2
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	6a12      	ldr	r2, [r2, #32]
 800670a:	4311      	orrs	r1, r2
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	6812      	ldr	r2, [r2, #0]
 8006710:	430b      	orrs	r3, r1
 8006712:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	685a      	ldr	r2, [r3, #4]
 800671a:	4b14      	ldr	r3, [pc, #80]	; (800676c <HAL_QSPI_Init+0xf4>)
 800671c:	4013      	ands	r3, r2
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	6912      	ldr	r2, [r2, #16]
 8006722:	0411      	lsls	r1, r2, #16
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	6952      	ldr	r2, [r2, #20]
 8006728:	4311      	orrs	r1, r2
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	6992      	ldr	r2, [r2, #24]
 800672e:	4311      	orrs	r1, r2
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	6812      	ldr	r2, [r2, #0]
 8006734:	430b      	orrs	r3, r1
 8006736:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f042 0201 	orr.w	r2, r2, #1
 8006746:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800675e:	7afb      	ldrb	r3, [r7, #11]
}
 8006760:	4618      	mov	r0, r3
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	00ffff2f 	.word	0x00ffff2f
 800676c:	ffe0f8fe 	.word	0xffe0f8fe

08006770 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	683a      	ldr	r2, [r7, #0]
 800677e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	603b      	str	r3, [r7, #0]
 8006798:	4613      	mov	r3, r2
 800679a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800679c:	e01a      	b.n	80067d4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a4:	d016      	beq.n	80067d4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067a6:	f7fd fa47 	bl	8003c38 <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d302      	bcc.n	80067bc <QSPI_WaitFlagStateUntilTimeout+0x30>
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d10b      	bne.n	80067d4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2204      	movs	r2, #4
 80067c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c8:	f043 0201 	orr.w	r2, r3, #1
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e00e      	b.n	80067f2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	689a      	ldr	r2, [r3, #8]
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	4013      	ands	r3, r2
 80067de:	2b00      	cmp	r3, #0
 80067e0:	bf14      	ite	ne
 80067e2:	2301      	movne	r3, #1
 80067e4:	2300      	moveq	r3, #0
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	461a      	mov	r2, r3
 80067ea:	79fb      	ldrb	r3, [r7, #7]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d1d6      	bne.n	800679e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
	...

080067fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b086      	sub	sp, #24
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006804:	2300      	movs	r3, #0
 8006806:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d101      	bne.n	8006812 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e291      	b.n	8006d36 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b00      	cmp	r3, #0
 800681c:	f000 8087 	beq.w	800692e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006820:	4b96      	ldr	r3, [pc, #600]	; (8006a7c <HAL_RCC_OscConfig+0x280>)
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	f003 030c 	and.w	r3, r3, #12
 8006828:	2b04      	cmp	r3, #4
 800682a:	d00c      	beq.n	8006846 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800682c:	4b93      	ldr	r3, [pc, #588]	; (8006a7c <HAL_RCC_OscConfig+0x280>)
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	f003 030c 	and.w	r3, r3, #12
 8006834:	2b08      	cmp	r3, #8
 8006836:	d112      	bne.n	800685e <HAL_RCC_OscConfig+0x62>
 8006838:	4b90      	ldr	r3, [pc, #576]	; (8006a7c <HAL_RCC_OscConfig+0x280>)
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006840:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006844:	d10b      	bne.n	800685e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006846:	4b8d      	ldr	r3, [pc, #564]	; (8006a7c <HAL_RCC_OscConfig+0x280>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d06c      	beq.n	800692c <HAL_RCC_OscConfig+0x130>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d168      	bne.n	800692c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e26b      	b.n	8006d36 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006866:	d106      	bne.n	8006876 <HAL_RCC_OscConfig+0x7a>
 8006868:	4b84      	ldr	r3, [pc, #528]	; (8006a7c <HAL_RCC_OscConfig+0x280>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a83      	ldr	r2, [pc, #524]	; (8006a7c <HAL_RCC_OscConfig+0x280>)
 800686e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006872:	6013      	str	r3, [r2, #0]
 8006874:	e02e      	b.n	80068d4 <HAL_RCC_OscConfig+0xd8>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d10c      	bne.n	8006898 <HAL_RCC_OscConfig+0x9c>
 800687e:	4b7f      	ldr	r3, [pc, #508]	; (8006a7c <HAL_RCC_OscConfig+0x280>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a7e      	ldr	r2, [pc, #504]	; (8006a7c <HAL_RCC_OscConfig+0x280>)
 8006884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006888:	6013      	str	r3, [r2, #0]
 800688a:	4b7c      	ldr	r3, [pc, #496]	; (8006a7c <HAL_RCC_OscConfig+0x280>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a7b      	ldr	r2, [pc, #492]	; (8006a7c <HAL_RCC_OscConfig+0x280>)
 8006890:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006894:	6013      	str	r3, [r2, #0]
 8006896:	e01d      	b.n	80068d4 <HAL_RCC_OscConfig+0xd8>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068a0:	d10c      	bne.n	80068bc <HAL_RCC_OscConfig+0xc0>
 80068a2:	4b76      	ldr	r3, [pc, #472]	; (8006a7c <HAL_RCC_OscConfig+0x280>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a75      	ldr	r2, [pc, #468]	; (8006a7c <HAL_RCC_OscConfig+0x280>)
 80068a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068ac:	6013      	str	r3, [r2, #0]
 80068ae:	4b73      	ldr	r3, [pc, #460]	; (8006a7c <HAL_RCC_OscConfig+0x280>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a72      	ldr	r2, [pc, #456]	; (8006a7c <HAL_RCC_OscConfig+0x280>)
 80068b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068b8:	6013      	str	r3, [r2, #0]
 80068ba:	e00b      	b.n	80068d4 <HAL_RCC_OscConfig+0xd8>
 80068bc:	4b6f      	ldr	r3, [pc, #444]	; (8006a7c <HAL_RCC_OscConfig+0x280>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a6e      	ldr	r2, [pc, #440]	; (8006a7c <HAL_RCC_OscConfig+0x280>)
 80068c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068c6:	6013      	str	r3, [r2, #0]
 80068c8:	4b6c      	ldr	r3, [pc, #432]	; (8006a7c <HAL_RCC_OscConfig+0x280>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a6b      	ldr	r2, [pc, #428]	; (8006a7c <HAL_RCC_OscConfig+0x280>)
 80068ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d013      	beq.n	8006904 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068dc:	f7fd f9ac 	bl	8003c38 <HAL_GetTick>
 80068e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068e2:	e008      	b.n	80068f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068e4:	f7fd f9a8 	bl	8003c38 <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	2b64      	cmp	r3, #100	; 0x64
 80068f0:	d901      	bls.n	80068f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	e21f      	b.n	8006d36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068f6:	4b61      	ldr	r3, [pc, #388]	; (8006a7c <HAL_RCC_OscConfig+0x280>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d0f0      	beq.n	80068e4 <HAL_RCC_OscConfig+0xe8>
 8006902:	e014      	b.n	800692e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006904:	f7fd f998 	bl	8003c38 <HAL_GetTick>
 8006908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800690a:	e008      	b.n	800691e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800690c:	f7fd f994 	bl	8003c38 <HAL_GetTick>
 8006910:	4602      	mov	r2, r0
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	2b64      	cmp	r3, #100	; 0x64
 8006918:	d901      	bls.n	800691e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e20b      	b.n	8006d36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800691e:	4b57      	ldr	r3, [pc, #348]	; (8006a7c <HAL_RCC_OscConfig+0x280>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1f0      	bne.n	800690c <HAL_RCC_OscConfig+0x110>
 800692a:	e000      	b.n	800692e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800692c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0302 	and.w	r3, r3, #2
 8006936:	2b00      	cmp	r3, #0
 8006938:	d069      	beq.n	8006a0e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800693a:	4b50      	ldr	r3, [pc, #320]	; (8006a7c <HAL_RCC_OscConfig+0x280>)
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	f003 030c 	and.w	r3, r3, #12
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00b      	beq.n	800695e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006946:	4b4d      	ldr	r3, [pc, #308]	; (8006a7c <HAL_RCC_OscConfig+0x280>)
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	f003 030c 	and.w	r3, r3, #12
 800694e:	2b08      	cmp	r3, #8
 8006950:	d11c      	bne.n	800698c <HAL_RCC_OscConfig+0x190>
 8006952:	4b4a      	ldr	r3, [pc, #296]	; (8006a7c <HAL_RCC_OscConfig+0x280>)
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d116      	bne.n	800698c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800695e:	4b47      	ldr	r3, [pc, #284]	; (8006a7c <HAL_RCC_OscConfig+0x280>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 0302 	and.w	r3, r3, #2
 8006966:	2b00      	cmp	r3, #0
 8006968:	d005      	beq.n	8006976 <HAL_RCC_OscConfig+0x17a>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d001      	beq.n	8006976 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e1df      	b.n	8006d36 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006976:	4b41      	ldr	r3, [pc, #260]	; (8006a7c <HAL_RCC_OscConfig+0x280>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	00db      	lsls	r3, r3, #3
 8006984:	493d      	ldr	r1, [pc, #244]	; (8006a7c <HAL_RCC_OscConfig+0x280>)
 8006986:	4313      	orrs	r3, r2
 8006988:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800698a:	e040      	b.n	8006a0e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d023      	beq.n	80069dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006994:	4b39      	ldr	r3, [pc, #228]	; (8006a7c <HAL_RCC_OscConfig+0x280>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a38      	ldr	r2, [pc, #224]	; (8006a7c <HAL_RCC_OscConfig+0x280>)
 800699a:	f043 0301 	orr.w	r3, r3, #1
 800699e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069a0:	f7fd f94a 	bl	8003c38 <HAL_GetTick>
 80069a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069a6:	e008      	b.n	80069ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069a8:	f7fd f946 	bl	8003c38 <HAL_GetTick>
 80069ac:	4602      	mov	r2, r0
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d901      	bls.n	80069ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e1bd      	b.n	8006d36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069ba:	4b30      	ldr	r3, [pc, #192]	; (8006a7c <HAL_RCC_OscConfig+0x280>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0302 	and.w	r3, r3, #2
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d0f0      	beq.n	80069a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069c6:	4b2d      	ldr	r3, [pc, #180]	; (8006a7c <HAL_RCC_OscConfig+0x280>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	00db      	lsls	r3, r3, #3
 80069d4:	4929      	ldr	r1, [pc, #164]	; (8006a7c <HAL_RCC_OscConfig+0x280>)
 80069d6:	4313      	orrs	r3, r2
 80069d8:	600b      	str	r3, [r1, #0]
 80069da:	e018      	b.n	8006a0e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069dc:	4b27      	ldr	r3, [pc, #156]	; (8006a7c <HAL_RCC_OscConfig+0x280>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a26      	ldr	r2, [pc, #152]	; (8006a7c <HAL_RCC_OscConfig+0x280>)
 80069e2:	f023 0301 	bic.w	r3, r3, #1
 80069e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069e8:	f7fd f926 	bl	8003c38 <HAL_GetTick>
 80069ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069ee:	e008      	b.n	8006a02 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069f0:	f7fd f922 	bl	8003c38 <HAL_GetTick>
 80069f4:	4602      	mov	r2, r0
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d901      	bls.n	8006a02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e199      	b.n	8006d36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a02:	4b1e      	ldr	r3, [pc, #120]	; (8006a7c <HAL_RCC_OscConfig+0x280>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0302 	and.w	r3, r3, #2
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1f0      	bne.n	80069f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0308 	and.w	r3, r3, #8
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d038      	beq.n	8006a8c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d019      	beq.n	8006a56 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a22:	4b16      	ldr	r3, [pc, #88]	; (8006a7c <HAL_RCC_OscConfig+0x280>)
 8006a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a26:	4a15      	ldr	r2, [pc, #84]	; (8006a7c <HAL_RCC_OscConfig+0x280>)
 8006a28:	f043 0301 	orr.w	r3, r3, #1
 8006a2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a2e:	f7fd f903 	bl	8003c38 <HAL_GetTick>
 8006a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a34:	e008      	b.n	8006a48 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a36:	f7fd f8ff 	bl	8003c38 <HAL_GetTick>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	1ad3      	subs	r3, r2, r3
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d901      	bls.n	8006a48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a44:	2303      	movs	r3, #3
 8006a46:	e176      	b.n	8006d36 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a48:	4b0c      	ldr	r3, [pc, #48]	; (8006a7c <HAL_RCC_OscConfig+0x280>)
 8006a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a4c:	f003 0302 	and.w	r3, r3, #2
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d0f0      	beq.n	8006a36 <HAL_RCC_OscConfig+0x23a>
 8006a54:	e01a      	b.n	8006a8c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a56:	4b09      	ldr	r3, [pc, #36]	; (8006a7c <HAL_RCC_OscConfig+0x280>)
 8006a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a5a:	4a08      	ldr	r2, [pc, #32]	; (8006a7c <HAL_RCC_OscConfig+0x280>)
 8006a5c:	f023 0301 	bic.w	r3, r3, #1
 8006a60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a62:	f7fd f8e9 	bl	8003c38 <HAL_GetTick>
 8006a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a68:	e00a      	b.n	8006a80 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a6a:	f7fd f8e5 	bl	8003c38 <HAL_GetTick>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	1ad3      	subs	r3, r2, r3
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d903      	bls.n	8006a80 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	e15c      	b.n	8006d36 <HAL_RCC_OscConfig+0x53a>
 8006a7c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a80:	4b91      	ldr	r3, [pc, #580]	; (8006cc8 <HAL_RCC_OscConfig+0x4cc>)
 8006a82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a84:	f003 0302 	and.w	r3, r3, #2
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1ee      	bne.n	8006a6a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0304 	and.w	r3, r3, #4
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 80a4 	beq.w	8006be2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a9a:	4b8b      	ldr	r3, [pc, #556]	; (8006cc8 <HAL_RCC_OscConfig+0x4cc>)
 8006a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d10d      	bne.n	8006ac2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006aa6:	4b88      	ldr	r3, [pc, #544]	; (8006cc8 <HAL_RCC_OscConfig+0x4cc>)
 8006aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aaa:	4a87      	ldr	r2, [pc, #540]	; (8006cc8 <HAL_RCC_OscConfig+0x4cc>)
 8006aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8006ab2:	4b85      	ldr	r3, [pc, #532]	; (8006cc8 <HAL_RCC_OscConfig+0x4cc>)
 8006ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aba:	60bb      	str	r3, [r7, #8]
 8006abc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ac2:	4b82      	ldr	r3, [pc, #520]	; (8006ccc <HAL_RCC_OscConfig+0x4d0>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d118      	bne.n	8006b00 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006ace:	4b7f      	ldr	r3, [pc, #508]	; (8006ccc <HAL_RCC_OscConfig+0x4d0>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a7e      	ldr	r2, [pc, #504]	; (8006ccc <HAL_RCC_OscConfig+0x4d0>)
 8006ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ad8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ada:	f7fd f8ad 	bl	8003c38 <HAL_GetTick>
 8006ade:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ae0:	e008      	b.n	8006af4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ae2:	f7fd f8a9 	bl	8003c38 <HAL_GetTick>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	2b64      	cmp	r3, #100	; 0x64
 8006aee:	d901      	bls.n	8006af4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e120      	b.n	8006d36 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006af4:	4b75      	ldr	r3, [pc, #468]	; (8006ccc <HAL_RCC_OscConfig+0x4d0>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d0f0      	beq.n	8006ae2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d106      	bne.n	8006b16 <HAL_RCC_OscConfig+0x31a>
 8006b08:	4b6f      	ldr	r3, [pc, #444]	; (8006cc8 <HAL_RCC_OscConfig+0x4cc>)
 8006b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b0c:	4a6e      	ldr	r2, [pc, #440]	; (8006cc8 <HAL_RCC_OscConfig+0x4cc>)
 8006b0e:	f043 0301 	orr.w	r3, r3, #1
 8006b12:	6713      	str	r3, [r2, #112]	; 0x70
 8006b14:	e02d      	b.n	8006b72 <HAL_RCC_OscConfig+0x376>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10c      	bne.n	8006b38 <HAL_RCC_OscConfig+0x33c>
 8006b1e:	4b6a      	ldr	r3, [pc, #424]	; (8006cc8 <HAL_RCC_OscConfig+0x4cc>)
 8006b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b22:	4a69      	ldr	r2, [pc, #420]	; (8006cc8 <HAL_RCC_OscConfig+0x4cc>)
 8006b24:	f023 0301 	bic.w	r3, r3, #1
 8006b28:	6713      	str	r3, [r2, #112]	; 0x70
 8006b2a:	4b67      	ldr	r3, [pc, #412]	; (8006cc8 <HAL_RCC_OscConfig+0x4cc>)
 8006b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b2e:	4a66      	ldr	r2, [pc, #408]	; (8006cc8 <HAL_RCC_OscConfig+0x4cc>)
 8006b30:	f023 0304 	bic.w	r3, r3, #4
 8006b34:	6713      	str	r3, [r2, #112]	; 0x70
 8006b36:	e01c      	b.n	8006b72 <HAL_RCC_OscConfig+0x376>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	2b05      	cmp	r3, #5
 8006b3e:	d10c      	bne.n	8006b5a <HAL_RCC_OscConfig+0x35e>
 8006b40:	4b61      	ldr	r3, [pc, #388]	; (8006cc8 <HAL_RCC_OscConfig+0x4cc>)
 8006b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b44:	4a60      	ldr	r2, [pc, #384]	; (8006cc8 <HAL_RCC_OscConfig+0x4cc>)
 8006b46:	f043 0304 	orr.w	r3, r3, #4
 8006b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8006b4c:	4b5e      	ldr	r3, [pc, #376]	; (8006cc8 <HAL_RCC_OscConfig+0x4cc>)
 8006b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b50:	4a5d      	ldr	r2, [pc, #372]	; (8006cc8 <HAL_RCC_OscConfig+0x4cc>)
 8006b52:	f043 0301 	orr.w	r3, r3, #1
 8006b56:	6713      	str	r3, [r2, #112]	; 0x70
 8006b58:	e00b      	b.n	8006b72 <HAL_RCC_OscConfig+0x376>
 8006b5a:	4b5b      	ldr	r3, [pc, #364]	; (8006cc8 <HAL_RCC_OscConfig+0x4cc>)
 8006b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b5e:	4a5a      	ldr	r2, [pc, #360]	; (8006cc8 <HAL_RCC_OscConfig+0x4cc>)
 8006b60:	f023 0301 	bic.w	r3, r3, #1
 8006b64:	6713      	str	r3, [r2, #112]	; 0x70
 8006b66:	4b58      	ldr	r3, [pc, #352]	; (8006cc8 <HAL_RCC_OscConfig+0x4cc>)
 8006b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b6a:	4a57      	ldr	r2, [pc, #348]	; (8006cc8 <HAL_RCC_OscConfig+0x4cc>)
 8006b6c:	f023 0304 	bic.w	r3, r3, #4
 8006b70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d015      	beq.n	8006ba6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b7a:	f7fd f85d 	bl	8003c38 <HAL_GetTick>
 8006b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b80:	e00a      	b.n	8006b98 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b82:	f7fd f859 	bl	8003c38 <HAL_GetTick>
 8006b86:	4602      	mov	r2, r0
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d901      	bls.n	8006b98 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006b94:	2303      	movs	r3, #3
 8006b96:	e0ce      	b.n	8006d36 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b98:	4b4b      	ldr	r3, [pc, #300]	; (8006cc8 <HAL_RCC_OscConfig+0x4cc>)
 8006b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b9c:	f003 0302 	and.w	r3, r3, #2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d0ee      	beq.n	8006b82 <HAL_RCC_OscConfig+0x386>
 8006ba4:	e014      	b.n	8006bd0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ba6:	f7fd f847 	bl	8003c38 <HAL_GetTick>
 8006baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bac:	e00a      	b.n	8006bc4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bae:	f7fd f843 	bl	8003c38 <HAL_GetTick>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d901      	bls.n	8006bc4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e0b8      	b.n	8006d36 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bc4:	4b40      	ldr	r3, [pc, #256]	; (8006cc8 <HAL_RCC_OscConfig+0x4cc>)
 8006bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc8:	f003 0302 	and.w	r3, r3, #2
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d1ee      	bne.n	8006bae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006bd0:	7dfb      	ldrb	r3, [r7, #23]
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d105      	bne.n	8006be2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bd6:	4b3c      	ldr	r3, [pc, #240]	; (8006cc8 <HAL_RCC_OscConfig+0x4cc>)
 8006bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bda:	4a3b      	ldr	r2, [pc, #236]	; (8006cc8 <HAL_RCC_OscConfig+0x4cc>)
 8006bdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006be0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f000 80a4 	beq.w	8006d34 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006bec:	4b36      	ldr	r3, [pc, #216]	; (8006cc8 <HAL_RCC_OscConfig+0x4cc>)
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	f003 030c 	and.w	r3, r3, #12
 8006bf4:	2b08      	cmp	r3, #8
 8006bf6:	d06b      	beq.n	8006cd0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	699b      	ldr	r3, [r3, #24]
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d149      	bne.n	8006c94 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c00:	4b31      	ldr	r3, [pc, #196]	; (8006cc8 <HAL_RCC_OscConfig+0x4cc>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a30      	ldr	r2, [pc, #192]	; (8006cc8 <HAL_RCC_OscConfig+0x4cc>)
 8006c06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c0c:	f7fd f814 	bl	8003c38 <HAL_GetTick>
 8006c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c12:	e008      	b.n	8006c26 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c14:	f7fd f810 	bl	8003c38 <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d901      	bls.n	8006c26 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	e087      	b.n	8006d36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c26:	4b28      	ldr	r3, [pc, #160]	; (8006cc8 <HAL_RCC_OscConfig+0x4cc>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1f0      	bne.n	8006c14 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	69da      	ldr	r2, [r3, #28]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	431a      	orrs	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c40:	019b      	lsls	r3, r3, #6
 8006c42:	431a      	orrs	r2, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c48:	085b      	lsrs	r3, r3, #1
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	041b      	lsls	r3, r3, #16
 8006c4e:	431a      	orrs	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c54:	061b      	lsls	r3, r3, #24
 8006c56:	4313      	orrs	r3, r2
 8006c58:	4a1b      	ldr	r2, [pc, #108]	; (8006cc8 <HAL_RCC_OscConfig+0x4cc>)
 8006c5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c5e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c60:	4b19      	ldr	r3, [pc, #100]	; (8006cc8 <HAL_RCC_OscConfig+0x4cc>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a18      	ldr	r2, [pc, #96]	; (8006cc8 <HAL_RCC_OscConfig+0x4cc>)
 8006c66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c6c:	f7fc ffe4 	bl	8003c38 <HAL_GetTick>
 8006c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c72:	e008      	b.n	8006c86 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c74:	f7fc ffe0 	bl	8003c38 <HAL_GetTick>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d901      	bls.n	8006c86 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e057      	b.n	8006d36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c86:	4b10      	ldr	r3, [pc, #64]	; (8006cc8 <HAL_RCC_OscConfig+0x4cc>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d0f0      	beq.n	8006c74 <HAL_RCC_OscConfig+0x478>
 8006c92:	e04f      	b.n	8006d34 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c94:	4b0c      	ldr	r3, [pc, #48]	; (8006cc8 <HAL_RCC_OscConfig+0x4cc>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a0b      	ldr	r2, [pc, #44]	; (8006cc8 <HAL_RCC_OscConfig+0x4cc>)
 8006c9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ca0:	f7fc ffca 	bl	8003c38 <HAL_GetTick>
 8006ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ca6:	e008      	b.n	8006cba <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ca8:	f7fc ffc6 	bl	8003c38 <HAL_GetTick>
 8006cac:	4602      	mov	r2, r0
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d901      	bls.n	8006cba <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e03d      	b.n	8006d36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cba:	4b03      	ldr	r3, [pc, #12]	; (8006cc8 <HAL_RCC_OscConfig+0x4cc>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1f0      	bne.n	8006ca8 <HAL_RCC_OscConfig+0x4ac>
 8006cc6:	e035      	b.n	8006d34 <HAL_RCC_OscConfig+0x538>
 8006cc8:	40023800 	.word	0x40023800
 8006ccc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006cd0:	4b1b      	ldr	r3, [pc, #108]	; (8006d40 <HAL_RCC_OscConfig+0x544>)
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	699b      	ldr	r3, [r3, #24]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d028      	beq.n	8006d30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d121      	bne.n	8006d30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d11a      	bne.n	8006d30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d00:	4013      	ands	r3, r2
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d06:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d111      	bne.n	8006d30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d16:	085b      	lsrs	r3, r3, #1
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d107      	bne.n	8006d30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d001      	beq.n	8006d34 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e000      	b.n	8006d36 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3718      	adds	r7, #24
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	40023800 	.word	0x40023800

08006d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d101      	bne.n	8006d5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e0d0      	b.n	8006efe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d5c:	4b6a      	ldr	r3, [pc, #424]	; (8006f08 <HAL_RCC_ClockConfig+0x1c4>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 030f 	and.w	r3, r3, #15
 8006d64:	683a      	ldr	r2, [r7, #0]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d910      	bls.n	8006d8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d6a:	4b67      	ldr	r3, [pc, #412]	; (8006f08 <HAL_RCC_ClockConfig+0x1c4>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f023 020f 	bic.w	r2, r3, #15
 8006d72:	4965      	ldr	r1, [pc, #404]	; (8006f08 <HAL_RCC_ClockConfig+0x1c4>)
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d7a:	4b63      	ldr	r3, [pc, #396]	; (8006f08 <HAL_RCC_ClockConfig+0x1c4>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 030f 	and.w	r3, r3, #15
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d001      	beq.n	8006d8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e0b8      	b.n	8006efe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 0302 	and.w	r3, r3, #2
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d020      	beq.n	8006dda <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 0304 	and.w	r3, r3, #4
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d005      	beq.n	8006db0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006da4:	4b59      	ldr	r3, [pc, #356]	; (8006f0c <HAL_RCC_ClockConfig+0x1c8>)
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	4a58      	ldr	r2, [pc, #352]	; (8006f0c <HAL_RCC_ClockConfig+0x1c8>)
 8006daa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006dae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 0308 	and.w	r3, r3, #8
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d005      	beq.n	8006dc8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006dbc:	4b53      	ldr	r3, [pc, #332]	; (8006f0c <HAL_RCC_ClockConfig+0x1c8>)
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	4a52      	ldr	r2, [pc, #328]	; (8006f0c <HAL_RCC_ClockConfig+0x1c8>)
 8006dc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006dc6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dc8:	4b50      	ldr	r3, [pc, #320]	; (8006f0c <HAL_RCC_ClockConfig+0x1c8>)
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	494d      	ldr	r1, [pc, #308]	; (8006f0c <HAL_RCC_ClockConfig+0x1c8>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0301 	and.w	r3, r3, #1
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d040      	beq.n	8006e68 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d107      	bne.n	8006dfe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dee:	4b47      	ldr	r3, [pc, #284]	; (8006f0c <HAL_RCC_ClockConfig+0x1c8>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d115      	bne.n	8006e26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e07f      	b.n	8006efe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d107      	bne.n	8006e16 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e06:	4b41      	ldr	r3, [pc, #260]	; (8006f0c <HAL_RCC_ClockConfig+0x1c8>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d109      	bne.n	8006e26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e073      	b.n	8006efe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e16:	4b3d      	ldr	r3, [pc, #244]	; (8006f0c <HAL_RCC_ClockConfig+0x1c8>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 0302 	and.w	r3, r3, #2
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d101      	bne.n	8006e26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e06b      	b.n	8006efe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e26:	4b39      	ldr	r3, [pc, #228]	; (8006f0c <HAL_RCC_ClockConfig+0x1c8>)
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	f023 0203 	bic.w	r2, r3, #3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	4936      	ldr	r1, [pc, #216]	; (8006f0c <HAL_RCC_ClockConfig+0x1c8>)
 8006e34:	4313      	orrs	r3, r2
 8006e36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e38:	f7fc fefe 	bl	8003c38 <HAL_GetTick>
 8006e3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e3e:	e00a      	b.n	8006e56 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e40:	f7fc fefa 	bl	8003c38 <HAL_GetTick>
 8006e44:	4602      	mov	r2, r0
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d901      	bls.n	8006e56 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e053      	b.n	8006efe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e56:	4b2d      	ldr	r3, [pc, #180]	; (8006f0c <HAL_RCC_ClockConfig+0x1c8>)
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f003 020c 	and.w	r2, r3, #12
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d1eb      	bne.n	8006e40 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e68:	4b27      	ldr	r3, [pc, #156]	; (8006f08 <HAL_RCC_ClockConfig+0x1c4>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 030f 	and.w	r3, r3, #15
 8006e70:	683a      	ldr	r2, [r7, #0]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d210      	bcs.n	8006e98 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e76:	4b24      	ldr	r3, [pc, #144]	; (8006f08 <HAL_RCC_ClockConfig+0x1c4>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f023 020f 	bic.w	r2, r3, #15
 8006e7e:	4922      	ldr	r1, [pc, #136]	; (8006f08 <HAL_RCC_ClockConfig+0x1c4>)
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e86:	4b20      	ldr	r3, [pc, #128]	; (8006f08 <HAL_RCC_ClockConfig+0x1c4>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 030f 	and.w	r3, r3, #15
 8006e8e:	683a      	ldr	r2, [r7, #0]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d001      	beq.n	8006e98 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e032      	b.n	8006efe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 0304 	and.w	r3, r3, #4
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d008      	beq.n	8006eb6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ea4:	4b19      	ldr	r3, [pc, #100]	; (8006f0c <HAL_RCC_ClockConfig+0x1c8>)
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	4916      	ldr	r1, [pc, #88]	; (8006f0c <HAL_RCC_ClockConfig+0x1c8>)
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 0308 	and.w	r3, r3, #8
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d009      	beq.n	8006ed6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006ec2:	4b12      	ldr	r3, [pc, #72]	; (8006f0c <HAL_RCC_ClockConfig+0x1c8>)
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	00db      	lsls	r3, r3, #3
 8006ed0:	490e      	ldr	r1, [pc, #56]	; (8006f0c <HAL_RCC_ClockConfig+0x1c8>)
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006ed6:	f000 f821 	bl	8006f1c <HAL_RCC_GetSysClockFreq>
 8006eda:	4602      	mov	r2, r0
 8006edc:	4b0b      	ldr	r3, [pc, #44]	; (8006f0c <HAL_RCC_ClockConfig+0x1c8>)
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	091b      	lsrs	r3, r3, #4
 8006ee2:	f003 030f 	and.w	r3, r3, #15
 8006ee6:	490a      	ldr	r1, [pc, #40]	; (8006f10 <HAL_RCC_ClockConfig+0x1cc>)
 8006ee8:	5ccb      	ldrb	r3, [r1, r3]
 8006eea:	fa22 f303 	lsr.w	r3, r2, r3
 8006eee:	4a09      	ldr	r2, [pc, #36]	; (8006f14 <HAL_RCC_ClockConfig+0x1d0>)
 8006ef0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006ef2:	4b09      	ldr	r3, [pc, #36]	; (8006f18 <HAL_RCC_ClockConfig+0x1d4>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7fc fce8 	bl	80038cc <HAL_InitTick>

  return HAL_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	40023c00 	.word	0x40023c00
 8006f0c:	40023800 	.word	0x40023800
 8006f10:	08027c08 	.word	0x08027c08
 8006f14:	20000014 	.word	0x20000014
 8006f18:	20000018 	.word	0x20000018

08006f1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f20:	b090      	sub	sp, #64	; 0x40
 8006f22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006f24:	2300      	movs	r3, #0
 8006f26:	637b      	str	r3, [r7, #52]	; 0x34
 8006f28:	2300      	movs	r3, #0
 8006f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8006f30:	2300      	movs	r3, #0
 8006f32:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f34:	4b59      	ldr	r3, [pc, #356]	; (800709c <HAL_RCC_GetSysClockFreq+0x180>)
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	f003 030c 	and.w	r3, r3, #12
 8006f3c:	2b08      	cmp	r3, #8
 8006f3e:	d00d      	beq.n	8006f5c <HAL_RCC_GetSysClockFreq+0x40>
 8006f40:	2b08      	cmp	r3, #8
 8006f42:	f200 80a1 	bhi.w	8007088 <HAL_RCC_GetSysClockFreq+0x16c>
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d002      	beq.n	8006f50 <HAL_RCC_GetSysClockFreq+0x34>
 8006f4a:	2b04      	cmp	r3, #4
 8006f4c:	d003      	beq.n	8006f56 <HAL_RCC_GetSysClockFreq+0x3a>
 8006f4e:	e09b      	b.n	8007088 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f50:	4b53      	ldr	r3, [pc, #332]	; (80070a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8006f52:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006f54:	e09b      	b.n	800708e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f56:	4b53      	ldr	r3, [pc, #332]	; (80070a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006f58:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006f5a:	e098      	b.n	800708e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f5c:	4b4f      	ldr	r3, [pc, #316]	; (800709c <HAL_RCC_GetSysClockFreq+0x180>)
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f64:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006f66:	4b4d      	ldr	r3, [pc, #308]	; (800709c <HAL_RCC_GetSysClockFreq+0x180>)
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d028      	beq.n	8006fc4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f72:	4b4a      	ldr	r3, [pc, #296]	; (800709c <HAL_RCC_GetSysClockFreq+0x180>)
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	099b      	lsrs	r3, r3, #6
 8006f78:	2200      	movs	r2, #0
 8006f7a:	623b      	str	r3, [r7, #32]
 8006f7c:	627a      	str	r2, [r7, #36]	; 0x24
 8006f7e:	6a3b      	ldr	r3, [r7, #32]
 8006f80:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006f84:	2100      	movs	r1, #0
 8006f86:	4b47      	ldr	r3, [pc, #284]	; (80070a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006f88:	fb03 f201 	mul.w	r2, r3, r1
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	fb00 f303 	mul.w	r3, r0, r3
 8006f92:	4413      	add	r3, r2
 8006f94:	4a43      	ldr	r2, [pc, #268]	; (80070a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006f96:	fba0 1202 	umull	r1, r2, r0, r2
 8006f9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f9c:	460a      	mov	r2, r1
 8006f9e:	62ba      	str	r2, [r7, #40]	; 0x28
 8006fa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fa2:	4413      	add	r3, r2
 8006fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fa8:	2200      	movs	r2, #0
 8006faa:	61bb      	str	r3, [r7, #24]
 8006fac:	61fa      	str	r2, [r7, #28]
 8006fae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006fb2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006fb6:	f7f9 fd61 	bl	8000a7c <__aeabi_uldivmod>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fc2:	e053      	b.n	800706c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fc4:	4b35      	ldr	r3, [pc, #212]	; (800709c <HAL_RCC_GetSysClockFreq+0x180>)
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	099b      	lsrs	r3, r3, #6
 8006fca:	2200      	movs	r2, #0
 8006fcc:	613b      	str	r3, [r7, #16]
 8006fce:	617a      	str	r2, [r7, #20]
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006fd6:	f04f 0b00 	mov.w	fp, #0
 8006fda:	4652      	mov	r2, sl
 8006fdc:	465b      	mov	r3, fp
 8006fde:	f04f 0000 	mov.w	r0, #0
 8006fe2:	f04f 0100 	mov.w	r1, #0
 8006fe6:	0159      	lsls	r1, r3, #5
 8006fe8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006fec:	0150      	lsls	r0, r2, #5
 8006fee:	4602      	mov	r2, r0
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	ebb2 080a 	subs.w	r8, r2, sl
 8006ff6:	eb63 090b 	sbc.w	r9, r3, fp
 8006ffa:	f04f 0200 	mov.w	r2, #0
 8006ffe:	f04f 0300 	mov.w	r3, #0
 8007002:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007006:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800700a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800700e:	ebb2 0408 	subs.w	r4, r2, r8
 8007012:	eb63 0509 	sbc.w	r5, r3, r9
 8007016:	f04f 0200 	mov.w	r2, #0
 800701a:	f04f 0300 	mov.w	r3, #0
 800701e:	00eb      	lsls	r3, r5, #3
 8007020:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007024:	00e2      	lsls	r2, r4, #3
 8007026:	4614      	mov	r4, r2
 8007028:	461d      	mov	r5, r3
 800702a:	eb14 030a 	adds.w	r3, r4, sl
 800702e:	603b      	str	r3, [r7, #0]
 8007030:	eb45 030b 	adc.w	r3, r5, fp
 8007034:	607b      	str	r3, [r7, #4]
 8007036:	f04f 0200 	mov.w	r2, #0
 800703a:	f04f 0300 	mov.w	r3, #0
 800703e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007042:	4629      	mov	r1, r5
 8007044:	028b      	lsls	r3, r1, #10
 8007046:	4621      	mov	r1, r4
 8007048:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800704c:	4621      	mov	r1, r4
 800704e:	028a      	lsls	r2, r1, #10
 8007050:	4610      	mov	r0, r2
 8007052:	4619      	mov	r1, r3
 8007054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007056:	2200      	movs	r2, #0
 8007058:	60bb      	str	r3, [r7, #8]
 800705a:	60fa      	str	r2, [r7, #12]
 800705c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007060:	f7f9 fd0c 	bl	8000a7c <__aeabi_uldivmod>
 8007064:	4602      	mov	r2, r0
 8007066:	460b      	mov	r3, r1
 8007068:	4613      	mov	r3, r2
 800706a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800706c:	4b0b      	ldr	r3, [pc, #44]	; (800709c <HAL_RCC_GetSysClockFreq+0x180>)
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	0c1b      	lsrs	r3, r3, #16
 8007072:	f003 0303 	and.w	r3, r3, #3
 8007076:	3301      	adds	r3, #1
 8007078:	005b      	lsls	r3, r3, #1
 800707a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800707c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800707e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007080:	fbb2 f3f3 	udiv	r3, r2, r3
 8007084:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007086:	e002      	b.n	800708e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007088:	4b05      	ldr	r3, [pc, #20]	; (80070a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800708a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800708c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800708e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007090:	4618      	mov	r0, r3
 8007092:	3740      	adds	r7, #64	; 0x40
 8007094:	46bd      	mov	sp, r7
 8007096:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800709a:	bf00      	nop
 800709c:	40023800 	.word	0x40023800
 80070a0:	00f42400 	.word	0x00f42400
 80070a4:	017d7840 	.word	0x017d7840

080070a8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070a8:	b480      	push	{r7}
 80070aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070ac:	4b03      	ldr	r3, [pc, #12]	; (80070bc <HAL_RCC_GetHCLKFreq+0x14>)
 80070ae:	681b      	ldr	r3, [r3, #0]
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	20000014 	.word	0x20000014

080070c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80070c4:	f7ff fff0 	bl	80070a8 <HAL_RCC_GetHCLKFreq>
 80070c8:	4602      	mov	r2, r0
 80070ca:	4b05      	ldr	r3, [pc, #20]	; (80070e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	0a9b      	lsrs	r3, r3, #10
 80070d0:	f003 0307 	and.w	r3, r3, #7
 80070d4:	4903      	ldr	r1, [pc, #12]	; (80070e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070d6:	5ccb      	ldrb	r3, [r1, r3]
 80070d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070dc:	4618      	mov	r0, r3
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	40023800 	.word	0x40023800
 80070e4:	08027c18 	.word	0x08027c18

080070e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80070ec:	f7ff ffdc 	bl	80070a8 <HAL_RCC_GetHCLKFreq>
 80070f0:	4602      	mov	r2, r0
 80070f2:	4b05      	ldr	r3, [pc, #20]	; (8007108 <HAL_RCC_GetPCLK2Freq+0x20>)
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	0b5b      	lsrs	r3, r3, #13
 80070f8:	f003 0307 	and.w	r3, r3, #7
 80070fc:	4903      	ldr	r1, [pc, #12]	; (800710c <HAL_RCC_GetPCLK2Freq+0x24>)
 80070fe:	5ccb      	ldrb	r3, [r1, r3]
 8007100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007104:	4618      	mov	r0, r3
 8007106:	bd80      	pop	{r7, pc}
 8007108:	40023800 	.word	0x40023800
 800710c:	08027c18 	.word	0x08027c18

08007110 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	220f      	movs	r2, #15
 800711e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007120:	4b12      	ldr	r3, [pc, #72]	; (800716c <HAL_RCC_GetClockConfig+0x5c>)
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	f003 0203 	and.w	r2, r3, #3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800712c:	4b0f      	ldr	r3, [pc, #60]	; (800716c <HAL_RCC_GetClockConfig+0x5c>)
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007138:	4b0c      	ldr	r3, [pc, #48]	; (800716c <HAL_RCC_GetClockConfig+0x5c>)
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007144:	4b09      	ldr	r3, [pc, #36]	; (800716c <HAL_RCC_GetClockConfig+0x5c>)
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	08db      	lsrs	r3, r3, #3
 800714a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007152:	4b07      	ldr	r3, [pc, #28]	; (8007170 <HAL_RCC_GetClockConfig+0x60>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 020f 	and.w	r2, r3, #15
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	601a      	str	r2, [r3, #0]
}
 800715e:	bf00      	nop
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	40023800 	.word	0x40023800
 8007170:	40023c00 	.word	0x40023c00

08007174 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b088      	sub	sp, #32
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800717c:	2300      	movs	r3, #0
 800717e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007180:	2300      	movs	r3, #0
 8007182:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007184:	2300      	movs	r3, #0
 8007186:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007188:	2300      	movs	r3, #0
 800718a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800718c:	2300      	movs	r3, #0
 800718e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 0301 	and.w	r3, r3, #1
 8007198:	2b00      	cmp	r3, #0
 800719a:	d012      	beq.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800719c:	4b69      	ldr	r3, [pc, #420]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	4a68      	ldr	r2, [pc, #416]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80071a6:	6093      	str	r3, [r2, #8]
 80071a8:	4b66      	ldr	r3, [pc, #408]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071aa:	689a      	ldr	r2, [r3, #8]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b0:	4964      	ldr	r1, [pc, #400]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071b2:	4313      	orrs	r3, r2
 80071b4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d101      	bne.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80071be:	2301      	movs	r3, #1
 80071c0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d017      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80071ce:	4b5d      	ldr	r3, [pc, #372]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071dc:	4959      	ldr	r1, [pc, #356]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071de:	4313      	orrs	r3, r2
 80071e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071ec:	d101      	bne.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80071ee:	2301      	movs	r3, #1
 80071f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d101      	bne.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80071fa:	2301      	movs	r3, #1
 80071fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007206:	2b00      	cmp	r3, #0
 8007208:	d017      	beq.n	800723a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800720a:	4b4e      	ldr	r3, [pc, #312]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800720c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007210:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007218:	494a      	ldr	r1, [pc, #296]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800721a:	4313      	orrs	r3, r2
 800721c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007224:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007228:	d101      	bne.n	800722e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800722a:	2301      	movs	r3, #1
 800722c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007232:	2b00      	cmp	r3, #0
 8007234:	d101      	bne.n	800723a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007236:	2301      	movs	r3, #1
 8007238:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d001      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007246:	2301      	movs	r3, #1
 8007248:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 0320 	and.w	r3, r3, #32
 8007252:	2b00      	cmp	r3, #0
 8007254:	f000 808b 	beq.w	800736e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007258:	4b3a      	ldr	r3, [pc, #232]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800725a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725c:	4a39      	ldr	r2, [pc, #228]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800725e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007262:	6413      	str	r3, [r2, #64]	; 0x40
 8007264:	4b37      	ldr	r3, [pc, #220]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800726c:	60bb      	str	r3, [r7, #8]
 800726e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007270:	4b35      	ldr	r3, [pc, #212]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a34      	ldr	r2, [pc, #208]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800727a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800727c:	f7fc fcdc 	bl	8003c38 <HAL_GetTick>
 8007280:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007282:	e008      	b.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007284:	f7fc fcd8 	bl	8003c38 <HAL_GetTick>
 8007288:	4602      	mov	r2, r0
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	1ad3      	subs	r3, r2, r3
 800728e:	2b64      	cmp	r3, #100	; 0x64
 8007290:	d901      	bls.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007292:	2303      	movs	r3, #3
 8007294:	e357      	b.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007296:	4b2c      	ldr	r3, [pc, #176]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d0f0      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80072a2:	4b28      	ldr	r3, [pc, #160]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072aa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d035      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072ba:	693a      	ldr	r2, [r7, #16]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d02e      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072c0:	4b20      	ldr	r3, [pc, #128]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072c8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80072ca:	4b1e      	ldr	r3, [pc, #120]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ce:	4a1d      	ldr	r2, [pc, #116]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072d4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80072d6:	4b1b      	ldr	r3, [pc, #108]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072da:	4a1a      	ldr	r2, [pc, #104]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80072e2:	4a18      	ldr	r2, [pc, #96]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80072e8:	4b16      	ldr	r3, [pc, #88]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ec:	f003 0301 	and.w	r3, r3, #1
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d114      	bne.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072f4:	f7fc fca0 	bl	8003c38 <HAL_GetTick>
 80072f8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072fa:	e00a      	b.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072fc:	f7fc fc9c 	bl	8003c38 <HAL_GetTick>
 8007300:	4602      	mov	r2, r0
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	1ad3      	subs	r3, r2, r3
 8007306:	f241 3288 	movw	r2, #5000	; 0x1388
 800730a:	4293      	cmp	r3, r2
 800730c:	d901      	bls.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800730e:	2303      	movs	r3, #3
 8007310:	e319      	b.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007312:	4b0c      	ldr	r3, [pc, #48]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007316:	f003 0302 	and.w	r3, r3, #2
 800731a:	2b00      	cmp	r3, #0
 800731c:	d0ee      	beq.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007326:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800732a:	d111      	bne.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800732c:	4b05      	ldr	r3, [pc, #20]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007338:	4b04      	ldr	r3, [pc, #16]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800733a:	400b      	ands	r3, r1
 800733c:	4901      	ldr	r1, [pc, #4]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800733e:	4313      	orrs	r3, r2
 8007340:	608b      	str	r3, [r1, #8]
 8007342:	e00b      	b.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007344:	40023800 	.word	0x40023800
 8007348:	40007000 	.word	0x40007000
 800734c:	0ffffcff 	.word	0x0ffffcff
 8007350:	4baa      	ldr	r3, [pc, #680]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	4aa9      	ldr	r2, [pc, #676]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007356:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800735a:	6093      	str	r3, [r2, #8]
 800735c:	4ba7      	ldr	r3, [pc, #668]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800735e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007364:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007368:	49a4      	ldr	r1, [pc, #656]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800736a:	4313      	orrs	r3, r2
 800736c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 0310 	and.w	r3, r3, #16
 8007376:	2b00      	cmp	r3, #0
 8007378:	d010      	beq.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800737a:	4ba0      	ldr	r3, [pc, #640]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800737c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007380:	4a9e      	ldr	r2, [pc, #632]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007382:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007386:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800738a:	4b9c      	ldr	r3, [pc, #624]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800738c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007394:	4999      	ldr	r1, [pc, #612]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007396:	4313      	orrs	r3, r2
 8007398:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d00a      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80073a8:	4b94      	ldr	r3, [pc, #592]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073b6:	4991      	ldr	r1, [pc, #580]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073b8:	4313      	orrs	r3, r2
 80073ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00a      	beq.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80073ca:	4b8c      	ldr	r3, [pc, #560]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073d8:	4988      	ldr	r1, [pc, #544]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073da:	4313      	orrs	r3, r2
 80073dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00a      	beq.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80073ec:	4b83      	ldr	r3, [pc, #524]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073fa:	4980      	ldr	r1, [pc, #512]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073fc:	4313      	orrs	r3, r2
 80073fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00a      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800740e:	4b7b      	ldr	r3, [pc, #492]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007414:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800741c:	4977      	ldr	r1, [pc, #476]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800741e:	4313      	orrs	r3, r2
 8007420:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00a      	beq.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007430:	4b72      	ldr	r3, [pc, #456]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007436:	f023 0203 	bic.w	r2, r3, #3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800743e:	496f      	ldr	r1, [pc, #444]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007440:	4313      	orrs	r3, r2
 8007442:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00a      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007452:	4b6a      	ldr	r3, [pc, #424]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007458:	f023 020c 	bic.w	r2, r3, #12
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007460:	4966      	ldr	r1, [pc, #408]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007462:	4313      	orrs	r3, r2
 8007464:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00a      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007474:	4b61      	ldr	r3, [pc, #388]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800747a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007482:	495e      	ldr	r1, [pc, #376]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007484:	4313      	orrs	r3, r2
 8007486:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00a      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007496:	4b59      	ldr	r3, [pc, #356]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800749c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074a4:	4955      	ldr	r1, [pc, #340]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074a6:	4313      	orrs	r3, r2
 80074a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00a      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80074b8:	4b50      	ldr	r3, [pc, #320]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c6:	494d      	ldr	r1, [pc, #308]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074c8:	4313      	orrs	r3, r2
 80074ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00a      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80074da:	4b48      	ldr	r3, [pc, #288]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074e0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074e8:	4944      	ldr	r1, [pc, #272]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074ea:	4313      	orrs	r3, r2
 80074ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00a      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80074fc:	4b3f      	ldr	r3, [pc, #252]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007502:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800750a:	493c      	ldr	r1, [pc, #240]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800750c:	4313      	orrs	r3, r2
 800750e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00a      	beq.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800751e:	4b37      	ldr	r3, [pc, #220]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007524:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800752c:	4933      	ldr	r1, [pc, #204]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800752e:	4313      	orrs	r3, r2
 8007530:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00a      	beq.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007540:	4b2e      	ldr	r3, [pc, #184]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007546:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800754e:	492b      	ldr	r1, [pc, #172]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007550:	4313      	orrs	r3, r2
 8007552:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d011      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007562:	4b26      	ldr	r3, [pc, #152]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007568:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007570:	4922      	ldr	r1, [pc, #136]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007572:	4313      	orrs	r3, r2
 8007574:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800757c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007580:	d101      	bne.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007582:	2301      	movs	r3, #1
 8007584:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 0308 	and.w	r3, r3, #8
 800758e:	2b00      	cmp	r3, #0
 8007590:	d001      	beq.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007592:	2301      	movs	r3, #1
 8007594:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00a      	beq.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075a2:	4b16      	ldr	r3, [pc, #88]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075a8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075b0:	4912      	ldr	r1, [pc, #72]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075b2:	4313      	orrs	r3, r2
 80075b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00b      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80075c4:	4b0d      	ldr	r3, [pc, #52]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075d4:	4909      	ldr	r1, [pc, #36]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075d6:	4313      	orrs	r3, r2
 80075d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d005      	beq.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075ea:	f040 80d9 	bne.w	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80075ee:	4b03      	ldr	r3, [pc, #12]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a02      	ldr	r2, [pc, #8]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80075f8:	6013      	str	r3, [r2, #0]
 80075fa:	e001      	b.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80075fc:	40023800 	.word	0x40023800

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007600:	f7fc fb1a 	bl	8003c38 <HAL_GetTick>
 8007604:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007606:	e008      	b.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007608:	f7fc fb16 	bl	8003c38 <HAL_GetTick>
 800760c:	4602      	mov	r2, r0
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	1ad3      	subs	r3, r2, r3
 8007612:	2b64      	cmp	r3, #100	; 0x64
 8007614:	d901      	bls.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007616:	2303      	movs	r3, #3
 8007618:	e195      	b.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800761a:	4b6d      	ldr	r3, [pc, #436]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1f0      	bne.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x494>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 0301 	and.w	r3, r3, #1
 800762e:	2b00      	cmp	r3, #0
 8007630:	d021      	beq.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007636:	2b00      	cmp	r3, #0
 8007638:	d11d      	bne.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800763a:	4b65      	ldr	r3, [pc, #404]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800763c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007640:	0c1b      	lsrs	r3, r3, #16
 8007642:	f003 0303 	and.w	r3, r3, #3
 8007646:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007648:	4b61      	ldr	r3, [pc, #388]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800764a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800764e:	0e1b      	lsrs	r3, r3, #24
 8007650:	f003 030f 	and.w	r3, r3, #15
 8007654:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	019a      	lsls	r2, r3, #6
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	041b      	lsls	r3, r3, #16
 8007660:	431a      	orrs	r2, r3
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	061b      	lsls	r3, r3, #24
 8007666:	431a      	orrs	r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	071b      	lsls	r3, r3, #28
 800766e:	4958      	ldr	r1, [pc, #352]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007670:	4313      	orrs	r3, r2
 8007672:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800767e:	2b00      	cmp	r3, #0
 8007680:	d004      	beq.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007686:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800768a:	d00a      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007694:	2b00      	cmp	r3, #0
 8007696:	d02e      	beq.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076a0:	d129      	bne.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80076a2:	4b4b      	ldr	r3, [pc, #300]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076a8:	0c1b      	lsrs	r3, r3, #16
 80076aa:	f003 0303 	and.w	r3, r3, #3
 80076ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80076b0:	4b47      	ldr	r3, [pc, #284]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076b6:	0f1b      	lsrs	r3, r3, #28
 80076b8:	f003 0307 	and.w	r3, r3, #7
 80076bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	019a      	lsls	r2, r3, #6
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	041b      	lsls	r3, r3, #16
 80076c8:	431a      	orrs	r2, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	061b      	lsls	r3, r3, #24
 80076d0:	431a      	orrs	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	071b      	lsls	r3, r3, #28
 80076d6:	493e      	ldr	r1, [pc, #248]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076d8:	4313      	orrs	r3, r2
 80076da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80076de:	4b3c      	ldr	r3, [pc, #240]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076e4:	f023 021f 	bic.w	r2, r3, #31
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ec:	3b01      	subs	r3, #1
 80076ee:	4938      	ldr	r1, [pc, #224]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076f0:	4313      	orrs	r3, r2
 80076f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d01d      	beq.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007702:	4b33      	ldr	r3, [pc, #204]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007704:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007708:	0e1b      	lsrs	r3, r3, #24
 800770a:	f003 030f 	and.w	r3, r3, #15
 800770e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007710:	4b2f      	ldr	r3, [pc, #188]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007712:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007716:	0f1b      	lsrs	r3, r3, #28
 8007718:	f003 0307 	and.w	r3, r3, #7
 800771c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	019a      	lsls	r2, r3, #6
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	041b      	lsls	r3, r3, #16
 800772a:	431a      	orrs	r2, r3
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	061b      	lsls	r3, r3, #24
 8007730:	431a      	orrs	r2, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	071b      	lsls	r3, r3, #28
 8007736:	4926      	ldr	r1, [pc, #152]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007738:	4313      	orrs	r3, r2
 800773a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007746:	2b00      	cmp	r3, #0
 8007748:	d011      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x5fa>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	019a      	lsls	r2, r3, #6
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	041b      	lsls	r3, r3, #16
 8007756:	431a      	orrs	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	061b      	lsls	r3, r3, #24
 800775e:	431a      	orrs	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	071b      	lsls	r3, r3, #28
 8007766:	491a      	ldr	r1, [pc, #104]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007768:	4313      	orrs	r3, r2
 800776a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800776e:	4b18      	ldr	r3, [pc, #96]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a17      	ldr	r2, [pc, #92]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007774:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007778:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800777a:	f7fc fa5d 	bl	8003c38 <HAL_GetTick>
 800777e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007780:	e008      	b.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x620>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007782:	f7fc fa59 	bl	8003c38 <HAL_GetTick>
 8007786:	4602      	mov	r2, r0
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	2b64      	cmp	r3, #100	; 0x64
 800778e:	d901      	bls.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x620>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007790:	2303      	movs	r3, #3
 8007792:	e0d8      	b.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007794:	4b0e      	ldr	r3, [pc, #56]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800779c:	2b00      	cmp	r3, #0
 800779e:	d0f0      	beq.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x60e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	f040 80ce 	bne.w	8007944 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80077a8:	4b09      	ldr	r3, [pc, #36]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a08      	ldr	r2, [pc, #32]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077b4:	f7fc fa40 	bl	8003c38 <HAL_GetTick>
 80077b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80077ba:	e00b      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80077bc:	f7fc fa3c 	bl	8003c38 <HAL_GetTick>
 80077c0:	4602      	mov	r2, r0
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	1ad3      	subs	r3, r2, r3
 80077c6:	2b64      	cmp	r3, #100	; 0x64
 80077c8:	d904      	bls.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80077ca:	2303      	movs	r3, #3
 80077cc:	e0bb      	b.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80077ce:	bf00      	nop
 80077d0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80077d4:	4b5e      	ldr	r3, [pc, #376]	; (8007950 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077e0:	d0ec      	beq.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x648>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d003      	beq.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d009      	beq.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d02e      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007806:	2b00      	cmp	r3, #0
 8007808:	d12a      	bne.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800780a:	4b51      	ldr	r3, [pc, #324]	; (8007950 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800780c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007810:	0c1b      	lsrs	r3, r3, #16
 8007812:	f003 0303 	and.w	r3, r3, #3
 8007816:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007818:	4b4d      	ldr	r3, [pc, #308]	; (8007950 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800781a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800781e:	0f1b      	lsrs	r3, r3, #28
 8007820:	f003 0307 	and.w	r3, r3, #7
 8007824:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	695b      	ldr	r3, [r3, #20]
 800782a:	019a      	lsls	r2, r3, #6
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	041b      	lsls	r3, r3, #16
 8007830:	431a      	orrs	r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	061b      	lsls	r3, r3, #24
 8007838:	431a      	orrs	r2, r3
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	071b      	lsls	r3, r3, #28
 800783e:	4944      	ldr	r1, [pc, #272]	; (8007950 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007840:	4313      	orrs	r3, r2
 8007842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007846:	4b42      	ldr	r3, [pc, #264]	; (8007950 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007848:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800784c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007854:	3b01      	subs	r3, #1
 8007856:	021b      	lsls	r3, r3, #8
 8007858:	493d      	ldr	r1, [pc, #244]	; (8007950 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800785a:	4313      	orrs	r3, r2
 800785c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007868:	2b00      	cmp	r3, #0
 800786a:	d022      	beq.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007870:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007874:	d11d      	bne.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007876:	4b36      	ldr	r3, [pc, #216]	; (8007950 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800787c:	0e1b      	lsrs	r3, r3, #24
 800787e:	f003 030f 	and.w	r3, r3, #15
 8007882:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007884:	4b32      	ldr	r3, [pc, #200]	; (8007950 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800788a:	0f1b      	lsrs	r3, r3, #28
 800788c:	f003 0307 	and.w	r3, r3, #7
 8007890:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	019a      	lsls	r2, r3, #6
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a1b      	ldr	r3, [r3, #32]
 800789c:	041b      	lsls	r3, r3, #16
 800789e:	431a      	orrs	r2, r3
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	061b      	lsls	r3, r3, #24
 80078a4:	431a      	orrs	r2, r3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	071b      	lsls	r3, r3, #28
 80078aa:	4929      	ldr	r1, [pc, #164]	; (8007950 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078ac:	4313      	orrs	r3, r2
 80078ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 0308 	and.w	r3, r3, #8
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d028      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80078be:	4b24      	ldr	r3, [pc, #144]	; (8007950 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078c4:	0e1b      	lsrs	r3, r3, #24
 80078c6:	f003 030f 	and.w	r3, r3, #15
 80078ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80078cc:	4b20      	ldr	r3, [pc, #128]	; (8007950 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078d2:	0c1b      	lsrs	r3, r3, #16
 80078d4:	f003 0303 	and.w	r3, r3, #3
 80078d8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	695b      	ldr	r3, [r3, #20]
 80078de:	019a      	lsls	r2, r3, #6
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	041b      	lsls	r3, r3, #16
 80078e4:	431a      	orrs	r2, r3
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	061b      	lsls	r3, r3, #24
 80078ea:	431a      	orrs	r2, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	69db      	ldr	r3, [r3, #28]
 80078f0:	071b      	lsls	r3, r3, #28
 80078f2:	4917      	ldr	r1, [pc, #92]	; (8007950 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078f4:	4313      	orrs	r3, r2
 80078f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80078fa:	4b15      	ldr	r3, [pc, #84]	; (8007950 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007900:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007908:	4911      	ldr	r1, [pc, #68]	; (8007950 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800790a:	4313      	orrs	r3, r2
 800790c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007910:	4b0f      	ldr	r3, [pc, #60]	; (8007950 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a0e      	ldr	r2, [pc, #56]	; (8007950 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800791a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800791c:	f7fc f98c 	bl	8003c38 <HAL_GetTick>
 8007920:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007922:	e008      	b.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007924:	f7fc f988 	bl	8003c38 <HAL_GetTick>
 8007928:	4602      	mov	r2, r0
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	2b64      	cmp	r3, #100	; 0x64
 8007930:	d901      	bls.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	e007      	b.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007936:	4b06      	ldr	r3, [pc, #24]	; (8007950 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800793e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007942:	d1ef      	bne.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3720      	adds	r7, #32
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	40023800 	.word	0x40023800

08007954 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007954:	b480      	push	{r7}
 8007956:	b087      	sub	sp, #28
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800795c:	2300      	movs	r3, #0
 800795e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8007960:	2300      	movs	r3, #0
 8007962:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8007964:	2300      	movs	r3, #0
 8007966:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8007968:	2300      	movs	r3, #0
 800796a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007972:	f040 808d 	bne.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007976:	4b93      	ldr	r3, [pc, #588]	; (8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007978:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800797c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007984:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800798c:	d07c      	beq.n	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007994:	d87b      	bhi.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d004      	beq.n	80079a6 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079a2:	d039      	beq.n	8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80079a4:	e073      	b.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80079a6:	4b87      	ldr	r3, [pc, #540]	; (8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d108      	bne.n	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80079b2:	4b84      	ldr	r3, [pc, #528]	; (8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079ba:	4a83      	ldr	r2, [pc, #524]	; (8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80079bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80079c0:	613b      	str	r3, [r7, #16]
 80079c2:	e007      	b.n	80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80079c4:	4b7f      	ldr	r3, [pc, #508]	; (8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079cc:	4a7f      	ldr	r2, [pc, #508]	; (8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80079ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80079d2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80079d4:	4b7b      	ldr	r3, [pc, #492]	; (8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80079d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079da:	0e1b      	lsrs	r3, r3, #24
 80079dc:	f003 030f 	and.w	r3, r3, #15
 80079e0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80079e2:	4b78      	ldr	r3, [pc, #480]	; (8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80079e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079e8:	099b      	lsrs	r3, r3, #6
 80079ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ee:	693a      	ldr	r2, [r7, #16]
 80079f0:	fb03 f202 	mul.w	r2, r3, r2
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80079fa:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80079fc:	4b71      	ldr	r3, [pc, #452]	; (8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80079fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a02:	0a1b      	lsrs	r3, r3, #8
 8007a04:	f003 031f 	and.w	r3, r3, #31
 8007a08:	3301      	adds	r3, #1
 8007a0a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007a0c:	697a      	ldr	r2, [r7, #20]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a14:	617b      	str	r3, [r7, #20]
        break;
 8007a16:	e03b      	b.n	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007a18:	4b6a      	ldr	r3, [pc, #424]	; (8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d108      	bne.n	8007a36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007a24:	4b67      	ldr	r3, [pc, #412]	; (8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a2c:	4a66      	ldr	r2, [pc, #408]	; (8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a32:	613b      	str	r3, [r7, #16]
 8007a34:	e007      	b.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007a36:	4b63      	ldr	r3, [pc, #396]	; (8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a3e:	4a63      	ldr	r2, [pc, #396]	; (8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a44:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007a46:	4b5f      	ldr	r3, [pc, #380]	; (8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a4c:	0e1b      	lsrs	r3, r3, #24
 8007a4e:	f003 030f 	and.w	r3, r3, #15
 8007a52:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007a54:	4b5b      	ldr	r3, [pc, #364]	; (8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a5a:	099b      	lsrs	r3, r3, #6
 8007a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a60:	693a      	ldr	r2, [r7, #16]
 8007a62:	fb03 f202 	mul.w	r2, r3, r2
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a6c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007a6e:	4b55      	ldr	r3, [pc, #340]	; (8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a74:	f003 031f 	and.w	r3, r3, #31
 8007a78:	3301      	adds	r3, #1
 8007a7a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007a7c:	697a      	ldr	r2, [r7, #20]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a84:	617b      	str	r3, [r7, #20]
        break;
 8007a86:	e003      	b.n	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007a88:	4b51      	ldr	r3, [pc, #324]	; (8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007a8a:	617b      	str	r3, [r7, #20]
        break;
 8007a8c:	e000      	b.n	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8007a8e:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a96:	f040 808d 	bne.w	8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007a9a:	4b4a      	ldr	r3, [pc, #296]	; (8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007aa0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007aa8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ab0:	d07c      	beq.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ab8:	d87b      	bhi.n	8007bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d004      	beq.n	8007aca <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ac6:	d039      	beq.n	8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007ac8:	e073      	b.n	8007bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007aca:	4b3e      	ldr	r3, [pc, #248]	; (8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d108      	bne.n	8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007ad6:	4b3b      	ldr	r3, [pc, #236]	; (8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ade:	4a3a      	ldr	r2, [pc, #232]	; (8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ae4:	613b      	str	r3, [r7, #16]
 8007ae6:	e007      	b.n	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007ae8:	4b36      	ldr	r3, [pc, #216]	; (8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007af0:	4a36      	ldr	r2, [pc, #216]	; (8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007af6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007af8:	4b32      	ldr	r3, [pc, #200]	; (8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007afe:	0e1b      	lsrs	r3, r3, #24
 8007b00:	f003 030f 	and.w	r3, r3, #15
 8007b04:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007b06:	4b2f      	ldr	r3, [pc, #188]	; (8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b0c:	099b      	lsrs	r3, r3, #6
 8007b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b12:	693a      	ldr	r2, [r7, #16]
 8007b14:	fb03 f202 	mul.w	r2, r3, r2
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b1e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007b20:	4b28      	ldr	r3, [pc, #160]	; (8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b26:	0a1b      	lsrs	r3, r3, #8
 8007b28:	f003 031f 	and.w	r3, r3, #31
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007b30:	697a      	ldr	r2, [r7, #20]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b38:	617b      	str	r3, [r7, #20]
        break;
 8007b3a:	e03b      	b.n	8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007b3c:	4b21      	ldr	r3, [pc, #132]	; (8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d108      	bne.n	8007b5a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007b48:	4b1e      	ldr	r3, [pc, #120]	; (8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b50:	4a1d      	ldr	r2, [pc, #116]	; (8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b56:	613b      	str	r3, [r7, #16]
 8007b58:	e007      	b.n	8007b6a <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007b5a:	4b1a      	ldr	r3, [pc, #104]	; (8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b62:	4a1a      	ldr	r2, [pc, #104]	; (8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b68:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007b6a:	4b16      	ldr	r3, [pc, #88]	; (8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b70:	0e1b      	lsrs	r3, r3, #24
 8007b72:	f003 030f 	and.w	r3, r3, #15
 8007b76:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007b78:	4b12      	ldr	r3, [pc, #72]	; (8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b7e:	099b      	lsrs	r3, r3, #6
 8007b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b84:	693a      	ldr	r2, [r7, #16]
 8007b86:	fb03 f202 	mul.w	r2, r3, r2
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b90:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007b92:	4b0c      	ldr	r3, [pc, #48]	; (8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b98:	f003 031f 	and.w	r3, r3, #31
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007ba0:	697a      	ldr	r2, [r7, #20]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ba8:	617b      	str	r3, [r7, #20]
        break;
 8007baa:	e003      	b.n	8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007bac:	4b08      	ldr	r3, [pc, #32]	; (8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007bae:	617b      	str	r3, [r7, #20]
        break;
 8007bb0:	e000      	b.n	8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8007bb2:	bf00      	nop
      }
    }
  }

  return frequency;
 8007bb4:	697b      	ldr	r3, [r7, #20]
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	371c      	adds	r7, #28
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	40023800 	.word	0x40023800
 8007bc8:	00f42400 	.word	0x00f42400
 8007bcc:	017d7840 	.word	0x017d7840
 8007bd0:	00bb8000 	.word	0x00bb8000

08007bd4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d101      	bne.n	8007be6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	e06b      	b.n	8007cbe <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	7f5b      	ldrb	r3, [r3, #29]
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d105      	bne.n	8007bfc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f7fb fa54 	bl	80030a4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2202      	movs	r2, #2
 8007c00:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	22ca      	movs	r2, #202	; 0xca
 8007c08:	625a      	str	r2, [r3, #36]	; 0x24
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2253      	movs	r2, #83	; 0x53
 8007c10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 fb00 	bl	8008218 <RTC_EnterInitMode>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d008      	beq.n	8007c30 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	22ff      	movs	r2, #255	; 0xff
 8007c24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2204      	movs	r2, #4
 8007c2a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e046      	b.n	8007cbe <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	6899      	ldr	r1, [r3, #8]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	4b23      	ldr	r3, [pc, #140]	; (8007cc8 <HAL_RTC_Init+0xf4>)
 8007c3c:	400b      	ands	r3, r1
 8007c3e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	6899      	ldr	r1, [r3, #8]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	685a      	ldr	r2, [r3, #4]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	691b      	ldr	r3, [r3, #16]
 8007c4e:	431a      	orrs	r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	695b      	ldr	r3, [r3, #20]
 8007c54:	431a      	orrs	r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	430a      	orrs	r2, r1
 8007c5c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	68d2      	ldr	r2, [r2, #12]
 8007c66:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	6919      	ldr	r1, [r3, #16]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	041a      	lsls	r2, r3, #16
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	430a      	orrs	r2, r1
 8007c7a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	68da      	ldr	r2, [r3, #12]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c8a:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f022 0208 	bic.w	r2, r2, #8
 8007c9a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	699a      	ldr	r2, [r3, #24]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	430a      	orrs	r2, r1
 8007cac:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	22ff      	movs	r2, #255	; 0xff
 8007cb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2201      	movs	r2, #1
 8007cba:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
  }
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3708      	adds	r7, #8
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	ff8fffbf 	.word	0xff8fffbf

08007ccc <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007ccc:	b590      	push	{r4, r7, lr}
 8007cce:	b087      	sub	sp, #28
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	7f1b      	ldrb	r3, [r3, #28]
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d101      	bne.n	8007ce8 <HAL_RTC_SetTime+0x1c>
 8007ce4:	2302      	movs	r3, #2
 8007ce6:	e0a8      	b.n	8007e3a <HAL_RTC_SetTime+0x16e>
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2201      	movs	r2, #1
 8007cec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2202      	movs	r2, #2
 8007cf2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d126      	bne.n	8007d48 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d102      	bne.n	8007d0e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	4618      	mov	r0, r3
 8007d14:	f000 faac 	bl	8008270 <RTC_ByteToBcd2>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	785b      	ldrb	r3, [r3, #1]
 8007d20:	4618      	mov	r0, r3
 8007d22:	f000 faa5 	bl	8008270 <RTC_ByteToBcd2>
 8007d26:	4603      	mov	r3, r0
 8007d28:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007d2a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	789b      	ldrb	r3, [r3, #2]
 8007d30:	4618      	mov	r0, r3
 8007d32:	f000 fa9d 	bl	8008270 <RTC_ByteToBcd2>
 8007d36:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007d38:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	7b1b      	ldrb	r3, [r3, #12]
 8007d40:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007d42:	4313      	orrs	r3, r2
 8007d44:	617b      	str	r3, [r7, #20]
 8007d46:	e018      	b.n	8007d7a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d102      	bne.n	8007d5c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	785b      	ldrb	r3, [r3, #1]
 8007d66:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007d68:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007d6a:	68ba      	ldr	r2, [r7, #8]
 8007d6c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007d6e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	7b1b      	ldrb	r3, [r3, #12]
 8007d74:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007d76:	4313      	orrs	r3, r2
 8007d78:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	22ca      	movs	r2, #202	; 0xca
 8007d80:	625a      	str	r2, [r3, #36]	; 0x24
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2253      	movs	r2, #83	; 0x53
 8007d88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	f000 fa44 	bl	8008218 <RTC_EnterInitMode>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00b      	beq.n	8007dae <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	22ff      	movs	r2, #255	; 0xff
 8007d9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2204      	movs	r2, #4
 8007da2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2200      	movs	r2, #0
 8007da8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	e045      	b.n	8007e3a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	6979      	ldr	r1, [r7, #20]
 8007db4:	4b23      	ldr	r3, [pc, #140]	; (8007e44 <HAL_RTC_SetTime+0x178>)
 8007db6:	400b      	ands	r3, r1
 8007db8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	689a      	ldr	r2, [r3, #8]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007dc8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	6899      	ldr	r1, [r3, #8]
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	691a      	ldr	r2, [r3, #16]
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	695b      	ldr	r3, [r3, #20]
 8007dd8:	431a      	orrs	r2, r3
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	430a      	orrs	r2, r1
 8007de0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	68da      	ldr	r2, [r3, #12]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007df0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	f003 0320 	and.w	r3, r3, #32
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d111      	bne.n	8007e24 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	f000 f9e1 	bl	80081c8 <HAL_RTC_WaitForSynchro>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00b      	beq.n	8007e24 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	22ff      	movs	r2, #255	; 0xff
 8007e12:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2204      	movs	r2, #4
 8007e18:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	e00a      	b.n	8007e3a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	22ff      	movs	r2, #255	; 0xff
 8007e2a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2200      	movs	r2, #0
 8007e36:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8007e38:	2300      	movs	r3, #0
  }
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	371c      	adds	r7, #28
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd90      	pop	{r4, r7, pc}
 8007e42:	bf00      	nop
 8007e44:	007f7f7f 	.word	0x007f7f7f

08007e48 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007e48:	b590      	push	{r4, r7, lr}
 8007e4a:	b087      	sub	sp, #28
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	60b9      	str	r1, [r7, #8]
 8007e52:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8007e54:	2300      	movs	r3, #0
 8007e56:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	7f1b      	ldrb	r3, [r3, #28]
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d101      	bne.n	8007e64 <HAL_RTC_SetDate+0x1c>
 8007e60:	2302      	movs	r3, #2
 8007e62:	e092      	b.n	8007f8a <HAL_RTC_SetDate+0x142>
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2201      	movs	r2, #1
 8007e68:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2202      	movs	r2, #2
 8007e6e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d10e      	bne.n	8007e94 <HAL_RTC_SetDate+0x4c>
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	785b      	ldrb	r3, [r3, #1]
 8007e7a:	f003 0310 	and.w	r3, r3, #16
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d008      	beq.n	8007e94 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	785b      	ldrb	r3, [r3, #1]
 8007e86:	f023 0310 	bic.w	r3, r3, #16
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	330a      	adds	r3, #10
 8007e8e:	b2da      	uxtb	r2, r3
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d11c      	bne.n	8007ed4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	78db      	ldrb	r3, [r3, #3]
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f000 f9e6 	bl	8008270 <RTC_ByteToBcd2>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	785b      	ldrb	r3, [r3, #1]
 8007eac:	4618      	mov	r0, r3
 8007eae:	f000 f9df 	bl	8008270 <RTC_ByteToBcd2>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007eb6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	789b      	ldrb	r3, [r3, #2]
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f000 f9d7 	bl	8008270 <RTC_ByteToBcd2>
 8007ec2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007ec4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	617b      	str	r3, [r7, #20]
 8007ed2:	e00e      	b.n	8007ef2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	78db      	ldrb	r3, [r3, #3]
 8007ed8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	785b      	ldrb	r3, [r3, #1]
 8007ede:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007ee0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007ee2:	68ba      	ldr	r2, [r7, #8]
 8007ee4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8007ee6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	22ca      	movs	r2, #202	; 0xca
 8007ef8:	625a      	str	r2, [r3, #36]	; 0x24
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2253      	movs	r2, #83	; 0x53
 8007f00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007f02:	68f8      	ldr	r0, [r7, #12]
 8007f04:	f000 f988 	bl	8008218 <RTC_EnterInitMode>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d00b      	beq.n	8007f26 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	22ff      	movs	r2, #255	; 0xff
 8007f14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2204      	movs	r2, #4
 8007f1a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	e031      	b.n	8007f8a <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	6979      	ldr	r1, [r7, #20]
 8007f2c:	4b19      	ldr	r3, [pc, #100]	; (8007f94 <HAL_RTC_SetDate+0x14c>)
 8007f2e:	400b      	ands	r3, r1
 8007f30:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	68da      	ldr	r2, [r3, #12]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f40:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	f003 0320 	and.w	r3, r3, #32
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d111      	bne.n	8007f74 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f000 f939 	bl	80081c8 <HAL_RTC_WaitForSynchro>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00b      	beq.n	8007f74 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	22ff      	movs	r2, #255	; 0xff
 8007f62:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2204      	movs	r2, #4
 8007f68:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e00a      	b.n	8007f8a <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	22ff      	movs	r2, #255	; 0xff
 8007f7a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2200      	movs	r2, #0
 8007f86:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007f88:	2300      	movs	r3, #0
  }
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	371c      	adds	r7, #28
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd90      	pop	{r4, r7, pc}
 8007f92:	bf00      	nop
 8007f94:	00ffff3f 	.word	0x00ffff3f

08007f98 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007f98:	b590      	push	{r4, r7, lr}
 8007f9a:	b089      	sub	sp, #36	; 0x24
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	61fb      	str	r3, [r7, #28]
 8007fac:	2300      	movs	r3, #0
 8007fae:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	7f1b      	ldrb	r3, [r3, #28]
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d101      	bne.n	8007fbc <HAL_RTC_SetAlarm+0x24>
 8007fb8:	2302      	movs	r3, #2
 8007fba:	e101      	b.n	80081c0 <HAL_RTC_SetAlarm+0x228>
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2202      	movs	r2, #2
 8007fc6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d137      	bne.n	800803e <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d102      	bne.n	8007fe2 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f000 f942 	bl	8008270 <RTC_ByteToBcd2>
 8007fec:	4603      	mov	r3, r0
 8007fee:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	785b      	ldrb	r3, [r3, #1]
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f000 f93b 	bl	8008270 <RTC_ByteToBcd2>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007ffe:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	789b      	ldrb	r3, [r3, #2]
 8008004:	4618      	mov	r0, r3
 8008006:	f000 f933 	bl	8008270 <RTC_ByteToBcd2>
 800800a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800800c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	7b1b      	ldrb	r3, [r3, #12]
 8008014:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008016:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008020:	4618      	mov	r0, r3
 8008022:	f000 f925 	bl	8008270 <RTC_ByteToBcd2>
 8008026:	4603      	mov	r3, r0
 8008028:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800802a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008032:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008038:	4313      	orrs	r3, r2
 800803a:	61fb      	str	r3, [r7, #28]
 800803c:	e023      	b.n	8008086 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008048:	2b00      	cmp	r3, #0
 800804a:	d102      	bne.n	8008052 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	2200      	movs	r2, #0
 8008050:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	785b      	ldrb	r3, [r3, #1]
 800805c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800805e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008060:	68ba      	ldr	r2, [r7, #8]
 8008062:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008064:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	7b1b      	ldrb	r3, [r3, #12]
 800806a:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800806c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008074:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008076:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800807c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008082:	4313      	orrs	r3, r2
 8008084:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	685a      	ldr	r2, [r3, #4]
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	69db      	ldr	r3, [r3, #28]
 800808e:	4313      	orrs	r3, r2
 8008090:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	22ca      	movs	r2, #202	; 0xca
 8008098:	625a      	str	r2, [r3, #36]	; 0x24
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2253      	movs	r2, #83	; 0x53
 80080a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080aa:	d13f      	bne.n	800812c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	689a      	ldr	r2, [r3, #8]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80080ba:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	689a      	ldr	r2, [r3, #8]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80080ca:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80080cc:	f7fb fdb4 	bl	8003c38 <HAL_GetTick>
 80080d0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80080d2:	e013      	b.n	80080fc <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80080d4:	f7fb fdb0 	bl	8003c38 <HAL_GetTick>
 80080d8:	4602      	mov	r2, r0
 80080da:	69bb      	ldr	r3, [r7, #24]
 80080dc:	1ad3      	subs	r3, r2, r3
 80080de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080e2:	d90b      	bls.n	80080fc <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	22ff      	movs	r2, #255	; 0xff
 80080ea:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2203      	movs	r2, #3
 80080f0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2200      	movs	r2, #0
 80080f6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80080f8:	2303      	movs	r3, #3
 80080fa:	e061      	b.n	80081c0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	f003 0301 	and.w	r3, r3, #1
 8008106:	2b00      	cmp	r3, #0
 8008108:	d0e4      	beq.n	80080d4 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	69fa      	ldr	r2, [r7, #28]
 8008110:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	697a      	ldr	r2, [r7, #20]
 8008118:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	689a      	ldr	r2, [r3, #8]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008128:	609a      	str	r2, [r3, #8]
 800812a:	e03e      	b.n	80081aa <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	689a      	ldr	r2, [r3, #8]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800813a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	689a      	ldr	r2, [r3, #8]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800814a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800814c:	f7fb fd74 	bl	8003c38 <HAL_GetTick>
 8008150:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008152:	e013      	b.n	800817c <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008154:	f7fb fd70 	bl	8003c38 <HAL_GetTick>
 8008158:	4602      	mov	r2, r0
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	1ad3      	subs	r3, r2, r3
 800815e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008162:	d90b      	bls.n	800817c <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	22ff      	movs	r2, #255	; 0xff
 800816a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2203      	movs	r2, #3
 8008170:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2200      	movs	r2, #0
 8008176:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008178:	2303      	movs	r3, #3
 800817a:	e021      	b.n	80081c0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	f003 0302 	and.w	r3, r3, #2
 8008186:	2b00      	cmp	r3, #0
 8008188:	d0e4      	beq.n	8008154 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	69fa      	ldr	r2, [r7, #28]
 8008190:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	697a      	ldr	r2, [r7, #20]
 8008198:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	689a      	ldr	r2, [r3, #8]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081a8:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	22ff      	movs	r2, #255	; 0xff
 80081b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2201      	movs	r2, #1
 80081b6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80081be:	2300      	movs	r3, #0
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3724      	adds	r7, #36	; 0x24
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd90      	pop	{r4, r7, pc}

080081c8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80081d0:	2300      	movs	r3, #0
 80081d2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	68da      	ldr	r2, [r3, #12]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80081e2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80081e4:	f7fb fd28 	bl	8003c38 <HAL_GetTick>
 80081e8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80081ea:	e009      	b.n	8008200 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80081ec:	f7fb fd24 	bl	8003c38 <HAL_GetTick>
 80081f0:	4602      	mov	r2, r0
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	1ad3      	subs	r3, r2, r3
 80081f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081fa:	d901      	bls.n	8008200 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80081fc:	2303      	movs	r3, #3
 80081fe:	e007      	b.n	8008210 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	f003 0320 	and.w	r3, r3, #32
 800820a:	2b00      	cmp	r3, #0
 800820c:	d0ee      	beq.n	80081ec <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	3710      	adds	r7, #16
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008220:	2300      	movs	r3, #0
 8008222:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800822e:	2b00      	cmp	r3, #0
 8008230:	d119      	bne.n	8008266 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f04f 32ff 	mov.w	r2, #4294967295
 800823a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800823c:	f7fb fcfc 	bl	8003c38 <HAL_GetTick>
 8008240:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008242:	e009      	b.n	8008258 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008244:	f7fb fcf8 	bl	8003c38 <HAL_GetTick>
 8008248:	4602      	mov	r2, r0
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008252:	d901      	bls.n	8008258 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008254:	2303      	movs	r3, #3
 8008256:	e007      	b.n	8008268 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68db      	ldr	r3, [r3, #12]
 800825e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008262:	2b00      	cmp	r3, #0
 8008264:	d0ee      	beq.n	8008244 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3710      	adds	r7, #16
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	4603      	mov	r3, r0
 8008278:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800827a:	2300      	movs	r3, #0
 800827c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800827e:	e005      	b.n	800828c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	3301      	adds	r3, #1
 8008284:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8008286:	79fb      	ldrb	r3, [r7, #7]
 8008288:	3b0a      	subs	r3, #10
 800828a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800828c:	79fb      	ldrb	r3, [r7, #7]
 800828e:	2b09      	cmp	r3, #9
 8008290:	d8f6      	bhi.n	8008280 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	b2db      	uxtb	r3, r3
 8008296:	011b      	lsls	r3, r3, #4
 8008298:	b2da      	uxtb	r2, r3
 800829a:	79fb      	ldrb	r3, [r7, #7]
 800829c:	4313      	orrs	r3, r2
 800829e:	b2db      	uxtb	r3, r3
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3714      	adds	r7, #20
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b087      	sub	sp, #28
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80082b8:	2300      	movs	r3, #0
 80082ba:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	7f1b      	ldrb	r3, [r3, #28]
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d101      	bne.n	80082c8 <HAL_RTCEx_SetTimeStamp+0x1c>
 80082c4:	2302      	movs	r3, #2
 80082c6:	e03e      	b.n	8008346 <HAL_RTCEx_SetTimeStamp+0x9a>
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2201      	movs	r2, #1
 80082cc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2202      	movs	r2, #2
 80082d2:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	689a      	ldr	r2, [r3, #8]
 80082da:	4b1e      	ldr	r3, [pc, #120]	; (8008354 <HAL_RTCEx_SetTimeStamp+0xa8>)
 80082dc:	4013      	ands	r3, r2
 80082de:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 80082e0:	697a      	ldr	r2, [r7, #20]
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	4313      	orrs	r3, r2
 80082e6:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	22ca      	movs	r2, #202	; 0xca
 80082ee:	625a      	str	r2, [r3, #36]	; 0x24
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	2253      	movs	r2, #83	; 0x53
 80082f6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f022 0206 	bic.w	r2, r2, #6
 8008306:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	430a      	orrs	r2, r1
 8008316:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	697a      	ldr	r2, [r7, #20]
 800831e:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	689a      	ldr	r2, [r3, #8]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800832e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	22ff      	movs	r2, #255	; 0xff
 8008336:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2201      	movs	r2, #1
 800833c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2200      	movs	r2, #0
 8008342:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	371c      	adds	r7, #28
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	fffff7f7 	.word	0xfffff7f7

08008358 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b088      	sub	sp, #32
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8008360:	2300      	movs	r3, #0
 8008362:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8008364:	2300      	movs	r3, #0
 8008366:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8008368:	2300      	movs	r3, #0
 800836a:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d101      	bne.n	8008376 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e14d      	b.n	8008612 <HAL_SAI_Init+0x2ba>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800837c:	b2db      	uxtb	r3, r3
 800837e:	2b00      	cmp	r3, #0
 8008380:	d106      	bne.n	8008390 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f7fb fa34 	bl	80037f8 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2202      	movs	r2, #2
 8008394:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 f953 	bl	8008644 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	2b02      	cmp	r3, #2
 80083a4:	d00c      	beq.n	80083c0 <HAL_SAI_Init+0x68>
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	d80d      	bhi.n	80083c6 <HAL_SAI_Init+0x6e>
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d002      	beq.n	80083b4 <HAL_SAI_Init+0x5c>
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d003      	beq.n	80083ba <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 80083b2:	e008      	b.n	80083c6 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 80083b4:	2300      	movs	r3, #0
 80083b6:	61fb      	str	r3, [r7, #28]
      break;
 80083b8:	e006      	b.n	80083c8 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80083ba:	2310      	movs	r3, #16
 80083bc:	61fb      	str	r3, [r7, #28]
      break;
 80083be:	e003      	b.n	80083c8 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80083c0:	2320      	movs	r3, #32
 80083c2:	61fb      	str	r3, [r7, #28]
      break;
 80083c4:	e000      	b.n	80083c8 <HAL_SAI_Init+0x70>
    break;
 80083c6:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	2b03      	cmp	r3, #3
 80083ce:	d81e      	bhi.n	800840e <HAL_SAI_Init+0xb6>
 80083d0:	a201      	add	r2, pc, #4	; (adr r2, 80083d8 <HAL_SAI_Init+0x80>)
 80083d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d6:	bf00      	nop
 80083d8:	080083e9 	.word	0x080083e9
 80083dc:	080083ef 	.word	0x080083ef
 80083e0:	080083f7 	.word	0x080083f7
 80083e4:	080083ff 	.word	0x080083ff
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 80083e8:	2300      	movs	r3, #0
 80083ea:	617b      	str	r3, [r7, #20]
      }
      break;
 80083ec:	e010      	b.n	8008410 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 80083ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083f2:	617b      	str	r3, [r7, #20]
      }
      break;
 80083f4:	e00c      	b.n	8008410 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80083f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80083fa:	617b      	str	r3, [r7, #20]
      }
      break;
 80083fc:	e008      	b.n	8008410 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80083fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008402:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	f043 0301 	orr.w	r3, r3, #1
 800840a:	61fb      	str	r3, [r7, #28]
      }
      break;
 800840c:	e000      	b.n	8008410 <HAL_SAI_Init+0xb8>
  default:
    break;
 800840e:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a81      	ldr	r2, [pc, #516]	; (800861c <HAL_SAI_Init+0x2c4>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d004      	beq.n	8008424 <HAL_SAI_Init+0xcc>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a80      	ldr	r2, [pc, #512]	; (8008620 <HAL_SAI_Init+0x2c8>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d103      	bne.n	800842c <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8008424:	4a7f      	ldr	r2, [pc, #508]	; (8008624 <HAL_SAI_Init+0x2cc>)
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	6013      	str	r3, [r2, #0]
 800842a:	e002      	b.n	8008432 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800842c:	4a7e      	ldr	r2, [pc, #504]	; (8008628 <HAL_SAI_Init+0x2d0>)
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	69db      	ldr	r3, [r3, #28]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d043      	beq.n	80084c2 <HAL_SAI_Init+0x16a>
  {
    uint32_t freq = 0;
 800843a:	2300      	movs	r3, #0
 800843c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a76      	ldr	r2, [pc, #472]	; (800861c <HAL_SAI_Init+0x2c4>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d004      	beq.n	8008452 <HAL_SAI_Init+0xfa>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a74      	ldr	r2, [pc, #464]	; (8008620 <HAL_SAI_Init+0x2c8>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d104      	bne.n	800845c <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008452:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008456:	f7ff fa7d 	bl	8007954 <HAL_RCCEx_GetPeriphCLKFreq>
 800845a:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a72      	ldr	r2, [pc, #456]	; (800862c <HAL_SAI_Init+0x2d4>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d004      	beq.n	8008470 <HAL_SAI_Init+0x118>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a71      	ldr	r2, [pc, #452]	; (8008630 <HAL_SAI_Init+0x2d8>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d104      	bne.n	800847a <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008470:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008474:	f7ff fa6e 	bl	8007954 <HAL_RCCEx_GetPeriphCLKFreq>
 8008478:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800847a:	693a      	ldr	r2, [r7, #16]
 800847c:	4613      	mov	r3, r2
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	4413      	add	r3, r2
 8008482:	005b      	lsls	r3, r3, #1
 8008484:	461a      	mov	r2, r3
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	69db      	ldr	r3, [r3, #28]
 800848a:	025b      	lsls	r3, r3, #9
 800848c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008490:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	4a67      	ldr	r2, [pc, #412]	; (8008634 <HAL_SAI_Init+0x2dc>)
 8008496:	fba2 2303 	umull	r2, r3, r2, r3
 800849a:	08da      	lsrs	r2, r3, #3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 80084a0:	68f9      	ldr	r1, [r7, #12]
 80084a2:	4b64      	ldr	r3, [pc, #400]	; (8008634 <HAL_SAI_Init+0x2dc>)
 80084a4:	fba3 2301 	umull	r2, r3, r3, r1
 80084a8:	08da      	lsrs	r2, r3, #3
 80084aa:	4613      	mov	r3, r2
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	4413      	add	r3, r2
 80084b0:	005b      	lsls	r3, r3, #1
 80084b2:	1aca      	subs	r2, r1, r3
 80084b4:	2a08      	cmp	r2, #8
 80084b6:	d904      	bls.n	80084c2 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv+= 1;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6a1b      	ldr	r3, [r3, #32]
 80084bc:	1c5a      	adds	r2, r3, #1
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d003      	beq.n	80084d2 <HAL_SAI_Init+0x17a>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	2b02      	cmp	r3, #2
 80084d0:	d109      	bne.n	80084e6 <HAL_SAI_Init+0x18e>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d101      	bne.n	80084de <HAL_SAI_Init+0x186>
 80084da:	2300      	movs	r3, #0
 80084dc:	e001      	b.n	80084e2 <HAL_SAI_Init+0x18a>
 80084de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084e2:	61bb      	str	r3, [r7, #24]
 80084e4:	e008      	b.n	80084f8 <HAL_SAI_Init+0x1a0>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d102      	bne.n	80084f4 <HAL_SAI_Init+0x19c>
 80084ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084f2:	e000      	b.n	80084f6 <HAL_SAI_Init+0x19e>
 80084f4:	2300      	movs	r3, #0
 80084f6:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	6819      	ldr	r1, [r3, #0]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	4b4d      	ldr	r3, [pc, #308]	; (8008638 <HAL_SAI_Init+0x2e0>)
 8008504:	400b      	ands	r3, r1
 8008506:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	6819      	ldr	r1, [r3, #0]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	685a      	ldr	r2, [r3, #4]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008516:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800851c:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008522:	431a      	orrs	r2, r3
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8008530:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800853c:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6a1b      	ldr	r3, [r3, #32]
 8008542:	051b      	lsls	r3, r3, #20
 8008544:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	430a      	orrs	r2, r1
 800854c:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	6859      	ldr	r1, [r3, #4]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	4b38      	ldr	r3, [pc, #224]	; (800863c <HAL_SAI_Init+0x2e4>)
 800855a:	400b      	ands	r3, r1
 800855c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	6859      	ldr	r1, [r3, #4]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	699a      	ldr	r2, [r3, #24]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800856c:	431a      	orrs	r2, r3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008572:	431a      	orrs	r2, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	430a      	orrs	r2, r1
 800857a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	6899      	ldr	r1, [r3, #8]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	4b2e      	ldr	r3, [pc, #184]	; (8008640 <HAL_SAI_Init+0x2e8>)
 8008588:	400b      	ands	r3, r1
 800858a:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	6899      	ldr	r1, [r3, #8]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008596:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800859c:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 80085a2:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 80085a8:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ae:	3b01      	subs	r3, #1
 80085b0:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 80085b2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	430a      	orrs	r2, r1
 80085ba:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	68d9      	ldr	r1, [r3, #12]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	f24f 0320 	movw	r3, #61472	; 0xf020
 80085ca:	400b      	ands	r3, r1
 80085cc:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68d9      	ldr	r1, [r3, #12]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085dc:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085e2:	041b      	lsls	r3, r3, #16
 80085e4:	431a      	orrs	r2, r3
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085ea:	3b01      	subs	r3, #1
 80085ec:	021b      	lsls	r3, r3, #8
 80085ee:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	430a      	orrs	r2, r1
 80085f6:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	3720      	adds	r7, #32
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	40015804 	.word	0x40015804
 8008620:	40015824 	.word	0x40015824
 8008624:	40015800 	.word	0x40015800
 8008628:	40015c00 	.word	0x40015c00
 800862c:	40015c04 	.word	0x40015c04
 8008630:	40015c24 	.word	0x40015c24
 8008634:	cccccccd 	.word	0xcccccccd
 8008638:	ff05c010 	.word	0xff05c010
 800863c:	ffff1ff0 	.word	0xffff1ff0
 8008640:	fff88000 	.word	0xfff88000

08008644 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008644:	b490      	push	{r4, r7}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800864c:	4b16      	ldr	r3, [pc, #88]	; (80086a8 <SAI_Disable+0x64>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a16      	ldr	r2, [pc, #88]	; (80086ac <SAI_Disable+0x68>)
 8008652:	fba2 2303 	umull	r2, r3, r2, r3
 8008656:	0b1b      	lsrs	r3, r3, #12
 8008658:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800865a:	2300      	movs	r3, #0
 800865c:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800866c:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800866e:	4623      	mov	r3, r4
 8008670:	1e5c      	subs	r4, r3, #1
 8008672:	2b00      	cmp	r3, #0
 8008674:	d10a      	bne.n	800868c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800867c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8008686:	2303      	movs	r3, #3
 8008688:	73fb      	strb	r3, [r7, #15]
      break;
 800868a:	e006      	b.n	800869a <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008696:	2b00      	cmp	r3, #0
 8008698:	d1e9      	bne.n	800866e <SAI_Disable+0x2a>

  return status;
 800869a:	7bfb      	ldrb	r3, [r7, #15]
}
 800869c:	4618      	mov	r0, r3
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bc90      	pop	{r4, r7}
 80086a4:	4770      	bx	lr
 80086a6:	bf00      	nop
 80086a8:	20000014 	.word	0x20000014
 80086ac:	95cbec1b 	.word	0x95cbec1b

080086b0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d101      	bne.n	80086c2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	e022      	b.n	8008708 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d105      	bne.n	80086da <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f7fa fcff 	bl	80030d8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2203      	movs	r2, #3
 80086de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 f814 	bl	8008710 <HAL_SD_InitCard>
 80086e8:	4603      	mov	r3, r0
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d001      	beq.n	80086f2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	e00a      	b.n	8008708 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2201      	movs	r2, #1
 8008702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008706:	2300      	movs	r3, #0
}
 8008708:	4618      	mov	r0, r3
 800870a:	3708      	adds	r7, #8
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008710:	b5b0      	push	{r4, r5, r7, lr}
 8008712:	b08e      	sub	sp, #56	; 0x38
 8008714:	af04      	add	r7, sp, #16
 8008716:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008718:	2300      	movs	r3, #0
 800871a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800871c:	2300      	movs	r3, #0
 800871e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008720:	2300      	movs	r3, #0
 8008722:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008724:	2300      	movs	r3, #0
 8008726:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008728:	2300      	movs	r3, #0
 800872a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800872c:	2376      	movs	r3, #118	; 0x76
 800872e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681d      	ldr	r5, [r3, #0]
 8008734:	466c      	mov	r4, sp
 8008736:	f107 0314 	add.w	r3, r7, #20
 800873a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800873e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008742:	f107 0308 	add.w	r3, r7, #8
 8008746:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008748:	4628      	mov	r0, r5
 800874a:	f002 ff61 	bl	800b610 <SDMMC_Init>
 800874e:	4603      	mov	r3, r0
 8008750:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008754:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008758:	2b00      	cmp	r3, #0
 800875a:	d001      	beq.n	8008760 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800875c:	2301      	movs	r3, #1
 800875e:	e03b      	b.n	80087d8 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	685a      	ldr	r2, [r3, #4]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800876e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4618      	mov	r0, r3
 8008776:	f002 ff84 	bl	800b682 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	685a      	ldr	r2, [r3, #4]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008788:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 fde6 	bl	800935c <SD_PowerON>
 8008790:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008792:	6a3b      	ldr	r3, [r7, #32]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d00b      	beq.n	80087b0 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087a4:	6a3b      	ldr	r3, [r7, #32]
 80087a6:	431a      	orrs	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	e013      	b.n	80087d8 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 fd05 	bl	80091c0 <SD_InitCard>
 80087b6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80087b8:	6a3b      	ldr	r3, [r7, #32]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00b      	beq.n	80087d6 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2201      	movs	r2, #1
 80087c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087ca:	6a3b      	ldr	r3, [r7, #32]
 80087cc:	431a      	orrs	r2, r3
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	e000      	b.n	80087d8 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 80087d6:	2300      	movs	r3, #0
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3728      	adds	r7, #40	; 0x28
 80087dc:	46bd      	mov	sp, r7
 80087de:	bdb0      	pop	{r4, r5, r7, pc}

080087e0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b08c      	sub	sp, #48	; 0x30
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	607a      	str	r2, [r7, #4]
 80087ec:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d107      	bne.n	8008808 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	e0cc      	b.n	80089a2 <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800880e:	b2db      	uxtb	r3, r3
 8008810:	2b01      	cmp	r3, #1
 8008812:	f040 80c5 	bne.w	80089a0 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2200      	movs	r2, #0
 800881a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800881c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	441a      	add	r2, r3
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008826:	429a      	cmp	r2, r3
 8008828:	d907      	bls.n	800883a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800882e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	e0b3      	b.n	80089a2 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2203      	movs	r2, #3
 800883e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	2200      	movs	r2, #0
 8008848:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008858:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800885e:	4a53      	ldr	r2, [pc, #332]	; (80089ac <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8008860:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008866:	4a52      	ldr	r2, [pc, #328]	; (80089b0 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8008868:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886e:	2200      	movs	r2, #0
 8008870:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	3380      	adds	r3, #128	; 0x80
 800887c:	4619      	mov	r1, r3
 800887e:	68ba      	ldr	r2, [r7, #8]
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	025b      	lsls	r3, r3, #9
 8008884:	089b      	lsrs	r3, r3, #2
 8008886:	f7fc fc8f 	bl	80051a8 <HAL_DMA_Start_IT>
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d017      	beq.n	80088c0 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800889e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a43      	ldr	r2, [pc, #268]	; (80089b4 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 80088a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	e070      	b.n	80089a2 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f042 0208 	orr.w	r2, r2, #8
 80088ce:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d002      	beq.n	80088de <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 80088d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088da:	025b      	lsls	r3, r3, #9
 80088dc:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80088e6:	4618      	mov	r0, r3
 80088e8:	f002 ff5e 	bl	800b7a8 <SDMMC_CmdBlockLength>
 80088ec:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 80088ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d00f      	beq.n	8008914 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a2e      	ldr	r2, [pc, #184]	; (80089b4 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 80088fa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008902:	431a      	orrs	r2, r3
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2201      	movs	r2, #1
 800890c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	e046      	b.n	80089a2 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008914:	f04f 33ff 	mov.w	r3, #4294967295
 8008918:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	025b      	lsls	r3, r3, #9
 800891e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008920:	2390      	movs	r3, #144	; 0x90
 8008922:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008924:	2302      	movs	r3, #2
 8008926:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008928:	2300      	movs	r3, #0
 800892a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800892c:	2301      	movs	r3, #1
 800892e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f107 0210 	add.w	r2, r7, #16
 8008938:	4611      	mov	r1, r2
 800893a:	4618      	mov	r0, r3
 800893c:	f002 ff08 	bl	800b750 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	2b01      	cmp	r3, #1
 8008944:	d90a      	bls.n	800895c <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2282      	movs	r2, #130	; 0x82
 800894a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008952:	4618      	mov	r0, r3
 8008954:	f002 ff6c 	bl	800b830 <SDMMC_CmdReadMultiBlock>
 8008958:	62f8      	str	r0, [r7, #44]	; 0x2c
 800895a:	e009      	b.n	8008970 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2281      	movs	r2, #129	; 0x81
 8008960:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008968:	4618      	mov	r0, r3
 800896a:	f002 ff3f 	bl	800b7ec <SDMMC_CmdReadSingleBlock>
 800896e:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008972:	2b00      	cmp	r3, #0
 8008974:	d012      	beq.n	800899c <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a0e      	ldr	r2, [pc, #56]	; (80089b4 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800897c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008984:	431a      	orrs	r2, r3
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2201      	movs	r2, #1
 800898e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2200      	movs	r2, #0
 8008996:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	e002      	b.n	80089a2 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 800899c:	2300      	movs	r3, #0
 800899e:	e000      	b.n	80089a2 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 80089a0:	2302      	movs	r3, #2
  }
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3730      	adds	r7, #48	; 0x30
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	080090ab 	.word	0x080090ab
 80089b0:	0800911d 	.word	0x0800911d
 80089b4:	004005ff 	.word	0x004005ff

080089b8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b08c      	sub	sp, #48	; 0x30
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	607a      	str	r2, [r7, #4]
 80089c4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d107      	bne.n	80089e0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80089dc:	2301      	movs	r3, #1
 80089de:	e0cf      	b.n	8008b80 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80089e6:	b2db      	uxtb	r3, r3
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	f040 80c8 	bne.w	8008b7e <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80089f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	441a      	add	r2, r3
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d907      	bls.n	8008a12 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a06:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e0b6      	b.n	8008b80 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2203      	movs	r2, #3
 8008a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f042 021a 	orr.w	r2, r2, #26
 8008a30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a36:	4a54      	ldr	r2, [pc, #336]	; (8008b88 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8008a38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a3e:	4a53      	ldr	r2, [pc, #332]	; (8008b8c <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8008a40:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a46:	2200      	movs	r2, #0
 8008a48:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d002      	beq.n	8008a58 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8008a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a54:	025b      	lsls	r3, r3, #9
 8008a56:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008a60:	4618      	mov	r0, r3
 8008a62:	f002 fea1 	bl	800b7a8 <SDMMC_CmdBlockLength>
 8008a66:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00f      	beq.n	8008a8e <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a47      	ldr	r2, [pc, #284]	; (8008b90 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008a74:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a7c:	431a      	orrs	r2, r3
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2201      	movs	r2, #1
 8008a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e078      	b.n	8008b80 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d90a      	bls.n	8008aaa <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	22a0      	movs	r2, #160	; 0xa0
 8008a98:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f002 ff09 	bl	800b8b8 <SDMMC_CmdWriteMultiBlock>
 8008aa6:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008aa8:	e009      	b.n	8008abe <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2290      	movs	r2, #144	; 0x90
 8008aae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f002 fedc 	bl	800b874 <SDMMC_CmdWriteSingleBlock>
 8008abc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d012      	beq.n	8008aea <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a31      	ldr	r2, [pc, #196]	; (8008b90 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008aca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad2:	431a      	orrs	r2, r3
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2201      	movs	r2, #1
 8008adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e04a      	b.n	8008b80 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f042 0208 	orr.w	r2, r2, #8
 8008af8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008afe:	68b9      	ldr	r1, [r7, #8]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	3380      	adds	r3, #128	; 0x80
 8008b06:	461a      	mov	r2, r3
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	025b      	lsls	r3, r3, #9
 8008b0c:	089b      	lsrs	r3, r3, #2
 8008b0e:	f7fc fb4b 	bl	80051a8 <HAL_DMA_Start_IT>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d01a      	beq.n	8008b4e <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f022 021a 	bic.w	r2, r2, #26
 8008b26:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a18      	ldr	r2, [pc, #96]	; (8008b90 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008b2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b34:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2200      	movs	r2, #0
 8008b48:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e018      	b.n	8008b80 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8008b52:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	025b      	lsls	r3, r3, #9
 8008b58:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008b5a:	2390      	movs	r3, #144	; 0x90
 8008b5c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008b62:	2300      	movs	r3, #0
 8008b64:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008b66:	2301      	movs	r3, #1
 8008b68:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f107 0210 	add.w	r2, r7, #16
 8008b72:	4611      	mov	r1, r2
 8008b74:	4618      	mov	r0, r3
 8008b76:	f002 fdeb 	bl	800b750 <SDMMC_ConfigData>

      return HAL_OK;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	e000      	b.n	8008b80 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 8008b7e:	2302      	movs	r3, #2
  }
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3730      	adds	r7, #48	; 0x30
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	08009081 	.word	0x08009081
 8008b8c:	0800911d 	.word	0x0800911d
 8008b90:	004005ff 	.word	0x004005ff

08008b94 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008b9c:	bf00      	nop
 8008b9e:	370c      	adds	r7, #12
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bb6:	0f9b      	lsrs	r3, r3, #30
 8008bb8:	b2da      	uxtb	r2, r3
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bc2:	0e9b      	lsrs	r3, r3, #26
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	f003 030f 	and.w	r3, r3, #15
 8008bca:	b2da      	uxtb	r2, r3
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bd4:	0e1b      	lsrs	r3, r3, #24
 8008bd6:	b2db      	uxtb	r3, r3
 8008bd8:	f003 0303 	and.w	r3, r3, #3
 8008bdc:	b2da      	uxtb	r2, r3
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008be6:	0c1b      	lsrs	r3, r3, #16
 8008be8:	b2da      	uxtb	r2, r3
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bf2:	0a1b      	lsrs	r3, r3, #8
 8008bf4:	b2da      	uxtb	r2, r3
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bfe:	b2da      	uxtb	r2, r3
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c08:	0d1b      	lsrs	r3, r3, #20
 8008c0a:	b29a      	uxth	r2, r3
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c14:	0c1b      	lsrs	r3, r3, #16
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	f003 030f 	and.w	r3, r3, #15
 8008c1c:	b2da      	uxtb	r2, r3
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c26:	0bdb      	lsrs	r3, r3, #15
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	f003 0301 	and.w	r3, r3, #1
 8008c2e:	b2da      	uxtb	r2, r3
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c38:	0b9b      	lsrs	r3, r3, #14
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	f003 0301 	and.w	r3, r3, #1
 8008c40:	b2da      	uxtb	r2, r3
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c4a:	0b5b      	lsrs	r3, r3, #13
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	f003 0301 	and.w	r3, r3, #1
 8008c52:	b2da      	uxtb	r2, r3
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c5c:	0b1b      	lsrs	r3, r3, #12
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	f003 0301 	and.w	r3, r3, #1
 8008c64:	b2da      	uxtb	r2, r3
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d163      	bne.n	8008d40 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c7c:	009a      	lsls	r2, r3, #2
 8008c7e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008c82:	4013      	ands	r3, r2
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008c88:	0f92      	lsrs	r2, r2, #30
 8008c8a:	431a      	orrs	r2, r3
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c94:	0edb      	lsrs	r3, r3, #27
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	f003 0307 	and.w	r3, r3, #7
 8008c9c:	b2da      	uxtb	r2, r3
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ca6:	0e1b      	lsrs	r3, r3, #24
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	f003 0307 	and.w	r3, r3, #7
 8008cae:	b2da      	uxtb	r2, r3
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cb8:	0d5b      	lsrs	r3, r3, #21
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	f003 0307 	and.w	r3, r3, #7
 8008cc0:	b2da      	uxtb	r2, r3
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cca:	0c9b      	lsrs	r3, r3, #18
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	f003 0307 	and.w	r3, r3, #7
 8008cd2:	b2da      	uxtb	r2, r3
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cdc:	0bdb      	lsrs	r3, r3, #15
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	f003 0307 	and.w	r3, r3, #7
 8008ce4:	b2da      	uxtb	r2, r3
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	1c5a      	adds	r2, r3, #1
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	7e1b      	ldrb	r3, [r3, #24]
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	f003 0307 	and.w	r3, r3, #7
 8008cfe:	3302      	adds	r3, #2
 8008d00:	2201      	movs	r2, #1
 8008d02:	fa02 f303 	lsl.w	r3, r2, r3
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008d0a:	fb03 f202 	mul.w	r2, r3, r2
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	7a1b      	ldrb	r3, [r3, #8]
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	f003 030f 	and.w	r3, r3, #15
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	409a      	lsls	r2, r3
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008d2c:	0a52      	lsrs	r2, r2, #9
 8008d2e:	fb03 f202 	mul.w	r2, r3, r2
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d3c:	661a      	str	r2, [r3, #96]	; 0x60
 8008d3e:	e031      	b.n	8008da4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d11d      	bne.n	8008d84 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d4c:	041b      	lsls	r3, r3, #16
 8008d4e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d56:	0c1b      	lsrs	r3, r3, #16
 8008d58:	431a      	orrs	r2, r3
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	3301      	adds	r3, #1
 8008d64:	029a      	lsls	r2, r3, #10
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d78:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	661a      	str	r2, [r3, #96]	; 0x60
 8008d82:	e00f      	b.n	8008da4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a58      	ldr	r2, [pc, #352]	; (8008eec <HAL_SD_GetCardCSD+0x344>)
 8008d8a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d90:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008da0:	2301      	movs	r3, #1
 8008da2:	e09d      	b.n	8008ee0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008da8:	0b9b      	lsrs	r3, r3, #14
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	f003 0301 	and.w	r3, r3, #1
 8008db0:	b2da      	uxtb	r2, r3
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dba:	09db      	lsrs	r3, r3, #7
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dc2:	b2da      	uxtb	r2, r3
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dd2:	b2da      	uxtb	r2, r3
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ddc:	0fdb      	lsrs	r3, r3, #31
 8008dde:	b2da      	uxtb	r2, r3
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008de8:	0f5b      	lsrs	r3, r3, #29
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	f003 0303 	and.w	r3, r3, #3
 8008df0:	b2da      	uxtb	r2, r3
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dfa:	0e9b      	lsrs	r3, r3, #26
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	f003 0307 	and.w	r3, r3, #7
 8008e02:	b2da      	uxtb	r2, r3
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e0c:	0d9b      	lsrs	r3, r3, #22
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	f003 030f 	and.w	r3, r3, #15
 8008e14:	b2da      	uxtb	r2, r3
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e1e:	0d5b      	lsrs	r3, r3, #21
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	f003 0301 	and.w	r3, r3, #1
 8008e26:	b2da      	uxtb	r2, r3
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	2200      	movs	r2, #0
 8008e32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e3a:	0c1b      	lsrs	r3, r3, #16
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	f003 0301 	and.w	r3, r3, #1
 8008e42:	b2da      	uxtb	r2, r3
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e4e:	0bdb      	lsrs	r3, r3, #15
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	f003 0301 	and.w	r3, r3, #1
 8008e56:	b2da      	uxtb	r2, r3
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e62:	0b9b      	lsrs	r3, r3, #14
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	f003 0301 	and.w	r3, r3, #1
 8008e6a:	b2da      	uxtb	r2, r3
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e76:	0b5b      	lsrs	r3, r3, #13
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	f003 0301 	and.w	r3, r3, #1
 8008e7e:	b2da      	uxtb	r2, r3
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e8a:	0b1b      	lsrs	r3, r3, #12
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	f003 0301 	and.w	r3, r3, #1
 8008e92:	b2da      	uxtb	r2, r3
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e9e:	0a9b      	lsrs	r3, r3, #10
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	f003 0303 	and.w	r3, r3, #3
 8008ea6:	b2da      	uxtb	r2, r3
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eb2:	0a1b      	lsrs	r3, r3, #8
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	f003 0303 	and.w	r3, r3, #3
 8008eba:	b2da      	uxtb	r2, r3
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ec6:	085b      	lsrs	r3, r3, #1
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ece:	b2da      	uxtb	r2, r3
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008ede:	2300      	movs	r3, #0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	370c      	adds	r7, #12
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr
 8008eec:	004005ff 	.word	0x004005ff

08008ef0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008f3a:	2300      	movs	r3, #0
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008f48:	b5b0      	push	{r4, r5, r7, lr}
 8008f4a:	b08e      	sub	sp, #56	; 0x38
 8008f4c:	af04      	add	r7, sp, #16
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2203      	movs	r2, #3
 8008f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f5e:	2b03      	cmp	r3, #3
 8008f60:	d02e      	beq.n	8008fc0 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f68:	d106      	bne.n	8008f78 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f6e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	639a      	str	r2, [r3, #56]	; 0x38
 8008f76:	e029      	b.n	8008fcc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f7e:	d10a      	bne.n	8008f96 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 faa1 	bl	80094c8 <SD_WideBus_Enable>
 8008f86:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8e:	431a      	orrs	r2, r3
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	639a      	str	r2, [r3, #56]	; 0x38
 8008f94:	e01a      	b.n	8008fcc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d10a      	bne.n	8008fb2 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 fade 	bl	800955e <SD_WideBus_Disable>
 8008fa2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008faa:	431a      	orrs	r2, r3
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	639a      	str	r2, [r3, #56]	; 0x38
 8008fb0:	e00c      	b.n	8008fcc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	639a      	str	r2, [r3, #56]	; 0x38
 8008fbe:	e005      	b.n	8008fcc <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d009      	beq.n	8008fe8 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a18      	ldr	r2, [pc, #96]	; (800903c <HAL_SD_ConfigWideBusOperation+0xf4>)
 8008fda:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	e024      	b.n	8009032 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	689b      	ldr	r3, [r3, #8]
 8008ff2:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	695b      	ldr	r3, [r3, #20]
 8009002:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	699b      	ldr	r3, [r3, #24]
 8009008:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681d      	ldr	r5, [r3, #0]
 800900e:	466c      	mov	r4, sp
 8009010:	f107 0318 	add.w	r3, r7, #24
 8009014:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009018:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800901c:	f107 030c 	add.w	r3, r7, #12
 8009020:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009022:	4628      	mov	r0, r5
 8009024:	f002 faf4 	bl	800b610 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2201      	movs	r2, #1
 800902c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	3728      	adds	r7, #40	; 0x28
 8009036:	46bd      	mov	sp, r7
 8009038:	bdb0      	pop	{r4, r5, r7, pc}
 800903a:	bf00      	nop
 800903c:	004005ff 	.word	0x004005ff

08009040 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b086      	sub	sp, #24
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009048:	2300      	movs	r3, #0
 800904a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800904c:	f107 030c 	add.w	r3, r7, #12
 8009050:	4619      	mov	r1, r3
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fa10 	bl	8009478 <SD_SendStatus>
 8009058:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d005      	beq.n	800906c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	431a      	orrs	r2, r3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	0a5b      	lsrs	r3, r3, #9
 8009070:	f003 030f 	and.w	r3, r3, #15
 8009074:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009076:	693b      	ldr	r3, [r7, #16]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3718      	adds	r7, #24
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009080:	b480      	push	{r7}
 8009082:	b085      	sub	sp, #20
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800908c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800909c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800909e:	bf00      	nop
 80090a0:	3714      	adds	r7, #20
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr

080090aa <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b084      	sub	sp, #16
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090b6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090bc:	2b82      	cmp	r3, #130	; 0x82
 80090be:	d111      	bne.n	80090e4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4618      	mov	r0, r3
 80090c6:	f002 fc19 	bl	800b8fc <SDMMC_CmdStopTransfer>
 80090ca:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d008      	beq.n	80090e4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	431a      	orrs	r2, r3
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80090de:	68f8      	ldr	r0, [r7, #12]
 80090e0:	f7ff fd58 	bl	8008b94 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f022 0208 	bic.w	r2, r2, #8
 80090f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f240 523a 	movw	r2, #1338	; 0x53a
 80090fc:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2201      	movs	r2, #1
 8009102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2200      	movs	r2, #0
 800910a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800910c:	68f8      	ldr	r0, [r7, #12]
 800910e:	f003 f85f 	bl	800c1d0 <HAL_SD_RxCpltCallback>
#endif
}
 8009112:	bf00      	nop
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
	...

0800911c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b086      	sub	sp, #24
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009128:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f7fc f89c 	bl	8005268 <HAL_DMA_GetError>
 8009130:	4603      	mov	r3, r0
 8009132:	2b02      	cmp	r3, #2
 8009134:	d03e      	beq.n	80091b4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800913a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800913c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009144:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	2b01      	cmp	r3, #1
 800914a:	d002      	beq.n	8009152 <SD_DMAError+0x36>
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2b01      	cmp	r3, #1
 8009150:	d12d      	bne.n	80091ae <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a19      	ldr	r2, [pc, #100]	; (80091bc <SD_DMAError+0xa0>)
 8009158:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009168:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800916e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009176:	6978      	ldr	r0, [r7, #20]
 8009178:	f7ff ff62 	bl	8009040 <HAL_SD_GetCardState>
 800917c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	2b06      	cmp	r3, #6
 8009182:	d002      	beq.n	800918a <SD_DMAError+0x6e>
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	2b05      	cmp	r3, #5
 8009188:	d10a      	bne.n	80091a0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4618      	mov	r0, r3
 8009190:	f002 fbb4 	bl	800b8fc <SDMMC_CmdStopTransfer>
 8009194:	4602      	mov	r2, r0
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800919a:	431a      	orrs	r2, r3
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	2200      	movs	r2, #0
 80091ac:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80091ae:	6978      	ldr	r0, [r7, #20]
 80091b0:	f7ff fcf0 	bl	8008b94 <HAL_SD_ErrorCallback>
#endif
  }
}
 80091b4:	bf00      	nop
 80091b6:	3718      	adds	r7, #24
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}
 80091bc:	004005ff 	.word	0x004005ff

080091c0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80091c0:	b5b0      	push	{r4, r5, r7, lr}
 80091c2:	b094      	sub	sp, #80	; 0x50
 80091c4:	af04      	add	r7, sp, #16
 80091c6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80091c8:	2301      	movs	r3, #1
 80091ca:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4618      	mov	r0, r3
 80091d2:	f002 fa65 	bl	800b6a0 <SDMMC_GetPowerState>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d102      	bne.n	80091e2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80091dc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80091e0:	e0b8      	b.n	8009354 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091e6:	2b03      	cmp	r3, #3
 80091e8:	d02f      	beq.n	800924a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4618      	mov	r0, r3
 80091f0:	f002 fc8f 	bl	800bb12 <SDMMC_CmdSendCID>
 80091f4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80091f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d001      	beq.n	8009200 <SD_InitCard+0x40>
    {
      return errorstate;
 80091fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091fe:	e0a9      	b.n	8009354 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	2100      	movs	r1, #0
 8009206:	4618      	mov	r0, r3
 8009208:	f002 fa8f 	bl	800b72a <SDMMC_GetResponse>
 800920c:	4602      	mov	r2, r0
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	2104      	movs	r1, #4
 8009218:	4618      	mov	r0, r3
 800921a:	f002 fa86 	bl	800b72a <SDMMC_GetResponse>
 800921e:	4602      	mov	r2, r0
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2108      	movs	r1, #8
 800922a:	4618      	mov	r0, r3
 800922c:	f002 fa7d 	bl	800b72a <SDMMC_GetResponse>
 8009230:	4602      	mov	r2, r0
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	210c      	movs	r1, #12
 800923c:	4618      	mov	r0, r3
 800923e:	f002 fa74 	bl	800b72a <SDMMC_GetResponse>
 8009242:	4602      	mov	r2, r0
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800924e:	2b03      	cmp	r3, #3
 8009250:	d00d      	beq.n	800926e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f107 020e 	add.w	r2, r7, #14
 800925a:	4611      	mov	r1, r2
 800925c:	4618      	mov	r0, r3
 800925e:	f002 fc95 	bl	800bb8c <SDMMC_CmdSetRelAdd>
 8009262:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009266:	2b00      	cmp	r3, #0
 8009268:	d001      	beq.n	800926e <SD_InitCard+0xae>
    {
      return errorstate;
 800926a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800926c:	e072      	b.n	8009354 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009272:	2b03      	cmp	r3, #3
 8009274:	d036      	beq.n	80092e4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009276:	89fb      	ldrh	r3, [r7, #14]
 8009278:	461a      	mov	r2, r3
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009286:	041b      	lsls	r3, r3, #16
 8009288:	4619      	mov	r1, r3
 800928a:	4610      	mov	r0, r2
 800928c:	f002 fc5f 	bl	800bb4e <SDMMC_CmdSendCSD>
 8009290:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009294:	2b00      	cmp	r3, #0
 8009296:	d001      	beq.n	800929c <SD_InitCard+0xdc>
    {
      return errorstate;
 8009298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800929a:	e05b      	b.n	8009354 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2100      	movs	r1, #0
 80092a2:	4618      	mov	r0, r3
 80092a4:	f002 fa41 	bl	800b72a <SDMMC_GetResponse>
 80092a8:	4602      	mov	r2, r0
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	2104      	movs	r1, #4
 80092b4:	4618      	mov	r0, r3
 80092b6:	f002 fa38 	bl	800b72a <SDMMC_GetResponse>
 80092ba:	4602      	mov	r2, r0
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2108      	movs	r1, #8
 80092c6:	4618      	mov	r0, r3
 80092c8:	f002 fa2f 	bl	800b72a <SDMMC_GetResponse>
 80092cc:	4602      	mov	r2, r0
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	210c      	movs	r1, #12
 80092d8:	4618      	mov	r0, r3
 80092da:	f002 fa26 	bl	800b72a <SDMMC_GetResponse>
 80092de:	4602      	mov	r2, r0
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2104      	movs	r1, #4
 80092ea:	4618      	mov	r0, r3
 80092ec:	f002 fa1d 	bl	800b72a <SDMMC_GetResponse>
 80092f0:	4603      	mov	r3, r0
 80092f2:	0d1a      	lsrs	r2, r3, #20
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80092f8:	f107 0310 	add.w	r3, r7, #16
 80092fc:	4619      	mov	r1, r3
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f7ff fc52 	bl	8008ba8 <HAL_SD_GetCardCSD>
 8009304:	4603      	mov	r3, r0
 8009306:	2b00      	cmp	r3, #0
 8009308:	d002      	beq.n	8009310 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800930a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800930e:	e021      	b.n	8009354 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6819      	ldr	r1, [r3, #0]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009318:	041b      	lsls	r3, r3, #16
 800931a:	2200      	movs	r2, #0
 800931c:	461c      	mov	r4, r3
 800931e:	4615      	mov	r5, r2
 8009320:	4622      	mov	r2, r4
 8009322:	462b      	mov	r3, r5
 8009324:	4608      	mov	r0, r1
 8009326:	f002 fb0b 	bl	800b940 <SDMMC_CmdSelDesel>
 800932a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800932c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800932e:	2b00      	cmp	r3, #0
 8009330:	d001      	beq.n	8009336 <SD_InitCard+0x176>
  {
    return errorstate;
 8009332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009334:	e00e      	b.n	8009354 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681d      	ldr	r5, [r3, #0]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	466c      	mov	r4, sp
 800933e:	f103 0210 	add.w	r2, r3, #16
 8009342:	ca07      	ldmia	r2, {r0, r1, r2}
 8009344:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009348:	3304      	adds	r3, #4
 800934a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800934c:	4628      	mov	r0, r5
 800934e:	f002 f95f 	bl	800b610 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009352:	2300      	movs	r3, #0
}
 8009354:	4618      	mov	r0, r3
 8009356:	3740      	adds	r7, #64	; 0x40
 8009358:	46bd      	mov	sp, r7
 800935a:	bdb0      	pop	{r4, r5, r7, pc}

0800935c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b086      	sub	sp, #24
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009364:	2300      	movs	r3, #0
 8009366:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009368:	2300      	movs	r3, #0
 800936a:	617b      	str	r3, [r7, #20]
 800936c:	2300      	movs	r3, #0
 800936e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4618      	mov	r0, r3
 8009376:	f002 fb06 	bl	800b986 <SDMMC_CmdGoIdleState>
 800937a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d001      	beq.n	8009386 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	e072      	b.n	800946c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4618      	mov	r0, r3
 800938c:	f002 fb19 	bl	800b9c2 <SDMMC_CmdOperCond>
 8009390:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d00d      	beq.n	80093b4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2200      	movs	r2, #0
 800939c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4618      	mov	r0, r3
 80093a4:	f002 faef 	bl	800b986 <SDMMC_CmdGoIdleState>
 80093a8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d004      	beq.n	80093ba <SD_PowerON+0x5e>
    {
      return errorstate;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	e05b      	b.n	800946c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2201      	movs	r2, #1
 80093b8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d137      	bne.n	8009432 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2100      	movs	r1, #0
 80093c8:	4618      	mov	r0, r3
 80093ca:	f002 fb19 	bl	800ba00 <SDMMC_CmdAppCommand>
 80093ce:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d02d      	beq.n	8009432 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80093d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80093da:	e047      	b.n	800946c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2100      	movs	r1, #0
 80093e2:	4618      	mov	r0, r3
 80093e4:	f002 fb0c 	bl	800ba00 <SDMMC_CmdAppCommand>
 80093e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d001      	beq.n	80093f4 <SD_PowerON+0x98>
    {
      return errorstate;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	e03b      	b.n	800946c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	491e      	ldr	r1, [pc, #120]	; (8009474 <SD_PowerON+0x118>)
 80093fa:	4618      	mov	r0, r3
 80093fc:	f002 fb22 	bl	800ba44 <SDMMC_CmdAppOperCommand>
 8009400:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d002      	beq.n	800940e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009408:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800940c:	e02e      	b.n	800946c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	2100      	movs	r1, #0
 8009414:	4618      	mov	r0, r3
 8009416:	f002 f988 	bl	800b72a <SDMMC_GetResponse>
 800941a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	0fdb      	lsrs	r3, r3, #31
 8009420:	2b01      	cmp	r3, #1
 8009422:	d101      	bne.n	8009428 <SD_PowerON+0xcc>
 8009424:	2301      	movs	r3, #1
 8009426:	e000      	b.n	800942a <SD_PowerON+0xce>
 8009428:	2300      	movs	r3, #0
 800942a:	613b      	str	r3, [r7, #16]

    count++;
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	3301      	adds	r3, #1
 8009430:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009438:	4293      	cmp	r3, r2
 800943a:	d802      	bhi.n	8009442 <SD_PowerON+0xe6>
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d0cc      	beq.n	80093dc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009448:	4293      	cmp	r3, r2
 800944a:	d902      	bls.n	8009452 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800944c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009450:	e00c      	b.n	800946c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009458:	2b00      	cmp	r3, #0
 800945a:	d003      	beq.n	8009464 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2201      	movs	r2, #1
 8009460:	645a      	str	r2, [r3, #68]	; 0x44
 8009462:	e002      	b.n	800946a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2200      	movs	r2, #0
 8009468:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800946a:	2300      	movs	r3, #0
}
 800946c:	4618      	mov	r0, r3
 800946e:	3718      	adds	r7, #24
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}
 8009474:	c1100000 	.word	0xc1100000

08009478 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d102      	bne.n	800948e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009488:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800948c:	e018      	b.n	80094c0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009496:	041b      	lsls	r3, r3, #16
 8009498:	4619      	mov	r1, r3
 800949a:	4610      	mov	r0, r2
 800949c:	f002 fb97 	bl	800bbce <SDMMC_CmdSendStatus>
 80094a0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d001      	beq.n	80094ac <SD_SendStatus+0x34>
  {
    return errorstate;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	e009      	b.n	80094c0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2100      	movs	r1, #0
 80094b2:	4618      	mov	r0, r3
 80094b4:	f002 f939 	bl	800b72a <SDMMC_GetResponse>
 80094b8:	4602      	mov	r2, r0
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80094be:	2300      	movs	r3, #0
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3710      	adds	r7, #16
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b086      	sub	sp, #24
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80094d0:	2300      	movs	r3, #0
 80094d2:	60fb      	str	r3, [r7, #12]
 80094d4:	2300      	movs	r3, #0
 80094d6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	2100      	movs	r1, #0
 80094de:	4618      	mov	r0, r3
 80094e0:	f002 f923 	bl	800b72a <SDMMC_GetResponse>
 80094e4:	4603      	mov	r3, r0
 80094e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80094ee:	d102      	bne.n	80094f6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80094f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80094f4:	e02f      	b.n	8009556 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80094f6:	f107 030c 	add.w	r3, r7, #12
 80094fa:	4619      	mov	r1, r3
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 f879 	bl	80095f4 <SD_FindSCR>
 8009502:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d001      	beq.n	800950e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	e023      	b.n	8009556 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009514:	2b00      	cmp	r3, #0
 8009516:	d01c      	beq.n	8009552 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009520:	041b      	lsls	r3, r3, #16
 8009522:	4619      	mov	r1, r3
 8009524:	4610      	mov	r0, r2
 8009526:	f002 fa6b 	bl	800ba00 <SDMMC_CmdAppCommand>
 800952a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d001      	beq.n	8009536 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	e00f      	b.n	8009556 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2102      	movs	r1, #2
 800953c:	4618      	mov	r0, r3
 800953e:	f002 faa5 	bl	800ba8c <SDMMC_CmdBusWidth>
 8009542:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d001      	beq.n	800954e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	e003      	b.n	8009556 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800954e:	2300      	movs	r3, #0
 8009550:	e001      	b.n	8009556 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009552:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009556:	4618      	mov	r0, r3
 8009558:	3718      	adds	r7, #24
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800955e:	b580      	push	{r7, lr}
 8009560:	b086      	sub	sp, #24
 8009562:	af00      	add	r7, sp, #0
 8009564:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009566:	2300      	movs	r3, #0
 8009568:	60fb      	str	r3, [r7, #12]
 800956a:	2300      	movs	r3, #0
 800956c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	2100      	movs	r1, #0
 8009574:	4618      	mov	r0, r3
 8009576:	f002 f8d8 	bl	800b72a <SDMMC_GetResponse>
 800957a:	4603      	mov	r3, r0
 800957c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009580:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009584:	d102      	bne.n	800958c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009586:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800958a:	e02f      	b.n	80095ec <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800958c:	f107 030c 	add.w	r3, r7, #12
 8009590:	4619      	mov	r1, r3
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f000 f82e 	bl	80095f4 <SD_FindSCR>
 8009598:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d001      	beq.n	80095a4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	e023      	b.n	80095ec <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d01c      	beq.n	80095e8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095b6:	041b      	lsls	r3, r3, #16
 80095b8:	4619      	mov	r1, r3
 80095ba:	4610      	mov	r0, r2
 80095bc:	f002 fa20 	bl	800ba00 <SDMMC_CmdAppCommand>
 80095c0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d001      	beq.n	80095cc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	e00f      	b.n	80095ec <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	2100      	movs	r1, #0
 80095d2:	4618      	mov	r0, r3
 80095d4:	f002 fa5a 	bl	800ba8c <SDMMC_CmdBusWidth>
 80095d8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d001      	beq.n	80095e4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	e003      	b.n	80095ec <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80095e4:	2300      	movs	r3, #0
 80095e6:	e001      	b.n	80095ec <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80095e8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3718      	adds	r7, #24
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80095f4:	b590      	push	{r4, r7, lr}
 80095f6:	b08f      	sub	sp, #60	; 0x3c
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80095fe:	f7fa fb1b 	bl	8003c38 <HAL_GetTick>
 8009602:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009604:	2300      	movs	r3, #0
 8009606:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009608:	2300      	movs	r3, #0
 800960a:	60bb      	str	r3, [r7, #8]
 800960c:	2300      	movs	r3, #0
 800960e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	2108      	movs	r1, #8
 800961a:	4618      	mov	r0, r3
 800961c:	f002 f8c4 	bl	800b7a8 <SDMMC_CmdBlockLength>
 8009620:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009624:	2b00      	cmp	r3, #0
 8009626:	d001      	beq.n	800962c <SD_FindSCR+0x38>
  {
    return errorstate;
 8009628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962a:	e0a9      	b.n	8009780 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681a      	ldr	r2, [r3, #0]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009634:	041b      	lsls	r3, r3, #16
 8009636:	4619      	mov	r1, r3
 8009638:	4610      	mov	r0, r2
 800963a:	f002 f9e1 	bl	800ba00 <SDMMC_CmdAppCommand>
 800963e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009642:	2b00      	cmp	r3, #0
 8009644:	d001      	beq.n	800964a <SD_FindSCR+0x56>
  {
    return errorstate;
 8009646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009648:	e09a      	b.n	8009780 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800964a:	f04f 33ff 	mov.w	r3, #4294967295
 800964e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009650:	2308      	movs	r3, #8
 8009652:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009654:	2330      	movs	r3, #48	; 0x30
 8009656:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009658:	2302      	movs	r3, #2
 800965a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800965c:	2300      	movs	r3, #0
 800965e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009660:	2301      	movs	r3, #1
 8009662:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f107 0210 	add.w	r2, r7, #16
 800966c:	4611      	mov	r1, r2
 800966e:	4618      	mov	r0, r3
 8009670:	f002 f86e 	bl	800b750 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4618      	mov	r0, r3
 800967a:	f002 fa29 	bl	800bad0 <SDMMC_CmdSendSCR>
 800967e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009682:	2b00      	cmp	r3, #0
 8009684:	d022      	beq.n	80096cc <SD_FindSCR+0xd8>
  {
    return errorstate;
 8009686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009688:	e07a      	b.n	8009780 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009690:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009694:	2b00      	cmp	r3, #0
 8009696:	d00e      	beq.n	80096b6 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6819      	ldr	r1, [r3, #0]
 800969c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800969e:	009b      	lsls	r3, r3, #2
 80096a0:	f107 0208 	add.w	r2, r7, #8
 80096a4:	18d4      	adds	r4, r2, r3
 80096a6:	4608      	mov	r0, r1
 80096a8:	f001 ffde 	bl	800b668 <SDMMC_ReadFIFO>
 80096ac:	4603      	mov	r3, r0
 80096ae:	6023      	str	r3, [r4, #0]
      index++;
 80096b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096b2:	3301      	adds	r3, #1
 80096b4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80096b6:	f7fa fabf 	bl	8003c38 <HAL_GetTick>
 80096ba:	4602      	mov	r2, r0
 80096bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096be:	1ad3      	subs	r3, r2, r3
 80096c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096c4:	d102      	bne.n	80096cc <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80096c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80096ca:	e059      	b.n	8009780 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096d2:	f240 432a 	movw	r3, #1066	; 0x42a
 80096d6:	4013      	ands	r3, r2
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d0d6      	beq.n	800968a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096e2:	f003 0308 	and.w	r3, r3, #8
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d005      	beq.n	80096f6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	2208      	movs	r2, #8
 80096f0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80096f2:	2308      	movs	r3, #8
 80096f4:	e044      	b.n	8009780 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096fc:	f003 0302 	and.w	r3, r3, #2
 8009700:	2b00      	cmp	r3, #0
 8009702:	d005      	beq.n	8009710 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	2202      	movs	r2, #2
 800970a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800970c:	2302      	movs	r3, #2
 800970e:	e037      	b.n	8009780 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009716:	f003 0320 	and.w	r3, r3, #32
 800971a:	2b00      	cmp	r3, #0
 800971c:	d005      	beq.n	800972a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	2220      	movs	r2, #32
 8009724:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009726:	2320      	movs	r3, #32
 8009728:	e02a      	b.n	8009780 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f240 523a 	movw	r2, #1338	; 0x53a
 8009732:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	061a      	lsls	r2, r3, #24
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	021b      	lsls	r3, r3, #8
 800973c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009740:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	0a1b      	lsrs	r3, r3, #8
 8009746:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800974a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	0e1b      	lsrs	r3, r3, #24
 8009750:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009754:	601a      	str	r2, [r3, #0]
    scr++;
 8009756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009758:	3304      	adds	r3, #4
 800975a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	061a      	lsls	r2, r3, #24
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	021b      	lsls	r3, r3, #8
 8009764:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009768:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	0a1b      	lsrs	r3, r3, #8
 800976e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009772:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	0e1b      	lsrs	r3, r3, #24
 8009778:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800977a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800977c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800977e:	2300      	movs	r3, #0
}
 8009780:	4618      	mov	r0, r3
 8009782:	373c      	adds	r7, #60	; 0x3c
 8009784:	46bd      	mov	sp, r7
 8009786:	bd90      	pop	{r4, r7, pc}

08009788 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d101      	bne.n	800979c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009798:	2301      	movs	r3, #1
 800979a:	e025      	b.n	80097e8 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d106      	bne.n	80097b6 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f7fa f817 	bl	80037e4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2202      	movs	r2, #2
 80097ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	3304      	adds	r3, #4
 80097c6:	4619      	mov	r1, r3
 80097c8:	4610      	mov	r0, r2
 80097ca:	f001 fdfb 	bl	800b3c4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6818      	ldr	r0, [r3, #0]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	461a      	mov	r2, r3
 80097d8:	6839      	ldr	r1, [r7, #0]
 80097da:	f001 fe65 	bl	800b4a8 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2201      	movs	r2, #1
 80097e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80097e6:	2300      	movs	r3, #0
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3708      	adds	r7, #8
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b084      	sub	sp, #16
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	60f8      	str	r0, [r7, #12]
 80097f8:	60b9      	str	r1, [r7, #8]
 80097fa:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009802:	b2db      	uxtb	r3, r3
 8009804:	2b02      	cmp	r3, #2
 8009806:	d101      	bne.n	800980c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8009808:	2302      	movs	r3, #2
 800980a:	e018      	b.n	800983e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2202      	movs	r2, #2
 8009810:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	68b9      	ldr	r1, [r7, #8]
 800981c:	4618      	mov	r0, r3
 800981e:	f001 fec3 	bl	800b5a8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2b02      	cmp	r3, #2
 8009828:	d104      	bne.n	8009834 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2205      	movs	r2, #5
 800982e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8009832:	e003      	b.n	800983c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2201      	movs	r2, #1
 8009838:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	3710      	adds	r7, #16
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}

08009846 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009846:	b580      	push	{r7, lr}
 8009848:	b082      	sub	sp, #8
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
 800984e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009856:	b2db      	uxtb	r3, r3
 8009858:	2b02      	cmp	r3, #2
 800985a:	d101      	bne.n	8009860 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800985c:	2302      	movs	r3, #2
 800985e:	e00e      	b.n	800987e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2202      	movs	r2, #2
 8009864:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	6839      	ldr	r1, [r7, #0]
 800986e:	4618      	mov	r0, r3
 8009870:	f001 febb 	bl	800b5ea <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2201      	movs	r2, #1
 8009878:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800987c:	2300      	movs	r3, #0
}
 800987e:	4618      	mov	r0, r3
 8009880:	3708      	adds	r7, #8
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
	...

08009888 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d101      	bne.n	800989a <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8009896:	2301      	movs	r3, #1
 8009898:	e04c      	b.n	8009934 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d106      	bne.n	80098b4 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2200      	movs	r2, #0
 80098aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f7f9 fc74 	bl	800319c <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2202      	movs	r2, #2
 80098b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f022 0203 	bic.w	r2, r2, #3
 80098ca:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	4b19      	ldr	r3, [pc, #100]	; (800993c <HAL_SPDIFRX_Init+0xb4>)
 80098d8:	4013      	ands	r3, r2
 80098da:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 80098e4:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 80098ea:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 80098f0:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 80098f6:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 80098fc:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8009902:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8009908:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800990e:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8009914:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8009916:	68fa      	ldr	r2, [r7, #12]
 8009918:	4313      	orrs	r3, r2
 800991a:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	68fa      	ldr	r2, [r7, #12]
 8009922:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2200      	movs	r2, #0
 8009928:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2201      	movs	r2, #1
 800992e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8009932:	2300      	movs	r3, #0
}
 8009934:	4618      	mov	r0, r3
 8009936:	3710      	adds	r7, #16
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}
 800993c:	fff88407 	.word	0xfff88407

08009940 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b084      	sub	sp, #16
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d101      	bne.n	8009952 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800994e:	2301      	movs	r3, #1
 8009950:	e084      	b.n	8009a5c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2200      	movs	r2, #0
 8009956:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800995e:	b2db      	uxtb	r3, r3
 8009960:	2b00      	cmp	r3, #0
 8009962:	d106      	bne.n	8009972 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2200      	movs	r2, #0
 8009968:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f7f9 fc57 	bl	8003220 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2202      	movs	r2, #2
 8009976:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009988:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	68db      	ldr	r3, [r3, #12]
 800998e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009992:	d902      	bls.n	800999a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009994:	2300      	movs	r3, #0
 8009996:	60fb      	str	r3, [r7, #12]
 8009998:	e002      	b.n	80099a0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800999a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800999e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	68db      	ldr	r3, [r3, #12]
 80099a4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80099a8:	d007      	beq.n	80099ba <HAL_SPI_Init+0x7a>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	68db      	ldr	r3, [r3, #12]
 80099ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80099b2:	d002      	beq.n	80099ba <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2200      	movs	r2, #0
 80099b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d10b      	bne.n	80099da <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	68db      	ldr	r3, [r3, #12]
 80099c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80099ca:	d903      	bls.n	80099d4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2202      	movs	r2, #2
 80099d0:	631a      	str	r2, [r3, #48]	; 0x30
 80099d2:	e002      	b.n	80099da <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2201      	movs	r2, #1
 80099d8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	685a      	ldr	r2, [r3, #4]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	689b      	ldr	r3, [r3, #8]
 80099e2:	431a      	orrs	r2, r3
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	691b      	ldr	r3, [r3, #16]
 80099e8:	431a      	orrs	r2, r3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	695b      	ldr	r3, [r3, #20]
 80099ee:	431a      	orrs	r2, r3
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	699b      	ldr	r3, [r3, #24]
 80099f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80099f8:	431a      	orrs	r2, r3
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	69db      	ldr	r3, [r3, #28]
 80099fe:	431a      	orrs	r2, r3
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6a1b      	ldr	r3, [r3, #32]
 8009a04:	ea42 0103 	orr.w	r1, r2, r3
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	430a      	orrs	r2, r1
 8009a12:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	699b      	ldr	r3, [r3, #24]
 8009a18:	0c1b      	lsrs	r3, r3, #16
 8009a1a:	f003 0204 	and.w	r2, r3, #4
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a22:	431a      	orrs	r2, r3
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a28:	431a      	orrs	r2, r3
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	ea42 0103 	orr.w	r1, r2, r3
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	68fa      	ldr	r2, [r7, #12]
 8009a38:	430a      	orrs	r2, r1
 8009a3a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	69da      	ldr	r2, [r3, #28]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009a4a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2201      	movs	r2, #1
 8009a56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009a5a:	2300      	movs	r3, #0
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3710      	adds	r7, #16
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b082      	sub	sp, #8
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d101      	bne.n	8009a76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	e01d      	b.n	8009ab2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d106      	bne.n	8009a90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2200      	movs	r2, #0
 8009a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f7f9 fc2a 	bl	80032e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2202      	movs	r2, #2
 8009a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	3304      	adds	r3, #4
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	4610      	mov	r0, r2
 8009aa4:	f000 fb84 	bl	800a1b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ab0:	2300      	movs	r3, #0
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3708      	adds	r7, #8
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
	...

08009abc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b085      	sub	sp, #20
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	68da      	ldr	r2, [r3, #12]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f042 0201 	orr.w	r2, r2, #1
 8009ad2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	689a      	ldr	r2, [r3, #8]
 8009ada:	4b0c      	ldr	r3, [pc, #48]	; (8009b0c <HAL_TIM_Base_Start_IT+0x50>)
 8009adc:	4013      	ands	r3, r2
 8009ade:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2b06      	cmp	r3, #6
 8009ae4:	d00b      	beq.n	8009afe <HAL_TIM_Base_Start_IT+0x42>
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009aec:	d007      	beq.n	8009afe <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f042 0201 	orr.w	r2, r2, #1
 8009afc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009afe:	2300      	movs	r3, #0
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3714      	adds	r7, #20
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr
 8009b0c:	00010007 	.word	0x00010007

08009b10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b082      	sub	sp, #8
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d101      	bne.n	8009b22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e01d      	b.n	8009b5e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d106      	bne.n	8009b3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2200      	movs	r2, #0
 8009b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f7f9 fc42 	bl	80033c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2202      	movs	r2, #2
 8009b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	3304      	adds	r3, #4
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	4610      	mov	r0, r2
 8009b50:	f000 fb2e 	bl	800a1b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2201      	movs	r2, #1
 8009b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b5c:	2300      	movs	r3, #0
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3708      	adds	r7, #8
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}

08009b66 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b66:	b580      	push	{r7, lr}
 8009b68:	b082      	sub	sp, #8
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	691b      	ldr	r3, [r3, #16]
 8009b74:	f003 0302 	and.w	r3, r3, #2
 8009b78:	2b02      	cmp	r3, #2
 8009b7a:	d122      	bne.n	8009bc2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	f003 0302 	and.w	r3, r3, #2
 8009b86:	2b02      	cmp	r3, #2
 8009b88:	d11b      	bne.n	8009bc2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f06f 0202 	mvn.w	r2, #2
 8009b92:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2201      	movs	r2, #1
 8009b98:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	699b      	ldr	r3, [r3, #24]
 8009ba0:	f003 0303 	and.w	r3, r3, #3
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d003      	beq.n	8009bb0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 fae3 	bl	800a174 <HAL_TIM_IC_CaptureCallback>
 8009bae:	e005      	b.n	8009bbc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 fad5 	bl	800a160 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 fae6 	bl	800a188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	691b      	ldr	r3, [r3, #16]
 8009bc8:	f003 0304 	and.w	r3, r3, #4
 8009bcc:	2b04      	cmp	r3, #4
 8009bce:	d122      	bne.n	8009c16 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	68db      	ldr	r3, [r3, #12]
 8009bd6:	f003 0304 	and.w	r3, r3, #4
 8009bda:	2b04      	cmp	r3, #4
 8009bdc:	d11b      	bne.n	8009c16 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f06f 0204 	mvn.w	r2, #4
 8009be6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2202      	movs	r2, #2
 8009bec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	699b      	ldr	r3, [r3, #24]
 8009bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d003      	beq.n	8009c04 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 fab9 	bl	800a174 <HAL_TIM_IC_CaptureCallback>
 8009c02:	e005      	b.n	8009c10 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 faab 	bl	800a160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 fabc 	bl	800a188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2200      	movs	r2, #0
 8009c14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	691b      	ldr	r3, [r3, #16]
 8009c1c:	f003 0308 	and.w	r3, r3, #8
 8009c20:	2b08      	cmp	r3, #8
 8009c22:	d122      	bne.n	8009c6a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	68db      	ldr	r3, [r3, #12]
 8009c2a:	f003 0308 	and.w	r3, r3, #8
 8009c2e:	2b08      	cmp	r3, #8
 8009c30:	d11b      	bne.n	8009c6a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f06f 0208 	mvn.w	r2, #8
 8009c3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2204      	movs	r2, #4
 8009c40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	69db      	ldr	r3, [r3, #28]
 8009c48:	f003 0303 	and.w	r3, r3, #3
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d003      	beq.n	8009c58 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 fa8f 	bl	800a174 <HAL_TIM_IC_CaptureCallback>
 8009c56:	e005      	b.n	8009c64 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 fa81 	bl	800a160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 fa92 	bl	800a188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2200      	movs	r2, #0
 8009c68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	691b      	ldr	r3, [r3, #16]
 8009c70:	f003 0310 	and.w	r3, r3, #16
 8009c74:	2b10      	cmp	r3, #16
 8009c76:	d122      	bne.n	8009cbe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	68db      	ldr	r3, [r3, #12]
 8009c7e:	f003 0310 	and.w	r3, r3, #16
 8009c82:	2b10      	cmp	r3, #16
 8009c84:	d11b      	bne.n	8009cbe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f06f 0210 	mvn.w	r2, #16
 8009c8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2208      	movs	r2, #8
 8009c94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	69db      	ldr	r3, [r3, #28]
 8009c9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d003      	beq.n	8009cac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f000 fa65 	bl	800a174 <HAL_TIM_IC_CaptureCallback>
 8009caa:	e005      	b.n	8009cb8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f000 fa57 	bl	800a160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 fa68 	bl	800a188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	691b      	ldr	r3, [r3, #16]
 8009cc4:	f003 0301 	and.w	r3, r3, #1
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	d10e      	bne.n	8009cea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	f003 0301 	and.w	r3, r3, #1
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d107      	bne.n	8009cea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f06f 0201 	mvn.w	r2, #1
 8009ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f7f8 fe7f 	bl	80029e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	691b      	ldr	r3, [r3, #16]
 8009cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cf4:	2b80      	cmp	r3, #128	; 0x80
 8009cf6:	d10e      	bne.n	8009d16 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	68db      	ldr	r3, [r3, #12]
 8009cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d02:	2b80      	cmp	r3, #128	; 0x80
 8009d04:	d107      	bne.n	8009d16 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 fefb 	bl	800ab0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	691b      	ldr	r3, [r3, #16]
 8009d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d24:	d10e      	bne.n	8009d44 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d30:	2b80      	cmp	r3, #128	; 0x80
 8009d32:	d107      	bne.n	8009d44 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 feee 	bl	800ab20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	691b      	ldr	r3, [r3, #16]
 8009d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d4e:	2b40      	cmp	r3, #64	; 0x40
 8009d50:	d10e      	bne.n	8009d70 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	68db      	ldr	r3, [r3, #12]
 8009d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d5c:	2b40      	cmp	r3, #64	; 0x40
 8009d5e:	d107      	bne.n	8009d70 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 fa16 	bl	800a19c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	691b      	ldr	r3, [r3, #16]
 8009d76:	f003 0320 	and.w	r3, r3, #32
 8009d7a:	2b20      	cmp	r3, #32
 8009d7c:	d10e      	bne.n	8009d9c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	68db      	ldr	r3, [r3, #12]
 8009d84:	f003 0320 	and.w	r3, r3, #32
 8009d88:	2b20      	cmp	r3, #32
 8009d8a:	d107      	bne.n	8009d9c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f06f 0220 	mvn.w	r2, #32
 8009d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 feae 	bl	800aaf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d9c:	bf00      	nop
 8009d9e:	3708      	adds	r7, #8
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	60f8      	str	r0, [r7, #12]
 8009dac:	60b9      	str	r1, [r7, #8]
 8009dae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d101      	bne.n	8009dbe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009dba:	2302      	movs	r3, #2
 8009dbc:	e105      	b.n	8009fca <HAL_TIM_PWM_ConfigChannel+0x226>
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2202      	movs	r2, #2
 8009dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2b14      	cmp	r3, #20
 8009dd2:	f200 80f0 	bhi.w	8009fb6 <HAL_TIM_PWM_ConfigChannel+0x212>
 8009dd6:	a201      	add	r2, pc, #4	; (adr r2, 8009ddc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ddc:	08009e31 	.word	0x08009e31
 8009de0:	08009fb7 	.word	0x08009fb7
 8009de4:	08009fb7 	.word	0x08009fb7
 8009de8:	08009fb7 	.word	0x08009fb7
 8009dec:	08009e71 	.word	0x08009e71
 8009df0:	08009fb7 	.word	0x08009fb7
 8009df4:	08009fb7 	.word	0x08009fb7
 8009df8:	08009fb7 	.word	0x08009fb7
 8009dfc:	08009eb3 	.word	0x08009eb3
 8009e00:	08009fb7 	.word	0x08009fb7
 8009e04:	08009fb7 	.word	0x08009fb7
 8009e08:	08009fb7 	.word	0x08009fb7
 8009e0c:	08009ef3 	.word	0x08009ef3
 8009e10:	08009fb7 	.word	0x08009fb7
 8009e14:	08009fb7 	.word	0x08009fb7
 8009e18:	08009fb7 	.word	0x08009fb7
 8009e1c:	08009f35 	.word	0x08009f35
 8009e20:	08009fb7 	.word	0x08009fb7
 8009e24:	08009fb7 	.word	0x08009fb7
 8009e28:	08009fb7 	.word	0x08009fb7
 8009e2c:	08009f75 	.word	0x08009f75
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	68b9      	ldr	r1, [r7, #8]
 8009e36:	4618      	mov	r0, r3
 8009e38:	f000 fa5a 	bl	800a2f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	699a      	ldr	r2, [r3, #24]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f042 0208 	orr.w	r2, r2, #8
 8009e4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	699a      	ldr	r2, [r3, #24]
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f022 0204 	bic.w	r2, r2, #4
 8009e5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	6999      	ldr	r1, [r3, #24]
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	691a      	ldr	r2, [r3, #16]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	430a      	orrs	r2, r1
 8009e6c:	619a      	str	r2, [r3, #24]
      break;
 8009e6e:	e0a3      	b.n	8009fb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	68b9      	ldr	r1, [r7, #8]
 8009e76:	4618      	mov	r0, r3
 8009e78:	f000 faac 	bl	800a3d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	699a      	ldr	r2, [r3, #24]
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	699a      	ldr	r2, [r3, #24]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	6999      	ldr	r1, [r3, #24]
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	691b      	ldr	r3, [r3, #16]
 8009ea6:	021a      	lsls	r2, r3, #8
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	430a      	orrs	r2, r1
 8009eae:	619a      	str	r2, [r3, #24]
      break;
 8009eb0:	e082      	b.n	8009fb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	68b9      	ldr	r1, [r7, #8]
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f000 fb03 	bl	800a4c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	69da      	ldr	r2, [r3, #28]
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f042 0208 	orr.w	r2, r2, #8
 8009ecc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	69da      	ldr	r2, [r3, #28]
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f022 0204 	bic.w	r2, r2, #4
 8009edc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	69d9      	ldr	r1, [r3, #28]
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	691a      	ldr	r2, [r3, #16]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	430a      	orrs	r2, r1
 8009eee:	61da      	str	r2, [r3, #28]
      break;
 8009ef0:	e062      	b.n	8009fb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	68b9      	ldr	r1, [r7, #8]
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f000 fb59 	bl	800a5b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	69da      	ldr	r2, [r3, #28]
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	69da      	ldr	r2, [r3, #28]
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	69d9      	ldr	r1, [r3, #28]
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	691b      	ldr	r3, [r3, #16]
 8009f28:	021a      	lsls	r2, r3, #8
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	430a      	orrs	r2, r1
 8009f30:	61da      	str	r2, [r3, #28]
      break;
 8009f32:	e041      	b.n	8009fb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	68b9      	ldr	r1, [r7, #8]
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f000 fb90 	bl	800a660 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f042 0208 	orr.w	r2, r2, #8
 8009f4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f022 0204 	bic.w	r2, r2, #4
 8009f5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	691a      	ldr	r2, [r3, #16]
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	430a      	orrs	r2, r1
 8009f70:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009f72:	e021      	b.n	8009fb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	68b9      	ldr	r1, [r7, #8]
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f000 fbc2 	bl	800a704 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	691b      	ldr	r3, [r3, #16]
 8009faa:	021a      	lsls	r2, r3, #8
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	430a      	orrs	r2, r1
 8009fb2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009fb4:	e000      	b.n	8009fb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8009fb6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2201      	movs	r2, #1
 8009fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009fc8:	2300      	movs	r3, #0
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3710      	adds	r7, #16
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop

08009fd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b084      	sub	sp, #16
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d101      	bne.n	8009fec <HAL_TIM_ConfigClockSource+0x18>
 8009fe8:	2302      	movs	r3, #2
 8009fea:	e0b3      	b.n	800a154 <HAL_TIM_ConfigClockSource+0x180>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2202      	movs	r2, #2
 8009ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	689b      	ldr	r3, [r3, #8]
 800a002:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a004:	68fa      	ldr	r2, [r7, #12]
 800a006:	4b55      	ldr	r3, [pc, #340]	; (800a15c <HAL_TIM_ConfigClockSource+0x188>)
 800a008:	4013      	ands	r3, r2
 800a00a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a012:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	68fa      	ldr	r2, [r7, #12]
 800a01a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a024:	d03e      	beq.n	800a0a4 <HAL_TIM_ConfigClockSource+0xd0>
 800a026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a02a:	f200 8087 	bhi.w	800a13c <HAL_TIM_ConfigClockSource+0x168>
 800a02e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a032:	f000 8085 	beq.w	800a140 <HAL_TIM_ConfigClockSource+0x16c>
 800a036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a03a:	d87f      	bhi.n	800a13c <HAL_TIM_ConfigClockSource+0x168>
 800a03c:	2b70      	cmp	r3, #112	; 0x70
 800a03e:	d01a      	beq.n	800a076 <HAL_TIM_ConfigClockSource+0xa2>
 800a040:	2b70      	cmp	r3, #112	; 0x70
 800a042:	d87b      	bhi.n	800a13c <HAL_TIM_ConfigClockSource+0x168>
 800a044:	2b60      	cmp	r3, #96	; 0x60
 800a046:	d050      	beq.n	800a0ea <HAL_TIM_ConfigClockSource+0x116>
 800a048:	2b60      	cmp	r3, #96	; 0x60
 800a04a:	d877      	bhi.n	800a13c <HAL_TIM_ConfigClockSource+0x168>
 800a04c:	2b50      	cmp	r3, #80	; 0x50
 800a04e:	d03c      	beq.n	800a0ca <HAL_TIM_ConfigClockSource+0xf6>
 800a050:	2b50      	cmp	r3, #80	; 0x50
 800a052:	d873      	bhi.n	800a13c <HAL_TIM_ConfigClockSource+0x168>
 800a054:	2b40      	cmp	r3, #64	; 0x40
 800a056:	d058      	beq.n	800a10a <HAL_TIM_ConfigClockSource+0x136>
 800a058:	2b40      	cmp	r3, #64	; 0x40
 800a05a:	d86f      	bhi.n	800a13c <HAL_TIM_ConfigClockSource+0x168>
 800a05c:	2b30      	cmp	r3, #48	; 0x30
 800a05e:	d064      	beq.n	800a12a <HAL_TIM_ConfigClockSource+0x156>
 800a060:	2b30      	cmp	r3, #48	; 0x30
 800a062:	d86b      	bhi.n	800a13c <HAL_TIM_ConfigClockSource+0x168>
 800a064:	2b20      	cmp	r3, #32
 800a066:	d060      	beq.n	800a12a <HAL_TIM_ConfigClockSource+0x156>
 800a068:	2b20      	cmp	r3, #32
 800a06a:	d867      	bhi.n	800a13c <HAL_TIM_ConfigClockSource+0x168>
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d05c      	beq.n	800a12a <HAL_TIM_ConfigClockSource+0x156>
 800a070:	2b10      	cmp	r3, #16
 800a072:	d05a      	beq.n	800a12a <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a074:	e062      	b.n	800a13c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6818      	ldr	r0, [r3, #0]
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	6899      	ldr	r1, [r3, #8]
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	685a      	ldr	r2, [r3, #4]
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	68db      	ldr	r3, [r3, #12]
 800a086:	f000 fc0b 	bl	800a8a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	689b      	ldr	r3, [r3, #8]
 800a090:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a098:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	68fa      	ldr	r2, [r7, #12]
 800a0a0:	609a      	str	r2, [r3, #8]
      break;
 800a0a2:	e04e      	b.n	800a142 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6818      	ldr	r0, [r3, #0]
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	6899      	ldr	r1, [r3, #8]
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	685a      	ldr	r2, [r3, #4]
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	f000 fbf4 	bl	800a8a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	689a      	ldr	r2, [r3, #8]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a0c6:	609a      	str	r2, [r3, #8]
      break;
 800a0c8:	e03b      	b.n	800a142 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6818      	ldr	r0, [r3, #0]
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	6859      	ldr	r1, [r3, #4]
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	68db      	ldr	r3, [r3, #12]
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	f000 fb68 	bl	800a7ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	2150      	movs	r1, #80	; 0x50
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f000 fbc1 	bl	800a86a <TIM_ITRx_SetConfig>
      break;
 800a0e8:	e02b      	b.n	800a142 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6818      	ldr	r0, [r3, #0]
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	6859      	ldr	r1, [r3, #4]
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	68db      	ldr	r3, [r3, #12]
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	f000 fb87 	bl	800a80a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	2160      	movs	r1, #96	; 0x60
 800a102:	4618      	mov	r0, r3
 800a104:	f000 fbb1 	bl	800a86a <TIM_ITRx_SetConfig>
      break;
 800a108:	e01b      	b.n	800a142 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6818      	ldr	r0, [r3, #0]
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	6859      	ldr	r1, [r3, #4]
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	68db      	ldr	r3, [r3, #12]
 800a116:	461a      	mov	r2, r3
 800a118:	f000 fb48 	bl	800a7ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2140      	movs	r1, #64	; 0x40
 800a122:	4618      	mov	r0, r3
 800a124:	f000 fba1 	bl	800a86a <TIM_ITRx_SetConfig>
      break;
 800a128:	e00b      	b.n	800a142 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681a      	ldr	r2, [r3, #0]
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4619      	mov	r1, r3
 800a134:	4610      	mov	r0, r2
 800a136:	f000 fb98 	bl	800a86a <TIM_ITRx_SetConfig>
      break;
 800a13a:	e002      	b.n	800a142 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a13c:	bf00      	nop
 800a13e:	e000      	b.n	800a142 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a140:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2201      	movs	r2, #1
 800a146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a152:	2300      	movs	r3, #0
}
 800a154:	4618      	mov	r0, r3
 800a156:	3710      	adds	r7, #16
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	fffeff88 	.word	0xfffeff88

0800a160 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a160:	b480      	push	{r7}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a168:	bf00      	nop
 800a16a:	370c      	adds	r7, #12
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr

0800a174 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a17c:	bf00      	nop
 800a17e:	370c      	adds	r7, #12
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr

0800a188 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a190:	bf00      	nop
 800a192:	370c      	adds	r7, #12
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a1a4:	bf00      	nop
 800a1a6:	370c      	adds	r7, #12
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr

0800a1b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b085      	sub	sp, #20
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	4a40      	ldr	r2, [pc, #256]	; (800a2c4 <TIM_Base_SetConfig+0x114>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d013      	beq.n	800a1f0 <TIM_Base_SetConfig+0x40>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1ce:	d00f      	beq.n	800a1f0 <TIM_Base_SetConfig+0x40>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	4a3d      	ldr	r2, [pc, #244]	; (800a2c8 <TIM_Base_SetConfig+0x118>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d00b      	beq.n	800a1f0 <TIM_Base_SetConfig+0x40>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	4a3c      	ldr	r2, [pc, #240]	; (800a2cc <TIM_Base_SetConfig+0x11c>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d007      	beq.n	800a1f0 <TIM_Base_SetConfig+0x40>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	4a3b      	ldr	r2, [pc, #236]	; (800a2d0 <TIM_Base_SetConfig+0x120>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d003      	beq.n	800a1f0 <TIM_Base_SetConfig+0x40>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	4a3a      	ldr	r2, [pc, #232]	; (800a2d4 <TIM_Base_SetConfig+0x124>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d108      	bne.n	800a202 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	68fa      	ldr	r2, [r7, #12]
 800a1fe:	4313      	orrs	r3, r2
 800a200:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	4a2f      	ldr	r2, [pc, #188]	; (800a2c4 <TIM_Base_SetConfig+0x114>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d02b      	beq.n	800a262 <TIM_Base_SetConfig+0xb2>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a210:	d027      	beq.n	800a262 <TIM_Base_SetConfig+0xb2>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	4a2c      	ldr	r2, [pc, #176]	; (800a2c8 <TIM_Base_SetConfig+0x118>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d023      	beq.n	800a262 <TIM_Base_SetConfig+0xb2>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	4a2b      	ldr	r2, [pc, #172]	; (800a2cc <TIM_Base_SetConfig+0x11c>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d01f      	beq.n	800a262 <TIM_Base_SetConfig+0xb2>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	4a2a      	ldr	r2, [pc, #168]	; (800a2d0 <TIM_Base_SetConfig+0x120>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d01b      	beq.n	800a262 <TIM_Base_SetConfig+0xb2>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	4a29      	ldr	r2, [pc, #164]	; (800a2d4 <TIM_Base_SetConfig+0x124>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d017      	beq.n	800a262 <TIM_Base_SetConfig+0xb2>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	4a28      	ldr	r2, [pc, #160]	; (800a2d8 <TIM_Base_SetConfig+0x128>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d013      	beq.n	800a262 <TIM_Base_SetConfig+0xb2>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	4a27      	ldr	r2, [pc, #156]	; (800a2dc <TIM_Base_SetConfig+0x12c>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d00f      	beq.n	800a262 <TIM_Base_SetConfig+0xb2>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	4a26      	ldr	r2, [pc, #152]	; (800a2e0 <TIM_Base_SetConfig+0x130>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d00b      	beq.n	800a262 <TIM_Base_SetConfig+0xb2>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	4a25      	ldr	r2, [pc, #148]	; (800a2e4 <TIM_Base_SetConfig+0x134>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d007      	beq.n	800a262 <TIM_Base_SetConfig+0xb2>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	4a24      	ldr	r2, [pc, #144]	; (800a2e8 <TIM_Base_SetConfig+0x138>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d003      	beq.n	800a262 <TIM_Base_SetConfig+0xb2>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	4a23      	ldr	r2, [pc, #140]	; (800a2ec <TIM_Base_SetConfig+0x13c>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d108      	bne.n	800a274 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a268:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	68db      	ldr	r3, [r3, #12]
 800a26e:	68fa      	ldr	r2, [r7, #12]
 800a270:	4313      	orrs	r3, r2
 800a272:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	695b      	ldr	r3, [r3, #20]
 800a27e:	4313      	orrs	r3, r2
 800a280:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	68fa      	ldr	r2, [r7, #12]
 800a286:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	689a      	ldr	r2, [r3, #8]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	4a0a      	ldr	r2, [pc, #40]	; (800a2c4 <TIM_Base_SetConfig+0x114>)
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d003      	beq.n	800a2a8 <TIM_Base_SetConfig+0xf8>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	4a0c      	ldr	r2, [pc, #48]	; (800a2d4 <TIM_Base_SetConfig+0x124>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d103      	bne.n	800a2b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	691a      	ldr	r2, [r3, #16]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	615a      	str	r2, [r3, #20]
}
 800a2b6:	bf00      	nop
 800a2b8:	3714      	adds	r7, #20
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr
 800a2c2:	bf00      	nop
 800a2c4:	40010000 	.word	0x40010000
 800a2c8:	40000400 	.word	0x40000400
 800a2cc:	40000800 	.word	0x40000800
 800a2d0:	40000c00 	.word	0x40000c00
 800a2d4:	40010400 	.word	0x40010400
 800a2d8:	40014000 	.word	0x40014000
 800a2dc:	40014400 	.word	0x40014400
 800a2e0:	40014800 	.word	0x40014800
 800a2e4:	40001800 	.word	0x40001800
 800a2e8:	40001c00 	.word	0x40001c00
 800a2ec:	40002000 	.word	0x40002000

0800a2f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b087      	sub	sp, #28
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6a1b      	ldr	r3, [r3, #32]
 800a2fe:	f023 0201 	bic.w	r2, r3, #1
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6a1b      	ldr	r3, [r3, #32]
 800a30a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	699b      	ldr	r3, [r3, #24]
 800a316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a318:	68fa      	ldr	r2, [r7, #12]
 800a31a:	4b2b      	ldr	r3, [pc, #172]	; (800a3c8 <TIM_OC1_SetConfig+0xd8>)
 800a31c:	4013      	ands	r3, r2
 800a31e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f023 0303 	bic.w	r3, r3, #3
 800a326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	68fa      	ldr	r2, [r7, #12]
 800a32e:	4313      	orrs	r3, r2
 800a330:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	f023 0302 	bic.w	r3, r3, #2
 800a338:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	689b      	ldr	r3, [r3, #8]
 800a33e:	697a      	ldr	r2, [r7, #20]
 800a340:	4313      	orrs	r3, r2
 800a342:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	4a21      	ldr	r2, [pc, #132]	; (800a3cc <TIM_OC1_SetConfig+0xdc>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d003      	beq.n	800a354 <TIM_OC1_SetConfig+0x64>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	4a20      	ldr	r2, [pc, #128]	; (800a3d0 <TIM_OC1_SetConfig+0xe0>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d10c      	bne.n	800a36e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	f023 0308 	bic.w	r3, r3, #8
 800a35a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	697a      	ldr	r2, [r7, #20]
 800a362:	4313      	orrs	r3, r2
 800a364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	f023 0304 	bic.w	r3, r3, #4
 800a36c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	4a16      	ldr	r2, [pc, #88]	; (800a3cc <TIM_OC1_SetConfig+0xdc>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d003      	beq.n	800a37e <TIM_OC1_SetConfig+0x8e>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	4a15      	ldr	r2, [pc, #84]	; (800a3d0 <TIM_OC1_SetConfig+0xe0>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d111      	bne.n	800a3a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a38c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	695b      	ldr	r3, [r3, #20]
 800a392:	693a      	ldr	r2, [r7, #16]
 800a394:	4313      	orrs	r3, r2
 800a396:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	699b      	ldr	r3, [r3, #24]
 800a39c:	693a      	ldr	r2, [r7, #16]
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	693a      	ldr	r2, [r7, #16]
 800a3a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	68fa      	ldr	r2, [r7, #12]
 800a3ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	685a      	ldr	r2, [r3, #4]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	697a      	ldr	r2, [r7, #20]
 800a3ba:	621a      	str	r2, [r3, #32]
}
 800a3bc:	bf00      	nop
 800a3be:	371c      	adds	r7, #28
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr
 800a3c8:	fffeff8f 	.word	0xfffeff8f
 800a3cc:	40010000 	.word	0x40010000
 800a3d0:	40010400 	.word	0x40010400

0800a3d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b087      	sub	sp, #28
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6a1b      	ldr	r3, [r3, #32]
 800a3e2:	f023 0210 	bic.w	r2, r3, #16
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6a1b      	ldr	r3, [r3, #32]
 800a3ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	699b      	ldr	r3, [r3, #24]
 800a3fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a3fc:	68fa      	ldr	r2, [r7, #12]
 800a3fe:	4b2e      	ldr	r3, [pc, #184]	; (800a4b8 <TIM_OC2_SetConfig+0xe4>)
 800a400:	4013      	ands	r3, r2
 800a402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a40a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	021b      	lsls	r3, r3, #8
 800a412:	68fa      	ldr	r2, [r7, #12]
 800a414:	4313      	orrs	r3, r2
 800a416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	f023 0320 	bic.w	r3, r3, #32
 800a41e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	689b      	ldr	r3, [r3, #8]
 800a424:	011b      	lsls	r3, r3, #4
 800a426:	697a      	ldr	r2, [r7, #20]
 800a428:	4313      	orrs	r3, r2
 800a42a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	4a23      	ldr	r2, [pc, #140]	; (800a4bc <TIM_OC2_SetConfig+0xe8>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d003      	beq.n	800a43c <TIM_OC2_SetConfig+0x68>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	4a22      	ldr	r2, [pc, #136]	; (800a4c0 <TIM_OC2_SetConfig+0xec>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d10d      	bne.n	800a458 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a442:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	011b      	lsls	r3, r3, #4
 800a44a:	697a      	ldr	r2, [r7, #20]
 800a44c:	4313      	orrs	r3, r2
 800a44e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a456:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	4a18      	ldr	r2, [pc, #96]	; (800a4bc <TIM_OC2_SetConfig+0xe8>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d003      	beq.n	800a468 <TIM_OC2_SetConfig+0x94>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	4a17      	ldr	r2, [pc, #92]	; (800a4c0 <TIM_OC2_SetConfig+0xec>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d113      	bne.n	800a490 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a46e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a476:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	695b      	ldr	r3, [r3, #20]
 800a47c:	009b      	lsls	r3, r3, #2
 800a47e:	693a      	ldr	r2, [r7, #16]
 800a480:	4313      	orrs	r3, r2
 800a482:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	699b      	ldr	r3, [r3, #24]
 800a488:	009b      	lsls	r3, r3, #2
 800a48a:	693a      	ldr	r2, [r7, #16]
 800a48c:	4313      	orrs	r3, r2
 800a48e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	693a      	ldr	r2, [r7, #16]
 800a494:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	68fa      	ldr	r2, [r7, #12]
 800a49a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	685a      	ldr	r2, [r3, #4]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	697a      	ldr	r2, [r7, #20]
 800a4a8:	621a      	str	r2, [r3, #32]
}
 800a4aa:	bf00      	nop
 800a4ac:	371c      	adds	r7, #28
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr
 800a4b6:	bf00      	nop
 800a4b8:	feff8fff 	.word	0xfeff8fff
 800a4bc:	40010000 	.word	0x40010000
 800a4c0:	40010400 	.word	0x40010400

0800a4c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b087      	sub	sp, #28
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6a1b      	ldr	r3, [r3, #32]
 800a4d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6a1b      	ldr	r3, [r3, #32]
 800a4de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	69db      	ldr	r3, [r3, #28]
 800a4ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a4ec:	68fa      	ldr	r2, [r7, #12]
 800a4ee:	4b2d      	ldr	r3, [pc, #180]	; (800a5a4 <TIM_OC3_SetConfig+0xe0>)
 800a4f0:	4013      	ands	r3, r2
 800a4f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f023 0303 	bic.w	r3, r3, #3
 800a4fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	68fa      	ldr	r2, [r7, #12]
 800a502:	4313      	orrs	r3, r2
 800a504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a50c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	689b      	ldr	r3, [r3, #8]
 800a512:	021b      	lsls	r3, r3, #8
 800a514:	697a      	ldr	r2, [r7, #20]
 800a516:	4313      	orrs	r3, r2
 800a518:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	4a22      	ldr	r2, [pc, #136]	; (800a5a8 <TIM_OC3_SetConfig+0xe4>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d003      	beq.n	800a52a <TIM_OC3_SetConfig+0x66>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	4a21      	ldr	r2, [pc, #132]	; (800a5ac <TIM_OC3_SetConfig+0xe8>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d10d      	bne.n	800a546 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a530:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	68db      	ldr	r3, [r3, #12]
 800a536:	021b      	lsls	r3, r3, #8
 800a538:	697a      	ldr	r2, [r7, #20]
 800a53a:	4313      	orrs	r3, r2
 800a53c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a544:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	4a17      	ldr	r2, [pc, #92]	; (800a5a8 <TIM_OC3_SetConfig+0xe4>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d003      	beq.n	800a556 <TIM_OC3_SetConfig+0x92>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	4a16      	ldr	r2, [pc, #88]	; (800a5ac <TIM_OC3_SetConfig+0xe8>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d113      	bne.n	800a57e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a55c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a564:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	695b      	ldr	r3, [r3, #20]
 800a56a:	011b      	lsls	r3, r3, #4
 800a56c:	693a      	ldr	r2, [r7, #16]
 800a56e:	4313      	orrs	r3, r2
 800a570:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	699b      	ldr	r3, [r3, #24]
 800a576:	011b      	lsls	r3, r3, #4
 800a578:	693a      	ldr	r2, [r7, #16]
 800a57a:	4313      	orrs	r3, r2
 800a57c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	693a      	ldr	r2, [r7, #16]
 800a582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	68fa      	ldr	r2, [r7, #12]
 800a588:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	685a      	ldr	r2, [r3, #4]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	697a      	ldr	r2, [r7, #20]
 800a596:	621a      	str	r2, [r3, #32]
}
 800a598:	bf00      	nop
 800a59a:	371c      	adds	r7, #28
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr
 800a5a4:	fffeff8f 	.word	0xfffeff8f
 800a5a8:	40010000 	.word	0x40010000
 800a5ac:	40010400 	.word	0x40010400

0800a5b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b087      	sub	sp, #28
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6a1b      	ldr	r3, [r3, #32]
 800a5be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6a1b      	ldr	r3, [r3, #32]
 800a5ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	69db      	ldr	r3, [r3, #28]
 800a5d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a5d8:	68fa      	ldr	r2, [r7, #12]
 800a5da:	4b1e      	ldr	r3, [pc, #120]	; (800a654 <TIM_OC4_SetConfig+0xa4>)
 800a5dc:	4013      	ands	r3, r2
 800a5de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	021b      	lsls	r3, r3, #8
 800a5ee:	68fa      	ldr	r2, [r7, #12]
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a5fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	031b      	lsls	r3, r3, #12
 800a602:	693a      	ldr	r2, [r7, #16]
 800a604:	4313      	orrs	r3, r2
 800a606:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	4a13      	ldr	r2, [pc, #76]	; (800a658 <TIM_OC4_SetConfig+0xa8>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d003      	beq.n	800a618 <TIM_OC4_SetConfig+0x68>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	4a12      	ldr	r2, [pc, #72]	; (800a65c <TIM_OC4_SetConfig+0xac>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d109      	bne.n	800a62c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a61e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	695b      	ldr	r3, [r3, #20]
 800a624:	019b      	lsls	r3, r3, #6
 800a626:	697a      	ldr	r2, [r7, #20]
 800a628:	4313      	orrs	r3, r2
 800a62a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	697a      	ldr	r2, [r7, #20]
 800a630:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	68fa      	ldr	r2, [r7, #12]
 800a636:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	685a      	ldr	r2, [r3, #4]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	693a      	ldr	r2, [r7, #16]
 800a644:	621a      	str	r2, [r3, #32]
}
 800a646:	bf00      	nop
 800a648:	371c      	adds	r7, #28
 800a64a:	46bd      	mov	sp, r7
 800a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a650:	4770      	bx	lr
 800a652:	bf00      	nop
 800a654:	feff8fff 	.word	0xfeff8fff
 800a658:	40010000 	.word	0x40010000
 800a65c:	40010400 	.word	0x40010400

0800a660 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a660:	b480      	push	{r7}
 800a662:	b087      	sub	sp, #28
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6a1b      	ldr	r3, [r3, #32]
 800a66e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6a1b      	ldr	r3, [r3, #32]
 800a67a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a688:	68fa      	ldr	r2, [r7, #12]
 800a68a:	4b1b      	ldr	r3, [pc, #108]	; (800a6f8 <TIM_OC5_SetConfig+0x98>)
 800a68c:	4013      	ands	r3, r2
 800a68e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	68fa      	ldr	r2, [r7, #12]
 800a696:	4313      	orrs	r3, r2
 800a698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a6a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	689b      	ldr	r3, [r3, #8]
 800a6a6:	041b      	lsls	r3, r3, #16
 800a6a8:	693a      	ldr	r2, [r7, #16]
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	4a12      	ldr	r2, [pc, #72]	; (800a6fc <TIM_OC5_SetConfig+0x9c>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d003      	beq.n	800a6be <TIM_OC5_SetConfig+0x5e>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	4a11      	ldr	r2, [pc, #68]	; (800a700 <TIM_OC5_SetConfig+0xa0>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d109      	bne.n	800a6d2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a6c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	695b      	ldr	r3, [r3, #20]
 800a6ca:	021b      	lsls	r3, r3, #8
 800a6cc:	697a      	ldr	r2, [r7, #20]
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	697a      	ldr	r2, [r7, #20]
 800a6d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	68fa      	ldr	r2, [r7, #12]
 800a6dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	685a      	ldr	r2, [r3, #4]
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	693a      	ldr	r2, [r7, #16]
 800a6ea:	621a      	str	r2, [r3, #32]
}
 800a6ec:	bf00      	nop
 800a6ee:	371c      	adds	r7, #28
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr
 800a6f8:	fffeff8f 	.word	0xfffeff8f
 800a6fc:	40010000 	.word	0x40010000
 800a700:	40010400 	.word	0x40010400

0800a704 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a704:	b480      	push	{r7}
 800a706:	b087      	sub	sp, #28
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6a1b      	ldr	r3, [r3, #32]
 800a712:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6a1b      	ldr	r3, [r3, #32]
 800a71e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a72a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a72c:	68fa      	ldr	r2, [r7, #12]
 800a72e:	4b1c      	ldr	r3, [pc, #112]	; (800a7a0 <TIM_OC6_SetConfig+0x9c>)
 800a730:	4013      	ands	r3, r2
 800a732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	021b      	lsls	r3, r3, #8
 800a73a:	68fa      	ldr	r2, [r7, #12]
 800a73c:	4313      	orrs	r3, r2
 800a73e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a746:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	689b      	ldr	r3, [r3, #8]
 800a74c:	051b      	lsls	r3, r3, #20
 800a74e:	693a      	ldr	r2, [r7, #16]
 800a750:	4313      	orrs	r3, r2
 800a752:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	4a13      	ldr	r2, [pc, #76]	; (800a7a4 <TIM_OC6_SetConfig+0xa0>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d003      	beq.n	800a764 <TIM_OC6_SetConfig+0x60>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	4a12      	ldr	r2, [pc, #72]	; (800a7a8 <TIM_OC6_SetConfig+0xa4>)
 800a760:	4293      	cmp	r3, r2
 800a762:	d109      	bne.n	800a778 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a76a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	695b      	ldr	r3, [r3, #20]
 800a770:	029b      	lsls	r3, r3, #10
 800a772:	697a      	ldr	r2, [r7, #20]
 800a774:	4313      	orrs	r3, r2
 800a776:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	697a      	ldr	r2, [r7, #20]
 800a77c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	68fa      	ldr	r2, [r7, #12]
 800a782:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	685a      	ldr	r2, [r3, #4]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	693a      	ldr	r2, [r7, #16]
 800a790:	621a      	str	r2, [r3, #32]
}
 800a792:	bf00      	nop
 800a794:	371c      	adds	r7, #28
 800a796:	46bd      	mov	sp, r7
 800a798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79c:	4770      	bx	lr
 800a79e:	bf00      	nop
 800a7a0:	feff8fff 	.word	0xfeff8fff
 800a7a4:	40010000 	.word	0x40010000
 800a7a8:	40010400 	.word	0x40010400

0800a7ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b087      	sub	sp, #28
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	6a1b      	ldr	r3, [r3, #32]
 800a7bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	6a1b      	ldr	r3, [r3, #32]
 800a7c2:	f023 0201 	bic.w	r2, r3, #1
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	699b      	ldr	r3, [r3, #24]
 800a7ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a7d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	011b      	lsls	r3, r3, #4
 800a7dc:	693a      	ldr	r2, [r7, #16]
 800a7de:	4313      	orrs	r3, r2
 800a7e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	f023 030a 	bic.w	r3, r3, #10
 800a7e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a7ea:	697a      	ldr	r2, [r7, #20]
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	4313      	orrs	r3, r2
 800a7f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	693a      	ldr	r2, [r7, #16]
 800a7f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	697a      	ldr	r2, [r7, #20]
 800a7fc:	621a      	str	r2, [r3, #32]
}
 800a7fe:	bf00      	nop
 800a800:	371c      	adds	r7, #28
 800a802:	46bd      	mov	sp, r7
 800a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a808:	4770      	bx	lr

0800a80a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a80a:	b480      	push	{r7}
 800a80c:	b087      	sub	sp, #28
 800a80e:	af00      	add	r7, sp, #0
 800a810:	60f8      	str	r0, [r7, #12]
 800a812:	60b9      	str	r1, [r7, #8]
 800a814:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	6a1b      	ldr	r3, [r3, #32]
 800a81a:	f023 0210 	bic.w	r2, r3, #16
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	699b      	ldr	r3, [r3, #24]
 800a826:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	6a1b      	ldr	r3, [r3, #32]
 800a82c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a834:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	031b      	lsls	r3, r3, #12
 800a83a:	697a      	ldr	r2, [r7, #20]
 800a83c:	4313      	orrs	r3, r2
 800a83e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a846:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	011b      	lsls	r3, r3, #4
 800a84c:	693a      	ldr	r2, [r7, #16]
 800a84e:	4313      	orrs	r3, r2
 800a850:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	697a      	ldr	r2, [r7, #20]
 800a856:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	693a      	ldr	r2, [r7, #16]
 800a85c:	621a      	str	r2, [r3, #32]
}
 800a85e:	bf00      	nop
 800a860:	371c      	adds	r7, #28
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr

0800a86a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a86a:	b480      	push	{r7}
 800a86c:	b085      	sub	sp, #20
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
 800a872:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	689b      	ldr	r3, [r3, #8]
 800a878:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a880:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a882:	683a      	ldr	r2, [r7, #0]
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	4313      	orrs	r3, r2
 800a888:	f043 0307 	orr.w	r3, r3, #7
 800a88c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	68fa      	ldr	r2, [r7, #12]
 800a892:	609a      	str	r2, [r3, #8]
}
 800a894:	bf00      	nop
 800a896:	3714      	adds	r7, #20
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr

0800a8a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b087      	sub	sp, #28
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	60f8      	str	r0, [r7, #12]
 800a8a8:	60b9      	str	r1, [r7, #8]
 800a8aa:	607a      	str	r2, [r7, #4]
 800a8ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	689b      	ldr	r3, [r3, #8]
 800a8b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a8ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	021a      	lsls	r2, r3, #8
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	431a      	orrs	r2, r3
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	697a      	ldr	r2, [r7, #20]
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	697a      	ldr	r2, [r7, #20]
 800a8d2:	609a      	str	r2, [r3, #8]
}
 800a8d4:	bf00      	nop
 800a8d6:	371c      	adds	r7, #28
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr

0800a8e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b085      	sub	sp, #20
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	d101      	bne.n	800a8f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a8f4:	2302      	movs	r3, #2
 800a8f6:	e06d      	b.n	800a9d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2202      	movs	r2, #2
 800a904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	689b      	ldr	r3, [r3, #8]
 800a916:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	4a30      	ldr	r2, [pc, #192]	; (800a9e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d004      	beq.n	800a92c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	4a2f      	ldr	r2, [pc, #188]	; (800a9e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d108      	bne.n	800a93e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a932:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	68fa      	ldr	r2, [r7, #12]
 800a93a:	4313      	orrs	r3, r2
 800a93c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a944:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	68fa      	ldr	r2, [r7, #12]
 800a94c:	4313      	orrs	r3, r2
 800a94e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	68fa      	ldr	r2, [r7, #12]
 800a956:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a20      	ldr	r2, [pc, #128]	; (800a9e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d022      	beq.n	800a9a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a96a:	d01d      	beq.n	800a9a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a1d      	ldr	r2, [pc, #116]	; (800a9e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d018      	beq.n	800a9a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4a1c      	ldr	r2, [pc, #112]	; (800a9ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d013      	beq.n	800a9a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	4a1a      	ldr	r2, [pc, #104]	; (800a9f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d00e      	beq.n	800a9a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	4a15      	ldr	r2, [pc, #84]	; (800a9e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d009      	beq.n	800a9a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4a16      	ldr	r2, [pc, #88]	; (800a9f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d004      	beq.n	800a9a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	4a15      	ldr	r2, [pc, #84]	; (800a9f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d10c      	bne.n	800a9c2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a9ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	689b      	ldr	r3, [r3, #8]
 800a9b4:	68ba      	ldr	r2, [r7, #8]
 800a9b6:	4313      	orrs	r3, r2
 800a9b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	68ba      	ldr	r2, [r7, #8]
 800a9c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a9d2:	2300      	movs	r3, #0
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3714      	adds	r7, #20
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr
 800a9e0:	40010000 	.word	0x40010000
 800a9e4:	40010400 	.word	0x40010400
 800a9e8:	40000400 	.word	0x40000400
 800a9ec:	40000800 	.word	0x40000800
 800a9f0:	40000c00 	.word	0x40000c00
 800a9f4:	40014000 	.word	0x40014000
 800a9f8:	40001800 	.word	0x40001800

0800a9fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b085      	sub	sp, #20
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800aa06:	2300      	movs	r3, #0
 800aa08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa10:	2b01      	cmp	r3, #1
 800aa12:	d101      	bne.n	800aa18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800aa14:	2302      	movs	r3, #2
 800aa16:	e065      	b.n	800aae4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	68db      	ldr	r3, [r3, #12]
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	689b      	ldr	r3, [r3, #8]
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	4313      	orrs	r3, r2
 800aa48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4313      	orrs	r3, r2
 800aa56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	691b      	ldr	r3, [r3, #16]
 800aa62:	4313      	orrs	r3, r2
 800aa64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	695b      	ldr	r3, [r3, #20]
 800aa70:	4313      	orrs	r3, r2
 800aa72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	699b      	ldr	r3, [r3, #24]
 800aa8c:	041b      	lsls	r3, r3, #16
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4a16      	ldr	r2, [pc, #88]	; (800aaf0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d004      	beq.n	800aaa6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a14      	ldr	r2, [pc, #80]	; (800aaf4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d115      	bne.n	800aad2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab0:	051b      	lsls	r3, r3, #20
 800aab2:	4313      	orrs	r3, r2
 800aab4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	69db      	ldr	r3, [r3, #28]
 800aac0:	4313      	orrs	r3, r2
 800aac2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	6a1b      	ldr	r3, [r3, #32]
 800aace:	4313      	orrs	r3, r2
 800aad0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	68fa      	ldr	r2, [r7, #12]
 800aad8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2200      	movs	r2, #0
 800aade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aae2:	2300      	movs	r3, #0
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3714      	adds	r7, #20
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr
 800aaf0:	40010000 	.word	0x40010000
 800aaf4:	40010400 	.word	0x40010400

0800aaf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b083      	sub	sp, #12
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ab00:	bf00      	nop
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ab14:	bf00      	nop
 800ab16:	370c      	adds	r7, #12
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b083      	sub	sp, #12
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ab28:	bf00      	nop
 800ab2a:	370c      	adds	r7, #12
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b082      	sub	sp, #8
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d101      	bne.n	800ab46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ab42:	2301      	movs	r3, #1
 800ab44:	e040      	b.n	800abc8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d106      	bne.n	800ab5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2200      	movs	r2, #0
 800ab52:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f7f8 fd20 	bl	800359c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2224      	movs	r2, #36	; 0x24
 800ab60:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	681a      	ldr	r2, [r3, #0]
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f022 0201 	bic.w	r2, r2, #1
 800ab70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f000 f82c 	bl	800abd0 <UART_SetConfig>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	2b01      	cmp	r3, #1
 800ab7c:	d101      	bne.n	800ab82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ab7e:	2301      	movs	r3, #1
 800ab80:	e022      	b.n	800abc8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d002      	beq.n	800ab90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f000 face 	bl	800b12c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	685a      	ldr	r2, [r3, #4]
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ab9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	689a      	ldr	r2, [r3, #8]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800abae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	681a      	ldr	r2, [r3, #0]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f042 0201 	orr.w	r2, r2, #1
 800abbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f000 fb55 	bl	800b270 <UART_CheckIdleState>
 800abc6:	4603      	mov	r3, r0
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3708      	adds	r7, #8
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b088      	sub	sp, #32
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800abd8:	2300      	movs	r3, #0
 800abda:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800abdc:	2300      	movs	r3, #0
 800abde:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	689a      	ldr	r2, [r3, #8]
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	691b      	ldr	r3, [r3, #16]
 800abe8:	431a      	orrs	r2, r3
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	695b      	ldr	r3, [r3, #20]
 800abee:	431a      	orrs	r2, r3
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	69db      	ldr	r3, [r3, #28]
 800abf4:	4313      	orrs	r3, r2
 800abf6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	4ba6      	ldr	r3, [pc, #664]	; (800ae98 <UART_SetConfig+0x2c8>)
 800ac00:	4013      	ands	r3, r2
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	6812      	ldr	r2, [r2, #0]
 800ac06:	6939      	ldr	r1, [r7, #16]
 800ac08:	430b      	orrs	r3, r1
 800ac0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	68da      	ldr	r2, [r3, #12]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	430a      	orrs	r2, r1
 800ac20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	699b      	ldr	r3, [r3, #24]
 800ac26:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6a1b      	ldr	r3, [r3, #32]
 800ac2c:	693a      	ldr	r2, [r7, #16]
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	689b      	ldr	r3, [r3, #8]
 800ac38:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	693a      	ldr	r2, [r7, #16]
 800ac42:	430a      	orrs	r2, r1
 800ac44:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4a94      	ldr	r2, [pc, #592]	; (800ae9c <UART_SetConfig+0x2cc>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d120      	bne.n	800ac92 <UART_SetConfig+0xc2>
 800ac50:	4b93      	ldr	r3, [pc, #588]	; (800aea0 <UART_SetConfig+0x2d0>)
 800ac52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac56:	f003 0303 	and.w	r3, r3, #3
 800ac5a:	2b03      	cmp	r3, #3
 800ac5c:	d816      	bhi.n	800ac8c <UART_SetConfig+0xbc>
 800ac5e:	a201      	add	r2, pc, #4	; (adr r2, 800ac64 <UART_SetConfig+0x94>)
 800ac60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac64:	0800ac75 	.word	0x0800ac75
 800ac68:	0800ac81 	.word	0x0800ac81
 800ac6c:	0800ac7b 	.word	0x0800ac7b
 800ac70:	0800ac87 	.word	0x0800ac87
 800ac74:	2301      	movs	r3, #1
 800ac76:	77fb      	strb	r3, [r7, #31]
 800ac78:	e150      	b.n	800af1c <UART_SetConfig+0x34c>
 800ac7a:	2302      	movs	r3, #2
 800ac7c:	77fb      	strb	r3, [r7, #31]
 800ac7e:	e14d      	b.n	800af1c <UART_SetConfig+0x34c>
 800ac80:	2304      	movs	r3, #4
 800ac82:	77fb      	strb	r3, [r7, #31]
 800ac84:	e14a      	b.n	800af1c <UART_SetConfig+0x34c>
 800ac86:	2308      	movs	r3, #8
 800ac88:	77fb      	strb	r3, [r7, #31]
 800ac8a:	e147      	b.n	800af1c <UART_SetConfig+0x34c>
 800ac8c:	2310      	movs	r3, #16
 800ac8e:	77fb      	strb	r3, [r7, #31]
 800ac90:	e144      	b.n	800af1c <UART_SetConfig+0x34c>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	4a83      	ldr	r2, [pc, #524]	; (800aea4 <UART_SetConfig+0x2d4>)
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d132      	bne.n	800ad02 <UART_SetConfig+0x132>
 800ac9c:	4b80      	ldr	r3, [pc, #512]	; (800aea0 <UART_SetConfig+0x2d0>)
 800ac9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aca2:	f003 030c 	and.w	r3, r3, #12
 800aca6:	2b0c      	cmp	r3, #12
 800aca8:	d828      	bhi.n	800acfc <UART_SetConfig+0x12c>
 800acaa:	a201      	add	r2, pc, #4	; (adr r2, 800acb0 <UART_SetConfig+0xe0>)
 800acac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acb0:	0800ace5 	.word	0x0800ace5
 800acb4:	0800acfd 	.word	0x0800acfd
 800acb8:	0800acfd 	.word	0x0800acfd
 800acbc:	0800acfd 	.word	0x0800acfd
 800acc0:	0800acf1 	.word	0x0800acf1
 800acc4:	0800acfd 	.word	0x0800acfd
 800acc8:	0800acfd 	.word	0x0800acfd
 800accc:	0800acfd 	.word	0x0800acfd
 800acd0:	0800aceb 	.word	0x0800aceb
 800acd4:	0800acfd 	.word	0x0800acfd
 800acd8:	0800acfd 	.word	0x0800acfd
 800acdc:	0800acfd 	.word	0x0800acfd
 800ace0:	0800acf7 	.word	0x0800acf7
 800ace4:	2300      	movs	r3, #0
 800ace6:	77fb      	strb	r3, [r7, #31]
 800ace8:	e118      	b.n	800af1c <UART_SetConfig+0x34c>
 800acea:	2302      	movs	r3, #2
 800acec:	77fb      	strb	r3, [r7, #31]
 800acee:	e115      	b.n	800af1c <UART_SetConfig+0x34c>
 800acf0:	2304      	movs	r3, #4
 800acf2:	77fb      	strb	r3, [r7, #31]
 800acf4:	e112      	b.n	800af1c <UART_SetConfig+0x34c>
 800acf6:	2308      	movs	r3, #8
 800acf8:	77fb      	strb	r3, [r7, #31]
 800acfa:	e10f      	b.n	800af1c <UART_SetConfig+0x34c>
 800acfc:	2310      	movs	r3, #16
 800acfe:	77fb      	strb	r3, [r7, #31]
 800ad00:	e10c      	b.n	800af1c <UART_SetConfig+0x34c>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4a68      	ldr	r2, [pc, #416]	; (800aea8 <UART_SetConfig+0x2d8>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d120      	bne.n	800ad4e <UART_SetConfig+0x17e>
 800ad0c:	4b64      	ldr	r3, [pc, #400]	; (800aea0 <UART_SetConfig+0x2d0>)
 800ad0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad12:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ad16:	2b30      	cmp	r3, #48	; 0x30
 800ad18:	d013      	beq.n	800ad42 <UART_SetConfig+0x172>
 800ad1a:	2b30      	cmp	r3, #48	; 0x30
 800ad1c:	d814      	bhi.n	800ad48 <UART_SetConfig+0x178>
 800ad1e:	2b20      	cmp	r3, #32
 800ad20:	d009      	beq.n	800ad36 <UART_SetConfig+0x166>
 800ad22:	2b20      	cmp	r3, #32
 800ad24:	d810      	bhi.n	800ad48 <UART_SetConfig+0x178>
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d002      	beq.n	800ad30 <UART_SetConfig+0x160>
 800ad2a:	2b10      	cmp	r3, #16
 800ad2c:	d006      	beq.n	800ad3c <UART_SetConfig+0x16c>
 800ad2e:	e00b      	b.n	800ad48 <UART_SetConfig+0x178>
 800ad30:	2300      	movs	r3, #0
 800ad32:	77fb      	strb	r3, [r7, #31]
 800ad34:	e0f2      	b.n	800af1c <UART_SetConfig+0x34c>
 800ad36:	2302      	movs	r3, #2
 800ad38:	77fb      	strb	r3, [r7, #31]
 800ad3a:	e0ef      	b.n	800af1c <UART_SetConfig+0x34c>
 800ad3c:	2304      	movs	r3, #4
 800ad3e:	77fb      	strb	r3, [r7, #31]
 800ad40:	e0ec      	b.n	800af1c <UART_SetConfig+0x34c>
 800ad42:	2308      	movs	r3, #8
 800ad44:	77fb      	strb	r3, [r7, #31]
 800ad46:	e0e9      	b.n	800af1c <UART_SetConfig+0x34c>
 800ad48:	2310      	movs	r3, #16
 800ad4a:	77fb      	strb	r3, [r7, #31]
 800ad4c:	e0e6      	b.n	800af1c <UART_SetConfig+0x34c>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	4a56      	ldr	r2, [pc, #344]	; (800aeac <UART_SetConfig+0x2dc>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d120      	bne.n	800ad9a <UART_SetConfig+0x1ca>
 800ad58:	4b51      	ldr	r3, [pc, #324]	; (800aea0 <UART_SetConfig+0x2d0>)
 800ad5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad5e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ad62:	2bc0      	cmp	r3, #192	; 0xc0
 800ad64:	d013      	beq.n	800ad8e <UART_SetConfig+0x1be>
 800ad66:	2bc0      	cmp	r3, #192	; 0xc0
 800ad68:	d814      	bhi.n	800ad94 <UART_SetConfig+0x1c4>
 800ad6a:	2b80      	cmp	r3, #128	; 0x80
 800ad6c:	d009      	beq.n	800ad82 <UART_SetConfig+0x1b2>
 800ad6e:	2b80      	cmp	r3, #128	; 0x80
 800ad70:	d810      	bhi.n	800ad94 <UART_SetConfig+0x1c4>
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d002      	beq.n	800ad7c <UART_SetConfig+0x1ac>
 800ad76:	2b40      	cmp	r3, #64	; 0x40
 800ad78:	d006      	beq.n	800ad88 <UART_SetConfig+0x1b8>
 800ad7a:	e00b      	b.n	800ad94 <UART_SetConfig+0x1c4>
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	77fb      	strb	r3, [r7, #31]
 800ad80:	e0cc      	b.n	800af1c <UART_SetConfig+0x34c>
 800ad82:	2302      	movs	r3, #2
 800ad84:	77fb      	strb	r3, [r7, #31]
 800ad86:	e0c9      	b.n	800af1c <UART_SetConfig+0x34c>
 800ad88:	2304      	movs	r3, #4
 800ad8a:	77fb      	strb	r3, [r7, #31]
 800ad8c:	e0c6      	b.n	800af1c <UART_SetConfig+0x34c>
 800ad8e:	2308      	movs	r3, #8
 800ad90:	77fb      	strb	r3, [r7, #31]
 800ad92:	e0c3      	b.n	800af1c <UART_SetConfig+0x34c>
 800ad94:	2310      	movs	r3, #16
 800ad96:	77fb      	strb	r3, [r7, #31]
 800ad98:	e0c0      	b.n	800af1c <UART_SetConfig+0x34c>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	4a44      	ldr	r2, [pc, #272]	; (800aeb0 <UART_SetConfig+0x2e0>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d125      	bne.n	800adf0 <UART_SetConfig+0x220>
 800ada4:	4b3e      	ldr	r3, [pc, #248]	; (800aea0 <UART_SetConfig+0x2d0>)
 800ada6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800adae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800adb2:	d017      	beq.n	800ade4 <UART_SetConfig+0x214>
 800adb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800adb8:	d817      	bhi.n	800adea <UART_SetConfig+0x21a>
 800adba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800adbe:	d00b      	beq.n	800add8 <UART_SetConfig+0x208>
 800adc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800adc4:	d811      	bhi.n	800adea <UART_SetConfig+0x21a>
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d003      	beq.n	800add2 <UART_SetConfig+0x202>
 800adca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adce:	d006      	beq.n	800adde <UART_SetConfig+0x20e>
 800add0:	e00b      	b.n	800adea <UART_SetConfig+0x21a>
 800add2:	2300      	movs	r3, #0
 800add4:	77fb      	strb	r3, [r7, #31]
 800add6:	e0a1      	b.n	800af1c <UART_SetConfig+0x34c>
 800add8:	2302      	movs	r3, #2
 800adda:	77fb      	strb	r3, [r7, #31]
 800addc:	e09e      	b.n	800af1c <UART_SetConfig+0x34c>
 800adde:	2304      	movs	r3, #4
 800ade0:	77fb      	strb	r3, [r7, #31]
 800ade2:	e09b      	b.n	800af1c <UART_SetConfig+0x34c>
 800ade4:	2308      	movs	r3, #8
 800ade6:	77fb      	strb	r3, [r7, #31]
 800ade8:	e098      	b.n	800af1c <UART_SetConfig+0x34c>
 800adea:	2310      	movs	r3, #16
 800adec:	77fb      	strb	r3, [r7, #31]
 800adee:	e095      	b.n	800af1c <UART_SetConfig+0x34c>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4a2f      	ldr	r2, [pc, #188]	; (800aeb4 <UART_SetConfig+0x2e4>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d125      	bne.n	800ae46 <UART_SetConfig+0x276>
 800adfa:	4b29      	ldr	r3, [pc, #164]	; (800aea0 <UART_SetConfig+0x2d0>)
 800adfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ae04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ae08:	d017      	beq.n	800ae3a <UART_SetConfig+0x26a>
 800ae0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ae0e:	d817      	bhi.n	800ae40 <UART_SetConfig+0x270>
 800ae10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae14:	d00b      	beq.n	800ae2e <UART_SetConfig+0x25e>
 800ae16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae1a:	d811      	bhi.n	800ae40 <UART_SetConfig+0x270>
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d003      	beq.n	800ae28 <UART_SetConfig+0x258>
 800ae20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae24:	d006      	beq.n	800ae34 <UART_SetConfig+0x264>
 800ae26:	e00b      	b.n	800ae40 <UART_SetConfig+0x270>
 800ae28:	2301      	movs	r3, #1
 800ae2a:	77fb      	strb	r3, [r7, #31]
 800ae2c:	e076      	b.n	800af1c <UART_SetConfig+0x34c>
 800ae2e:	2302      	movs	r3, #2
 800ae30:	77fb      	strb	r3, [r7, #31]
 800ae32:	e073      	b.n	800af1c <UART_SetConfig+0x34c>
 800ae34:	2304      	movs	r3, #4
 800ae36:	77fb      	strb	r3, [r7, #31]
 800ae38:	e070      	b.n	800af1c <UART_SetConfig+0x34c>
 800ae3a:	2308      	movs	r3, #8
 800ae3c:	77fb      	strb	r3, [r7, #31]
 800ae3e:	e06d      	b.n	800af1c <UART_SetConfig+0x34c>
 800ae40:	2310      	movs	r3, #16
 800ae42:	77fb      	strb	r3, [r7, #31]
 800ae44:	e06a      	b.n	800af1c <UART_SetConfig+0x34c>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	4a1b      	ldr	r2, [pc, #108]	; (800aeb8 <UART_SetConfig+0x2e8>)
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d138      	bne.n	800aec2 <UART_SetConfig+0x2f2>
 800ae50:	4b13      	ldr	r3, [pc, #76]	; (800aea0 <UART_SetConfig+0x2d0>)
 800ae52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae56:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ae5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ae5e:	d017      	beq.n	800ae90 <UART_SetConfig+0x2c0>
 800ae60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ae64:	d82a      	bhi.n	800aebc <UART_SetConfig+0x2ec>
 800ae66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae6a:	d00b      	beq.n	800ae84 <UART_SetConfig+0x2b4>
 800ae6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae70:	d824      	bhi.n	800aebc <UART_SetConfig+0x2ec>
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d003      	beq.n	800ae7e <UART_SetConfig+0x2ae>
 800ae76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae7a:	d006      	beq.n	800ae8a <UART_SetConfig+0x2ba>
 800ae7c:	e01e      	b.n	800aebc <UART_SetConfig+0x2ec>
 800ae7e:	2300      	movs	r3, #0
 800ae80:	77fb      	strb	r3, [r7, #31]
 800ae82:	e04b      	b.n	800af1c <UART_SetConfig+0x34c>
 800ae84:	2302      	movs	r3, #2
 800ae86:	77fb      	strb	r3, [r7, #31]
 800ae88:	e048      	b.n	800af1c <UART_SetConfig+0x34c>
 800ae8a:	2304      	movs	r3, #4
 800ae8c:	77fb      	strb	r3, [r7, #31]
 800ae8e:	e045      	b.n	800af1c <UART_SetConfig+0x34c>
 800ae90:	2308      	movs	r3, #8
 800ae92:	77fb      	strb	r3, [r7, #31]
 800ae94:	e042      	b.n	800af1c <UART_SetConfig+0x34c>
 800ae96:	bf00      	nop
 800ae98:	efff69f3 	.word	0xefff69f3
 800ae9c:	40011000 	.word	0x40011000
 800aea0:	40023800 	.word	0x40023800
 800aea4:	40004400 	.word	0x40004400
 800aea8:	40004800 	.word	0x40004800
 800aeac:	40004c00 	.word	0x40004c00
 800aeb0:	40005000 	.word	0x40005000
 800aeb4:	40011400 	.word	0x40011400
 800aeb8:	40007800 	.word	0x40007800
 800aebc:	2310      	movs	r3, #16
 800aebe:	77fb      	strb	r3, [r7, #31]
 800aec0:	e02c      	b.n	800af1c <UART_SetConfig+0x34c>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4a95      	ldr	r2, [pc, #596]	; (800b11c <UART_SetConfig+0x54c>)
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d125      	bne.n	800af18 <UART_SetConfig+0x348>
 800aecc:	4b94      	ldr	r3, [pc, #592]	; (800b120 <UART_SetConfig+0x550>)
 800aece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aed2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800aed6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800aeda:	d017      	beq.n	800af0c <UART_SetConfig+0x33c>
 800aedc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800aee0:	d817      	bhi.n	800af12 <UART_SetConfig+0x342>
 800aee2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aee6:	d00b      	beq.n	800af00 <UART_SetConfig+0x330>
 800aee8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aeec:	d811      	bhi.n	800af12 <UART_SetConfig+0x342>
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d003      	beq.n	800aefa <UART_SetConfig+0x32a>
 800aef2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aef6:	d006      	beq.n	800af06 <UART_SetConfig+0x336>
 800aef8:	e00b      	b.n	800af12 <UART_SetConfig+0x342>
 800aefa:	2300      	movs	r3, #0
 800aefc:	77fb      	strb	r3, [r7, #31]
 800aefe:	e00d      	b.n	800af1c <UART_SetConfig+0x34c>
 800af00:	2302      	movs	r3, #2
 800af02:	77fb      	strb	r3, [r7, #31]
 800af04:	e00a      	b.n	800af1c <UART_SetConfig+0x34c>
 800af06:	2304      	movs	r3, #4
 800af08:	77fb      	strb	r3, [r7, #31]
 800af0a:	e007      	b.n	800af1c <UART_SetConfig+0x34c>
 800af0c:	2308      	movs	r3, #8
 800af0e:	77fb      	strb	r3, [r7, #31]
 800af10:	e004      	b.n	800af1c <UART_SetConfig+0x34c>
 800af12:	2310      	movs	r3, #16
 800af14:	77fb      	strb	r3, [r7, #31]
 800af16:	e001      	b.n	800af1c <UART_SetConfig+0x34c>
 800af18:	2310      	movs	r3, #16
 800af1a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	69db      	ldr	r3, [r3, #28]
 800af20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af24:	f040 8080 	bne.w	800b028 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800af28:	7ffb      	ldrb	r3, [r7, #31]
 800af2a:	2b08      	cmp	r3, #8
 800af2c:	d85c      	bhi.n	800afe8 <UART_SetConfig+0x418>
 800af2e:	a201      	add	r2, pc, #4	; (adr r2, 800af34 <UART_SetConfig+0x364>)
 800af30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af34:	0800af59 	.word	0x0800af59
 800af38:	0800af79 	.word	0x0800af79
 800af3c:	0800af99 	.word	0x0800af99
 800af40:	0800afe9 	.word	0x0800afe9
 800af44:	0800afb1 	.word	0x0800afb1
 800af48:	0800afe9 	.word	0x0800afe9
 800af4c:	0800afe9 	.word	0x0800afe9
 800af50:	0800afe9 	.word	0x0800afe9
 800af54:	0800afd1 	.word	0x0800afd1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af58:	f7fc f8b2 	bl	80070c0 <HAL_RCC_GetPCLK1Freq>
 800af5c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	005a      	lsls	r2, r3, #1
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	085b      	lsrs	r3, r3, #1
 800af68:	441a      	add	r2, r3
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800af72:	b29b      	uxth	r3, r3
 800af74:	61bb      	str	r3, [r7, #24]
        break;
 800af76:	e03a      	b.n	800afee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af78:	f7fc f8b6 	bl	80070e8 <HAL_RCC_GetPCLK2Freq>
 800af7c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	005a      	lsls	r2, r3, #1
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	685b      	ldr	r3, [r3, #4]
 800af86:	085b      	lsrs	r3, r3, #1
 800af88:	441a      	add	r2, r3
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800af92:	b29b      	uxth	r3, r3
 800af94:	61bb      	str	r3, [r7, #24]
        break;
 800af96:	e02a      	b.n	800afee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	085a      	lsrs	r2, r3, #1
 800af9e:	4b61      	ldr	r3, [pc, #388]	; (800b124 <UART_SetConfig+0x554>)
 800afa0:	4413      	add	r3, r2
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	6852      	ldr	r2, [r2, #4]
 800afa6:	fbb3 f3f2 	udiv	r3, r3, r2
 800afaa:	b29b      	uxth	r3, r3
 800afac:	61bb      	str	r3, [r7, #24]
        break;
 800afae:	e01e      	b.n	800afee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800afb0:	f7fb ffb4 	bl	8006f1c <HAL_RCC_GetSysClockFreq>
 800afb4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	005a      	lsls	r2, r3, #1
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	085b      	lsrs	r3, r3, #1
 800afc0:	441a      	add	r2, r3
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800afca:	b29b      	uxth	r3, r3
 800afcc:	61bb      	str	r3, [r7, #24]
        break;
 800afce:	e00e      	b.n	800afee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	085b      	lsrs	r3, r3, #1
 800afd6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	685b      	ldr	r3, [r3, #4]
 800afde:	fbb2 f3f3 	udiv	r3, r2, r3
 800afe2:	b29b      	uxth	r3, r3
 800afe4:	61bb      	str	r3, [r7, #24]
        break;
 800afe6:	e002      	b.n	800afee <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800afe8:	2301      	movs	r3, #1
 800afea:	75fb      	strb	r3, [r7, #23]
        break;
 800afec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800afee:	69bb      	ldr	r3, [r7, #24]
 800aff0:	2b0f      	cmp	r3, #15
 800aff2:	d916      	bls.n	800b022 <UART_SetConfig+0x452>
 800aff4:	69bb      	ldr	r3, [r7, #24]
 800aff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800affa:	d212      	bcs.n	800b022 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800affc:	69bb      	ldr	r3, [r7, #24]
 800affe:	b29b      	uxth	r3, r3
 800b000:	f023 030f 	bic.w	r3, r3, #15
 800b004:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b006:	69bb      	ldr	r3, [r7, #24]
 800b008:	085b      	lsrs	r3, r3, #1
 800b00a:	b29b      	uxth	r3, r3
 800b00c:	f003 0307 	and.w	r3, r3, #7
 800b010:	b29a      	uxth	r2, r3
 800b012:	897b      	ldrh	r3, [r7, #10]
 800b014:	4313      	orrs	r3, r2
 800b016:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	897a      	ldrh	r2, [r7, #10]
 800b01e:	60da      	str	r2, [r3, #12]
 800b020:	e070      	b.n	800b104 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b022:	2301      	movs	r3, #1
 800b024:	75fb      	strb	r3, [r7, #23]
 800b026:	e06d      	b.n	800b104 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800b028:	7ffb      	ldrb	r3, [r7, #31]
 800b02a:	2b08      	cmp	r3, #8
 800b02c:	d859      	bhi.n	800b0e2 <UART_SetConfig+0x512>
 800b02e:	a201      	add	r2, pc, #4	; (adr r2, 800b034 <UART_SetConfig+0x464>)
 800b030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b034:	0800b059 	.word	0x0800b059
 800b038:	0800b077 	.word	0x0800b077
 800b03c:	0800b095 	.word	0x0800b095
 800b040:	0800b0e3 	.word	0x0800b0e3
 800b044:	0800b0ad 	.word	0x0800b0ad
 800b048:	0800b0e3 	.word	0x0800b0e3
 800b04c:	0800b0e3 	.word	0x0800b0e3
 800b050:	0800b0e3 	.word	0x0800b0e3
 800b054:	0800b0cb 	.word	0x0800b0cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b058:	f7fc f832 	bl	80070c0 <HAL_RCC_GetPCLK1Freq>
 800b05c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	685b      	ldr	r3, [r3, #4]
 800b062:	085a      	lsrs	r2, r3, #1
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	441a      	add	r2, r3
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b070:	b29b      	uxth	r3, r3
 800b072:	61bb      	str	r3, [r7, #24]
        break;
 800b074:	e038      	b.n	800b0e8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b076:	f7fc f837 	bl	80070e8 <HAL_RCC_GetPCLK2Freq>
 800b07a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	085a      	lsrs	r2, r3, #1
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	441a      	add	r2, r3
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b08e:	b29b      	uxth	r3, r3
 800b090:	61bb      	str	r3, [r7, #24]
        break;
 800b092:	e029      	b.n	800b0e8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	685b      	ldr	r3, [r3, #4]
 800b098:	085a      	lsrs	r2, r3, #1
 800b09a:	4b23      	ldr	r3, [pc, #140]	; (800b128 <UART_SetConfig+0x558>)
 800b09c:	4413      	add	r3, r2
 800b09e:	687a      	ldr	r2, [r7, #4]
 800b0a0:	6852      	ldr	r2, [r2, #4]
 800b0a2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b0a6:	b29b      	uxth	r3, r3
 800b0a8:	61bb      	str	r3, [r7, #24]
        break;
 800b0aa:	e01d      	b.n	800b0e8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b0ac:	f7fb ff36 	bl	8006f1c <HAL_RCC_GetSysClockFreq>
 800b0b0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	085a      	lsrs	r2, r3, #1
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	441a      	add	r2, r3
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	685b      	ldr	r3, [r3, #4]
 800b0c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0c4:	b29b      	uxth	r3, r3
 800b0c6:	61bb      	str	r3, [r7, #24]
        break;
 800b0c8:	e00e      	b.n	800b0e8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	085b      	lsrs	r3, r3, #1
 800b0d0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	61bb      	str	r3, [r7, #24]
        break;
 800b0e0:	e002      	b.n	800b0e8 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	75fb      	strb	r3, [r7, #23]
        break;
 800b0e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b0e8:	69bb      	ldr	r3, [r7, #24]
 800b0ea:	2b0f      	cmp	r3, #15
 800b0ec:	d908      	bls.n	800b100 <UART_SetConfig+0x530>
 800b0ee:	69bb      	ldr	r3, [r7, #24]
 800b0f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0f4:	d204      	bcs.n	800b100 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	69ba      	ldr	r2, [r7, #24]
 800b0fc:	60da      	str	r2, [r3, #12]
 800b0fe:	e001      	b.n	800b104 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b100:	2301      	movs	r3, #1
 800b102:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2200      	movs	r2, #0
 800b108:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2200      	movs	r2, #0
 800b10e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800b110:	7dfb      	ldrb	r3, [r7, #23]
}
 800b112:	4618      	mov	r0, r3
 800b114:	3720      	adds	r7, #32
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	bf00      	nop
 800b11c:	40007c00 	.word	0x40007c00
 800b120:	40023800 	.word	0x40023800
 800b124:	01e84800 	.word	0x01e84800
 800b128:	00f42400 	.word	0x00f42400

0800b12c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b083      	sub	sp, #12
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b138:	f003 0301 	and.w	r3, r3, #1
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d00a      	beq.n	800b156 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	430a      	orrs	r2, r1
 800b154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15a:	f003 0302 	and.w	r3, r3, #2
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d00a      	beq.n	800b178 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	430a      	orrs	r2, r1
 800b176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b17c:	f003 0304 	and.w	r3, r3, #4
 800b180:	2b00      	cmp	r3, #0
 800b182:	d00a      	beq.n	800b19a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	685b      	ldr	r3, [r3, #4]
 800b18a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	430a      	orrs	r2, r1
 800b198:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b19e:	f003 0308 	and.w	r3, r3, #8
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d00a      	beq.n	800b1bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	685b      	ldr	r3, [r3, #4]
 800b1ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	430a      	orrs	r2, r1
 800b1ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c0:	f003 0310 	and.w	r3, r3, #16
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d00a      	beq.n	800b1de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	689b      	ldr	r3, [r3, #8]
 800b1ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	430a      	orrs	r2, r1
 800b1dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e2:	f003 0320 	and.w	r3, r3, #32
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d00a      	beq.n	800b200 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	689b      	ldr	r3, [r3, #8]
 800b1f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	430a      	orrs	r2, r1
 800b1fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d01a      	beq.n	800b242 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	430a      	orrs	r2, r1
 800b220:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b226:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b22a:	d10a      	bne.n	800b242 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	430a      	orrs	r2, r1
 800b240:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d00a      	beq.n	800b264 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	430a      	orrs	r2, r1
 800b262:	605a      	str	r2, [r3, #4]
  }
}
 800b264:	bf00      	nop
 800b266:	370c      	adds	r7, #12
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr

0800b270 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b086      	sub	sp, #24
 800b274:	af02      	add	r7, sp, #8
 800b276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2200      	movs	r2, #0
 800b27c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b27e:	f7f8 fcdb 	bl	8003c38 <HAL_GetTick>
 800b282:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f003 0308 	and.w	r3, r3, #8
 800b28e:	2b08      	cmp	r3, #8
 800b290:	d10e      	bne.n	800b2b0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b292:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b296:	9300      	str	r3, [sp, #0]
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	2200      	movs	r2, #0
 800b29c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f000 f814 	bl	800b2ce <UART_WaitOnFlagUntilTimeout>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d001      	beq.n	800b2b0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b2ac:	2303      	movs	r3, #3
 800b2ae:	e00a      	b.n	800b2c6 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2220      	movs	r2, #32
 800b2b4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2220      	movs	r2, #32
 800b2ba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b2c4:	2300      	movs	r3, #0
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3710      	adds	r7, #16
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}

0800b2ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b2ce:	b580      	push	{r7, lr}
 800b2d0:	b084      	sub	sp, #16
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	60f8      	str	r0, [r7, #12]
 800b2d6:	60b9      	str	r1, [r7, #8]
 800b2d8:	603b      	str	r3, [r7, #0]
 800b2da:	4613      	mov	r3, r2
 800b2dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2de:	e05d      	b.n	800b39c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b2e0:	69bb      	ldr	r3, [r7, #24]
 800b2e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2e6:	d059      	beq.n	800b39c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2e8:	f7f8 fca6 	bl	8003c38 <HAL_GetTick>
 800b2ec:	4602      	mov	r2, r0
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	1ad3      	subs	r3, r2, r3
 800b2f2:	69ba      	ldr	r2, [r7, #24]
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d302      	bcc.n	800b2fe <UART_WaitOnFlagUntilTimeout+0x30>
 800b2f8:	69bb      	ldr	r3, [r7, #24]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d11b      	bne.n	800b336 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	681a      	ldr	r2, [r3, #0]
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b30c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	689a      	ldr	r2, [r3, #8]
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f022 0201 	bic.w	r2, r2, #1
 800b31c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2220      	movs	r2, #32
 800b322:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2220      	movs	r2, #32
 800b328:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2200      	movs	r2, #0
 800b32e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800b332:	2303      	movs	r3, #3
 800b334:	e042      	b.n	800b3bc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f003 0304 	and.w	r3, r3, #4
 800b340:	2b00      	cmp	r3, #0
 800b342:	d02b      	beq.n	800b39c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	69db      	ldr	r3, [r3, #28]
 800b34a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b34e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b352:	d123      	bne.n	800b39c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b35c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	681a      	ldr	r2, [r3, #0]
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b36c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	689a      	ldr	r2, [r3, #8]
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f022 0201 	bic.w	r2, r2, #1
 800b37c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2220      	movs	r2, #32
 800b382:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	2220      	movs	r2, #32
 800b388:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2220      	movs	r2, #32
 800b38e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2200      	movs	r2, #0
 800b394:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800b398:	2303      	movs	r3, #3
 800b39a:	e00f      	b.n	800b3bc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	69da      	ldr	r2, [r3, #28]
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	4013      	ands	r3, r2
 800b3a6:	68ba      	ldr	r2, [r7, #8]
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	bf0c      	ite	eq
 800b3ac:	2301      	moveq	r3, #1
 800b3ae:	2300      	movne	r3, #0
 800b3b0:	b2db      	uxtb	r3, r3
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	79fb      	ldrb	r3, [r7, #7]
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d092      	beq.n	800b2e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b3ba:	2300      	movs	r3, #0
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3710      	adds	r7, #16
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}

0800b3c4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b085      	sub	sp, #20
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
 800b3cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	2b01      	cmp	r3, #1
 800b3dc:	d027      	beq.n	800b42e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b3e4:	68fa      	ldr	r2, [r7, #12]
 800b3e6:	4b2f      	ldr	r3, [pc, #188]	; (800b4a4 <FMC_SDRAM_Init+0xe0>)
 800b3e8:	4013      	ands	r3, r2
 800b3ea:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b3f4:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800b3fa:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800b400:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800b406:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800b40c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800b412:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800b418:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b41e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b420:	68fa      	ldr	r2, [r7, #12]
 800b422:	4313      	orrs	r3, r2
 800b424:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	68fa      	ldr	r2, [r7, #12]
 800b42a:	601a      	str	r2, [r3, #0]
 800b42c:	e032      	b.n	800b494 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b43a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b444:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b44a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b44c:	68fa      	ldr	r2, [r7, #12]
 800b44e:	4313      	orrs	r3, r2
 800b450:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b458:	68ba      	ldr	r2, [r7, #8]
 800b45a:	4b12      	ldr	r3, [pc, #72]	; (800b4a4 <FMC_SDRAM_Init+0xe0>)
 800b45c:	4013      	ands	r3, r2
 800b45e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b468:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800b46e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800b474:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800b47a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800b480:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b482:	68ba      	ldr	r2, [r7, #8]
 800b484:	4313      	orrs	r3, r2
 800b486:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	68fa      	ldr	r2, [r7, #12]
 800b48c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	68ba      	ldr	r2, [r7, #8]
 800b492:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800b494:	2300      	movs	r3, #0
}
 800b496:	4618      	mov	r0, r3
 800b498:	3714      	adds	r7, #20
 800b49a:	46bd      	mov	sp, r7
 800b49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a0:	4770      	bx	lr
 800b4a2:	bf00      	nop
 800b4a4:	ffff8000 	.word	0xffff8000

0800b4a8 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b087      	sub	sp, #28
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	60f8      	str	r0, [r7, #12]
 800b4b0:	60b9      	str	r1, [r7, #8]
 800b4b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2b01      	cmp	r3, #1
 800b4c0:	d02e      	beq.n	800b520 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	689b      	ldr	r3, [r3, #8]
 800b4c6:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b4ce:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	685b      	ldr	r3, [r3, #4]
 800b4da:	3b01      	subs	r3, #1
 800b4dc:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b4de:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	689b      	ldr	r3, [r3, #8]
 800b4e4:	3b01      	subs	r3, #1
 800b4e6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b4e8:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	68db      	ldr	r3, [r3, #12]
 800b4ee:	3b01      	subs	r3, #1
 800b4f0:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b4f2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	691b      	ldr	r3, [r3, #16]
 800b4f8:	3b01      	subs	r3, #1
 800b4fa:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b4fc:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	695b      	ldr	r3, [r3, #20]
 800b502:	3b01      	subs	r3, #1
 800b504:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b506:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	699b      	ldr	r3, [r3, #24]
 800b50c:	3b01      	subs	r3, #1
 800b50e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b510:	4313      	orrs	r3, r2
 800b512:	697a      	ldr	r2, [r7, #20]
 800b514:	4313      	orrs	r3, r2
 800b516:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	697a      	ldr	r2, [r7, #20]
 800b51c:	609a      	str	r2, [r3, #8]
 800b51e:	e039      	b.n	800b594 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	689b      	ldr	r3, [r3, #8]
 800b524:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800b526:	697a      	ldr	r2, [r7, #20]
 800b528:	4b1e      	ldr	r3, [pc, #120]	; (800b5a4 <FMC_SDRAM_Timing_Init+0xfc>)
 800b52a:	4013      	ands	r3, r2
 800b52c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	68db      	ldr	r3, [r3, #12]
 800b532:	3b01      	subs	r3, #1
 800b534:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	695b      	ldr	r3, [r3, #20]
 800b53a:	3b01      	subs	r3, #1
 800b53c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b53e:	4313      	orrs	r3, r2
 800b540:	697a      	ldr	r2, [r7, #20]
 800b542:	4313      	orrs	r3, r2
 800b544:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	68db      	ldr	r3, [r3, #12]
 800b54a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b552:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	685b      	ldr	r3, [r3, #4]
 800b55e:	3b01      	subs	r3, #1
 800b560:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b562:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	689b      	ldr	r3, [r3, #8]
 800b568:	3b01      	subs	r3, #1
 800b56a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b56c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	691b      	ldr	r3, [r3, #16]
 800b572:	3b01      	subs	r3, #1
 800b574:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b576:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	699b      	ldr	r3, [r3, #24]
 800b57c:	3b01      	subs	r3, #1
 800b57e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b580:	4313      	orrs	r3, r2
 800b582:	693a      	ldr	r2, [r7, #16]
 800b584:	4313      	orrs	r3, r2
 800b586:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	697a      	ldr	r2, [r7, #20]
 800b58c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	693a      	ldr	r2, [r7, #16]
 800b592:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800b594:	2300      	movs	r3, #0
}
 800b596:	4618      	mov	r0, r3
 800b598:	371c      	adds	r7, #28
 800b59a:	46bd      	mov	sp, r7
 800b59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a0:	4770      	bx	lr
 800b5a2:	bf00      	nop
 800b5a4:	ff0f0fff 	.word	0xff0f0fff

0800b5a8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b087      	sub	sp, #28
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	60f8      	str	r0, [r7, #12]
 800b5b0:	60b9      	str	r1, [r7, #8]
 800b5b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b5c0:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	689b      	ldr	r3, [r3, #8]
 800b5c6:	3b01      	subs	r3, #1
 800b5c8:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800b5ca:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	68db      	ldr	r3, [r3, #12]
 800b5d0:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b5d2:	4313      	orrs	r3, r2
 800b5d4:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800b5d6:	697a      	ldr	r2, [r7, #20]
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800b5dc:	2300      	movs	r3, #0
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	371c      	adds	r7, #28
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr

0800b5ea <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b5ea:	b480      	push	{r7}
 800b5ec:	b083      	sub	sp, #12
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	6078      	str	r0, [r7, #4]
 800b5f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	695a      	ldr	r2, [r3, #20]
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	005b      	lsls	r3, r3, #1
 800b5fc:	431a      	orrs	r2, r3
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800b602:	2300      	movs	r3, #0
}
 800b604:	4618      	mov	r0, r3
 800b606:	370c      	adds	r7, #12
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr

0800b610 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b610:	b084      	sub	sp, #16
 800b612:	b480      	push	{r7}
 800b614:	b085      	sub	sp, #20
 800b616:	af00      	add	r7, sp, #0
 800b618:	6078      	str	r0, [r7, #4]
 800b61a:	f107 001c 	add.w	r0, r7, #28
 800b61e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b622:	2300      	movs	r3, #0
 800b624:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b626:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b628:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b62a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b62e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b630:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b632:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b636:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b63a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b63c:	68fa      	ldr	r2, [r7, #12]
 800b63e:	4313      	orrs	r3, r2
 800b640:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	685a      	ldr	r2, [r3, #4]
 800b646:	4b07      	ldr	r3, [pc, #28]	; (800b664 <SDMMC_Init+0x54>)
 800b648:	4013      	ands	r3, r2
 800b64a:	68fa      	ldr	r2, [r7, #12]
 800b64c:	431a      	orrs	r2, r3
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b652:	2300      	movs	r3, #0
}
 800b654:	4618      	mov	r0, r3
 800b656:	3714      	adds	r7, #20
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	b004      	add	sp, #16
 800b660:	4770      	bx	lr
 800b662:	bf00      	nop
 800b664:	ffff8100 	.word	0xffff8100

0800b668 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b668:	b480      	push	{r7}
 800b66a:	b083      	sub	sp, #12
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b676:	4618      	mov	r0, r3
 800b678:	370c      	adds	r7, #12
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr

0800b682 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800b682:	b580      	push	{r7, lr}
 800b684:	b082      	sub	sp, #8
 800b686:	af00      	add	r7, sp, #0
 800b688:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2203      	movs	r2, #3
 800b68e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b690:	2002      	movs	r0, #2
 800b692:	f7f8 fadd 	bl	8003c50 <HAL_Delay>
  
  return HAL_OK;
 800b696:	2300      	movs	r3, #0
}
 800b698:	4618      	mov	r0, r3
 800b69a:	3708      	adds	r7, #8
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}

0800b6a0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b083      	sub	sp, #12
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f003 0303 	and.w	r3, r3, #3
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	370c      	adds	r7, #12
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr

0800b6bc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b085      	sub	sp, #20
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	681a      	ldr	r2, [r3, #0]
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b6da:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b6e0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b6e6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b6e8:	68fa      	ldr	r2, [r7, #12]
 800b6ea:	4313      	orrs	r3, r2
 800b6ec:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	68da      	ldr	r2, [r3, #12]
 800b6f2:	4b06      	ldr	r3, [pc, #24]	; (800b70c <SDMMC_SendCommand+0x50>)
 800b6f4:	4013      	ands	r3, r2
 800b6f6:	68fa      	ldr	r2, [r7, #12]
 800b6f8:	431a      	orrs	r2, r3
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b6fe:	2300      	movs	r3, #0
}
 800b700:	4618      	mov	r0, r3
 800b702:	3714      	adds	r7, #20
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr
 800b70c:	fffff000 	.word	0xfffff000

0800b710 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b710:	b480      	push	{r7}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	691b      	ldr	r3, [r3, #16]
 800b71c:	b2db      	uxtb	r3, r3
}
 800b71e:	4618      	mov	r0, r3
 800b720:	370c      	adds	r7, #12
 800b722:	46bd      	mov	sp, r7
 800b724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b728:	4770      	bx	lr

0800b72a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b72a:	b480      	push	{r7}
 800b72c:	b085      	sub	sp, #20
 800b72e:	af00      	add	r7, sp, #0
 800b730:	6078      	str	r0, [r7, #4]
 800b732:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	3314      	adds	r3, #20
 800b738:	461a      	mov	r2, r3
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	4413      	add	r3, r2
 800b73e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
}  
 800b744:	4618      	mov	r0, r3
 800b746:	3714      	adds	r7, #20
 800b748:	46bd      	mov	sp, r7
 800b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74e:	4770      	bx	lr

0800b750 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b750:	b480      	push	{r7}
 800b752:	b085      	sub	sp, #20
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b75a:	2300      	movs	r3, #0
 800b75c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	681a      	ldr	r2, [r3, #0]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	685a      	ldr	r2, [r3, #4]
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b776:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b77c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b782:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b784:	68fa      	ldr	r2, [r7, #12]
 800b786:	4313      	orrs	r3, r2
 800b788:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b78e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	431a      	orrs	r2, r3
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b79a:	2300      	movs	r3, #0

}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3714      	adds	r7, #20
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr

0800b7a8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b088      	sub	sp, #32
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b7b6:	2310      	movs	r3, #16
 800b7b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7ba:	2340      	movs	r3, #64	; 0x40
 800b7bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7c8:	f107 0308 	add.w	r3, r7, #8
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f7ff ff74 	bl	800b6bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b7d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7d8:	2110      	movs	r1, #16
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f000 fa42 	bl	800bc64 <SDMMC_GetCmdResp1>
 800b7e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7e2:	69fb      	ldr	r3, [r7, #28]
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3720      	adds	r7, #32
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}

0800b7ec <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b088      	sub	sp, #32
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b7fa:	2311      	movs	r3, #17
 800b7fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7fe:	2340      	movs	r3, #64	; 0x40
 800b800:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b802:	2300      	movs	r3, #0
 800b804:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b80a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b80c:	f107 0308 	add.w	r3, r7, #8
 800b810:	4619      	mov	r1, r3
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f7ff ff52 	bl	800b6bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b818:	f241 3288 	movw	r2, #5000	; 0x1388
 800b81c:	2111      	movs	r1, #17
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f000 fa20 	bl	800bc64 <SDMMC_GetCmdResp1>
 800b824:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b826:	69fb      	ldr	r3, [r7, #28]
}
 800b828:	4618      	mov	r0, r3
 800b82a:	3720      	adds	r7, #32
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}

0800b830 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b088      	sub	sp, #32
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
 800b838:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b83e:	2312      	movs	r3, #18
 800b840:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b842:	2340      	movs	r3, #64	; 0x40
 800b844:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b846:	2300      	movs	r3, #0
 800b848:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b84a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b84e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b850:	f107 0308 	add.w	r3, r7, #8
 800b854:	4619      	mov	r1, r3
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f7ff ff30 	bl	800b6bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b85c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b860:	2112      	movs	r1, #18
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f000 f9fe 	bl	800bc64 <SDMMC_GetCmdResp1>
 800b868:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b86a:	69fb      	ldr	r3, [r7, #28]
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3720      	adds	r7, #32
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b088      	sub	sp, #32
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b882:	2318      	movs	r3, #24
 800b884:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b886:	2340      	movs	r3, #64	; 0x40
 800b888:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b88a:	2300      	movs	r3, #0
 800b88c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b88e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b892:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b894:	f107 0308 	add.w	r3, r7, #8
 800b898:	4619      	mov	r1, r3
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f7ff ff0e 	bl	800b6bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b8a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8a4:	2118      	movs	r1, #24
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f000 f9dc 	bl	800bc64 <SDMMC_GetCmdResp1>
 800b8ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8ae:	69fb      	ldr	r3, [r7, #28]
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3720      	adds	r7, #32
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}

0800b8b8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b088      	sub	sp, #32
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b8c6:	2319      	movs	r3, #25
 800b8c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8ca:	2340      	movs	r3, #64	; 0x40
 800b8cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8d8:	f107 0308 	add.w	r3, r7, #8
 800b8dc:	4619      	mov	r1, r3
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f7ff feec 	bl	800b6bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b8e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8e8:	2119      	movs	r1, #25
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f000 f9ba 	bl	800bc64 <SDMMC_GetCmdResp1>
 800b8f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8f2:	69fb      	ldr	r3, [r7, #28]
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3720      	adds	r7, #32
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}

0800b8fc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b088      	sub	sp, #32
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b904:	2300      	movs	r3, #0
 800b906:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b908:	230c      	movs	r3, #12
 800b90a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b90c:	2340      	movs	r3, #64	; 0x40
 800b90e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b910:	2300      	movs	r3, #0
 800b912:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b918:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b91a:	f107 0308 	add.w	r3, r7, #8
 800b91e:	4619      	mov	r1, r3
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f7ff fecb 	bl	800b6bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b926:	4a05      	ldr	r2, [pc, #20]	; (800b93c <SDMMC_CmdStopTransfer+0x40>)
 800b928:	210c      	movs	r1, #12
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f000 f99a 	bl	800bc64 <SDMMC_GetCmdResp1>
 800b930:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b932:	69fb      	ldr	r3, [r7, #28]
}
 800b934:	4618      	mov	r0, r3
 800b936:	3720      	adds	r7, #32
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}
 800b93c:	05f5e100 	.word	0x05f5e100

0800b940 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b08a      	sub	sp, #40	; 0x28
 800b944:	af00      	add	r7, sp, #0
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b950:	2307      	movs	r3, #7
 800b952:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b954:	2340      	movs	r3, #64	; 0x40
 800b956:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b958:	2300      	movs	r3, #0
 800b95a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b95c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b960:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b962:	f107 0310 	add.w	r3, r7, #16
 800b966:	4619      	mov	r1, r3
 800b968:	68f8      	ldr	r0, [r7, #12]
 800b96a:	f7ff fea7 	bl	800b6bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b96e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b972:	2107      	movs	r1, #7
 800b974:	68f8      	ldr	r0, [r7, #12]
 800b976:	f000 f975 	bl	800bc64 <SDMMC_GetCmdResp1>
 800b97a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b97e:	4618      	mov	r0, r3
 800b980:	3728      	adds	r7, #40	; 0x28
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}

0800b986 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b986:	b580      	push	{r7, lr}
 800b988:	b088      	sub	sp, #32
 800b98a:	af00      	add	r7, sp, #0
 800b98c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b98e:	2300      	movs	r3, #0
 800b990:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b992:	2300      	movs	r3, #0
 800b994:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b996:	2300      	movs	r3, #0
 800b998:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b99a:	2300      	movs	r3, #0
 800b99c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b99e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9a4:	f107 0308 	add.w	r3, r7, #8
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f7ff fe86 	bl	800b6bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f000 f92f 	bl	800bc14 <SDMMC_GetCmdError>
 800b9b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9b8:	69fb      	ldr	r3, [r7, #28]
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3720      	adds	r7, #32
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}

0800b9c2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b9c2:	b580      	push	{r7, lr}
 800b9c4:	b088      	sub	sp, #32
 800b9c6:	af00      	add	r7, sp, #0
 800b9c8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b9ca:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b9ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b9d0:	2308      	movs	r3, #8
 800b9d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b9d4:	2340      	movs	r3, #64	; 0x40
 800b9d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9e2:	f107 0308 	add.w	r3, r7, #8
 800b9e6:	4619      	mov	r1, r3
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f7ff fe67 	bl	800b6bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f000 fb18 	bl	800c024 <SDMMC_GetCmdResp7>
 800b9f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9f6:	69fb      	ldr	r3, [r7, #28]
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3720      	adds	r7, #32
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b088      	sub	sp, #32
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ba0e:	2337      	movs	r3, #55	; 0x37
 800ba10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba12:	2340      	movs	r3, #64	; 0x40
 800ba14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba16:	2300      	movs	r3, #0
 800ba18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba20:	f107 0308 	add.w	r3, r7, #8
 800ba24:	4619      	mov	r1, r3
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f7ff fe48 	bl	800b6bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ba2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba30:	2137      	movs	r1, #55	; 0x37
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f000 f916 	bl	800bc64 <SDMMC_GetCmdResp1>
 800ba38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba3a:	69fb      	ldr	r3, [r7, #28]
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3720      	adds	r7, #32
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}

0800ba44 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b088      	sub	sp, #32
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
 800ba4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ba4e:	683a      	ldr	r2, [r7, #0]
 800ba50:	4b0d      	ldr	r3, [pc, #52]	; (800ba88 <SDMMC_CmdAppOperCommand+0x44>)
 800ba52:	4313      	orrs	r3, r2
 800ba54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ba56:	2329      	movs	r3, #41	; 0x29
 800ba58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba5a:	2340      	movs	r3, #64	; 0x40
 800ba5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba68:	f107 0308 	add.w	r3, r7, #8
 800ba6c:	4619      	mov	r1, r3
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f7ff fe24 	bl	800b6bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f000 fa27 	bl	800bec8 <SDMMC_GetCmdResp3>
 800ba7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba7c:	69fb      	ldr	r3, [r7, #28]
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3720      	adds	r7, #32
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}
 800ba86:	bf00      	nop
 800ba88:	80100000 	.word	0x80100000

0800ba8c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b088      	sub	sp, #32
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
 800ba94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ba9a:	2306      	movs	r3, #6
 800ba9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba9e:	2340      	movs	r3, #64	; 0x40
 800baa0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800baa2:	2300      	movs	r3, #0
 800baa4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800baa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800baaa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800baac:	f107 0308 	add.w	r3, r7, #8
 800bab0:	4619      	mov	r1, r3
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f7ff fe02 	bl	800b6bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800bab8:	f241 3288 	movw	r2, #5000	; 0x1388
 800babc:	2106      	movs	r1, #6
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 f8d0 	bl	800bc64 <SDMMC_GetCmdResp1>
 800bac4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bac6:	69fb      	ldr	r3, [r7, #28]
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3720      	adds	r7, #32
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}

0800bad0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b088      	sub	sp, #32
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800bad8:	2300      	movs	r3, #0
 800bada:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800badc:	2333      	movs	r3, #51	; 0x33
 800bade:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bae0:	2340      	movs	r3, #64	; 0x40
 800bae2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bae4:	2300      	movs	r3, #0
 800bae6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bae8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800baec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800baee:	f107 0308 	add.w	r3, r7, #8
 800baf2:	4619      	mov	r1, r3
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f7ff fde1 	bl	800b6bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800bafa:	f241 3288 	movw	r2, #5000	; 0x1388
 800bafe:	2133      	movs	r1, #51	; 0x33
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f000 f8af 	bl	800bc64 <SDMMC_GetCmdResp1>
 800bb06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb08:	69fb      	ldr	r3, [r7, #28]
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3720      	adds	r7, #32
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}

0800bb12 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800bb12:	b580      	push	{r7, lr}
 800bb14:	b088      	sub	sp, #32
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800bb1e:	2302      	movs	r3, #2
 800bb20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bb22:	23c0      	movs	r3, #192	; 0xc0
 800bb24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb26:	2300      	movs	r3, #0
 800bb28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb30:	f107 0308 	add.w	r3, r7, #8
 800bb34:	4619      	mov	r1, r3
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f7ff fdc0 	bl	800b6bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f000 f97d 	bl	800be3c <SDMMC_GetCmdResp2>
 800bb42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb44:	69fb      	ldr	r3, [r7, #28]
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3720      	adds	r7, #32
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}

0800bb4e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bb4e:	b580      	push	{r7, lr}
 800bb50:	b088      	sub	sp, #32
 800bb52:	af00      	add	r7, sp, #0
 800bb54:	6078      	str	r0, [r7, #4]
 800bb56:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800bb5c:	2309      	movs	r3, #9
 800bb5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bb60:	23c0      	movs	r3, #192	; 0xc0
 800bb62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb64:	2300      	movs	r3, #0
 800bb66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb6e:	f107 0308 	add.w	r3, r7, #8
 800bb72:	4619      	mov	r1, r3
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f7ff fda1 	bl	800b6bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f000 f95e 	bl	800be3c <SDMMC_GetCmdResp2>
 800bb80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb82:	69fb      	ldr	r3, [r7, #28]
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3720      	adds	r7, #32
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b088      	sub	sp, #32
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
 800bb94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800bb96:	2300      	movs	r3, #0
 800bb98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800bb9a:	2303      	movs	r3, #3
 800bb9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb9e:	2340      	movs	r3, #64	; 0x40
 800bba0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bba2:	2300      	movs	r3, #0
 800bba4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbaa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bbac:	f107 0308 	add.w	r3, r7, #8
 800bbb0:	4619      	mov	r1, r3
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f7ff fd82 	bl	800b6bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800bbb8:	683a      	ldr	r2, [r7, #0]
 800bbba:	2103      	movs	r1, #3
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f000 f9bd 	bl	800bf3c <SDMMC_GetCmdResp6>
 800bbc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbc4:	69fb      	ldr	r3, [r7, #28]
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3720      	adds	r7, #32
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}

0800bbce <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bbce:	b580      	push	{r7, lr}
 800bbd0:	b088      	sub	sp, #32
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	6078      	str	r0, [r7, #4]
 800bbd6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800bbdc:	230d      	movs	r3, #13
 800bbde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bbe0:	2340      	movs	r3, #64	; 0x40
 800bbe2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bbe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bbee:	f107 0308 	add.w	r3, r7, #8
 800bbf2:	4619      	mov	r1, r3
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f7ff fd61 	bl	800b6bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800bbfa:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbfe:	210d      	movs	r1, #13
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f000 f82f 	bl	800bc64 <SDMMC_GetCmdResp1>
 800bc06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc08:	69fb      	ldr	r3, [r7, #28]
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3720      	adds	r7, #32
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
	...

0800bc14 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bc14:	b490      	push	{r4, r7}
 800bc16:	b082      	sub	sp, #8
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bc1c:	4b0f      	ldr	r3, [pc, #60]	; (800bc5c <SDMMC_GetCmdError+0x48>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	4a0f      	ldr	r2, [pc, #60]	; (800bc60 <SDMMC_GetCmdError+0x4c>)
 800bc22:	fba2 2303 	umull	r2, r3, r2, r3
 800bc26:	0a5b      	lsrs	r3, r3, #9
 800bc28:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc2c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bc30:	4623      	mov	r3, r4
 800bc32:	1e5c      	subs	r4, r3, #1
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d102      	bne.n	800bc3e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc3c:	e009      	b.n	800bc52 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d0f2      	beq.n	800bc30 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	22c5      	movs	r2, #197	; 0xc5
 800bc4e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800bc50:	2300      	movs	r3, #0
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3708      	adds	r7, #8
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bc90      	pop	{r4, r7}
 800bc5a:	4770      	bx	lr
 800bc5c:	20000014 	.word	0x20000014
 800bc60:	10624dd3 	.word	0x10624dd3

0800bc64 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800bc64:	b590      	push	{r4, r7, lr}
 800bc66:	b087      	sub	sp, #28
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	60f8      	str	r0, [r7, #12]
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	607a      	str	r2, [r7, #4]
 800bc70:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bc72:	4b6f      	ldr	r3, [pc, #444]	; (800be30 <SDMMC_GetCmdResp1+0x1cc>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	4a6f      	ldr	r2, [pc, #444]	; (800be34 <SDMMC_GetCmdResp1+0x1d0>)
 800bc78:	fba2 2303 	umull	r2, r3, r2, r3
 800bc7c:	0a5b      	lsrs	r3, r3, #9
 800bc7e:	687a      	ldr	r2, [r7, #4]
 800bc80:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bc84:	4623      	mov	r3, r4
 800bc86:	1e5c      	subs	r4, r3, #1
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d102      	bne.n	800bc92 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc90:	e0c9      	b.n	800be26 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc96:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d0f0      	beq.n	800bc84 <SDMMC_GetCmdResp1+0x20>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d1eb      	bne.n	800bc84 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcb0:	f003 0304 	and.w	r3, r3, #4
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d004      	beq.n	800bcc2 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2204      	movs	r2, #4
 800bcbc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bcbe:	2304      	movs	r3, #4
 800bcc0:	e0b1      	b.n	800be26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcc6:	f003 0301 	and.w	r3, r3, #1
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d004      	beq.n	800bcd8 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	2201      	movs	r2, #1
 800bcd2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	e0a6      	b.n	800be26 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	22c5      	movs	r2, #197	; 0xc5
 800bcdc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bcde:	68f8      	ldr	r0, [r7, #12]
 800bce0:	f7ff fd16 	bl	800b710 <SDMMC_GetCommandResponse>
 800bce4:	4603      	mov	r3, r0
 800bce6:	461a      	mov	r2, r3
 800bce8:	7afb      	ldrb	r3, [r7, #11]
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d001      	beq.n	800bcf2 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bcee:	2301      	movs	r3, #1
 800bcf0:	e099      	b.n	800be26 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bcf2:	2100      	movs	r1, #0
 800bcf4:	68f8      	ldr	r0, [r7, #12]
 800bcf6:	f7ff fd18 	bl	800b72a <SDMMC_GetResponse>
 800bcfa:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bcfc:	693a      	ldr	r2, [r7, #16]
 800bcfe:	4b4e      	ldr	r3, [pc, #312]	; (800be38 <SDMMC_GetCmdResp1+0x1d4>)
 800bd00:	4013      	ands	r3, r2
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d101      	bne.n	800bd0a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800bd06:	2300      	movs	r3, #0
 800bd08:	e08d      	b.n	800be26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	da02      	bge.n	800bd16 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bd10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bd14:	e087      	b.n	800be26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d001      	beq.n	800bd24 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bd20:	2340      	movs	r3, #64	; 0x40
 800bd22:	e080      	b.n	800be26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d001      	beq.n	800bd32 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bd2e:	2380      	movs	r3, #128	; 0x80
 800bd30:	e079      	b.n	800be26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d002      	beq.n	800bd42 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bd3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd40:	e071      	b.n	800be26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d002      	beq.n	800bd52 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bd4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd50:	e069      	b.n	800be26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d002      	beq.n	800bd62 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bd5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd60:	e061      	b.n	800be26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d002      	beq.n	800bd72 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bd6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bd70:	e059      	b.n	800be26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d002      	beq.n	800bd82 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bd7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd80:	e051      	b.n	800be26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d002      	beq.n	800bd92 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bd8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bd90:	e049      	b.n	800be26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d002      	beq.n	800bda2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bd9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bda0:	e041      	b.n	800be26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d002      	beq.n	800bdb2 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800bdac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bdb0:	e039      	b.n	800be26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d002      	beq.n	800bdc2 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bdbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bdc0:	e031      	b.n	800be26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d002      	beq.n	800bdd2 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bdcc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bdd0:	e029      	b.n	800be26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d002      	beq.n	800bde2 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bddc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bde0:	e021      	b.n	800be26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d002      	beq.n	800bdf2 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bdec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bdf0:	e019      	b.n	800be26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d002      	beq.n	800be02 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bdfc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800be00:	e011      	b.n	800be26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d002      	beq.n	800be12 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800be0c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800be10:	e009      	b.n	800be26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	f003 0308 	and.w	r3, r3, #8
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d002      	beq.n	800be22 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800be1c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800be20:	e001      	b.n	800be26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800be22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800be26:	4618      	mov	r0, r3
 800be28:	371c      	adds	r7, #28
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd90      	pop	{r4, r7, pc}
 800be2e:	bf00      	nop
 800be30:	20000014 	.word	0x20000014
 800be34:	10624dd3 	.word	0x10624dd3
 800be38:	fdffe008 	.word	0xfdffe008

0800be3c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800be3c:	b490      	push	{r4, r7}
 800be3e:	b084      	sub	sp, #16
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800be44:	4b1e      	ldr	r3, [pc, #120]	; (800bec0 <SDMMC_GetCmdResp2+0x84>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	4a1e      	ldr	r2, [pc, #120]	; (800bec4 <SDMMC_GetCmdResp2+0x88>)
 800be4a:	fba2 2303 	umull	r2, r3, r2, r3
 800be4e:	0a5b      	lsrs	r3, r3, #9
 800be50:	f241 3288 	movw	r2, #5000	; 0x1388
 800be54:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800be58:	4623      	mov	r3, r4
 800be5a:	1e5c      	subs	r4, r3, #1
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d102      	bne.n	800be66 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800be60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800be64:	e026      	b.n	800beb4 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be6a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800be72:	2b00      	cmp	r3, #0
 800be74:	d0f0      	beq.n	800be58 <SDMMC_GetCmdResp2+0x1c>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d1eb      	bne.n	800be58 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be84:	f003 0304 	and.w	r3, r3, #4
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d004      	beq.n	800be96 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2204      	movs	r2, #4
 800be90:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800be92:	2304      	movs	r3, #4
 800be94:	e00e      	b.n	800beb4 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be9a:	f003 0301 	and.w	r3, r3, #1
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d004      	beq.n	800beac <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2201      	movs	r2, #1
 800bea6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bea8:	2301      	movs	r3, #1
 800beaa:	e003      	b.n	800beb4 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	22c5      	movs	r2, #197	; 0xc5
 800beb0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800beb2:	2300      	movs	r3, #0
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	3710      	adds	r7, #16
 800beb8:	46bd      	mov	sp, r7
 800beba:	bc90      	pop	{r4, r7}
 800bebc:	4770      	bx	lr
 800bebe:	bf00      	nop
 800bec0:	20000014 	.word	0x20000014
 800bec4:	10624dd3 	.word	0x10624dd3

0800bec8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bec8:	b490      	push	{r4, r7}
 800beca:	b084      	sub	sp, #16
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bed0:	4b18      	ldr	r3, [pc, #96]	; (800bf34 <SDMMC_GetCmdResp3+0x6c>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	4a18      	ldr	r2, [pc, #96]	; (800bf38 <SDMMC_GetCmdResp3+0x70>)
 800bed6:	fba2 2303 	umull	r2, r3, r2, r3
 800beda:	0a5b      	lsrs	r3, r3, #9
 800bedc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bee0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bee4:	4623      	mov	r3, r4
 800bee6:	1e5c      	subs	r4, r3, #1
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d102      	bne.n	800bef2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800beec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bef0:	e01b      	b.n	800bf2a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bef6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d0f0      	beq.n	800bee4 <SDMMC_GetCmdResp3+0x1c>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d1eb      	bne.n	800bee4 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf10:	f003 0304 	and.w	r3, r3, #4
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d004      	beq.n	800bf22 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2204      	movs	r2, #4
 800bf1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bf1e:	2304      	movs	r3, #4
 800bf20:	e003      	b.n	800bf2a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	22c5      	movs	r2, #197	; 0xc5
 800bf26:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bf28:	2300      	movs	r3, #0
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3710      	adds	r7, #16
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bc90      	pop	{r4, r7}
 800bf32:	4770      	bx	lr
 800bf34:	20000014 	.word	0x20000014
 800bf38:	10624dd3 	.word	0x10624dd3

0800bf3c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bf3c:	b590      	push	{r4, r7, lr}
 800bf3e:	b087      	sub	sp, #28
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	60f8      	str	r0, [r7, #12]
 800bf44:	460b      	mov	r3, r1
 800bf46:	607a      	str	r2, [r7, #4]
 800bf48:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bf4a:	4b34      	ldr	r3, [pc, #208]	; (800c01c <SDMMC_GetCmdResp6+0xe0>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	4a34      	ldr	r2, [pc, #208]	; (800c020 <SDMMC_GetCmdResp6+0xe4>)
 800bf50:	fba2 2303 	umull	r2, r3, r2, r3
 800bf54:	0a5b      	lsrs	r3, r3, #9
 800bf56:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf5a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bf5e:	4623      	mov	r3, r4
 800bf60:	1e5c      	subs	r4, r3, #1
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d102      	bne.n	800bf6c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bf66:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bf6a:	e052      	b.n	800c012 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf70:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d0f0      	beq.n	800bf5e <SDMMC_GetCmdResp6+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d1eb      	bne.n	800bf5e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf8a:	f003 0304 	and.w	r3, r3, #4
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d004      	beq.n	800bf9c <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	2204      	movs	r2, #4
 800bf96:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bf98:	2304      	movs	r3, #4
 800bf9a:	e03a      	b.n	800c012 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfa0:	f003 0301 	and.w	r3, r3, #1
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d004      	beq.n	800bfb2 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	2201      	movs	r2, #1
 800bfac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bfae:	2301      	movs	r3, #1
 800bfb0:	e02f      	b.n	800c012 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bfb2:	68f8      	ldr	r0, [r7, #12]
 800bfb4:	f7ff fbac 	bl	800b710 <SDMMC_GetCommandResponse>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	461a      	mov	r2, r3
 800bfbc:	7afb      	ldrb	r3, [r7, #11]
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d001      	beq.n	800bfc6 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	e025      	b.n	800c012 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	22c5      	movs	r2, #197	; 0xc5
 800bfca:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bfcc:	2100      	movs	r1, #0
 800bfce:	68f8      	ldr	r0, [r7, #12]
 800bfd0:	f7ff fbab 	bl	800b72a <SDMMC_GetResponse>
 800bfd4:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800bfd6:	693b      	ldr	r3, [r7, #16]
 800bfd8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d106      	bne.n	800bfee <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800bfe0:	693b      	ldr	r3, [r7, #16]
 800bfe2:	0c1b      	lsrs	r3, r3, #16
 800bfe4:	b29a      	uxth	r2, r3
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800bfea:	2300      	movs	r3, #0
 800bfec:	e011      	b.n	800c012 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d002      	beq.n	800bffe <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bff8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bffc:	e009      	b.n	800c012 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c004:	2b00      	cmp	r3, #0
 800c006:	d002      	beq.n	800c00e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c008:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c00c:	e001      	b.n	800c012 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c00e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c012:	4618      	mov	r0, r3
 800c014:	371c      	adds	r7, #28
 800c016:	46bd      	mov	sp, r7
 800c018:	bd90      	pop	{r4, r7, pc}
 800c01a:	bf00      	nop
 800c01c:	20000014 	.word	0x20000014
 800c020:	10624dd3 	.word	0x10624dd3

0800c024 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c024:	b490      	push	{r4, r7}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c02c:	4b21      	ldr	r3, [pc, #132]	; (800c0b4 <SDMMC_GetCmdResp7+0x90>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	4a21      	ldr	r2, [pc, #132]	; (800c0b8 <SDMMC_GetCmdResp7+0x94>)
 800c032:	fba2 2303 	umull	r2, r3, r2, r3
 800c036:	0a5b      	lsrs	r3, r3, #9
 800c038:	f241 3288 	movw	r2, #5000	; 0x1388
 800c03c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c040:	4623      	mov	r3, r4
 800c042:	1e5c      	subs	r4, r3, #1
 800c044:	2b00      	cmp	r3, #0
 800c046:	d102      	bne.n	800c04e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c048:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c04c:	e02c      	b.n	800c0a8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c052:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d0f0      	beq.n	800c040 <SDMMC_GetCmdResp7+0x1c>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c064:	2b00      	cmp	r3, #0
 800c066:	d1eb      	bne.n	800c040 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c06c:	f003 0304 	and.w	r3, r3, #4
 800c070:	2b00      	cmp	r3, #0
 800c072:	d004      	beq.n	800c07e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2204      	movs	r2, #4
 800c078:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c07a:	2304      	movs	r3, #4
 800c07c:	e014      	b.n	800c0a8 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c082:	f003 0301 	and.w	r3, r3, #1
 800c086:	2b00      	cmp	r3, #0
 800c088:	d004      	beq.n	800c094 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2201      	movs	r2, #1
 800c08e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c090:	2301      	movs	r3, #1
 800c092:	e009      	b.n	800c0a8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d002      	beq.n	800c0a6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2240      	movs	r2, #64	; 0x40
 800c0a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c0a6:	2300      	movs	r3, #0
  
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3710      	adds	r7, #16
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bc90      	pop	{r4, r7}
 800c0b0:	4770      	bx	lr
 800c0b2:	bf00      	nop
 800c0b4:	20000014 	.word	0x20000014
 800c0b8:	10624dd3 	.word	0x10624dd3

0800c0bc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c0c0:	4904      	ldr	r1, [pc, #16]	; (800c0d4 <MX_FATFS_Init+0x18>)
 800c0c2:	4805      	ldr	r0, [pc, #20]	; (800c0d8 <MX_FATFS_Init+0x1c>)
 800c0c4:	f000 fa96 	bl	800c5f4 <FATFS_LinkDriver>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	461a      	mov	r2, r3
 800c0cc:	4b03      	ldr	r3, [pc, #12]	; (800c0dc <MX_FATFS_Init+0x20>)
 800c0ce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800c0d0:	bf00      	nop
 800c0d2:	bd80      	pop	{r7, pc}
 800c0d4:	20000b80 	.word	0x20000b80
 800c0d8:	08027c20 	.word	0x08027c20
 800c0dc:	20000b7c 	.word	0x20000b7c

0800c0e0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b082      	sub	sp, #8
 800c0e4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c0ea:	f000 f87b 	bl	800c1e4 <BSP_SD_IsDetected>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	2b01      	cmp	r3, #1
 800c0f2:	d001      	beq.n	800c0f8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c0f4:	2302      	movs	r3, #2
 800c0f6:	e012      	b.n	800c11e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c0f8:	480b      	ldr	r0, [pc, #44]	; (800c128 <BSP_SD_Init+0x48>)
 800c0fa:	f7fc fad9 	bl	80086b0 <HAL_SD_Init>
 800c0fe:	4603      	mov	r3, r0
 800c100:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c102:	79fb      	ldrb	r3, [r7, #7]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d109      	bne.n	800c11c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c108:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c10c:	4806      	ldr	r0, [pc, #24]	; (800c128 <BSP_SD_Init+0x48>)
 800c10e:	f7fc ff1b 	bl	8008f48 <HAL_SD_ConfigWideBusOperation>
 800c112:	4603      	mov	r3, r0
 800c114:	2b00      	cmp	r3, #0
 800c116:	d001      	beq.n	800c11c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c118:	2301      	movs	r3, #1
 800c11a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c11c:	79fb      	ldrb	r3, [r7, #7]
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3708      	adds	r7, #8
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}
 800c126:	bf00      	nop
 800c128:	200006e8 	.word	0x200006e8

0800c12c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b086      	sub	sp, #24
 800c130:	af00      	add	r7, sp, #0
 800c132:	60f8      	str	r0, [r7, #12]
 800c134:	60b9      	str	r1, [r7, #8]
 800c136:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c138:	2300      	movs	r3, #0
 800c13a:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	68ba      	ldr	r2, [r7, #8]
 800c140:	68f9      	ldr	r1, [r7, #12]
 800c142:	4806      	ldr	r0, [pc, #24]	; (800c15c <BSP_SD_ReadBlocks_DMA+0x30>)
 800c144:	f7fc fb4c 	bl	80087e0 <HAL_SD_ReadBlocks_DMA>
 800c148:	4603      	mov	r3, r0
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d001      	beq.n	800c152 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c14e:	2301      	movs	r3, #1
 800c150:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800c152:	7dfb      	ldrb	r3, [r7, #23]
}
 800c154:	4618      	mov	r0, r3
 800c156:	3718      	adds	r7, #24
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}
 800c15c:	200006e8 	.word	0x200006e8

0800c160 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b086      	sub	sp, #24
 800c164:	af00      	add	r7, sp, #0
 800c166:	60f8      	str	r0, [r7, #12]
 800c168:	60b9      	str	r1, [r7, #8]
 800c16a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c16c:	2300      	movs	r3, #0
 800c16e:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	68ba      	ldr	r2, [r7, #8]
 800c174:	68f9      	ldr	r1, [r7, #12]
 800c176:	4806      	ldr	r0, [pc, #24]	; (800c190 <BSP_SD_WriteBlocks_DMA+0x30>)
 800c178:	f7fc fc1e 	bl	80089b8 <HAL_SD_WriteBlocks_DMA>
 800c17c:	4603      	mov	r3, r0
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d001      	beq.n	800c186 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c182:	2301      	movs	r3, #1
 800c184:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800c186:	7dfb      	ldrb	r3, [r7, #23]
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3718      	adds	r7, #24
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}
 800c190:	200006e8 	.word	0x200006e8

0800c194 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c198:	4805      	ldr	r0, [pc, #20]	; (800c1b0 <BSP_SD_GetCardState+0x1c>)
 800c19a:	f7fc ff51 	bl	8009040 <HAL_SD_GetCardState>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	2b04      	cmp	r3, #4
 800c1a2:	bf14      	ite	ne
 800c1a4:	2301      	movne	r3, #1
 800c1a6:	2300      	moveq	r3, #0
 800c1a8:	b2db      	uxtb	r3, r3
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	bd80      	pop	{r7, pc}
 800c1ae:	bf00      	nop
 800c1b0:	200006e8 	.word	0x200006e8

0800c1b4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b082      	sub	sp, #8
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c1bc:	6879      	ldr	r1, [r7, #4]
 800c1be:	4803      	ldr	r0, [pc, #12]	; (800c1cc <BSP_SD_GetCardInfo+0x18>)
 800c1c0:	f7fc fe96 	bl	8008ef0 <HAL_SD_GetCardInfo>
}
 800c1c4:	bf00      	nop
 800c1c6:	3708      	adds	r7, #8
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}
 800c1cc:	200006e8 	.word	0x200006e8

0800c1d0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b082      	sub	sp, #8
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c1d8:	f000 f9b2 	bl	800c540 <BSP_SD_ReadCpltCallback>
}
 800c1dc:	bf00      	nop
 800c1de:	3708      	adds	r7, #8
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b082      	sub	sp, #8
 800c1e8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800c1ee:	f000 f80b 	bl	800c208 <BSP_PlatformIsDetected>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d101      	bne.n	800c1fc <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c1fc:	79fb      	ldrb	r3, [r7, #7]
 800c1fe:	b2db      	uxtb	r3, r3
}
 800c200:	4618      	mov	r0, r3
 800c202:	3708      	adds	r7, #8
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}

0800c208 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c208:	b580      	push	{r7, lr}
 800c20a:	b082      	sub	sp, #8
 800c20c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c20e:	2301      	movs	r3, #1
 800c210:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c212:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c216:	4806      	ldr	r0, [pc, #24]	; (800c230 <BSP_PlatformIsDetected+0x28>)
 800c218:	f7f9 fe04 	bl	8005e24 <HAL_GPIO_ReadPin>
 800c21c:	4603      	mov	r3, r0
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d001      	beq.n	800c226 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c222:	2300      	movs	r3, #0
 800c224:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800c226:	79fb      	ldrb	r3, [r7, #7]
}  
 800c228:	4618      	mov	r0, r3
 800c22a:	3708      	adds	r7, #8
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}
 800c230:	40020800 	.word	0x40020800

0800c234 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b084      	sub	sp, #16
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800c23c:	f000 fa26 	bl	800c68c <osKernelSysTick>
 800c240:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800c242:	e006      	b.n	800c252 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c244:	f7ff ffa6 	bl	800c194 <BSP_SD_GetCardState>
 800c248:	4603      	mov	r3, r0
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d101      	bne.n	800c252 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c24e:	2300      	movs	r3, #0
 800c250:	e009      	b.n	800c266 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800c252:	f000 fa1b 	bl	800c68c <osKernelSysTick>
 800c256:	4602      	mov	r2, r0
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	1ad3      	subs	r3, r2, r3
 800c25c:	687a      	ldr	r2, [r7, #4]
 800c25e:	429a      	cmp	r2, r3
 800c260:	d8f0      	bhi.n	800c244 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c262:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c266:	4618      	mov	r0, r3
 800c268:	3710      	adds	r7, #16
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}
	...

0800c270 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b082      	sub	sp, #8
 800c274:	af00      	add	r7, sp, #0
 800c276:	4603      	mov	r3, r0
 800c278:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c27a:	4b0b      	ldr	r3, [pc, #44]	; (800c2a8 <SD_CheckStatus+0x38>)
 800c27c:	2201      	movs	r2, #1
 800c27e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c280:	f7ff ff88 	bl	800c194 <BSP_SD_GetCardState>
 800c284:	4603      	mov	r3, r0
 800c286:	2b00      	cmp	r3, #0
 800c288:	d107      	bne.n	800c29a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c28a:	4b07      	ldr	r3, [pc, #28]	; (800c2a8 <SD_CheckStatus+0x38>)
 800c28c:	781b      	ldrb	r3, [r3, #0]
 800c28e:	b2db      	uxtb	r3, r3
 800c290:	f023 0301 	bic.w	r3, r3, #1
 800c294:	b2da      	uxtb	r2, r3
 800c296:	4b04      	ldr	r3, [pc, #16]	; (800c2a8 <SD_CheckStatus+0x38>)
 800c298:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c29a:	4b03      	ldr	r3, [pc, #12]	; (800c2a8 <SD_CheckStatus+0x38>)
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	b2db      	uxtb	r3, r3
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3708      	adds	r7, #8
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}
 800c2a8:	2000001d 	.word	0x2000001d

0800c2ac <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c2ac:	b590      	push	{r4, r7, lr}
 800c2ae:	b087      	sub	sp, #28
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800c2b6:	4b20      	ldr	r3, [pc, #128]	; (800c338 <SD_initialize+0x8c>)
 800c2b8:	2201      	movs	r2, #1
 800c2ba:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800c2bc:	f000 f9da 	bl	800c674 <osKernelRunning>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d030      	beq.n	800c328 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800c2c6:	f7ff ff0b 	bl	800c0e0 <BSP_SD_Init>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d107      	bne.n	800c2e0 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800c2d0:	79fb      	ldrb	r3, [r7, #7]
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f7ff ffcc 	bl	800c270 <SD_CheckStatus>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	461a      	mov	r2, r3
 800c2dc:	4b16      	ldr	r3, [pc, #88]	; (800c338 <SD_initialize+0x8c>)
 800c2de:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800c2e0:	4b15      	ldr	r3, [pc, #84]	; (800c338 <SD_initialize+0x8c>)
 800c2e2:	781b      	ldrb	r3, [r3, #0]
 800c2e4:	b2db      	uxtb	r3, r3
 800c2e6:	2b01      	cmp	r3, #1
 800c2e8:	d01e      	beq.n	800c328 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800c2ea:	4b14      	ldr	r3, [pc, #80]	; (800c33c <SD_initialize+0x90>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d10e      	bne.n	800c310 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800c2f2:	4b13      	ldr	r3, [pc, #76]	; (800c340 <SD_initialize+0x94>)
 800c2f4:	f107 0408 	add.w	r4, r7, #8
 800c2f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c2fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800c2fe:	f107 0308 	add.w	r3, r7, #8
 800c302:	2100      	movs	r1, #0
 800c304:	4618      	mov	r0, r3
 800c306:	f000 fa31 	bl	800c76c <osMessageCreate>
 800c30a:	4603      	mov	r3, r0
 800c30c:	4a0b      	ldr	r2, [pc, #44]	; (800c33c <SD_initialize+0x90>)
 800c30e:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800c310:	4b0a      	ldr	r3, [pc, #40]	; (800c33c <SD_initialize+0x90>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d107      	bne.n	800c328 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800c318:	4b07      	ldr	r3, [pc, #28]	; (800c338 <SD_initialize+0x8c>)
 800c31a:	781b      	ldrb	r3, [r3, #0]
 800c31c:	b2db      	uxtb	r3, r3
 800c31e:	f043 0301 	orr.w	r3, r3, #1
 800c322:	b2da      	uxtb	r2, r3
 800c324:	4b04      	ldr	r3, [pc, #16]	; (800c338 <SD_initialize+0x8c>)
 800c326:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800c328:	4b03      	ldr	r3, [pc, #12]	; (800c338 <SD_initialize+0x8c>)
 800c32a:	781b      	ldrb	r3, [r3, #0]
 800c32c:	b2db      	uxtb	r3, r3
}
 800c32e:	4618      	mov	r0, r3
 800c330:	371c      	adds	r7, #28
 800c332:	46bd      	mov	sp, r7
 800c334:	bd90      	pop	{r4, r7, pc}
 800c336:	bf00      	nop
 800c338:	2000001d 	.word	0x2000001d
 800c33c:	20000b84 	.word	0x20000b84
 800c340:	080271e8 	.word	0x080271e8

0800c344 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b082      	sub	sp, #8
 800c348:	af00      	add	r7, sp, #0
 800c34a:	4603      	mov	r3, r0
 800c34c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c34e:	79fb      	ldrb	r3, [r7, #7]
 800c350:	4618      	mov	r0, r3
 800c352:	f7ff ff8d 	bl	800c270 <SD_CheckStatus>
 800c356:	4603      	mov	r3, r0
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3708      	adds	r7, #8
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}

0800c360 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b08a      	sub	sp, #40	; 0x28
 800c364:	af00      	add	r7, sp, #0
 800c366:	60b9      	str	r1, [r7, #8]
 800c368:	607a      	str	r2, [r7, #4]
 800c36a:	603b      	str	r3, [r7, #0]
 800c36c:	4603      	mov	r3, r0
 800c36e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c370:	2301      	movs	r3, #1
 800c372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c376:	f247 5030 	movw	r0, #30000	; 0x7530
 800c37a:	f7ff ff5b 	bl	800c234 <SD_CheckStatusWithTimeout>
 800c37e:	4603      	mov	r3, r0
 800c380:	2b00      	cmp	r3, #0
 800c382:	da02      	bge.n	800c38a <SD_read+0x2a>
  {
    return res;
 800c384:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c388:	e032      	b.n	800c3f0 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800c38a:	683a      	ldr	r2, [r7, #0]
 800c38c:	6879      	ldr	r1, [r7, #4]
 800c38e:	68b8      	ldr	r0, [r7, #8]
 800c390:	f7ff fecc 	bl	800c12c <BSP_SD_ReadBlocks_DMA>
 800c394:	4603      	mov	r3, r0
 800c396:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800c39a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d124      	bne.n	800c3ec <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800c3a2:	4b15      	ldr	r3, [pc, #84]	; (800c3f8 <SD_read+0x98>)
 800c3a4:	6819      	ldr	r1, [r3, #0]
 800c3a6:	f107 0314 	add.w	r3, r7, #20
 800c3aa:	f247 5230 	movw	r2, #30000	; 0x7530
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f000 fa44 	bl	800c83c <osMessageGet>

    if (event.status == osEventMessage)
 800c3b4:	697b      	ldr	r3, [r7, #20]
 800c3b6:	2b10      	cmp	r3, #16
 800c3b8:	d118      	bne.n	800c3ec <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800c3ba:	69bb      	ldr	r3, [r7, #24]
 800c3bc:	2b01      	cmp	r3, #1
 800c3be:	d115      	bne.n	800c3ec <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800c3c0:	f000 f964 	bl	800c68c <osKernelSysTick>
 800c3c4:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800c3c6:	e008      	b.n	800c3da <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c3c8:	f7ff fee4 	bl	800c194 <BSP_SD_GetCardState>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d103      	bne.n	800c3da <SD_read+0x7a>
              {
                res = RES_OK;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800c3d8:	e008      	b.n	800c3ec <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800c3da:	f000 f957 	bl	800c68c <osKernelSysTick>
 800c3de:	4602      	mov	r2, r0
 800c3e0:	6a3b      	ldr	r3, [r7, #32]
 800c3e2:	1ad3      	subs	r3, r2, r3
 800c3e4:	f247 522f 	movw	r2, #29999	; 0x752f
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	d9ed      	bls.n	800c3c8 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800c3ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3728      	adds	r7, #40	; 0x28
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}
 800c3f8:	20000b84 	.word	0x20000b84

0800c3fc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b08a      	sub	sp, #40	; 0x28
 800c400:	af00      	add	r7, sp, #0
 800c402:	60b9      	str	r1, [r7, #8]
 800c404:	607a      	str	r2, [r7, #4]
 800c406:	603b      	str	r3, [r7, #0]
 800c408:	4603      	mov	r3, r0
 800c40a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c40c:	2301      	movs	r3, #1
 800c40e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c412:	f247 5030 	movw	r0, #30000	; 0x7530
 800c416:	f7ff ff0d 	bl	800c234 <SD_CheckStatusWithTimeout>
 800c41a:	4603      	mov	r3, r0
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	da02      	bge.n	800c426 <SD_write+0x2a>
  {
    return res;
 800c420:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c424:	e02e      	b.n	800c484 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800c426:	683a      	ldr	r2, [r7, #0]
 800c428:	6879      	ldr	r1, [r7, #4]
 800c42a:	68b8      	ldr	r0, [r7, #8]
 800c42c:	f7ff fe98 	bl	800c160 <BSP_SD_WriteBlocks_DMA>
 800c430:	4603      	mov	r3, r0
 800c432:	2b00      	cmp	r3, #0
 800c434:	d124      	bne.n	800c480 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800c436:	4b15      	ldr	r3, [pc, #84]	; (800c48c <SD_write+0x90>)
 800c438:	6819      	ldr	r1, [r3, #0]
 800c43a:	f107 0314 	add.w	r3, r7, #20
 800c43e:	f247 5230 	movw	r2, #30000	; 0x7530
 800c442:	4618      	mov	r0, r3
 800c444:	f000 f9fa 	bl	800c83c <osMessageGet>

    if (event.status == osEventMessage)
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	2b10      	cmp	r3, #16
 800c44c:	d118      	bne.n	800c480 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800c44e:	69bb      	ldr	r3, [r7, #24]
 800c450:	2b02      	cmp	r3, #2
 800c452:	d115      	bne.n	800c480 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800c454:	f000 f91a 	bl	800c68c <osKernelSysTick>
 800c458:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800c45a:	e008      	b.n	800c46e <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c45c:	f7ff fe9a 	bl	800c194 <BSP_SD_GetCardState>
 800c460:	4603      	mov	r3, r0
 800c462:	2b00      	cmp	r3, #0
 800c464:	d103      	bne.n	800c46e <SD_write+0x72>
          {
            res = RES_OK;
 800c466:	2300      	movs	r3, #0
 800c468:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c46c:	e008      	b.n	800c480 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800c46e:	f000 f90d 	bl	800c68c <osKernelSysTick>
 800c472:	4602      	mov	r2, r0
 800c474:	6a3b      	ldr	r3, [r7, #32]
 800c476:	1ad3      	subs	r3, r2, r3
 800c478:	f247 522f 	movw	r2, #29999	; 0x752f
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d9ed      	bls.n	800c45c <SD_write+0x60>
    }

  }
#endif

  return res;
 800c480:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c484:	4618      	mov	r0, r3
 800c486:	3728      	adds	r7, #40	; 0x28
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd80      	pop	{r7, pc}
 800c48c:	20000b84 	.word	0x20000b84

0800c490 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b08c      	sub	sp, #48	; 0x30
 800c494:	af00      	add	r7, sp, #0
 800c496:	4603      	mov	r3, r0
 800c498:	603a      	str	r2, [r7, #0]
 800c49a:	71fb      	strb	r3, [r7, #7]
 800c49c:	460b      	mov	r3, r1
 800c49e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c4a0:	2301      	movs	r3, #1
 800c4a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c4a6:	4b25      	ldr	r3, [pc, #148]	; (800c53c <SD_ioctl+0xac>)
 800c4a8:	781b      	ldrb	r3, [r3, #0]
 800c4aa:	b2db      	uxtb	r3, r3
 800c4ac:	f003 0301 	and.w	r3, r3, #1
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d001      	beq.n	800c4b8 <SD_ioctl+0x28>
 800c4b4:	2303      	movs	r3, #3
 800c4b6:	e03c      	b.n	800c532 <SD_ioctl+0xa2>

  switch (cmd)
 800c4b8:	79bb      	ldrb	r3, [r7, #6]
 800c4ba:	2b03      	cmp	r3, #3
 800c4bc:	d834      	bhi.n	800c528 <SD_ioctl+0x98>
 800c4be:	a201      	add	r2, pc, #4	; (adr r2, 800c4c4 <SD_ioctl+0x34>)
 800c4c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4c4:	0800c4d5 	.word	0x0800c4d5
 800c4c8:	0800c4dd 	.word	0x0800c4dd
 800c4cc:	0800c4f5 	.word	0x0800c4f5
 800c4d0:	0800c50f 	.word	0x0800c50f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c4da:	e028      	b.n	800c52e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c4dc:	f107 030c 	add.w	r3, r7, #12
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f7ff fe67 	bl	800c1b4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c4e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c4f2:	e01c      	b.n	800c52e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c4f4:	f107 030c 	add.w	r3, r7, #12
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f7ff fe5b 	bl	800c1b4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c500:	b29a      	uxth	r2, r3
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c506:	2300      	movs	r3, #0
 800c508:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c50c:	e00f      	b.n	800c52e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c50e:	f107 030c 	add.w	r3, r7, #12
 800c512:	4618      	mov	r0, r3
 800c514:	f7ff fe4e 	bl	800c1b4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c51a:	0a5a      	lsrs	r2, r3, #9
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c520:	2300      	movs	r3, #0
 800c522:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c526:	e002      	b.n	800c52e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c528:	2304      	movs	r3, #4
 800c52a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c52e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c532:	4618      	mov	r0, r3
 800c534:	3730      	adds	r7, #48	; 0x30
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}
 800c53a:	bf00      	nop
 800c53c:	2000001d 	.word	0x2000001d

0800c540 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800c544:	4b04      	ldr	r3, [pc, #16]	; (800c558 <BSP_SD_ReadCpltCallback+0x18>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	2200      	movs	r2, #0
 800c54a:	2101      	movs	r1, #1
 800c54c:	4618      	mov	r0, r3
 800c54e:	f000 f935 	bl	800c7bc <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800c552:	bf00      	nop
 800c554:	bd80      	pop	{r7, pc}
 800c556:	bf00      	nop
 800c558:	20000b84 	.word	0x20000b84

0800c55c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c55c:	b480      	push	{r7}
 800c55e:	b087      	sub	sp, #28
 800c560:	af00      	add	r7, sp, #0
 800c562:	60f8      	str	r0, [r7, #12]
 800c564:	60b9      	str	r1, [r7, #8]
 800c566:	4613      	mov	r3, r2
 800c568:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c56a:	2301      	movs	r3, #1
 800c56c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c56e:	2300      	movs	r3, #0
 800c570:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c572:	4b1f      	ldr	r3, [pc, #124]	; (800c5f0 <FATFS_LinkDriverEx+0x94>)
 800c574:	7a5b      	ldrb	r3, [r3, #9]
 800c576:	b2db      	uxtb	r3, r3
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d131      	bne.n	800c5e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c57c:	4b1c      	ldr	r3, [pc, #112]	; (800c5f0 <FATFS_LinkDriverEx+0x94>)
 800c57e:	7a5b      	ldrb	r3, [r3, #9]
 800c580:	b2db      	uxtb	r3, r3
 800c582:	461a      	mov	r2, r3
 800c584:	4b1a      	ldr	r3, [pc, #104]	; (800c5f0 <FATFS_LinkDriverEx+0x94>)
 800c586:	2100      	movs	r1, #0
 800c588:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c58a:	4b19      	ldr	r3, [pc, #100]	; (800c5f0 <FATFS_LinkDriverEx+0x94>)
 800c58c:	7a5b      	ldrb	r3, [r3, #9]
 800c58e:	b2db      	uxtb	r3, r3
 800c590:	4a17      	ldr	r2, [pc, #92]	; (800c5f0 <FATFS_LinkDriverEx+0x94>)
 800c592:	009b      	lsls	r3, r3, #2
 800c594:	4413      	add	r3, r2
 800c596:	68fa      	ldr	r2, [r7, #12]
 800c598:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c59a:	4b15      	ldr	r3, [pc, #84]	; (800c5f0 <FATFS_LinkDriverEx+0x94>)
 800c59c:	7a5b      	ldrb	r3, [r3, #9]
 800c59e:	b2db      	uxtb	r3, r3
 800c5a0:	461a      	mov	r2, r3
 800c5a2:	4b13      	ldr	r3, [pc, #76]	; (800c5f0 <FATFS_LinkDriverEx+0x94>)
 800c5a4:	4413      	add	r3, r2
 800c5a6:	79fa      	ldrb	r2, [r7, #7]
 800c5a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c5aa:	4b11      	ldr	r3, [pc, #68]	; (800c5f0 <FATFS_LinkDriverEx+0x94>)
 800c5ac:	7a5b      	ldrb	r3, [r3, #9]
 800c5ae:	b2db      	uxtb	r3, r3
 800c5b0:	1c5a      	adds	r2, r3, #1
 800c5b2:	b2d1      	uxtb	r1, r2
 800c5b4:	4a0e      	ldr	r2, [pc, #56]	; (800c5f0 <FATFS_LinkDriverEx+0x94>)
 800c5b6:	7251      	strb	r1, [r2, #9]
 800c5b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c5ba:	7dbb      	ldrb	r3, [r7, #22]
 800c5bc:	3330      	adds	r3, #48	; 0x30
 800c5be:	b2da      	uxtb	r2, r3
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	3301      	adds	r3, #1
 800c5c8:	223a      	movs	r2, #58	; 0x3a
 800c5ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	3302      	adds	r3, #2
 800c5d0:	222f      	movs	r2, #47	; 0x2f
 800c5d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	3303      	adds	r3, #3
 800c5d8:	2200      	movs	r2, #0
 800c5da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c5e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	371c      	adds	r7, #28
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ec:	4770      	bx	lr
 800c5ee:	bf00      	nop
 800c5f0:	20000b88 	.word	0x20000b88

0800c5f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b082      	sub	sp, #8
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
 800c5fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c5fe:	2200      	movs	r2, #0
 800c600:	6839      	ldr	r1, [r7, #0]
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f7ff ffaa 	bl	800c55c <FATFS_LinkDriverEx>
 800c608:	4603      	mov	r3, r0
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3708      	adds	r7, #8
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}

0800c612 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c612:	b480      	push	{r7}
 800c614:	b085      	sub	sp, #20
 800c616:	af00      	add	r7, sp, #0
 800c618:	4603      	mov	r3, r0
 800c61a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c61c:	2300      	movs	r3, #0
 800c61e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c620:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c624:	2b84      	cmp	r3, #132	; 0x84
 800c626:	d005      	beq.n	800c634 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c628:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	4413      	add	r3, r2
 800c630:	3303      	adds	r3, #3
 800c632:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c634:	68fb      	ldr	r3, [r7, #12]
}
 800c636:	4618      	mov	r0, r3
 800c638:	3714      	adds	r7, #20
 800c63a:	46bd      	mov	sp, r7
 800c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c640:	4770      	bx	lr

0800c642 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c642:	b480      	push	{r7}
 800c644:	b083      	sub	sp, #12
 800c646:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c648:	f3ef 8305 	mrs	r3, IPSR
 800c64c:	607b      	str	r3, [r7, #4]
  return(result);
 800c64e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c650:	2b00      	cmp	r3, #0
 800c652:	bf14      	ite	ne
 800c654:	2301      	movne	r3, #1
 800c656:	2300      	moveq	r3, #0
 800c658:	b2db      	uxtb	r3, r3
}
 800c65a:	4618      	mov	r0, r3
 800c65c:	370c      	adds	r7, #12
 800c65e:	46bd      	mov	sp, r7
 800c660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c664:	4770      	bx	lr

0800c666 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c666:	b580      	push	{r7, lr}
 800c668:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c66a:	f001 fb1d 	bl	800dca8 <vTaskStartScheduler>
  
  return osOK;
 800c66e:	2300      	movs	r3, #0
}
 800c670:	4618      	mov	r0, r3
 800c672:	bd80      	pop	{r7, pc}

0800c674 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800c678:	f001 ff70 	bl	800e55c <xTaskGetSchedulerState>
 800c67c:	4603      	mov	r3, r0
 800c67e:	2b01      	cmp	r3, #1
 800c680:	d101      	bne.n	800c686 <osKernelRunning+0x12>
    return 0;
 800c682:	2300      	movs	r3, #0
 800c684:	e000      	b.n	800c688 <osKernelRunning+0x14>
  else
    return 1;
 800c686:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800c688:	4618      	mov	r0, r3
 800c68a:	bd80      	pop	{r7, pc}

0800c68c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800c690:	f7ff ffd7 	bl	800c642 <inHandlerMode>
 800c694:	4603      	mov	r3, r0
 800c696:	2b00      	cmp	r3, #0
 800c698:	d003      	beq.n	800c6a2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800c69a:	f001 fc25 	bl	800dee8 <xTaskGetTickCountFromISR>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	e002      	b.n	800c6a8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800c6a2:	f001 fc11 	bl	800dec8 <xTaskGetTickCount>
 800c6a6:	4603      	mov	r3, r0
  }
}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	bd80      	pop	{r7, pc}

0800c6ac <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c6ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6ae:	b089      	sub	sp, #36	; 0x24
 800c6b0:	af04      	add	r7, sp, #16
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	695b      	ldr	r3, [r3, #20]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d020      	beq.n	800c700 <osThreadCreate+0x54>
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	699b      	ldr	r3, [r3, #24]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d01c      	beq.n	800c700 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	685c      	ldr	r4, [r3, #4]
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	691e      	ldr	r6, [r3, #16]
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c6d8:	4618      	mov	r0, r3
 800c6da:	f7ff ff9a 	bl	800c612 <makeFreeRtosPriority>
 800c6de:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	695b      	ldr	r3, [r3, #20]
 800c6e4:	687a      	ldr	r2, [r7, #4]
 800c6e6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c6e8:	9202      	str	r2, [sp, #8]
 800c6ea:	9301      	str	r3, [sp, #4]
 800c6ec:	9100      	str	r1, [sp, #0]
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	4632      	mov	r2, r6
 800c6f2:	4629      	mov	r1, r5
 800c6f4:	4620      	mov	r0, r4
 800c6f6:	f001 f8fb 	bl	800d8f0 <xTaskCreateStatic>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	60fb      	str	r3, [r7, #12]
 800c6fe:	e01c      	b.n	800c73a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	685c      	ldr	r4, [r3, #4]
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c70c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c714:	4618      	mov	r0, r3
 800c716:	f7ff ff7c 	bl	800c612 <makeFreeRtosPriority>
 800c71a:	4602      	mov	r2, r0
 800c71c:	f107 030c 	add.w	r3, r7, #12
 800c720:	9301      	str	r3, [sp, #4]
 800c722:	9200      	str	r2, [sp, #0]
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	4632      	mov	r2, r6
 800c728:	4629      	mov	r1, r5
 800c72a:	4620      	mov	r0, r4
 800c72c:	f001 f943 	bl	800d9b6 <xTaskCreate>
 800c730:	4603      	mov	r3, r0
 800c732:	2b01      	cmp	r3, #1
 800c734:	d001      	beq.n	800c73a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c736:	2300      	movs	r3, #0
 800c738:	e000      	b.n	800c73c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c73a:	68fb      	ldr	r3, [r7, #12]
}
 800c73c:	4618      	mov	r0, r3
 800c73e:	3714      	adds	r7, #20
 800c740:	46bd      	mov	sp, r7
 800c742:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c744 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b084      	sub	sp, #16
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d001      	beq.n	800c75a <osDelay+0x16>
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	e000      	b.n	800c75c <osDelay+0x18>
 800c75a:	2301      	movs	r3, #1
 800c75c:	4618      	mov	r0, r3
 800c75e:	f001 fa6d 	bl	800dc3c <vTaskDelay>
  
  return osOK;
 800c762:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c764:	4618      	mov	r0, r3
 800c766:	3710      	adds	r7, #16
 800c768:	46bd      	mov	sp, r7
 800c76a:	bd80      	pop	{r7, pc}

0800c76c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c76c:	b590      	push	{r4, r7, lr}
 800c76e:	b085      	sub	sp, #20
 800c770:	af02      	add	r7, sp, #8
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	689b      	ldr	r3, [r3, #8]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d011      	beq.n	800c7a2 <osMessageCreate+0x36>
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	68db      	ldr	r3, [r3, #12]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d00d      	beq.n	800c7a2 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6818      	ldr	r0, [r3, #0]
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6859      	ldr	r1, [r3, #4]
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	689a      	ldr	r2, [r3, #8]
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	68db      	ldr	r3, [r3, #12]
 800c796:	2400      	movs	r4, #0
 800c798:	9400      	str	r4, [sp, #0]
 800c79a:	f000 f9e1 	bl	800cb60 <xQueueGenericCreateStatic>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	e008      	b.n	800c7b4 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6818      	ldr	r0, [r3, #0]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	685b      	ldr	r3, [r3, #4]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	4619      	mov	r1, r3
 800c7ae:	f000 fa59 	bl	800cc64 <xQueueGenericCreate>
 800c7b2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	370c      	adds	r7, #12
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd90      	pop	{r4, r7, pc}

0800c7bc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b086      	sub	sp, #24
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	60f8      	str	r0, [r7, #12]
 800c7c4:	60b9      	str	r1, [r7, #8]
 800c7c6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d101      	bne.n	800c7da <osMessagePut+0x1e>
    ticks = 1;
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800c7da:	f7ff ff32 	bl	800c642 <inHandlerMode>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d018      	beq.n	800c816 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800c7e4:	f107 0210 	add.w	r2, r7, #16
 800c7e8:	f107 0108 	add.w	r1, r7, #8
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	68f8      	ldr	r0, [r7, #12]
 800c7f0:	f000 fba0 	bl	800cf34 <xQueueGenericSendFromISR>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	2b01      	cmp	r3, #1
 800c7f8:	d001      	beq.n	800c7fe <osMessagePut+0x42>
      return osErrorOS;
 800c7fa:	23ff      	movs	r3, #255	; 0xff
 800c7fc:	e018      	b.n	800c830 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d014      	beq.n	800c82e <osMessagePut+0x72>
 800c804:	4b0c      	ldr	r3, [pc, #48]	; (800c838 <osMessagePut+0x7c>)
 800c806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c80a:	601a      	str	r2, [r3, #0]
 800c80c:	f3bf 8f4f 	dsb	sy
 800c810:	f3bf 8f6f 	isb	sy
 800c814:	e00b      	b.n	800c82e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800c816:	f107 0108 	add.w	r1, r7, #8
 800c81a:	2300      	movs	r3, #0
 800c81c:	697a      	ldr	r2, [r7, #20]
 800c81e:	68f8      	ldr	r0, [r7, #12]
 800c820:	f000 fa82 	bl	800cd28 <xQueueGenericSend>
 800c824:	4603      	mov	r3, r0
 800c826:	2b01      	cmp	r3, #1
 800c828:	d001      	beq.n	800c82e <osMessagePut+0x72>
      return osErrorOS;
 800c82a:	23ff      	movs	r3, #255	; 0xff
 800c82c:	e000      	b.n	800c830 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800c82e:	2300      	movs	r3, #0
}
 800c830:	4618      	mov	r0, r3
 800c832:	3718      	adds	r7, #24
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}
 800c838:	e000ed04 	.word	0xe000ed04

0800c83c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800c83c:	b590      	push	{r4, r7, lr}
 800c83e:	b08b      	sub	sp, #44	; 0x2c
 800c840:	af00      	add	r7, sp, #0
 800c842:	60f8      	str	r0, [r7, #12]
 800c844:	60b9      	str	r1, [r7, #8]
 800c846:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800c84c:	2300      	movs	r3, #0
 800c84e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d10a      	bne.n	800c86c <osMessageGet+0x30>
    event.status = osErrorParameter;
 800c856:	2380      	movs	r3, #128	; 0x80
 800c858:	617b      	str	r3, [r7, #20]
    return event;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	461c      	mov	r4, r3
 800c85e:	f107 0314 	add.w	r3, r7, #20
 800c862:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c866:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c86a:	e054      	b.n	800c916 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800c86c:	2300      	movs	r3, #0
 800c86e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800c870:	2300      	movs	r3, #0
 800c872:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c87a:	d103      	bne.n	800c884 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800c87c:	f04f 33ff 	mov.w	r3, #4294967295
 800c880:	627b      	str	r3, [r7, #36]	; 0x24
 800c882:	e009      	b.n	800c898 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d006      	beq.n	800c898 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800c88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c890:	2b00      	cmp	r3, #0
 800c892:	d101      	bne.n	800c898 <osMessageGet+0x5c>
      ticks = 1;
 800c894:	2301      	movs	r3, #1
 800c896:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800c898:	f7ff fed3 	bl	800c642 <inHandlerMode>
 800c89c:	4603      	mov	r3, r0
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d01c      	beq.n	800c8dc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800c8a2:	f107 0220 	add.w	r2, r7, #32
 800c8a6:	f107 0314 	add.w	r3, r7, #20
 800c8aa:	3304      	adds	r3, #4
 800c8ac:	4619      	mov	r1, r3
 800c8ae:	68b8      	ldr	r0, [r7, #8]
 800c8b0:	f000 fe70 	bl	800d594 <xQueueReceiveFromISR>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	2b01      	cmp	r3, #1
 800c8b8:	d102      	bne.n	800c8c0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800c8ba:	2310      	movs	r3, #16
 800c8bc:	617b      	str	r3, [r7, #20]
 800c8be:	e001      	b.n	800c8c4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c8c4:	6a3b      	ldr	r3, [r7, #32]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d01d      	beq.n	800c906 <osMessageGet+0xca>
 800c8ca:	4b15      	ldr	r3, [pc, #84]	; (800c920 <osMessageGet+0xe4>)
 800c8cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8d0:	601a      	str	r2, [r3, #0]
 800c8d2:	f3bf 8f4f 	dsb	sy
 800c8d6:	f3bf 8f6f 	isb	sy
 800c8da:	e014      	b.n	800c906 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800c8dc:	f107 0314 	add.w	r3, r7, #20
 800c8e0:	3304      	adds	r3, #4
 800c8e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8e4:	4619      	mov	r1, r3
 800c8e6:	68b8      	ldr	r0, [r7, #8]
 800c8e8:	f000 fc5a 	bl	800d1a0 <xQueueReceive>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	2b01      	cmp	r3, #1
 800c8f0:	d102      	bne.n	800c8f8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800c8f2:	2310      	movs	r3, #16
 800c8f4:	617b      	str	r3, [r7, #20]
 800c8f6:	e006      	b.n	800c906 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800c8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d101      	bne.n	800c902 <osMessageGet+0xc6>
 800c8fe:	2300      	movs	r3, #0
 800c900:	e000      	b.n	800c904 <osMessageGet+0xc8>
 800c902:	2340      	movs	r3, #64	; 0x40
 800c904:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	461c      	mov	r4, r3
 800c90a:	f107 0314 	add.w	r3, r7, #20
 800c90e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c912:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c916:	68f8      	ldr	r0, [r7, #12]
 800c918:	372c      	adds	r7, #44	; 0x2c
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd90      	pop	{r4, r7, pc}
 800c91e:	bf00      	nop
 800c920:	e000ed04 	.word	0xe000ed04

0800c924 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c924:	b480      	push	{r7}
 800c926:	b083      	sub	sp, #12
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f103 0208 	add.w	r2, r3, #8
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	f04f 32ff 	mov.w	r2, #4294967295
 800c93c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f103 0208 	add.w	r2, r3, #8
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f103 0208 	add.w	r2, r3, #8
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2200      	movs	r2, #0
 800c956:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c958:	bf00      	nop
 800c95a:	370c      	adds	r7, #12
 800c95c:	46bd      	mov	sp, r7
 800c95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c962:	4770      	bx	lr

0800c964 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c964:	b480      	push	{r7}
 800c966:	b083      	sub	sp, #12
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2200      	movs	r2, #0
 800c970:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c972:	bf00      	nop
 800c974:	370c      	adds	r7, #12
 800c976:	46bd      	mov	sp, r7
 800c978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97c:	4770      	bx	lr

0800c97e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c97e:	b480      	push	{r7}
 800c980:	b085      	sub	sp, #20
 800c982:	af00      	add	r7, sp, #0
 800c984:	6078      	str	r0, [r7, #4]
 800c986:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	685b      	ldr	r3, [r3, #4]
 800c98c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	68fa      	ldr	r2, [r7, #12]
 800c992:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	689a      	ldr	r2, [r3, #8]
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	689b      	ldr	r3, [r3, #8]
 800c9a0:	683a      	ldr	r2, [r7, #0]
 800c9a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	683a      	ldr	r2, [r7, #0]
 800c9a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	687a      	ldr	r2, [r7, #4]
 800c9ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	1c5a      	adds	r2, r3, #1
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	601a      	str	r2, [r3, #0]
}
 800c9ba:	bf00      	nop
 800c9bc:	3714      	adds	r7, #20
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c4:	4770      	bx	lr

0800c9c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c9c6:	b480      	push	{r7}
 800c9c8:	b085      	sub	sp, #20
 800c9ca:	af00      	add	r7, sp, #0
 800c9cc:	6078      	str	r0, [r7, #4]
 800c9ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9dc:	d103      	bne.n	800c9e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	691b      	ldr	r3, [r3, #16]
 800c9e2:	60fb      	str	r3, [r7, #12]
 800c9e4:	e00c      	b.n	800ca00 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	3308      	adds	r3, #8
 800c9ea:	60fb      	str	r3, [r7, #12]
 800c9ec:	e002      	b.n	800c9f4 <vListInsert+0x2e>
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	685b      	ldr	r3, [r3, #4]
 800c9f2:	60fb      	str	r3, [r7, #12]
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	685b      	ldr	r3, [r3, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	68ba      	ldr	r2, [r7, #8]
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	d2f6      	bcs.n	800c9ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	685a      	ldr	r2, [r3, #4]
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	685b      	ldr	r3, [r3, #4]
 800ca0c:	683a      	ldr	r2, [r7, #0]
 800ca0e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	68fa      	ldr	r2, [r7, #12]
 800ca14:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	683a      	ldr	r2, [r7, #0]
 800ca1a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	687a      	ldr	r2, [r7, #4]
 800ca20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	1c5a      	adds	r2, r3, #1
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	601a      	str	r2, [r3, #0]
}
 800ca2c:	bf00      	nop
 800ca2e:	3714      	adds	r7, #20
 800ca30:	46bd      	mov	sp, r7
 800ca32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca36:	4770      	bx	lr

0800ca38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ca38:	b480      	push	{r7}
 800ca3a:	b085      	sub	sp, #20
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	691b      	ldr	r3, [r3, #16]
 800ca44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	685b      	ldr	r3, [r3, #4]
 800ca4a:	687a      	ldr	r2, [r7, #4]
 800ca4c:	6892      	ldr	r2, [r2, #8]
 800ca4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	689b      	ldr	r3, [r3, #8]
 800ca54:	687a      	ldr	r2, [r7, #4]
 800ca56:	6852      	ldr	r2, [r2, #4]
 800ca58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	685b      	ldr	r3, [r3, #4]
 800ca5e:	687a      	ldr	r2, [r7, #4]
 800ca60:	429a      	cmp	r2, r3
 800ca62:	d103      	bne.n	800ca6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	689a      	ldr	r2, [r3, #8]
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2200      	movs	r2, #0
 800ca70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	1e5a      	subs	r2, r3, #1
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	681b      	ldr	r3, [r3, #0]
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3714      	adds	r7, #20
 800ca84:	46bd      	mov	sp, r7
 800ca86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8a:	4770      	bx	lr

0800ca8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b084      	sub	sp, #16
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
 800ca94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d10c      	bne.n	800caba <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800caa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa4:	b672      	cpsid	i
 800caa6:	f383 8811 	msr	BASEPRI, r3
 800caaa:	f3bf 8f6f 	isb	sy
 800caae:	f3bf 8f4f 	dsb	sy
 800cab2:	b662      	cpsie	i
 800cab4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cab6:	bf00      	nop
 800cab8:	e7fe      	b.n	800cab8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800caba:	f002 f89f 	bl	800ebfc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	681a      	ldr	r2, [r3, #0]
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cac6:	68f9      	ldr	r1, [r7, #12]
 800cac8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800caca:	fb01 f303 	mul.w	r3, r1, r3
 800cace:	441a      	add	r2, r3
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	2200      	movs	r2, #0
 800cad8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	681a      	ldr	r2, [r3, #0]
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	681a      	ldr	r2, [r3, #0]
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caea:	3b01      	subs	r3, #1
 800caec:	68f9      	ldr	r1, [r7, #12]
 800caee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800caf0:	fb01 f303 	mul.w	r3, r1, r3
 800caf4:	441a      	add	r2, r3
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	22ff      	movs	r2, #255	; 0xff
 800cafe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	22ff      	movs	r2, #255	; 0xff
 800cb06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d114      	bne.n	800cb3a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	691b      	ldr	r3, [r3, #16]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d01a      	beq.n	800cb4e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	3310      	adds	r3, #16
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f001 fb57 	bl	800e1d0 <xTaskRemoveFromEventList>
 800cb22:	4603      	mov	r3, r0
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d012      	beq.n	800cb4e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cb28:	4b0c      	ldr	r3, [pc, #48]	; (800cb5c <xQueueGenericReset+0xd0>)
 800cb2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb2e:	601a      	str	r2, [r3, #0]
 800cb30:	f3bf 8f4f 	dsb	sy
 800cb34:	f3bf 8f6f 	isb	sy
 800cb38:	e009      	b.n	800cb4e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	3310      	adds	r3, #16
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f7ff fef0 	bl	800c924 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	3324      	adds	r3, #36	; 0x24
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f7ff feeb 	bl	800c924 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cb4e:	f002 f889 	bl	800ec64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cb52:	2301      	movs	r3, #1
}
 800cb54:	4618      	mov	r0, r3
 800cb56:	3710      	adds	r7, #16
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd80      	pop	{r7, pc}
 800cb5c:	e000ed04 	.word	0xe000ed04

0800cb60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b08e      	sub	sp, #56	; 0x38
 800cb64:	af02      	add	r7, sp, #8
 800cb66:	60f8      	str	r0, [r7, #12]
 800cb68:	60b9      	str	r1, [r7, #8]
 800cb6a:	607a      	str	r2, [r7, #4]
 800cb6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d10c      	bne.n	800cb8e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800cb74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb78:	b672      	cpsid	i
 800cb7a:	f383 8811 	msr	BASEPRI, r3
 800cb7e:	f3bf 8f6f 	isb	sy
 800cb82:	f3bf 8f4f 	dsb	sy
 800cb86:	b662      	cpsie	i
 800cb88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cb8a:	bf00      	nop
 800cb8c:	e7fe      	b.n	800cb8c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d10c      	bne.n	800cbae <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800cb94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb98:	b672      	cpsid	i
 800cb9a:	f383 8811 	msr	BASEPRI, r3
 800cb9e:	f3bf 8f6f 	isb	sy
 800cba2:	f3bf 8f4f 	dsb	sy
 800cba6:	b662      	cpsie	i
 800cba8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cbaa:	bf00      	nop
 800cbac:	e7fe      	b.n	800cbac <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d002      	beq.n	800cbba <xQueueGenericCreateStatic+0x5a>
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d001      	beq.n	800cbbe <xQueueGenericCreateStatic+0x5e>
 800cbba:	2301      	movs	r3, #1
 800cbbc:	e000      	b.n	800cbc0 <xQueueGenericCreateStatic+0x60>
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d10c      	bne.n	800cbde <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800cbc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc8:	b672      	cpsid	i
 800cbca:	f383 8811 	msr	BASEPRI, r3
 800cbce:	f3bf 8f6f 	isb	sy
 800cbd2:	f3bf 8f4f 	dsb	sy
 800cbd6:	b662      	cpsie	i
 800cbd8:	623b      	str	r3, [r7, #32]
}
 800cbda:	bf00      	nop
 800cbdc:	e7fe      	b.n	800cbdc <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d102      	bne.n	800cbea <xQueueGenericCreateStatic+0x8a>
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d101      	bne.n	800cbee <xQueueGenericCreateStatic+0x8e>
 800cbea:	2301      	movs	r3, #1
 800cbec:	e000      	b.n	800cbf0 <xQueueGenericCreateStatic+0x90>
 800cbee:	2300      	movs	r3, #0
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d10c      	bne.n	800cc0e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800cbf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf8:	b672      	cpsid	i
 800cbfa:	f383 8811 	msr	BASEPRI, r3
 800cbfe:	f3bf 8f6f 	isb	sy
 800cc02:	f3bf 8f4f 	dsb	sy
 800cc06:	b662      	cpsie	i
 800cc08:	61fb      	str	r3, [r7, #28]
}
 800cc0a:	bf00      	nop
 800cc0c:	e7fe      	b.n	800cc0c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cc0e:	2348      	movs	r3, #72	; 0x48
 800cc10:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cc12:	697b      	ldr	r3, [r7, #20]
 800cc14:	2b48      	cmp	r3, #72	; 0x48
 800cc16:	d00c      	beq.n	800cc32 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800cc18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc1c:	b672      	cpsid	i
 800cc1e:	f383 8811 	msr	BASEPRI, r3
 800cc22:	f3bf 8f6f 	isb	sy
 800cc26:	f3bf 8f4f 	dsb	sy
 800cc2a:	b662      	cpsie	i
 800cc2c:	61bb      	str	r3, [r7, #24]
}
 800cc2e:	bf00      	nop
 800cc30:	e7fe      	b.n	800cc30 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cc32:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cc38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d00d      	beq.n	800cc5a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cc3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc40:	2201      	movs	r2, #1
 800cc42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cc46:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cc4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc4c:	9300      	str	r3, [sp, #0]
 800cc4e:	4613      	mov	r3, r2
 800cc50:	687a      	ldr	r2, [r7, #4]
 800cc52:	68b9      	ldr	r1, [r7, #8]
 800cc54:	68f8      	ldr	r0, [r7, #12]
 800cc56:	f000 f847 	bl	800cce8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cc5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	3730      	adds	r7, #48	; 0x30
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}

0800cc64 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b08a      	sub	sp, #40	; 0x28
 800cc68:	af02      	add	r7, sp, #8
 800cc6a:	60f8      	str	r0, [r7, #12]
 800cc6c:	60b9      	str	r1, [r7, #8]
 800cc6e:	4613      	mov	r3, r2
 800cc70:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d10c      	bne.n	800cc92 <xQueueGenericCreate+0x2e>
	__asm volatile
 800cc78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc7c:	b672      	cpsid	i
 800cc7e:	f383 8811 	msr	BASEPRI, r3
 800cc82:	f3bf 8f6f 	isb	sy
 800cc86:	f3bf 8f4f 	dsb	sy
 800cc8a:	b662      	cpsie	i
 800cc8c:	613b      	str	r3, [r7, #16]
}
 800cc8e:	bf00      	nop
 800cc90:	e7fe      	b.n	800cc90 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d102      	bne.n	800cc9e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	61fb      	str	r3, [r7, #28]
 800cc9c:	e004      	b.n	800cca8 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	68ba      	ldr	r2, [r7, #8]
 800cca2:	fb02 f303 	mul.w	r3, r2, r3
 800cca6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cca8:	69fb      	ldr	r3, [r7, #28]
 800ccaa:	3348      	adds	r3, #72	; 0x48
 800ccac:	4618      	mov	r0, r3
 800ccae:	f002 f8d1 	bl	800ee54 <pvPortMalloc>
 800ccb2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ccb4:	69bb      	ldr	r3, [r7, #24]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d011      	beq.n	800ccde <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ccba:	69bb      	ldr	r3, [r7, #24]
 800ccbc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	3348      	adds	r3, #72	; 0x48
 800ccc2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ccc4:	69bb      	ldr	r3, [r7, #24]
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cccc:	79fa      	ldrb	r2, [r7, #7]
 800ccce:	69bb      	ldr	r3, [r7, #24]
 800ccd0:	9300      	str	r3, [sp, #0]
 800ccd2:	4613      	mov	r3, r2
 800ccd4:	697a      	ldr	r2, [r7, #20]
 800ccd6:	68b9      	ldr	r1, [r7, #8]
 800ccd8:	68f8      	ldr	r0, [r7, #12]
 800ccda:	f000 f805 	bl	800cce8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ccde:	69bb      	ldr	r3, [r7, #24]
	}
 800cce0:	4618      	mov	r0, r3
 800cce2:	3720      	adds	r7, #32
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}

0800cce8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b084      	sub	sp, #16
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	60f8      	str	r0, [r7, #12]
 800ccf0:	60b9      	str	r1, [r7, #8]
 800ccf2:	607a      	str	r2, [r7, #4]
 800ccf4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d103      	bne.n	800cd04 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ccfc:	69bb      	ldr	r3, [r7, #24]
 800ccfe:	69ba      	ldr	r2, [r7, #24]
 800cd00:	601a      	str	r2, [r3, #0]
 800cd02:	e002      	b.n	800cd0a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cd04:	69bb      	ldr	r3, [r7, #24]
 800cd06:	687a      	ldr	r2, [r7, #4]
 800cd08:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cd0a:	69bb      	ldr	r3, [r7, #24]
 800cd0c:	68fa      	ldr	r2, [r7, #12]
 800cd0e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cd10:	69bb      	ldr	r3, [r7, #24]
 800cd12:	68ba      	ldr	r2, [r7, #8]
 800cd14:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cd16:	2101      	movs	r1, #1
 800cd18:	69b8      	ldr	r0, [r7, #24]
 800cd1a:	f7ff feb7 	bl	800ca8c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cd1e:	bf00      	nop
 800cd20:	3710      	adds	r7, #16
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}
	...

0800cd28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b08e      	sub	sp, #56	; 0x38
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	60f8      	str	r0, [r7, #12]
 800cd30:	60b9      	str	r1, [r7, #8]
 800cd32:	607a      	str	r2, [r7, #4]
 800cd34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cd36:	2300      	movs	r3, #0
 800cd38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d10c      	bne.n	800cd5e <xQueueGenericSend+0x36>
	__asm volatile
 800cd44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd48:	b672      	cpsid	i
 800cd4a:	f383 8811 	msr	BASEPRI, r3
 800cd4e:	f3bf 8f6f 	isb	sy
 800cd52:	f3bf 8f4f 	dsb	sy
 800cd56:	b662      	cpsie	i
 800cd58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cd5a:	bf00      	nop
 800cd5c:	e7fe      	b.n	800cd5c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d103      	bne.n	800cd6c <xQueueGenericSend+0x44>
 800cd64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d101      	bne.n	800cd70 <xQueueGenericSend+0x48>
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	e000      	b.n	800cd72 <xQueueGenericSend+0x4a>
 800cd70:	2300      	movs	r3, #0
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d10c      	bne.n	800cd90 <xQueueGenericSend+0x68>
	__asm volatile
 800cd76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd7a:	b672      	cpsid	i
 800cd7c:	f383 8811 	msr	BASEPRI, r3
 800cd80:	f3bf 8f6f 	isb	sy
 800cd84:	f3bf 8f4f 	dsb	sy
 800cd88:	b662      	cpsie	i
 800cd8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cd8c:	bf00      	nop
 800cd8e:	e7fe      	b.n	800cd8e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	2b02      	cmp	r3, #2
 800cd94:	d103      	bne.n	800cd9e <xQueueGenericSend+0x76>
 800cd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd9a:	2b01      	cmp	r3, #1
 800cd9c:	d101      	bne.n	800cda2 <xQueueGenericSend+0x7a>
 800cd9e:	2301      	movs	r3, #1
 800cda0:	e000      	b.n	800cda4 <xQueueGenericSend+0x7c>
 800cda2:	2300      	movs	r3, #0
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d10c      	bne.n	800cdc2 <xQueueGenericSend+0x9a>
	__asm volatile
 800cda8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdac:	b672      	cpsid	i
 800cdae:	f383 8811 	msr	BASEPRI, r3
 800cdb2:	f3bf 8f6f 	isb	sy
 800cdb6:	f3bf 8f4f 	dsb	sy
 800cdba:	b662      	cpsie	i
 800cdbc:	623b      	str	r3, [r7, #32]
}
 800cdbe:	bf00      	nop
 800cdc0:	e7fe      	b.n	800cdc0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cdc2:	f001 fbcb 	bl	800e55c <xTaskGetSchedulerState>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d102      	bne.n	800cdd2 <xQueueGenericSend+0xaa>
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d101      	bne.n	800cdd6 <xQueueGenericSend+0xae>
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	e000      	b.n	800cdd8 <xQueueGenericSend+0xb0>
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d10c      	bne.n	800cdf6 <xQueueGenericSend+0xce>
	__asm volatile
 800cddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde0:	b672      	cpsid	i
 800cde2:	f383 8811 	msr	BASEPRI, r3
 800cde6:	f3bf 8f6f 	isb	sy
 800cdea:	f3bf 8f4f 	dsb	sy
 800cdee:	b662      	cpsie	i
 800cdf0:	61fb      	str	r3, [r7, #28]
}
 800cdf2:	bf00      	nop
 800cdf4:	e7fe      	b.n	800cdf4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cdf6:	f001 ff01 	bl	800ebfc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cdfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cdfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce02:	429a      	cmp	r2, r3
 800ce04:	d302      	bcc.n	800ce0c <xQueueGenericSend+0xe4>
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	2b02      	cmp	r3, #2
 800ce0a:	d129      	bne.n	800ce60 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ce0c:	683a      	ldr	r2, [r7, #0]
 800ce0e:	68b9      	ldr	r1, [r7, #8]
 800ce10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce12:	f000 fc5d 	bl	800d6d0 <prvCopyDataToQueue>
 800ce16:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d010      	beq.n	800ce42 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce22:	3324      	adds	r3, #36	; 0x24
 800ce24:	4618      	mov	r0, r3
 800ce26:	f001 f9d3 	bl	800e1d0 <xTaskRemoveFromEventList>
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d013      	beq.n	800ce58 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ce30:	4b3f      	ldr	r3, [pc, #252]	; (800cf30 <xQueueGenericSend+0x208>)
 800ce32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce36:	601a      	str	r2, [r3, #0]
 800ce38:	f3bf 8f4f 	dsb	sy
 800ce3c:	f3bf 8f6f 	isb	sy
 800ce40:	e00a      	b.n	800ce58 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ce42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d007      	beq.n	800ce58 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ce48:	4b39      	ldr	r3, [pc, #228]	; (800cf30 <xQueueGenericSend+0x208>)
 800ce4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce4e:	601a      	str	r2, [r3, #0]
 800ce50:	f3bf 8f4f 	dsb	sy
 800ce54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ce58:	f001 ff04 	bl	800ec64 <vPortExitCritical>
				return pdPASS;
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	e063      	b.n	800cf28 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d103      	bne.n	800ce6e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ce66:	f001 fefd 	bl	800ec64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	e05c      	b.n	800cf28 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ce6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d106      	bne.n	800ce82 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ce74:	f107 0314 	add.w	r3, r7, #20
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f001 fa0d 	bl	800e298 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ce7e:	2301      	movs	r3, #1
 800ce80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ce82:	f001 feef 	bl	800ec64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ce86:	f000 ff73 	bl	800dd70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ce8a:	f001 feb7 	bl	800ebfc <vPortEnterCritical>
 800ce8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce94:	b25b      	sxtb	r3, r3
 800ce96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce9a:	d103      	bne.n	800cea4 <xQueueGenericSend+0x17c>
 800ce9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce9e:	2200      	movs	r2, #0
 800cea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cea6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ceaa:	b25b      	sxtb	r3, r3
 800ceac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceb0:	d103      	bne.n	800ceba <xQueueGenericSend+0x192>
 800ceb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ceba:	f001 fed3 	bl	800ec64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cebe:	1d3a      	adds	r2, r7, #4
 800cec0:	f107 0314 	add.w	r3, r7, #20
 800cec4:	4611      	mov	r1, r2
 800cec6:	4618      	mov	r0, r3
 800cec8:	f001 f9fc 	bl	800e2c4 <xTaskCheckForTimeOut>
 800cecc:	4603      	mov	r3, r0
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d124      	bne.n	800cf1c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ced2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ced4:	f000 fcf4 	bl	800d8c0 <prvIsQueueFull>
 800ced8:	4603      	mov	r3, r0
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d018      	beq.n	800cf10 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cee0:	3310      	adds	r3, #16
 800cee2:	687a      	ldr	r2, [r7, #4]
 800cee4:	4611      	mov	r1, r2
 800cee6:	4618      	mov	r0, r3
 800cee8:	f001 f94c 	bl	800e184 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ceec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ceee:	f000 fc7f 	bl	800d7f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cef2:	f000 ff4b 	bl	800dd8c <xTaskResumeAll>
 800cef6:	4603      	mov	r3, r0
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	f47f af7c 	bne.w	800cdf6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800cefe:	4b0c      	ldr	r3, [pc, #48]	; (800cf30 <xQueueGenericSend+0x208>)
 800cf00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf04:	601a      	str	r2, [r3, #0]
 800cf06:	f3bf 8f4f 	dsb	sy
 800cf0a:	f3bf 8f6f 	isb	sy
 800cf0e:	e772      	b.n	800cdf6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cf10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf12:	f000 fc6d 	bl	800d7f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cf16:	f000 ff39 	bl	800dd8c <xTaskResumeAll>
 800cf1a:	e76c      	b.n	800cdf6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cf1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf1e:	f000 fc67 	bl	800d7f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cf22:	f000 ff33 	bl	800dd8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cf26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	3738      	adds	r7, #56	; 0x38
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}
 800cf30:	e000ed04 	.word	0xe000ed04

0800cf34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b08e      	sub	sp, #56	; 0x38
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	60f8      	str	r0, [r7, #12]
 800cf3c:	60b9      	str	r1, [r7, #8]
 800cf3e:	607a      	str	r2, [r7, #4]
 800cf40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cf46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d10c      	bne.n	800cf66 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800cf4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf50:	b672      	cpsid	i
 800cf52:	f383 8811 	msr	BASEPRI, r3
 800cf56:	f3bf 8f6f 	isb	sy
 800cf5a:	f3bf 8f4f 	dsb	sy
 800cf5e:	b662      	cpsie	i
 800cf60:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cf62:	bf00      	nop
 800cf64:	e7fe      	b.n	800cf64 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d103      	bne.n	800cf74 <xQueueGenericSendFromISR+0x40>
 800cf6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d101      	bne.n	800cf78 <xQueueGenericSendFromISR+0x44>
 800cf74:	2301      	movs	r3, #1
 800cf76:	e000      	b.n	800cf7a <xQueueGenericSendFromISR+0x46>
 800cf78:	2300      	movs	r3, #0
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d10c      	bne.n	800cf98 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800cf7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf82:	b672      	cpsid	i
 800cf84:	f383 8811 	msr	BASEPRI, r3
 800cf88:	f3bf 8f6f 	isb	sy
 800cf8c:	f3bf 8f4f 	dsb	sy
 800cf90:	b662      	cpsie	i
 800cf92:	623b      	str	r3, [r7, #32]
}
 800cf94:	bf00      	nop
 800cf96:	e7fe      	b.n	800cf96 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	2b02      	cmp	r3, #2
 800cf9c:	d103      	bne.n	800cfa6 <xQueueGenericSendFromISR+0x72>
 800cf9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfa2:	2b01      	cmp	r3, #1
 800cfa4:	d101      	bne.n	800cfaa <xQueueGenericSendFromISR+0x76>
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	e000      	b.n	800cfac <xQueueGenericSendFromISR+0x78>
 800cfaa:	2300      	movs	r3, #0
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d10c      	bne.n	800cfca <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800cfb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfb4:	b672      	cpsid	i
 800cfb6:	f383 8811 	msr	BASEPRI, r3
 800cfba:	f3bf 8f6f 	isb	sy
 800cfbe:	f3bf 8f4f 	dsb	sy
 800cfc2:	b662      	cpsie	i
 800cfc4:	61fb      	str	r3, [r7, #28]
}
 800cfc6:	bf00      	nop
 800cfc8:	e7fe      	b.n	800cfc8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cfca:	f001 feff 	bl	800edcc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cfce:	f3ef 8211 	mrs	r2, BASEPRI
 800cfd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfd6:	b672      	cpsid	i
 800cfd8:	f383 8811 	msr	BASEPRI, r3
 800cfdc:	f3bf 8f6f 	isb	sy
 800cfe0:	f3bf 8f4f 	dsb	sy
 800cfe4:	b662      	cpsie	i
 800cfe6:	61ba      	str	r2, [r7, #24]
 800cfe8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cfea:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cfec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cfee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cff6:	429a      	cmp	r2, r3
 800cff8:	d302      	bcc.n	800d000 <xQueueGenericSendFromISR+0xcc>
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	2b02      	cmp	r3, #2
 800cffe:	d12c      	bne.n	800d05a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d002:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d00a:	683a      	ldr	r2, [r7, #0]
 800d00c:	68b9      	ldr	r1, [r7, #8]
 800d00e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d010:	f000 fb5e 	bl	800d6d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d014:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d01c:	d112      	bne.n	800d044 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d022:	2b00      	cmp	r3, #0
 800d024:	d016      	beq.n	800d054 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d028:	3324      	adds	r3, #36	; 0x24
 800d02a:	4618      	mov	r0, r3
 800d02c:	f001 f8d0 	bl	800e1d0 <xTaskRemoveFromEventList>
 800d030:	4603      	mov	r3, r0
 800d032:	2b00      	cmp	r3, #0
 800d034:	d00e      	beq.n	800d054 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d00b      	beq.n	800d054 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2201      	movs	r2, #1
 800d040:	601a      	str	r2, [r3, #0]
 800d042:	e007      	b.n	800d054 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d044:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d048:	3301      	adds	r3, #1
 800d04a:	b2db      	uxtb	r3, r3
 800d04c:	b25a      	sxtb	r2, r3
 800d04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d054:	2301      	movs	r3, #1
 800d056:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d058:	e001      	b.n	800d05e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d05a:	2300      	movs	r3, #0
 800d05c:	637b      	str	r3, [r7, #52]	; 0x34
 800d05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d060:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d062:	693b      	ldr	r3, [r7, #16]
 800d064:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d068:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d06a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	3738      	adds	r7, #56	; 0x38
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}

0800d074 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b08e      	sub	sp, #56	; 0x38
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
 800d07c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d084:	2b00      	cmp	r3, #0
 800d086:	d10c      	bne.n	800d0a2 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800d088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d08c:	b672      	cpsid	i
 800d08e:	f383 8811 	msr	BASEPRI, r3
 800d092:	f3bf 8f6f 	isb	sy
 800d096:	f3bf 8f4f 	dsb	sy
 800d09a:	b662      	cpsie	i
 800d09c:	623b      	str	r3, [r7, #32]
}
 800d09e:	bf00      	nop
 800d0a0:	e7fe      	b.n	800d0a0 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d00c      	beq.n	800d0c4 <xQueueGiveFromISR+0x50>
	__asm volatile
 800d0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ae:	b672      	cpsid	i
 800d0b0:	f383 8811 	msr	BASEPRI, r3
 800d0b4:	f3bf 8f6f 	isb	sy
 800d0b8:	f3bf 8f4f 	dsb	sy
 800d0bc:	b662      	cpsie	i
 800d0be:	61fb      	str	r3, [r7, #28]
}
 800d0c0:	bf00      	nop
 800d0c2:	e7fe      	b.n	800d0c2 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d103      	bne.n	800d0d4 <xQueueGiveFromISR+0x60>
 800d0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ce:	689b      	ldr	r3, [r3, #8]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d101      	bne.n	800d0d8 <xQueueGiveFromISR+0x64>
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	e000      	b.n	800d0da <xQueueGiveFromISR+0x66>
 800d0d8:	2300      	movs	r3, #0
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d10c      	bne.n	800d0f8 <xQueueGiveFromISR+0x84>
	__asm volatile
 800d0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e2:	b672      	cpsid	i
 800d0e4:	f383 8811 	msr	BASEPRI, r3
 800d0e8:	f3bf 8f6f 	isb	sy
 800d0ec:	f3bf 8f4f 	dsb	sy
 800d0f0:	b662      	cpsie	i
 800d0f2:	61bb      	str	r3, [r7, #24]
}
 800d0f4:	bf00      	nop
 800d0f6:	e7fe      	b.n	800d0f6 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d0f8:	f001 fe68 	bl	800edcc <vPortValidateInterruptPriority>
	__asm volatile
 800d0fc:	f3ef 8211 	mrs	r2, BASEPRI
 800d100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d104:	b672      	cpsid	i
 800d106:	f383 8811 	msr	BASEPRI, r3
 800d10a:	f3bf 8f6f 	isb	sy
 800d10e:	f3bf 8f4f 	dsb	sy
 800d112:	b662      	cpsie	i
 800d114:	617a      	str	r2, [r7, #20]
 800d116:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d118:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d11a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d11e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d120:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d126:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d128:	429a      	cmp	r2, r3
 800d12a:	d22b      	bcs.n	800d184 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d12e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d132:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d138:	1c5a      	adds	r2, r3, #1
 800d13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d13c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d13e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d142:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d146:	d112      	bne.n	800d16e <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d016      	beq.n	800d17e <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d152:	3324      	adds	r3, #36	; 0x24
 800d154:	4618      	mov	r0, r3
 800d156:	f001 f83b 	bl	800e1d0 <xTaskRemoveFromEventList>
 800d15a:	4603      	mov	r3, r0
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d00e      	beq.n	800d17e <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d00b      	beq.n	800d17e <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	2201      	movs	r2, #1
 800d16a:	601a      	str	r2, [r3, #0]
 800d16c:	e007      	b.n	800d17e <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d16e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d172:	3301      	adds	r3, #1
 800d174:	b2db      	uxtb	r3, r3
 800d176:	b25a      	sxtb	r2, r3
 800d178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d17a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d17e:	2301      	movs	r3, #1
 800d180:	637b      	str	r3, [r7, #52]	; 0x34
 800d182:	e001      	b.n	800d188 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d184:	2300      	movs	r3, #0
 800d186:	637b      	str	r3, [r7, #52]	; 0x34
 800d188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d18a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	f383 8811 	msr	BASEPRI, r3
}
 800d192:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d196:	4618      	mov	r0, r3
 800d198:	3738      	adds	r7, #56	; 0x38
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}
	...

0800d1a0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b08c      	sub	sp, #48	; 0x30
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	60f8      	str	r0, [r7, #12]
 800d1a8:	60b9      	str	r1, [r7, #8]
 800d1aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d10c      	bne.n	800d1d4 <xQueueReceive+0x34>
	__asm volatile
 800d1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1be:	b672      	cpsid	i
 800d1c0:	f383 8811 	msr	BASEPRI, r3
 800d1c4:	f3bf 8f6f 	isb	sy
 800d1c8:	f3bf 8f4f 	dsb	sy
 800d1cc:	b662      	cpsie	i
 800d1ce:	623b      	str	r3, [r7, #32]
}
 800d1d0:	bf00      	nop
 800d1d2:	e7fe      	b.n	800d1d2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d103      	bne.n	800d1e2 <xQueueReceive+0x42>
 800d1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d101      	bne.n	800d1e6 <xQueueReceive+0x46>
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	e000      	b.n	800d1e8 <xQueueReceive+0x48>
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d10c      	bne.n	800d206 <xQueueReceive+0x66>
	__asm volatile
 800d1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1f0:	b672      	cpsid	i
 800d1f2:	f383 8811 	msr	BASEPRI, r3
 800d1f6:	f3bf 8f6f 	isb	sy
 800d1fa:	f3bf 8f4f 	dsb	sy
 800d1fe:	b662      	cpsie	i
 800d200:	61fb      	str	r3, [r7, #28]
}
 800d202:	bf00      	nop
 800d204:	e7fe      	b.n	800d204 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d206:	f001 f9a9 	bl	800e55c <xTaskGetSchedulerState>
 800d20a:	4603      	mov	r3, r0
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d102      	bne.n	800d216 <xQueueReceive+0x76>
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d101      	bne.n	800d21a <xQueueReceive+0x7a>
 800d216:	2301      	movs	r3, #1
 800d218:	e000      	b.n	800d21c <xQueueReceive+0x7c>
 800d21a:	2300      	movs	r3, #0
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d10c      	bne.n	800d23a <xQueueReceive+0x9a>
	__asm volatile
 800d220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d224:	b672      	cpsid	i
 800d226:	f383 8811 	msr	BASEPRI, r3
 800d22a:	f3bf 8f6f 	isb	sy
 800d22e:	f3bf 8f4f 	dsb	sy
 800d232:	b662      	cpsie	i
 800d234:	61bb      	str	r3, [r7, #24]
}
 800d236:	bf00      	nop
 800d238:	e7fe      	b.n	800d238 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d23a:	f001 fcdf 	bl	800ebfc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d242:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d246:	2b00      	cmp	r3, #0
 800d248:	d01f      	beq.n	800d28a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d24a:	68b9      	ldr	r1, [r7, #8]
 800d24c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d24e:	f000 faa9 	bl	800d7a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d254:	1e5a      	subs	r2, r3, #1
 800d256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d258:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d25c:	691b      	ldr	r3, [r3, #16]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d00f      	beq.n	800d282 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d264:	3310      	adds	r3, #16
 800d266:	4618      	mov	r0, r3
 800d268:	f000 ffb2 	bl	800e1d0 <xTaskRemoveFromEventList>
 800d26c:	4603      	mov	r3, r0
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d007      	beq.n	800d282 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d272:	4b3d      	ldr	r3, [pc, #244]	; (800d368 <xQueueReceive+0x1c8>)
 800d274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d278:	601a      	str	r2, [r3, #0]
 800d27a:	f3bf 8f4f 	dsb	sy
 800d27e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d282:	f001 fcef 	bl	800ec64 <vPortExitCritical>
				return pdPASS;
 800d286:	2301      	movs	r3, #1
 800d288:	e069      	b.n	800d35e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d103      	bne.n	800d298 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d290:	f001 fce8 	bl	800ec64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d294:	2300      	movs	r3, #0
 800d296:	e062      	b.n	800d35e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d106      	bne.n	800d2ac <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d29e:	f107 0310 	add.w	r3, r7, #16
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f000 fff8 	bl	800e298 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d2ac:	f001 fcda 	bl	800ec64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d2b0:	f000 fd5e 	bl	800dd70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d2b4:	f001 fca2 	bl	800ebfc <vPortEnterCritical>
 800d2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d2be:	b25b      	sxtb	r3, r3
 800d2c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2c4:	d103      	bne.n	800d2ce <xQueueReceive+0x12e>
 800d2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d2d4:	b25b      	sxtb	r3, r3
 800d2d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2da:	d103      	bne.n	800d2e4 <xQueueReceive+0x144>
 800d2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2de:	2200      	movs	r2, #0
 800d2e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d2e4:	f001 fcbe 	bl	800ec64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d2e8:	1d3a      	adds	r2, r7, #4
 800d2ea:	f107 0310 	add.w	r3, r7, #16
 800d2ee:	4611      	mov	r1, r2
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f000 ffe7 	bl	800e2c4 <xTaskCheckForTimeOut>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d123      	bne.n	800d344 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d2fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2fe:	f000 fac9 	bl	800d894 <prvIsQueueEmpty>
 800d302:	4603      	mov	r3, r0
 800d304:	2b00      	cmp	r3, #0
 800d306:	d017      	beq.n	800d338 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d30a:	3324      	adds	r3, #36	; 0x24
 800d30c:	687a      	ldr	r2, [r7, #4]
 800d30e:	4611      	mov	r1, r2
 800d310:	4618      	mov	r0, r3
 800d312:	f000 ff37 	bl	800e184 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d316:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d318:	f000 fa6a 	bl	800d7f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d31c:	f000 fd36 	bl	800dd8c <xTaskResumeAll>
 800d320:	4603      	mov	r3, r0
 800d322:	2b00      	cmp	r3, #0
 800d324:	d189      	bne.n	800d23a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800d326:	4b10      	ldr	r3, [pc, #64]	; (800d368 <xQueueReceive+0x1c8>)
 800d328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d32c:	601a      	str	r2, [r3, #0]
 800d32e:	f3bf 8f4f 	dsb	sy
 800d332:	f3bf 8f6f 	isb	sy
 800d336:	e780      	b.n	800d23a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d338:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d33a:	f000 fa59 	bl	800d7f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d33e:	f000 fd25 	bl	800dd8c <xTaskResumeAll>
 800d342:	e77a      	b.n	800d23a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d344:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d346:	f000 fa53 	bl	800d7f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d34a:	f000 fd1f 	bl	800dd8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d34e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d350:	f000 faa0 	bl	800d894 <prvIsQueueEmpty>
 800d354:	4603      	mov	r3, r0
 800d356:	2b00      	cmp	r3, #0
 800d358:	f43f af6f 	beq.w	800d23a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d35c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d35e:	4618      	mov	r0, r3
 800d360:	3730      	adds	r7, #48	; 0x30
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}
 800d366:	bf00      	nop
 800d368:	e000ed04 	.word	0xe000ed04

0800d36c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b08e      	sub	sp, #56	; 0x38
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
 800d374:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d376:	2300      	movs	r3, #0
 800d378:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d37e:	2300      	movs	r3, #0
 800d380:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d384:	2b00      	cmp	r3, #0
 800d386:	d10c      	bne.n	800d3a2 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800d388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d38c:	b672      	cpsid	i
 800d38e:	f383 8811 	msr	BASEPRI, r3
 800d392:	f3bf 8f6f 	isb	sy
 800d396:	f3bf 8f4f 	dsb	sy
 800d39a:	b662      	cpsie	i
 800d39c:	623b      	str	r3, [r7, #32]
}
 800d39e:	bf00      	nop
 800d3a0:	e7fe      	b.n	800d3a0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d00c      	beq.n	800d3c4 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800d3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ae:	b672      	cpsid	i
 800d3b0:	f383 8811 	msr	BASEPRI, r3
 800d3b4:	f3bf 8f6f 	isb	sy
 800d3b8:	f3bf 8f4f 	dsb	sy
 800d3bc:	b662      	cpsie	i
 800d3be:	61fb      	str	r3, [r7, #28]
}
 800d3c0:	bf00      	nop
 800d3c2:	e7fe      	b.n	800d3c2 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d3c4:	f001 f8ca 	bl	800e55c <xTaskGetSchedulerState>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d102      	bne.n	800d3d4 <xQueueSemaphoreTake+0x68>
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d101      	bne.n	800d3d8 <xQueueSemaphoreTake+0x6c>
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	e000      	b.n	800d3da <xQueueSemaphoreTake+0x6e>
 800d3d8:	2300      	movs	r3, #0
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d10c      	bne.n	800d3f8 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800d3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3e2:	b672      	cpsid	i
 800d3e4:	f383 8811 	msr	BASEPRI, r3
 800d3e8:	f3bf 8f6f 	isb	sy
 800d3ec:	f3bf 8f4f 	dsb	sy
 800d3f0:	b662      	cpsie	i
 800d3f2:	61bb      	str	r3, [r7, #24]
}
 800d3f4:	bf00      	nop
 800d3f6:	e7fe      	b.n	800d3f6 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d3f8:	f001 fc00 	bl	800ebfc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d400:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d404:	2b00      	cmp	r3, #0
 800d406:	d024      	beq.n	800d452 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d40a:	1e5a      	subs	r2, r3, #1
 800d40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d40e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d104      	bne.n	800d422 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d418:	f001 fa66 	bl	800e8e8 <pvTaskIncrementMutexHeldCount>
 800d41c:	4602      	mov	r2, r0
 800d41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d420:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d424:	691b      	ldr	r3, [r3, #16]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d00f      	beq.n	800d44a <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d42c:	3310      	adds	r3, #16
 800d42e:	4618      	mov	r0, r3
 800d430:	f000 fece 	bl	800e1d0 <xTaskRemoveFromEventList>
 800d434:	4603      	mov	r3, r0
 800d436:	2b00      	cmp	r3, #0
 800d438:	d007      	beq.n	800d44a <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d43a:	4b55      	ldr	r3, [pc, #340]	; (800d590 <xQueueSemaphoreTake+0x224>)
 800d43c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d440:	601a      	str	r2, [r3, #0]
 800d442:	f3bf 8f4f 	dsb	sy
 800d446:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d44a:	f001 fc0b 	bl	800ec64 <vPortExitCritical>
				return pdPASS;
 800d44e:	2301      	movs	r3, #1
 800d450:	e099      	b.n	800d586 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d113      	bne.n	800d480 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d00c      	beq.n	800d478 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800d45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d462:	b672      	cpsid	i
 800d464:	f383 8811 	msr	BASEPRI, r3
 800d468:	f3bf 8f6f 	isb	sy
 800d46c:	f3bf 8f4f 	dsb	sy
 800d470:	b662      	cpsie	i
 800d472:	617b      	str	r3, [r7, #20]
}
 800d474:	bf00      	nop
 800d476:	e7fe      	b.n	800d476 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d478:	f001 fbf4 	bl	800ec64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d47c:	2300      	movs	r3, #0
 800d47e:	e082      	b.n	800d586 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d482:	2b00      	cmp	r3, #0
 800d484:	d106      	bne.n	800d494 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d486:	f107 030c 	add.w	r3, r7, #12
 800d48a:	4618      	mov	r0, r3
 800d48c:	f000 ff04 	bl	800e298 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d490:	2301      	movs	r3, #1
 800d492:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d494:	f001 fbe6 	bl	800ec64 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d498:	f000 fc6a 	bl	800dd70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d49c:	f001 fbae 	bl	800ebfc <vPortEnterCritical>
 800d4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d4a6:	b25b      	sxtb	r3, r3
 800d4a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4ac:	d103      	bne.n	800d4b6 <xQueueSemaphoreTake+0x14a>
 800d4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d4bc:	b25b      	sxtb	r3, r3
 800d4be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4c2:	d103      	bne.n	800d4cc <xQueueSemaphoreTake+0x160>
 800d4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d4cc:	f001 fbca 	bl	800ec64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d4d0:	463a      	mov	r2, r7
 800d4d2:	f107 030c 	add.w	r3, r7, #12
 800d4d6:	4611      	mov	r1, r2
 800d4d8:	4618      	mov	r0, r3
 800d4da:	f000 fef3 	bl	800e2c4 <xTaskCheckForTimeOut>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d132      	bne.n	800d54a <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d4e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4e6:	f000 f9d5 	bl	800d894 <prvIsQueueEmpty>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d026      	beq.n	800d53e <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d109      	bne.n	800d50c <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800d4f8:	f001 fb80 	bl	800ebfc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4fe:	689b      	ldr	r3, [r3, #8]
 800d500:	4618      	mov	r0, r3
 800d502:	f001 f849 	bl	800e598 <xTaskPriorityInherit>
 800d506:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d508:	f001 fbac 	bl	800ec64 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d50e:	3324      	adds	r3, #36	; 0x24
 800d510:	683a      	ldr	r2, [r7, #0]
 800d512:	4611      	mov	r1, r2
 800d514:	4618      	mov	r0, r3
 800d516:	f000 fe35 	bl	800e184 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d51a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d51c:	f000 f968 	bl	800d7f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d520:	f000 fc34 	bl	800dd8c <xTaskResumeAll>
 800d524:	4603      	mov	r3, r0
 800d526:	2b00      	cmp	r3, #0
 800d528:	f47f af66 	bne.w	800d3f8 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800d52c:	4b18      	ldr	r3, [pc, #96]	; (800d590 <xQueueSemaphoreTake+0x224>)
 800d52e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d532:	601a      	str	r2, [r3, #0]
 800d534:	f3bf 8f4f 	dsb	sy
 800d538:	f3bf 8f6f 	isb	sy
 800d53c:	e75c      	b.n	800d3f8 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d53e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d540:	f000 f956 	bl	800d7f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d544:	f000 fc22 	bl	800dd8c <xTaskResumeAll>
 800d548:	e756      	b.n	800d3f8 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d54a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d54c:	f000 f950 	bl	800d7f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d550:	f000 fc1c 	bl	800dd8c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d554:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d556:	f000 f99d 	bl	800d894 <prvIsQueueEmpty>
 800d55a:	4603      	mov	r3, r0
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	f43f af4b 	beq.w	800d3f8 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d564:	2b00      	cmp	r3, #0
 800d566:	d00d      	beq.n	800d584 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800d568:	f001 fb48 	bl	800ebfc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d56c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d56e:	f000 f897 	bl	800d6a0 <prvGetDisinheritPriorityAfterTimeout>
 800d572:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d576:	689b      	ldr	r3, [r3, #8]
 800d578:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d57a:	4618      	mov	r0, r3
 800d57c:	f001 f916 	bl	800e7ac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d580:	f001 fb70 	bl	800ec64 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d584:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d586:	4618      	mov	r0, r3
 800d588:	3738      	adds	r7, #56	; 0x38
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}
 800d58e:	bf00      	nop
 800d590:	e000ed04 	.word	0xe000ed04

0800d594 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b08e      	sub	sp, #56	; 0x38
 800d598:	af00      	add	r7, sp, #0
 800d59a:	60f8      	str	r0, [r7, #12]
 800d59c:	60b9      	str	r1, [r7, #8]
 800d59e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d10c      	bne.n	800d5c4 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800d5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ae:	b672      	cpsid	i
 800d5b0:	f383 8811 	msr	BASEPRI, r3
 800d5b4:	f3bf 8f6f 	isb	sy
 800d5b8:	f3bf 8f4f 	dsb	sy
 800d5bc:	b662      	cpsie	i
 800d5be:	623b      	str	r3, [r7, #32]
}
 800d5c0:	bf00      	nop
 800d5c2:	e7fe      	b.n	800d5c2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d103      	bne.n	800d5d2 <xQueueReceiveFromISR+0x3e>
 800d5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d101      	bne.n	800d5d6 <xQueueReceiveFromISR+0x42>
 800d5d2:	2301      	movs	r3, #1
 800d5d4:	e000      	b.n	800d5d8 <xQueueReceiveFromISR+0x44>
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d10c      	bne.n	800d5f6 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800d5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5e0:	b672      	cpsid	i
 800d5e2:	f383 8811 	msr	BASEPRI, r3
 800d5e6:	f3bf 8f6f 	isb	sy
 800d5ea:	f3bf 8f4f 	dsb	sy
 800d5ee:	b662      	cpsie	i
 800d5f0:	61fb      	str	r3, [r7, #28]
}
 800d5f2:	bf00      	nop
 800d5f4:	e7fe      	b.n	800d5f4 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d5f6:	f001 fbe9 	bl	800edcc <vPortValidateInterruptPriority>
	__asm volatile
 800d5fa:	f3ef 8211 	mrs	r2, BASEPRI
 800d5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d602:	b672      	cpsid	i
 800d604:	f383 8811 	msr	BASEPRI, r3
 800d608:	f3bf 8f6f 	isb	sy
 800d60c:	f3bf 8f4f 	dsb	sy
 800d610:	b662      	cpsie	i
 800d612:	61ba      	str	r2, [r7, #24]
 800d614:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d616:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d618:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d61c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d61e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d622:	2b00      	cmp	r3, #0
 800d624:	d02f      	beq.n	800d686 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d628:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d62c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d630:	68b9      	ldr	r1, [r7, #8]
 800d632:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d634:	f000 f8b6 	bl	800d7a4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d63a:	1e5a      	subs	r2, r3, #1
 800d63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d63e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d640:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d644:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d648:	d112      	bne.n	800d670 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d64c:	691b      	ldr	r3, [r3, #16]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d016      	beq.n	800d680 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d654:	3310      	adds	r3, #16
 800d656:	4618      	mov	r0, r3
 800d658:	f000 fdba 	bl	800e1d0 <xTaskRemoveFromEventList>
 800d65c:	4603      	mov	r3, r0
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d00e      	beq.n	800d680 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d00b      	beq.n	800d680 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2201      	movs	r2, #1
 800d66c:	601a      	str	r2, [r3, #0]
 800d66e:	e007      	b.n	800d680 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d674:	3301      	adds	r3, #1
 800d676:	b2db      	uxtb	r3, r3
 800d678:	b25a      	sxtb	r2, r3
 800d67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d67c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d680:	2301      	movs	r3, #1
 800d682:	637b      	str	r3, [r7, #52]	; 0x34
 800d684:	e001      	b.n	800d68a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800d686:	2300      	movs	r3, #0
 800d688:	637b      	str	r3, [r7, #52]	; 0x34
 800d68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d68c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d68e:	693b      	ldr	r3, [r7, #16]
 800d690:	f383 8811 	msr	BASEPRI, r3
}
 800d694:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d698:	4618      	mov	r0, r3
 800d69a:	3738      	adds	r7, #56	; 0x38
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}

0800d6a0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d6a0:	b480      	push	{r7}
 800d6a2:	b085      	sub	sp, #20
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d006      	beq.n	800d6be <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	f1c3 0307 	rsb	r3, r3, #7
 800d6ba:	60fb      	str	r3, [r7, #12]
 800d6bc:	e001      	b.n	800d6c2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
	}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	3714      	adds	r7, #20
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr

0800d6d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b086      	sub	sp, #24
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	60f8      	str	r0, [r7, #12]
 800d6d8:	60b9      	str	r1, [r7, #8]
 800d6da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d6dc:	2300      	movs	r3, #0
 800d6de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d10d      	bne.n	800d70a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d14d      	bne.n	800d792 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	689b      	ldr	r3, [r3, #8]
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	f000 ffcc 	bl	800e698 <xTaskPriorityDisinherit>
 800d700:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	2200      	movs	r2, #0
 800d706:	609a      	str	r2, [r3, #8]
 800d708:	e043      	b.n	800d792 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d119      	bne.n	800d744 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	6858      	ldr	r0, [r3, #4]
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d718:	461a      	mov	r2, r3
 800d71a:	68b9      	ldr	r1, [r7, #8]
 800d71c:	f018 ffca 	bl	80266b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	685a      	ldr	r2, [r3, #4]
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d728:	441a      	add	r2, r3
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	685a      	ldr	r2, [r3, #4]
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	689b      	ldr	r3, [r3, #8]
 800d736:	429a      	cmp	r2, r3
 800d738:	d32b      	bcc.n	800d792 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	681a      	ldr	r2, [r3, #0]
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	605a      	str	r2, [r3, #4]
 800d742:	e026      	b.n	800d792 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	68d8      	ldr	r0, [r3, #12]
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d74c:	461a      	mov	r2, r3
 800d74e:	68b9      	ldr	r1, [r7, #8]
 800d750:	f018 ffb0 	bl	80266b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	68da      	ldr	r2, [r3, #12]
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d75c:	425b      	negs	r3, r3
 800d75e:	441a      	add	r2, r3
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	68da      	ldr	r2, [r3, #12]
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	429a      	cmp	r2, r3
 800d76e:	d207      	bcs.n	800d780 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	689a      	ldr	r2, [r3, #8]
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d778:	425b      	negs	r3, r3
 800d77a:	441a      	add	r2, r3
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2b02      	cmp	r3, #2
 800d784:	d105      	bne.n	800d792 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d786:	693b      	ldr	r3, [r7, #16]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d002      	beq.n	800d792 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d78c:	693b      	ldr	r3, [r7, #16]
 800d78e:	3b01      	subs	r3, #1
 800d790:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d792:	693b      	ldr	r3, [r7, #16]
 800d794:	1c5a      	adds	r2, r3, #1
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d79a:	697b      	ldr	r3, [r7, #20]
}
 800d79c:	4618      	mov	r0, r3
 800d79e:	3718      	adds	r7, #24
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd80      	pop	{r7, pc}

0800d7a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b082      	sub	sp, #8
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
 800d7ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d018      	beq.n	800d7e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	68da      	ldr	r2, [r3, #12]
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7be:	441a      	add	r2, r3
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	68da      	ldr	r2, [r3, #12]
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	689b      	ldr	r3, [r3, #8]
 800d7cc:	429a      	cmp	r2, r3
 800d7ce:	d303      	bcc.n	800d7d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681a      	ldr	r2, [r3, #0]
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	68d9      	ldr	r1, [r3, #12]
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7e0:	461a      	mov	r2, r3
 800d7e2:	6838      	ldr	r0, [r7, #0]
 800d7e4:	f018 ff66 	bl	80266b4 <memcpy>
	}
}
 800d7e8:	bf00      	nop
 800d7ea:	3708      	adds	r7, #8
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}

0800d7f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b084      	sub	sp, #16
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d7f8:	f001 fa00 	bl	800ebfc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d802:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d804:	e011      	b.n	800d82a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d012      	beq.n	800d834 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	3324      	adds	r3, #36	; 0x24
 800d812:	4618      	mov	r0, r3
 800d814:	f000 fcdc 	bl	800e1d0 <xTaskRemoveFromEventList>
 800d818:	4603      	mov	r3, r0
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d001      	beq.n	800d822 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d81e:	f000 fdb7 	bl	800e390 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d822:	7bfb      	ldrb	r3, [r7, #15]
 800d824:	3b01      	subs	r3, #1
 800d826:	b2db      	uxtb	r3, r3
 800d828:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d82a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	dce9      	bgt.n	800d806 <prvUnlockQueue+0x16>
 800d832:	e000      	b.n	800d836 <prvUnlockQueue+0x46>
					break;
 800d834:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	22ff      	movs	r2, #255	; 0xff
 800d83a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d83e:	f001 fa11 	bl	800ec64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d842:	f001 f9db 	bl	800ebfc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d84c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d84e:	e011      	b.n	800d874 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	691b      	ldr	r3, [r3, #16]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d012      	beq.n	800d87e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	3310      	adds	r3, #16
 800d85c:	4618      	mov	r0, r3
 800d85e:	f000 fcb7 	bl	800e1d0 <xTaskRemoveFromEventList>
 800d862:	4603      	mov	r3, r0
 800d864:	2b00      	cmp	r3, #0
 800d866:	d001      	beq.n	800d86c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d868:	f000 fd92 	bl	800e390 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d86c:	7bbb      	ldrb	r3, [r7, #14]
 800d86e:	3b01      	subs	r3, #1
 800d870:	b2db      	uxtb	r3, r3
 800d872:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d874:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	dce9      	bgt.n	800d850 <prvUnlockQueue+0x60>
 800d87c:	e000      	b.n	800d880 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d87e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	22ff      	movs	r2, #255	; 0xff
 800d884:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d888:	f001 f9ec 	bl	800ec64 <vPortExitCritical>
}
 800d88c:	bf00      	nop
 800d88e:	3710      	adds	r7, #16
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}

0800d894 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b084      	sub	sp, #16
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d89c:	f001 f9ae 	bl	800ebfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d102      	bne.n	800d8ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d8a8:	2301      	movs	r3, #1
 800d8aa:	60fb      	str	r3, [r7, #12]
 800d8ac:	e001      	b.n	800d8b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d8b2:	f001 f9d7 	bl	800ec64 <vPortExitCritical>

	return xReturn;
 800d8b6:	68fb      	ldr	r3, [r7, #12]
}
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	3710      	adds	r7, #16
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	bd80      	pop	{r7, pc}

0800d8c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b084      	sub	sp, #16
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d8c8:	f001 f998 	bl	800ebfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8d4:	429a      	cmp	r2, r3
 800d8d6:	d102      	bne.n	800d8de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d8d8:	2301      	movs	r3, #1
 800d8da:	60fb      	str	r3, [r7, #12]
 800d8dc:	e001      	b.n	800d8e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d8e2:	f001 f9bf 	bl	800ec64 <vPortExitCritical>

	return xReturn;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	3710      	adds	r7, #16
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd80      	pop	{r7, pc}

0800d8f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b08e      	sub	sp, #56	; 0x38
 800d8f4:	af04      	add	r7, sp, #16
 800d8f6:	60f8      	str	r0, [r7, #12]
 800d8f8:	60b9      	str	r1, [r7, #8]
 800d8fa:	607a      	str	r2, [r7, #4]
 800d8fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d8fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d900:	2b00      	cmp	r3, #0
 800d902:	d10c      	bne.n	800d91e <xTaskCreateStatic+0x2e>
	__asm volatile
 800d904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d908:	b672      	cpsid	i
 800d90a:	f383 8811 	msr	BASEPRI, r3
 800d90e:	f3bf 8f6f 	isb	sy
 800d912:	f3bf 8f4f 	dsb	sy
 800d916:	b662      	cpsie	i
 800d918:	623b      	str	r3, [r7, #32]
}
 800d91a:	bf00      	nop
 800d91c:	e7fe      	b.n	800d91c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800d91e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d920:	2b00      	cmp	r3, #0
 800d922:	d10c      	bne.n	800d93e <xTaskCreateStatic+0x4e>
	__asm volatile
 800d924:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d928:	b672      	cpsid	i
 800d92a:	f383 8811 	msr	BASEPRI, r3
 800d92e:	f3bf 8f6f 	isb	sy
 800d932:	f3bf 8f4f 	dsb	sy
 800d936:	b662      	cpsie	i
 800d938:	61fb      	str	r3, [r7, #28]
}
 800d93a:	bf00      	nop
 800d93c:	e7fe      	b.n	800d93c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d93e:	2358      	movs	r3, #88	; 0x58
 800d940:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d942:	693b      	ldr	r3, [r7, #16]
 800d944:	2b58      	cmp	r3, #88	; 0x58
 800d946:	d00c      	beq.n	800d962 <xTaskCreateStatic+0x72>
	__asm volatile
 800d948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d94c:	b672      	cpsid	i
 800d94e:	f383 8811 	msr	BASEPRI, r3
 800d952:	f3bf 8f6f 	isb	sy
 800d956:	f3bf 8f4f 	dsb	sy
 800d95a:	b662      	cpsie	i
 800d95c:	61bb      	str	r3, [r7, #24]
}
 800d95e:	bf00      	nop
 800d960:	e7fe      	b.n	800d960 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d962:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d966:	2b00      	cmp	r3, #0
 800d968:	d01e      	beq.n	800d9a8 <xTaskCreateStatic+0xb8>
 800d96a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d01b      	beq.n	800d9a8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d972:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d976:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d978:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d97c:	2202      	movs	r2, #2
 800d97e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d982:	2300      	movs	r3, #0
 800d984:	9303      	str	r3, [sp, #12]
 800d986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d988:	9302      	str	r3, [sp, #8]
 800d98a:	f107 0314 	add.w	r3, r7, #20
 800d98e:	9301      	str	r3, [sp, #4]
 800d990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d992:	9300      	str	r3, [sp, #0]
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	687a      	ldr	r2, [r7, #4]
 800d998:	68b9      	ldr	r1, [r7, #8]
 800d99a:	68f8      	ldr	r0, [r7, #12]
 800d99c:	f000 f850 	bl	800da40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d9a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d9a2:	f000 f8e1 	bl	800db68 <prvAddNewTaskToReadyList>
 800d9a6:	e001      	b.n	800d9ac <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d9ac:	697b      	ldr	r3, [r7, #20]
	}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	3728      	adds	r7, #40	; 0x28
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}

0800d9b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d9b6:	b580      	push	{r7, lr}
 800d9b8:	b08c      	sub	sp, #48	; 0x30
 800d9ba:	af04      	add	r7, sp, #16
 800d9bc:	60f8      	str	r0, [r7, #12]
 800d9be:	60b9      	str	r1, [r7, #8]
 800d9c0:	603b      	str	r3, [r7, #0]
 800d9c2:	4613      	mov	r3, r2
 800d9c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d9c6:	88fb      	ldrh	r3, [r7, #6]
 800d9c8:	009b      	lsls	r3, r3, #2
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f001 fa42 	bl	800ee54 <pvPortMalloc>
 800d9d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d00e      	beq.n	800d9f6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d9d8:	2058      	movs	r0, #88	; 0x58
 800d9da:	f001 fa3b 	bl	800ee54 <pvPortMalloc>
 800d9de:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d9e0:	69fb      	ldr	r3, [r7, #28]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d003      	beq.n	800d9ee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d9e6:	69fb      	ldr	r3, [r7, #28]
 800d9e8:	697a      	ldr	r2, [r7, #20]
 800d9ea:	631a      	str	r2, [r3, #48]	; 0x30
 800d9ec:	e005      	b.n	800d9fa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d9ee:	6978      	ldr	r0, [r7, #20]
 800d9f0:	f001 fb00 	bl	800eff4 <vPortFree>
 800d9f4:	e001      	b.n	800d9fa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d9fa:	69fb      	ldr	r3, [r7, #28]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d017      	beq.n	800da30 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800da00:	69fb      	ldr	r3, [r7, #28]
 800da02:	2200      	movs	r2, #0
 800da04:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800da08:	88fa      	ldrh	r2, [r7, #6]
 800da0a:	2300      	movs	r3, #0
 800da0c:	9303      	str	r3, [sp, #12]
 800da0e:	69fb      	ldr	r3, [r7, #28]
 800da10:	9302      	str	r3, [sp, #8]
 800da12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da14:	9301      	str	r3, [sp, #4]
 800da16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da18:	9300      	str	r3, [sp, #0]
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	68b9      	ldr	r1, [r7, #8]
 800da1e:	68f8      	ldr	r0, [r7, #12]
 800da20:	f000 f80e 	bl	800da40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800da24:	69f8      	ldr	r0, [r7, #28]
 800da26:	f000 f89f 	bl	800db68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800da2a:	2301      	movs	r3, #1
 800da2c:	61bb      	str	r3, [r7, #24]
 800da2e:	e002      	b.n	800da36 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800da30:	f04f 33ff 	mov.w	r3, #4294967295
 800da34:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800da36:	69bb      	ldr	r3, [r7, #24]
	}
 800da38:	4618      	mov	r0, r3
 800da3a:	3720      	adds	r7, #32
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}

0800da40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b088      	sub	sp, #32
 800da44:	af00      	add	r7, sp, #0
 800da46:	60f8      	str	r0, [r7, #12]
 800da48:	60b9      	str	r1, [r7, #8]
 800da4a:	607a      	str	r2, [r7, #4]
 800da4c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800da4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da50:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	009b      	lsls	r3, r3, #2
 800da56:	461a      	mov	r2, r3
 800da58:	21a5      	movs	r1, #165	; 0xa5
 800da5a:	f018 fd5c 	bl	8026516 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800da5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800da62:	6879      	ldr	r1, [r7, #4]
 800da64:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800da68:	440b      	add	r3, r1
 800da6a:	009b      	lsls	r3, r3, #2
 800da6c:	4413      	add	r3, r2
 800da6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800da70:	69bb      	ldr	r3, [r7, #24]
 800da72:	f023 0307 	bic.w	r3, r3, #7
 800da76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800da78:	69bb      	ldr	r3, [r7, #24]
 800da7a:	f003 0307 	and.w	r3, r3, #7
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d00c      	beq.n	800da9c <prvInitialiseNewTask+0x5c>
	__asm volatile
 800da82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da86:	b672      	cpsid	i
 800da88:	f383 8811 	msr	BASEPRI, r3
 800da8c:	f3bf 8f6f 	isb	sy
 800da90:	f3bf 8f4f 	dsb	sy
 800da94:	b662      	cpsie	i
 800da96:	617b      	str	r3, [r7, #20]
}
 800da98:	bf00      	nop
 800da9a:	e7fe      	b.n	800da9a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d01f      	beq.n	800dae2 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800daa2:	2300      	movs	r3, #0
 800daa4:	61fb      	str	r3, [r7, #28]
 800daa6:	e012      	b.n	800dace <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800daa8:	68ba      	ldr	r2, [r7, #8]
 800daaa:	69fb      	ldr	r3, [r7, #28]
 800daac:	4413      	add	r3, r2
 800daae:	7819      	ldrb	r1, [r3, #0]
 800dab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dab2:	69fb      	ldr	r3, [r7, #28]
 800dab4:	4413      	add	r3, r2
 800dab6:	3334      	adds	r3, #52	; 0x34
 800dab8:	460a      	mov	r2, r1
 800daba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dabc:	68ba      	ldr	r2, [r7, #8]
 800dabe:	69fb      	ldr	r3, [r7, #28]
 800dac0:	4413      	add	r3, r2
 800dac2:	781b      	ldrb	r3, [r3, #0]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d006      	beq.n	800dad6 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dac8:	69fb      	ldr	r3, [r7, #28]
 800daca:	3301      	adds	r3, #1
 800dacc:	61fb      	str	r3, [r7, #28]
 800dace:	69fb      	ldr	r3, [r7, #28]
 800dad0:	2b0f      	cmp	r3, #15
 800dad2:	d9e9      	bls.n	800daa8 <prvInitialiseNewTask+0x68>
 800dad4:	e000      	b.n	800dad8 <prvInitialiseNewTask+0x98>
			{
				break;
 800dad6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dada:	2200      	movs	r2, #0
 800dadc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dae0:	e003      	b.n	800daea <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dae4:	2200      	movs	r2, #0
 800dae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800daea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daec:	2b06      	cmp	r3, #6
 800daee:	d901      	bls.n	800daf4 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800daf0:	2306      	movs	r3, #6
 800daf2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800daf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800daf8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dafc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dafe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800db00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db02:	2200      	movs	r2, #0
 800db04:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800db06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db08:	3304      	adds	r3, #4
 800db0a:	4618      	mov	r0, r3
 800db0c:	f7fe ff2a 	bl	800c964 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800db10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db12:	3318      	adds	r3, #24
 800db14:	4618      	mov	r0, r3
 800db16:	f7fe ff25 	bl	800c964 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800db1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db1e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db22:	f1c3 0207 	rsb	r2, r3, #7
 800db26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db28:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800db2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db2e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800db30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db32:	2200      	movs	r2, #0
 800db34:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800db36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db38:	2200      	movs	r2, #0
 800db3a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800db3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db3e:	2200      	movs	r2, #0
 800db40:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800db44:	683a      	ldr	r2, [r7, #0]
 800db46:	68f9      	ldr	r1, [r7, #12]
 800db48:	69b8      	ldr	r0, [r7, #24]
 800db4a:	f000 ff47 	bl	800e9dc <pxPortInitialiseStack>
 800db4e:	4602      	mov	r2, r0
 800db50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db52:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800db54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db56:	2b00      	cmp	r3, #0
 800db58:	d002      	beq.n	800db60 <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800db5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db5e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800db60:	bf00      	nop
 800db62:	3720      	adds	r7, #32
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}

0800db68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b082      	sub	sp, #8
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800db70:	f001 f844 	bl	800ebfc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800db74:	4b2a      	ldr	r3, [pc, #168]	; (800dc20 <prvAddNewTaskToReadyList+0xb8>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	3301      	adds	r3, #1
 800db7a:	4a29      	ldr	r2, [pc, #164]	; (800dc20 <prvAddNewTaskToReadyList+0xb8>)
 800db7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800db7e:	4b29      	ldr	r3, [pc, #164]	; (800dc24 <prvAddNewTaskToReadyList+0xbc>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d109      	bne.n	800db9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800db86:	4a27      	ldr	r2, [pc, #156]	; (800dc24 <prvAddNewTaskToReadyList+0xbc>)
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800db8c:	4b24      	ldr	r3, [pc, #144]	; (800dc20 <prvAddNewTaskToReadyList+0xb8>)
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	2b01      	cmp	r3, #1
 800db92:	d110      	bne.n	800dbb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800db94:	f000 fc22 	bl	800e3dc <prvInitialiseTaskLists>
 800db98:	e00d      	b.n	800dbb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800db9a:	4b23      	ldr	r3, [pc, #140]	; (800dc28 <prvAddNewTaskToReadyList+0xc0>)
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d109      	bne.n	800dbb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dba2:	4b20      	ldr	r3, [pc, #128]	; (800dc24 <prvAddNewTaskToReadyList+0xbc>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbac:	429a      	cmp	r2, r3
 800dbae:	d802      	bhi.n	800dbb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dbb0:	4a1c      	ldr	r2, [pc, #112]	; (800dc24 <prvAddNewTaskToReadyList+0xbc>)
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dbb6:	4b1d      	ldr	r3, [pc, #116]	; (800dc2c <prvAddNewTaskToReadyList+0xc4>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	3301      	adds	r3, #1
 800dbbc:	4a1b      	ldr	r2, [pc, #108]	; (800dc2c <prvAddNewTaskToReadyList+0xc4>)
 800dbbe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbc4:	2201      	movs	r2, #1
 800dbc6:	409a      	lsls	r2, r3
 800dbc8:	4b19      	ldr	r3, [pc, #100]	; (800dc30 <prvAddNewTaskToReadyList+0xc8>)
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	4313      	orrs	r3, r2
 800dbce:	4a18      	ldr	r2, [pc, #96]	; (800dc30 <prvAddNewTaskToReadyList+0xc8>)
 800dbd0:	6013      	str	r3, [r2, #0]
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbd6:	4613      	mov	r3, r2
 800dbd8:	009b      	lsls	r3, r3, #2
 800dbda:	4413      	add	r3, r2
 800dbdc:	009b      	lsls	r3, r3, #2
 800dbde:	4a15      	ldr	r2, [pc, #84]	; (800dc34 <prvAddNewTaskToReadyList+0xcc>)
 800dbe0:	441a      	add	r2, r3
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	3304      	adds	r3, #4
 800dbe6:	4619      	mov	r1, r3
 800dbe8:	4610      	mov	r0, r2
 800dbea:	f7fe fec8 	bl	800c97e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dbee:	f001 f839 	bl	800ec64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dbf2:	4b0d      	ldr	r3, [pc, #52]	; (800dc28 <prvAddNewTaskToReadyList+0xc0>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d00e      	beq.n	800dc18 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dbfa:	4b0a      	ldr	r3, [pc, #40]	; (800dc24 <prvAddNewTaskToReadyList+0xbc>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc04:	429a      	cmp	r2, r3
 800dc06:	d207      	bcs.n	800dc18 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dc08:	4b0b      	ldr	r3, [pc, #44]	; (800dc38 <prvAddNewTaskToReadyList+0xd0>)
 800dc0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc0e:	601a      	str	r2, [r3, #0]
 800dc10:	f3bf 8f4f 	dsb	sy
 800dc14:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dc18:	bf00      	nop
 800dc1a:	3708      	adds	r7, #8
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bd80      	pop	{r7, pc}
 800dc20:	20000c94 	.word	0x20000c94
 800dc24:	20000b94 	.word	0x20000b94
 800dc28:	20000ca0 	.word	0x20000ca0
 800dc2c:	20000cb0 	.word	0x20000cb0
 800dc30:	20000c9c 	.word	0x20000c9c
 800dc34:	20000b98 	.word	0x20000b98
 800dc38:	e000ed04 	.word	0xe000ed04

0800dc3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b084      	sub	sp, #16
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dc44:	2300      	movs	r3, #0
 800dc46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d019      	beq.n	800dc82 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dc4e:	4b14      	ldr	r3, [pc, #80]	; (800dca0 <vTaskDelay+0x64>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d00c      	beq.n	800dc70 <vTaskDelay+0x34>
	__asm volatile
 800dc56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc5a:	b672      	cpsid	i
 800dc5c:	f383 8811 	msr	BASEPRI, r3
 800dc60:	f3bf 8f6f 	isb	sy
 800dc64:	f3bf 8f4f 	dsb	sy
 800dc68:	b662      	cpsie	i
 800dc6a:	60bb      	str	r3, [r7, #8]
}
 800dc6c:	bf00      	nop
 800dc6e:	e7fe      	b.n	800dc6e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800dc70:	f000 f87e 	bl	800dd70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dc74:	2100      	movs	r1, #0
 800dc76:	6878      	ldr	r0, [r7, #4]
 800dc78:	f000 fe4a 	bl	800e910 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dc7c:	f000 f886 	bl	800dd8c <xTaskResumeAll>
 800dc80:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d107      	bne.n	800dc98 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800dc88:	4b06      	ldr	r3, [pc, #24]	; (800dca4 <vTaskDelay+0x68>)
 800dc8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc8e:	601a      	str	r2, [r3, #0]
 800dc90:	f3bf 8f4f 	dsb	sy
 800dc94:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dc98:	bf00      	nop
 800dc9a:	3710      	adds	r7, #16
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}
 800dca0:	20000cbc 	.word	0x20000cbc
 800dca4:	e000ed04 	.word	0xe000ed04

0800dca8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b08a      	sub	sp, #40	; 0x28
 800dcac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dcae:	2300      	movs	r3, #0
 800dcb0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dcb6:	463a      	mov	r2, r7
 800dcb8:	1d39      	adds	r1, r7, #4
 800dcba:	f107 0308 	add.w	r3, r7, #8
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f7f3 f874 	bl	8000dac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dcc4:	6839      	ldr	r1, [r7, #0]
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	68ba      	ldr	r2, [r7, #8]
 800dcca:	9202      	str	r2, [sp, #8]
 800dccc:	9301      	str	r3, [sp, #4]
 800dcce:	2300      	movs	r3, #0
 800dcd0:	9300      	str	r3, [sp, #0]
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	460a      	mov	r2, r1
 800dcd6:	4920      	ldr	r1, [pc, #128]	; (800dd58 <vTaskStartScheduler+0xb0>)
 800dcd8:	4820      	ldr	r0, [pc, #128]	; (800dd5c <vTaskStartScheduler+0xb4>)
 800dcda:	f7ff fe09 	bl	800d8f0 <xTaskCreateStatic>
 800dcde:	4603      	mov	r3, r0
 800dce0:	4a1f      	ldr	r2, [pc, #124]	; (800dd60 <vTaskStartScheduler+0xb8>)
 800dce2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dce4:	4b1e      	ldr	r3, [pc, #120]	; (800dd60 <vTaskStartScheduler+0xb8>)
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d002      	beq.n	800dcf2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dcec:	2301      	movs	r3, #1
 800dcee:	617b      	str	r3, [r7, #20]
 800dcf0:	e001      	b.n	800dcf6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	2b01      	cmp	r3, #1
 800dcfa:	d118      	bne.n	800dd2e <vTaskStartScheduler+0x86>
	__asm volatile
 800dcfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd00:	b672      	cpsid	i
 800dd02:	f383 8811 	msr	BASEPRI, r3
 800dd06:	f3bf 8f6f 	isb	sy
 800dd0a:	f3bf 8f4f 	dsb	sy
 800dd0e:	b662      	cpsie	i
 800dd10:	613b      	str	r3, [r7, #16]
}
 800dd12:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dd14:	4b13      	ldr	r3, [pc, #76]	; (800dd64 <vTaskStartScheduler+0xbc>)
 800dd16:	f04f 32ff 	mov.w	r2, #4294967295
 800dd1a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dd1c:	4b12      	ldr	r3, [pc, #72]	; (800dd68 <vTaskStartScheduler+0xc0>)
 800dd1e:	2201      	movs	r2, #1
 800dd20:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dd22:	4b12      	ldr	r3, [pc, #72]	; (800dd6c <vTaskStartScheduler+0xc4>)
 800dd24:	2200      	movs	r2, #0
 800dd26:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dd28:	f000 feea 	bl	800eb00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dd2c:	e010      	b.n	800dd50 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dd2e:	697b      	ldr	r3, [r7, #20]
 800dd30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd34:	d10c      	bne.n	800dd50 <vTaskStartScheduler+0xa8>
	__asm volatile
 800dd36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd3a:	b672      	cpsid	i
 800dd3c:	f383 8811 	msr	BASEPRI, r3
 800dd40:	f3bf 8f6f 	isb	sy
 800dd44:	f3bf 8f4f 	dsb	sy
 800dd48:	b662      	cpsie	i
 800dd4a:	60fb      	str	r3, [r7, #12]
}
 800dd4c:	bf00      	nop
 800dd4e:	e7fe      	b.n	800dd4e <vTaskStartScheduler+0xa6>
}
 800dd50:	bf00      	nop
 800dd52:	3718      	adds	r7, #24
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}
 800dd58:	080271f8 	.word	0x080271f8
 800dd5c:	0800e3a9 	.word	0x0800e3a9
 800dd60:	20000cb8 	.word	0x20000cb8
 800dd64:	20000cb4 	.word	0x20000cb4
 800dd68:	20000ca0 	.word	0x20000ca0
 800dd6c:	20000c98 	.word	0x20000c98

0800dd70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dd70:	b480      	push	{r7}
 800dd72:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800dd74:	4b04      	ldr	r3, [pc, #16]	; (800dd88 <vTaskSuspendAll+0x18>)
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	3301      	adds	r3, #1
 800dd7a:	4a03      	ldr	r2, [pc, #12]	; (800dd88 <vTaskSuspendAll+0x18>)
 800dd7c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800dd7e:	bf00      	nop
 800dd80:	46bd      	mov	sp, r7
 800dd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd86:	4770      	bx	lr
 800dd88:	20000cbc 	.word	0x20000cbc

0800dd8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b084      	sub	sp, #16
 800dd90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dd92:	2300      	movs	r3, #0
 800dd94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dd96:	2300      	movs	r3, #0
 800dd98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dd9a:	4b42      	ldr	r3, [pc, #264]	; (800dea4 <xTaskResumeAll+0x118>)
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d10c      	bne.n	800ddbc <xTaskResumeAll+0x30>
	__asm volatile
 800dda2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dda6:	b672      	cpsid	i
 800dda8:	f383 8811 	msr	BASEPRI, r3
 800ddac:	f3bf 8f6f 	isb	sy
 800ddb0:	f3bf 8f4f 	dsb	sy
 800ddb4:	b662      	cpsie	i
 800ddb6:	603b      	str	r3, [r7, #0]
}
 800ddb8:	bf00      	nop
 800ddba:	e7fe      	b.n	800ddba <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ddbc:	f000 ff1e 	bl	800ebfc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ddc0:	4b38      	ldr	r3, [pc, #224]	; (800dea4 <xTaskResumeAll+0x118>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	3b01      	subs	r3, #1
 800ddc6:	4a37      	ldr	r2, [pc, #220]	; (800dea4 <xTaskResumeAll+0x118>)
 800ddc8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ddca:	4b36      	ldr	r3, [pc, #216]	; (800dea4 <xTaskResumeAll+0x118>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d161      	bne.n	800de96 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ddd2:	4b35      	ldr	r3, [pc, #212]	; (800dea8 <xTaskResumeAll+0x11c>)
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d05d      	beq.n	800de96 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ddda:	e02e      	b.n	800de3a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dddc:	4b33      	ldr	r3, [pc, #204]	; (800deac <xTaskResumeAll+0x120>)
 800ddde:	68db      	ldr	r3, [r3, #12]
 800dde0:	68db      	ldr	r3, [r3, #12]
 800dde2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	3318      	adds	r3, #24
 800dde8:	4618      	mov	r0, r3
 800ddea:	f7fe fe25 	bl	800ca38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	3304      	adds	r3, #4
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f7fe fe20 	bl	800ca38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddfc:	2201      	movs	r2, #1
 800ddfe:	409a      	lsls	r2, r3
 800de00:	4b2b      	ldr	r3, [pc, #172]	; (800deb0 <xTaskResumeAll+0x124>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	4313      	orrs	r3, r2
 800de06:	4a2a      	ldr	r2, [pc, #168]	; (800deb0 <xTaskResumeAll+0x124>)
 800de08:	6013      	str	r3, [r2, #0]
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de0e:	4613      	mov	r3, r2
 800de10:	009b      	lsls	r3, r3, #2
 800de12:	4413      	add	r3, r2
 800de14:	009b      	lsls	r3, r3, #2
 800de16:	4a27      	ldr	r2, [pc, #156]	; (800deb4 <xTaskResumeAll+0x128>)
 800de18:	441a      	add	r2, r3
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	3304      	adds	r3, #4
 800de1e:	4619      	mov	r1, r3
 800de20:	4610      	mov	r0, r2
 800de22:	f7fe fdac 	bl	800c97e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de2a:	4b23      	ldr	r3, [pc, #140]	; (800deb8 <xTaskResumeAll+0x12c>)
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de30:	429a      	cmp	r2, r3
 800de32:	d302      	bcc.n	800de3a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800de34:	4b21      	ldr	r3, [pc, #132]	; (800debc <xTaskResumeAll+0x130>)
 800de36:	2201      	movs	r2, #1
 800de38:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800de3a:	4b1c      	ldr	r3, [pc, #112]	; (800deac <xTaskResumeAll+0x120>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d1cc      	bne.n	800dddc <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d001      	beq.n	800de4c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800de48:	f000 fb68 	bl	800e51c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800de4c:	4b1c      	ldr	r3, [pc, #112]	; (800dec0 <xTaskResumeAll+0x134>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d010      	beq.n	800de7a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800de58:	f000 f858 	bl	800df0c <xTaskIncrementTick>
 800de5c:	4603      	mov	r3, r0
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d002      	beq.n	800de68 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800de62:	4b16      	ldr	r3, [pc, #88]	; (800debc <xTaskResumeAll+0x130>)
 800de64:	2201      	movs	r2, #1
 800de66:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	3b01      	subs	r3, #1
 800de6c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d1f1      	bne.n	800de58 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800de74:	4b12      	ldr	r3, [pc, #72]	; (800dec0 <xTaskResumeAll+0x134>)
 800de76:	2200      	movs	r2, #0
 800de78:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800de7a:	4b10      	ldr	r3, [pc, #64]	; (800debc <xTaskResumeAll+0x130>)
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d009      	beq.n	800de96 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800de82:	2301      	movs	r3, #1
 800de84:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800de86:	4b0f      	ldr	r3, [pc, #60]	; (800dec4 <xTaskResumeAll+0x138>)
 800de88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de8c:	601a      	str	r2, [r3, #0]
 800de8e:	f3bf 8f4f 	dsb	sy
 800de92:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800de96:	f000 fee5 	bl	800ec64 <vPortExitCritical>

	return xAlreadyYielded;
 800de9a:	68bb      	ldr	r3, [r7, #8]
}
 800de9c:	4618      	mov	r0, r3
 800de9e:	3710      	adds	r7, #16
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}
 800dea4:	20000cbc 	.word	0x20000cbc
 800dea8:	20000c94 	.word	0x20000c94
 800deac:	20000c54 	.word	0x20000c54
 800deb0:	20000c9c 	.word	0x20000c9c
 800deb4:	20000b98 	.word	0x20000b98
 800deb8:	20000b94 	.word	0x20000b94
 800debc:	20000ca8 	.word	0x20000ca8
 800dec0:	20000ca4 	.word	0x20000ca4
 800dec4:	e000ed04 	.word	0xe000ed04

0800dec8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dec8:	b480      	push	{r7}
 800deca:	b083      	sub	sp, #12
 800decc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dece:	4b05      	ldr	r3, [pc, #20]	; (800dee4 <xTaskGetTickCount+0x1c>)
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ded4:	687b      	ldr	r3, [r7, #4]
}
 800ded6:	4618      	mov	r0, r3
 800ded8:	370c      	adds	r7, #12
 800deda:	46bd      	mov	sp, r7
 800dedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee0:	4770      	bx	lr
 800dee2:	bf00      	nop
 800dee4:	20000c98 	.word	0x20000c98

0800dee8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b082      	sub	sp, #8
 800deec:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800deee:	f000 ff6d 	bl	800edcc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800def2:	2300      	movs	r3, #0
 800def4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800def6:	4b04      	ldr	r3, [pc, #16]	; (800df08 <xTaskGetTickCountFromISR+0x20>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800defc:	683b      	ldr	r3, [r7, #0]
}
 800defe:	4618      	mov	r0, r3
 800df00:	3708      	adds	r7, #8
 800df02:	46bd      	mov	sp, r7
 800df04:	bd80      	pop	{r7, pc}
 800df06:	bf00      	nop
 800df08:	20000c98 	.word	0x20000c98

0800df0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b086      	sub	sp, #24
 800df10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800df12:	2300      	movs	r3, #0
 800df14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df16:	4b4f      	ldr	r3, [pc, #316]	; (800e054 <xTaskIncrementTick+0x148>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	f040 808a 	bne.w	800e034 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800df20:	4b4d      	ldr	r3, [pc, #308]	; (800e058 <xTaskIncrementTick+0x14c>)
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	3301      	adds	r3, #1
 800df26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800df28:	4a4b      	ldr	r2, [pc, #300]	; (800e058 <xTaskIncrementTick+0x14c>)
 800df2a:	693b      	ldr	r3, [r7, #16]
 800df2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800df2e:	693b      	ldr	r3, [r7, #16]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d122      	bne.n	800df7a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800df34:	4b49      	ldr	r3, [pc, #292]	; (800e05c <xTaskIncrementTick+0x150>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d00c      	beq.n	800df58 <xTaskIncrementTick+0x4c>
	__asm volatile
 800df3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df42:	b672      	cpsid	i
 800df44:	f383 8811 	msr	BASEPRI, r3
 800df48:	f3bf 8f6f 	isb	sy
 800df4c:	f3bf 8f4f 	dsb	sy
 800df50:	b662      	cpsie	i
 800df52:	603b      	str	r3, [r7, #0]
}
 800df54:	bf00      	nop
 800df56:	e7fe      	b.n	800df56 <xTaskIncrementTick+0x4a>
 800df58:	4b40      	ldr	r3, [pc, #256]	; (800e05c <xTaskIncrementTick+0x150>)
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	60fb      	str	r3, [r7, #12]
 800df5e:	4b40      	ldr	r3, [pc, #256]	; (800e060 <xTaskIncrementTick+0x154>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	4a3e      	ldr	r2, [pc, #248]	; (800e05c <xTaskIncrementTick+0x150>)
 800df64:	6013      	str	r3, [r2, #0]
 800df66:	4a3e      	ldr	r2, [pc, #248]	; (800e060 <xTaskIncrementTick+0x154>)
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	6013      	str	r3, [r2, #0]
 800df6c:	4b3d      	ldr	r3, [pc, #244]	; (800e064 <xTaskIncrementTick+0x158>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	3301      	adds	r3, #1
 800df72:	4a3c      	ldr	r2, [pc, #240]	; (800e064 <xTaskIncrementTick+0x158>)
 800df74:	6013      	str	r3, [r2, #0]
 800df76:	f000 fad1 	bl	800e51c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800df7a:	4b3b      	ldr	r3, [pc, #236]	; (800e068 <xTaskIncrementTick+0x15c>)
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	693a      	ldr	r2, [r7, #16]
 800df80:	429a      	cmp	r2, r3
 800df82:	d348      	bcc.n	800e016 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df84:	4b35      	ldr	r3, [pc, #212]	; (800e05c <xTaskIncrementTick+0x150>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d104      	bne.n	800df98 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df8e:	4b36      	ldr	r3, [pc, #216]	; (800e068 <xTaskIncrementTick+0x15c>)
 800df90:	f04f 32ff 	mov.w	r2, #4294967295
 800df94:	601a      	str	r2, [r3, #0]
					break;
 800df96:	e03e      	b.n	800e016 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df98:	4b30      	ldr	r3, [pc, #192]	; (800e05c <xTaskIncrementTick+0x150>)
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	68db      	ldr	r3, [r3, #12]
 800df9e:	68db      	ldr	r3, [r3, #12]
 800dfa0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dfa2:	68bb      	ldr	r3, [r7, #8]
 800dfa4:	685b      	ldr	r3, [r3, #4]
 800dfa6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dfa8:	693a      	ldr	r2, [r7, #16]
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	429a      	cmp	r2, r3
 800dfae:	d203      	bcs.n	800dfb8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dfb0:	4a2d      	ldr	r2, [pc, #180]	; (800e068 <xTaskIncrementTick+0x15c>)
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dfb6:	e02e      	b.n	800e016 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dfb8:	68bb      	ldr	r3, [r7, #8]
 800dfba:	3304      	adds	r3, #4
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	f7fe fd3b 	bl	800ca38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dfc2:	68bb      	ldr	r3, [r7, #8]
 800dfc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d004      	beq.n	800dfd4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	3318      	adds	r3, #24
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f7fe fd32 	bl	800ca38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfd8:	2201      	movs	r2, #1
 800dfda:	409a      	lsls	r2, r3
 800dfdc:	4b23      	ldr	r3, [pc, #140]	; (800e06c <xTaskIncrementTick+0x160>)
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	4313      	orrs	r3, r2
 800dfe2:	4a22      	ldr	r2, [pc, #136]	; (800e06c <xTaskIncrementTick+0x160>)
 800dfe4:	6013      	str	r3, [r2, #0]
 800dfe6:	68bb      	ldr	r3, [r7, #8]
 800dfe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfea:	4613      	mov	r3, r2
 800dfec:	009b      	lsls	r3, r3, #2
 800dfee:	4413      	add	r3, r2
 800dff0:	009b      	lsls	r3, r3, #2
 800dff2:	4a1f      	ldr	r2, [pc, #124]	; (800e070 <xTaskIncrementTick+0x164>)
 800dff4:	441a      	add	r2, r3
 800dff6:	68bb      	ldr	r3, [r7, #8]
 800dff8:	3304      	adds	r3, #4
 800dffa:	4619      	mov	r1, r3
 800dffc:	4610      	mov	r0, r2
 800dffe:	f7fe fcbe 	bl	800c97e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e002:	68bb      	ldr	r3, [r7, #8]
 800e004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e006:	4b1b      	ldr	r3, [pc, #108]	; (800e074 <xTaskIncrementTick+0x168>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e00c:	429a      	cmp	r2, r3
 800e00e:	d3b9      	bcc.n	800df84 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800e010:	2301      	movs	r3, #1
 800e012:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e014:	e7b6      	b.n	800df84 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e016:	4b17      	ldr	r3, [pc, #92]	; (800e074 <xTaskIncrementTick+0x168>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e01c:	4914      	ldr	r1, [pc, #80]	; (800e070 <xTaskIncrementTick+0x164>)
 800e01e:	4613      	mov	r3, r2
 800e020:	009b      	lsls	r3, r3, #2
 800e022:	4413      	add	r3, r2
 800e024:	009b      	lsls	r3, r3, #2
 800e026:	440b      	add	r3, r1
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	2b01      	cmp	r3, #1
 800e02c:	d907      	bls.n	800e03e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800e02e:	2301      	movs	r3, #1
 800e030:	617b      	str	r3, [r7, #20]
 800e032:	e004      	b.n	800e03e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e034:	4b10      	ldr	r3, [pc, #64]	; (800e078 <xTaskIncrementTick+0x16c>)
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	3301      	adds	r3, #1
 800e03a:	4a0f      	ldr	r2, [pc, #60]	; (800e078 <xTaskIncrementTick+0x16c>)
 800e03c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e03e:	4b0f      	ldr	r3, [pc, #60]	; (800e07c <xTaskIncrementTick+0x170>)
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d001      	beq.n	800e04a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800e046:	2301      	movs	r3, #1
 800e048:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e04a:	697b      	ldr	r3, [r7, #20]
}
 800e04c:	4618      	mov	r0, r3
 800e04e:	3718      	adds	r7, #24
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}
 800e054:	20000cbc 	.word	0x20000cbc
 800e058:	20000c98 	.word	0x20000c98
 800e05c:	20000c4c 	.word	0x20000c4c
 800e060:	20000c50 	.word	0x20000c50
 800e064:	20000cac 	.word	0x20000cac
 800e068:	20000cb4 	.word	0x20000cb4
 800e06c:	20000c9c 	.word	0x20000c9c
 800e070:	20000b98 	.word	0x20000b98
 800e074:	20000b94 	.word	0x20000b94
 800e078:	20000ca4 	.word	0x20000ca4
 800e07c:	20000ca8 	.word	0x20000ca8

0800e080 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b088      	sub	sp, #32
 800e084:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e086:	4b3a      	ldr	r3, [pc, #232]	; (800e170 <vTaskSwitchContext+0xf0>)
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d003      	beq.n	800e096 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e08e:	4b39      	ldr	r3, [pc, #228]	; (800e174 <vTaskSwitchContext+0xf4>)
 800e090:	2201      	movs	r2, #1
 800e092:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e094:	e068      	b.n	800e168 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 800e096:	4b37      	ldr	r3, [pc, #220]	; (800e174 <vTaskSwitchContext+0xf4>)
 800e098:	2200      	movs	r2, #0
 800e09a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800e09c:	4b36      	ldr	r3, [pc, #216]	; (800e178 <vTaskSwitchContext+0xf8>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0a2:	61fb      	str	r3, [r7, #28]
 800e0a4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800e0a8:	61bb      	str	r3, [r7, #24]
 800e0aa:	69fb      	ldr	r3, [r7, #28]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	69ba      	ldr	r2, [r7, #24]
 800e0b0:	429a      	cmp	r2, r3
 800e0b2:	d111      	bne.n	800e0d8 <vTaskSwitchContext+0x58>
 800e0b4:	69fb      	ldr	r3, [r7, #28]
 800e0b6:	3304      	adds	r3, #4
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	69ba      	ldr	r2, [r7, #24]
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	d10b      	bne.n	800e0d8 <vTaskSwitchContext+0x58>
 800e0c0:	69fb      	ldr	r3, [r7, #28]
 800e0c2:	3308      	adds	r3, #8
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	69ba      	ldr	r2, [r7, #24]
 800e0c8:	429a      	cmp	r2, r3
 800e0ca:	d105      	bne.n	800e0d8 <vTaskSwitchContext+0x58>
 800e0cc:	69fb      	ldr	r3, [r7, #28]
 800e0ce:	330c      	adds	r3, #12
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	69ba      	ldr	r2, [r7, #24]
 800e0d4:	429a      	cmp	r2, r3
 800e0d6:	d008      	beq.n	800e0ea <vTaskSwitchContext+0x6a>
 800e0d8:	4b27      	ldr	r3, [pc, #156]	; (800e178 <vTaskSwitchContext+0xf8>)
 800e0da:	681a      	ldr	r2, [r3, #0]
 800e0dc:	4b26      	ldr	r3, [pc, #152]	; (800e178 <vTaskSwitchContext+0xf8>)
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	3334      	adds	r3, #52	; 0x34
 800e0e2:	4619      	mov	r1, r3
 800e0e4:	4610      	mov	r0, r2
 800e0e6:	f7f2 fe4e 	bl	8000d86 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0ea:	4b24      	ldr	r3, [pc, #144]	; (800e17c <vTaskSwitchContext+0xfc>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	fab3 f383 	clz	r3, r3
 800e0f6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e0f8:	7afb      	ldrb	r3, [r7, #11]
 800e0fa:	f1c3 031f 	rsb	r3, r3, #31
 800e0fe:	617b      	str	r3, [r7, #20]
 800e100:	491f      	ldr	r1, [pc, #124]	; (800e180 <vTaskSwitchContext+0x100>)
 800e102:	697a      	ldr	r2, [r7, #20]
 800e104:	4613      	mov	r3, r2
 800e106:	009b      	lsls	r3, r3, #2
 800e108:	4413      	add	r3, r2
 800e10a:	009b      	lsls	r3, r3, #2
 800e10c:	440b      	add	r3, r1
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d10c      	bne.n	800e12e <vTaskSwitchContext+0xae>
	__asm volatile
 800e114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e118:	b672      	cpsid	i
 800e11a:	f383 8811 	msr	BASEPRI, r3
 800e11e:	f3bf 8f6f 	isb	sy
 800e122:	f3bf 8f4f 	dsb	sy
 800e126:	b662      	cpsie	i
 800e128:	607b      	str	r3, [r7, #4]
}
 800e12a:	bf00      	nop
 800e12c:	e7fe      	b.n	800e12c <vTaskSwitchContext+0xac>
 800e12e:	697a      	ldr	r2, [r7, #20]
 800e130:	4613      	mov	r3, r2
 800e132:	009b      	lsls	r3, r3, #2
 800e134:	4413      	add	r3, r2
 800e136:	009b      	lsls	r3, r3, #2
 800e138:	4a11      	ldr	r2, [pc, #68]	; (800e180 <vTaskSwitchContext+0x100>)
 800e13a:	4413      	add	r3, r2
 800e13c:	613b      	str	r3, [r7, #16]
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	685b      	ldr	r3, [r3, #4]
 800e142:	685a      	ldr	r2, [r3, #4]
 800e144:	693b      	ldr	r3, [r7, #16]
 800e146:	605a      	str	r2, [r3, #4]
 800e148:	693b      	ldr	r3, [r7, #16]
 800e14a:	685a      	ldr	r2, [r3, #4]
 800e14c:	693b      	ldr	r3, [r7, #16]
 800e14e:	3308      	adds	r3, #8
 800e150:	429a      	cmp	r2, r3
 800e152:	d104      	bne.n	800e15e <vTaskSwitchContext+0xde>
 800e154:	693b      	ldr	r3, [r7, #16]
 800e156:	685b      	ldr	r3, [r3, #4]
 800e158:	685a      	ldr	r2, [r3, #4]
 800e15a:	693b      	ldr	r3, [r7, #16]
 800e15c:	605a      	str	r2, [r3, #4]
 800e15e:	693b      	ldr	r3, [r7, #16]
 800e160:	685b      	ldr	r3, [r3, #4]
 800e162:	68db      	ldr	r3, [r3, #12]
 800e164:	4a04      	ldr	r2, [pc, #16]	; (800e178 <vTaskSwitchContext+0xf8>)
 800e166:	6013      	str	r3, [r2, #0]
}
 800e168:	bf00      	nop
 800e16a:	3720      	adds	r7, #32
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bd80      	pop	{r7, pc}
 800e170:	20000cbc 	.word	0x20000cbc
 800e174:	20000ca8 	.word	0x20000ca8
 800e178:	20000b94 	.word	0x20000b94
 800e17c:	20000c9c 	.word	0x20000c9c
 800e180:	20000b98 	.word	0x20000b98

0800e184 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b084      	sub	sp, #16
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
 800e18c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d10c      	bne.n	800e1ae <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800e194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e198:	b672      	cpsid	i
 800e19a:	f383 8811 	msr	BASEPRI, r3
 800e19e:	f3bf 8f6f 	isb	sy
 800e1a2:	f3bf 8f4f 	dsb	sy
 800e1a6:	b662      	cpsie	i
 800e1a8:	60fb      	str	r3, [r7, #12]
}
 800e1aa:	bf00      	nop
 800e1ac:	e7fe      	b.n	800e1ac <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e1ae:	4b07      	ldr	r3, [pc, #28]	; (800e1cc <vTaskPlaceOnEventList+0x48>)
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	3318      	adds	r3, #24
 800e1b4:	4619      	mov	r1, r3
 800e1b6:	6878      	ldr	r0, [r7, #4]
 800e1b8:	f7fe fc05 	bl	800c9c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e1bc:	2101      	movs	r1, #1
 800e1be:	6838      	ldr	r0, [r7, #0]
 800e1c0:	f000 fba6 	bl	800e910 <prvAddCurrentTaskToDelayedList>
}
 800e1c4:	bf00      	nop
 800e1c6:	3710      	adds	r7, #16
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd80      	pop	{r7, pc}
 800e1cc:	20000b94 	.word	0x20000b94

0800e1d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b086      	sub	sp, #24
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	68db      	ldr	r3, [r3, #12]
 800e1dc:	68db      	ldr	r3, [r3, #12]
 800e1de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e1e0:	693b      	ldr	r3, [r7, #16]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d10c      	bne.n	800e200 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800e1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ea:	b672      	cpsid	i
 800e1ec:	f383 8811 	msr	BASEPRI, r3
 800e1f0:	f3bf 8f6f 	isb	sy
 800e1f4:	f3bf 8f4f 	dsb	sy
 800e1f8:	b662      	cpsie	i
 800e1fa:	60fb      	str	r3, [r7, #12]
}
 800e1fc:	bf00      	nop
 800e1fe:	e7fe      	b.n	800e1fe <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e200:	693b      	ldr	r3, [r7, #16]
 800e202:	3318      	adds	r3, #24
 800e204:	4618      	mov	r0, r3
 800e206:	f7fe fc17 	bl	800ca38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e20a:	4b1d      	ldr	r3, [pc, #116]	; (800e280 <xTaskRemoveFromEventList+0xb0>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d11c      	bne.n	800e24c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e212:	693b      	ldr	r3, [r7, #16]
 800e214:	3304      	adds	r3, #4
 800e216:	4618      	mov	r0, r3
 800e218:	f7fe fc0e 	bl	800ca38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e21c:	693b      	ldr	r3, [r7, #16]
 800e21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e220:	2201      	movs	r2, #1
 800e222:	409a      	lsls	r2, r3
 800e224:	4b17      	ldr	r3, [pc, #92]	; (800e284 <xTaskRemoveFromEventList+0xb4>)
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	4313      	orrs	r3, r2
 800e22a:	4a16      	ldr	r2, [pc, #88]	; (800e284 <xTaskRemoveFromEventList+0xb4>)
 800e22c:	6013      	str	r3, [r2, #0]
 800e22e:	693b      	ldr	r3, [r7, #16]
 800e230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e232:	4613      	mov	r3, r2
 800e234:	009b      	lsls	r3, r3, #2
 800e236:	4413      	add	r3, r2
 800e238:	009b      	lsls	r3, r3, #2
 800e23a:	4a13      	ldr	r2, [pc, #76]	; (800e288 <xTaskRemoveFromEventList+0xb8>)
 800e23c:	441a      	add	r2, r3
 800e23e:	693b      	ldr	r3, [r7, #16]
 800e240:	3304      	adds	r3, #4
 800e242:	4619      	mov	r1, r3
 800e244:	4610      	mov	r0, r2
 800e246:	f7fe fb9a 	bl	800c97e <vListInsertEnd>
 800e24a:	e005      	b.n	800e258 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e24c:	693b      	ldr	r3, [r7, #16]
 800e24e:	3318      	adds	r3, #24
 800e250:	4619      	mov	r1, r3
 800e252:	480e      	ldr	r0, [pc, #56]	; (800e28c <xTaskRemoveFromEventList+0xbc>)
 800e254:	f7fe fb93 	bl	800c97e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e258:	693b      	ldr	r3, [r7, #16]
 800e25a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e25c:	4b0c      	ldr	r3, [pc, #48]	; (800e290 <xTaskRemoveFromEventList+0xc0>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e262:	429a      	cmp	r2, r3
 800e264:	d905      	bls.n	800e272 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e266:	2301      	movs	r3, #1
 800e268:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e26a:	4b0a      	ldr	r3, [pc, #40]	; (800e294 <xTaskRemoveFromEventList+0xc4>)
 800e26c:	2201      	movs	r2, #1
 800e26e:	601a      	str	r2, [r3, #0]
 800e270:	e001      	b.n	800e276 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e272:	2300      	movs	r3, #0
 800e274:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e276:	697b      	ldr	r3, [r7, #20]
}
 800e278:	4618      	mov	r0, r3
 800e27a:	3718      	adds	r7, #24
 800e27c:	46bd      	mov	sp, r7
 800e27e:	bd80      	pop	{r7, pc}
 800e280:	20000cbc 	.word	0x20000cbc
 800e284:	20000c9c 	.word	0x20000c9c
 800e288:	20000b98 	.word	0x20000b98
 800e28c:	20000c54 	.word	0x20000c54
 800e290:	20000b94 	.word	0x20000b94
 800e294:	20000ca8 	.word	0x20000ca8

0800e298 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e298:	b480      	push	{r7}
 800e29a:	b083      	sub	sp, #12
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e2a0:	4b06      	ldr	r3, [pc, #24]	; (800e2bc <vTaskInternalSetTimeOutState+0x24>)
 800e2a2:	681a      	ldr	r2, [r3, #0]
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e2a8:	4b05      	ldr	r3, [pc, #20]	; (800e2c0 <vTaskInternalSetTimeOutState+0x28>)
 800e2aa:	681a      	ldr	r2, [r3, #0]
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	605a      	str	r2, [r3, #4]
}
 800e2b0:	bf00      	nop
 800e2b2:	370c      	adds	r7, #12
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ba:	4770      	bx	lr
 800e2bc:	20000cac 	.word	0x20000cac
 800e2c0:	20000c98 	.word	0x20000c98

0800e2c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b088      	sub	sp, #32
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
 800e2cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d10c      	bne.n	800e2ee <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800e2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2d8:	b672      	cpsid	i
 800e2da:	f383 8811 	msr	BASEPRI, r3
 800e2de:	f3bf 8f6f 	isb	sy
 800e2e2:	f3bf 8f4f 	dsb	sy
 800e2e6:	b662      	cpsie	i
 800e2e8:	613b      	str	r3, [r7, #16]
}
 800e2ea:	bf00      	nop
 800e2ec:	e7fe      	b.n	800e2ec <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d10c      	bne.n	800e30e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800e2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f8:	b672      	cpsid	i
 800e2fa:	f383 8811 	msr	BASEPRI, r3
 800e2fe:	f3bf 8f6f 	isb	sy
 800e302:	f3bf 8f4f 	dsb	sy
 800e306:	b662      	cpsie	i
 800e308:	60fb      	str	r3, [r7, #12]
}
 800e30a:	bf00      	nop
 800e30c:	e7fe      	b.n	800e30c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800e30e:	f000 fc75 	bl	800ebfc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e312:	4b1d      	ldr	r3, [pc, #116]	; (800e388 <xTaskCheckForTimeOut+0xc4>)
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	685b      	ldr	r3, [r3, #4]
 800e31c:	69ba      	ldr	r2, [r7, #24]
 800e31e:	1ad3      	subs	r3, r2, r3
 800e320:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e32a:	d102      	bne.n	800e332 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e32c:	2300      	movs	r3, #0
 800e32e:	61fb      	str	r3, [r7, #28]
 800e330:	e023      	b.n	800e37a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681a      	ldr	r2, [r3, #0]
 800e336:	4b15      	ldr	r3, [pc, #84]	; (800e38c <xTaskCheckForTimeOut+0xc8>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	429a      	cmp	r2, r3
 800e33c:	d007      	beq.n	800e34e <xTaskCheckForTimeOut+0x8a>
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	685b      	ldr	r3, [r3, #4]
 800e342:	69ba      	ldr	r2, [r7, #24]
 800e344:	429a      	cmp	r2, r3
 800e346:	d302      	bcc.n	800e34e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e348:	2301      	movs	r3, #1
 800e34a:	61fb      	str	r3, [r7, #28]
 800e34c:	e015      	b.n	800e37a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	697a      	ldr	r2, [r7, #20]
 800e354:	429a      	cmp	r2, r3
 800e356:	d20b      	bcs.n	800e370 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e358:	683b      	ldr	r3, [r7, #0]
 800e35a:	681a      	ldr	r2, [r3, #0]
 800e35c:	697b      	ldr	r3, [r7, #20]
 800e35e:	1ad2      	subs	r2, r2, r3
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e364:	6878      	ldr	r0, [r7, #4]
 800e366:	f7ff ff97 	bl	800e298 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e36a:	2300      	movs	r3, #0
 800e36c:	61fb      	str	r3, [r7, #28]
 800e36e:	e004      	b.n	800e37a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800e370:	683b      	ldr	r3, [r7, #0]
 800e372:	2200      	movs	r2, #0
 800e374:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e376:	2301      	movs	r3, #1
 800e378:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e37a:	f000 fc73 	bl	800ec64 <vPortExitCritical>

	return xReturn;
 800e37e:	69fb      	ldr	r3, [r7, #28]
}
 800e380:	4618      	mov	r0, r3
 800e382:	3720      	adds	r7, #32
 800e384:	46bd      	mov	sp, r7
 800e386:	bd80      	pop	{r7, pc}
 800e388:	20000c98 	.word	0x20000c98
 800e38c:	20000cac 	.word	0x20000cac

0800e390 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e390:	b480      	push	{r7}
 800e392:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e394:	4b03      	ldr	r3, [pc, #12]	; (800e3a4 <vTaskMissedYield+0x14>)
 800e396:	2201      	movs	r2, #1
 800e398:	601a      	str	r2, [r3, #0]
}
 800e39a:	bf00      	nop
 800e39c:	46bd      	mov	sp, r7
 800e39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a2:	4770      	bx	lr
 800e3a4:	20000ca8 	.word	0x20000ca8

0800e3a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b082      	sub	sp, #8
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e3b0:	f000 f854 	bl	800e45c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e3b4:	4b07      	ldr	r3, [pc, #28]	; (800e3d4 <prvIdleTask+0x2c>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	2b01      	cmp	r3, #1
 800e3ba:	d907      	bls.n	800e3cc <prvIdleTask+0x24>
			{
				taskYIELD();
 800e3bc:	4b06      	ldr	r3, [pc, #24]	; (800e3d8 <prvIdleTask+0x30>)
 800e3be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3c2:	601a      	str	r2, [r3, #0]
 800e3c4:	f3bf 8f4f 	dsb	sy
 800e3c8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800e3cc:	f7f2 fcd4 	bl	8000d78 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800e3d0:	e7ee      	b.n	800e3b0 <prvIdleTask+0x8>
 800e3d2:	bf00      	nop
 800e3d4:	20000b98 	.word	0x20000b98
 800e3d8:	e000ed04 	.word	0xe000ed04

0800e3dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b082      	sub	sp, #8
 800e3e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	607b      	str	r3, [r7, #4]
 800e3e6:	e00c      	b.n	800e402 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e3e8:	687a      	ldr	r2, [r7, #4]
 800e3ea:	4613      	mov	r3, r2
 800e3ec:	009b      	lsls	r3, r3, #2
 800e3ee:	4413      	add	r3, r2
 800e3f0:	009b      	lsls	r3, r3, #2
 800e3f2:	4a12      	ldr	r2, [pc, #72]	; (800e43c <prvInitialiseTaskLists+0x60>)
 800e3f4:	4413      	add	r3, r2
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f7fe fa94 	bl	800c924 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	3301      	adds	r3, #1
 800e400:	607b      	str	r3, [r7, #4]
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	2b06      	cmp	r3, #6
 800e406:	d9ef      	bls.n	800e3e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e408:	480d      	ldr	r0, [pc, #52]	; (800e440 <prvInitialiseTaskLists+0x64>)
 800e40a:	f7fe fa8b 	bl	800c924 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e40e:	480d      	ldr	r0, [pc, #52]	; (800e444 <prvInitialiseTaskLists+0x68>)
 800e410:	f7fe fa88 	bl	800c924 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e414:	480c      	ldr	r0, [pc, #48]	; (800e448 <prvInitialiseTaskLists+0x6c>)
 800e416:	f7fe fa85 	bl	800c924 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e41a:	480c      	ldr	r0, [pc, #48]	; (800e44c <prvInitialiseTaskLists+0x70>)
 800e41c:	f7fe fa82 	bl	800c924 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e420:	480b      	ldr	r0, [pc, #44]	; (800e450 <prvInitialiseTaskLists+0x74>)
 800e422:	f7fe fa7f 	bl	800c924 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e426:	4b0b      	ldr	r3, [pc, #44]	; (800e454 <prvInitialiseTaskLists+0x78>)
 800e428:	4a05      	ldr	r2, [pc, #20]	; (800e440 <prvInitialiseTaskLists+0x64>)
 800e42a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e42c:	4b0a      	ldr	r3, [pc, #40]	; (800e458 <prvInitialiseTaskLists+0x7c>)
 800e42e:	4a05      	ldr	r2, [pc, #20]	; (800e444 <prvInitialiseTaskLists+0x68>)
 800e430:	601a      	str	r2, [r3, #0]
}
 800e432:	bf00      	nop
 800e434:	3708      	adds	r7, #8
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}
 800e43a:	bf00      	nop
 800e43c:	20000b98 	.word	0x20000b98
 800e440:	20000c24 	.word	0x20000c24
 800e444:	20000c38 	.word	0x20000c38
 800e448:	20000c54 	.word	0x20000c54
 800e44c:	20000c68 	.word	0x20000c68
 800e450:	20000c80 	.word	0x20000c80
 800e454:	20000c4c 	.word	0x20000c4c
 800e458:	20000c50 	.word	0x20000c50

0800e45c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b082      	sub	sp, #8
 800e460:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e462:	e019      	b.n	800e498 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e464:	f000 fbca 	bl	800ebfc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e468:	4b10      	ldr	r3, [pc, #64]	; (800e4ac <prvCheckTasksWaitingTermination+0x50>)
 800e46a:	68db      	ldr	r3, [r3, #12]
 800e46c:	68db      	ldr	r3, [r3, #12]
 800e46e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	3304      	adds	r3, #4
 800e474:	4618      	mov	r0, r3
 800e476:	f7fe fadf 	bl	800ca38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e47a:	4b0d      	ldr	r3, [pc, #52]	; (800e4b0 <prvCheckTasksWaitingTermination+0x54>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	3b01      	subs	r3, #1
 800e480:	4a0b      	ldr	r2, [pc, #44]	; (800e4b0 <prvCheckTasksWaitingTermination+0x54>)
 800e482:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e484:	4b0b      	ldr	r3, [pc, #44]	; (800e4b4 <prvCheckTasksWaitingTermination+0x58>)
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	3b01      	subs	r3, #1
 800e48a:	4a0a      	ldr	r2, [pc, #40]	; (800e4b4 <prvCheckTasksWaitingTermination+0x58>)
 800e48c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e48e:	f000 fbe9 	bl	800ec64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e492:	6878      	ldr	r0, [r7, #4]
 800e494:	f000 f810 	bl	800e4b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e498:	4b06      	ldr	r3, [pc, #24]	; (800e4b4 <prvCheckTasksWaitingTermination+0x58>)
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d1e1      	bne.n	800e464 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e4a0:	bf00      	nop
 800e4a2:	bf00      	nop
 800e4a4:	3708      	adds	r7, #8
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	bd80      	pop	{r7, pc}
 800e4aa:	bf00      	nop
 800e4ac:	20000c68 	.word	0x20000c68
 800e4b0:	20000c94 	.word	0x20000c94
 800e4b4:	20000c7c 	.word	0x20000c7c

0800e4b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b084      	sub	sp, #16
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d108      	bne.n	800e4dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	f000 fd90 	bl	800eff4 <vPortFree>
				vPortFree( pxTCB );
 800e4d4:	6878      	ldr	r0, [r7, #4]
 800e4d6:	f000 fd8d 	bl	800eff4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e4da:	e01a      	b.n	800e512 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e4e2:	2b01      	cmp	r3, #1
 800e4e4:	d103      	bne.n	800e4ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e4e6:	6878      	ldr	r0, [r7, #4]
 800e4e8:	f000 fd84 	bl	800eff4 <vPortFree>
	}
 800e4ec:	e011      	b.n	800e512 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e4f4:	2b02      	cmp	r3, #2
 800e4f6:	d00c      	beq.n	800e512 <prvDeleteTCB+0x5a>
	__asm volatile
 800e4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4fc:	b672      	cpsid	i
 800e4fe:	f383 8811 	msr	BASEPRI, r3
 800e502:	f3bf 8f6f 	isb	sy
 800e506:	f3bf 8f4f 	dsb	sy
 800e50a:	b662      	cpsie	i
 800e50c:	60fb      	str	r3, [r7, #12]
}
 800e50e:	bf00      	nop
 800e510:	e7fe      	b.n	800e510 <prvDeleteTCB+0x58>
	}
 800e512:	bf00      	nop
 800e514:	3710      	adds	r7, #16
 800e516:	46bd      	mov	sp, r7
 800e518:	bd80      	pop	{r7, pc}
	...

0800e51c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e51c:	b480      	push	{r7}
 800e51e:	b083      	sub	sp, #12
 800e520:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e522:	4b0c      	ldr	r3, [pc, #48]	; (800e554 <prvResetNextTaskUnblockTime+0x38>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d104      	bne.n	800e536 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e52c:	4b0a      	ldr	r3, [pc, #40]	; (800e558 <prvResetNextTaskUnblockTime+0x3c>)
 800e52e:	f04f 32ff 	mov.w	r2, #4294967295
 800e532:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e534:	e008      	b.n	800e548 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e536:	4b07      	ldr	r3, [pc, #28]	; (800e554 <prvResetNextTaskUnblockTime+0x38>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	68db      	ldr	r3, [r3, #12]
 800e53c:	68db      	ldr	r3, [r3, #12]
 800e53e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	685b      	ldr	r3, [r3, #4]
 800e544:	4a04      	ldr	r2, [pc, #16]	; (800e558 <prvResetNextTaskUnblockTime+0x3c>)
 800e546:	6013      	str	r3, [r2, #0]
}
 800e548:	bf00      	nop
 800e54a:	370c      	adds	r7, #12
 800e54c:	46bd      	mov	sp, r7
 800e54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e552:	4770      	bx	lr
 800e554:	20000c4c 	.word	0x20000c4c
 800e558:	20000cb4 	.word	0x20000cb4

0800e55c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e55c:	b480      	push	{r7}
 800e55e:	b083      	sub	sp, #12
 800e560:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e562:	4b0b      	ldr	r3, [pc, #44]	; (800e590 <xTaskGetSchedulerState+0x34>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d102      	bne.n	800e570 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e56a:	2301      	movs	r3, #1
 800e56c:	607b      	str	r3, [r7, #4]
 800e56e:	e008      	b.n	800e582 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e570:	4b08      	ldr	r3, [pc, #32]	; (800e594 <xTaskGetSchedulerState+0x38>)
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d102      	bne.n	800e57e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e578:	2302      	movs	r3, #2
 800e57a:	607b      	str	r3, [r7, #4]
 800e57c:	e001      	b.n	800e582 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e57e:	2300      	movs	r3, #0
 800e580:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e582:	687b      	ldr	r3, [r7, #4]
	}
 800e584:	4618      	mov	r0, r3
 800e586:	370c      	adds	r7, #12
 800e588:	46bd      	mov	sp, r7
 800e58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58e:	4770      	bx	lr
 800e590:	20000ca0 	.word	0x20000ca0
 800e594:	20000cbc 	.word	0x20000cbc

0800e598 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b084      	sub	sp, #16
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d069      	beq.n	800e682 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5b2:	4b36      	ldr	r3, [pc, #216]	; (800e68c <xTaskPriorityInherit+0xf4>)
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5b8:	429a      	cmp	r2, r3
 800e5ba:	d259      	bcs.n	800e670 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	699b      	ldr	r3, [r3, #24]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	db06      	blt.n	800e5d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5c4:	4b31      	ldr	r3, [pc, #196]	; (800e68c <xTaskPriorityInherit+0xf4>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5ca:	f1c3 0207 	rsb	r2, r3, #7
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e5d2:	68bb      	ldr	r3, [r7, #8]
 800e5d4:	6959      	ldr	r1, [r3, #20]
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5da:	4613      	mov	r3, r2
 800e5dc:	009b      	lsls	r3, r3, #2
 800e5de:	4413      	add	r3, r2
 800e5e0:	009b      	lsls	r3, r3, #2
 800e5e2:	4a2b      	ldr	r2, [pc, #172]	; (800e690 <xTaskPriorityInherit+0xf8>)
 800e5e4:	4413      	add	r3, r2
 800e5e6:	4299      	cmp	r1, r3
 800e5e8:	d13a      	bne.n	800e660 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e5ea:	68bb      	ldr	r3, [r7, #8]
 800e5ec:	3304      	adds	r3, #4
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f7fe fa22 	bl	800ca38 <uxListRemove>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d115      	bne.n	800e626 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e5fa:	68bb      	ldr	r3, [r7, #8]
 800e5fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5fe:	4924      	ldr	r1, [pc, #144]	; (800e690 <xTaskPriorityInherit+0xf8>)
 800e600:	4613      	mov	r3, r2
 800e602:	009b      	lsls	r3, r3, #2
 800e604:	4413      	add	r3, r2
 800e606:	009b      	lsls	r3, r3, #2
 800e608:	440b      	add	r3, r1
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d10a      	bne.n	800e626 <xTaskPriorityInherit+0x8e>
 800e610:	68bb      	ldr	r3, [r7, #8]
 800e612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e614:	2201      	movs	r2, #1
 800e616:	fa02 f303 	lsl.w	r3, r2, r3
 800e61a:	43da      	mvns	r2, r3
 800e61c:	4b1d      	ldr	r3, [pc, #116]	; (800e694 <xTaskPriorityInherit+0xfc>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	4013      	ands	r3, r2
 800e622:	4a1c      	ldr	r2, [pc, #112]	; (800e694 <xTaskPriorityInherit+0xfc>)
 800e624:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e626:	4b19      	ldr	r3, [pc, #100]	; (800e68c <xTaskPriorityInherit+0xf4>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e62c:	68bb      	ldr	r3, [r7, #8]
 800e62e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e630:	68bb      	ldr	r3, [r7, #8]
 800e632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e634:	2201      	movs	r2, #1
 800e636:	409a      	lsls	r2, r3
 800e638:	4b16      	ldr	r3, [pc, #88]	; (800e694 <xTaskPriorityInherit+0xfc>)
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	4313      	orrs	r3, r2
 800e63e:	4a15      	ldr	r2, [pc, #84]	; (800e694 <xTaskPriorityInherit+0xfc>)
 800e640:	6013      	str	r3, [r2, #0]
 800e642:	68bb      	ldr	r3, [r7, #8]
 800e644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e646:	4613      	mov	r3, r2
 800e648:	009b      	lsls	r3, r3, #2
 800e64a:	4413      	add	r3, r2
 800e64c:	009b      	lsls	r3, r3, #2
 800e64e:	4a10      	ldr	r2, [pc, #64]	; (800e690 <xTaskPriorityInherit+0xf8>)
 800e650:	441a      	add	r2, r3
 800e652:	68bb      	ldr	r3, [r7, #8]
 800e654:	3304      	adds	r3, #4
 800e656:	4619      	mov	r1, r3
 800e658:	4610      	mov	r0, r2
 800e65a:	f7fe f990 	bl	800c97e <vListInsertEnd>
 800e65e:	e004      	b.n	800e66a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e660:	4b0a      	ldr	r3, [pc, #40]	; (800e68c <xTaskPriorityInherit+0xf4>)
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e66a:	2301      	movs	r3, #1
 800e66c:	60fb      	str	r3, [r7, #12]
 800e66e:	e008      	b.n	800e682 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e670:	68bb      	ldr	r3, [r7, #8]
 800e672:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e674:	4b05      	ldr	r3, [pc, #20]	; (800e68c <xTaskPriorityInherit+0xf4>)
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e67a:	429a      	cmp	r2, r3
 800e67c:	d201      	bcs.n	800e682 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e67e:	2301      	movs	r3, #1
 800e680:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e682:	68fb      	ldr	r3, [r7, #12]
	}
 800e684:	4618      	mov	r0, r3
 800e686:	3710      	adds	r7, #16
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}
 800e68c:	20000b94 	.word	0x20000b94
 800e690:	20000b98 	.word	0x20000b98
 800e694:	20000c9c 	.word	0x20000c9c

0800e698 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b086      	sub	sp, #24
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d072      	beq.n	800e794 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e6ae:	4b3c      	ldr	r3, [pc, #240]	; (800e7a0 <xTaskPriorityDisinherit+0x108>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	693a      	ldr	r2, [r7, #16]
 800e6b4:	429a      	cmp	r2, r3
 800e6b6:	d00c      	beq.n	800e6d2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800e6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6bc:	b672      	cpsid	i
 800e6be:	f383 8811 	msr	BASEPRI, r3
 800e6c2:	f3bf 8f6f 	isb	sy
 800e6c6:	f3bf 8f4f 	dsb	sy
 800e6ca:	b662      	cpsie	i
 800e6cc:	60fb      	str	r3, [r7, #12]
}
 800e6ce:	bf00      	nop
 800e6d0:	e7fe      	b.n	800e6d0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800e6d2:	693b      	ldr	r3, [r7, #16]
 800e6d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d10c      	bne.n	800e6f4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800e6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6de:	b672      	cpsid	i
 800e6e0:	f383 8811 	msr	BASEPRI, r3
 800e6e4:	f3bf 8f6f 	isb	sy
 800e6e8:	f3bf 8f4f 	dsb	sy
 800e6ec:	b662      	cpsie	i
 800e6ee:	60bb      	str	r3, [r7, #8]
}
 800e6f0:	bf00      	nop
 800e6f2:	e7fe      	b.n	800e6f2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800e6f4:	693b      	ldr	r3, [r7, #16]
 800e6f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6f8:	1e5a      	subs	r2, r3, #1
 800e6fa:	693b      	ldr	r3, [r7, #16]
 800e6fc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e6fe:	693b      	ldr	r3, [r7, #16]
 800e700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e702:	693b      	ldr	r3, [r7, #16]
 800e704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e706:	429a      	cmp	r2, r3
 800e708:	d044      	beq.n	800e794 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e70a:	693b      	ldr	r3, [r7, #16]
 800e70c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d140      	bne.n	800e794 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e712:	693b      	ldr	r3, [r7, #16]
 800e714:	3304      	adds	r3, #4
 800e716:	4618      	mov	r0, r3
 800e718:	f7fe f98e 	bl	800ca38 <uxListRemove>
 800e71c:	4603      	mov	r3, r0
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d115      	bne.n	800e74e <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e722:	693b      	ldr	r3, [r7, #16]
 800e724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e726:	491f      	ldr	r1, [pc, #124]	; (800e7a4 <xTaskPriorityDisinherit+0x10c>)
 800e728:	4613      	mov	r3, r2
 800e72a:	009b      	lsls	r3, r3, #2
 800e72c:	4413      	add	r3, r2
 800e72e:	009b      	lsls	r3, r3, #2
 800e730:	440b      	add	r3, r1
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d10a      	bne.n	800e74e <xTaskPriorityDisinherit+0xb6>
 800e738:	693b      	ldr	r3, [r7, #16]
 800e73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e73c:	2201      	movs	r2, #1
 800e73e:	fa02 f303 	lsl.w	r3, r2, r3
 800e742:	43da      	mvns	r2, r3
 800e744:	4b18      	ldr	r3, [pc, #96]	; (800e7a8 <xTaskPriorityDisinherit+0x110>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	4013      	ands	r3, r2
 800e74a:	4a17      	ldr	r2, [pc, #92]	; (800e7a8 <xTaskPriorityDisinherit+0x110>)
 800e74c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e74e:	693b      	ldr	r3, [r7, #16]
 800e750:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e752:	693b      	ldr	r3, [r7, #16]
 800e754:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e756:	693b      	ldr	r3, [r7, #16]
 800e758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e75a:	f1c3 0207 	rsb	r2, r3, #7
 800e75e:	693b      	ldr	r3, [r7, #16]
 800e760:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e762:	693b      	ldr	r3, [r7, #16]
 800e764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e766:	2201      	movs	r2, #1
 800e768:	409a      	lsls	r2, r3
 800e76a:	4b0f      	ldr	r3, [pc, #60]	; (800e7a8 <xTaskPriorityDisinherit+0x110>)
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	4313      	orrs	r3, r2
 800e770:	4a0d      	ldr	r2, [pc, #52]	; (800e7a8 <xTaskPriorityDisinherit+0x110>)
 800e772:	6013      	str	r3, [r2, #0]
 800e774:	693b      	ldr	r3, [r7, #16]
 800e776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e778:	4613      	mov	r3, r2
 800e77a:	009b      	lsls	r3, r3, #2
 800e77c:	4413      	add	r3, r2
 800e77e:	009b      	lsls	r3, r3, #2
 800e780:	4a08      	ldr	r2, [pc, #32]	; (800e7a4 <xTaskPriorityDisinherit+0x10c>)
 800e782:	441a      	add	r2, r3
 800e784:	693b      	ldr	r3, [r7, #16]
 800e786:	3304      	adds	r3, #4
 800e788:	4619      	mov	r1, r3
 800e78a:	4610      	mov	r0, r2
 800e78c:	f7fe f8f7 	bl	800c97e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e790:	2301      	movs	r3, #1
 800e792:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e794:	697b      	ldr	r3, [r7, #20]
	}
 800e796:	4618      	mov	r0, r3
 800e798:	3718      	adds	r7, #24
 800e79a:	46bd      	mov	sp, r7
 800e79c:	bd80      	pop	{r7, pc}
 800e79e:	bf00      	nop
 800e7a0:	20000b94 	.word	0x20000b94
 800e7a4:	20000b98 	.word	0x20000b98
 800e7a8:	20000c9c 	.word	0x20000c9c

0800e7ac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b088      	sub	sp, #32
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
 800e7b4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e7ba:	2301      	movs	r3, #1
 800e7bc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	f000 8087 	beq.w	800e8d4 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e7c6:	69bb      	ldr	r3, [r7, #24]
 800e7c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d10c      	bne.n	800e7e8 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800e7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7d2:	b672      	cpsid	i
 800e7d4:	f383 8811 	msr	BASEPRI, r3
 800e7d8:	f3bf 8f6f 	isb	sy
 800e7dc:	f3bf 8f4f 	dsb	sy
 800e7e0:	b662      	cpsie	i
 800e7e2:	60fb      	str	r3, [r7, #12]
}
 800e7e4:	bf00      	nop
 800e7e6:	e7fe      	b.n	800e7e6 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e7e8:	69bb      	ldr	r3, [r7, #24]
 800e7ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7ec:	683a      	ldr	r2, [r7, #0]
 800e7ee:	429a      	cmp	r2, r3
 800e7f0:	d902      	bls.n	800e7f8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	61fb      	str	r3, [r7, #28]
 800e7f6:	e002      	b.n	800e7fe <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e7f8:	69bb      	ldr	r3, [r7, #24]
 800e7fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7fc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e7fe:	69bb      	ldr	r3, [r7, #24]
 800e800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e802:	69fa      	ldr	r2, [r7, #28]
 800e804:	429a      	cmp	r2, r3
 800e806:	d065      	beq.n	800e8d4 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e808:	69bb      	ldr	r3, [r7, #24]
 800e80a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e80c:	697a      	ldr	r2, [r7, #20]
 800e80e:	429a      	cmp	r2, r3
 800e810:	d160      	bne.n	800e8d4 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e812:	4b32      	ldr	r3, [pc, #200]	; (800e8dc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	69ba      	ldr	r2, [r7, #24]
 800e818:	429a      	cmp	r2, r3
 800e81a:	d10c      	bne.n	800e836 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800e81c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e820:	b672      	cpsid	i
 800e822:	f383 8811 	msr	BASEPRI, r3
 800e826:	f3bf 8f6f 	isb	sy
 800e82a:	f3bf 8f4f 	dsb	sy
 800e82e:	b662      	cpsie	i
 800e830:	60bb      	str	r3, [r7, #8]
}
 800e832:	bf00      	nop
 800e834:	e7fe      	b.n	800e834 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e836:	69bb      	ldr	r3, [r7, #24]
 800e838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e83a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e83c:	69bb      	ldr	r3, [r7, #24]
 800e83e:	69fa      	ldr	r2, [r7, #28]
 800e840:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e842:	69bb      	ldr	r3, [r7, #24]
 800e844:	699b      	ldr	r3, [r3, #24]
 800e846:	2b00      	cmp	r3, #0
 800e848:	db04      	blt.n	800e854 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e84a:	69fb      	ldr	r3, [r7, #28]
 800e84c:	f1c3 0207 	rsb	r2, r3, #7
 800e850:	69bb      	ldr	r3, [r7, #24]
 800e852:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e854:	69bb      	ldr	r3, [r7, #24]
 800e856:	6959      	ldr	r1, [r3, #20]
 800e858:	693a      	ldr	r2, [r7, #16]
 800e85a:	4613      	mov	r3, r2
 800e85c:	009b      	lsls	r3, r3, #2
 800e85e:	4413      	add	r3, r2
 800e860:	009b      	lsls	r3, r3, #2
 800e862:	4a1f      	ldr	r2, [pc, #124]	; (800e8e0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e864:	4413      	add	r3, r2
 800e866:	4299      	cmp	r1, r3
 800e868:	d134      	bne.n	800e8d4 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e86a:	69bb      	ldr	r3, [r7, #24]
 800e86c:	3304      	adds	r3, #4
 800e86e:	4618      	mov	r0, r3
 800e870:	f7fe f8e2 	bl	800ca38 <uxListRemove>
 800e874:	4603      	mov	r3, r0
 800e876:	2b00      	cmp	r3, #0
 800e878:	d115      	bne.n	800e8a6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e87a:	69bb      	ldr	r3, [r7, #24]
 800e87c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e87e:	4918      	ldr	r1, [pc, #96]	; (800e8e0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e880:	4613      	mov	r3, r2
 800e882:	009b      	lsls	r3, r3, #2
 800e884:	4413      	add	r3, r2
 800e886:	009b      	lsls	r3, r3, #2
 800e888:	440b      	add	r3, r1
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d10a      	bne.n	800e8a6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800e890:	69bb      	ldr	r3, [r7, #24]
 800e892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e894:	2201      	movs	r2, #1
 800e896:	fa02 f303 	lsl.w	r3, r2, r3
 800e89a:	43da      	mvns	r2, r3
 800e89c:	4b11      	ldr	r3, [pc, #68]	; (800e8e4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	4013      	ands	r3, r2
 800e8a2:	4a10      	ldr	r2, [pc, #64]	; (800e8e4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e8a4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e8a6:	69bb      	ldr	r3, [r7, #24]
 800e8a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8aa:	2201      	movs	r2, #1
 800e8ac:	409a      	lsls	r2, r3
 800e8ae:	4b0d      	ldr	r3, [pc, #52]	; (800e8e4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	4313      	orrs	r3, r2
 800e8b4:	4a0b      	ldr	r2, [pc, #44]	; (800e8e4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e8b6:	6013      	str	r3, [r2, #0]
 800e8b8:	69bb      	ldr	r3, [r7, #24]
 800e8ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8bc:	4613      	mov	r3, r2
 800e8be:	009b      	lsls	r3, r3, #2
 800e8c0:	4413      	add	r3, r2
 800e8c2:	009b      	lsls	r3, r3, #2
 800e8c4:	4a06      	ldr	r2, [pc, #24]	; (800e8e0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e8c6:	441a      	add	r2, r3
 800e8c8:	69bb      	ldr	r3, [r7, #24]
 800e8ca:	3304      	adds	r3, #4
 800e8cc:	4619      	mov	r1, r3
 800e8ce:	4610      	mov	r0, r2
 800e8d0:	f7fe f855 	bl	800c97e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e8d4:	bf00      	nop
 800e8d6:	3720      	adds	r7, #32
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	bd80      	pop	{r7, pc}
 800e8dc:	20000b94 	.word	0x20000b94
 800e8e0:	20000b98 	.word	0x20000b98
 800e8e4:	20000c9c 	.word	0x20000c9c

0800e8e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e8e8:	b480      	push	{r7}
 800e8ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e8ec:	4b07      	ldr	r3, [pc, #28]	; (800e90c <pvTaskIncrementMutexHeldCount+0x24>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d004      	beq.n	800e8fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e8f4:	4b05      	ldr	r3, [pc, #20]	; (800e90c <pvTaskIncrementMutexHeldCount+0x24>)
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e8fa:	3201      	adds	r2, #1
 800e8fc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e8fe:	4b03      	ldr	r3, [pc, #12]	; (800e90c <pvTaskIncrementMutexHeldCount+0x24>)
 800e900:	681b      	ldr	r3, [r3, #0]
	}
 800e902:	4618      	mov	r0, r3
 800e904:	46bd      	mov	sp, r7
 800e906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90a:	4770      	bx	lr
 800e90c:	20000b94 	.word	0x20000b94

0800e910 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b084      	sub	sp, #16
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
 800e918:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e91a:	4b29      	ldr	r3, [pc, #164]	; (800e9c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e920:	4b28      	ldr	r3, [pc, #160]	; (800e9c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	3304      	adds	r3, #4
 800e926:	4618      	mov	r0, r3
 800e928:	f7fe f886 	bl	800ca38 <uxListRemove>
 800e92c:	4603      	mov	r3, r0
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d10b      	bne.n	800e94a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e932:	4b24      	ldr	r3, [pc, #144]	; (800e9c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e938:	2201      	movs	r2, #1
 800e93a:	fa02 f303 	lsl.w	r3, r2, r3
 800e93e:	43da      	mvns	r2, r3
 800e940:	4b21      	ldr	r3, [pc, #132]	; (800e9c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	4013      	ands	r3, r2
 800e946:	4a20      	ldr	r2, [pc, #128]	; (800e9c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e948:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e950:	d10a      	bne.n	800e968 <prvAddCurrentTaskToDelayedList+0x58>
 800e952:	683b      	ldr	r3, [r7, #0]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d007      	beq.n	800e968 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e958:	4b1a      	ldr	r3, [pc, #104]	; (800e9c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	3304      	adds	r3, #4
 800e95e:	4619      	mov	r1, r3
 800e960:	481a      	ldr	r0, [pc, #104]	; (800e9cc <prvAddCurrentTaskToDelayedList+0xbc>)
 800e962:	f7fe f80c 	bl	800c97e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e966:	e026      	b.n	800e9b6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e968:	68fa      	ldr	r2, [r7, #12]
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	4413      	add	r3, r2
 800e96e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e970:	4b14      	ldr	r3, [pc, #80]	; (800e9c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	68ba      	ldr	r2, [r7, #8]
 800e976:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e978:	68ba      	ldr	r2, [r7, #8]
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	429a      	cmp	r2, r3
 800e97e:	d209      	bcs.n	800e994 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e980:	4b13      	ldr	r3, [pc, #76]	; (800e9d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e982:	681a      	ldr	r2, [r3, #0]
 800e984:	4b0f      	ldr	r3, [pc, #60]	; (800e9c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	3304      	adds	r3, #4
 800e98a:	4619      	mov	r1, r3
 800e98c:	4610      	mov	r0, r2
 800e98e:	f7fe f81a 	bl	800c9c6 <vListInsert>
}
 800e992:	e010      	b.n	800e9b6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e994:	4b0f      	ldr	r3, [pc, #60]	; (800e9d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e996:	681a      	ldr	r2, [r3, #0]
 800e998:	4b0a      	ldr	r3, [pc, #40]	; (800e9c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	3304      	adds	r3, #4
 800e99e:	4619      	mov	r1, r3
 800e9a0:	4610      	mov	r0, r2
 800e9a2:	f7fe f810 	bl	800c9c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e9a6:	4b0c      	ldr	r3, [pc, #48]	; (800e9d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	68ba      	ldr	r2, [r7, #8]
 800e9ac:	429a      	cmp	r2, r3
 800e9ae:	d202      	bcs.n	800e9b6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e9b0:	4a09      	ldr	r2, [pc, #36]	; (800e9d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e9b2:	68bb      	ldr	r3, [r7, #8]
 800e9b4:	6013      	str	r3, [r2, #0]
}
 800e9b6:	bf00      	nop
 800e9b8:	3710      	adds	r7, #16
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	bd80      	pop	{r7, pc}
 800e9be:	bf00      	nop
 800e9c0:	20000c98 	.word	0x20000c98
 800e9c4:	20000b94 	.word	0x20000b94
 800e9c8:	20000c9c 	.word	0x20000c9c
 800e9cc:	20000c80 	.word	0x20000c80
 800e9d0:	20000c50 	.word	0x20000c50
 800e9d4:	20000c4c 	.word	0x20000c4c
 800e9d8:	20000cb4 	.word	0x20000cb4

0800e9dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e9dc:	b480      	push	{r7}
 800e9de:	b085      	sub	sp, #20
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	60f8      	str	r0, [r7, #12]
 800e9e4:	60b9      	str	r1, [r7, #8]
 800e9e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	3b04      	subs	r3, #4
 800e9ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e9f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	3b04      	subs	r3, #4
 800e9fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e9fc:	68bb      	ldr	r3, [r7, #8]
 800e9fe:	f023 0201 	bic.w	r2, r3, #1
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	3b04      	subs	r3, #4
 800ea0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ea0c:	4a0c      	ldr	r2, [pc, #48]	; (800ea40 <pxPortInitialiseStack+0x64>)
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	3b14      	subs	r3, #20
 800ea16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ea18:	687a      	ldr	r2, [r7, #4]
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	3b04      	subs	r3, #4
 800ea22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	f06f 0202 	mvn.w	r2, #2
 800ea2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	3b20      	subs	r3, #32
 800ea30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ea32:	68fb      	ldr	r3, [r7, #12]
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	3714      	adds	r7, #20
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3e:	4770      	bx	lr
 800ea40:	0800ea45 	.word	0x0800ea45

0800ea44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ea44:	b480      	push	{r7}
 800ea46:	b085      	sub	sp, #20
 800ea48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ea4e:	4b14      	ldr	r3, [pc, #80]	; (800eaa0 <prvTaskExitError+0x5c>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea56:	d00c      	beq.n	800ea72 <prvTaskExitError+0x2e>
	__asm volatile
 800ea58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea5c:	b672      	cpsid	i
 800ea5e:	f383 8811 	msr	BASEPRI, r3
 800ea62:	f3bf 8f6f 	isb	sy
 800ea66:	f3bf 8f4f 	dsb	sy
 800ea6a:	b662      	cpsie	i
 800ea6c:	60fb      	str	r3, [r7, #12]
}
 800ea6e:	bf00      	nop
 800ea70:	e7fe      	b.n	800ea70 <prvTaskExitError+0x2c>
	__asm volatile
 800ea72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea76:	b672      	cpsid	i
 800ea78:	f383 8811 	msr	BASEPRI, r3
 800ea7c:	f3bf 8f6f 	isb	sy
 800ea80:	f3bf 8f4f 	dsb	sy
 800ea84:	b662      	cpsie	i
 800ea86:	60bb      	str	r3, [r7, #8]
}
 800ea88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ea8a:	bf00      	nop
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d0fc      	beq.n	800ea8c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ea92:	bf00      	nop
 800ea94:	bf00      	nop
 800ea96:	3714      	adds	r7, #20
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9e:	4770      	bx	lr
 800eaa0:	20000020 	.word	0x20000020
	...

0800eab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800eab0:	4b07      	ldr	r3, [pc, #28]	; (800ead0 <pxCurrentTCBConst2>)
 800eab2:	6819      	ldr	r1, [r3, #0]
 800eab4:	6808      	ldr	r0, [r1, #0]
 800eab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaba:	f380 8809 	msr	PSP, r0
 800eabe:	f3bf 8f6f 	isb	sy
 800eac2:	f04f 0000 	mov.w	r0, #0
 800eac6:	f380 8811 	msr	BASEPRI, r0
 800eaca:	4770      	bx	lr
 800eacc:	f3af 8000 	nop.w

0800ead0 <pxCurrentTCBConst2>:
 800ead0:	20000b94 	.word	0x20000b94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ead4:	bf00      	nop
 800ead6:	bf00      	nop

0800ead8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ead8:	4808      	ldr	r0, [pc, #32]	; (800eafc <prvPortStartFirstTask+0x24>)
 800eada:	6800      	ldr	r0, [r0, #0]
 800eadc:	6800      	ldr	r0, [r0, #0]
 800eade:	f380 8808 	msr	MSP, r0
 800eae2:	f04f 0000 	mov.w	r0, #0
 800eae6:	f380 8814 	msr	CONTROL, r0
 800eaea:	b662      	cpsie	i
 800eaec:	b661      	cpsie	f
 800eaee:	f3bf 8f4f 	dsb	sy
 800eaf2:	f3bf 8f6f 	isb	sy
 800eaf6:	df00      	svc	0
 800eaf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800eafa:	bf00      	nop
 800eafc:	e000ed08 	.word	0xe000ed08

0800eb00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b084      	sub	sp, #16
 800eb04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800eb06:	4b37      	ldr	r3, [pc, #220]	; (800ebe4 <xPortStartScheduler+0xe4>)
 800eb08:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	781b      	ldrb	r3, [r3, #0]
 800eb0e:	b2db      	uxtb	r3, r3
 800eb10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	22ff      	movs	r2, #255	; 0xff
 800eb16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	781b      	ldrb	r3, [r3, #0]
 800eb1c:	b2db      	uxtb	r3, r3
 800eb1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800eb20:	78fb      	ldrb	r3, [r7, #3]
 800eb22:	b2db      	uxtb	r3, r3
 800eb24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800eb28:	b2da      	uxtb	r2, r3
 800eb2a:	4b2f      	ldr	r3, [pc, #188]	; (800ebe8 <xPortStartScheduler+0xe8>)
 800eb2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800eb2e:	4b2f      	ldr	r3, [pc, #188]	; (800ebec <xPortStartScheduler+0xec>)
 800eb30:	2207      	movs	r2, #7
 800eb32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eb34:	e009      	b.n	800eb4a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800eb36:	4b2d      	ldr	r3, [pc, #180]	; (800ebec <xPortStartScheduler+0xec>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	3b01      	subs	r3, #1
 800eb3c:	4a2b      	ldr	r2, [pc, #172]	; (800ebec <xPortStartScheduler+0xec>)
 800eb3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800eb40:	78fb      	ldrb	r3, [r7, #3]
 800eb42:	b2db      	uxtb	r3, r3
 800eb44:	005b      	lsls	r3, r3, #1
 800eb46:	b2db      	uxtb	r3, r3
 800eb48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eb4a:	78fb      	ldrb	r3, [r7, #3]
 800eb4c:	b2db      	uxtb	r3, r3
 800eb4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb52:	2b80      	cmp	r3, #128	; 0x80
 800eb54:	d0ef      	beq.n	800eb36 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800eb56:	4b25      	ldr	r3, [pc, #148]	; (800ebec <xPortStartScheduler+0xec>)
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	f1c3 0307 	rsb	r3, r3, #7
 800eb5e:	2b04      	cmp	r3, #4
 800eb60:	d00c      	beq.n	800eb7c <xPortStartScheduler+0x7c>
	__asm volatile
 800eb62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb66:	b672      	cpsid	i
 800eb68:	f383 8811 	msr	BASEPRI, r3
 800eb6c:	f3bf 8f6f 	isb	sy
 800eb70:	f3bf 8f4f 	dsb	sy
 800eb74:	b662      	cpsie	i
 800eb76:	60bb      	str	r3, [r7, #8]
}
 800eb78:	bf00      	nop
 800eb7a:	e7fe      	b.n	800eb7a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800eb7c:	4b1b      	ldr	r3, [pc, #108]	; (800ebec <xPortStartScheduler+0xec>)
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	021b      	lsls	r3, r3, #8
 800eb82:	4a1a      	ldr	r2, [pc, #104]	; (800ebec <xPortStartScheduler+0xec>)
 800eb84:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800eb86:	4b19      	ldr	r3, [pc, #100]	; (800ebec <xPortStartScheduler+0xec>)
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800eb8e:	4a17      	ldr	r2, [pc, #92]	; (800ebec <xPortStartScheduler+0xec>)
 800eb90:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	b2da      	uxtb	r2, r3
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800eb9a:	4b15      	ldr	r3, [pc, #84]	; (800ebf0 <xPortStartScheduler+0xf0>)
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	4a14      	ldr	r2, [pc, #80]	; (800ebf0 <xPortStartScheduler+0xf0>)
 800eba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800eba4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800eba6:	4b12      	ldr	r3, [pc, #72]	; (800ebf0 <xPortStartScheduler+0xf0>)
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	4a11      	ldr	r2, [pc, #68]	; (800ebf0 <xPortStartScheduler+0xf0>)
 800ebac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ebb0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ebb2:	f000 f8dd 	bl	800ed70 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ebb6:	4b0f      	ldr	r3, [pc, #60]	; (800ebf4 <xPortStartScheduler+0xf4>)
 800ebb8:	2200      	movs	r2, #0
 800ebba:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ebbc:	f000 f8fc 	bl	800edb8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ebc0:	4b0d      	ldr	r3, [pc, #52]	; (800ebf8 <xPortStartScheduler+0xf8>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	4a0c      	ldr	r2, [pc, #48]	; (800ebf8 <xPortStartScheduler+0xf8>)
 800ebc6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ebca:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ebcc:	f7ff ff84 	bl	800ead8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ebd0:	f7ff fa56 	bl	800e080 <vTaskSwitchContext>
	prvTaskExitError();
 800ebd4:	f7ff ff36 	bl	800ea44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ebd8:	2300      	movs	r3, #0
}
 800ebda:	4618      	mov	r0, r3
 800ebdc:	3710      	adds	r7, #16
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}
 800ebe2:	bf00      	nop
 800ebe4:	e000e400 	.word	0xe000e400
 800ebe8:	20000cc0 	.word	0x20000cc0
 800ebec:	20000cc4 	.word	0x20000cc4
 800ebf0:	e000ed20 	.word	0xe000ed20
 800ebf4:	20000020 	.word	0x20000020
 800ebf8:	e000ef34 	.word	0xe000ef34

0800ebfc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	b083      	sub	sp, #12
 800ec00:	af00      	add	r7, sp, #0
	__asm volatile
 800ec02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec06:	b672      	cpsid	i
 800ec08:	f383 8811 	msr	BASEPRI, r3
 800ec0c:	f3bf 8f6f 	isb	sy
 800ec10:	f3bf 8f4f 	dsb	sy
 800ec14:	b662      	cpsie	i
 800ec16:	607b      	str	r3, [r7, #4]
}
 800ec18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ec1a:	4b10      	ldr	r3, [pc, #64]	; (800ec5c <vPortEnterCritical+0x60>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	3301      	adds	r3, #1
 800ec20:	4a0e      	ldr	r2, [pc, #56]	; (800ec5c <vPortEnterCritical+0x60>)
 800ec22:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ec24:	4b0d      	ldr	r3, [pc, #52]	; (800ec5c <vPortEnterCritical+0x60>)
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	2b01      	cmp	r3, #1
 800ec2a:	d111      	bne.n	800ec50 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ec2c:	4b0c      	ldr	r3, [pc, #48]	; (800ec60 <vPortEnterCritical+0x64>)
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	b2db      	uxtb	r3, r3
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d00c      	beq.n	800ec50 <vPortEnterCritical+0x54>
	__asm volatile
 800ec36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec3a:	b672      	cpsid	i
 800ec3c:	f383 8811 	msr	BASEPRI, r3
 800ec40:	f3bf 8f6f 	isb	sy
 800ec44:	f3bf 8f4f 	dsb	sy
 800ec48:	b662      	cpsie	i
 800ec4a:	603b      	str	r3, [r7, #0]
}
 800ec4c:	bf00      	nop
 800ec4e:	e7fe      	b.n	800ec4e <vPortEnterCritical+0x52>
	}
}
 800ec50:	bf00      	nop
 800ec52:	370c      	adds	r7, #12
 800ec54:	46bd      	mov	sp, r7
 800ec56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5a:	4770      	bx	lr
 800ec5c:	20000020 	.word	0x20000020
 800ec60:	e000ed04 	.word	0xe000ed04

0800ec64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ec64:	b480      	push	{r7}
 800ec66:	b083      	sub	sp, #12
 800ec68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ec6a:	4b13      	ldr	r3, [pc, #76]	; (800ecb8 <vPortExitCritical+0x54>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d10c      	bne.n	800ec8c <vPortExitCritical+0x28>
	__asm volatile
 800ec72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec76:	b672      	cpsid	i
 800ec78:	f383 8811 	msr	BASEPRI, r3
 800ec7c:	f3bf 8f6f 	isb	sy
 800ec80:	f3bf 8f4f 	dsb	sy
 800ec84:	b662      	cpsie	i
 800ec86:	607b      	str	r3, [r7, #4]
}
 800ec88:	bf00      	nop
 800ec8a:	e7fe      	b.n	800ec8a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800ec8c:	4b0a      	ldr	r3, [pc, #40]	; (800ecb8 <vPortExitCritical+0x54>)
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	3b01      	subs	r3, #1
 800ec92:	4a09      	ldr	r2, [pc, #36]	; (800ecb8 <vPortExitCritical+0x54>)
 800ec94:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ec96:	4b08      	ldr	r3, [pc, #32]	; (800ecb8 <vPortExitCritical+0x54>)
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d105      	bne.n	800ecaa <vPortExitCritical+0x46>
 800ec9e:	2300      	movs	r3, #0
 800eca0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	f383 8811 	msr	BASEPRI, r3
}
 800eca8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ecaa:	bf00      	nop
 800ecac:	370c      	adds	r7, #12
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb4:	4770      	bx	lr
 800ecb6:	bf00      	nop
 800ecb8:	20000020 	.word	0x20000020
 800ecbc:	00000000 	.word	0x00000000

0800ecc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ecc0:	f3ef 8009 	mrs	r0, PSP
 800ecc4:	f3bf 8f6f 	isb	sy
 800ecc8:	4b15      	ldr	r3, [pc, #84]	; (800ed20 <pxCurrentTCBConst>)
 800ecca:	681a      	ldr	r2, [r3, #0]
 800eccc:	f01e 0f10 	tst.w	lr, #16
 800ecd0:	bf08      	it	eq
 800ecd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ecd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecda:	6010      	str	r0, [r2, #0]
 800ecdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ece0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ece4:	b672      	cpsid	i
 800ece6:	f380 8811 	msr	BASEPRI, r0
 800ecea:	f3bf 8f4f 	dsb	sy
 800ecee:	f3bf 8f6f 	isb	sy
 800ecf2:	b662      	cpsie	i
 800ecf4:	f7ff f9c4 	bl	800e080 <vTaskSwitchContext>
 800ecf8:	f04f 0000 	mov.w	r0, #0
 800ecfc:	f380 8811 	msr	BASEPRI, r0
 800ed00:	bc09      	pop	{r0, r3}
 800ed02:	6819      	ldr	r1, [r3, #0]
 800ed04:	6808      	ldr	r0, [r1, #0]
 800ed06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed0a:	f01e 0f10 	tst.w	lr, #16
 800ed0e:	bf08      	it	eq
 800ed10:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ed14:	f380 8809 	msr	PSP, r0
 800ed18:	f3bf 8f6f 	isb	sy
 800ed1c:	4770      	bx	lr
 800ed1e:	bf00      	nop

0800ed20 <pxCurrentTCBConst>:
 800ed20:	20000b94 	.word	0x20000b94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ed24:	bf00      	nop
 800ed26:	bf00      	nop

0800ed28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b082      	sub	sp, #8
 800ed2c:	af00      	add	r7, sp, #0
	__asm volatile
 800ed2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed32:	b672      	cpsid	i
 800ed34:	f383 8811 	msr	BASEPRI, r3
 800ed38:	f3bf 8f6f 	isb	sy
 800ed3c:	f3bf 8f4f 	dsb	sy
 800ed40:	b662      	cpsie	i
 800ed42:	607b      	str	r3, [r7, #4]
}
 800ed44:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ed46:	f7ff f8e1 	bl	800df0c <xTaskIncrementTick>
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d003      	beq.n	800ed58 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ed50:	4b06      	ldr	r3, [pc, #24]	; (800ed6c <SysTick_Handler+0x44>)
 800ed52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed56:	601a      	str	r2, [r3, #0]
 800ed58:	2300      	movs	r3, #0
 800ed5a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ed5c:	683b      	ldr	r3, [r7, #0]
 800ed5e:	f383 8811 	msr	BASEPRI, r3
}
 800ed62:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ed64:	bf00      	nop
 800ed66:	3708      	adds	r7, #8
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	bd80      	pop	{r7, pc}
 800ed6c:	e000ed04 	.word	0xe000ed04

0800ed70 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ed70:	b480      	push	{r7}
 800ed72:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ed74:	4b0b      	ldr	r3, [pc, #44]	; (800eda4 <vPortSetupTimerInterrupt+0x34>)
 800ed76:	2200      	movs	r2, #0
 800ed78:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ed7a:	4b0b      	ldr	r3, [pc, #44]	; (800eda8 <vPortSetupTimerInterrupt+0x38>)
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ed80:	4b0a      	ldr	r3, [pc, #40]	; (800edac <vPortSetupTimerInterrupt+0x3c>)
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	4a0a      	ldr	r2, [pc, #40]	; (800edb0 <vPortSetupTimerInterrupt+0x40>)
 800ed86:	fba2 2303 	umull	r2, r3, r2, r3
 800ed8a:	099b      	lsrs	r3, r3, #6
 800ed8c:	4a09      	ldr	r2, [pc, #36]	; (800edb4 <vPortSetupTimerInterrupt+0x44>)
 800ed8e:	3b01      	subs	r3, #1
 800ed90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ed92:	4b04      	ldr	r3, [pc, #16]	; (800eda4 <vPortSetupTimerInterrupt+0x34>)
 800ed94:	2207      	movs	r2, #7
 800ed96:	601a      	str	r2, [r3, #0]
}
 800ed98:	bf00      	nop
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda0:	4770      	bx	lr
 800eda2:	bf00      	nop
 800eda4:	e000e010 	.word	0xe000e010
 800eda8:	e000e018 	.word	0xe000e018
 800edac:	20000014 	.word	0x20000014
 800edb0:	10624dd3 	.word	0x10624dd3
 800edb4:	e000e014 	.word	0xe000e014

0800edb8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800edb8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800edc8 <vPortEnableVFP+0x10>
 800edbc:	6801      	ldr	r1, [r0, #0]
 800edbe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800edc2:	6001      	str	r1, [r0, #0]
 800edc4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800edc6:	bf00      	nop
 800edc8:	e000ed88 	.word	0xe000ed88

0800edcc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800edcc:	b480      	push	{r7}
 800edce:	b085      	sub	sp, #20
 800edd0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800edd2:	f3ef 8305 	mrs	r3, IPSR
 800edd6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	2b0f      	cmp	r3, #15
 800eddc:	d916      	bls.n	800ee0c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800edde:	4a19      	ldr	r2, [pc, #100]	; (800ee44 <vPortValidateInterruptPriority+0x78>)
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	4413      	add	r3, r2
 800ede4:	781b      	ldrb	r3, [r3, #0]
 800ede6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ede8:	4b17      	ldr	r3, [pc, #92]	; (800ee48 <vPortValidateInterruptPriority+0x7c>)
 800edea:	781b      	ldrb	r3, [r3, #0]
 800edec:	7afa      	ldrb	r2, [r7, #11]
 800edee:	429a      	cmp	r2, r3
 800edf0:	d20c      	bcs.n	800ee0c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800edf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edf6:	b672      	cpsid	i
 800edf8:	f383 8811 	msr	BASEPRI, r3
 800edfc:	f3bf 8f6f 	isb	sy
 800ee00:	f3bf 8f4f 	dsb	sy
 800ee04:	b662      	cpsie	i
 800ee06:	607b      	str	r3, [r7, #4]
}
 800ee08:	bf00      	nop
 800ee0a:	e7fe      	b.n	800ee0a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ee0c:	4b0f      	ldr	r3, [pc, #60]	; (800ee4c <vPortValidateInterruptPriority+0x80>)
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ee14:	4b0e      	ldr	r3, [pc, #56]	; (800ee50 <vPortValidateInterruptPriority+0x84>)
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	d90c      	bls.n	800ee36 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800ee1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee20:	b672      	cpsid	i
 800ee22:	f383 8811 	msr	BASEPRI, r3
 800ee26:	f3bf 8f6f 	isb	sy
 800ee2a:	f3bf 8f4f 	dsb	sy
 800ee2e:	b662      	cpsie	i
 800ee30:	603b      	str	r3, [r7, #0]
}
 800ee32:	bf00      	nop
 800ee34:	e7fe      	b.n	800ee34 <vPortValidateInterruptPriority+0x68>
	}
 800ee36:	bf00      	nop
 800ee38:	3714      	adds	r7, #20
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee40:	4770      	bx	lr
 800ee42:	bf00      	nop
 800ee44:	e000e3f0 	.word	0xe000e3f0
 800ee48:	20000cc0 	.word	0x20000cc0
 800ee4c:	e000ed0c 	.word	0xe000ed0c
 800ee50:	20000cc4 	.word	0x20000cc4

0800ee54 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b08a      	sub	sp, #40	; 0x28
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ee60:	f7fe ff86 	bl	800dd70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ee64:	4b5e      	ldr	r3, [pc, #376]	; (800efe0 <pvPortMalloc+0x18c>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d101      	bne.n	800ee70 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ee6c:	f000 f920 	bl	800f0b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ee70:	4b5c      	ldr	r3, [pc, #368]	; (800efe4 <pvPortMalloc+0x190>)
 800ee72:	681a      	ldr	r2, [r3, #0]
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	4013      	ands	r3, r2
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	f040 8092 	bne.w	800efa2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d01f      	beq.n	800eec4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800ee84:	2208      	movs	r2, #8
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	4413      	add	r3, r2
 800ee8a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	f003 0307 	and.w	r3, r3, #7
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d016      	beq.n	800eec4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	f023 0307 	bic.w	r3, r3, #7
 800ee9c:	3308      	adds	r3, #8
 800ee9e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	f003 0307 	and.w	r3, r3, #7
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d00c      	beq.n	800eec4 <pvPortMalloc+0x70>
	__asm volatile
 800eeaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeae:	b672      	cpsid	i
 800eeb0:	f383 8811 	msr	BASEPRI, r3
 800eeb4:	f3bf 8f6f 	isb	sy
 800eeb8:	f3bf 8f4f 	dsb	sy
 800eebc:	b662      	cpsie	i
 800eebe:	617b      	str	r3, [r7, #20]
}
 800eec0:	bf00      	nop
 800eec2:	e7fe      	b.n	800eec2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d06b      	beq.n	800efa2 <pvPortMalloc+0x14e>
 800eeca:	4b47      	ldr	r3, [pc, #284]	; (800efe8 <pvPortMalloc+0x194>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	687a      	ldr	r2, [r7, #4]
 800eed0:	429a      	cmp	r2, r3
 800eed2:	d866      	bhi.n	800efa2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800eed4:	4b45      	ldr	r3, [pc, #276]	; (800efec <pvPortMalloc+0x198>)
 800eed6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800eed8:	4b44      	ldr	r3, [pc, #272]	; (800efec <pvPortMalloc+0x198>)
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eede:	e004      	b.n	800eeea <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800eee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800eee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eeea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeec:	685b      	ldr	r3, [r3, #4]
 800eeee:	687a      	ldr	r2, [r7, #4]
 800eef0:	429a      	cmp	r2, r3
 800eef2:	d903      	bls.n	800eefc <pvPortMalloc+0xa8>
 800eef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d1f1      	bne.n	800eee0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800eefc:	4b38      	ldr	r3, [pc, #224]	; (800efe0 <pvPortMalloc+0x18c>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef02:	429a      	cmp	r2, r3
 800ef04:	d04d      	beq.n	800efa2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ef06:	6a3b      	ldr	r3, [r7, #32]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	2208      	movs	r2, #8
 800ef0c:	4413      	add	r3, r2
 800ef0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ef10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef12:	681a      	ldr	r2, [r3, #0]
 800ef14:	6a3b      	ldr	r3, [r7, #32]
 800ef16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ef18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef1a:	685a      	ldr	r2, [r3, #4]
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	1ad2      	subs	r2, r2, r3
 800ef20:	2308      	movs	r3, #8
 800ef22:	005b      	lsls	r3, r3, #1
 800ef24:	429a      	cmp	r2, r3
 800ef26:	d921      	bls.n	800ef6c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ef28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	4413      	add	r3, r2
 800ef2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ef30:	69bb      	ldr	r3, [r7, #24]
 800ef32:	f003 0307 	and.w	r3, r3, #7
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d00c      	beq.n	800ef54 <pvPortMalloc+0x100>
	__asm volatile
 800ef3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef3e:	b672      	cpsid	i
 800ef40:	f383 8811 	msr	BASEPRI, r3
 800ef44:	f3bf 8f6f 	isb	sy
 800ef48:	f3bf 8f4f 	dsb	sy
 800ef4c:	b662      	cpsie	i
 800ef4e:	613b      	str	r3, [r7, #16]
}
 800ef50:	bf00      	nop
 800ef52:	e7fe      	b.n	800ef52 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ef54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef56:	685a      	ldr	r2, [r3, #4]
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	1ad2      	subs	r2, r2, r3
 800ef5c:	69bb      	ldr	r3, [r7, #24]
 800ef5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ef60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef62:	687a      	ldr	r2, [r7, #4]
 800ef64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ef66:	69b8      	ldr	r0, [r7, #24]
 800ef68:	f000 f904 	bl	800f174 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ef6c:	4b1e      	ldr	r3, [pc, #120]	; (800efe8 <pvPortMalloc+0x194>)
 800ef6e:	681a      	ldr	r2, [r3, #0]
 800ef70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef72:	685b      	ldr	r3, [r3, #4]
 800ef74:	1ad3      	subs	r3, r2, r3
 800ef76:	4a1c      	ldr	r2, [pc, #112]	; (800efe8 <pvPortMalloc+0x194>)
 800ef78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ef7a:	4b1b      	ldr	r3, [pc, #108]	; (800efe8 <pvPortMalloc+0x194>)
 800ef7c:	681a      	ldr	r2, [r3, #0]
 800ef7e:	4b1c      	ldr	r3, [pc, #112]	; (800eff0 <pvPortMalloc+0x19c>)
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	429a      	cmp	r2, r3
 800ef84:	d203      	bcs.n	800ef8e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ef86:	4b18      	ldr	r3, [pc, #96]	; (800efe8 <pvPortMalloc+0x194>)
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	4a19      	ldr	r2, [pc, #100]	; (800eff0 <pvPortMalloc+0x19c>)
 800ef8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ef8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef90:	685a      	ldr	r2, [r3, #4]
 800ef92:	4b14      	ldr	r3, [pc, #80]	; (800efe4 <pvPortMalloc+0x190>)
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	431a      	orrs	r2, r3
 800ef98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ef9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef9e:	2200      	movs	r2, #0
 800efa0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800efa2:	f7fe fef3 	bl	800dd8c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800efa6:	69fb      	ldr	r3, [r7, #28]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d101      	bne.n	800efb0 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800efac:	f7f1 fef6 	bl	8000d9c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800efb0:	69fb      	ldr	r3, [r7, #28]
 800efb2:	f003 0307 	and.w	r3, r3, #7
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d00c      	beq.n	800efd4 <pvPortMalloc+0x180>
	__asm volatile
 800efba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efbe:	b672      	cpsid	i
 800efc0:	f383 8811 	msr	BASEPRI, r3
 800efc4:	f3bf 8f6f 	isb	sy
 800efc8:	f3bf 8f4f 	dsb	sy
 800efcc:	b662      	cpsie	i
 800efce:	60fb      	str	r3, [r7, #12]
}
 800efd0:	bf00      	nop
 800efd2:	e7fe      	b.n	800efd2 <pvPortMalloc+0x17e>
	return pvReturn;
 800efd4:	69fb      	ldr	r3, [r7, #28]
}
 800efd6:	4618      	mov	r0, r3
 800efd8:	3728      	adds	r7, #40	; 0x28
 800efda:	46bd      	mov	sp, r7
 800efdc:	bd80      	pop	{r7, pc}
 800efde:	bf00      	nop
 800efe0:	20008cd0 	.word	0x20008cd0
 800efe4:	20008cdc 	.word	0x20008cdc
 800efe8:	20008cd4 	.word	0x20008cd4
 800efec:	20008cc8 	.word	0x20008cc8
 800eff0:	20008cd8 	.word	0x20008cd8

0800eff4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b086      	sub	sp, #24
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d04c      	beq.n	800f0a0 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f006:	2308      	movs	r3, #8
 800f008:	425b      	negs	r3, r3
 800f00a:	697a      	ldr	r2, [r7, #20]
 800f00c:	4413      	add	r3, r2
 800f00e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f010:	697b      	ldr	r3, [r7, #20]
 800f012:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f014:	693b      	ldr	r3, [r7, #16]
 800f016:	685a      	ldr	r2, [r3, #4]
 800f018:	4b23      	ldr	r3, [pc, #140]	; (800f0a8 <vPortFree+0xb4>)
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	4013      	ands	r3, r2
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d10c      	bne.n	800f03c <vPortFree+0x48>
	__asm volatile
 800f022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f026:	b672      	cpsid	i
 800f028:	f383 8811 	msr	BASEPRI, r3
 800f02c:	f3bf 8f6f 	isb	sy
 800f030:	f3bf 8f4f 	dsb	sy
 800f034:	b662      	cpsie	i
 800f036:	60fb      	str	r3, [r7, #12]
}
 800f038:	bf00      	nop
 800f03a:	e7fe      	b.n	800f03a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f03c:	693b      	ldr	r3, [r7, #16]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d00c      	beq.n	800f05e <vPortFree+0x6a>
	__asm volatile
 800f044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f048:	b672      	cpsid	i
 800f04a:	f383 8811 	msr	BASEPRI, r3
 800f04e:	f3bf 8f6f 	isb	sy
 800f052:	f3bf 8f4f 	dsb	sy
 800f056:	b662      	cpsie	i
 800f058:	60bb      	str	r3, [r7, #8]
}
 800f05a:	bf00      	nop
 800f05c:	e7fe      	b.n	800f05c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f05e:	693b      	ldr	r3, [r7, #16]
 800f060:	685a      	ldr	r2, [r3, #4]
 800f062:	4b11      	ldr	r3, [pc, #68]	; (800f0a8 <vPortFree+0xb4>)
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	4013      	ands	r3, r2
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d019      	beq.n	800f0a0 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f06c:	693b      	ldr	r3, [r7, #16]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d115      	bne.n	800f0a0 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f074:	693b      	ldr	r3, [r7, #16]
 800f076:	685a      	ldr	r2, [r3, #4]
 800f078:	4b0b      	ldr	r3, [pc, #44]	; (800f0a8 <vPortFree+0xb4>)
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	43db      	mvns	r3, r3
 800f07e:	401a      	ands	r2, r3
 800f080:	693b      	ldr	r3, [r7, #16]
 800f082:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f084:	f7fe fe74 	bl	800dd70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f088:	693b      	ldr	r3, [r7, #16]
 800f08a:	685a      	ldr	r2, [r3, #4]
 800f08c:	4b07      	ldr	r3, [pc, #28]	; (800f0ac <vPortFree+0xb8>)
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	4413      	add	r3, r2
 800f092:	4a06      	ldr	r2, [pc, #24]	; (800f0ac <vPortFree+0xb8>)
 800f094:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f096:	6938      	ldr	r0, [r7, #16]
 800f098:	f000 f86c 	bl	800f174 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f09c:	f7fe fe76 	bl	800dd8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f0a0:	bf00      	nop
 800f0a2:	3718      	adds	r7, #24
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	bd80      	pop	{r7, pc}
 800f0a8:	20008cdc 	.word	0x20008cdc
 800f0ac:	20008cd4 	.word	0x20008cd4

0800f0b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f0b0:	b480      	push	{r7}
 800f0b2:	b085      	sub	sp, #20
 800f0b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f0b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f0ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f0bc:	4b27      	ldr	r3, [pc, #156]	; (800f15c <prvHeapInit+0xac>)
 800f0be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	f003 0307 	and.w	r3, r3, #7
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d00c      	beq.n	800f0e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	3307      	adds	r3, #7
 800f0ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	f023 0307 	bic.w	r3, r3, #7
 800f0d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f0d8:	68ba      	ldr	r2, [r7, #8]
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	1ad3      	subs	r3, r2, r3
 800f0de:	4a1f      	ldr	r2, [pc, #124]	; (800f15c <prvHeapInit+0xac>)
 800f0e0:	4413      	add	r3, r2
 800f0e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f0e8:	4a1d      	ldr	r2, [pc, #116]	; (800f160 <prvHeapInit+0xb0>)
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f0ee:	4b1c      	ldr	r3, [pc, #112]	; (800f160 <prvHeapInit+0xb0>)
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	68ba      	ldr	r2, [r7, #8]
 800f0f8:	4413      	add	r3, r2
 800f0fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f0fc:	2208      	movs	r2, #8
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	1a9b      	subs	r3, r3, r2
 800f102:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	f023 0307 	bic.w	r3, r3, #7
 800f10a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	4a15      	ldr	r2, [pc, #84]	; (800f164 <prvHeapInit+0xb4>)
 800f110:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f112:	4b14      	ldr	r3, [pc, #80]	; (800f164 <prvHeapInit+0xb4>)
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	2200      	movs	r2, #0
 800f118:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f11a:	4b12      	ldr	r3, [pc, #72]	; (800f164 <prvHeapInit+0xb4>)
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	2200      	movs	r2, #0
 800f120:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f126:	683b      	ldr	r3, [r7, #0]
 800f128:	68fa      	ldr	r2, [r7, #12]
 800f12a:	1ad2      	subs	r2, r2, r3
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f130:	4b0c      	ldr	r3, [pc, #48]	; (800f164 <prvHeapInit+0xb4>)
 800f132:	681a      	ldr	r2, [r3, #0]
 800f134:	683b      	ldr	r3, [r7, #0]
 800f136:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	685b      	ldr	r3, [r3, #4]
 800f13c:	4a0a      	ldr	r2, [pc, #40]	; (800f168 <prvHeapInit+0xb8>)
 800f13e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	685b      	ldr	r3, [r3, #4]
 800f144:	4a09      	ldr	r2, [pc, #36]	; (800f16c <prvHeapInit+0xbc>)
 800f146:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f148:	4b09      	ldr	r3, [pc, #36]	; (800f170 <prvHeapInit+0xc0>)
 800f14a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f14e:	601a      	str	r2, [r3, #0]
}
 800f150:	bf00      	nop
 800f152:	3714      	adds	r7, #20
 800f154:	46bd      	mov	sp, r7
 800f156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15a:	4770      	bx	lr
 800f15c:	20000cc8 	.word	0x20000cc8
 800f160:	20008cc8 	.word	0x20008cc8
 800f164:	20008cd0 	.word	0x20008cd0
 800f168:	20008cd8 	.word	0x20008cd8
 800f16c:	20008cd4 	.word	0x20008cd4
 800f170:	20008cdc 	.word	0x20008cdc

0800f174 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f174:	b480      	push	{r7}
 800f176:	b085      	sub	sp, #20
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f17c:	4b28      	ldr	r3, [pc, #160]	; (800f220 <prvInsertBlockIntoFreeList+0xac>)
 800f17e:	60fb      	str	r3, [r7, #12]
 800f180:	e002      	b.n	800f188 <prvInsertBlockIntoFreeList+0x14>
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	60fb      	str	r3, [r7, #12]
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	687a      	ldr	r2, [r7, #4]
 800f18e:	429a      	cmp	r2, r3
 800f190:	d8f7      	bhi.n	800f182 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	685b      	ldr	r3, [r3, #4]
 800f19a:	68ba      	ldr	r2, [r7, #8]
 800f19c:	4413      	add	r3, r2
 800f19e:	687a      	ldr	r2, [r7, #4]
 800f1a0:	429a      	cmp	r2, r3
 800f1a2:	d108      	bne.n	800f1b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	685a      	ldr	r2, [r3, #4]
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	685b      	ldr	r3, [r3, #4]
 800f1ac:	441a      	add	r2, r3
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	685b      	ldr	r3, [r3, #4]
 800f1be:	68ba      	ldr	r2, [r7, #8]
 800f1c0:	441a      	add	r2, r3
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	d118      	bne.n	800f1fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	681a      	ldr	r2, [r3, #0]
 800f1ce:	4b15      	ldr	r3, [pc, #84]	; (800f224 <prvInsertBlockIntoFreeList+0xb0>)
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	429a      	cmp	r2, r3
 800f1d4:	d00d      	beq.n	800f1f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	685a      	ldr	r2, [r3, #4]
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	685b      	ldr	r3, [r3, #4]
 800f1e0:	441a      	add	r2, r3
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	681a      	ldr	r2, [r3, #0]
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	601a      	str	r2, [r3, #0]
 800f1f0:	e008      	b.n	800f204 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f1f2:	4b0c      	ldr	r3, [pc, #48]	; (800f224 <prvInsertBlockIntoFreeList+0xb0>)
 800f1f4:	681a      	ldr	r2, [r3, #0]
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	601a      	str	r2, [r3, #0]
 800f1fa:	e003      	b.n	800f204 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	681a      	ldr	r2, [r3, #0]
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f204:	68fa      	ldr	r2, [r7, #12]
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	429a      	cmp	r2, r3
 800f20a:	d002      	beq.n	800f212 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	687a      	ldr	r2, [r7, #4]
 800f210:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f212:	bf00      	nop
 800f214:	3714      	adds	r7, #20
 800f216:	46bd      	mov	sp, r7
 800f218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21c:	4770      	bx	lr
 800f21e:	bf00      	nop
 800f220:	20008cc8 	.word	0x20008cc8
 800f224:	20008cd0 	.word	0x20008cd0

0800f228 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800f22c:	f006 fd34 	bl	8015c98 <touchgfx_init>
}
 800f230:	bf00      	nop
 800f232:	bd80      	pop	{r7, pc}

0800f234 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800f234:	b580      	push	{r7, lr}
 800f236:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 800f238:	f006 fd58 	bl	8015cec <touchgfx_taskEntry>
}
 800f23c:	bf00      	nop
 800f23e:	bd80      	pop	{r7, pc}

0800f240 <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 800f240:	b480      	push	{r7}
 800f242:	b083      	sub	sp, #12
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
    {
 800f248:	4a04      	ldr	r2, [pc, #16]	; (800f25c <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	601a      	str	r2, [r3, #0]
    }
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	4618      	mov	r0, r3
 800f252:	370c      	adds	r7, #12
 800f254:	46bd      	mov	sp, r7
 800f256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25a:	4770      	bx	lr
 800f25c:	08027c50 	.word	0x08027c50

0800f260 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800f260:	b580      	push	{r7, lr}
 800f262:	b082      	sub	sp, #8
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
    }
 800f268:	6878      	ldr	r0, [r7, #4]
 800f26a:	f7ff ffe9 	bl	800f240 <_ZN8touchgfx12FontProviderD1Ev>
 800f26e:	2104      	movs	r1, #4
 800f270:	6878      	ldr	r0, [r7, #4]
 800f272:	f016 ff2f 	bl	80260d4 <_ZdlPvj>
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	4618      	mov	r0, r3
 800f27a:	3708      	adds	r7, #8
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd80      	pop	{r7, pc}

0800f280 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b082      	sub	sp, #8
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
 800f288:	460b      	mov	r3, r1
 800f28a:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800f28c:	887b      	ldrh	r3, [r7, #2]
 800f28e:	2b07      	cmp	r3, #7
 800f290:	d83a      	bhi.n	800f308 <_ZN23ApplicationFontProvider7getFontEt+0x88>
 800f292:	a201      	add	r2, pc, #4	; (adr r2, 800f298 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 800f294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f298:	0800f2b9 	.word	0x0800f2b9
 800f29c:	0800f2c3 	.word	0x0800f2c3
 800f2a0:	0800f2cd 	.word	0x0800f2cd
 800f2a4:	0800f2d7 	.word	0x0800f2d7
 800f2a8:	0800f2e1 	.word	0x0800f2e1
 800f2ac:	0800f2eb 	.word	0x0800f2eb
 800f2b0:	0800f2f5 	.word	0x0800f2f5
 800f2b4:	0800f2ff 	.word	0x0800f2ff
    {
    case Typography::DEFAULT:
        // Asap_Bold_14_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800f2b8:	f004 fc50 	bl	8013b5c <_ZN17TypedTextDatabase8getFontsEv>
 800f2bc:	4603      	mov	r3, r0
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	e023      	b.n	800f30a <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPMTEXT:
        // Asap_Bold_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800f2c2:	f004 fc4b 	bl	8013b5c <_ZN17TypedTextDatabase8getFontsEv>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	685b      	ldr	r3, [r3, #4]
 800f2ca:	e01e      	b.n	800f30a <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::VALUES:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800f2cc:	f004 fc46 	bl	8013b5c <_ZN17TypedTextDatabase8getFontsEv>
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	689b      	ldr	r3, [r3, #8]
 800f2d4:	e019      	b.n	800f30a <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LAMBDA:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800f2d6:	f004 fc41 	bl	8013b5c <_ZN17TypedTextDatabase8getFontsEv>
 800f2da:	4603      	mov	r3, r0
 800f2dc:	689b      	ldr	r3, [r3, #8]
 800f2de:	e014      	b.n	800f30a <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::SMALL:
        // Asap_Bold_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800f2e0:	f004 fc3c 	bl	8013b5c <_ZN17TypedTextDatabase8getFontsEv>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	68db      	ldr	r3, [r3, #12]
 800f2e8:	e00f      	b.n	800f30a <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LARGE:
        // Asap_Bold_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800f2ea:	f004 fc37 	bl	8013b5c <_ZN17TypedTextDatabase8getFontsEv>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	691b      	ldr	r3, [r3, #16]
 800f2f2:	e00a      	b.n	800f30a <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_LETTERS:
        // Asap_Bold_21_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 800f2f4:	f004 fc32 	bl	8013b5c <_ZN17TypedTextDatabase8getFontsEv>
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	695b      	ldr	r3, [r3, #20]
 800f2fc:	e005      	b.n	800f30a <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_DESCRIPTOR:
        // Asap_Bold_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 800f2fe:	f004 fc2d 	bl	8013b5c <_ZN17TypedTextDatabase8getFontsEv>
 800f302:	4603      	mov	r3, r0
 800f304:	699b      	ldr	r3, [r3, #24]
 800f306:	e000      	b.n	800f30a <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    default:
        return 0;
 800f308:	2300      	movs	r3, #0
    }
}
 800f30a:	4618      	mov	r0, r3
 800f30c:	3708      	adds	r7, #8
 800f30e:	46bd      	mov	sp, r7
 800f310:	bd80      	pop	{r7, pc}
 800f312:	bf00      	nop

0800f314 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId RPM_LETTERS = 5;    // Asap_Bold_21_4bpp
    static const touchgfx::FontId RPM_DESCRIPTOR = 6; // Asap_Bold_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 7;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800f314:	b580      	push	{r7, lr}
 800f316:	b082      	sub	sp, #8
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
 800f31c:	4a05      	ldr	r2, [pc, #20]	; (800f334 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	601a      	str	r2, [r3, #0]
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	4618      	mov	r0, r3
 800f326:	f7ff ff8b 	bl	800f240 <_ZN8touchgfx12FontProviderD1Ev>
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	4618      	mov	r0, r3
 800f32e:	3708      	adds	r7, #8
 800f330:	46bd      	mov	sp, r7
 800f332:	bd80      	pop	{r7, pc}
 800f334:	08027c3c 	.word	0x08027c3c

0800f338 <_ZN23ApplicationFontProviderD0Ev>:
 800f338:	b580      	push	{r7, lr}
 800f33a:	b082      	sub	sp, #8
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
 800f340:	6878      	ldr	r0, [r7, #4]
 800f342:	f7ff ffe7 	bl	800f314 <_ZN23ApplicationFontProviderD1Ev>
 800f346:	2104      	movs	r1, #4
 800f348:	6878      	ldr	r0, [r7, #4]
 800f34a:	f016 fec3 	bl	80260d4 <_ZdlPvj>
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	4618      	mov	r0, r3
 800f352:	3708      	adds	r7, #8
 800f354:	46bd      	mov	sp, r7
 800f356:	bd80      	pop	{r7, pc}

0800f358 <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 800f358:	b480      	push	{r7}
 800f35a:	b083      	sub	sp, #12
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
 800f360:	4a04      	ldr	r2, [pc, #16]	; (800f374 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	601a      	str	r2, [r3, #0]
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	4618      	mov	r0, r3
 800f36a:	370c      	adds	r7, #12
 800f36c:	46bd      	mov	sp, r7
 800f36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f372:	4770      	bx	lr
 800f374:	08029c78 	.word	0x08029c78

0800f378 <_ZN8touchgfx4FontD0Ev>:
 800f378:	b580      	push	{r7, lr}
 800f37a:	b082      	sub	sp, #8
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
 800f380:	6878      	ldr	r0, [r7, #4]
 800f382:	f7ff ffe9 	bl	800f358 <_ZN8touchgfx4FontD1Ev>
 800f386:	2110      	movs	r1, #16
 800f388:	6878      	ldr	r0, [r7, #4]
 800f38a:	f016 fea3 	bl	80260d4 <_ZdlPvj>
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	4618      	mov	r0, r3
 800f392:	3708      	adds	r7, #8
 800f394:	46bd      	mov	sp, r7
 800f396:	bd80      	pop	{r7, pc}

0800f398 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800f398:	b590      	push	{r4, r7, lr}
 800f39a:	b087      	sub	sp, #28
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
 800f3a0:	460b      	mov	r3, r1
 800f3a2:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	3308      	adds	r3, #8
 800f3b2:	681c      	ldr	r4, [r3, #0]
 800f3b4:	f107 030f 	add.w	r3, r7, #15
 800f3b8:	f107 0210 	add.w	r2, r7, #16
 800f3bc:	8879      	ldrh	r1, [r7, #2]
 800f3be:	6878      	ldr	r0, [r7, #4]
 800f3c0:	47a0      	blx	r4
 800f3c2:	6178      	str	r0, [r7, #20]
        return glyph;
 800f3c4:	697b      	ldr	r3, [r7, #20]
    }
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	371c      	adds	r7, #28
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	bd90      	pop	{r4, r7, pc}

0800f3ce <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800f3ce:	b480      	push	{r7}
 800f3d0:	b083      	sub	sp, #12
 800f3d2:	af00      	add	r7, sp, #0
 800f3d4:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	895b      	ldrh	r3, [r3, #10]
    }
 800f3da:	4618      	mov	r0, r3
 800f3dc:	370c      	adds	r7, #12
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e4:	4770      	bx	lr

0800f3e6 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800f3e6:	b480      	push	{r7}
 800f3e8:	b083      	sub	sp, #12
 800f3ea:	af00      	add	r7, sp, #0
 800f3ec:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	899b      	ldrh	r3, [r3, #12]
    }
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	370c      	adds	r7, #12
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fc:	4770      	bx	lr

0800f3fe <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 800f3fe:	b480      	push	{r7}
 800f400:	b083      	sub	sp, #12
 800f402:	af00      	add	r7, sp, #0
 800f404:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	889b      	ldrh	r3, [r3, #4]
    }
 800f40a:	4618      	mov	r0, r3
 800f40c:	370c      	adds	r7, #12
 800f40e:	46bd      	mov	sp, r7
 800f410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f414:	4770      	bx	lr

0800f416 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 800f416:	b480      	push	{r7}
 800f418:	b083      	sub	sp, #12
 800f41a:	af00      	add	r7, sp, #0
 800f41c:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	889a      	ldrh	r2, [r3, #4]
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	799b      	ldrb	r3, [r3, #6]
 800f426:	b29b      	uxth	r3, r3
 800f428:	4413      	add	r3, r2
 800f42a:	b29b      	uxth	r3, r3
    }
 800f42c:	4618      	mov	r0, r3
 800f42e:	370c      	adds	r7, #12
 800f430:	46bd      	mov	sp, r7
 800f432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f436:	4770      	bx	lr

0800f438 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 800f438:	b480      	push	{r7}
 800f43a:	b083      	sub	sp, #12
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	79db      	ldrb	r3, [r3, #7]
 800f444:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800f448:	b2db      	uxtb	r3, r3
    }
 800f44a:	4618      	mov	r0, r3
 800f44c:	370c      	adds	r7, #12
 800f44e:	46bd      	mov	sp, r7
 800f450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f454:	4770      	bx	lr

0800f456 <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 800f456:	b480      	push	{r7}
 800f458:	b083      	sub	sp, #12
 800f45a:	af00      	add	r7, sp, #0
 800f45c:	6078      	str	r0, [r7, #4]
    {
        return a4;
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	79db      	ldrb	r3, [r3, #7]
 800f462:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f466:	b2db      	uxtb	r3, r3
    }
 800f468:	4618      	mov	r0, r3
 800f46a:	370c      	adds	r7, #12
 800f46c:	46bd      	mov	sp, r7
 800f46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f472:	4770      	bx	lr

0800f474 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 800f474:	b580      	push	{r7, lr}
 800f476:	b082      	sub	sp, #8
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
 800f47c:	4a05      	ldr	r2, [pc, #20]	; (800f494 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	601a      	str	r2, [r3, #0]
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	4618      	mov	r0, r3
 800f486:	f7ff ff67 	bl	800f358 <_ZN8touchgfx4FontD1Ev>
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	4618      	mov	r0, r3
 800f48e:	3708      	adds	r7, #8
 800f490:	46bd      	mov	sp, r7
 800f492:	bd80      	pop	{r7, pc}
 800f494:	08029d30 	.word	0x08029d30

0800f498 <_ZN8touchgfx9ConstFontD0Ev>:
 800f498:	b580      	push	{r7, lr}
 800f49a:	b082      	sub	sp, #8
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
 800f4a0:	6878      	ldr	r0, [r7, #4]
 800f4a2:	f7ff ffe7 	bl	800f474 <_ZN8touchgfx9ConstFontD1Ev>
 800f4a6:	2118      	movs	r1, #24
 800f4a8:	6878      	ldr	r0, [r7, #4]
 800f4aa:	f016 fe13 	bl	80260d4 <_ZdlPvj>
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	3708      	adds	r7, #8
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	bd80      	pop	{r7, pc}

0800f4b8 <_ZN8touchgfx13GeneratedFontD1Ev>:
 *        An GeneratedFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b082      	sub	sp, #8
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
 800f4c0:	4a05      	ldr	r2, [pc, #20]	; (800f4d8 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	601a      	str	r2, [r3, #0]
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f7ff ffd3 	bl	800f474 <_ZN8touchgfx9ConstFontD1Ev>
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	3708      	adds	r7, #8
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}
 800f4d8:	08027c64 	.word	0x08027c64

0800f4dc <_ZN8touchgfx13GeneratedFontD0Ev>:
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b082      	sub	sp, #8
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
 800f4e4:	6878      	ldr	r0, [r7, #4]
 800f4e6:	f7ff ffe7 	bl	800f4b8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f4ea:	2124      	movs	r1, #36	; 0x24
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	f016 fdf1 	bl	80260d4 <_ZdlPvj>
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	3708      	adds	r7, #8
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	bd80      	pop	{r7, pc}

0800f4fc <_ZNK8touchgfx9TypedText7getFontEv>:
     *
     *        Gets the font associated with this TypedText.
     *
     * @return The font.
     */
    const Font* getFont() const
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b082      	sub	sp, #8
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800f504:	6878      	ldr	r0, [r7, #4]
 800f506:	f000 f82d 	bl	800f564 <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 800f50a:	4b08      	ldr	r3, [pc, #32]	; (800f52c <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 800f50c:	681a      	ldr	r2, [r3, #0]
 800f50e:	4b08      	ldr	r3, [pc, #32]	; (800f530 <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 800f510:	6819      	ldr	r1, [r3, #0]
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	881b      	ldrh	r3, [r3, #0]
 800f516:	005b      	lsls	r3, r3, #1
 800f518:	440b      	add	r3, r1
 800f51a:	781b      	ldrb	r3, [r3, #0]
 800f51c:	009b      	lsls	r3, r3, #2
 800f51e:	4413      	add	r3, r2
 800f520:	681b      	ldr	r3, [r3, #0]
    }
 800f522:	4618      	mov	r0, r3
 800f524:	3708      	adds	r7, #8
 800f526:	46bd      	mov	sp, r7
 800f528:	bd80      	pop	{r7, pc}
 800f52a:	bf00      	nop
 800f52c:	2000c64c 	.word	0x2000c64c
 800f530:	2000c644 	.word	0x2000c644

0800f534 <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
     *
     *        Gets the text direction associated with this TypedText.
     *
     * @return The alignment.
     */
    TextDirection getTextDirection() const
 800f534:	b580      	push	{r7, lr}
 800f536:	b082      	sub	sp, #8
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800f53c:	6878      	ldr	r0, [r7, #4]
 800f53e:	f000 f811 	bl	800f564 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 800f542:	4b07      	ldr	r3, [pc, #28]	; (800f560 <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 800f544:	681a      	ldr	r2, [r3, #0]
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	881b      	ldrh	r3, [r3, #0]
 800f54a:	005b      	lsls	r3, r3, #1
 800f54c:	4413      	add	r3, r2
 800f54e:	785b      	ldrb	r3, [r3, #1]
 800f550:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800f554:	b2db      	uxtb	r3, r3
    }
 800f556:	4618      	mov	r0, r3
 800f558:	3708      	adds	r7, #8
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}
 800f55e:	bf00      	nop
 800f560:	2000c644 	.word	0x2000c644

0800f564 <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 800f564:	b580      	push	{r7, lr}
 800f566:	b082      	sub	sp, #8
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f56c:	4b0c      	ldr	r3, [pc, #48]	; (800f5a0 <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d105      	bne.n	800f580 <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 800f574:	4b0b      	ldr	r3, [pc, #44]	; (800f5a4 <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 800f576:	4a0c      	ldr	r2, [pc, #48]	; (800f5a8 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800f578:	21de      	movs	r1, #222	; 0xde
 800f57a:	480c      	ldr	r0, [pc, #48]	; (800f5ac <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800f57c:	f016 fdd8 	bl	8026130 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	881a      	ldrh	r2, [r3, #0]
 800f584:	4b0a      	ldr	r3, [pc, #40]	; (800f5b0 <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 800f586:	881b      	ldrh	r3, [r3, #0]
 800f588:	429a      	cmp	r2, r3
 800f58a:	d305      	bcc.n	800f598 <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 800f58c:	4b09      	ldr	r3, [pc, #36]	; (800f5b4 <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 800f58e:	4a06      	ldr	r2, [pc, #24]	; (800f5a8 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800f590:	21df      	movs	r1, #223	; 0xdf
 800f592:	4806      	ldr	r0, [pc, #24]	; (800f5ac <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800f594:	f016 fdcc 	bl	8026130 <__assert_func>
    }
 800f598:	bf00      	nop
 800f59a:	3708      	adds	r7, #8
 800f59c:	46bd      	mov	sp, r7
 800f59e:	bd80      	pop	{r7, pc}
 800f5a0:	2000c644 	.word	0x2000c644
 800f5a4:	08027200 	.word	0x08027200
 800f5a8:	08027244 	.word	0x08027244
 800f5ac:	08027274 	.word	0x08027274
 800f5b0:	2000c648 	.word	0x2000c648
 800f5b4:	080272b8 	.word	0x080272b8

0800f5b8 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 800f5b8:	b480      	push	{r7}
 800f5ba:	b083      	sub	sp, #12
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	7b5b      	ldrb	r3, [r3, #13]
 800f5c4:	021b      	lsls	r3, r3, #8
 800f5c6:	b21b      	sxth	r3, r3
 800f5c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f5cc:	b21a      	sxth	r2, r3
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	7adb      	ldrb	r3, [r3, #11]
 800f5d2:	b21b      	sxth	r3, r3
 800f5d4:	4313      	orrs	r3, r2
 800f5d6:	b21b      	sxth	r3, r3
 800f5d8:	b29b      	uxth	r3, r3
    }
 800f5da:	4618      	mov	r0, r3
 800f5dc:	370c      	adds	r7, #12
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e4:	4770      	bx	lr

0800f5e6 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800f5e6:	b480      	push	{r7}
 800f5e8:	b083      	sub	sp, #12
 800f5ea:	af00      	add	r7, sp, #0
 800f5ec:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	6a1b      	ldr	r3, [r3, #32]
    }
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	370c      	adds	r7, #12
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fc:	4770      	bx	lr
	...

0800f600 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800f600:	b580      	push	{r7, lr}
 800f602:	b08c      	sub	sp, #48	; 0x30
 800f604:	af08      	add	r7, sp, #32
 800f606:	60f8      	str	r0, [r7, #12]
 800f608:	60b9      	str	r1, [r7, #8]
 800f60a:	4611      	mov	r1, r2
 800f60c:	461a      	mov	r2, r3
 800f60e:	460b      	mov	r3, r1
 800f610:	80fb      	strh	r3, [r7, #6]
 800f612:	4613      	mov	r3, r2
 800f614:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800f616:	68f8      	ldr	r0, [r7, #12]
 800f618:	88b9      	ldrh	r1, [r7, #4]
 800f61a:	88fa      	ldrh	r2, [r7, #6]
 800f61c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f61e:	9306      	str	r3, [sp, #24]
 800f620:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f622:	9305      	str	r3, [sp, #20]
 800f624:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f628:	9304      	str	r3, [sp, #16]
 800f62a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f62e:	9303      	str	r3, [sp, #12]
 800f630:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f634:	9302      	str	r3, [sp, #8]
 800f636:	7f3b      	ldrb	r3, [r7, #28]
 800f638:	9301      	str	r3, [sp, #4]
 800f63a:	7e3b      	ldrb	r3, [r7, #24]
 800f63c:	9300      	str	r3, [sp, #0]
 800f63e:	460b      	mov	r3, r1
 800f640:	68b9      	ldr	r1, [r7, #8]
 800f642:	f00b fa69 	bl	801ab18 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800f646:	4a08      	ldr	r2, [pc, #32]	; (800f668 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	601a      	str	r2, [r3, #0]
    glyphData(glyphDataInternalFlash),
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f650:	619a      	str	r2, [r3, #24]
    kerningData(kerningList),
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f656:	61da      	str	r2, [r3, #28]
    gsubTable(gsubData)
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f65c:	621a      	str	r2, [r3, #32]
{
}
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	4618      	mov	r0, r3
 800f662:	3710      	adds	r7, #16
 800f664:	46bd      	mov	sp, r7
 800f666:	bd80      	pop	{r7, pc}
 800f668:	08027c64 	.word	0x08027c64

0800f66c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800f66c:	b480      	push	{r7}
 800f66e:	b085      	sub	sp, #20
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
 800f674:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	699b      	ldr	r3, [r3, #24]
 800f67a:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800f67c:	683b      	ldr	r3, [r7, #0]
 800f67e:	889b      	ldrh	r3, [r3, #4]
 800f680:	0adb      	lsrs	r3, r3, #11
 800f682:	b29b      	uxth	r3, r3
 800f684:	009b      	lsls	r3, r3, #2
 800f686:	68fa      	ldr	r2, [r7, #12]
 800f688:	4413      	add	r3, r2
 800f68a:	681a      	ldr	r2, [r3, #0]
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	4413      	add	r3, r2
}
 800f692:	4618      	mov	r0, r3
 800f694:	3714      	adds	r7, #20
 800f696:	46bd      	mov	sp, r7
 800f698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69c:	4770      	bx	lr

0800f69e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800f69e:	b580      	push	{r7, lr}
 800f6a0:	b086      	sub	sp, #24
 800f6a2:	af00      	add	r7, sp, #0
 800f6a4:	60f8      	str	r0, [r7, #12]
 800f6a6:	460b      	mov	r3, r1
 800f6a8:	607a      	str	r2, [r7, #4]
 800f6aa:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d003      	beq.n	800f6ba <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	7b1b      	ldrb	r3, [r3, #12]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d101      	bne.n	800f6be <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	e023      	b.n	800f706 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 800f6be:	6878      	ldr	r0, [r7, #4]
 800f6c0:	f7ff ff7a 	bl	800f5b8 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 800f6c4:	4603      	mov	r3, r0
 800f6c6:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800f6c8:	8abb      	ldrh	r3, [r7, #20]
 800f6ca:	82fb      	strh	r3, [r7, #22]
 800f6cc:	e013      	b.n	800f6f6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x58>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	69da      	ldr	r2, [r3, #28]
 800f6d2:	8afb      	ldrh	r3, [r7, #22]
 800f6d4:	009b      	lsls	r3, r3, #2
 800f6d6:	4413      	add	r3, r2
 800f6d8:	881b      	ldrh	r3, [r3, #0]
 800f6da:	897a      	ldrh	r2, [r7, #10]
 800f6dc:	429a      	cmp	r2, r3
 800f6de:	d107      	bne.n	800f6f0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x52>
        {
            return kerningData[i].distance;
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	69da      	ldr	r2, [r3, #28]
 800f6e4:	8afb      	ldrh	r3, [r7, #22]
 800f6e6:	009b      	lsls	r3, r3, #2
 800f6e8:	4413      	add	r3, r2
 800f6ea:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f6ee:	e00a      	b.n	800f706 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800f6f0:	8afb      	ldrh	r3, [r7, #22]
 800f6f2:	3301      	adds	r3, #1
 800f6f4:	82fb      	strh	r3, [r7, #22]
 800f6f6:	8afa      	ldrh	r2, [r7, #22]
 800f6f8:	8abb      	ldrh	r3, [r7, #20]
 800f6fa:	6879      	ldr	r1, [r7, #4]
 800f6fc:	7b09      	ldrb	r1, [r1, #12]
 800f6fe:	440b      	add	r3, r1
 800f700:	429a      	cmp	r2, r3
 800f702:	dbe4      	blt.n	800f6ce <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x30>
        }
    }
    return 0;
 800f704:	2300      	movs	r3, #0
}
 800f706:	4618      	mov	r0, r3
 800f708:	3718      	adds	r7, #24
 800f70a:	46bd      	mov	sp, r7
 800f70c:	bd80      	pop	{r7, pc}
	...

0800f710 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_10_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 800f710:	b580      	push	{r7, lr}
 800f712:	af00      	add	r7, sp, #0
 800f714:	4801      	ldr	r0, [pc, #4]	; (800f71c <__tcf_0+0xc>)
 800f716:	f7ff fecf 	bl	800f4b8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f71a:	bd80      	pop	{r7, pc}
 800f71c:	20008ce0 	.word	0x20008ce0

0800f720 <_Z25getFont_Asap_Bold_10_4bppv>:
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b08a      	sub	sp, #40	; 0x28
 800f724:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 800f726:	4b1e      	ldr	r3, [pc, #120]	; (800f7a0 <_Z25getFont_Asap_Bold_10_4bppv+0x80>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	f3bf 8f5b 	dmb	ish
 800f72e:	f003 0301 	and.w	r3, r3, #1
 800f732:	2b00      	cmp	r3, #0
 800f734:	bf0c      	ite	eq
 800f736:	2301      	moveq	r3, #1
 800f738:	2300      	movne	r3, #0
 800f73a:	b2db      	uxtb	r3, r3
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d02a      	beq.n	800f796 <_Z25getFont_Asap_Bold_10_4bppv+0x76>
 800f740:	4817      	ldr	r0, [pc, #92]	; (800f7a0 <_Z25getFont_Asap_Bold_10_4bppv+0x80>)
 800f742:	f016 fcc9 	bl	80260d8 <__cxa_guard_acquire>
 800f746:	4603      	mov	r3, r0
 800f748:	2b00      	cmp	r3, #0
 800f74a:	bf14      	ite	ne
 800f74c:	2301      	movne	r3, #1
 800f74e:	2300      	moveq	r3, #0
 800f750:	b2db      	uxtb	r3, r3
 800f752:	2b00      	cmp	r3, #0
 800f754:	d01f      	beq.n	800f796 <_Z25getFont_Asap_Bold_10_4bppv+0x76>
 800f756:	2300      	movs	r3, #0
 800f758:	9309      	str	r3, [sp, #36]	; 0x24
 800f75a:	2300      	movs	r3, #0
 800f75c:	9308      	str	r3, [sp, #32]
 800f75e:	233f      	movs	r3, #63	; 0x3f
 800f760:	9307      	str	r3, [sp, #28]
 800f762:	4b10      	ldr	r3, [pc, #64]	; (800f7a4 <_Z25getFont_Asap_Bold_10_4bppv+0x84>)
 800f764:	9306      	str	r3, [sp, #24]
 800f766:	4b10      	ldr	r3, [pc, #64]	; (800f7a8 <_Z25getFont_Asap_Bold_10_4bppv+0x88>)
 800f768:	9305      	str	r3, [sp, #20]
 800f76a:	2301      	movs	r3, #1
 800f76c:	9304      	str	r3, [sp, #16]
 800f76e:	2300      	movs	r3, #0
 800f770:	9303      	str	r3, [sp, #12]
 800f772:	2301      	movs	r3, #1
 800f774:	9302      	str	r3, [sp, #8]
 800f776:	2304      	movs	r3, #4
 800f778:	9301      	str	r3, [sp, #4]
 800f77a:	2300      	movs	r3, #0
 800f77c:	9300      	str	r3, [sp, #0]
 800f77e:	230a      	movs	r3, #10
 800f780:	2204      	movs	r2, #4
 800f782:	490a      	ldr	r1, [pc, #40]	; (800f7ac <_Z25getFont_Asap_Bold_10_4bppv+0x8c>)
 800f784:	480a      	ldr	r0, [pc, #40]	; (800f7b0 <_Z25getFont_Asap_Bold_10_4bppv+0x90>)
 800f786:	f7ff ff3b 	bl	800f600 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f78a:	480a      	ldr	r0, [pc, #40]	; (800f7b4 <_Z25getFont_Asap_Bold_10_4bppv+0x94>)
 800f78c:	f016 fcee 	bl	802616c <atexit>
 800f790:	4803      	ldr	r0, [pc, #12]	; (800f7a0 <_Z25getFont_Asap_Bold_10_4bppv+0x80>)
 800f792:	f016 fcad 	bl	80260f0 <__cxa_guard_release>
    return Asap_Bold_10_4bpp;
 800f796:	4b06      	ldr	r3, [pc, #24]	; (800f7b0 <_Z25getFont_Asap_Bold_10_4bppv+0x90>)
}
 800f798:	4618      	mov	r0, r3
 800f79a:	46bd      	mov	sp, r7
 800f79c:	bd80      	pop	{r7, pc}
 800f79e:	bf00      	nop
 800f7a0:	20008d04 	.word	0x20008d04
 800f7a4:	0802ec50 	.word	0x0802ec50
 800f7a8:	08027cb0 	.word	0x08027cb0
 800f7ac:	0802ec74 	.word	0x0802ec74
 800f7b0:	20008ce0 	.word	0x20008ce0
 800f7b4:	0800f711 	.word	0x0800f711

0800f7b8 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_12_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 11, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	af00      	add	r7, sp, #0
 800f7bc:	4801      	ldr	r0, [pc, #4]	; (800f7c4 <__tcf_0+0xc>)
 800f7be:	f7ff fe7b 	bl	800f4b8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f7c2:	bd80      	pop	{r7, pc}
 800f7c4:	20008d08 	.word	0x20008d08

0800f7c8 <_Z25getFont_Asap_Bold_12_4bppv>:
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b08a      	sub	sp, #40	; 0x28
 800f7cc:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 11, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 800f7ce:	4b1e      	ldr	r3, [pc, #120]	; (800f848 <_Z25getFont_Asap_Bold_12_4bppv+0x80>)
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	f3bf 8f5b 	dmb	ish
 800f7d6:	f003 0301 	and.w	r3, r3, #1
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	bf0c      	ite	eq
 800f7de:	2301      	moveq	r3, #1
 800f7e0:	2300      	movne	r3, #0
 800f7e2:	b2db      	uxtb	r3, r3
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d02a      	beq.n	800f83e <_Z25getFont_Asap_Bold_12_4bppv+0x76>
 800f7e8:	4817      	ldr	r0, [pc, #92]	; (800f848 <_Z25getFont_Asap_Bold_12_4bppv+0x80>)
 800f7ea:	f016 fc75 	bl	80260d8 <__cxa_guard_acquire>
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	bf14      	ite	ne
 800f7f4:	2301      	movne	r3, #1
 800f7f6:	2300      	moveq	r3, #0
 800f7f8:	b2db      	uxtb	r3, r3
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d01f      	beq.n	800f83e <_Z25getFont_Asap_Bold_12_4bppv+0x76>
 800f7fe:	2300      	movs	r3, #0
 800f800:	9309      	str	r3, [sp, #36]	; 0x24
 800f802:	2300      	movs	r3, #0
 800f804:	9308      	str	r3, [sp, #32]
 800f806:	233f      	movs	r3, #63	; 0x3f
 800f808:	9307      	str	r3, [sp, #28]
 800f80a:	4b10      	ldr	r3, [pc, #64]	; (800f84c <_Z25getFont_Asap_Bold_12_4bppv+0x84>)
 800f80c:	9306      	str	r3, [sp, #24]
 800f80e:	4b10      	ldr	r3, [pc, #64]	; (800f850 <_Z25getFont_Asap_Bold_12_4bppv+0x88>)
 800f810:	9305      	str	r3, [sp, #20]
 800f812:	2301      	movs	r3, #1
 800f814:	9304      	str	r3, [sp, #16]
 800f816:	2300      	movs	r3, #0
 800f818:	9303      	str	r3, [sp, #12]
 800f81a:	2301      	movs	r3, #1
 800f81c:	9302      	str	r3, [sp, #8]
 800f81e:	2304      	movs	r3, #4
 800f820:	9301      	str	r3, [sp, #4]
 800f822:	2300      	movs	r3, #0
 800f824:	9300      	str	r3, [sp, #0]
 800f826:	230c      	movs	r3, #12
 800f828:	220b      	movs	r2, #11
 800f82a:	490a      	ldr	r1, [pc, #40]	; (800f854 <_Z25getFont_Asap_Bold_12_4bppv+0x8c>)
 800f82c:	480a      	ldr	r0, [pc, #40]	; (800f858 <_Z25getFont_Asap_Bold_12_4bppv+0x90>)
 800f82e:	f7ff fee7 	bl	800f600 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f832:	480a      	ldr	r0, [pc, #40]	; (800f85c <_Z25getFont_Asap_Bold_12_4bppv+0x94>)
 800f834:	f016 fc9a 	bl	802616c <atexit>
 800f838:	4803      	ldr	r0, [pc, #12]	; (800f848 <_Z25getFont_Asap_Bold_12_4bppv+0x80>)
 800f83a:	f016 fc59 	bl	80260f0 <__cxa_guard_release>
    return Asap_Bold_12_4bpp;
 800f83e:	4b06      	ldr	r3, [pc, #24]	; (800f858 <_Z25getFont_Asap_Bold_12_4bppv+0x90>)
}
 800f840:	4618      	mov	r0, r3
 800f842:	46bd      	mov	sp, r7
 800f844:	bd80      	pop	{r7, pc}
 800f846:	bf00      	nop
 800f848:	20008d2c 	.word	0x20008d2c
 800f84c:	0802ec54 	.word	0x0802ec54
 800f850:	08027cb4 	.word	0x08027cb4
 800f854:	0802ecac 	.word	0x0802ecac
 800f858:	20008d08 	.word	0x20008d08
 800f85c:	0800f7b9 	.word	0x0800f7b9

0800f860 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_14_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_14_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_14_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_14_4bpp(glyphs_Asap_Bold_14_4bpp, 27, 14, 0, 4, 1, 0, 1, unicodes_Asap_Bold_14_4bpp, kerning_Asap_Bold_14_4bpp, 0, 0, 0);
 800f860:	b580      	push	{r7, lr}
 800f862:	af00      	add	r7, sp, #0
 800f864:	4801      	ldr	r0, [pc, #4]	; (800f86c <__tcf_0+0xc>)
 800f866:	f7ff fe27 	bl	800f4b8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f86a:	bd80      	pop	{r7, pc}
 800f86c:	20008d30 	.word	0x20008d30

0800f870 <_Z25getFont_Asap_Bold_14_4bppv>:
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b08a      	sub	sp, #40	; 0x28
 800f874:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_14_4bpp(glyphs_Asap_Bold_14_4bpp, 27, 14, 0, 4, 1, 0, 1, unicodes_Asap_Bold_14_4bpp, kerning_Asap_Bold_14_4bpp, 0, 0, 0);
 800f876:	4b1e      	ldr	r3, [pc, #120]	; (800f8f0 <_Z25getFont_Asap_Bold_14_4bppv+0x80>)
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	f3bf 8f5b 	dmb	ish
 800f87e:	f003 0301 	and.w	r3, r3, #1
 800f882:	2b00      	cmp	r3, #0
 800f884:	bf0c      	ite	eq
 800f886:	2301      	moveq	r3, #1
 800f888:	2300      	movne	r3, #0
 800f88a:	b2db      	uxtb	r3, r3
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d02a      	beq.n	800f8e6 <_Z25getFont_Asap_Bold_14_4bppv+0x76>
 800f890:	4817      	ldr	r0, [pc, #92]	; (800f8f0 <_Z25getFont_Asap_Bold_14_4bppv+0x80>)
 800f892:	f016 fc21 	bl	80260d8 <__cxa_guard_acquire>
 800f896:	4603      	mov	r3, r0
 800f898:	2b00      	cmp	r3, #0
 800f89a:	bf14      	ite	ne
 800f89c:	2301      	movne	r3, #1
 800f89e:	2300      	moveq	r3, #0
 800f8a0:	b2db      	uxtb	r3, r3
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d01f      	beq.n	800f8e6 <_Z25getFont_Asap_Bold_14_4bppv+0x76>
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	9309      	str	r3, [sp, #36]	; 0x24
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	9308      	str	r3, [sp, #32]
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	9307      	str	r3, [sp, #28]
 800f8b2:	4b10      	ldr	r3, [pc, #64]	; (800f8f4 <_Z25getFont_Asap_Bold_14_4bppv+0x84>)
 800f8b4:	9306      	str	r3, [sp, #24]
 800f8b6:	4b10      	ldr	r3, [pc, #64]	; (800f8f8 <_Z25getFont_Asap_Bold_14_4bppv+0x88>)
 800f8b8:	9305      	str	r3, [sp, #20]
 800f8ba:	2301      	movs	r3, #1
 800f8bc:	9304      	str	r3, [sp, #16]
 800f8be:	2300      	movs	r3, #0
 800f8c0:	9303      	str	r3, [sp, #12]
 800f8c2:	2301      	movs	r3, #1
 800f8c4:	9302      	str	r3, [sp, #8]
 800f8c6:	2304      	movs	r3, #4
 800f8c8:	9301      	str	r3, [sp, #4]
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	9300      	str	r3, [sp, #0]
 800f8ce:	230e      	movs	r3, #14
 800f8d0:	221b      	movs	r2, #27
 800f8d2:	490a      	ldr	r1, [pc, #40]	; (800f8fc <_Z25getFont_Asap_Bold_14_4bppv+0x8c>)
 800f8d4:	480a      	ldr	r0, [pc, #40]	; (800f900 <_Z25getFont_Asap_Bold_14_4bppv+0x90>)
 800f8d6:	f7ff fe93 	bl	800f600 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f8da:	480a      	ldr	r0, [pc, #40]	; (800f904 <_Z25getFont_Asap_Bold_14_4bppv+0x94>)
 800f8dc:	f016 fc46 	bl	802616c <atexit>
 800f8e0:	4803      	ldr	r0, [pc, #12]	; (800f8f0 <_Z25getFont_Asap_Bold_14_4bppv+0x80>)
 800f8e2:	f016 fc05 	bl	80260f0 <__cxa_guard_release>
    return Asap_Bold_14_4bpp;
 800f8e6:	4b06      	ldr	r3, [pc, #24]	; (800f900 <_Z25getFont_Asap_Bold_14_4bppv+0x90>)
}
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	bd80      	pop	{r7, pc}
 800f8ee:	bf00      	nop
 800f8f0:	20008d54 	.word	0x20008d54
 800f8f4:	0802ec58 	.word	0x0802ec58
 800f8f8:	08027cb8 	.word	0x08027cb8
 800f8fc:	0802ed48 	.word	0x0802ed48
 800f900:	20008d30 	.word	0x20008d30
 800f904:	0800f861 	.word	0x0800f861

0800f908 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_21_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 800f908:	b580      	push	{r7, lr}
 800f90a:	af00      	add	r7, sp, #0
 800f90c:	4801      	ldr	r0, [pc, #4]	; (800f914 <__tcf_0+0xc>)
 800f90e:	f7ff fdd3 	bl	800f4b8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f912:	bd80      	pop	{r7, pc}
 800f914:	20008d58 	.word	0x20008d58

0800f918 <_Z25getFont_Asap_Bold_21_4bppv>:
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b08a      	sub	sp, #40	; 0x28
 800f91c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 800f91e:	4b1e      	ldr	r3, [pc, #120]	; (800f998 <_Z25getFont_Asap_Bold_21_4bppv+0x80>)
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	f3bf 8f5b 	dmb	ish
 800f926:	f003 0301 	and.w	r3, r3, #1
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	bf0c      	ite	eq
 800f92e:	2301      	moveq	r3, #1
 800f930:	2300      	movne	r3, #0
 800f932:	b2db      	uxtb	r3, r3
 800f934:	2b00      	cmp	r3, #0
 800f936:	d02a      	beq.n	800f98e <_Z25getFont_Asap_Bold_21_4bppv+0x76>
 800f938:	4817      	ldr	r0, [pc, #92]	; (800f998 <_Z25getFont_Asap_Bold_21_4bppv+0x80>)
 800f93a:	f016 fbcd 	bl	80260d8 <__cxa_guard_acquire>
 800f93e:	4603      	mov	r3, r0
 800f940:	2b00      	cmp	r3, #0
 800f942:	bf14      	ite	ne
 800f944:	2301      	movne	r3, #1
 800f946:	2300      	moveq	r3, #0
 800f948:	b2db      	uxtb	r3, r3
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d01f      	beq.n	800f98e <_Z25getFont_Asap_Bold_21_4bppv+0x76>
 800f94e:	2300      	movs	r3, #0
 800f950:	9309      	str	r3, [sp, #36]	; 0x24
 800f952:	2300      	movs	r3, #0
 800f954:	9308      	str	r3, [sp, #32]
 800f956:	233f      	movs	r3, #63	; 0x3f
 800f958:	9307      	str	r3, [sp, #28]
 800f95a:	4b10      	ldr	r3, [pc, #64]	; (800f99c <_Z25getFont_Asap_Bold_21_4bppv+0x84>)
 800f95c:	9306      	str	r3, [sp, #24]
 800f95e:	4b10      	ldr	r3, [pc, #64]	; (800f9a0 <_Z25getFont_Asap_Bold_21_4bppv+0x88>)
 800f960:	9305      	str	r3, [sp, #20]
 800f962:	2301      	movs	r3, #1
 800f964:	9304      	str	r3, [sp, #16]
 800f966:	2300      	movs	r3, #0
 800f968:	9303      	str	r3, [sp, #12]
 800f96a:	2301      	movs	r3, #1
 800f96c:	9302      	str	r3, [sp, #8]
 800f96e:	2304      	movs	r3, #4
 800f970:	9301      	str	r3, [sp, #4]
 800f972:	2300      	movs	r3, #0
 800f974:	9300      	str	r3, [sp, #0]
 800f976:	2315      	movs	r3, #21
 800f978:	220d      	movs	r2, #13
 800f97a:	490a      	ldr	r1, [pc, #40]	; (800f9a4 <_Z25getFont_Asap_Bold_21_4bppv+0x8c>)
 800f97c:	480a      	ldr	r0, [pc, #40]	; (800f9a8 <_Z25getFont_Asap_Bold_21_4bppv+0x90>)
 800f97e:	f7ff fe3f 	bl	800f600 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f982:	480a      	ldr	r0, [pc, #40]	; (800f9ac <_Z25getFont_Asap_Bold_21_4bppv+0x94>)
 800f984:	f016 fbf2 	bl	802616c <atexit>
 800f988:	4803      	ldr	r0, [pc, #12]	; (800f998 <_Z25getFont_Asap_Bold_21_4bppv+0x80>)
 800f98a:	f016 fbb1 	bl	80260f0 <__cxa_guard_release>
    return Asap_Bold_21_4bpp;
 800f98e:	4b06      	ldr	r3, [pc, #24]	; (800f9a8 <_Z25getFont_Asap_Bold_21_4bppv+0x90>)
}
 800f990:	4618      	mov	r0, r3
 800f992:	46bd      	mov	sp, r7
 800f994:	bd80      	pop	{r7, pc}
 800f996:	bf00      	nop
 800f998:	20008d7c 	.word	0x20008d7c
 800f99c:	0802ec64 	.word	0x0802ec64
 800f9a0:	08027cbc 	.word	0x08027cbc
 800f9a4:	0802eec4 	.word	0x0802eec4
 800f9a8:	20008d58 	.word	0x20008d58
 800f9ac:	0800f909 	.word	0x0800f909

0800f9b0 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_30_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 12, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	af00      	add	r7, sp, #0
 800f9b4:	4801      	ldr	r0, [pc, #4]	; (800f9bc <__tcf_0+0xc>)
 800f9b6:	f7ff fd7f 	bl	800f4b8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f9ba:	bd80      	pop	{r7, pc}
 800f9bc:	20008d80 	.word	0x20008d80

0800f9c0 <_Z25getFont_Asap_Bold_30_4bppv>:
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b08a      	sub	sp, #40	; 0x28
 800f9c4:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 12, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 800f9c6:	4b1e      	ldr	r3, [pc, #120]	; (800fa40 <_Z25getFont_Asap_Bold_30_4bppv+0x80>)
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	f3bf 8f5b 	dmb	ish
 800f9ce:	f003 0301 	and.w	r3, r3, #1
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	bf0c      	ite	eq
 800f9d6:	2301      	moveq	r3, #1
 800f9d8:	2300      	movne	r3, #0
 800f9da:	b2db      	uxtb	r3, r3
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d02a      	beq.n	800fa36 <_Z25getFont_Asap_Bold_30_4bppv+0x76>
 800f9e0:	4817      	ldr	r0, [pc, #92]	; (800fa40 <_Z25getFont_Asap_Bold_30_4bppv+0x80>)
 800f9e2:	f016 fb79 	bl	80260d8 <__cxa_guard_acquire>
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	bf14      	ite	ne
 800f9ec:	2301      	movne	r3, #1
 800f9ee:	2300      	moveq	r3, #0
 800f9f0:	b2db      	uxtb	r3, r3
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d01f      	beq.n	800fa36 <_Z25getFont_Asap_Bold_30_4bppv+0x76>
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	9309      	str	r3, [sp, #36]	; 0x24
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	9308      	str	r3, [sp, #32]
 800f9fe:	233f      	movs	r3, #63	; 0x3f
 800fa00:	9307      	str	r3, [sp, #28]
 800fa02:	4b10      	ldr	r3, [pc, #64]	; (800fa44 <_Z25getFont_Asap_Bold_30_4bppv+0x84>)
 800fa04:	9306      	str	r3, [sp, #24]
 800fa06:	4b10      	ldr	r3, [pc, #64]	; (800fa48 <_Z25getFont_Asap_Bold_30_4bppv+0x88>)
 800fa08:	9305      	str	r3, [sp, #20]
 800fa0a:	2301      	movs	r3, #1
 800fa0c:	9304      	str	r3, [sp, #16]
 800fa0e:	2300      	movs	r3, #0
 800fa10:	9303      	str	r3, [sp, #12]
 800fa12:	2301      	movs	r3, #1
 800fa14:	9302      	str	r3, [sp, #8]
 800fa16:	2304      	movs	r3, #4
 800fa18:	9301      	str	r3, [sp, #4]
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	9300      	str	r3, [sp, #0]
 800fa1e:	231e      	movs	r3, #30
 800fa20:	220c      	movs	r2, #12
 800fa22:	490a      	ldr	r1, [pc, #40]	; (800fa4c <_Z25getFont_Asap_Bold_30_4bppv+0x8c>)
 800fa24:	480a      	ldr	r0, [pc, #40]	; (800fa50 <_Z25getFont_Asap_Bold_30_4bppv+0x90>)
 800fa26:	f7ff fdeb 	bl	800f600 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800fa2a:	480a      	ldr	r0, [pc, #40]	; (800fa54 <_Z25getFont_Asap_Bold_30_4bppv+0x94>)
 800fa2c:	f016 fb9e 	bl	802616c <atexit>
 800fa30:	4803      	ldr	r0, [pc, #12]	; (800fa40 <_Z25getFont_Asap_Bold_30_4bppv+0x80>)
 800fa32:	f016 fb5d 	bl	80260f0 <__cxa_guard_release>
    return Asap_Bold_30_4bpp;
 800fa36:	4b06      	ldr	r3, [pc, #24]	; (800fa50 <_Z25getFont_Asap_Bold_30_4bppv+0x90>)
}
 800fa38:	4618      	mov	r0, r3
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	bd80      	pop	{r7, pc}
 800fa3e:	bf00      	nop
 800fa40:	20008da4 	.word	0x20008da4
 800fa44:	0802ec68 	.word	0x0802ec68
 800fa48:	08027cc0 	.word	0x08027cc0
 800fa4c:	0802ef7c 	.word	0x0802ef7c
 800fa50:	20008d80 	.word	0x20008d80
 800fa54:	0800f9b1 	.word	0x0800f9b1

0800fa58 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_40_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 13, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	af00      	add	r7, sp, #0
 800fa5c:	4801      	ldr	r0, [pc, #4]	; (800fa64 <__tcf_0+0xc>)
 800fa5e:	f7ff fd2b 	bl	800f4b8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800fa62:	bd80      	pop	{r7, pc}
 800fa64:	20008da8 	.word	0x20008da8

0800fa68 <_Z25getFont_Asap_Bold_40_4bppv>:
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b08a      	sub	sp, #40	; 0x28
 800fa6c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 13, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 800fa6e:	4b1e      	ldr	r3, [pc, #120]	; (800fae8 <_Z25getFont_Asap_Bold_40_4bppv+0x80>)
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	f3bf 8f5b 	dmb	ish
 800fa76:	f003 0301 	and.w	r3, r3, #1
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	bf0c      	ite	eq
 800fa7e:	2301      	moveq	r3, #1
 800fa80:	2300      	movne	r3, #0
 800fa82:	b2db      	uxtb	r3, r3
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d02a      	beq.n	800fade <_Z25getFont_Asap_Bold_40_4bppv+0x76>
 800fa88:	4817      	ldr	r0, [pc, #92]	; (800fae8 <_Z25getFont_Asap_Bold_40_4bppv+0x80>)
 800fa8a:	f016 fb25 	bl	80260d8 <__cxa_guard_acquire>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	bf14      	ite	ne
 800fa94:	2301      	movne	r3, #1
 800fa96:	2300      	moveq	r3, #0
 800fa98:	b2db      	uxtb	r3, r3
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d01f      	beq.n	800fade <_Z25getFont_Asap_Bold_40_4bppv+0x76>
 800fa9e:	2300      	movs	r3, #0
 800faa0:	9309      	str	r3, [sp, #36]	; 0x24
 800faa2:	2300      	movs	r3, #0
 800faa4:	9308      	str	r3, [sp, #32]
 800faa6:	233f      	movs	r3, #63	; 0x3f
 800faa8:	9307      	str	r3, [sp, #28]
 800faaa:	4b10      	ldr	r3, [pc, #64]	; (800faec <_Z25getFont_Asap_Bold_40_4bppv+0x84>)
 800faac:	9306      	str	r3, [sp, #24]
 800faae:	4b10      	ldr	r3, [pc, #64]	; (800faf0 <_Z25getFont_Asap_Bold_40_4bppv+0x88>)
 800fab0:	9305      	str	r3, [sp, #20]
 800fab2:	2301      	movs	r3, #1
 800fab4:	9304      	str	r3, [sp, #16]
 800fab6:	2300      	movs	r3, #0
 800fab8:	9303      	str	r3, [sp, #12]
 800faba:	2301      	movs	r3, #1
 800fabc:	9302      	str	r3, [sp, #8]
 800fabe:	2304      	movs	r3, #4
 800fac0:	9301      	str	r3, [sp, #4]
 800fac2:	2300      	movs	r3, #0
 800fac4:	9300      	str	r3, [sp, #0]
 800fac6:	2328      	movs	r3, #40	; 0x28
 800fac8:	220d      	movs	r2, #13
 800faca:	490a      	ldr	r1, [pc, #40]	; (800faf4 <_Z25getFont_Asap_Bold_40_4bppv+0x8c>)
 800facc:	480a      	ldr	r0, [pc, #40]	; (800faf8 <_Z25getFont_Asap_Bold_40_4bppv+0x90>)
 800face:	f7ff fd97 	bl	800f600 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800fad2:	480a      	ldr	r0, [pc, #40]	; (800fafc <_Z25getFont_Asap_Bold_40_4bppv+0x94>)
 800fad4:	f016 fb4a 	bl	802616c <atexit>
 800fad8:	4803      	ldr	r0, [pc, #12]	; (800fae8 <_Z25getFont_Asap_Bold_40_4bppv+0x80>)
 800fada:	f016 fb09 	bl	80260f0 <__cxa_guard_release>
    return Asap_Bold_40_4bpp;
 800fade:	4b06      	ldr	r3, [pc, #24]	; (800faf8 <_Z25getFont_Asap_Bold_40_4bppv+0x90>)
}
 800fae0:	4618      	mov	r0, r3
 800fae2:	46bd      	mov	sp, r7
 800fae4:	bd80      	pop	{r7, pc}
 800fae6:	bf00      	nop
 800fae8:	20008dcc 	.word	0x20008dcc
 800faec:	0802ec6c 	.word	0x0802ec6c
 800faf0:	08027cc4 	.word	0x08027cc4
 800faf4:	0802f024 	.word	0x0802f024
 800faf8:	20008da8 	.word	0x20008da8
 800fafc:	0800fa59 	.word	0x0800fa59

0800fb00 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_60_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 13, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 800fb00:	b580      	push	{r7, lr}
 800fb02:	af00      	add	r7, sp, #0
 800fb04:	4801      	ldr	r0, [pc, #4]	; (800fb0c <__tcf_0+0xc>)
 800fb06:	f7ff fcd7 	bl	800f4b8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800fb0a:	bd80      	pop	{r7, pc}
 800fb0c:	20008dd0 	.word	0x20008dd0

0800fb10 <_Z25getFont_Asap_Bold_60_4bppv>:
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b08a      	sub	sp, #40	; 0x28
 800fb14:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 13, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 800fb16:	4b1e      	ldr	r3, [pc, #120]	; (800fb90 <_Z25getFont_Asap_Bold_60_4bppv+0x80>)
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	f3bf 8f5b 	dmb	ish
 800fb1e:	f003 0301 	and.w	r3, r3, #1
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	bf0c      	ite	eq
 800fb26:	2301      	moveq	r3, #1
 800fb28:	2300      	movne	r3, #0
 800fb2a:	b2db      	uxtb	r3, r3
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d02a      	beq.n	800fb86 <_Z25getFont_Asap_Bold_60_4bppv+0x76>
 800fb30:	4817      	ldr	r0, [pc, #92]	; (800fb90 <_Z25getFont_Asap_Bold_60_4bppv+0x80>)
 800fb32:	f016 fad1 	bl	80260d8 <__cxa_guard_acquire>
 800fb36:	4603      	mov	r3, r0
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	bf14      	ite	ne
 800fb3c:	2301      	movne	r3, #1
 800fb3e:	2300      	moveq	r3, #0
 800fb40:	b2db      	uxtb	r3, r3
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d01f      	beq.n	800fb86 <_Z25getFont_Asap_Bold_60_4bppv+0x76>
 800fb46:	2300      	movs	r3, #0
 800fb48:	9309      	str	r3, [sp, #36]	; 0x24
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	9308      	str	r3, [sp, #32]
 800fb4e:	233f      	movs	r3, #63	; 0x3f
 800fb50:	9307      	str	r3, [sp, #28]
 800fb52:	4b10      	ldr	r3, [pc, #64]	; (800fb94 <_Z25getFont_Asap_Bold_60_4bppv+0x84>)
 800fb54:	9306      	str	r3, [sp, #24]
 800fb56:	4b10      	ldr	r3, [pc, #64]	; (800fb98 <_Z25getFont_Asap_Bold_60_4bppv+0x88>)
 800fb58:	9305      	str	r3, [sp, #20]
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	9304      	str	r3, [sp, #16]
 800fb5e:	2300      	movs	r3, #0
 800fb60:	9303      	str	r3, [sp, #12]
 800fb62:	2301      	movs	r3, #1
 800fb64:	9302      	str	r3, [sp, #8]
 800fb66:	2304      	movs	r3, #4
 800fb68:	9301      	str	r3, [sp, #4]
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	9300      	str	r3, [sp, #0]
 800fb6e:	233c      	movs	r3, #60	; 0x3c
 800fb70:	220d      	movs	r2, #13
 800fb72:	490a      	ldr	r1, [pc, #40]	; (800fb9c <_Z25getFont_Asap_Bold_60_4bppv+0x8c>)
 800fb74:	480a      	ldr	r0, [pc, #40]	; (800fba0 <_Z25getFont_Asap_Bold_60_4bppv+0x90>)
 800fb76:	f7ff fd43 	bl	800f600 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800fb7a:	480a      	ldr	r0, [pc, #40]	; (800fba4 <_Z25getFont_Asap_Bold_60_4bppv+0x94>)
 800fb7c:	f016 faf6 	bl	802616c <atexit>
 800fb80:	4803      	ldr	r0, [pc, #12]	; (800fb90 <_Z25getFont_Asap_Bold_60_4bppv+0x80>)
 800fb82:	f016 fab5 	bl	80260f0 <__cxa_guard_release>
    return Asap_Bold_60_4bpp;
 800fb86:	4b06      	ldr	r3, [pc, #24]	; (800fba0 <_Z25getFont_Asap_Bold_60_4bppv+0x90>)
}
 800fb88:	4618      	mov	r0, r3
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	bd80      	pop	{r7, pc}
 800fb8e:	bf00      	nop
 800fb90:	20008df4 	.word	0x20008df4
 800fb94:	0802ec70 	.word	0x0802ec70
 800fb98:	08027cc8 	.word	0x08027cc8
 800fb9c:	0802f0dc 	.word	0x0802f0dc
 800fba0:	20008dd0 	.word	0x20008dd0
 800fba4:	0800fb01 	.word	0x0800fb01

0800fba8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800fba8:	b480      	push	{r7}
 800fbaa:	b083      	sub	sp, #12
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
 800fbb0:	6039      	str	r1, [r7, #0]
 800fbb2:	683b      	ldr	r3, [r7, #0]
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	370c      	adds	r7, #12
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbbe:	4770      	bx	lr

0800fbc0 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800fbc0:	b480      	push	{r7}
 800fbc2:	b083      	sub	sp, #12
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
 800fbc8:	6039      	str	r1, [r7, #0]
    {
    }
 800fbca:	bf00      	nop
 800fbcc:	370c      	adds	r7, #12
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd4:	4770      	bx	lr

0800fbd6 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800fbd6:	b480      	push	{r7}
 800fbd8:	b083      	sub	sp, #12
 800fbda:	af00      	add	r7, sp, #0
 800fbdc:	6078      	str	r0, [r7, #4]
 800fbde:	6039      	str	r1, [r7, #0]
    {
    }
 800fbe0:	bf00      	nop
 800fbe2:	370c      	adds	r7, #12
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbea:	4770      	bx	lr

0800fbec <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800fbec:	b480      	push	{r7}
 800fbee:	b083      	sub	sp, #12
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
 800fbf4:	6039      	str	r1, [r7, #0]
    {
    }
 800fbf6:	bf00      	nop
 800fbf8:	370c      	adds	r7, #12
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc00:	4770      	bx	lr

0800fc02 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800fc02:	b480      	push	{r7}
 800fc04:	b083      	sub	sp, #12
 800fc06:	af00      	add	r7, sp, #0
 800fc08:	6078      	str	r0, [r7, #4]
 800fc0a:	460b      	mov	r3, r1
 800fc0c:	70fb      	strb	r3, [r7, #3]
    {
    }
 800fc0e:	bf00      	nop
 800fc10:	370c      	adds	r7, #12
 800fc12:	46bd      	mov	sp, r7
 800fc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc18:	4770      	bx	lr

0800fc1a <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800fc1a:	b480      	push	{r7}
 800fc1c:	b083      	sub	sp, #12
 800fc1e:	af00      	add	r7, sp, #0
 800fc20:	6078      	str	r0, [r7, #4]
    {
    }
 800fc22:	bf00      	nop
 800fc24:	370c      	adds	r7, #12
 800fc26:	46bd      	mov	sp, r7
 800fc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2c:	4770      	bx	lr

0800fc2e <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 800fc2e:	b480      	push	{r7}
 800fc30:	b083      	sub	sp, #12
 800fc32:	af00      	add	r7, sp, #0
 800fc34:	6078      	str	r0, [r7, #4]
    {
    }
 800fc36:	bf00      	nop
 800fc38:	370c      	adds	r7, #12
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc40:	4770      	bx	lr
	...

0800fc44 <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 800fc44:	b480      	push	{r7}
 800fc46:	b083      	sub	sp, #12
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
    {
 800fc4c:	4a04      	ldr	r2, [pc, #16]	; (800fc60 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	601a      	str	r2, [r3, #0]
    }
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	4618      	mov	r0, r3
 800fc56:	370c      	adds	r7, #12
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5e:	4770      	bx	lr
 800fc60:	08027dbc 	.word	0x08027dbc

0800fc64 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b082      	sub	sp, #8
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
    }
 800fc6c:	6878      	ldr	r0, [r7, #4]
 800fc6e:	f7ff ffe9 	bl	800fc44 <_ZN8touchgfx15UIEventListenerD1Ev>
 800fc72:	2104      	movs	r1, #4
 800fc74:	6878      	ldr	r0, [r7, #4]
 800fc76:	f016 fa2d 	bl	80260d4 <_ZdlPvj>
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	3708      	adds	r7, #8
 800fc80:	46bd      	mov	sp, r7
 800fc82:	bd80      	pop	{r7, pc}

0800fc84 <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 800fc84:	b480      	push	{r7}
 800fc86:	b083      	sub	sp, #12
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 800fc8c:	4a07      	ldr	r2, [pc, #28]	; (800fcac <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	601a      	str	r2, [r3, #0]
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	2200      	movs	r2, #0
 800fc96:	605a      	str	r2, [r3, #4]
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	721a      	strb	r2, [r3, #8]
    {
    }
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	4618      	mov	r0, r3
 800fca2:	370c      	adds	r7, #12
 800fca4:	46bd      	mov	sp, r7
 800fca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcaa:	4770      	bx	lr
 800fcac:	08027d9c 	.word	0x08027d9c

0800fcb0 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 800fcb0:	b480      	push	{r7}
 800fcb2:	b083      	sub	sp, #12
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
    {
 800fcb8:	4a04      	ldr	r2, [pc, #16]	; (800fccc <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	601a      	str	r2, [r3, #0]
    }
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	370c      	adds	r7, #12
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcca:	4770      	bx	lr
 800fccc:	08027d9c 	.word	0x08027d9c

0800fcd0 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b082      	sub	sp, #8
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
    }
 800fcd8:	6878      	ldr	r0, [r7, #4]
 800fcda:	f7ff ffe9 	bl	800fcb0 <_ZN8touchgfx10TransitionD1Ev>
 800fcde:	210c      	movs	r1, #12
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f016 f9f7 	bl	80260d4 <_ZdlPvj>
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	4618      	mov	r0, r3
 800fcea:	3708      	adds	r7, #8
 800fcec:	46bd      	mov	sp, r7
 800fcee:	bd80      	pop	{r7, pc}

0800fcf0 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 800fcf0:	b480      	push	{r7}
 800fcf2:	b083      	sub	sp, #12
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
 800fcf8:	bf00      	nop
 800fcfa:	370c      	adds	r7, #12
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd02:	4770      	bx	lr

0800fd04 <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 800fd04:	b480      	push	{r7}
 800fd06:	b083      	sub	sp, #12
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
 800fd0c:	bf00      	nop
 800fd0e:	370c      	adds	r7, #12
 800fd10:	46bd      	mov	sp, r7
 800fd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd16:	4770      	bx	lr

0800fd18 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 800fd18:	b480      	push	{r7}
 800fd1a:	b083      	sub	sp, #12
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
 800fd20:	bf00      	nop
 800fd22:	370c      	adds	r7, #12
 800fd24:	46bd      	mov	sp, r7
 800fd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2a:	4770      	bx	lr

0800fd2c <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800fd2c:	b480      	push	{r7}
 800fd2e:	b083      	sub	sp, #12
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
 800fd34:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	683a      	ldr	r2, [r7, #0]
 800fd3a:	605a      	str	r2, [r3, #4]
    }
 800fd3c:	bf00      	nop
 800fd3e:	370c      	adds	r7, #12
 800fd40:	46bd      	mov	sp, r7
 800fd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd46:	4770      	bx	lr

0800fd48 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800fd48:	b480      	push	{r7}
 800fd4a:	b083      	sub	sp, #12
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
 800fd50:	460b      	mov	r3, r1
 800fd52:	70fb      	strb	r3, [r7, #3]
    {
    }
 800fd54:	bf00      	nop
 800fd56:	370c      	adds	r7, #12
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5e:	4770      	bx	lr

0800fd60 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 800fd60:	b480      	push	{r7}
 800fd62:	b083      	sub	sp, #12
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
    {
 800fd68:	4a04      	ldr	r2, [pc, #16]	; (800fd7c <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	601a      	str	r2, [r3, #0]
    }
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	4618      	mov	r0, r3
 800fd72:	370c      	adds	r7, #12
 800fd74:	46bd      	mov	sp, r7
 800fd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7a:	4770      	bx	lr
 800fd7c:	08027d84 	.word	0x08027d84

0800fd80 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b082      	sub	sp, #8
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
    }
 800fd88:	6878      	ldr	r0, [r7, #4]
 800fd8a:	f7ff ffe9 	bl	800fd60 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800fd8e:	2104      	movs	r1, #4
 800fd90:	6878      	ldr	r0, [r7, #4]
 800fd92:	f016 f99f 	bl	80260d4 <_ZdlPvj>
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	4618      	mov	r0, r3
 800fd9a:	3708      	adds	r7, #8
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	bd80      	pop	{r7, pc}

0800fda0 <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800fda0:	b480      	push	{r7}
 800fda2:	af00      	add	r7, sp, #0
    {
        return instance;
 800fda4:	4b03      	ldr	r3, [pc, #12]	; (800fdb4 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800fda6:	681b      	ldr	r3, [r3, #0]
    }
 800fda8:	4618      	mov	r0, r3
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb0:	4770      	bx	lr
 800fdb2:	bf00      	nop
 800fdb4:	2000c5b4 	.word	0x2000c5b4

0800fdb8 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800fdb8:	b480      	push	{r7}
 800fdba:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800fdbc:	4b0b      	ldr	r3, [pc, #44]	; (800fdec <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d008      	beq.n	800fdda <_ZN8touchgfx3HAL3lcdEv+0x22>
 800fdc8:	4b08      	ldr	r3, [pc, #32]	; (800fdec <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d003      	beq.n	800fdda <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800fdd2:	4b06      	ldr	r3, [pc, #24]	; (800fdec <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fdd8:	e002      	b.n	800fde0 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800fdda:	4b04      	ldr	r3, [pc, #16]	; (800fdec <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	689b      	ldr	r3, [r3, #8]
        }
    }
 800fde0:	4618      	mov	r0, r3
 800fde2:	46bd      	mov	sp, r7
 800fde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde8:	4770      	bx	lr
 800fdea:	bf00      	nop
 800fdec:	2000c5b4 	.word	0x2000c5b4

0800fdf0 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b082      	sub	sp, #8
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	6078      	str	r0, [r7, #4]
 800fdf8:	4a05      	ldr	r2, [pc, #20]	; (800fe10 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	601a      	str	r2, [r3, #0]
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	4618      	mov	r0, r3
 800fe02:	f7ff ff1f 	bl	800fc44 <_ZN8touchgfx15UIEventListenerD1Ev>
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	4618      	mov	r0, r3
 800fe0a:	3708      	adds	r7, #8
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	bd80      	pop	{r7, pc}
 800fe10:	08029b90 	.word	0x08029b90

0800fe14 <_ZN8touchgfx11ApplicationD0Ev>:
 800fe14:	b580      	push	{r7, lr}
 800fe16:	b082      	sub	sp, #8
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	6078      	str	r0, [r7, #4]
 800fe1c:	6878      	ldr	r0, [r7, #4]
 800fe1e:	f7ff ffe7 	bl	800fdf0 <_ZN8touchgfx11ApplicationD1Ev>
 800fe22:	f44f 7198 	mov.w	r1, #304	; 0x130
 800fe26:	6878      	ldr	r0, [r7, #4]
 800fe28:	f016 f954 	bl	80260d4 <_ZdlPvj>
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	4618      	mov	r0, r3
 800fe30:	3708      	adds	r7, #8
 800fe32:	46bd      	mov	sp, r7
 800fe34:	bd80      	pop	{r7, pc}
	...

0800fe38 <_ZN8touchgfx14MVPApplicationC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    MVPApplication() :
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b082      	sub	sp, #8
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
        currentPresenter(0),
        pendingScreenTransitionCallback(0)
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	4618      	mov	r0, r3
 800fe44:	f00a f9a2 	bl	801a18c <_ZN8touchgfx11ApplicationC1Ev>
 800fe48:	4a09      	ldr	r2, [pc, #36]	; (800fe70 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	601a      	str	r2, [r3, #0]
        currentPresenter(0),
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	2200      	movs	r2, #0
 800fe52:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        pendingScreenTransitionCallback(0)
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	2200      	movs	r2, #0
 800fe5a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    {
        instance = this;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	4a04      	ldr	r2, [pc, #16]	; (800fe74 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800fe62:	6013      	str	r3, [r2, #0]
    }
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	4618      	mov	r0, r3
 800fe68:	3708      	adds	r7, #8
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	bd80      	pop	{r7, pc}
 800fe6e:	bf00      	nop
 800fe70:	08027d48 	.word	0x08027d48
 800fe74:	2000c640 	.word	0x2000c640

0800fe78 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b082      	sub	sp, #8
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
 800fe80:	4a05      	ldr	r2, [pc, #20]	; (800fe98 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	601a      	str	r2, [r3, #0]
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	4618      	mov	r0, r3
 800fe8a:	f7ff ffb1 	bl	800fdf0 <_ZN8touchgfx11ApplicationD1Ev>
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	4618      	mov	r0, r3
 800fe92:	3708      	adds	r7, #8
 800fe94:	46bd      	mov	sp, r7
 800fe96:	bd80      	pop	{r7, pc}
 800fe98:	08027d48 	.word	0x08027d48

0800fe9c <_ZN8touchgfx14MVPApplicationD0Ev>:
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b082      	sub	sp, #8
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
 800fea4:	6878      	ldr	r0, [r7, #4]
 800fea6:	f7ff ffe7 	bl	800fe78 <_ZN8touchgfx14MVPApplicationD1Ev>
 800feaa:	f44f 719c 	mov.w	r1, #312	; 0x138
 800feae:	6878      	ldr	r0, [r7, #4]
 800feb0:	f016 f910 	bl	80260d4 <_ZdlPvj>
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	4618      	mov	r0, r3
 800feb8:	3708      	adds	r7, #8
 800feba:	46bd      	mov	sp, r7
 800febc:	bd80      	pop	{r7, pc}

0800febe <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800febe:	b580      	push	{r7, lr}
 800fec0:	b082      	sub	sp, #8
 800fec2:	af00      	add	r7, sp, #0
 800fec4:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800fec6:	6878      	ldr	r0, [r7, #4]
 800fec8:	f000 f804 	bl	800fed4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800fecc:	bf00      	nop
 800fece:	3708      	adds	r7, #8
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bd80      	pop	{r7, pc}

0800fed4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b082      	sub	sp, #8
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d00f      	beq.n	800ff06 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	330c      	adds	r3, #12
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	4610      	mov	r0, r2
 800fefa:	4798      	blx	r3
 800fefc:	4603      	mov	r3, r0
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d001      	beq.n	800ff06 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800ff02:	2301      	movs	r3, #1
 800ff04:	e000      	b.n	800ff08 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800ff06:	2300      	movs	r3, #0
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d00e      	beq.n	800ff2a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	3308      	adds	r3, #8
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	4610      	mov	r0, r2
 800ff20:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	2200      	movs	r2, #0
 800ff26:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 800ff2a:	bf00      	nop
 800ff2c:	3708      	adds	r7, #8
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	bd80      	pop	{r7, pc}

0800ff32 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 800ff32:	b580      	push	{r7, lr}
 800ff34:	b084      	sub	sp, #16
 800ff36:	af00      	add	r7, sp, #0
 800ff38:	60f8      	str	r0, [r7, #12]
 800ff3a:	60b9      	str	r1, [r7, #8]
 800ff3c:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 800ff3e:	f00a f903 	bl	801a148 <_ZN8touchgfx11Application11getInstanceEv>
 800ff42:	4603      	mov	r3, r0
 800ff44:	4618      	mov	r0, r3
 800ff46:	f00a f905 	bl	801a154 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d008      	beq.n	800ff64 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681a      	ldr	r2, [r3, #0]
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	330c      	adds	r3, #12
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	4610      	mov	r0, r2
 800ff62:	4798      	blx	r3
    }
    if (*currentTrans)
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d007      	beq.n	800ff7c <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681a      	ldr	r2, [r3, #0]
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	4610      	mov	r0, r2
 800ff7a:	4798      	blx	r3
    }
    if (*currentScreen)
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d008      	beq.n	800ff96 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	681a      	ldr	r2, [r3, #0]
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	3314      	adds	r3, #20
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	4610      	mov	r0, r2
 800ff94:	4798      	blx	r3
    }
    if (*currentPresenter)
 800ff96:	68bb      	ldr	r3, [r7, #8]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d008      	beq.n	800ffb0 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 800ff9e:	68bb      	ldr	r3, [r7, #8]
 800ffa0:	681a      	ldr	r2, [r3, #0]
 800ffa2:	68bb      	ldr	r3, [r7, #8]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	3304      	adds	r3, #4
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	4610      	mov	r0, r2
 800ffae:	4798      	blx	r3
    }
    if (*currentScreen)
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d007      	beq.n	800ffc8 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	681a      	ldr	r2, [r3, #0]
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	4610      	mov	r0, r2
 800ffc6:	4798      	blx	r3
    }
    if (*currentPresenter)
 800ffc8:	68bb      	ldr	r3, [r7, #8]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d008      	beq.n	800ffe2 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 800ffd0:	68bb      	ldr	r3, [r7, #8]
 800ffd2:	681a      	ldr	r2, [r3, #0]
 800ffd4:	68bb      	ldr	r3, [r7, #8]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	3308      	adds	r3, #8
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	4610      	mov	r0, r2
 800ffe0:	4798      	blx	r3
    }
}
 800ffe2:	bf00      	nop
 800ffe4:	3710      	adds	r7, #16
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	bd80      	pop	{r7, pc}

0800ffea <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 800ffea:	b580      	push	{r7, lr}
 800ffec:	b084      	sub	sp, #16
 800ffee:	af00      	add	r7, sp, #0
 800fff0:	60f8      	str	r0, [r7, #12]
 800fff2:	60b9      	str	r1, [r7, #8]
 800fff4:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	330c      	adds	r3, #12
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	68f8      	ldr	r0, [r7, #12]
 8010000:	4798      	blx	r3
    newPresenter->activate();
 8010002:	68bb      	ldr	r3, [r7, #8]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	68b8      	ldr	r0, [r7, #8]
 801000a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 801000c:	6879      	ldr	r1, [r7, #4]
 801000e:	68f8      	ldr	r0, [r7, #12]
 8010010:	f00b f9aa 	bl	801b368 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	3310      	adds	r3, #16
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	6878      	ldr	r0, [r7, #4]
 801001e:	4798      	blx	r3

    Application::getInstance()->draw();
 8010020:	f00a f892 	bl	801a148 <_ZN8touchgfx11Application11getInstanceEv>
 8010024:	4603      	mov	r3, r0
 8010026:	681a      	ldr	r2, [r3, #0]
 8010028:	3228      	adds	r2, #40	; 0x28
 801002a:	6812      	ldr	r2, [r2, #0]
 801002c:	4618      	mov	r0, r3
 801002e:	4790      	blx	r2
}
 8010030:	bf00      	nop
 8010032:	3710      	adds	r7, #16
 8010034:	46bd      	mov	sp, r7
 8010036:	bd80      	pop	{r7, pc}

08010038 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 8010038:	b480      	push	{r7}
 801003a:	b083      	sub	sp, #12
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
 8010040:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	683a      	ldr	r2, [r7, #0]
 8010046:	601a      	str	r2, [r3, #0]
    }
 8010048:	bf00      	nop
 801004a:	370c      	adds	r7, #12
 801004c:	46bd      	mov	sp, r7
 801004e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010052:	4770      	bx	lr

08010054 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8010054:	b580      	push	{r7, lr}
 8010056:	b082      	sub	sp, #8
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
 801005c:	4a08      	ldr	r2, [pc, #32]	; (8010080 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	601a      	str	r2, [r3, #0]
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8010068:	4618      	mov	r0, r3
 801006a:	f000 fa4d 	bl	8010508 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	4618      	mov	r0, r3
 8010072:	f7ff ff01 	bl	800fe78 <_ZN8touchgfx14MVPApplicationD1Ev>
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	4618      	mov	r0, r3
 801007a:	3708      	adds	r7, #8
 801007c:	46bd      	mov	sp, r7
 801007e:	bd80      	pop	{r7, pc}
 8010080:	08027cf4 	.word	0x08027cf4

08010084 <_ZN23FrontendApplicationBaseD0Ev>:
 8010084:	b580      	push	{r7, lr}
 8010086:	b082      	sub	sp, #8
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
 801008c:	6878      	ldr	r0, [r7, #4]
 801008e:	f7ff ffe1 	bl	8010054 <_ZN23FrontendApplicationBaseD1Ev>
 8010092:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8010096:	6878      	ldr	r0, [r7, #4]
 8010098:	f016 f81c 	bl	80260d4 <_ZdlPvj>
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	4618      	mov	r0, r3
 80100a0:	3708      	adds	r7, #8
 80100a2:	46bd      	mov	sp, r7
 80100a4:	bd80      	pop	{r7, pc}
	...

080100a8 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b082      	sub	sp, #8
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	4618      	mov	r0, r3
 80100b4:	f7ff fde6 	bl	800fc84 <_ZN8touchgfx10TransitionC1Ev>
 80100b8:	4a03      	ldr	r2, [pc, #12]	; (80100c8 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	601a      	str	r2, [r3, #0]
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	4618      	mov	r0, r3
 80100c2:	3708      	adds	r7, #8
 80100c4:	46bd      	mov	sp, r7
 80100c6:	bd80      	pop	{r7, pc}
 80100c8:	08027cd4 	.word	0x08027cd4

080100cc <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b082      	sub	sp, #8
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
 80100d4:	4a05      	ldr	r2, [pc, #20]	; (80100ec <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	601a      	str	r2, [r3, #0]
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	4618      	mov	r0, r3
 80100de:	f7ff fde7 	bl	800fcb0 <_ZN8touchgfx10TransitionD1Ev>
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	4618      	mov	r0, r3
 80100e6:	3708      	adds	r7, #8
 80100e8:	46bd      	mov	sp, r7
 80100ea:	bd80      	pop	{r7, pc}
 80100ec:	08027cd4 	.word	0x08027cd4

080100f0 <_ZN8touchgfx12NoTransitionD0Ev>:
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b082      	sub	sp, #8
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
 80100f8:	6878      	ldr	r0, [r7, #4]
 80100fa:	f7ff ffe7 	bl	80100cc <_ZN8touchgfx12NoTransitionD1Ev>
 80100fe:	210c      	movs	r1, #12
 8010100:	6878      	ldr	r0, [r7, #4]
 8010102:	f015 ffe7 	bl	80260d4 <_ZdlPvj>
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	4618      	mov	r0, r3
 801010a:	3708      	adds	r7, #8
 801010c:	46bd      	mov	sp, r7
 801010e:	bd80      	pop	{r7, pc}

08010110 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 8010110:	b480      	push	{r7}
 8010112:	b083      	sub	sp, #12
 8010114:	af00      	add	r7, sp, #0
 8010116:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	2201      	movs	r2, #1
 801011c:	721a      	strb	r2, [r3, #8]
    }
 801011e:	bf00      	nop
 8010120:	370c      	adds	r7, #12
 8010122:	46bd      	mov	sp, r7
 8010124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010128:	4770      	bx	lr

0801012a <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 801012a:	b480      	push	{r7}
 801012c:	b083      	sub	sp, #12
 801012e:	af00      	add	r7, sp, #0
 8010130:	6078      	str	r0, [r7, #4]
 8010132:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	683a      	ldr	r2, [r7, #0]
 8010138:	605a      	str	r2, [r3, #4]
    }
 801013a:	bf00      	nop
 801013c:	370c      	adds	r7, #12
 801013e:	46bd      	mov	sp, r7
 8010140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010144:	4770      	bx	lr
	...

08010148 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8010148:	b580      	push	{r7, lr}
 801014a:	b084      	sub	sp, #16
 801014c:	af00      	add	r7, sp, #0
 801014e:	60f8      	str	r0, [r7, #12]
 8010150:	60b9      	str	r1, [r7, #8]
 8010152:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	4618      	mov	r0, r3
 8010158:	f7ff fe6e 	bl	800fe38 <_ZN8touchgfx14MVPApplicationC1Ev>
 801015c:	4a13      	ldr	r2, [pc, #76]	; (80101ac <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8010168:	4618      	mov	r0, r3
 801016a:	f000 f89f 	bl	80102ac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	687a      	ldr	r2, [r7, #4]
 8010172:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
      model(m)
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	68ba      	ldr	r2, [r7, #8]
 801017a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 801017e:	f7ff fe0f 	bl	800fda0 <_ZN8touchgfx3HAL11getInstanceEv>
 8010182:	4603      	mov	r3, r0
 8010184:	681a      	ldr	r2, [r3, #0]
 8010186:	3208      	adds	r2, #8
 8010188:	6812      	ldr	r2, [r2, #0]
 801018a:	2100      	movs	r1, #0
 801018c:	4618      	mov	r0, r3
 801018e:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8010190:	2000      	movs	r0, #0
 8010192:	f003 fc6b 	bl	8013a6c <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8010196:	f7ff fe0f 	bl	800fdb8 <_ZN8touchgfx3HAL3lcdEv>
 801019a:	4603      	mov	r3, r0
 801019c:	4618      	mov	r0, r3
 801019e:	f00f fcaa 	bl	801faf6 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	4618      	mov	r0, r3
 80101a6:	3710      	adds	r7, #16
 80101a8:	46bd      	mov	sp, r7
 80101aa:	bd80      	pop	{r7, pc}
 80101ac:	08027cf4 	.word	0x08027cf4

080101b0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 80101b0:	b480      	push	{r7}
 80101b2:	b083      	sub	sp, #12
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
 80101b8:	6039      	str	r1, [r7, #0]
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	4618      	mov	r0, r3
 80101be:	370c      	adds	r7, #12
 80101c0:	46bd      	mov	sp, r7
 80101c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c6:	4770      	bx	lr

080101c8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b082      	sub	sp, #8
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
 80101d0:	6039      	str	r1, [r7, #0]
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	683a      	ldr	r2, [r7, #0]
 80101d6:	4611      	mov	r1, r2
 80101d8:	4618      	mov	r0, r3
 80101da:	f7ff ffe9 	bl	80101b0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 80101de:	683b      	ldr	r3, [r7, #0]
 80101e0:	685a      	ldr	r2, [r3, #4]
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	605a      	str	r2, [r3, #4]
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	683a      	ldr	r2, [r7, #0]
 80101ea:	3308      	adds	r3, #8
 80101ec:	3208      	adds	r2, #8
 80101ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80101f2:	e883 0003 	stmia.w	r3, {r0, r1}
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	4618      	mov	r0, r3
 80101fa:	3708      	adds	r7, #8
 80101fc:	46bd      	mov	sp, r7
 80101fe:	bd80      	pop	{r7, pc}

08010200 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 8010200:	b590      	push	{r4, r7, lr}
 8010202:	b089      	sub	sp, #36	; 0x24
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	f503 749c 	add.w	r4, r3, #312	; 0x138
 801020e:	4b10      	ldr	r3, [pc, #64]	; (8010250 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 8010210:	61bb      	str	r3, [r7, #24]
 8010212:	2300      	movs	r3, #0
 8010214:	61fb      	str	r3, [r7, #28]
 8010216:	f107 0008 	add.w	r0, r7, #8
 801021a:	f107 0318 	add.w	r3, r7, #24
 801021e:	cb0c      	ldmia	r3, {r2, r3}
 8010220:	6879      	ldr	r1, [r7, #4]
 8010222:	f000 f85f 	bl	80102e4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8010226:	f107 0308 	add.w	r3, r7, #8
 801022a:	4619      	mov	r1, r3
 801022c:	4620      	mov	r0, r4
 801022e:	f7ff ffcb 	bl	80101c8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8010232:	f107 0308 	add.w	r3, r7, #8
 8010236:	4618      	mov	r0, r3
 8010238:	f000 f966 	bl	8010508 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8010248:	bf00      	nop
 801024a:	3724      	adds	r7, #36	; 0x24
 801024c:	46bd      	mov	sp, r7
 801024e:	bd90      	pop	{r4, r7, pc}
 8010250:	08010255 	.word	0x08010255

08010254 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b084      	sub	sp, #16
 8010258:	af02      	add	r7, sp, #8
 801025a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8010268:	461a      	mov	r2, r3
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8010270:	9300      	str	r3, [sp, #0]
 8010272:	4b04      	ldr	r3, [pc, #16]	; (8010284 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 8010274:	4804      	ldr	r0, [pc, #16]	; (8010288 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 8010276:	f000 f855 	bl	8010324 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801027a:	bf00      	nop
 801027c:	3708      	adds	r7, #8
 801027e:	46bd      	mov	sp, r7
 8010280:	bd80      	pop	{r7, pc}
 8010282:	bf00      	nop
 8010284:	2000c634 	.word	0x2000c634
 8010288:	2000c630 	.word	0x2000c630

0801028c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 801028c:	b480      	push	{r7}
 801028e:	b083      	sub	sp, #12
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
 8010294:	4a04      	ldr	r2, [pc, #16]	; (80102a8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	601a      	str	r2, [r3, #0]
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	4618      	mov	r0, r3
 801029e:	370c      	adds	r7, #12
 80102a0:	46bd      	mov	sp, r7
 80102a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a6:	4770      	bx	lr
 80102a8:	08027d84 	.word	0x08027d84

080102ac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Initializes an empty callback.
     */
    Callback() : pobject(0), pmemfun_0(0) { }
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b082      	sub	sp, #8
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	4618      	mov	r0, r3
 80102b8:	f7ff ffe8 	bl	801028c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80102bc:	4a08      	ldr	r2, [pc, #32]	; (80102e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	601a      	str	r2, [r3, #0]
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	2200      	movs	r2, #0
 80102c6:	605a      	str	r2, [r3, #4]
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	2200      	movs	r2, #0
 80102cc:	609a      	str	r2, [r3, #8]
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	2200      	movs	r2, #0
 80102d2:	60da      	str	r2, [r3, #12]
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	4618      	mov	r0, r3
 80102d8:	3708      	adds	r7, #8
 80102da:	46bd      	mov	sp, r7
 80102dc:	bd80      	pop	{r7, pc}
 80102de:	bf00      	nop
 80102e0:	08027d30 	.word	0x08027d30

080102e4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function
     *                       takes zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b084      	sub	sp, #16
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	60f8      	str	r0, [r7, #12]
 80102ec:	60b9      	str	r1, [r7, #8]
 80102ee:	4639      	mov	r1, r7
 80102f0:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	4618      	mov	r0, r3
 80102f8:	f7ff ffc8 	bl	801028c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80102fc:	4a08      	ldr	r2, [pc, #32]	; (8010320 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	68ba      	ldr	r2, [r7, #8]
 8010306:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	3308      	adds	r3, #8
 801030c:	463a      	mov	r2, r7
 801030e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010312:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	4618      	mov	r0, r3
 801031a:	3710      	adds	r7, #16
 801031c:	46bd      	mov	sp, r7
 801031e:	bd80      	pop	{r7, pc}
 8010320:	08027d30 	.word	0x08027d30

08010324 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8010324:	b590      	push	{r4, r7, lr}
 8010326:	b089      	sub	sp, #36	; 0x24
 8010328:	af00      	add	r7, sp, #0
 801032a:	60f8      	str	r0, [r7, #12]
 801032c:	60b9      	str	r1, [r7, #8]
 801032e:	607a      	str	r2, [r7, #4]
 8010330:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	689a      	ldr	r2, [r3, #8]
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	689b      	ldr	r3, [r3, #8]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	3320      	adds	r3, #32
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	4610      	mov	r0, r2
 8010342:	4798      	blx	r3
 8010344:	4603      	mov	r3, r0
 8010346:	f642 0227 	movw	r2, #10279	; 0x2827
 801034a:	4293      	cmp	r3, r2
 801034c:	d805      	bhi.n	801035a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 801034e:	4b45      	ldr	r3, [pc, #276]	; (8010464 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 8010350:	4a45      	ldr	r2, [pc, #276]	; (8010468 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 8010352:	21c2      	movs	r1, #194	; 0xc2
 8010354:	4845      	ldr	r0, [pc, #276]	; (801046c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 8010356:	f015 feeb 	bl	8026130 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	685a      	ldr	r2, [r3, #4]
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	685b      	ldr	r3, [r3, #4]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	3320      	adds	r3, #32
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	4610      	mov	r0, r2
 801036a:	4798      	blx	r3
 801036c:	4603      	mov	r3, r0
 801036e:	2b0f      	cmp	r3, #15
 8010370:	d805      	bhi.n	801037e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8010372:	4b3f      	ldr	r3, [pc, #252]	; (8010470 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 8010374:	4a3c      	ldr	r2, [pc, #240]	; (8010468 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 8010376:	21c3      	movs	r1, #195	; 0xc3
 8010378:	483c      	ldr	r0, [pc, #240]	; (801046c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 801037a:	f015 fed9 	bl	8026130 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	68da      	ldr	r2, [r3, #12]
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	68db      	ldr	r3, [r3, #12]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	3320      	adds	r3, #32
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	4610      	mov	r0, r2
 801038e:	4798      	blx	r3
 8010390:	4603      	mov	r3, r0
 8010392:	2b0b      	cmp	r3, #11
 8010394:	d805      	bhi.n	80103a2 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 8010396:	4b37      	ldr	r3, [pc, #220]	; (8010474 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 8010398:	4a33      	ldr	r2, [pc, #204]	; (8010468 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 801039a:	21c4      	movs	r1, #196	; 0xc4
 801039c:	4833      	ldr	r0, [pc, #204]	; (801046c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 801039e:	f015 fec7 	bl	8026130 <__assert_func>

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 80103a2:	683a      	ldr	r2, [r7, #0]
 80103a4:	68b9      	ldr	r1, [r7, #8]
 80103a6:	68f8      	ldr	r0, [r7, #12]
 80103a8:	f7ff fdc3 	bl	800ff32 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	68db      	ldr	r3, [r3, #12]
 80103b0:	2100      	movs	r1, #0
 80103b2:	4618      	mov	r0, r3
 80103b4:	f000 f860 	bl	8010478 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80103b8:	4603      	mov	r3, r0
 80103ba:	4619      	mov	r1, r3
 80103bc:	200c      	movs	r0, #12
 80103be:	f7ff fbf3 	bl	800fba8 <_ZnwjPv>
 80103c2:	4604      	mov	r4, r0
 80103c4:	4620      	mov	r0, r4
 80103c6:	f7ff fe6f 	bl	80100a8 <_ZN8touchgfx12NoTransitionC1Ev>
 80103ca:	61fc      	str	r4, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	689b      	ldr	r3, [r3, #8]
 80103d0:	2100      	movs	r1, #0
 80103d2:	4618      	mov	r0, r3
 80103d4:	f000 f863 	bl	801049e <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 80103d8:	4603      	mov	r3, r0
 80103da:	4619      	mov	r1, r3
 80103dc:	f642 0028 	movw	r0, #10280	; 0x2828
 80103e0:	f7ff fbe2 	bl	800fba8 <_ZnwjPv>
 80103e4:	4604      	mov	r4, r0
 80103e6:	4620      	mov	r0, r4
 80103e8:	f003 fdc8 	bl	8013f7c <_ZN8MainViewC1Ev>
 80103ec:	61bc      	str	r4, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	685b      	ldr	r3, [r3, #4]
 80103f2:	2100      	movs	r1, #0
 80103f4:	4618      	mov	r0, r3
 80103f6:	f000 f865 	bl	80104c4 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 80103fa:	4603      	mov	r3, r0
 80103fc:	4619      	mov	r1, r3
 80103fe:	2010      	movs	r0, #16
 8010400:	f7ff fbd2 	bl	800fba8 <_ZnwjPv>
 8010404:	4604      	mov	r4, r0
 8010406:	69b9      	ldr	r1, [r7, #24]
 8010408:	4620      	mov	r0, r4
 801040a:	f003 fcfd 	bl	8013e08 <_ZN13MainPresenterC1ER8MainView>
 801040e:	617c      	str	r4, [r7, #20]
    *currentTrans = newTransition;
 8010410:	683b      	ldr	r3, [r7, #0]
 8010412:	69fa      	ldr	r2, [r7, #28]
 8010414:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8010416:	68bb      	ldr	r3, [r7, #8]
 8010418:	697a      	ldr	r2, [r7, #20]
 801041a:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	69ba      	ldr	r2, [r7, #24]
 8010420:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8010422:	697b      	ldr	r3, [r7, #20]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d002      	beq.n	801042e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10a>
 8010428:	697b      	ldr	r3, [r7, #20]
 801042a:	3304      	adds	r3, #4
 801042c:	e000      	b.n	8010430 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 801042e:	2300      	movs	r3, #0
 8010430:	4619      	mov	r1, r3
 8010432:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010434:	f7ff fe00 	bl	8010038 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8010438:	697b      	ldr	r3, [r7, #20]
 801043a:	3304      	adds	r3, #4
 801043c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801043e:	4618      	mov	r0, r3
 8010440:	f7ff fe73 	bl	801012a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8010444:	69bb      	ldr	r3, [r7, #24]
 8010446:	6979      	ldr	r1, [r7, #20]
 8010448:	4618      	mov	r0, r3
 801044a:	f000 f84e 	bl	80104ea <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 801044e:	69fa      	ldr	r2, [r7, #28]
 8010450:	6979      	ldr	r1, [r7, #20]
 8010452:	69b8      	ldr	r0, [r7, #24]
 8010454:	f7ff fdc9 	bl	800ffea <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 8010458:	697b      	ldr	r3, [r7, #20]
}
 801045a:	4618      	mov	r0, r3
 801045c:	3724      	adds	r7, #36	; 0x24
 801045e:	46bd      	mov	sp, r7
 8010460:	bd90      	pop	{r4, r7, pc}
 8010462:	bf00      	nop
 8010464:	0802730c 	.word	0x0802730c
 8010468:	0802739c 	.word	0x0802739c
 801046c:	0802749c 	.word	0x0802749c
 8010470:	080274e0 	.word	0x080274e0
 8010474:	08027584 	.word	0x08027584

08010478 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 8010478:	b580      	push	{r7, lr}
 801047a:	b082      	sub	sp, #8
 801047c:	af00      	add	r7, sp, #0
 801047e:	6078      	str	r0, [r7, #4]
 8010480:	460b      	mov	r3, r1
 8010482:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	3324      	adds	r3, #36	; 0x24
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	887a      	ldrh	r2, [r7, #2]
 801048e:	4611      	mov	r1, r2
 8010490:	6878      	ldr	r0, [r7, #4]
 8010492:	4798      	blx	r3
 8010494:	4603      	mov	r3, r0
    }
 8010496:	4618      	mov	r0, r3
 8010498:	3708      	adds	r7, #8
 801049a:	46bd      	mov	sp, r7
 801049c:	bd80      	pop	{r7, pc}

0801049e <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 801049e:	b580      	push	{r7, lr}
 80104a0:	b082      	sub	sp, #8
 80104a2:	af00      	add	r7, sp, #0
 80104a4:	6078      	str	r0, [r7, #4]
 80104a6:	460b      	mov	r3, r1
 80104a8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	3324      	adds	r3, #36	; 0x24
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	887a      	ldrh	r2, [r7, #2]
 80104b4:	4611      	mov	r1, r2
 80104b6:	6878      	ldr	r0, [r7, #4]
 80104b8:	4798      	blx	r3
 80104ba:	4603      	mov	r3, r0
    }
 80104bc:	4618      	mov	r0, r3
 80104be:	3708      	adds	r7, #8
 80104c0:	46bd      	mov	sp, r7
 80104c2:	bd80      	pop	{r7, pc}

080104c4 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b082      	sub	sp, #8
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	6078      	str	r0, [r7, #4]
 80104cc:	460b      	mov	r3, r1
 80104ce:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	3324      	adds	r3, #36	; 0x24
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	887a      	ldrh	r2, [r7, #2]
 80104da:	4611      	mov	r1, r2
 80104dc:	6878      	ldr	r0, [r7, #4]
 80104de:	4798      	blx	r3
 80104e0:	4603      	mov	r3, r0
    }
 80104e2:	4618      	mov	r0, r3
 80104e4:	3708      	adds	r7, #8
 80104e6:	46bd      	mov	sp, r7
 80104e8:	bd80      	pop	{r7, pc}

080104ea <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 80104ea:	b480      	push	{r7}
 80104ec:	b083      	sub	sp, #12
 80104ee:	af00      	add	r7, sp, #0
 80104f0:	6078      	str	r0, [r7, #4]
 80104f2:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	683a      	ldr	r2, [r7, #0]
 80104f8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80104fa:	bf00      	nop
 80104fc:	370c      	adds	r7, #12
 80104fe:	46bd      	mov	sp, r7
 8010500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010504:	4770      	bx	lr
	...

08010508 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8010508:	b580      	push	{r7, lr}
 801050a:	b082      	sub	sp, #8
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
 8010510:	4a05      	ldr	r2, [pc, #20]	; (8010528 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	601a      	str	r2, [r3, #0]
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	4618      	mov	r0, r3
 801051a:	f7ff fc21 	bl	800fd60 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	4618      	mov	r0, r3
 8010522:	3708      	adds	r7, #8
 8010524:	46bd      	mov	sp, r7
 8010526:	bd80      	pop	{r7, pc}
 8010528:	08027d30 	.word	0x08027d30

0801052c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 801052c:	b580      	push	{r7, lr}
 801052e:	b082      	sub	sp, #8
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
 8010534:	6878      	ldr	r0, [r7, #4]
 8010536:	f7ff ffe7 	bl	8010508 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 801053a:	2110      	movs	r1, #16
 801053c:	6878      	ldr	r0, [r7, #4]
 801053e:	f015 fdc9 	bl	80260d4 <_ZdlPvj>
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	4618      	mov	r0, r3
 8010546:	3708      	adds	r7, #8
 8010548:	46bd      	mov	sp, r7
 801054a:	bd80      	pop	{r7, pc}

0801054c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 801054c:	b580      	push	{r7, lr}
 801054e:	b082      	sub	sp, #8
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	685b      	ldr	r3, [r3, #4]
 8010558:	687a      	ldr	r2, [r7, #4]
 801055a:	68d2      	ldr	r2, [r2, #12]
 801055c:	1052      	asrs	r2, r2, #1
 801055e:	1899      	adds	r1, r3, r2
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	68db      	ldr	r3, [r3, #12]
 8010564:	f003 0301 	and.w	r3, r3, #1
 8010568:	2b00      	cmp	r3, #0
 801056a:	d102      	bne.n	8010572 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	689b      	ldr	r3, [r3, #8]
 8010570:	e00a      	b.n	8010588 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	685b      	ldr	r3, [r3, #4]
 8010576:	687a      	ldr	r2, [r7, #4]
 8010578:	68d2      	ldr	r2, [r2, #12]
 801057a:	1052      	asrs	r2, r2, #1
 801057c:	4413      	add	r3, r2
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	687a      	ldr	r2, [r7, #4]
 8010582:	6892      	ldr	r2, [r2, #8]
 8010584:	4413      	add	r3, r2
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	4608      	mov	r0, r1
 801058a:	4798      	blx	r3
    }
 801058c:	bf00      	nop
 801058e:	3708      	adds	r7, #8
 8010590:	46bd      	mov	sp, r7
 8010592:	bd80      	pop	{r7, pc}

08010594 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8010594:	b480      	push	{r7}
 8010596:	b083      	sub	sp, #12
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	685b      	ldr	r3, [r3, #4]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d010      	beq.n	80105c6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	689b      	ldr	r3, [r3, #8]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d107      	bne.n	80105bc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	68db      	ldr	r3, [r3, #12]
 80105b0:	f003 0301 	and.w	r3, r3, #1
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d101      	bne.n	80105bc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80105b8:	2301      	movs	r3, #1
 80105ba:	e000      	b.n	80105be <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 80105bc:	2300      	movs	r3, #0
 80105be:	2b01      	cmp	r3, #1
 80105c0:	d001      	beq.n	80105c6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80105c2:	2301      	movs	r3, #1
 80105c4:	e000      	b.n	80105c8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 80105c6:	2300      	movs	r3, #0
    }
 80105c8:	4618      	mov	r0, r3
 80105ca:	370c      	adds	r7, #12
 80105cc:	46bd      	mov	sp, r7
 80105ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d2:	4770      	bx	lr

080105d4 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param col The color.
     *
     * @see Color::getColorFrom24BitRGB()
     */
    colortype(uint32_t col)
 80105d4:	b480      	push	{r7}
 80105d6:	b083      	sub	sp, #12
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
 80105dc:	6039      	str	r1, [r7, #0]
    {
        color = col;
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	683a      	ldr	r2, [r7, #0]
 80105e2:	601a      	str	r2, [r3, #0]
    }
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	4618      	mov	r0, r3
 80105e8:	370c      	adds	r7, #12
 80105ea:	46bd      	mov	sp, r7
 80105ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f0:	4770      	bx	lr

080105f2 <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 80105f2:	b480      	push	{r7}
 80105f4:	b083      	sub	sp, #12
 80105f6:	af00      	add	r7, sp, #0
 80105f8:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	2200      	movs	r2, #0
 80105fe:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	2200      	movs	r2, #0
 8010604:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	2200      	movs	r2, #0
 801060a:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	2200      	movs	r2, #0
 8010610:	80da      	strh	r2, [r3, #6]
    }
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	4618      	mov	r0, r3
 8010616:	370c      	adds	r7, #12
 8010618:	46bd      	mov	sp, r7
 801061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061e:	4770      	bx	lr

08010620 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 8010620:	b480      	push	{r7}
 8010622:	b085      	sub	sp, #20
 8010624:	af00      	add	r7, sp, #0
 8010626:	60f8      	str	r0, [r7, #12]
 8010628:	4608      	mov	r0, r1
 801062a:	4611      	mov	r1, r2
 801062c:	461a      	mov	r2, r3
 801062e:	4603      	mov	r3, r0
 8010630:	817b      	strh	r3, [r7, #10]
 8010632:	460b      	mov	r3, r1
 8010634:	813b      	strh	r3, [r7, #8]
 8010636:	4613      	mov	r3, r2
 8010638:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	897a      	ldrh	r2, [r7, #10]
 801063e:	801a      	strh	r2, [r3, #0]
        this->y = y;
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	893a      	ldrh	r2, [r7, #8]
 8010644:	805a      	strh	r2, [r3, #2]
        this->width = width;
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	88fa      	ldrh	r2, [r7, #6]
 801064a:	809a      	strh	r2, [r3, #4]
        this->height = height;
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	8b3a      	ldrh	r2, [r7, #24]
 8010650:	80da      	strh	r2, [r3, #6]
    }
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	4618      	mov	r0, r3
 8010656:	3714      	adds	r7, #20
 8010658:	46bd      	mov	sp, r7
 801065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801065e:	4770      	bx	lr

08010660 <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 8010660:	b480      	push	{r7}
 8010662:	b083      	sub	sp, #12
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
 8010668:	460b      	mov	r3, r1
 801066a:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	887a      	ldrh	r2, [r7, #2]
 8010670:	801a      	strh	r2, [r3, #0]
    {
    }
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	4618      	mov	r0, r3
 8010676:	370c      	adds	r7, #12
 8010678:	46bd      	mov	sp, r7
 801067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067e:	4770      	bx	lr

08010680 <_ZN8touchgfx8DrawableC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Drawable() : rect(0, 0, 0, 0),
 8010680:	b580      	push	{r7, lr}
 8010682:	b084      	sub	sp, #16
 8010684:	af02      	add	r7, sp, #8
 8010686:	6078      	str	r0, [r7, #4]
        parent(0),
        nextSibling(0),
        nextDrawChainElement(0),
        touchable(false),
        visible(true)
 8010688:	4a13      	ldr	r2, [pc, #76]	; (80106d8 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	601a      	str	r2, [r3, #0]
    Drawable() : rect(0, 0, 0, 0),
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	1d18      	adds	r0, r3, #4
 8010692:	2300      	movs	r3, #0
 8010694:	9300      	str	r3, [sp, #0]
 8010696:	2300      	movs	r3, #0
 8010698:	2200      	movs	r2, #0
 801069a:	2100      	movs	r1, #0
 801069c:	f7ff ffc0 	bl	8010620 <_ZN8touchgfx4RectC1Essss>
        visible(true)
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	330c      	adds	r3, #12
 80106a4:	4618      	mov	r0, r3
 80106a6:	f7ff ffa4 	bl	80105f2 <_ZN8touchgfx4RectC1Ev>
        parent(0),
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	2200      	movs	r2, #0
 80106ae:	615a      	str	r2, [r3, #20]
        nextSibling(0),
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	2200      	movs	r2, #0
 80106b4:	619a      	str	r2, [r3, #24]
        nextDrawChainElement(0),
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	2200      	movs	r2, #0
 80106ba:	61da      	str	r2, [r3, #28]
        touchable(false),
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	2200      	movs	r2, #0
 80106c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        visible(true)
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	2201      	movs	r2, #1
 80106c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	4618      	mov	r0, r3
 80106d0:	3708      	adds	r7, #8
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bd80      	pop	{r7, pc}
 80106d6:	bf00      	nop
 80106d8:	08029cc8 	.word	0x08029cc8

080106dc <_ZN8touchgfx8DrawableD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Drawable() { }
 80106dc:	b480      	push	{r7}
 80106de:	b083      	sub	sp, #12
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
 80106e4:	4a04      	ldr	r2, [pc, #16]	; (80106f8 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	601a      	str	r2, [r3, #0]
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	4618      	mov	r0, r3
 80106ee:	370c      	adds	r7, #12
 80106f0:	46bd      	mov	sp, r7
 80106f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f6:	4770      	bx	lr
 80106f8:	08029cc8 	.word	0x08029cc8

080106fc <_ZN8touchgfx8DrawableD0Ev>:
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b082      	sub	sp, #8
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
 8010704:	6878      	ldr	r0, [r7, #4]
 8010706:	f7ff ffe9 	bl	80106dc <_ZN8touchgfx8DrawableD1Ev>
 801070a:	2128      	movs	r1, #40	; 0x28
 801070c:	6878      	ldr	r0, [r7, #4]
 801070e:	f015 fce1 	bl	80260d4 <_ZdlPvj>
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	4618      	mov	r0, r3
 8010716:	3708      	adds	r7, #8
 8010718:	46bd      	mov	sp, r7
 801071a:	bd80      	pop	{r7, pc}

0801071c <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 801071c:	b580      	push	{r7, lr}
 801071e:	b084      	sub	sp, #16
 8010720:	af00      	add	r7, sp, #0
 8010722:	60f8      	str	r0, [r7, #12]
 8010724:	4608      	mov	r0, r1
 8010726:	4611      	mov	r1, r2
 8010728:	461a      	mov	r2, r3
 801072a:	4603      	mov	r3, r0
 801072c:	817b      	strh	r3, [r7, #10]
 801072e:	460b      	mov	r3, r1
 8010730:	813b      	strh	r3, [r7, #8]
 8010732:	4613      	mov	r3, r2
 8010734:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	3334      	adds	r3, #52	; 0x34
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8010742:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8010746:	68f8      	ldr	r0, [r7, #12]
 8010748:	4798      	blx	r3
        setWidth(width);
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	3338      	adds	r3, #56	; 0x38
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010756:	4611      	mov	r1, r2
 8010758:	68f8      	ldr	r0, [r7, #12]
 801075a:	4798      	blx	r3
        setHeight(height);
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	333c      	adds	r3, #60	; 0x3c
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8010768:	4611      	mov	r1, r2
 801076a:	68f8      	ldr	r0, [r7, #12]
 801076c:	4798      	blx	r3
    }
 801076e:	bf00      	nop
 8010770:	3710      	adds	r7, #16
 8010772:	46bd      	mov	sp, r7
 8010774:	bd80      	pop	{r7, pc}

08010776 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 8010776:	b480      	push	{r7}
 8010778:	b083      	sub	sp, #12
 801077a:	af00      	add	r7, sp, #0
 801077c:	6078      	str	r0, [r7, #4]
 801077e:	460b      	mov	r3, r1
 8010780:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	887a      	ldrh	r2, [r7, #2]
 8010786:	809a      	strh	r2, [r3, #4]
    }
 8010788:	bf00      	nop
 801078a:	370c      	adds	r7, #12
 801078c:	46bd      	mov	sp, r7
 801078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010792:	4770      	bx	lr

08010794 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 8010794:	b480      	push	{r7}
 8010796:	b083      	sub	sp, #12
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
 801079c:	460b      	mov	r3, r1
 801079e:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	887a      	ldrh	r2, [r7, #2]
 80107a4:	80da      	strh	r2, [r3, #6]
    }
 80107a6:	bf00      	nop
 80107a8:	370c      	adds	r7, #12
 80107aa:	46bd      	mov	sp, r7
 80107ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b0:	4770      	bx	lr

080107b2 <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 80107b2:	b580      	push	{r7, lr}
 80107b4:	b082      	sub	sp, #8
 80107b6:	af00      	add	r7, sp, #0
 80107b8:	6078      	str	r0, [r7, #4]
 80107ba:	460b      	mov	r3, r1
 80107bc:	807b      	strh	r3, [r7, #2]
 80107be:	4613      	mov	r3, r2
 80107c0:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	332c      	adds	r3, #44	; 0x2c
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80107ce:	4611      	mov	r1, r2
 80107d0:	6878      	ldr	r0, [r7, #4]
 80107d2:	4798      	blx	r3
        setY(y);
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	3330      	adds	r3, #48	; 0x30
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	f9b7 2000 	ldrsh.w	r2, [r7]
 80107e0:	4611      	mov	r1, r2
 80107e2:	6878      	ldr	r0, [r7, #4]
 80107e4:	4798      	blx	r3
    }
 80107e6:	bf00      	nop
 80107e8:	3708      	adds	r7, #8
 80107ea:	46bd      	mov	sp, r7
 80107ec:	bd80      	pop	{r7, pc}

080107ee <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 80107ee:	b480      	push	{r7}
 80107f0:	b083      	sub	sp, #12
 80107f2:	af00      	add	r7, sp, #0
 80107f4:	6078      	str	r0, [r7, #4]
 80107f6:	460b      	mov	r3, r1
 80107f8:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	887a      	ldrh	r2, [r7, #2]
 80107fe:	811a      	strh	r2, [r3, #8]
    }
 8010800:	bf00      	nop
 8010802:	370c      	adds	r7, #12
 8010804:	46bd      	mov	sp, r7
 8010806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080a:	4770      	bx	lr

0801080c <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 801080c:	b480      	push	{r7}
 801080e:	b083      	sub	sp, #12
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
 8010814:	460b      	mov	r3, r1
 8010816:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	887a      	ldrh	r2, [r7, #2]
 801081c:	815a      	strh	r2, [r3, #10]
    }
 801081e:	bf00      	nop
 8010820:	370c      	adds	r7, #12
 8010822:	46bd      	mov	sp, r7
 8010824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010828:	4770      	bx	lr

0801082a <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 801082a:	b480      	push	{r7}
 801082c:	b083      	sub	sp, #12
 801082e:	af00      	add	r7, sp, #0
 8010830:	6078      	str	r0, [r7, #4]
 8010832:	bf00      	nop
 8010834:	370c      	adds	r7, #12
 8010836:	46bd      	mov	sp, r7
 8010838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801083c:	4770      	bx	lr

0801083e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 801083e:	b480      	push	{r7}
 8010840:	b083      	sub	sp, #12
 8010842:	af00      	add	r7, sp, #0
 8010844:	6078      	str	r0, [r7, #4]
 8010846:	6039      	str	r1, [r7, #0]
 8010848:	bf00      	nop
 801084a:	370c      	adds	r7, #12
 801084c:	46bd      	mov	sp, r7
 801084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010852:	4770      	bx	lr

08010854 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 8010854:	b480      	push	{r7}
 8010856:	b083      	sub	sp, #12
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
 801085c:	6039      	str	r1, [r7, #0]
 801085e:	bf00      	nop
 8010860:	370c      	adds	r7, #12
 8010862:	46bd      	mov	sp, r7
 8010864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010868:	4770      	bx	lr

0801086a <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 801086a:	b480      	push	{r7}
 801086c:	b083      	sub	sp, #12
 801086e:	af00      	add	r7, sp, #0
 8010870:	6078      	str	r0, [r7, #4]
 8010872:	6039      	str	r1, [r7, #0]
 8010874:	bf00      	nop
 8010876:	370c      	adds	r7, #12
 8010878:	46bd      	mov	sp, r7
 801087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087e:	4770      	bx	lr

08010880 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 8010880:	b480      	push	{r7}
 8010882:	b083      	sub	sp, #12
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
 8010888:	bf00      	nop
 801088a:	370c      	adds	r7, #12
 801088c:	46bd      	mov	sp, r7
 801088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010892:	4770      	bx	lr

08010894 <_ZN8touchgfx8Drawable10setVisibleEb>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param vis true if this Drawable should be visible. By default, drawables are visible unless
     *            this function has been called with false as argument.
     */
    void setVisible(bool vis)
 8010894:	b480      	push	{r7}
 8010896:	b083      	sub	sp, #12
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
 801089c:	460b      	mov	r3, r1
 801089e:	70fb      	strb	r3, [r7, #3]
    {
        visible = vis;
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	78fa      	ldrb	r2, [r7, #3]
 80108a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 80108a8:	bf00      	nop
 80108aa:	370c      	adds	r7, #12
 80108ac:	46bd      	mov	sp, r7
 80108ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b2:	4770      	bx	lr

080108b4 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 80108b4:	b480      	push	{r7}
 80108b6:	b083      	sub	sp, #12
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
    {
        return visible;
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 80108c2:	4618      	mov	r0, r3
 80108c4:	370c      	adds	r7, #12
 80108c6:	46bd      	mov	sp, r7
 80108c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108cc:	4770      	bx	lr

080108ce <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 80108ce:	b480      	push	{r7}
 80108d0:	b083      	sub	sp, #12
 80108d2:	af00      	add	r7, sp, #0
 80108d4:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 80108dc:	4618      	mov	r0, r3
 80108de:	370c      	adds	r7, #12
 80108e0:	46bd      	mov	sp, r7
 80108e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e6:	4770      	bx	lr

080108e8 <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b082      	sub	sp, #8
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
 80108f0:	460b      	mov	r3, r1
 80108f2:	807b      	strh	r3, [r7, #2]
 80108f4:	4613      	mov	r3, r2
 80108f6:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	3354      	adds	r3, #84	; 0x54
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	8879      	ldrh	r1, [r7, #2]
 8010902:	687a      	ldr	r2, [r7, #4]
 8010904:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8010908:	b292      	uxth	r2, r2
 801090a:	1a8a      	subs	r2, r1, r2
 801090c:	b292      	uxth	r2, r2
 801090e:	b210      	sxth	r0, r2
 8010910:	8839      	ldrh	r1, [r7, #0]
 8010912:	687a      	ldr	r2, [r7, #4]
 8010914:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8010918:	b292      	uxth	r2, r2
 801091a:	1a8a      	subs	r2, r1, r2
 801091c:	b292      	uxth	r2, r2
 801091e:	b212      	sxth	r2, r2
 8010920:	4601      	mov	r1, r0
 8010922:	6878      	ldr	r0, [r7, #4]
 8010924:	4798      	blx	r3
    }
 8010926:	bf00      	nop
 8010928:	3708      	adds	r7, #8
 801092a:	46bd      	mov	sp, r7
 801092c:	bd80      	pop	{r7, pc}

0801092e <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 801092e:	b480      	push	{r7}
 8010930:	b083      	sub	sp, #12
 8010932:	af00      	add	r7, sp, #0
 8010934:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801093c:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010944:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801094c:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 801094e:	bf00      	nop
 8010950:	370c      	adds	r7, #12
 8010952:	46bd      	mov	sp, r7
 8010954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010958:	4770      	bx	lr

0801095a <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 801095a:	b580      	push	{r7, lr}
 801095c:	b084      	sub	sp, #16
 801095e:	af00      	add	r7, sp, #0
 8010960:	60f8      	str	r0, [r7, #12]
 8010962:	60b9      	str	r1, [r7, #8]
 8010964:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8010966:	68f8      	ldr	r0, [r7, #12]
 8010968:	f7ff ffe1 	bl	801092e <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	681a      	ldr	r2, [r3, #0]
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	68fa      	ldr	r2, [r7, #12]
 8010978:	601a      	str	r2, [r3, #0]
    }
 801097a:	bf00      	nop
 801097c:	3710      	adds	r7, #16
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}
	...

08010984 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 8010984:	b580      	push	{r7, lr}
 8010986:	b082      	sub	sp, #8
 8010988:	af00      	add	r7, sp, #0
 801098a:	6078      	str	r0, [r7, #4]
 801098c:	4a05      	ldr	r2, [pc, #20]	; (80109a4 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	601a      	str	r2, [r3, #0]
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	4618      	mov	r0, r3
 8010996:	f7ff fea1 	bl	80106dc <_ZN8touchgfx8DrawableD1Ev>
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	4618      	mov	r0, r3
 801099e:	3708      	adds	r7, #8
 80109a0:	46bd      	mov	sp, r7
 80109a2:	bd80      	pop	{r7, pc}
 80109a4:	08028a94 	.word	0x08028a94

080109a8 <_ZN8touchgfx9ContainerD0Ev>:
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b082      	sub	sp, #8
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
 80109b0:	6878      	ldr	r0, [r7, #4]
 80109b2:	f7ff ffe7 	bl	8010984 <_ZN8touchgfx9ContainerD1Ev>
 80109b6:	212c      	movs	r1, #44	; 0x2c
 80109b8:	6878      	ldr	r0, [r7, #4]
 80109ba:	f015 fb8b 	bl	80260d4 <_ZdlPvj>
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	4618      	mov	r0, r3
 80109c2:	3708      	adds	r7, #8
 80109c4:	46bd      	mov	sp, r7
 80109c6:	bd80      	pop	{r7, pc}

080109c8 <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b082      	sub	sp, #8
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
 80109d0:	4a06      	ldr	r2, [pc, #24]	; (80109ec <_ZN8touchgfx6ScreenD1Ev+0x24>)
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	601a      	str	r2, [r3, #0]
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	3304      	adds	r3, #4
 80109da:	4618      	mov	r0, r3
 80109dc:	f7ff ffd2 	bl	8010984 <_ZN8touchgfx9ContainerD1Ev>
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	4618      	mov	r0, r3
 80109e4:	3708      	adds	r7, #8
 80109e6:	46bd      	mov	sp, r7
 80109e8:	bd80      	pop	{r7, pc}
 80109ea:	bf00      	nop
 80109ec:	08029dc0 	.word	0x08029dc0

080109f0 <_ZN8touchgfx6ScreenD0Ev>:
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b082      	sub	sp, #8
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
 80109f8:	6878      	ldr	r0, [r7, #4]
 80109fa:	f7ff ffe5 	bl	80109c8 <_ZN8touchgfx6ScreenD1Ev>
 80109fe:	213c      	movs	r1, #60	; 0x3c
 8010a00:	6878      	ldr	r0, [r7, #4]
 8010a02:	f015 fb67 	bl	80260d4 <_ZdlPvj>
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	4618      	mov	r0, r3
 8010a0a:	3708      	adds	r7, #8
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	bd80      	pop	{r7, pc}

08010a10 <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 8010a10:	b480      	push	{r7}
 8010a12:	b083      	sub	sp, #12
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
 8010a18:	bf00      	nop
 8010a1a:	370c      	adds	r7, #12
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a22:	4770      	bx	lr

08010a24 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 8010a24:	b480      	push	{r7}
 8010a26:	b083      	sub	sp, #12
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
 8010a2c:	bf00      	nop
 8010a2e:	370c      	adds	r7, #12
 8010a30:	46bd      	mov	sp, r7
 8010a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a36:	4770      	bx	lr

08010a38 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 8010a38:	b480      	push	{r7}
 8010a3a:	b083      	sub	sp, #12
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
 8010a40:	bf00      	nop
 8010a42:	370c      	adds	r7, #12
 8010a44:	46bd      	mov	sp, r7
 8010a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4a:	4770      	bx	lr

08010a4c <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8010a4c:	b480      	push	{r7}
 8010a4e:	b083      	sub	sp, #12
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
    {
    }
 8010a54:	bf00      	nop
 8010a56:	370c      	adds	r7, #12
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a5e:	4770      	bx	lr

08010a60 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8010a60:	b480      	push	{r7}
 8010a62:	b083      	sub	sp, #12
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	6078      	str	r0, [r7, #4]
 8010a68:	460b      	mov	r3, r1
 8010a6a:	70fb      	strb	r3, [r7, #3]
    {
    }
 8010a6c:	bf00      	nop
 8010a6e:	370c      	adds	r7, #12
 8010a70:	46bd      	mov	sp, r7
 8010a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a76:	4770      	bx	lr

08010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b082      	sub	sp, #8
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]
 8010a80:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	3304      	adds	r3, #4
 8010a86:	6839      	ldr	r1, [r7, #0]
 8010a88:	4618      	mov	r0, r3
 8010a8a:	f006 f9c1 	bl	8016e10 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8010a8e:	bf00      	nop
 8010a90:	3708      	adds	r7, #8
 8010a92:	46bd      	mov	sp, r7
 8010a94:	bd80      	pop	{r7, pc}
	...

08010a98 <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b082      	sub	sp, #8
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	f7ff fdec 	bl	8010680 <_ZN8touchgfx8DrawableC1Ev>
 8010aa8:	4a03      	ldr	r2, [pc, #12]	; (8010ab8 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	601a      	str	r2, [r3, #0]
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	3708      	adds	r7, #8
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	bd80      	pop	{r7, pc}
 8010ab8:	08027ec8 	.word	0x08027ec8

08010abc <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 8010abc:	b580      	push	{r7, lr}
 8010abe:	b082      	sub	sp, #8
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	6078      	str	r0, [r7, #4]
 8010ac4:	4a05      	ldr	r2, [pc, #20]	; (8010adc <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	601a      	str	r2, [r3, #0]
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	4618      	mov	r0, r3
 8010ace:	f7ff fe05 	bl	80106dc <_ZN8touchgfx8DrawableD1Ev>
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	3708      	adds	r7, #8
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	bd80      	pop	{r7, pc}
 8010adc:	08027ec8 	.word	0x08027ec8

08010ae0 <_ZN8touchgfx6WidgetD0Ev>:
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	b082      	sub	sp, #8
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	6078      	str	r0, [r7, #4]
 8010ae8:	6878      	ldr	r0, [r7, #4]
 8010aea:	f7ff ffe7 	bl	8010abc <_ZN8touchgfx6WidgetD1Ev>
 8010aee:	2128      	movs	r1, #40	; 0x28
 8010af0:	6878      	ldr	r0, [r7, #4]
 8010af2:	f015 faef 	bl	80260d4 <_ZdlPvj>
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	4618      	mov	r0, r3
 8010afa:	3708      	adds	r7, #8
 8010afc:	46bd      	mov	sp, r7
 8010afe:	bd80      	pop	{r7, pc}

08010b00 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 8010b00:	b580      	push	{r7, lr}
 8010b02:	b084      	sub	sp, #16
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	60f8      	str	r0, [r7, #12]
 8010b08:	607b      	str	r3, [r7, #4]
 8010b0a:	460b      	mov	r3, r1
 8010b0c:	817b      	strh	r3, [r7, #10]
 8010b0e:	4613      	mov	r3, r2
 8010b10:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	4618      	mov	r0, r3
 8010b16:	f7ff fecd 	bl	80108b4 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d008      	beq.n	8010b32 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	4618      	mov	r0, r3
 8010b24:	f7ff fed3 	bl	80108ce <_ZNK8touchgfx8Drawable11isTouchableEv>
 8010b28:	4603      	mov	r3, r0
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d001      	beq.n	8010b32 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8010b2e:	2301      	movs	r3, #1
 8010b30:	e000      	b.n	8010b34 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8010b32:	2300      	movs	r3, #0
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d002      	beq.n	8010b3e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8010b38:	68fa      	ldr	r2, [r7, #12]
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	601a      	str	r2, [r3, #0]
        }
    }
 8010b3e:	bf00      	nop
 8010b40:	3710      	adds	r7, #16
 8010b42:	46bd      	mov	sp, r7
 8010b44:	bd80      	pop	{r7, pc}
	...

08010b48 <_ZN8touchgfx3BoxC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructs a new Box with a default alpha value of 255 (solid)
     */
    Box() : Widget(), alpha(255), color(0), reportAsSolid(false)
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	b082      	sub	sp, #8
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	4618      	mov	r0, r3
 8010b54:	f7ff ffa0 	bl	8010a98 <_ZN8touchgfx6WidgetC1Ev>
 8010b58:	4a0a      	ldr	r2, [pc, #40]	; (8010b84 <_ZN8touchgfx3BoxC1Ev+0x3c>)
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	601a      	str	r2, [r3, #0]
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	22ff      	movs	r2, #255	; 0xff
 8010b62:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	3328      	adds	r3, #40	; 0x28
 8010b6a:	2100      	movs	r1, #0
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	f7ff fd31 	bl	80105d4 <_ZN8touchgfx9colortypeC1Em>
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	2200      	movs	r2, #0
 8010b76:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	3708      	adds	r7, #8
 8010b80:	46bd      	mov	sp, r7
 8010b82:	bd80      	pop	{r7, pc}
 8010b84:	080297cc 	.word	0x080297cc

08010b88 <_ZN8touchgfx3BoxD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Box() {}
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	b082      	sub	sp, #8
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
 8010b90:	4a05      	ldr	r2, [pc, #20]	; (8010ba8 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	601a      	str	r2, [r3, #0]
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	4618      	mov	r0, r3
 8010b9a:	f7ff ff8f 	bl	8010abc <_ZN8touchgfx6WidgetD1Ev>
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	3708      	adds	r7, #8
 8010ba4:	46bd      	mov	sp, r7
 8010ba6:	bd80      	pop	{r7, pc}
 8010ba8:	080297cc 	.word	0x080297cc

08010bac <_ZN8touchgfx3BoxD0Ev>:
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b082      	sub	sp, #8
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	6078      	str	r0, [r7, #4]
 8010bb4:	6878      	ldr	r0, [r7, #4]
 8010bb6:	f7ff ffe7 	bl	8010b88 <_ZN8touchgfx3BoxD1Ev>
 8010bba:	2130      	movs	r1, #48	; 0x30
 8010bbc:	6878      	ldr	r0, [r7, #4]
 8010bbe:	f015 fa89 	bl	80260d4 <_ZdlPvj>
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	3708      	adds	r7, #8
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	bd80      	pop	{r7, pc}

08010bcc <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     *        Sets the color of the rectangle.
     *
     * @param color The color of the box.
     */
    void setColor(colortype color)
 8010bcc:	b480      	push	{r7}
 8010bce:	b083      	sub	sp, #12
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	6078      	str	r0, [r7, #4]
 8010bd4:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	683a      	ldr	r2, [r7, #0]
 8010bda:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8010bdc:	bf00      	nop
 8010bde:	370c      	adds	r7, #12
 8010be0:	46bd      	mov	sp, r7
 8010be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be6:	4770      	bx	lr

08010be8 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 8010be8:	b480      	push	{r7}
 8010bea:	b083      	sub	sp, #12
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	6078      	str	r0, [r7, #4]
 8010bf0:	460b      	mov	r3, r1
 8010bf2:	807b      	strh	r3, [r7, #2]
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	887a      	ldrh	r2, [r7, #2]
 8010bf8:	801a      	strh	r2, [r3, #0]
    }
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	370c      	adds	r7, #12
 8010c00:	46bd      	mov	sp, r7
 8010c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c06:	4770      	bx	lr

08010c08 <_ZNK8touchgfx9TypedText7getTextEv>:
    const Unicode::UnicodeChar* getText() const
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b082      	sub	sp, #8
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	6078      	str	r0, [r7, #4]
        assertValid();
 8010c10:	6878      	ldr	r0, [r7, #4]
 8010c12:	f7fe fca7 	bl	800f564 <_ZNK8touchgfx9TypedText11assertValidEv>
        return texts->getText(typedTextId);
 8010c16:	4b06      	ldr	r3, [pc, #24]	; (8010c30 <_ZNK8touchgfx9TypedText7getTextEv+0x28>)
 8010c18:	681a      	ldr	r2, [r3, #0]
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	881b      	ldrh	r3, [r3, #0]
 8010c1e:	4619      	mov	r1, r3
 8010c20:	4610      	mov	r0, r2
 8010c22:	f002 ff79 	bl	8013b18 <_ZNK8touchgfx5Texts7getTextEt>
 8010c26:	4603      	mov	r3, r0
    }
 8010c28:	4618      	mov	r0, r3
 8010c2a:	3708      	adds	r7, #8
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	bd80      	pop	{r7, pc}
 8010c30:	2000c650 	.word	0x2000c650

08010c34 <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea()
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b082      	sub	sp, #8
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	4618      	mov	r0, r3
 8010c40:	f7ff ff2a 	bl	8010a98 <_ZN8touchgfx6WidgetC1Ev>
 8010c44:	4a13      	ldr	r2, [pc, #76]	; (8010c94 <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	601a      	str	r2, [r3, #0]
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	3326      	adds	r3, #38	; 0x26
 8010c4e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010c52:	4618      	mov	r0, r3
 8010c54:	f7ff ffc8 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	3328      	adds	r3, #40	; 0x28
 8010c5c:	2100      	movs	r1, #0
 8010c5e:	4618      	mov	r0, r3
 8010c60:	f7ff fcb8 	bl	80105d4 <_ZN8touchgfx9colortypeC1Em>
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	2200      	movs	r2, #0
 8010c68:	859a      	strh	r2, [r3, #44]	; 0x2c
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	22ff      	movs	r2, #255	; 0xff
 8010c6e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	2200      	movs	r2, #0
 8010c76:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	2200      	movs	r2, #0
 8010c86:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    {
    }
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	3708      	adds	r7, #8
 8010c90:	46bd      	mov	sp, r7
 8010c92:	bd80      	pop	{r7, pc}
 8010c94:	08029750 	.word	0x08029750

08010c98 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
     *
     *        Gets solid rectangle.
     *
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b084      	sub	sp, #16
 8010c9c:	af02      	add	r7, sp, #8
 8010c9e:	6078      	str	r0, [r7, #4]
 8010ca0:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	9300      	str	r3, [sp, #0]
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	2200      	movs	r2, #0
 8010caa:	2100      	movs	r1, #0
 8010cac:	6878      	ldr	r0, [r7, #4]
 8010cae:	f7ff fcb7 	bl	8010620 <_ZN8touchgfx4RectC1Essss>
    }
 8010cb2:	6878      	ldr	r0, [r7, #4]
 8010cb4:	3708      	adds	r7, #8
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	bd80      	pop	{r7, pc}

08010cba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 8010cba:	b480      	push	{r7}
 8010cbc:	b083      	sub	sp, #12
 8010cbe:	af00      	add	r7, sp, #0
 8010cc0:	6078      	str	r0, [r7, #4]
 8010cc2:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	683a      	ldr	r2, [r7, #0]
 8010cc8:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8010cca:	bf00      	nop
 8010ccc:	370c      	adds	r7, #12
 8010cce:	46bd      	mov	sp, r7
 8010cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd4:	4770      	bx	lr

08010cd6 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *        changes you have to set the baseline again. Note that setTypedText must be called
     *        prior to setting the baseline.
     *
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 8010cd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010cd8:	b085      	sub	sp, #20
 8010cda:	af00      	add	r7, sp, #0
 8010cdc:	6078      	str	r0, [r7, #4]
 8010cde:	460b      	mov	r3, r1
 8010ce0:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 8010ce2:	687e      	ldr	r6, [r7, #4]
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	3330      	adds	r3, #48	; 0x30
 8010cea:	681c      	ldr	r4, [r3, #0]
 8010cec:	887d      	ldrh	r5, [r7, #2]
 8010cee:	6878      	ldr	r0, [r7, #4]
 8010cf0:	f000 f845 	bl	8010d7e <_ZNK8touchgfx8TextArea12getTypedTextEv>
 8010cf4:	4603      	mov	r3, r0
 8010cf6:	81bb      	strh	r3, [r7, #12]
 8010cf8:	f107 030c 	add.w	r3, r7, #12
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	f7fe fbfd 	bl	800f4fc <_ZNK8touchgfx9TypedText7getFontEv>
 8010d02:	4603      	mov	r3, r0
 8010d04:	681a      	ldr	r2, [r3, #0]
 8010d06:	322c      	adds	r2, #44	; 0x2c
 8010d08:	6812      	ldr	r2, [r2, #0]
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	4790      	blx	r2
 8010d0e:	4603      	mov	r3, r0
 8010d10:	1aeb      	subs	r3, r5, r3
 8010d12:	b29b      	uxth	r3, r3
 8010d14:	b21b      	sxth	r3, r3
 8010d16:	4619      	mov	r1, r3
 8010d18:	4630      	mov	r0, r6
 8010d1a:	47a0      	blx	r4
    }
 8010d1c:	bf00      	nop
 8010d1e:	3714      	adds	r7, #20
 8010d20:	46bd      	mov	sp, r7
 8010d22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010d24 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b082      	sub	sp, #8
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
 8010d2c:	460b      	mov	r3, r1
 8010d2e:	807b      	strh	r3, [r7, #2]
 8010d30:	4613      	mov	r3, r2
 8010d32:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8010d34:	687a      	ldr	r2, [r7, #4]
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	332c      	adds	r3, #44	; 0x2c
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8010d42:	4610      	mov	r0, r2
 8010d44:	4798      	blx	r3
        setBaselineY(baselineY);
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	3360      	adds	r3, #96	; 0x60
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8010d52:	4611      	mov	r1, r2
 8010d54:	6878      	ldr	r0, [r7, #4]
 8010d56:	4798      	blx	r3
    }
 8010d58:	bf00      	nop
 8010d5a:	3708      	adds	r7, #8
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	bd80      	pop	{r7, pc}

08010d60 <_ZN8touchgfx8TextArea14setLinespacingEs>:
     *
     *        Sets the line spacing of the TextArea.
     *
     * @param space The line spacing of use in the TextArea.
     */
    inline void setLinespacing(int16_t space)
 8010d60:	b480      	push	{r7}
 8010d62:	b083      	sub	sp, #12
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	6078      	str	r0, [r7, #4]
 8010d68:	460b      	mov	r3, r1
 8010d6a:	807b      	strh	r3, [r7, #2]
    {
        linespace = space;
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	887a      	ldrh	r2, [r7, #2]
 8010d70:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 8010d72:	bf00      	nop
 8010d74:	370c      	adds	r7, #12
 8010d76:	46bd      	mov	sp, r7
 8010d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7c:	4770      	bx	lr

08010d7e <_ZNK8touchgfx8TextArea12getTypedTextEv>:
     *
     *        Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 8010d7e:	b480      	push	{r7}
 8010d80:	b083      	sub	sp, #12
 8010d82:	af00      	add	r7, sp, #0
 8010d84:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    }
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	370c      	adds	r7, #12
 8010d8e:	46bd      	mov	sp, r7
 8010d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d94:	4770      	bx	lr
	...

08010d98 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8010d98:	b580      	push	{r7, lr}
 8010d9a:	b082      	sub	sp, #8
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	6078      	str	r0, [r7, #4]
 8010da0:	4a05      	ldr	r2, [pc, #20]	; (8010db8 <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	601a      	str	r2, [r3, #0]
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	4618      	mov	r0, r3
 8010daa:	f7ff fe87 	bl	8010abc <_ZN8touchgfx6WidgetD1Ev>
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	4618      	mov	r0, r3
 8010db2:	3708      	adds	r7, #8
 8010db4:	46bd      	mov	sp, r7
 8010db6:	bd80      	pop	{r7, pc}
 8010db8:	08029750 	.word	0x08029750

08010dbc <_ZN8touchgfx8TextAreaD0Ev>:
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b082      	sub	sp, #8
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
 8010dc4:	6878      	ldr	r0, [r7, #4]
 8010dc6:	f7ff ffe7 	bl	8010d98 <_ZN8touchgfx8TextAreaD1Ev>
 8010dca:	2134      	movs	r1, #52	; 0x34
 8010dcc:	6878      	ldr	r0, [r7, #4]
 8010dce:	f015 f981 	bl	80260d4 <_ZdlPvj>
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	3708      	adds	r7, #8
 8010dd8:	46bd      	mov	sp, r7
 8010dda:	bd80      	pop	{r7, pc}

08010ddc <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithWildcardBase()
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	b082      	sub	sp, #8
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	6078      	str	r0, [r7, #4]
        : TextArea()
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	4618      	mov	r0, r3
 8010de8:	f7ff ff24 	bl	8010c34 <_ZN8touchgfx8TextAreaC1Ev>
 8010dec:	4a03      	ldr	r2, [pc, #12]	; (8010dfc <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	601a      	str	r2, [r3, #0]
    {
    }
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	4618      	mov	r0, r3
 8010df6:	3708      	adds	r7, #8
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	bd80      	pop	{r7, pc}
 8010dfc:	08027e4c 	.word	0x08027e4c

08010e00 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 8010e00:	b580      	push	{r7, lr}
 8010e02:	b082      	sub	sp, #8
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6078      	str	r0, [r7, #4]
 8010e08:	4a05      	ldr	r2, [pc, #20]	; (8010e20 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	601a      	str	r2, [r3, #0]
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	4618      	mov	r0, r3
 8010e12:	f7ff ffc1 	bl	8010d98 <_ZN8touchgfx8TextAreaD1Ev>
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	4618      	mov	r0, r3
 8010e1a:	3708      	adds	r7, #8
 8010e1c:	46bd      	mov	sp, r7
 8010e1e:	bd80      	pop	{r7, pc}
 8010e20:	08027e4c 	.word	0x08027e4c

08010e24 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 8010e24:	b580      	push	{r7, lr}
 8010e26:	b082      	sub	sp, #8
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	6078      	str	r0, [r7, #4]
 8010e2c:	6878      	ldr	r0, [r7, #4]
 8010e2e:	f7ff ffe7 	bl	8010e00 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8010e32:	2134      	movs	r1, #52	; 0x34
 8010e34:	6878      	ldr	r0, [r7, #4]
 8010e36:	f015 f94d 	bl	80260d4 <_ZdlPvj>
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	3708      	adds	r7, #8
 8010e40:	46bd      	mov	sp, r7
 8010e42:	bd80      	pop	{r7, pc}

08010e44 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithOneWildcard()
 8010e44:	b580      	push	{r7, lr}
 8010e46:	b082      	sub	sp, #8
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wildcard(0)
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	4618      	mov	r0, r3
 8010e50:	f7ff ffc4 	bl	8010ddc <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 8010e54:	4a05      	ldr	r2, [pc, #20]	; (8010e6c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	601a      	str	r2, [r3, #0]
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	4618      	mov	r0, r3
 8010e64:	3708      	adds	r7, #8
 8010e66:	46bd      	mov	sp, r7
 8010e68:	bd80      	pop	{r7, pc}
 8010e6a:	bf00      	nop
 8010e6c:	080298b8 	.word	0x080298b8

08010e70 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     *
     *        Sets the wildcard in the text.Must be a zero-terminated UnicodeChar array.
     *
     * @param value A pointer to the UnicodeChar to set the wildcard to.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8010e70:	b480      	push	{r7}
 8010e72:	b083      	sub	sp, #12
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
 8010e78:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	683a      	ldr	r2, [r7, #0]
 8010e7e:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8010e80:	bf00      	nop
 8010e82:	370c      	adds	r7, #12
 8010e84:	46bd      	mov	sp, r7
 8010e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8a:	4770      	bx	lr

08010e8c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	b082      	sub	sp, #8
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	6078      	str	r0, [r7, #4]
 8010e94:	6039      	str	r1, [r7, #0]
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	4618      	mov	r0, r3
 8010e9a:	f7ff fdfd 	bl	8010a98 <_ZN8touchgfx6WidgetC1Ev>
 8010e9e:	4a0b      	ldr	r2, [pc, #44]	; (8010ecc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	601a      	str	r2, [r3, #0]
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	3326      	adds	r3, #38	; 0x26
 8010ea8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010eac:	4618      	mov	r0, r3
 8010eae:	f7ff fbd7 	bl	8010660 <_ZN8touchgfx6BitmapC1Et>
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	22ff      	movs	r2, #255	; 0xff
 8010eb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 8010eba:	6839      	ldr	r1, [r7, #0]
 8010ebc:	6878      	ldr	r0, [r7, #4]
 8010ebe:	f008 f895 	bl	8018fec <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	3708      	adds	r7, #8
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	bd80      	pop	{r7, pc}
 8010ecc:	08029934 	.word	0x08029934

08010ed0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         *        Constructor from integer. No conversion is done - the integer is assumed to
         *        already be in Q5 format.
         *
         * @param i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i) : v(i) { }
 8010ed0:	b480      	push	{r7}
 8010ed2:	b083      	sub	sp, #12
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	6078      	str	r0, [r7, #4]
 8010ed8:	6039      	str	r1, [r7, #0]
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	683a      	ldr	r2, [r7, #0]
 8010ede:	601a      	str	r2, [r3, #0]
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	370c      	adds	r7, #12
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eec:	4770      	bx	lr

08010eee <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
         *
         *        Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 8010eee:	b480      	push	{r7}
 8010ef0:	b083      	sub	sp, #12
 8010ef2:	af00      	add	r7, sp, #0
 8010ef4:	6078      	str	r0, [r7, #4]
        {
            return v;
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	681b      	ldr	r3, [r3, #0]
        }
 8010efa:	4618      	mov	r0, r3
 8010efc:	370c      	adds	r7, #12
 8010efe:	46bd      	mov	sp, r7
 8010f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f04:	4770      	bx	lr

08010f06 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @note The area containing the Line is not invalidated.
     *
     * @see updateLineWidth
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 8010f06:	b590      	push	{r4, r7, lr}
 8010f08:	b083      	sub	sp, #12
 8010f0a:	af00      	add	r7, sp, #0
 8010f0c:	6078      	str	r0, [r7, #4]
 8010f0e:	6039      	str	r1, [r7, #0]
    {
        if (lineWidth == widthQ5)
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	3340      	adds	r3, #64	; 0x40
 8010f14:	4618      	mov	r0, r3
 8010f16:	f7ff ffea 	bl	8010eee <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8010f1a:	4604      	mov	r4, r0
 8010f1c:	463b      	mov	r3, r7
 8010f1e:	4618      	mov	r0, r3
 8010f20:	f7ff ffe5 	bl	8010eee <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8010f24:	4603      	mov	r3, r0
 8010f26:	429c      	cmp	r4, r3
 8010f28:	bf0c      	ite	eq
 8010f2a:	2301      	moveq	r3, #1
 8010f2c:	2300      	movne	r3, #0
 8010f2e:	b2db      	uxtb	r3, r3
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d106      	bne.n	8010f42 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidth = widthQ5;
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	683a      	ldr	r2, [r7, #0]
 8010f38:	641a      	str	r2, [r3, #64]	; 0x40

        updateCachedShape();
 8010f3a:	6878      	ldr	r0, [r7, #4]
 8010f3c:	f007 fad0 	bl	80184e0 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8010f40:	e000      	b.n	8010f44 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 8010f42:	bf00      	nop
    }
 8010f44:	370c      	adds	r7, #12
 8010f46:	46bd      	mov	sp, r7
 8010f48:	bd90      	pop	{r4, r7, pc}
	...

08010f4c <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
    AbstractPainterRGB888()
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
    }

    virtual ~AbstractPainterRGB888() {}
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b082      	sub	sp, #8
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
 8010f54:	4a05      	ldr	r2, [pc, #20]	; (8010f6c <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	601a      	str	r2, [r3, #0]
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	f007 f8d3 	bl	8018108 <_ZN8touchgfx15AbstractPainterD1Ev>
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	4618      	mov	r0, r3
 8010f66:	3708      	adds	r7, #8
 8010f68:	46bd      	mov	sp, r7
 8010f6a:	bd80      	pop	{r7, pc}
 8010f6c:	080292a4 	.word	0x080292a4

08010f70 <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b082      	sub	sp, #8
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
 8010f78:	6878      	ldr	r0, [r7, #4]
 8010f7a:	f7ff ffe7 	bl	8010f4c <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8010f7e:	2114      	movs	r1, #20
 8010f80:	6878      	ldr	r0, [r7, #4]
 8010f82:	f015 f8a7 	bl	80260d4 <_ZdlPvj>
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	4618      	mov	r0, r3
 8010f8a:	3708      	adds	r7, #8
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	bd80      	pop	{r7, pc}

08010f90 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b082      	sub	sp, #8
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	6078      	str	r0, [r7, #4]
 8010f98:	4a05      	ldr	r2, [pc, #20]	; (8010fb0 <_ZN8touchgfx5ImageD1Ev+0x20>)
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	601a      	str	r2, [r3, #0]
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	f7ff fd8b 	bl	8010abc <_ZN8touchgfx6WidgetD1Ev>
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	4618      	mov	r0, r3
 8010faa:	3708      	adds	r7, #8
 8010fac:	46bd      	mov	sp, r7
 8010fae:	bd80      	pop	{r7, pc}
 8010fb0:	08029934 	.word	0x08029934

08010fb4 <_ZN8touchgfx5ImageD0Ev>:
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b082      	sub	sp, #8
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
 8010fbc:	6878      	ldr	r0, [r7, #4]
 8010fbe:	f7ff ffe7 	bl	8010f90 <_ZN8touchgfx5ImageD1Ev>
 8010fc2:	212c      	movs	r1, #44	; 0x2c
 8010fc4:	6878      	ldr	r0, [r7, #4]
 8010fc6:	f015 f885 	bl	80260d4 <_ZdlPvj>
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	4618      	mov	r0, r3
 8010fce:	3708      	adds	r7, #8
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	bd80      	pop	{r7, pc}

08010fd4 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b082      	sub	sp, #8
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
 8010fdc:	4a05      	ldr	r2, [pc, #20]	; (8010ff4 <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	601a      	str	r2, [r3, #0]
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	f7ff fcef 	bl	80109c8 <_ZN8touchgfx6ScreenD1Ev>
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	4618      	mov	r0, r3
 8010fee:	3708      	adds	r7, #8
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	bd80      	pop	{r7, pc}
 8010ff4:	08027e18 	.word	0x08027e18

08010ff8 <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b082      	sub	sp, #8
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
 8011000:	6878      	ldr	r0, [r7, #4]
 8011002:	f7ff ffe7 	bl	8010fd4 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8011006:	2140      	movs	r1, #64	; 0x40
 8011008:	6878      	ldr	r0, [r7, #4]
 801100a:	f015 f863 	bl	80260d4 <_ZdlPvj>
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	4618      	mov	r0, r3
 8011012:	3708      	adds	r7, #8
 8011014:	46bd      	mov	sp, r7
 8011016:	bd80      	pop	{r7, pc}

08011018 <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 8011018:	b580      	push	{r7, lr}
 801101a:	b082      	sub	sp, #8
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]
 8011020:	4a87      	ldr	r2, [pc, #540]	; (8011240 <_ZN12MainViewBaseD1Ev+0x228>)
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	601a      	str	r2, [r3, #0]
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	f603 3304 	addw	r3, r3, #2820	; 0xb04
 801102c:	4618      	mov	r0, r3
 801102e:	f002 fc89 	bl	8013944 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	f603 23cc 	addw	r3, r3, #2764	; 0xacc
 8011038:	4618      	mov	r0, r3
 801103a:	f002 fc83 	bl	8013944 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	f603 2394 	addw	r3, r3, #2708	; 0xa94
 8011044:	4618      	mov	r0, r3
 8011046:	f002 fc7d 	bl	8013944 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 8011050:	4618      	mov	r0, r3
 8011052:	f002 fc77 	bl	8013944 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	f603 2324 	addw	r3, r3, #2596	; 0xa24
 801105c:	4618      	mov	r0, r3
 801105e:	f002 fc71 	bl	8013944 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	f603 13ec 	addw	r3, r3, #2540	; 0x9ec
 8011068:	4618      	mov	r0, r3
 801106a:	f002 fc6b 	bl	8013944 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	f603 13b4 	addw	r3, r3, #2484	; 0x9b4
 8011074:	4618      	mov	r0, r3
 8011076:	f002 fc65 	bl	8013944 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	f603 137c 	addw	r3, r3, #2428	; 0x97c
 8011080:	4618      	mov	r0, r3
 8011082:	f002 fc5f 	bl	8013944 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	f603 1348 	addw	r3, r3, #2376	; 0x948
 801108c:	4618      	mov	r0, r3
 801108e:	f7ff fe83 	bl	8010d98 <_ZN8touchgfx8TextAreaD1Ev>
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8011098:	4618      	mov	r0, r3
 801109a:	f002 fc53 	bl	8013944 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	f603 03d8 	addw	r3, r3, #2264	; 0x8d8
 80110a4:	4618      	mov	r0, r3
 80110a6:	f002 fc4d 	bl	8013944 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 80110b0:	4618      	mov	r0, r3
 80110b2:	f7ff fe71 	bl	8010d98 <_ZN8touchgfx8TextAreaD1Ev>
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	f603 036c 	addw	r3, r3, #2156	; 0x86c
 80110bc:	4618      	mov	r0, r3
 80110be:	f002 fc41 	bl	8013944 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 80110c8:	4618      	mov	r0, r3
 80110ca:	f005 fba5 	bl	8016818 <_ZN8touchgfx13ImageProgressD1Ev>
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	f203 7344 	addw	r3, r3, #1860	; 0x744
 80110d4:	4618      	mov	r0, r3
 80110d6:	f002 fc35 	bl	8013944 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	f203 732c 	addw	r3, r3, #1836	; 0x72c
 80110e0:	4618      	mov	r0, r3
 80110e2:	f002 fc73 	bl	80139cc <_ZN8touchgfx13PainterRGB888D1Ev>
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 80110ec:	4618      	mov	r0, r3
 80110ee:	f002 fc4b 	bl	8013988 <_ZN8touchgfx4LineD1Ev>
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80110f8:	4618      	mov	r0, r3
 80110fa:	f002 fc67 	bl	80139cc <_ZN8touchgfx13PainterRGB888D1Ev>
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 8011104:	4618      	mov	r0, r3
 8011106:	f002 fc3f 	bl	8013988 <_ZN8touchgfx4LineD1Ev>
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8011110:	4618      	mov	r0, r3
 8011112:	f005 fa81 	bl	8016618 <_ZN8touchgfx11BoxProgressD1Ev>
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 801111c:	4618      	mov	r0, r3
 801111e:	f7ff fe3b 	bl	8010d98 <_ZN8touchgfx8TextAreaD1Ev>
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011128:	4618      	mov	r0, r3
 801112a:	f002 fc0b 	bl	8013944 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8011134:	4618      	mov	r0, r3
 8011136:	f002 fc05 	bl	8013944 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8011140:	4618      	mov	r0, r3
 8011142:	f7ff fe29 	bl	8010d98 <_ZN8touchgfx8TextAreaD1Ev>
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 801114c:	4618      	mov	r0, r3
 801114e:	f7ff fe23 	bl	8010d98 <_ZN8touchgfx8TextAreaD1Ev>
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8011158:	4618      	mov	r0, r3
 801115a:	f002 fbf3 	bl	8013944 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8011164:	4618      	mov	r0, r3
 8011166:	f7ff fe17 	bl	8010d98 <_ZN8touchgfx8TextAreaD1Ev>
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 8011170:	4618      	mov	r0, r3
 8011172:	f002 fc2b 	bl	80139cc <_ZN8touchgfx13PainterRGB888D1Ev>
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	f503 735a 	add.w	r3, r3, #872	; 0x368
 801117c:	4618      	mov	r0, r3
 801117e:	f002 fc03 	bl	8013988 <_ZN8touchgfx4LineD1Ev>
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8011188:	4618      	mov	r0, r3
 801118a:	f002 fbdb 	bl	8013944 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8011194:	4618      	mov	r0, r3
 8011196:	f002 fbd5 	bl	8013944 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80111a0:	4618      	mov	r0, r3
 80111a2:	f002 fbcf 	bl	8013944 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80111ac:	4618      	mov	r0, r3
 80111ae:	f002 fbc9 	bl	8013944 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80111b8:	4618      	mov	r0, r3
 80111ba:	f002 fbc3 	bl	8013944 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80111c4:	4618      	mov	r0, r3
 80111c6:	f002 fbbd 	bl	8013944 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80111d0:	4618      	mov	r0, r3
 80111d2:	f002 fbb7 	bl	8013944 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80111dc:	4618      	mov	r0, r3
 80111de:	f002 fbb1 	bl	8013944 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80111e8:	4618      	mov	r0, r3
 80111ea:	f7ff fed1 	bl	8010f90 <_ZN8touchgfx5ImageD1Ev>
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80111f4:	4618      	mov	r0, r3
 80111f6:	f002 fba5 	bl	8013944 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8011200:	4618      	mov	r0, r3
 8011202:	f002 fb9f 	bl	8013944 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	33d8      	adds	r3, #216	; 0xd8
 801120a:	4618      	mov	r0, r3
 801120c:	f7ff fdc4 	bl	8010d98 <_ZN8touchgfx8TextAreaD1Ev>
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	33a4      	adds	r3, #164	; 0xa4
 8011214:	4618      	mov	r0, r3
 8011216:	f7ff fdbf 	bl	8010d98 <_ZN8touchgfx8TextAreaD1Ev>
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	3370      	adds	r3, #112	; 0x70
 801121e:	4618      	mov	r0, r3
 8011220:	f7ff fdba 	bl	8010d98 <_ZN8touchgfx8TextAreaD1Ev>
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	3340      	adds	r3, #64	; 0x40
 8011228:	4618      	mov	r0, r3
 801122a:	f7ff fcad 	bl	8010b88 <_ZN8touchgfx3BoxD1Ev>
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	4618      	mov	r0, r3
 8011232:	f7ff fecf 	bl	8010fd4 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	4618      	mov	r0, r3
 801123a:	3708      	adds	r7, #8
 801123c:	46bd      	mov	sp, r7
 801123e:	bd80      	pop	{r7, pc}
 8011240:	08027de4 	.word	0x08027de4

08011244 <_ZN12MainViewBaseD0Ev>:
 8011244:	b580      	push	{r7, lr}
 8011246:	b082      	sub	sp, #8
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
 801124c:	6878      	ldr	r0, [r7, #4]
 801124e:	f7ff fee3 	bl	8011018 <_ZN12MainViewBaseD1Ev>
 8011252:	f642 0128 	movw	r1, #10280	; 0x2828
 8011256:	6878      	ldr	r0, [r7, #4]
 8011258:	f014 ff3c 	bl	80260d4 <_ZdlPvj>
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	4618      	mov	r0, r3
 8011260:	3708      	adds	r7, #8
 8011262:	46bd      	mov	sp, r7
 8011264:	bd80      	pop	{r7, pc}
	...

08011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     * @param green Value of the green part (0-255).
     * @param blue  Value of the blue part (0-255).
     *
     * @return The color representation depending on LCD color format.
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 8011268:	b590      	push	{r4, r7, lr}
 801126a:	b083      	sub	sp, #12
 801126c:	af00      	add	r7, sp, #0
 801126e:	4603      	mov	r3, r0
 8011270:	71fb      	strb	r3, [r7, #7]
 8011272:	460b      	mov	r3, r1
 8011274:	71bb      	strb	r3, [r7, #6]
 8011276:	4613      	mov	r3, r2
 8011278:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 801127a:	f7fe fd91 	bl	800fda0 <_ZN8touchgfx3HAL11getInstanceEv>
 801127e:	4603      	mov	r3, r0
 8011280:	2b00      	cmp	r3, #0
 8011282:	d105      	bne.n	8011290 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 8011284:	4b09      	ldr	r3, [pc, #36]	; (80112ac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x44>)
 8011286:	4a0a      	ldr	r2, [pc, #40]	; (80112b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 8011288:	2138      	movs	r1, #56	; 0x38
 801128a:	480a      	ldr	r0, [pc, #40]	; (80112b4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 801128c:	f014 ff50 	bl	8026130 <__assert_func>
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 8011290:	f7fe fd92 	bl	800fdb8 <_ZN8touchgfx3HAL3lcdEv>
 8011294:	6803      	ldr	r3, [r0, #0]
 8011296:	332c      	adds	r3, #44	; 0x2c
 8011298:	681c      	ldr	r4, [r3, #0]
 801129a:	797b      	ldrb	r3, [r7, #5]
 801129c:	79ba      	ldrb	r2, [r7, #6]
 801129e:	79f9      	ldrb	r1, [r7, #7]
 80112a0:	47a0      	blx	r4
 80112a2:	4603      	mov	r3, r0
    }
 80112a4:	4618      	mov	r0, r3
 80112a6:	370c      	adds	r7, #12
 80112a8:	46bd      	mov	sp, r7
 80112aa:	bd90      	pop	{r4, r7, pc}
 80112ac:	08027734 	.word	0x08027734
 80112b0:	08027778 	.word	0x08027778
 80112b4:	080277d4 	.word	0x080277d4

080112b8 <_ZN12MainViewBaseC1Ev>:
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

MainViewBase::MainViewBase()
 80112b8:	b590      	push	{r4, r7, lr}
 80112ba:	b0c5      	sub	sp, #276	; 0x114
 80112bc:	af02      	add	r7, sp, #8
 80112be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80112c6:	6018      	str	r0, [r3, #0]
 80112c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	4618      	mov	r0, r3
 80112d4:	f002 fabc 	bl	8013850 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 80112d8:	4ae5      	ldr	r2, [pc, #916]	; (8011670 <_ZN12MainViewBaseC1Ev+0x3b8>)
 80112da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	601a      	str	r2, [r3, #0]
 80112e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	3340      	adds	r3, #64	; 0x40
 80112f2:	4618      	mov	r0, r3
 80112f4:	f7ff fc28 	bl	8010b48 <_ZN8touchgfx3BoxC1Ev>
 80112f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	3370      	adds	r3, #112	; 0x70
 8011304:	4618      	mov	r0, r3
 8011306:	f7ff fc95 	bl	8010c34 <_ZN8touchgfx8TextAreaC1Ev>
 801130a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801130e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	33a4      	adds	r3, #164	; 0xa4
 8011316:	4618      	mov	r0, r3
 8011318:	f7ff fc8c 	bl	8010c34 <_ZN8touchgfx8TextAreaC1Ev>
 801131c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011320:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	33d8      	adds	r3, #216	; 0xd8
 8011328:	4618      	mov	r0, r3
 801132a:	f7ff fc83 	bl	8010c34 <_ZN8touchgfx8TextAreaC1Ev>
 801132e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011332:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 801133c:	4618      	mov	r0, r3
 801133e:	f7ff fd81 	bl	8010e44 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011346:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011350:	4618      	mov	r0, r3
 8011352:	f7ff fd77 	bl	8010e44 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011356:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801135a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	f503 74be 	add.w	r4, r3, #380	; 0x17c
 8011364:	f107 0308 	add.w	r3, r7, #8
 8011368:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801136c:	4618      	mov	r0, r3
 801136e:	f7ff f977 	bl	8010660 <_ZN8touchgfx6BitmapC1Et>
 8011372:	f107 0308 	add.w	r3, r7, #8
 8011376:	4619      	mov	r1, r3
 8011378:	4620      	mov	r0, r4
 801137a:	f7ff fd87 	bl	8010e8c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801137e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011382:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801138c:	4618      	mov	r0, r3
 801138e:	f7ff fd59 	bl	8010e44 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011396:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80113a0:	4618      	mov	r0, r3
 80113a2:	f7ff fd4f 	bl	8010e44 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80113a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80113b4:	4618      	mov	r0, r3
 80113b6:	f7ff fd45 	bl	8010e44 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80113ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80113c8:	4618      	mov	r0, r3
 80113ca:	f7ff fd3b 	bl	8010e44 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80113ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80113dc:	4618      	mov	r0, r3
 80113de:	f7ff fd31 	bl	8010e44 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80113e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80113f0:	4618      	mov	r0, r3
 80113f2:	f7ff fd27 	bl	8010e44 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80113f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8011404:	4618      	mov	r0, r3
 8011406:	f7ff fd1d 	bl	8010e44 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801140a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801140e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8011418:	4618      	mov	r0, r3
 801141a:	f7ff fd13 	bl	8010e44 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801141e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011422:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	f503 735a 	add.w	r3, r3, #872	; 0x368
 801142c:	4618      	mov	r0, r3
 801142e:	f007 f837 	bl	80184a0 <_ZN8touchgfx4LineC1Ev>
 8011432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011436:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	f503 7477 	add.w	r4, r3, #988	; 0x3dc
 8011440:	f107 030c 	add.w	r3, r7, #12
 8011444:	2100      	movs	r1, #0
 8011446:	4618      	mov	r0, r3
 8011448:	f7ff f8c4 	bl	80105d4 <_ZN8touchgfx9colortypeC1Em>
 801144c:	22ff      	movs	r2, #255	; 0xff
 801144e:	68f9      	ldr	r1, [r7, #12]
 8011450:	4620      	mov	r0, r4
 8011452:	f006 fe17 	bl	8018084 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8011456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801145a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8011464:	4618      	mov	r0, r3
 8011466:	f7ff fbe5 	bl	8010c34 <_ZN8touchgfx8TextAreaC1Ev>
 801146a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801146e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8011478:	4618      	mov	r0, r3
 801147a:	f7ff fce3 	bl	8010e44 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801147e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011482:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 801148c:	4618      	mov	r0, r3
 801148e:	f7ff fbd1 	bl	8010c34 <_ZN8touchgfx8TextAreaC1Ev>
 8011492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011496:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80114a0:	4618      	mov	r0, r3
 80114a2:	f7ff fbc7 	bl	8010c34 <_ZN8touchgfx8TextAreaC1Ev>
 80114a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 80114b4:	4618      	mov	r0, r3
 80114b6:	f7ff fcc5 	bl	8010e44 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80114ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80114c8:	4618      	mov	r0, r3
 80114ca:	f7ff fcbb 	bl	8010e44 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80114ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 80114dc:	4618      	mov	r0, r3
 80114de:	f7ff fba9 	bl	8010c34 <_ZN8touchgfx8TextAreaC1Ev>
 80114e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 80114f0:	4618      	mov	r0, r3
 80114f2:	f005 f8a5 	bl	8016640 <_ZN8touchgfx11BoxProgressC1Ev>
 80114f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 8011504:	4618      	mov	r0, r3
 8011506:	f006 ffcb 	bl	80184a0 <_ZN8touchgfx4LineC1Ev>
 801150a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801150e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	f503 64d4 	add.w	r4, r3, #1696	; 0x6a0
 8011518:	f107 0310 	add.w	r3, r7, #16
 801151c:	2100      	movs	r1, #0
 801151e:	4618      	mov	r0, r3
 8011520:	f7ff f858 	bl	80105d4 <_ZN8touchgfx9colortypeC1Em>
 8011524:	22ff      	movs	r2, #255	; 0xff
 8011526:	6939      	ldr	r1, [r7, #16]
 8011528:	4620      	mov	r0, r4
 801152a:	f006 fdab 	bl	8018084 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 801152e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011532:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 801153c:	4618      	mov	r0, r3
 801153e:	f006 ffaf 	bl	80184a0 <_ZN8touchgfx4LineC1Ev>
 8011542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011546:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	f203 742c 	addw	r4, r3, #1836	; 0x72c
 8011550:	f107 0314 	add.w	r3, r7, #20
 8011554:	2100      	movs	r1, #0
 8011556:	4618      	mov	r0, r3
 8011558:	f7ff f83c 	bl	80105d4 <_ZN8touchgfx9colortypeC1Em>
 801155c:	22ff      	movs	r2, #255	; 0xff
 801155e:	6979      	ldr	r1, [r7, #20]
 8011560:	4620      	mov	r0, r4
 8011562:	f006 fd8f 	bl	8018084 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8011566:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801156a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	f203 7344 	addw	r3, r3, #1860	; 0x744
 8011574:	4618      	mov	r0, r3
 8011576:	f7ff fc65 	bl	8010e44 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801157a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801157e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8011588:	4618      	mov	r0, r3
 801158a:	f005 f96f 	bl	801686c <_ZN8touchgfx13ImageProgressC1Ev>
 801158e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011592:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	f603 036c 	addw	r3, r3, #2156	; 0x86c
 801159c:	4618      	mov	r0, r3
 801159e:	f7ff fc51 	bl	8010e44 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80115a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 80115b0:	4618      	mov	r0, r3
 80115b2:	f7ff fb3f 	bl	8010c34 <_ZN8touchgfx8TextAreaC1Ev>
 80115b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	f603 03d8 	addw	r3, r3, #2264	; 0x8d8
 80115c4:	4618      	mov	r0, r3
 80115c6:	f7ff fc3d 	bl	8010e44 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80115ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 80115d8:	4618      	mov	r0, r3
 80115da:	f7ff fc33 	bl	8010e44 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80115de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	f603 1348 	addw	r3, r3, #2376	; 0x948
 80115ec:	4618      	mov	r0, r3
 80115ee:	f7ff fb21 	bl	8010c34 <_ZN8touchgfx8TextAreaC1Ev>
 80115f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	f603 137c 	addw	r3, r3, #2428	; 0x97c
 8011600:	4618      	mov	r0, r3
 8011602:	f7ff fc1f 	bl	8010e44 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801160a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	f603 13b4 	addw	r3, r3, #2484	; 0x9b4
 8011614:	4618      	mov	r0, r3
 8011616:	f7ff fc15 	bl	8010e44 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801161a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801161e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	f603 13ec 	addw	r3, r3, #2540	; 0x9ec
 8011628:	4618      	mov	r0, r3
 801162a:	f7ff fc0b 	bl	8010e44 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801162e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011632:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	f603 2324 	addw	r3, r3, #2596	; 0xa24
 801163c:	4618      	mov	r0, r3
 801163e:	f7ff fc01 	bl	8010e44 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011642:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011646:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 8011650:	4618      	mov	r0, r3
 8011652:	f7ff fbf7 	bl	8010e44 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801165a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	f603 2394 	addw	r3, r3, #2708	; 0xa94
 8011664:	4618      	mov	r0, r3
 8011666:	f7ff fbed 	bl	8010e44 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801166a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801166e:	e001      	b.n	8011674 <_ZN12MainViewBaseC1Ev+0x3bc>
 8011670:	08027de4 	.word	0x08027de4
 8011674:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	f603 23cc 	addw	r3, r3, #2764	; 0xacc
 801167e:	4618      	mov	r0, r3
 8011680:	f7ff fbe0 	bl	8010e44 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011688:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	f603 3304 	addw	r3, r3, #2820	; 0xb04
 8011692:	4618      	mov	r0, r3
 8011694:	f7ff fbd6 	bl	8010e44 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8011698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801169c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	f603 4306 	addw	r3, r3, #3078	; 0xc06
 80116a6:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 80116aa:	4618      	mov	r0, r3
 80116ac:	f007 fd0c 	bl	80190c8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    backgroundBox.setPosition(0, 0, 800, 480);
 80116b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80116be:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80116c2:	9300      	str	r3, [sp, #0]
 80116c4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80116c8:	2200      	movs	r2, #0
 80116ca:	2100      	movs	r1, #0
 80116cc:	f7ff f826 	bl	801071c <_ZN8touchgfx8Drawable11setPositionEssss>
    backgroundBox.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 80116d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80116de:	2200      	movs	r2, #0
 80116e0:	2100      	movs	r1, #0
 80116e2:	2000      	movs	r0, #0
 80116e4:	f7ff fdc0 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80116e8:	4603      	mov	r3, r0
 80116ea:	4619      	mov	r1, r3
 80116ec:	4620      	mov	r0, r4
 80116ee:	f7ff fa6d 	bl	8010bcc <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    CltDecsriptor.setXY(218, 220);
 80116f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	3370      	adds	r3, #112	; 0x70
 80116fe:	22dc      	movs	r2, #220	; 0xdc
 8011700:	21da      	movs	r1, #218	; 0xda
 8011702:	4618      	mov	r0, r3
 8011704:	f7ff f855 	bl	80107b2 <_ZN8touchgfx8Drawable5setXYEss>
    CltDecsriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801170c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8011716:	2200      	movs	r2, #0
 8011718:	21dc      	movs	r1, #220	; 0xdc
 801171a:	20ff      	movs	r0, #255	; 0xff
 801171c:	f7ff fda4 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011720:	4603      	mov	r3, r0
 8011722:	4619      	mov	r1, r3
 8011724:	4620      	mov	r0, r4
 8011726:	f7ff fac8 	bl	8010cba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltDecsriptor.setLinespacing(0);
 801172a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801172e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	3370      	adds	r3, #112	; 0x70
 8011736:	2100      	movs	r1, #0
 8011738:	4618      	mov	r0, r3
 801173a:	f7ff fb11 	bl	8010d60 <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltDecsriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID41));
 801173e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011742:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	f103 0470 	add.w	r4, r3, #112	; 0x70
 801174c:	f107 0318 	add.w	r3, r7, #24
 8011750:	2116      	movs	r1, #22
 8011752:	4618      	mov	r0, r3
 8011754:	f7ff fa48 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8011758:	8b39      	ldrh	r1, [r7, #24]
 801175a:	4620      	mov	r0, r4
 801175c:	f007 f9a6 	bl	8018aac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaDescriptor.setXY(207, 139);
 8011760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011764:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	33a4      	adds	r3, #164	; 0xa4
 801176c:	228b      	movs	r2, #139	; 0x8b
 801176e:	21cf      	movs	r1, #207	; 0xcf
 8011770:	4618      	mov	r0, r3
 8011772:	f7ff f81e 	bl	80107b2 <_ZN8touchgfx8Drawable5setXYEss>
    LambdaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011776:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801177a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8011784:	2200      	movs	r2, #0
 8011786:	21dc      	movs	r1, #220	; 0xdc
 8011788:	20ff      	movs	r0, #255	; 0xff
 801178a:	f7ff fd6d 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801178e:	4603      	mov	r3, r0
 8011790:	4619      	mov	r1, r3
 8011792:	4620      	mov	r0, r4
 8011794:	f7ff fa91 	bl	8010cba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaDescriptor.setLinespacing(0);
 8011798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801179c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	33a4      	adds	r3, #164	; 0xa4
 80117a4:	2100      	movs	r1, #0
 80117a6:	4618      	mov	r0, r3
 80117a8:	f7ff fada 	bl	8010d60 <_ZN8touchgfx8TextArea14setLinespacingEs>
    LambdaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID33));
 80117ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 80117ba:	f107 031c 	add.w	r3, r7, #28
 80117be:	2110      	movs	r1, #16
 80117c0:	4618      	mov	r0, r3
 80117c2:	f7ff fa11 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 80117c6:	8bb9      	ldrh	r1, [r7, #28]
 80117c8:	4620      	mov	r0, r4
 80117ca:	f007 f96f 	bl	8018aac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtDescriptor.setXY(24, 127);
 80117ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	33d8      	adds	r3, #216	; 0xd8
 80117da:	227f      	movs	r2, #127	; 0x7f
 80117dc:	2118      	movs	r1, #24
 80117de:	4618      	mov	r0, r3
 80117e0:	f7fe ffe7 	bl	80107b2 <_ZN8touchgfx8Drawable5setXYEss>
    TrgtDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80117e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 80117f2:	2200      	movs	r2, #0
 80117f4:	21dc      	movs	r1, #220	; 0xdc
 80117f6:	20ff      	movs	r0, #255	; 0xff
 80117f8:	f7ff fd36 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80117fc:	4603      	mov	r3, r0
 80117fe:	4619      	mov	r1, r3
 8011800:	4620      	mov	r0, r4
 8011802:	f7ff fa5a 	bl	8010cba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtDescriptor.setLinespacing(0);
 8011806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801180a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	33d8      	adds	r3, #216	; 0xd8
 8011812:	2100      	movs	r1, #0
 8011814:	4618      	mov	r0, r3
 8011816:	f7ff faa3 	bl	8010d60 <_ZN8touchgfx8TextArea14setLinespacingEs>
    TrgtDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID32));
 801181a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801181e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8011828:	f107 0320 	add.w	r3, r7, #32
 801182c:	210f      	movs	r1, #15
 801182e:	4618      	mov	r0, r3
 8011830:	f7ff f9da 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8011834:	8c39      	ldrh	r1, [r7, #32]
 8011836:	4620      	mov	r0, r4
 8011838:	f007 f938 	bl	8018aac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaValue.setPosition(187, 77, 114, 62);
 801183c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011840:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	f503 7086 	add.w	r0, r3, #268	; 0x10c
 801184a:	233e      	movs	r3, #62	; 0x3e
 801184c:	9300      	str	r3, [sp, #0]
 801184e:	2372      	movs	r3, #114	; 0x72
 8011850:	224d      	movs	r2, #77	; 0x4d
 8011852:	21bb      	movs	r1, #187	; 0xbb
 8011854:	f7fe ff62 	bl	801071c <_ZN8touchgfx8Drawable11setPositionEssss>
    LambdaValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801185c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 8011866:	22ff      	movs	r2, #255	; 0xff
 8011868:	21ff      	movs	r1, #255	; 0xff
 801186a:	20ff      	movs	r0, #255	; 0xff
 801186c:	f7ff fcfc 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011870:	4603      	mov	r3, r0
 8011872:	4619      	mov	r1, r3
 8011874:	4620      	mov	r0, r4
 8011876:	f7ff fa20 	bl	8010cba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaValue.setLinespacing(0);
 801187a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801187e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8011888:	2100      	movs	r1, #0
 801188a:	4618      	mov	r0, r3
 801188c:	f7ff fa68 	bl	8010d60 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID10).getText());
 8011890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011894:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	f603 343c 	addw	r4, r3, #2876	; 0xb3c
 801189e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80118a2:	2103      	movs	r1, #3
 80118a4:	4618      	mov	r0, r3
 80118a6:	f7ff f99f 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 80118aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80118ae:	4618      	mov	r0, r3
 80118b0:	f7ff f9aa 	bl	8010c08 <_ZNK8touchgfx9TypedText7getTextEv>
 80118b4:	4603      	mov	r3, r0
 80118b6:	4ae7      	ldr	r2, [pc, #924]	; (8011c54 <_ZN12MainViewBaseC1Ev+0x99c>)
 80118b8:	2105      	movs	r1, #5
 80118ba:	4620      	mov	r0, r4
 80118bc:	f00a fca0 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    LambdaValue.setWildcard(LambdaValueBuffer);
 80118c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	f503 7286 	add.w	r2, r3, #268	; 0x10c
 80118ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	f603 333c 	addw	r3, r3, #2876	; 0xb3c
 80118dc:	4619      	mov	r1, r3
 80118de:	4610      	mov	r0, r2
 80118e0:	f7ff fac6 	bl	8010e70 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    LambdaValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID9));
 80118e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 80118f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80118f6:	2102      	movs	r1, #2
 80118f8:	4618      	mov	r0, r3
 80118fa:	f7ff f975 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 80118fe:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8011900:	4620      	mov	r0, r4
 8011902:	f007 f8d3 	bl	8018aac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    SpeedValue.setPosition(23, 86, 71, 41);
 8011906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801190a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	f503 70a2 	add.w	r0, r3, #324	; 0x144
 8011914:	2329      	movs	r3, #41	; 0x29
 8011916:	9300      	str	r3, [sp, #0]
 8011918:	2347      	movs	r3, #71	; 0x47
 801191a:	2256      	movs	r2, #86	; 0x56
 801191c:	2117      	movs	r1, #23
 801191e:	f7fe fefd 	bl	801071c <_ZN8touchgfx8Drawable11setPositionEssss>
    SpeedValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011926:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 8011930:	22ff      	movs	r2, #255	; 0xff
 8011932:	21ff      	movs	r1, #255	; 0xff
 8011934:	20ff      	movs	r0, #255	; 0xff
 8011936:	f7ff fc97 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801193a:	4603      	mov	r3, r0
 801193c:	4619      	mov	r1, r3
 801193e:	4620      	mov	r0, r4
 8011940:	f7ff f9bb 	bl	8010cba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    SpeedValue.setLinespacing(0);
 8011944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011948:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011952:	2100      	movs	r1, #0
 8011954:	4618      	mov	r0, r3
 8011956:	f7ff fa03 	bl	8010d60 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(SpeedValueBuffer, SPEEDVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID8).getText());
 801195a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801195e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	f603 3446 	addw	r4, r3, #2886	; 0xb46
 8011968:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801196c:	2101      	movs	r1, #1
 801196e:	4618      	mov	r0, r3
 8011970:	f7ff f93a 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8011974:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011978:	4618      	mov	r0, r3
 801197a:	f7ff f945 	bl	8010c08 <_ZNK8touchgfx9TypedText7getTextEv>
 801197e:	4603      	mov	r3, r0
 8011980:	4ab4      	ldr	r2, [pc, #720]	; (8011c54 <_ZN12MainViewBaseC1Ev+0x99c>)
 8011982:	2105      	movs	r1, #5
 8011984:	4620      	mov	r0, r4
 8011986:	f00a fc3b 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    SpeedValue.setWildcard(SpeedValueBuffer);
 801198a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801198e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 8011998:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801199c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	f603 3346 	addw	r3, r3, #2886	; 0xb46
 80119a6:	4619      	mov	r1, r3
 80119a8:	4610      	mov	r0, r2
 80119aa:	f7ff fa61 	bl	8010e70 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    SpeedValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 80119ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 80119bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80119c0:	2100      	movs	r1, #0
 80119c2:	4618      	mov	r0, r3
 80119c4:	f7ff f910 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 80119c8:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 80119ca:	4620      	mov	r0, r4
 80119cc:	f007 f86e 	bl	8018aac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    backgroundImage.setXY(179, 63);
 80119d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80119de:	223f      	movs	r2, #63	; 0x3f
 80119e0:	21b3      	movs	r1, #179	; 0xb3
 80119e2:	4618      	mov	r0, r3
 80119e4:	f7fe fee5 	bl	80107b2 <_ZN8touchgfx8Drawable5setXYEss>
    backgroundImage.setVisible(false);
 80119e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80119f6:	2100      	movs	r1, #0
 80119f8:	4618      	mov	r0, r3
 80119fa:	f7fe ff4b 	bl	8010894 <_ZN8touchgfx8Drawable10setVisibleEb>

    rpm1.setPosition(54, 63, 18, 14);
 80119fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	f503 70d4 	add.w	r0, r3, #424	; 0x1a8
 8011a0c:	230e      	movs	r3, #14
 8011a0e:	9300      	str	r3, [sp, #0]
 8011a10:	2312      	movs	r3, #18
 8011a12:	223f      	movs	r2, #63	; 0x3f
 8011a14:	2136      	movs	r1, #54	; 0x36
 8011a16:	f7fe fe81 	bl	801071c <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011a1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 8011a28:	22ff      	movs	r2, #255	; 0xff
 8011a2a:	21ff      	movs	r1, #255	; 0xff
 8011a2c:	20ff      	movs	r0, #255	; 0xff
 8011a2e:	f7ff fc1b 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011a32:	4603      	mov	r3, r0
 8011a34:	4619      	mov	r1, r3
 8011a36:	4620      	mov	r0, r4
 8011a38:	f7ff f93f 	bl	8010cba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm1.setLinespacing(0);
 8011a3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011a4a:	2100      	movs	r1, #0
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	f7ff f987 	bl	8010d60 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm1Buffer, RPM1_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID60).getText());
 8011a52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	f503 6435 	add.w	r4, r3, #2896	; 0xb50
 8011a60:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011a64:	2120      	movs	r1, #32
 8011a66:	4618      	mov	r0, r3
 8011a68:	f7ff f8be 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8011a6c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011a70:	4618      	mov	r0, r3
 8011a72:	f7ff f8c9 	bl	8010c08 <_ZNK8touchgfx9TypedText7getTextEv>
 8011a76:	4603      	mov	r3, r0
 8011a78:	4a76      	ldr	r2, [pc, #472]	; (8011c54 <_ZN12MainViewBaseC1Ev+0x99c>)
 8011a7a:	2102      	movs	r1, #2
 8011a7c:	4620      	mov	r0, r4
 8011a7e:	f00a fbbf 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm1.setWildcard(rpm1Buffer);
 8011a82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 8011a90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	f503 6335 	add.w	r3, r3, #2896	; 0xb50
 8011a9e:	4619      	mov	r1, r3
 8011aa0:	4610      	mov	r0, r2
 8011aa2:	f7ff f9e5 	bl	8010e70 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID11));
 8011aa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011aaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 8011ab4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011ab8:	2104      	movs	r1, #4
 8011aba:	4618      	mov	r0, r3
 8011abc:	f7ff f894 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8011ac0:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8011ac2:	4620      	mov	r0, r4
 8011ac4:	f006 fff2 	bl	8018aac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm2.setPosition(115, 63, 18, 14);
 8011ac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011acc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	f503 70f0 	add.w	r0, r3, #480	; 0x1e0
 8011ad6:	230e      	movs	r3, #14
 8011ad8:	9300      	str	r3, [sp, #0]
 8011ada:	2312      	movs	r3, #18
 8011adc:	223f      	movs	r2, #63	; 0x3f
 8011ade:	2173      	movs	r1, #115	; 0x73
 8011ae0:	f7fe fe1c 	bl	801071c <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ae8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	f503 74f0 	add.w	r4, r3, #480	; 0x1e0
 8011af2:	22ff      	movs	r2, #255	; 0xff
 8011af4:	21ff      	movs	r1, #255	; 0xff
 8011af6:	20ff      	movs	r0, #255	; 0xff
 8011af8:	f7ff fbb6 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011afc:	4603      	mov	r3, r0
 8011afe:	4619      	mov	r1, r3
 8011b00:	4620      	mov	r0, r4
 8011b02:	f7ff f8da 	bl	8010cba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm2.setLinespacing(0);
 8011b06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8011b14:	2100      	movs	r1, #0
 8011b16:	4618      	mov	r0, r3
 8011b18:	f7ff f922 	bl	8010d60 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm2Buffer, RPM2_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID61).getText());
 8011b1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	f603 3454 	addw	r4, r3, #2900	; 0xb54
 8011b2a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011b2e:	2121      	movs	r1, #33	; 0x21
 8011b30:	4618      	mov	r0, r3
 8011b32:	f7ff f859 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8011b36:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	f7ff f864 	bl	8010c08 <_ZNK8touchgfx9TypedText7getTextEv>
 8011b40:	4603      	mov	r3, r0
 8011b42:	4a44      	ldr	r2, [pc, #272]	; (8011c54 <_ZN12MainViewBaseC1Ev+0x99c>)
 8011b44:	2102      	movs	r1, #2
 8011b46:	4620      	mov	r0, r4
 8011b48:	f00a fb5a 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm2.setWildcard(rpm2Buffer);
 8011b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	f503 72f0 	add.w	r2, r3, #480	; 0x1e0
 8011b5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	f603 3354 	addw	r3, r3, #2900	; 0xb54
 8011b68:	4619      	mov	r1, r3
 8011b6a:	4610      	mov	r0, r2
 8011b6c:	f7ff f980 	bl	8010e70 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID12));
 8011b70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	f503 74f0 	add.w	r4, r3, #480	; 0x1e0
 8011b7e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011b82:	2105      	movs	r1, #5
 8011b84:	4618      	mov	r0, r3
 8011b86:	f7ff f82f 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8011b8a:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8011b8e:	4620      	mov	r0, r4
 8011b90:	f006 ff8c 	bl	8018aac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm3.setPosition(173, 62, 18, 14);
 8011b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	f503 7006 	add.w	r0, r3, #536	; 0x218
 8011ba2:	230e      	movs	r3, #14
 8011ba4:	9300      	str	r3, [sp, #0]
 8011ba6:	2312      	movs	r3, #18
 8011ba8:	223e      	movs	r2, #62	; 0x3e
 8011baa:	21ad      	movs	r1, #173	; 0xad
 8011bac:	f7fe fdb6 	bl	801071c <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm3.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	f503 7406 	add.w	r4, r3, #536	; 0x218
 8011bbe:	22ff      	movs	r2, #255	; 0xff
 8011bc0:	21ff      	movs	r1, #255	; 0xff
 8011bc2:	20ff      	movs	r0, #255	; 0xff
 8011bc4:	f7ff fb50 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011bc8:	4603      	mov	r3, r0
 8011bca:	4619      	mov	r1, r3
 8011bcc:	4620      	mov	r0, r4
 8011bce:	f7ff f874 	bl	8010cba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm3.setLinespacing(0);
 8011bd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8011be0:	2100      	movs	r1, #0
 8011be2:	4618      	mov	r0, r3
 8011be4:	f7ff f8bc 	bl	8010d60 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm3Buffer, RPM3_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID62).getText());
 8011be8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	f603 3458 	addw	r4, r3, #2904	; 0xb58
 8011bf6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011bfa:	2122      	movs	r1, #34	; 0x22
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	f7fe fff3 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8011c02:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011c06:	4618      	mov	r0, r3
 8011c08:	f7fe fffe 	bl	8010c08 <_ZNK8touchgfx9TypedText7getTextEv>
 8011c0c:	4603      	mov	r3, r0
 8011c0e:	4a11      	ldr	r2, [pc, #68]	; (8011c54 <_ZN12MainViewBaseC1Ev+0x99c>)
 8011c10:	2102      	movs	r1, #2
 8011c12:	4620      	mov	r0, r4
 8011c14:	f00a faf4 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm3.setWildcard(rpm3Buffer);
 8011c18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	f503 7206 	add.w	r2, r3, #536	; 0x218
 8011c26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	f603 3358 	addw	r3, r3, #2904	; 0xb58
 8011c34:	4619      	mov	r1, r3
 8011c36:	4610      	mov	r0, r2
 8011c38:	f7ff f91a 	bl	8010e70 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm3.setTypedText(touchgfx::TypedText(T_SINGLEUSEID13));
 8011c3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	f503 7406 	add.w	r4, r3, #536	; 0x218
 8011c4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011c4e:	2106      	movs	r1, #6
 8011c50:	4618      	mov	r0, r3
 8011c52:	e001      	b.n	8011c58 <_ZN12MainViewBaseC1Ev+0x9a0>
 8011c54:	08027814 	.word	0x08027814
 8011c58:	f7fe ffc6 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8011c5c:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 8011c60:	4620      	mov	r0, r4
 8011c62:	f006 ff23 	bl	8018aac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm4.setPosition(231, 62, 18, 14);
 8011c66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	f503 7014 	add.w	r0, r3, #592	; 0x250
 8011c74:	230e      	movs	r3, #14
 8011c76:	9300      	str	r3, [sp, #0]
 8011c78:	2312      	movs	r3, #18
 8011c7a:	223e      	movs	r2, #62	; 0x3e
 8011c7c:	21e7      	movs	r1, #231	; 0xe7
 8011c7e:	f7fe fd4d 	bl	801071c <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm4.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	f503 7414 	add.w	r4, r3, #592	; 0x250
 8011c90:	22ff      	movs	r2, #255	; 0xff
 8011c92:	21ff      	movs	r1, #255	; 0xff
 8011c94:	20ff      	movs	r0, #255	; 0xff
 8011c96:	f7ff fae7 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011c9a:	4603      	mov	r3, r0
 8011c9c:	4619      	mov	r1, r3
 8011c9e:	4620      	mov	r0, r4
 8011ca0:	f7ff f80b 	bl	8010cba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm4.setLinespacing(0);
 8011ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ca8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8011cb2:	2100      	movs	r1, #0
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	f7ff f853 	bl	8010d60 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm4Buffer, RPM4_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID63).getText());
 8011cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	f603 345c 	addw	r4, r3, #2908	; 0xb5c
 8011cc8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011ccc:	2123      	movs	r1, #35	; 0x23
 8011cce:	4618      	mov	r0, r3
 8011cd0:	f7fe ff8a 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8011cd4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011cd8:	4618      	mov	r0, r3
 8011cda:	f7fe ff95 	bl	8010c08 <_ZNK8touchgfx9TypedText7getTextEv>
 8011cde:	4603      	mov	r3, r0
 8011ce0:	4ae8      	ldr	r2, [pc, #928]	; (8012084 <_ZN12MainViewBaseC1Ev+0xdcc>)
 8011ce2:	2102      	movs	r1, #2
 8011ce4:	4620      	mov	r0, r4
 8011ce6:	f00a fa8b 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm4.setWildcard(rpm4Buffer);
 8011cea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	f503 7214 	add.w	r2, r3, #592	; 0x250
 8011cf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	f603 335c 	addw	r3, r3, #2908	; 0xb5c
 8011d06:	4619      	mov	r1, r3
 8011d08:	4610      	mov	r0, r2
 8011d0a:	f7ff f8b1 	bl	8010e70 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm4.setTypedText(touchgfx::TypedText(T_SINGLEUSEID14));
 8011d0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	f503 7414 	add.w	r4, r3, #592	; 0x250
 8011d1c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011d20:	2107      	movs	r1, #7
 8011d22:	4618      	mov	r0, r3
 8011d24:	f7fe ff60 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8011d28:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8011d2c:	4620      	mov	r0, r4
 8011d2e:	f006 febd 	bl	8018aac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm5.setPosition(292, 63, 18, 14);
 8011d32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	f503 7022 	add.w	r0, r3, #648	; 0x288
 8011d40:	230e      	movs	r3, #14
 8011d42:	9300      	str	r3, [sp, #0]
 8011d44:	2312      	movs	r3, #18
 8011d46:	223f      	movs	r2, #63	; 0x3f
 8011d48:	f44f 7192 	mov.w	r1, #292	; 0x124
 8011d4c:	f7fe fce6 	bl	801071c <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm5.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011d50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	f503 7422 	add.w	r4, r3, #648	; 0x288
 8011d5e:	22ff      	movs	r2, #255	; 0xff
 8011d60:	21ff      	movs	r1, #255	; 0xff
 8011d62:	20ff      	movs	r0, #255	; 0xff
 8011d64:	f7ff fa80 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011d68:	4603      	mov	r3, r0
 8011d6a:	4619      	mov	r1, r3
 8011d6c:	4620      	mov	r0, r4
 8011d6e:	f7fe ffa4 	bl	8010cba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm5.setLinespacing(0);
 8011d72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8011d80:	2100      	movs	r1, #0
 8011d82:	4618      	mov	r0, r3
 8011d84:	f7fe ffec 	bl	8010d60 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm5Buffer, RPM5_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID64).getText());
 8011d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	f503 6436 	add.w	r4, r3, #2912	; 0xb60
 8011d96:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011d9a:	2124      	movs	r1, #36	; 0x24
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	f7fe ff23 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8011da2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011da6:	4618      	mov	r0, r3
 8011da8:	f7fe ff2e 	bl	8010c08 <_ZNK8touchgfx9TypedText7getTextEv>
 8011dac:	4603      	mov	r3, r0
 8011dae:	4ab5      	ldr	r2, [pc, #724]	; (8012084 <_ZN12MainViewBaseC1Ev+0xdcc>)
 8011db0:	2102      	movs	r1, #2
 8011db2:	4620      	mov	r0, r4
 8011db4:	f00a fa24 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm5.setWildcard(rpm5Buffer);
 8011db8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011dbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	f503 7222 	add.w	r2, r3, #648	; 0x288
 8011dc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011dca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	f503 6336 	add.w	r3, r3, #2912	; 0xb60
 8011dd4:	4619      	mov	r1, r3
 8011dd6:	4610      	mov	r0, r2
 8011dd8:	f7ff f84a 	bl	8010e70 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm5.setTypedText(touchgfx::TypedText(T_SINGLEUSEID15));
 8011ddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011de0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	f503 7422 	add.w	r4, r3, #648	; 0x288
 8011dea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011dee:	2108      	movs	r1, #8
 8011df0:	4618      	mov	r0, r3
 8011df2:	f7fe fef9 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8011df6:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
 8011dfa:	4620      	mov	r0, r4
 8011dfc:	f006 fe56 	bl	8018aac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm6.setPosition(349, 63, 18, 14);
 8011e00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	f503 7030 	add.w	r0, r3, #704	; 0x2c0
 8011e0e:	230e      	movs	r3, #14
 8011e10:	9300      	str	r3, [sp, #0]
 8011e12:	2312      	movs	r3, #18
 8011e14:	223f      	movs	r2, #63	; 0x3f
 8011e16:	f240 115d 	movw	r1, #349	; 0x15d
 8011e1a:	f7fe fc7f 	bl	801071c <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm6.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011e1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	f503 7430 	add.w	r4, r3, #704	; 0x2c0
 8011e2c:	22ff      	movs	r2, #255	; 0xff
 8011e2e:	21ff      	movs	r1, #255	; 0xff
 8011e30:	20ff      	movs	r0, #255	; 0xff
 8011e32:	f7ff fa19 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011e36:	4603      	mov	r3, r0
 8011e38:	4619      	mov	r1, r3
 8011e3a:	4620      	mov	r0, r4
 8011e3c:	f7fe ff3d 	bl	8010cba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm6.setLinespacing(0);
 8011e40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8011e4e:	2100      	movs	r1, #0
 8011e50:	4618      	mov	r0, r3
 8011e52:	f7fe ff85 	bl	8010d60 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm6Buffer, RPM6_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID65).getText());
 8011e56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	f603 3464 	addw	r4, r3, #2916	; 0xb64
 8011e64:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011e68:	2125      	movs	r1, #37	; 0x25
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	f7fe febc 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8011e70:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011e74:	4618      	mov	r0, r3
 8011e76:	f7fe fec7 	bl	8010c08 <_ZNK8touchgfx9TypedText7getTextEv>
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	4a81      	ldr	r2, [pc, #516]	; (8012084 <_ZN12MainViewBaseC1Ev+0xdcc>)
 8011e7e:	2102      	movs	r1, #2
 8011e80:	4620      	mov	r0, r4
 8011e82:	f00a f9bd 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm6.setWildcard(rpm6Buffer);
 8011e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	f503 7230 	add.w	r2, r3, #704	; 0x2c0
 8011e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	f603 3364 	addw	r3, r3, #2916	; 0xb64
 8011ea2:	4619      	mov	r1, r3
 8011ea4:	4610      	mov	r0, r2
 8011ea6:	f7fe ffe3 	bl	8010e70 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm6.setTypedText(touchgfx::TypedText(T_SINGLEUSEID16));
 8011eaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011eae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	f503 7430 	add.w	r4, r3, #704	; 0x2c0
 8011eb8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8011ebc:	2109      	movs	r1, #9
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	f7fe fe92 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8011ec4:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8011ec8:	4620      	mov	r0, r4
 8011eca:	f006 fdef 	bl	8018aac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm7.setPosition(411, 62, 18, 15);
 8011ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ed2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
 8011edc:	230f      	movs	r3, #15
 8011ede:	9300      	str	r3, [sp, #0]
 8011ee0:	2312      	movs	r3, #18
 8011ee2:	223e      	movs	r2, #62	; 0x3e
 8011ee4:	f240 119b 	movw	r1, #411	; 0x19b
 8011ee8:	f7fe fc18 	bl	801071c <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm7.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ef0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	f503 743e 	add.w	r4, r3, #760	; 0x2f8
 8011efa:	22ff      	movs	r2, #255	; 0xff
 8011efc:	21ff      	movs	r1, #255	; 0xff
 8011efe:	20ff      	movs	r0, #255	; 0xff
 8011f00:	f7ff f9b2 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011f04:	4603      	mov	r3, r0
 8011f06:	4619      	mov	r1, r3
 8011f08:	4620      	mov	r0, r4
 8011f0a:	f7fe fed6 	bl	8010cba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm7.setLinespacing(0);
 8011f0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8011f1c:	2100      	movs	r1, #0
 8011f1e:	4618      	mov	r0, r3
 8011f20:	f7fe ff1e 	bl	8010d60 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm7Buffer, RPM7_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID66).getText());
 8011f24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	f603 3468 	addw	r4, r3, #2920	; 0xb68
 8011f32:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8011f36:	2126      	movs	r1, #38	; 0x26
 8011f38:	4618      	mov	r0, r3
 8011f3a:	f7fe fe55 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8011f3e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8011f42:	4618      	mov	r0, r3
 8011f44:	f7fe fe60 	bl	8010c08 <_ZNK8touchgfx9TypedText7getTextEv>
 8011f48:	4603      	mov	r3, r0
 8011f4a:	4a4e      	ldr	r2, [pc, #312]	; (8012084 <_ZN12MainViewBaseC1Ev+0xdcc>)
 8011f4c:	2102      	movs	r1, #2
 8011f4e:	4620      	mov	r0, r4
 8011f50:	f00a f956 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm7.setWildcard(rpm7Buffer);
 8011f54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	f503 723e 	add.w	r2, r3, #760	; 0x2f8
 8011f62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	f603 3368 	addw	r3, r3, #2920	; 0xb68
 8011f70:	4619      	mov	r1, r3
 8011f72:	4610      	mov	r0, r2
 8011f74:	f7fe ff7c 	bl	8010e70 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm7.setTypedText(touchgfx::TypedText(T_SINGLEUSEID17));
 8011f78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	f503 743e 	add.w	r4, r3, #760	; 0x2f8
 8011f86:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011f8a:	210a      	movs	r1, #10
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	f7fe fe2b 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8011f92:	f8b7 1068 	ldrh.w	r1, [r7, #104]	; 0x68
 8011f96:	4620      	mov	r0, r4
 8011f98:	f006 fd88 	bl	8018aac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm8.setPosition(462, 62, 18, 14);
 8011f9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fa0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	f503 704c 	add.w	r0, r3, #816	; 0x330
 8011faa:	230e      	movs	r3, #14
 8011fac:	9300      	str	r3, [sp, #0]
 8011fae:	2312      	movs	r3, #18
 8011fb0:	223e      	movs	r2, #62	; 0x3e
 8011fb2:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8011fb6:	f7fe fbb1 	bl	801071c <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm8.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	f503 744c 	add.w	r4, r3, #816	; 0x330
 8011fc8:	22ff      	movs	r2, #255	; 0xff
 8011fca:	21ff      	movs	r1, #255	; 0xff
 8011fcc:	20ff      	movs	r0, #255	; 0xff
 8011fce:	f7ff f94b 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	4619      	mov	r1, r3
 8011fd6:	4620      	mov	r0, r4
 8011fd8:	f7fe fe6f 	bl	8010cba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm8.setLinespacing(0);
 8011fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fe0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8011fea:	2100      	movs	r1, #0
 8011fec:	4618      	mov	r0, r3
 8011fee:	f7fe feb7 	bl	8010d60 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm8Buffer, RPM8_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID67).getText());
 8011ff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ff6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	f603 346c 	addw	r4, r3, #2924	; 0xb6c
 8012000:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8012004:	2127      	movs	r1, #39	; 0x27
 8012006:	4618      	mov	r0, r3
 8012008:	f7fe fdee 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 801200c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8012010:	4618      	mov	r0, r3
 8012012:	f7fe fdf9 	bl	8010c08 <_ZNK8touchgfx9TypedText7getTextEv>
 8012016:	4603      	mov	r3, r0
 8012018:	4a1a      	ldr	r2, [pc, #104]	; (8012084 <_ZN12MainViewBaseC1Ev+0xdcc>)
 801201a:	2102      	movs	r1, #2
 801201c:	4620      	mov	r0, r4
 801201e:	f00a f8ef 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm8.setWildcard(rpm8Buffer);
 8012022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012026:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	f503 724c 	add.w	r2, r3, #816	; 0x330
 8012030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012034:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	f603 336c 	addw	r3, r3, #2924	; 0xb6c
 801203e:	4619      	mov	r1, r3
 8012040:	4610      	mov	r0, r2
 8012042:	f7fe ff15 	bl	8010e70 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm8.setTypedText(touchgfx::TypedText(T_SINGLEUSEID18));
 8012046:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801204a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	f503 744c 	add.w	r4, r3, #816	; 0x330
 8012054:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8012058:	210b      	movs	r1, #11
 801205a:	4618      	mov	r0, r3
 801205c:	f7fe fdc4 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8012060:	f8b7 1070 	ldrh.w	r1, [r7, #112]	; 0x70
 8012064:	4620      	mov	r0, r4
 8012066:	f006 fd21 	bl	8018aac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    line11.setPosition(-2, 58, 490, 5);
 801206a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801206e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	f503 705a 	add.w	r0, r3, #872	; 0x368
 8012078:	2305      	movs	r3, #5
 801207a:	9300      	str	r3, [sp, #0]
 801207c:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
 8012080:	223a      	movs	r2, #58	; 0x3a
 8012082:	e001      	b.n	8012088 <_ZN12MainViewBaseC1Ev+0xdd0>
 8012084:	08027814 	.word	0x08027814
 8012088:	f06f 0101 	mvn.w	r1, #1
 801208c:	f7fe fb46 	bl	801071c <_ZN8touchgfx8Drawable11setPositionEssss>
    line11Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012094:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	f503 7477 	add.w	r4, r3, #988	; 0x3dc
 801209e:	22ff      	movs	r2, #255	; 0xff
 80120a0:	21ff      	movs	r1, #255	; 0xff
 80120a2:	20ff      	movs	r0, #255	; 0xff
 80120a4:	f7ff f8e0 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80120a8:	4603      	mov	r3, r0
 80120aa:	22ff      	movs	r2, #255	; 0xff
 80120ac:	4619      	mov	r1, r3
 80120ae:	4620      	mov	r0, r4
 80120b0:	f005 ffcd 	bl	801804e <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line11.setPainter(line11Painter);
 80120b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80120b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	f503 725a 	add.w	r2, r3, #872	; 0x368
 80120c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80120c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 80120d0:	4619      	mov	r1, r3
 80120d2:	4610      	mov	r0, r2
 80120d4:	f006 f824 	bl	8018120 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line11.setStart(0, 3);
 80120d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80120dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	f503 735a 	add.w	r3, r3, #872	; 0x368
 80120e6:	2203      	movs	r2, #3
 80120e8:	2100      	movs	r1, #0
 80120ea:	4618      	mov	r0, r3
 80120ec:	f001 fbc6 	bl	801387c <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line11.setEnd(490, 3);
 80120f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80120f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	f503 735a 	add.w	r3, r3, #872	; 0x368
 80120fe:	2203      	movs	r2, #3
 8012100:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8012104:	4618      	mov	r0, r3
 8012106:	f001 fbdf 	bl	80138c8 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line11.setLineWidth(2);
 801210a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801210e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	f503 735a 	add.w	r3, r3, #872	; 0x368
 8012118:	2102      	movs	r1, #2
 801211a:	4618      	mov	r0, r3
 801211c:	f001 fbfa 	bl	8013914 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line11.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8012120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012124:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	f503 735a 	add.w	r3, r3, #872	; 0x368
 801212e:	2101      	movs	r1, #1
 8012130:	4618      	mov	r0, r3
 8012132:	f006 fb0f 	bl	8018754 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    IATDescriptor.setXY(134, 127);
 8012136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801213a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8012144:	227f      	movs	r2, #127	; 0x7f
 8012146:	2186      	movs	r1, #134	; 0x86
 8012148:	4618      	mov	r0, r3
 801214a:	f7fe fb32 	bl	80107b2 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 801214e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012152:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	f503 747d 	add.w	r4, r3, #1012	; 0x3f4
 801215c:	2200      	movs	r2, #0
 801215e:	21dc      	movs	r1, #220	; 0xdc
 8012160:	20ff      	movs	r0, #255	; 0xff
 8012162:	f7ff f881 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012166:	4603      	mov	r3, r0
 8012168:	4619      	mov	r1, r3
 801216a:	4620      	mov	r0, r4
 801216c:	f7fe fda5 	bl	8010cba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor.setLinespacing(0);
 8012170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012174:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 801217e:	2100      	movs	r1, #0
 8012180:	4618      	mov	r0, r3
 8012182:	f7fe fded 	bl	8010d60 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID30));
 8012186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801218a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	f503 747d 	add.w	r4, r3, #1012	; 0x3f4
 8012194:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8012198:	210e      	movs	r1, #14
 801219a:	4618      	mov	r0, r3
 801219c:	f7fe fd24 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 80121a0:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
 80121a4:	4620      	mov	r0, r4
 80121a6:	f006 fc81 	bl	8018aac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATValue.setPosition(116, 86, 60, 42);
 80121aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	f503 6085 	add.w	r0, r3, #1064	; 0x428
 80121b8:	232a      	movs	r3, #42	; 0x2a
 80121ba:	9300      	str	r3, [sp, #0]
 80121bc:	233c      	movs	r3, #60	; 0x3c
 80121be:	2256      	movs	r2, #86	; 0x56
 80121c0:	2174      	movs	r1, #116	; 0x74
 80121c2:	f7fe faab 	bl	801071c <_ZN8touchgfx8Drawable11setPositionEssss>
    IATValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80121c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	f503 6485 	add.w	r4, r3, #1064	; 0x428
 80121d4:	22ff      	movs	r2, #255	; 0xff
 80121d6:	21ff      	movs	r1, #255	; 0xff
 80121d8:	20ff      	movs	r0, #255	; 0xff
 80121da:	f7ff f845 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80121de:	4603      	mov	r3, r0
 80121e0:	4619      	mov	r1, r3
 80121e2:	4620      	mov	r0, r4
 80121e4:	f7fe fd69 	bl	8010cba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATValue.setLinespacing(0);
 80121e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80121f6:	2100      	movs	r1, #0
 80121f8:	4618      	mov	r0, r3
 80121fa:	f7fe fdb1 	bl	8010d60 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID23).getText());
 80121fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012202:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	f503 6437 	add.w	r4, r3, #2928	; 0xb70
 801220c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8012210:	210d      	movs	r1, #13
 8012212:	4618      	mov	r0, r3
 8012214:	f7fe fce8 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8012218:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801221c:	4618      	mov	r0, r3
 801221e:	f7fe fcf3 	bl	8010c08 <_ZNK8touchgfx9TypedText7getTextEv>
 8012222:	4603      	mov	r3, r0
 8012224:	4aea      	ldr	r2, [pc, #936]	; (80125d0 <_ZN12MainViewBaseC1Ev+0x1318>)
 8012226:	2105      	movs	r1, #5
 8012228:	4620      	mov	r0, r4
 801222a:	f009 ffe9 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    IATValue.setWildcard(IATValueBuffer);
 801222e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012232:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	f503 6285 	add.w	r2, r3, #1064	; 0x428
 801223c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012240:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	f503 6337 	add.w	r3, r3, #2928	; 0xb70
 801224a:	4619      	mov	r1, r3
 801224c:	4610      	mov	r0, r2
 801224e:	f7fe fe0f 	bl	8010e70 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    IATValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID22));
 8012252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012256:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	f503 6485 	add.w	r4, r3, #1064	; 0x428
 8012260:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8012264:	210c      	movs	r1, #12
 8012266:	4618      	mov	r0, r3
 8012268:	f7fe fcbe 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 801226c:	f8b7 107c 	ldrh.w	r1, [r7, #124]	; 0x7c
 8012270:	4620      	mov	r0, r4
 8012272:	f006 fc1b 	bl	8018aac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1.setXY(325, 126);
 8012276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801227a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8012284:	227e      	movs	r2, #126	; 0x7e
 8012286:	f240 1145 	movw	r1, #325	; 0x145
 801228a:	4618      	mov	r0, r3
 801228c:	f7fe fa91 	bl	80107b2 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8012290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012294:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	f503 648c 	add.w	r4, r3, #1120	; 0x460
 801229e:	2200      	movs	r2, #0
 80122a0:	21dc      	movs	r1, #220	; 0xdc
 80122a2:	20ff      	movs	r0, #255	; 0xff
 80122a4:	f7fe ffe0 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80122a8:	4603      	mov	r3, r0
 80122aa:	4619      	mov	r1, r3
 80122ac:	4620      	mov	r0, r4
 80122ae:	f7fe fd04 	bl	8010cba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1.setLinespacing(0);
 80122b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 80122c0:	2100      	movs	r1, #0
 80122c2:	4618      	mov	r0, r3
 80122c4:	f7fe fd4c 	bl	8010d60 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID34));
 80122c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	f503 648c 	add.w	r4, r3, #1120	; 0x460
 80122d6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80122da:	2111      	movs	r1, #17
 80122dc:	4618      	mov	r0, r3
 80122de:	f7fe fc83 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 80122e2:	f8b7 1080 	ldrh.w	r1, [r7, #128]	; 0x80
 80122e6:	4620      	mov	r0, r4
 80122e8:	f006 fbe0 	bl	8018aac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    ECTDescriptor_1.setXY(401, 126);
 80122ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80122fa:	227e      	movs	r2, #126	; 0x7e
 80122fc:	f240 1191 	movw	r1, #401	; 0x191
 8012300:	4618      	mov	r0, r3
 8012302:	f7fe fa56 	bl	80107b2 <_ZN8touchgfx8Drawable5setXYEss>
    ECTDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8012306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801230a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8012314:	2200      	movs	r2, #0
 8012316:	21dc      	movs	r1, #220	; 0xdc
 8012318:	20ff      	movs	r0, #255	; 0xff
 801231a:	f7fe ffa5 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801231e:	4603      	mov	r3, r0
 8012320:	4619      	mov	r1, r3
 8012322:	4620      	mov	r0, r4
 8012324:	f7fe fcc9 	bl	8010cba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    ECTDescriptor_1.setLinespacing(0);
 8012328:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801232c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8012336:	2100      	movs	r1, #0
 8012338:	4618      	mov	r0, r3
 801233a:	f7fe fd11 	bl	8010d60 <_ZN8touchgfx8TextArea14setLinespacingEs>
    ECTDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID35));
 801233e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012342:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	f203 4494 	addw	r4, r3, #1172	; 0x494
 801234c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012350:	2112      	movs	r1, #18
 8012352:	4618      	mov	r0, r3
 8012354:	f7fe fc48 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8012358:	f8b7 1084 	ldrh.w	r1, [r7, #132]	; 0x84
 801235c:	4620      	mov	r0, r4
 801235e:	f006 fba5 	bl	8018aac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILTempValue.setPosition(316, 85, 75, 42);
 8012362:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012366:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	f503 6099 	add.w	r0, r3, #1224	; 0x4c8
 8012370:	232a      	movs	r3, #42	; 0x2a
 8012372:	9300      	str	r3, [sp, #0]
 8012374:	234b      	movs	r3, #75	; 0x4b
 8012376:	2255      	movs	r2, #85	; 0x55
 8012378:	f44f 719e 	mov.w	r1, #316	; 0x13c
 801237c:	f7fe f9ce 	bl	801071c <_ZN8touchgfx8Drawable11setPositionEssss>
    OILTempValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012384:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	f503 6499 	add.w	r4, r3, #1224	; 0x4c8
 801238e:	22ff      	movs	r2, #255	; 0xff
 8012390:	21ff      	movs	r1, #255	; 0xff
 8012392:	20ff      	movs	r0, #255	; 0xff
 8012394:	f7fe ff68 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012398:	4603      	mov	r3, r0
 801239a:	4619      	mov	r1, r3
 801239c:	4620      	mov	r0, r4
 801239e:	f7fe fc8c 	bl	8010cba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILTempValue.setLinespacing(0);
 80123a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 80123b0:	2100      	movs	r1, #0
 80123b2:	4618      	mov	r0, r3
 80123b4:	f7fe fcd4 	bl	8010d60 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID37).getText());
 80123b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	f603 347a 	addw	r4, r3, #2938	; 0xb7a
 80123c6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80123ca:	2114      	movs	r1, #20
 80123cc:	4618      	mov	r0, r3
 80123ce:	f7fe fc0b 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 80123d2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80123d6:	4618      	mov	r0, r3
 80123d8:	f7fe fc16 	bl	8010c08 <_ZNK8touchgfx9TypedText7getTextEv>
 80123dc:	4603      	mov	r3, r0
 80123de:	4a7c      	ldr	r2, [pc, #496]	; (80125d0 <_ZN12MainViewBaseC1Ev+0x1318>)
 80123e0:	2105      	movs	r1, #5
 80123e2:	4620      	mov	r0, r4
 80123e4:	f009 ff0c 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILTempValue.setWildcard(OILTempValueBuffer);
 80123e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	f503 6299 	add.w	r2, r3, #1224	; 0x4c8
 80123f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	f603 337a 	addw	r3, r3, #2938	; 0xb7a
 8012404:	4619      	mov	r1, r3
 8012406:	4610      	mov	r0, r2
 8012408:	f7fe fd32 	bl	8010e70 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILTempValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID36));
 801240c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012410:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	f503 6499 	add.w	r4, r3, #1224	; 0x4c8
 801241a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801241e:	2113      	movs	r1, #19
 8012420:	4618      	mov	r0, r3
 8012422:	f7fe fbe1 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8012426:	f8b7 108c 	ldrh.w	r1, [r7, #140]	; 0x8c
 801242a:	4620      	mov	r0, r4
 801242c:	f006 fb3e 	bl	8018aac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILPressureValue.setPosition(398, 85, 71, 40);
 8012430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012434:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	f503 60a0 	add.w	r0, r3, #1280	; 0x500
 801243e:	2328      	movs	r3, #40	; 0x28
 8012440:	9300      	str	r3, [sp, #0]
 8012442:	2347      	movs	r3, #71	; 0x47
 8012444:	2255      	movs	r2, #85	; 0x55
 8012446:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 801244a:	f7fe f967 	bl	801071c <_ZN8touchgfx8Drawable11setPositionEssss>
    OILPressureValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801244e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012452:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 801245c:	22ff      	movs	r2, #255	; 0xff
 801245e:	21ff      	movs	r1, #255	; 0xff
 8012460:	20ff      	movs	r0, #255	; 0xff
 8012462:	f7fe ff01 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012466:	4603      	mov	r3, r0
 8012468:	4619      	mov	r1, r3
 801246a:	4620      	mov	r0, r4
 801246c:	f7fe fc25 	bl	8010cba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILPressureValue.setLinespacing(0);
 8012470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012474:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801247e:	2100      	movs	r1, #0
 8012480:	4618      	mov	r0, r3
 8012482:	f7fe fc6d 	bl	8010d60 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID57).getText());
 8012486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801248a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	f603 3484 	addw	r4, r3, #2948	; 0xb84
 8012494:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8012498:	211f      	movs	r1, #31
 801249a:	4618      	mov	r0, r3
 801249c:	f7fe fba4 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 80124a0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80124a4:	4618      	mov	r0, r3
 80124a6:	f7fe fbaf 	bl	8010c08 <_ZNK8touchgfx9TypedText7getTextEv>
 80124aa:	4603      	mov	r3, r0
 80124ac:	4a48      	ldr	r2, [pc, #288]	; (80125d0 <_ZN12MainViewBaseC1Ev+0x1318>)
 80124ae:	2105      	movs	r1, #5
 80124b0:	4620      	mov	r0, r4
 80124b2:	f009 fea5 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILPressureValue.setWildcard(OILPressureValueBuffer);
 80124b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	f503 62a0 	add.w	r2, r3, #1280	; 0x500
 80124c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	f603 3384 	addw	r3, r3, #2948	; 0xb84
 80124d2:	4619      	mov	r1, r3
 80124d4:	4610      	mov	r0, r2
 80124d6:	f7fe fccb 	bl	8010e70 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILPressureValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID38));
 80124da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 80124e8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80124ec:	2115      	movs	r1, #21
 80124ee:	4618      	mov	r0, r3
 80124f0:	f7fe fb7a 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 80124f4:	f8b7 1094 	ldrh.w	r1, [r7, #148]	; 0x94
 80124f8:	4620      	mov	r0, r4
 80124fa:	f006 fad7 	bl	8018aac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1_1.setXY(407, 240);
 80124fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012502:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 801250c:	22f0      	movs	r2, #240	; 0xf0
 801250e:	f240 1197 	movw	r1, #407	; 0x197
 8012512:	4618      	mov	r0, r3
 8012514:	f7fe f94d 	bl	80107b2 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8012518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801251c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	f503 64a7 	add.w	r4, r3, #1336	; 0x538
 8012526:	2200      	movs	r2, #0
 8012528:	21dc      	movs	r1, #220	; 0xdc
 801252a:	20ff      	movs	r0, #255	; 0xff
 801252c:	f7fe fe9c 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012530:	4603      	mov	r3, r0
 8012532:	4619      	mov	r1, r3
 8012534:	4620      	mov	r0, r4
 8012536:	f7fe fbc0 	bl	8010cba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1_1.setLinespacing(0);
 801253a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801253e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8012548:	2100      	movs	r1, #0
 801254a:	4618      	mov	r0, r3
 801254c:	f7fe fc08 	bl	8010d60 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID42));
 8012550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012554:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	f503 64a7 	add.w	r4, r3, #1336	; 0x538
 801255e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8012562:	2117      	movs	r1, #23
 8012564:	4618      	mov	r0, r3
 8012566:	f7fe fb3f 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 801256a:	f8b7 1098 	ldrh.w	r1, [r7, #152]	; 0x98
 801256e:	4620      	mov	r0, r4
 8012570:	f006 fa9c 	bl	8018aac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TPSProgress.setXY(367, 226);
 8012574:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012578:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8012582:	22e2      	movs	r2, #226	; 0xe2
 8012584:	f240 116f 	movw	r1, #367	; 0x16f
 8012588:	4618      	mov	r0, r3
 801258a:	f7fe f912 	bl	80107b2 <_ZN8touchgfx8Drawable5setXYEss>
    TPSProgress.setProgressIndicatorPosition(2, 2, 100, 10);
 801258e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012592:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	f203 506c 	addw	r0, r3, #1388	; 0x56c
 801259c:	230a      	movs	r3, #10
 801259e:	9300      	str	r3, [sp, #0]
 80125a0:	2364      	movs	r3, #100	; 0x64
 80125a2:	2202      	movs	r2, #2
 80125a4:	2102      	movs	r1, #2
 80125a6:	f004 f881 	bl	80166ac <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    TPSProgress.setRange(0, 100);
 80125aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	f203 506c 	addw	r0, r3, #1388	; 0x56c
 80125b8:	2300      	movs	r3, #0
 80125ba:	9300      	str	r3, [sp, #0]
 80125bc:	2300      	movs	r3, #0
 80125be:	2264      	movs	r2, #100	; 0x64
 80125c0:	2100      	movs	r1, #0
 80125c2:	f004 faf1 	bl	8016ba8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    TPSProgress.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 80125c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80125ce:	e001      	b.n	80125d4 <_ZN12MainViewBaseC1Ev+0x131c>
 80125d0:	08027814 	.word	0x08027814
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 80125da:	2100      	movs	r1, #0
 80125dc:	4618      	mov	r0, r3
 80125de:	f004 f8c5 	bl	801676c <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    TPSProgress.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_SMALL_PROGRESS_INDICATOR_BG_SQUARE_0_DEGREES_ID));
 80125e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	f203 546c 	addw	r4, r3, #1388	; 0x56c
 80125f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80125f4:	2100      	movs	r1, #0
 80125f6:	4618      	mov	r0, r3
 80125f8:	f7fe f832 	bl	8010660 <_ZN8touchgfx6BitmapC1Et>
 80125fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8012600:	4619      	mov	r1, r3
 8012602:	4620      	mov	r0, r4
 8012604:	f004 fac5 	bl	8016b92 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    TPSProgress.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8012608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801260c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	f203 546c 	addw	r4, r3, #1388	; 0x56c
 8012616:	2200      	movs	r2, #0
 8012618:	21dc      	movs	r1, #220	; 0xdc
 801261a:	20ff      	movs	r0, #255	; 0xff
 801261c:	f7fe fe24 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012620:	4603      	mov	r3, r0
 8012622:	4619      	mov	r1, r3
 8012624:	4620      	mov	r0, r4
 8012626:	f003 ffeb 	bl	8016600 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    TPSProgress.setValue(60);
 801262a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801262e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8012638:	213c      	movs	r1, #60	; 0x3c
 801263a:	4618      	mov	r0, r3
 801263c:	f004 f84e 	bl	80166dc <_ZN8touchgfx11BoxProgress8setValueEi>

    line10.setPosition(14, 258, 180, 10);
 8012640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012644:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	f203 602c 	addw	r0, r3, #1580	; 0x62c
 801264e:	230a      	movs	r3, #10
 8012650:	9300      	str	r3, [sp, #0]
 8012652:	23b4      	movs	r3, #180	; 0xb4
 8012654:	f44f 7281 	mov.w	r2, #258	; 0x102
 8012658:	210e      	movs	r1, #14
 801265a:	f7fe f85f 	bl	801071c <_ZN8touchgfx8Drawable11setPositionEssss>
    line10Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801265e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012662:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	f503 64d4 	add.w	r4, r3, #1696	; 0x6a0
 801266c:	22ff      	movs	r2, #255	; 0xff
 801266e:	21ff      	movs	r1, #255	; 0xff
 8012670:	20ff      	movs	r0, #255	; 0xff
 8012672:	f7fe fdf9 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012676:	4603      	mov	r3, r0
 8012678:	22ff      	movs	r2, #255	; 0xff
 801267a:	4619      	mov	r1, r3
 801267c:	4620      	mov	r0, r4
 801267e:	f005 fce6 	bl	801804e <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10.setPainter(line10Painter);
 8012682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012686:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	f203 622c 	addw	r2, r3, #1580	; 0x62c
 8012690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012694:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 801269e:	4619      	mov	r1, r3
 80126a0:	4610      	mov	r0, r2
 80126a2:	f005 fd3d 	bl	8018120 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10.setStart(0, 5);
 80126a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 80126b4:	2205      	movs	r2, #5
 80126b6:	2100      	movs	r1, #0
 80126b8:	4618      	mov	r0, r3
 80126ba:	f001 f8df 	bl	801387c <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10.setEnd(180, 5);
 80126be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 80126cc:	2205      	movs	r2, #5
 80126ce:	21b4      	movs	r1, #180	; 0xb4
 80126d0:	4618      	mov	r0, r3
 80126d2:	f001 f8f9 	bl	80138c8 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10.setLineWidth(2);
 80126d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 80126e4:	2102      	movs	r1, #2
 80126e6:	4618      	mov	r0, r3
 80126e8:	f001 f914 	bl	8013914 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 80126ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 80126fa:	2100      	movs	r1, #0
 80126fc:	4618      	mov	r0, r3
 80126fe:	f006 f829 	bl	8018754 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    line10_1.setPosition(287, 258, 180, 10);
 8012702:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012706:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	f503 60d7 	add.w	r0, r3, #1720	; 0x6b8
 8012710:	230a      	movs	r3, #10
 8012712:	9300      	str	r3, [sp, #0]
 8012714:	23b4      	movs	r3, #180	; 0xb4
 8012716:	f44f 7281 	mov.w	r2, #258	; 0x102
 801271a:	f240 111f 	movw	r1, #287	; 0x11f
 801271e:	f7fd fffd 	bl	801071c <_ZN8touchgfx8Drawable11setPositionEssss>
    line10_1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012726:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	f203 742c 	addw	r4, r3, #1836	; 0x72c
 8012730:	22ff      	movs	r2, #255	; 0xff
 8012732:	21ff      	movs	r1, #255	; 0xff
 8012734:	20ff      	movs	r0, #255	; 0xff
 8012736:	f7fe fd97 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801273a:	4603      	mov	r3, r0
 801273c:	22ff      	movs	r2, #255	; 0xff
 801273e:	4619      	mov	r1, r3
 8012740:	4620      	mov	r0, r4
 8012742:	f005 fc84 	bl	801804e <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10_1.setPainter(line10_1Painter);
 8012746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801274a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	f503 62d7 	add.w	r2, r3, #1720	; 0x6b8
 8012754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012758:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	f203 732c 	addw	r3, r3, #1836	; 0x72c
 8012762:	4619      	mov	r1, r3
 8012764:	4610      	mov	r0, r2
 8012766:	f005 fcdb 	bl	8018120 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10_1.setStart(0, 5);
 801276a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801276e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 8012778:	2205      	movs	r2, #5
 801277a:	2100      	movs	r1, #0
 801277c:	4618      	mov	r0, r3
 801277e:	f001 f87d 	bl	801387c <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10_1.setEnd(180, 5);
 8012782:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012786:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 8012790:	2205      	movs	r2, #5
 8012792:	21b4      	movs	r1, #180	; 0xb4
 8012794:	4618      	mov	r0, r3
 8012796:	f001 f897 	bl	80138c8 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10_1.setLineWidth(2);
 801279a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801279e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 80127a8:	2102      	movs	r1, #2
 80127aa:	4618      	mov	r0, r3
 80127ac:	f001 f8b2 	bl	8013914 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10_1.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 80127b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80127b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 80127be:	2100      	movs	r1, #0
 80127c0:	4618      	mov	r0, r3
 80127c2:	f005 ffc7 	bl	8018754 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    BatteryVoltage.setPosition(210, 253, 60, 21);
 80127c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80127ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	f203 7044 	addw	r0, r3, #1860	; 0x744
 80127d4:	2315      	movs	r3, #21
 80127d6:	9300      	str	r3, [sp, #0]
 80127d8:	233c      	movs	r3, #60	; 0x3c
 80127da:	22fd      	movs	r2, #253	; 0xfd
 80127dc:	21d2      	movs	r1, #210	; 0xd2
 80127de:	f7fd ff9d 	bl	801071c <_ZN8touchgfx8Drawable11setPositionEssss>
    BatteryVoltage.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80127e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80127e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	f203 7444 	addw	r4, r3, #1860	; 0x744
 80127f0:	22ff      	movs	r2, #255	; 0xff
 80127f2:	21ff      	movs	r1, #255	; 0xff
 80127f4:	20ff      	movs	r0, #255	; 0xff
 80127f6:	f7fe fd37 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80127fa:	4603      	mov	r3, r0
 80127fc:	4619      	mov	r1, r3
 80127fe:	4620      	mov	r0, r4
 8012800:	f7fe fa5b 	bl	8010cba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    BatteryVoltage.setLinespacing(0);
 8012804:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012808:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	f203 7344 	addw	r3, r3, #1860	; 0x744
 8012812:	2100      	movs	r1, #0
 8012814:	4618      	mov	r0, r3
 8012816:	f7fe faa3 	bl	8010d60 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID45).getText());
 801281a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801281e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	f603 348e 	addw	r4, r3, #2958	; 0xb8e
 8012828:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801282c:	2119      	movs	r1, #25
 801282e:	4618      	mov	r0, r3
 8012830:	f7fe f9da 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8012834:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8012838:	4618      	mov	r0, r3
 801283a:	f7fe f9e5 	bl	8010c08 <_ZNK8touchgfx9TypedText7getTextEv>
 801283e:	4603      	mov	r3, r0
 8012840:	4ae9      	ldr	r2, [pc, #932]	; (8012be8 <_ZN12MainViewBaseC1Ev+0x1930>)
 8012842:	2105      	movs	r1, #5
 8012844:	4620      	mov	r0, r4
 8012846:	f009 fcdb 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    BatteryVoltage.setWildcard(BatteryVoltageBuffer);
 801284a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801284e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	f203 7244 	addw	r2, r3, #1860	; 0x744
 8012858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801285c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	f603 338e 	addw	r3, r3, #2958	; 0xb8e
 8012866:	4619      	mov	r1, r3
 8012868:	4610      	mov	r0, r2
 801286a:	f7fe fb01 	bl	8010e70 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    BatteryVoltage.setTypedText(touchgfx::TypedText(T_SINGLEUSEID44));
 801286e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012872:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	f203 7444 	addw	r4, r3, #1860	; 0x744
 801287c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8012880:	2118      	movs	r1, #24
 8012882:	4618      	mov	r0, r3
 8012884:	f7fe f9b0 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8012888:	f8b7 10a4 	ldrh.w	r1, [r7, #164]	; 0xa4
 801288c:	4620      	mov	r0, r4
 801288e:	f006 f90d 	bl	8018aac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    RPMProgressBar.setXY(1, 1);
 8012892:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012896:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 80128a0:	2201      	movs	r2, #1
 80128a2:	2101      	movs	r1, #1
 80128a4:	4618      	mov	r0, r3
 80128a6:	f7fd ff84 	bl	80107b2 <_ZN8touchgfx8Drawable5setXYEss>
    RPMProgressBar.setProgressIndicatorPosition(2, 2, 478, 55);
 80128aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80128ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	f203 707c 	addw	r0, r3, #1916	; 0x77c
 80128b8:	2337      	movs	r3, #55	; 0x37
 80128ba:	9300      	str	r3, [sp, #0]
 80128bc:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 80128c0:	2202      	movs	r2, #2
 80128c2:	2102      	movs	r1, #2
 80128c4:	f004 f842 	bl	801694c <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>
    RPMProgressBar.setRange(0, 8000);
 80128c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80128cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	f203 707c 	addw	r0, r3, #1916	; 0x77c
 80128d6:	2300      	movs	r3, #0
 80128d8:	9300      	str	r3, [sp, #0]
 80128da:	2300      	movs	r3, #0
 80128dc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80128e0:	2100      	movs	r1, #0
 80128e2:	f004 f961 	bl	8016ba8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    RPMProgressBar.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 80128e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80128ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 80128f4:	2100      	movs	r1, #0
 80128f6:	4618      	mov	r0, r3
 80128f8:	f003 ff38 	bl	801676c <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    RPMProgressBar.setBitmap(BITMAP_BLUE_PROGRESSINDICATORS_FILL_TILING_RED_YELLOW_FADEYELLOWRED_SMALL_TRANSPARENT_ID);
 80128fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012900:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 801290a:	2101      	movs	r1, #1
 801290c:	4618      	mov	r0, r3
 801290e:	f003 ff78 	bl	8016802 <_ZN8touchgfx13ImageProgress9setBitmapEt>
    RPMProgressBar.setValue(7200);
 8012912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012916:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8012920:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8012924:	4618      	mov	r0, r3
 8012926:	f004 f829 	bl	801697c <_ZN8touchgfx13ImageProgress8setValueEi>
    RPMProgressBar.setAnchorAtZero(true);
 801292a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801292e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8012938:	2101      	movs	r1, #1
 801293a:	4618      	mov	r0, r3
 801293c:	f003 ff4a 	bl	80167d4 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>

    RPMValue.setPosition(11, 4, 55, 22);
 8012940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012944:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	f603 006c 	addw	r0, r3, #2156	; 0x86c
 801294e:	2316      	movs	r3, #22
 8012950:	9300      	str	r3, [sp, #0]
 8012952:	2337      	movs	r3, #55	; 0x37
 8012954:	2204      	movs	r2, #4
 8012956:	210b      	movs	r1, #11
 8012958:	f7fd fee0 	bl	801071c <_ZN8touchgfx8Drawable11setPositionEssss>
    RPMValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801295c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012960:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	f603 046c 	addw	r4, r3, #2156	; 0x86c
 801296a:	22ff      	movs	r2, #255	; 0xff
 801296c:	21ff      	movs	r1, #255	; 0xff
 801296e:	20ff      	movs	r0, #255	; 0xff
 8012970:	f7fe fc7a 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012974:	4603      	mov	r3, r0
 8012976:	4619      	mov	r1, r3
 8012978:	4620      	mov	r0, r4
 801297a:	f7fe f99e 	bl	8010cba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    RPMValue.setLinespacing(0);
 801297e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012982:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	f603 036c 	addw	r3, r3, #2156	; 0x86c
 801298c:	2100      	movs	r1, #0
 801298e:	4618      	mov	r0, r3
 8012990:	f7fe f9e6 	bl	8010d60 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID47).getText());
 8012994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012998:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	f603 3498 	addw	r4, r3, #2968	; 0xb98
 80129a2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80129a6:	211b      	movs	r1, #27
 80129a8:	4618      	mov	r0, r3
 80129aa:	f7fe f91d 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 80129ae:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80129b2:	4618      	mov	r0, r3
 80129b4:	f7fe f928 	bl	8010c08 <_ZNK8touchgfx9TypedText7getTextEv>
 80129b8:	4603      	mov	r3, r0
 80129ba:	4a8b      	ldr	r2, [pc, #556]	; (8012be8 <_ZN12MainViewBaseC1Ev+0x1930>)
 80129bc:	2105      	movs	r1, #5
 80129be:	4620      	mov	r0, r4
 80129c0:	f009 fc1e 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    RPMValue.setWildcard(RPMValueBuffer);
 80129c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80129c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	f603 026c 	addw	r2, r3, #2156	; 0x86c
 80129d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80129d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	f603 3398 	addw	r3, r3, #2968	; 0xb98
 80129e0:	4619      	mov	r1, r3
 80129e2:	4610      	mov	r0, r2
 80129e4:	f7fe fa44 	bl	8010e70 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    RPMValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID46));
 80129e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80129ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	f603 046c 	addw	r4, r3, #2156	; 0x86c
 80129f6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80129fa:	211a      	movs	r1, #26
 80129fc:	4618      	mov	r0, r3
 80129fe:	f7fe f8f3 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8012a02:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8012a06:	4620      	mov	r0, r4
 8012a08:	f006 f850 	bl	8018aac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltValue_1_1.setXY(61, 15);
 8012a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 8012a1a:	220f      	movs	r2, #15
 8012a1c:	213d      	movs	r1, #61	; 0x3d
 8012a1e:	4618      	mov	r0, r3
 8012a20:	f7fd fec7 	bl	80107b2 <_ZN8touchgfx8Drawable5setXYEss>
    CltValue_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012a24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	f603 04a4 	addw	r4, r3, #2212	; 0x8a4
 8012a32:	22ff      	movs	r2, #255	; 0xff
 8012a34:	21ff      	movs	r1, #255	; 0xff
 8012a36:	20ff      	movs	r0, #255	; 0xff
 8012a38:	f7fe fc16 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012a3c:	4603      	mov	r3, r0
 8012a3e:	4619      	mov	r1, r3
 8012a40:	4620      	mov	r0, r4
 8012a42:	f7fe f93a 	bl	8010cba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltValue_1_1.setLinespacing(0);
 8012a46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 8012a54:	2100      	movs	r1, #0
 8012a56:	4618      	mov	r0, r3
 8012a58:	f7fe f982 	bl	8010d60 <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltValue_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID50));
 8012a5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	f603 04a4 	addw	r4, r3, #2212	; 0x8a4
 8012a6a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8012a6e:	211c      	movs	r1, #28
 8012a70:	4618      	mov	r0, r3
 8012a72:	f7fe f8b9 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8012a76:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	; 0xb0
 8012a7a:	4620      	mov	r0, r4
 8012a7c:	f006 f816 	bl	8018aac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CLTValue.setPosition(195, 158, 96, 60);
 8012a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	f603 00d8 	addw	r0, r3, #2264	; 0x8d8
 8012a8e:	233c      	movs	r3, #60	; 0x3c
 8012a90:	9300      	str	r3, [sp, #0]
 8012a92:	2360      	movs	r3, #96	; 0x60
 8012a94:	229e      	movs	r2, #158	; 0x9e
 8012a96:	21c3      	movs	r1, #195	; 0xc3
 8012a98:	f7fd fe40 	bl	801071c <_ZN8touchgfx8Drawable11setPositionEssss>
    CLTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012a9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012aa0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	f603 04d8 	addw	r4, r3, #2264	; 0x8d8
 8012aaa:	22ff      	movs	r2, #255	; 0xff
 8012aac:	21ff      	movs	r1, #255	; 0xff
 8012aae:	20ff      	movs	r0, #255	; 0xff
 8012ab0:	f7fe fbda 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012ab4:	4603      	mov	r3, r0
 8012ab6:	4619      	mov	r1, r3
 8012ab8:	4620      	mov	r0, r4
 8012aba:	f7fe f8fe 	bl	8010cba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CLTValue.setLinespacing(0);
 8012abe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ac2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	f603 03d8 	addw	r3, r3, #2264	; 0x8d8
 8012acc:	2100      	movs	r1, #0
 8012ace:	4618      	mov	r0, r3
 8012ad0:	f7fe f946 	bl	8010d60 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID56).getText());
 8012ad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ad8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	f603 34a2 	addw	r4, r3, #2978	; 0xba2
 8012ae2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8012ae6:	211e      	movs	r1, #30
 8012ae8:	4618      	mov	r0, r3
 8012aea:	f7fe f87d 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8012aee:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8012af2:	4618      	mov	r0, r3
 8012af4:	f7fe f888 	bl	8010c08 <_ZNK8touchgfx9TypedText7getTextEv>
 8012af8:	4603      	mov	r3, r0
 8012afa:	4a3b      	ldr	r2, [pc, #236]	; (8012be8 <_ZN12MainViewBaseC1Ev+0x1930>)
 8012afc:	2105      	movs	r1, #5
 8012afe:	4620      	mov	r0, r4
 8012b00:	f009 fb7e 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    CLTValue.setWildcard(CLTValueBuffer);
 8012b04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	f603 02d8 	addw	r2, r3, #2264	; 0x8d8
 8012b12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	f603 33a2 	addw	r3, r3, #2978	; 0xba2
 8012b20:	4619      	mov	r1, r3
 8012b22:	4610      	mov	r0, r2
 8012b24:	f7fe f9a4 	bl	8010e70 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    CLTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID55));
 8012b28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	f603 04d8 	addw	r4, r3, #2264	; 0x8d8
 8012b36:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8012b3a:	211d      	movs	r1, #29
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	f7fe f853 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8012b42:	f8b7 10b8 	ldrh.w	r1, [r7, #184]	; 0xb8
 8012b46:	4620      	mov	r0, r4
 8012b48:	f005 ffb0 	bl	8018aac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    FuelPValue.setPosition(397, 157, 68, 42);
 8012b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	f503 6011 	add.w	r0, r3, #2320	; 0x910
 8012b5a:	232a      	movs	r3, #42	; 0x2a
 8012b5c:	9300      	str	r3, [sp, #0]
 8012b5e:	2344      	movs	r3, #68	; 0x44
 8012b60:	229d      	movs	r2, #157	; 0x9d
 8012b62:	f240 118d 	movw	r1, #397	; 0x18d
 8012b66:	f7fd fdd9 	bl	801071c <_ZN8touchgfx8Drawable11setPositionEssss>
    FuelPValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012b6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	f503 6411 	add.w	r4, r3, #2320	; 0x910
 8012b78:	22ff      	movs	r2, #255	; 0xff
 8012b7a:	21ff      	movs	r1, #255	; 0xff
 8012b7c:	20ff      	movs	r0, #255	; 0xff
 8012b7e:	f7fe fb73 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012b82:	4603      	mov	r3, r0
 8012b84:	4619      	mov	r1, r3
 8012b86:	4620      	mov	r0, r4
 8012b88:	f7fe f897 	bl	8010cba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    FuelPValue.setLinespacing(0);
 8012b8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8012b9a:	2100      	movs	r1, #0
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	f7fe f8df 	bl	8010d60 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(FuelPValueBuffer, FUELPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID72).getText());
 8012ba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ba6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	f603 34ac 	addw	r4, r3, #2988	; 0xbac
 8012bb0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8012bb4:	2129      	movs	r1, #41	; 0x29
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	f7fe f816 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8012bbc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	f7fe f821 	bl	8010c08 <_ZNK8touchgfx9TypedText7getTextEv>
 8012bc6:	4603      	mov	r3, r0
 8012bc8:	4a07      	ldr	r2, [pc, #28]	; (8012be8 <_ZN12MainViewBaseC1Ev+0x1930>)
 8012bca:	2105      	movs	r1, #5
 8012bcc:	4620      	mov	r0, r4
 8012bce:	f009 fb17 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    FuelPValue.setWildcard(FuelPValueBuffer);
 8012bd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012bd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	f503 6211 	add.w	r2, r3, #2320	; 0x910
 8012be0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012be4:	e002      	b.n	8012bec <_ZN12MainViewBaseC1Ev+0x1934>
 8012be6:	bf00      	nop
 8012be8:	08027814 	.word	0x08027814
 8012bec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	f603 33ac 	addw	r3, r3, #2988	; 0xbac
 8012bf6:	4619      	mov	r1, r3
 8012bf8:	4610      	mov	r0, r2
 8012bfa:	f7fe f939 	bl	8010e70 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    FuelPValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID71));
 8012bfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	f503 6411 	add.w	r4, r3, #2320	; 0x910
 8012c0c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8012c10:	2128      	movs	r1, #40	; 0x28
 8012c12:	4618      	mov	r0, r3
 8012c14:	f7fd ffe8 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8012c18:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	; 0xc0
 8012c1c:	4620      	mov	r0, r4
 8012c1e:	f005 ff45 	bl	8018aac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    FuelPDescriptor.setXY(397, 198);
 8012c22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8012c30:	22c6      	movs	r2, #198	; 0xc6
 8012c32:	f240 118d 	movw	r1, #397	; 0x18d
 8012c36:	4618      	mov	r0, r3
 8012c38:	f7fd fdbb 	bl	80107b2 <_ZN8touchgfx8Drawable5setXYEss>
    FuelPDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8012c3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	f603 1448 	addw	r4, r3, #2376	; 0x948
 8012c4a:	2200      	movs	r2, #0
 8012c4c:	21dc      	movs	r1, #220	; 0xdc
 8012c4e:	20ff      	movs	r0, #255	; 0xff
 8012c50:	f7fe fb0a 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012c54:	4603      	mov	r3, r0
 8012c56:	4619      	mov	r1, r3
 8012c58:	4620      	mov	r0, r4
 8012c5a:	f7fe f82e 	bl	8010cba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    FuelPDescriptor.setLinespacing(0);
 8012c5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8012c6c:	2100      	movs	r1, #0
 8012c6e:	4618      	mov	r0, r3
 8012c70:	f7fe f876 	bl	8010d60 <_ZN8touchgfx8TextArea14setLinespacingEs>
    FuelPDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID73));
 8012c74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	f603 1448 	addw	r4, r3, #2376	; 0x948
 8012c82:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8012c86:	212a      	movs	r1, #42	; 0x2a
 8012c88:	4618      	mov	r0, r3
 8012c8a:	f7fd ffad 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8012c8e:	f8b7 10c4 	ldrh.w	r1, [r7, #196]	; 0xc4
 8012c92:	4620      	mov	r0, r4
 8012c94:	f005 ff0a 	bl	8018aac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TpsNumberValue.setPosition(408, 226, 19, 17);
 8012c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	f603 107c 	addw	r0, r3, #2428	; 0x97c
 8012ca6:	2311      	movs	r3, #17
 8012ca8:	9300      	str	r3, [sp, #0]
 8012caa:	2313      	movs	r3, #19
 8012cac:	22e2      	movs	r2, #226	; 0xe2
 8012cae:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8012cb2:	f7fd fd33 	bl	801071c <_ZN8touchgfx8Drawable11setPositionEssss>
    TpsNumberValue.setColor(touchgfx::Color::getColorFrom24BitRGB(13, 13, 13));
 8012cb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012cba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	f603 147c 	addw	r4, r3, #2428	; 0x97c
 8012cc4:	220d      	movs	r2, #13
 8012cc6:	210d      	movs	r1, #13
 8012cc8:	200d      	movs	r0, #13
 8012cca:	f7fe facd 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012cce:	4603      	mov	r3, r0
 8012cd0:	4619      	mov	r1, r3
 8012cd2:	4620      	mov	r0, r4
 8012cd4:	f7fd fff1 	bl	8010cba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TpsNumberValue.setLinespacing(0);
 8012cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012cdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	f603 137c 	addw	r3, r3, #2428	; 0x97c
 8012ce6:	2100      	movs	r1, #0
 8012ce8:	4618      	mov	r0, r3
 8012cea:	f7fe f839 	bl	8010d60 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TpsNumberValueBuffer, TPSNUMBERVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID75).getText());
 8012cee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012cf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	f603 34b6 	addw	r4, r3, #2998	; 0xbb6
 8012cfc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8012d00:	212c      	movs	r1, #44	; 0x2c
 8012d02:	4618      	mov	r0, r3
 8012d04:	f7fd ff70 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8012d08:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	f7fd ff7b 	bl	8010c08 <_ZNK8touchgfx9TypedText7getTextEv>
 8012d12:	4603      	mov	r3, r0
 8012d14:	4ae9      	ldr	r2, [pc, #932]	; (80130bc <_ZN12MainViewBaseC1Ev+0x1e04>)
 8012d16:	2105      	movs	r1, #5
 8012d18:	4620      	mov	r0, r4
 8012d1a:	f009 fa71 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TpsNumberValue.setWildcard(TpsNumberValueBuffer);
 8012d1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012d22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	f603 127c 	addw	r2, r3, #2428	; 0x97c
 8012d2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012d30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	f603 33b6 	addw	r3, r3, #2998	; 0xbb6
 8012d3a:	4619      	mov	r1, r3
 8012d3c:	4610      	mov	r0, r2
 8012d3e:	f7fe f897 	bl	8010e70 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TpsNumberValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID74));
 8012d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012d46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	f603 147c 	addw	r4, r3, #2428	; 0x97c
 8012d50:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8012d54:	212b      	movs	r1, #43	; 0x2b
 8012d56:	4618      	mov	r0, r3
 8012d58:	f7fd ff46 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8012d5c:	f8b7 10cc 	ldrh.w	r1, [r7, #204]	; 0xcc
 8012d60:	4620      	mov	r0, r4
 8012d62:	f005 fea3 	bl	8018aac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MinFuelPValue.setPosition(430, 198, 43, 19);
 8012d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012d6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	f603 10b4 	addw	r0, r3, #2484	; 0x9b4
 8012d74:	2313      	movs	r3, #19
 8012d76:	9300      	str	r3, [sp, #0]
 8012d78:	232b      	movs	r3, #43	; 0x2b
 8012d7a:	22c6      	movs	r2, #198	; 0xc6
 8012d7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012d80:	f7fd fccc 	bl	801071c <_ZN8touchgfx8Drawable11setPositionEssss>
    MinFuelPValue.setColor(touchgfx::Color::getColorFrom24BitRGB(185, 184, 184));
 8012d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012d88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	f603 14b4 	addw	r4, r3, #2484	; 0x9b4
 8012d92:	22b8      	movs	r2, #184	; 0xb8
 8012d94:	21b8      	movs	r1, #184	; 0xb8
 8012d96:	20b9      	movs	r0, #185	; 0xb9
 8012d98:	f7fe fa66 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012d9c:	4603      	mov	r3, r0
 8012d9e:	4619      	mov	r1, r3
 8012da0:	4620      	mov	r0, r4
 8012da2:	f7fd ff8a 	bl	8010cba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MinFuelPValue.setLinespacing(0);
 8012da6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012daa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	f603 13b4 	addw	r3, r3, #2484	; 0x9b4
 8012db4:	2100      	movs	r1, #0
 8012db6:	4618      	mov	r0, r3
 8012db8:	f7fd ffd2 	bl	8010d60 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MinFuelPValueBuffer, MINFUELPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID77).getText());
 8012dbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012dc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	f503 643c 	add.w	r4, r3, #3008	; 0xbc0
 8012dca:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8012dce:	212e      	movs	r1, #46	; 0x2e
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	f7fd ff09 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8012dd6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8012dda:	4618      	mov	r0, r3
 8012ddc:	f7fd ff14 	bl	8010c08 <_ZNK8touchgfx9TypedText7getTextEv>
 8012de0:	4603      	mov	r3, r0
 8012de2:	4ab6      	ldr	r2, [pc, #728]	; (80130bc <_ZN12MainViewBaseC1Ev+0x1e04>)
 8012de4:	2105      	movs	r1, #5
 8012de6:	4620      	mov	r0, r4
 8012de8:	f009 fa0a 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MinFuelPValue.setWildcard(MinFuelPValueBuffer);
 8012dec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012df0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	f603 12b4 	addw	r2, r3, #2484	; 0x9b4
 8012dfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012dfe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	f503 633c 	add.w	r3, r3, #3008	; 0xbc0
 8012e08:	4619      	mov	r1, r3
 8012e0a:	4610      	mov	r0, r2
 8012e0c:	f7fe f830 	bl	8010e70 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MinFuelPValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID76));
 8012e10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	f603 14b4 	addw	r4, r3, #2484	; 0x9b4
 8012e1e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8012e22:	212d      	movs	r1, #45	; 0x2d
 8012e24:	4618      	mov	r0, r3
 8012e26:	f7fd fedf 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8012e2a:	f8b7 10d4 	ldrh.w	r1, [r7, #212]	; 0xd4
 8012e2e:	4620      	mov	r0, r4
 8012e30:	f005 fe3c 	bl	8018aac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MinOilPValue.setPosition(430, 126, 43, 20);
 8012e34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	f603 10ec 	addw	r0, r3, #2540	; 0x9ec
 8012e42:	2314      	movs	r3, #20
 8012e44:	9300      	str	r3, [sp, #0]
 8012e46:	232b      	movs	r3, #43	; 0x2b
 8012e48:	227e      	movs	r2, #126	; 0x7e
 8012e4a:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012e4e:	f7fd fc65 	bl	801071c <_ZN8touchgfx8Drawable11setPositionEssss>
    MinOilPValue.setColor(touchgfx::Color::getColorFrom24BitRGB(185, 184, 184));
 8012e52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	f603 14ec 	addw	r4, r3, #2540	; 0x9ec
 8012e60:	22b8      	movs	r2, #184	; 0xb8
 8012e62:	21b8      	movs	r1, #184	; 0xb8
 8012e64:	20b9      	movs	r0, #185	; 0xb9
 8012e66:	f7fe f9ff 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012e6a:	4603      	mov	r3, r0
 8012e6c:	4619      	mov	r1, r3
 8012e6e:	4620      	mov	r0, r4
 8012e70:	f7fd ff23 	bl	8010cba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MinOilPValue.setLinespacing(0);
 8012e74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	f603 13ec 	addw	r3, r3, #2540	; 0x9ec
 8012e82:	2100      	movs	r1, #0
 8012e84:	4618      	mov	r0, r3
 8012e86:	f7fd ff6b 	bl	8010d60 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MinOilPValueBuffer, MINOILPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID79).getText());
 8012e8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	f603 34ca 	addw	r4, r3, #3018	; 0xbca
 8012e98:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8012e9c:	2130      	movs	r1, #48	; 0x30
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	f7fd fea2 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8012ea4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	f7fd fead 	bl	8010c08 <_ZNK8touchgfx9TypedText7getTextEv>
 8012eae:	4603      	mov	r3, r0
 8012eb0:	4a82      	ldr	r2, [pc, #520]	; (80130bc <_ZN12MainViewBaseC1Ev+0x1e04>)
 8012eb2:	2105      	movs	r1, #5
 8012eb4:	4620      	mov	r0, r4
 8012eb6:	f009 f9a3 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MinOilPValue.setWildcard(MinOilPValueBuffer);
 8012eba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ebe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	f603 12ec 	addw	r2, r3, #2540	; 0x9ec
 8012ec8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ecc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	f603 33ca 	addw	r3, r3, #3018	; 0xbca
 8012ed6:	4619      	mov	r1, r3
 8012ed8:	4610      	mov	r0, r2
 8012eda:	f7fd ffc9 	bl	8010e70 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MinOilPValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID78));
 8012ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ee2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	f603 14ec 	addw	r4, r3, #2540	; 0x9ec
 8012eec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8012ef0:	212f      	movs	r1, #47	; 0x2f
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	f7fd fe78 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8012ef8:	f8b7 10dc 	ldrh.w	r1, [r7, #220]	; 0xdc
 8012efc:	4620      	mov	r0, r4
 8012efe:	f005 fdd5 	bl	8018aac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MaxOilTValue.setPosition(353, 126, 43, 20);
 8012f02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	f603 2024 	addw	r0, r3, #2596	; 0xa24
 8012f10:	2314      	movs	r3, #20
 8012f12:	9300      	str	r3, [sp, #0]
 8012f14:	232b      	movs	r3, #43	; 0x2b
 8012f16:	227e      	movs	r2, #126	; 0x7e
 8012f18:	f240 1161 	movw	r1, #353	; 0x161
 8012f1c:	f7fd fbfe 	bl	801071c <_ZN8touchgfx8Drawable11setPositionEssss>
    MaxOilTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(185, 184, 184));
 8012f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	f603 2424 	addw	r4, r3, #2596	; 0xa24
 8012f2e:	22b8      	movs	r2, #184	; 0xb8
 8012f30:	21b8      	movs	r1, #184	; 0xb8
 8012f32:	20b9      	movs	r0, #185	; 0xb9
 8012f34:	f7fe f998 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012f38:	4603      	mov	r3, r0
 8012f3a:	4619      	mov	r1, r3
 8012f3c:	4620      	mov	r0, r4
 8012f3e:	f7fd febc 	bl	8010cba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MaxOilTValue.setLinespacing(0);
 8012f42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	f603 2324 	addw	r3, r3, #2596	; 0xa24
 8012f50:	2100      	movs	r1, #0
 8012f52:	4618      	mov	r0, r3
 8012f54:	f7fd ff04 	bl	8010d60 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MaxOilTValueBuffer, MAXOILTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID81).getText());
 8012f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	f603 34d4 	addw	r4, r3, #3028	; 0xbd4
 8012f66:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8012f6a:	2132      	movs	r1, #50	; 0x32
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	f7fd fe3b 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8012f72:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8012f76:	4618      	mov	r0, r3
 8012f78:	f7fd fe46 	bl	8010c08 <_ZNK8touchgfx9TypedText7getTextEv>
 8012f7c:	4603      	mov	r3, r0
 8012f7e:	4a4f      	ldr	r2, [pc, #316]	; (80130bc <_ZN12MainViewBaseC1Ev+0x1e04>)
 8012f80:	2105      	movs	r1, #5
 8012f82:	4620      	mov	r0, r4
 8012f84:	f009 f93c 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MaxOilTValue.setWildcard(MaxOilTValueBuffer);
 8012f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	f603 2224 	addw	r2, r3, #2596	; 0xa24
 8012f96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	f603 33d4 	addw	r3, r3, #3028	; 0xbd4
 8012fa4:	4619      	mov	r1, r3
 8012fa6:	4610      	mov	r0, r2
 8012fa8:	f7fd ff62 	bl	8010e70 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MaxOilTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID80));
 8012fac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012fb0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	f603 2424 	addw	r4, r3, #2596	; 0xa24
 8012fba:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8012fbe:	2131      	movs	r1, #49	; 0x31
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	f7fd fe11 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8012fc6:	f8b7 10e4 	ldrh.w	r1, [r7, #228]	; 0xe4
 8012fca:	4620      	mov	r0, r4
 8012fcc:	f005 fd6e 	bl	8018aac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MaxCltValue.setPosition(233, 220, 43, 20);
 8012fd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012fd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	f603 205c 	addw	r0, r3, #2652	; 0xa5c
 8012fde:	2314      	movs	r3, #20
 8012fe0:	9300      	str	r3, [sp, #0]
 8012fe2:	232b      	movs	r3, #43	; 0x2b
 8012fe4:	22dc      	movs	r2, #220	; 0xdc
 8012fe6:	21e9      	movs	r1, #233	; 0xe9
 8012fe8:	f7fd fb98 	bl	801071c <_ZN8touchgfx8Drawable11setPositionEssss>
    MaxCltValue.setColor(touchgfx::Color::getColorFrom24BitRGB(185, 184, 184));
 8012fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ff0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	f603 245c 	addw	r4, r3, #2652	; 0xa5c
 8012ffa:	22b8      	movs	r2, #184	; 0xb8
 8012ffc:	21b8      	movs	r1, #184	; 0xb8
 8012ffe:	20b9      	movs	r0, #185	; 0xb9
 8013000:	f7fe f932 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013004:	4603      	mov	r3, r0
 8013006:	4619      	mov	r1, r3
 8013008:	4620      	mov	r0, r4
 801300a:	f7fd fe56 	bl	8010cba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MaxCltValue.setLinespacing(0);
 801300e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013012:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 801301c:	2100      	movs	r1, #0
 801301e:	4618      	mov	r0, r3
 8013020:	f7fd fe9e 	bl	8010d60 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MaxCltValueBuffer, MAXCLTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID83).getText());
 8013024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013028:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	f603 34de 	addw	r4, r3, #3038	; 0xbde
 8013032:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8013036:	2134      	movs	r1, #52	; 0x34
 8013038:	4618      	mov	r0, r3
 801303a:	f7fd fdd5 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 801303e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8013042:	4618      	mov	r0, r3
 8013044:	f7fd fde0 	bl	8010c08 <_ZNK8touchgfx9TypedText7getTextEv>
 8013048:	4603      	mov	r3, r0
 801304a:	4a1c      	ldr	r2, [pc, #112]	; (80130bc <_ZN12MainViewBaseC1Ev+0x1e04>)
 801304c:	2105      	movs	r1, #5
 801304e:	4620      	mov	r0, r4
 8013050:	f009 f8d6 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MaxCltValue.setWildcard(MaxCltValueBuffer);
 8013054:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013058:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	f603 225c 	addw	r2, r3, #2652	; 0xa5c
 8013062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013066:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	f603 33de 	addw	r3, r3, #3038	; 0xbde
 8013070:	4619      	mov	r1, r3
 8013072:	4610      	mov	r0, r2
 8013074:	f7fd fefc 	bl	8010e70 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MaxCltValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID82));
 8013078:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801307c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	f603 245c 	addw	r4, r3, #2652	; 0xa5c
 8013086:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801308a:	2133      	movs	r1, #51	; 0x33
 801308c:	4618      	mov	r0, r3
 801308e:	f7fd fdab 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8013092:	f8b7 10ec 	ldrh.w	r1, [r7, #236]	; 0xec
 8013096:	4620      	mov	r0, r4
 8013098:	f005 fd08 	bl	8018aac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MaxRPMValue.setPosition(82, 15, 36, 13);
 801309c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80130a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	f603 2094 	addw	r0, r3, #2708	; 0xa94
 80130aa:	230d      	movs	r3, #13
 80130ac:	9300      	str	r3, [sp, #0]
 80130ae:	2324      	movs	r3, #36	; 0x24
 80130b0:	220f      	movs	r2, #15
 80130b2:	2152      	movs	r1, #82	; 0x52
 80130b4:	f7fd fb32 	bl	801071c <_ZN8touchgfx8Drawable11setPositionEssss>
 80130b8:	e002      	b.n	80130c0 <_ZN12MainViewBaseC1Ev+0x1e08>
 80130ba:	bf00      	nop
 80130bc:	08027814 	.word	0x08027814
    MaxRPMValue.setColor(touchgfx::Color::getColorFrom24BitRGB(153, 153, 153));
 80130c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80130c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	f603 2494 	addw	r4, r3, #2708	; 0xa94
 80130ce:	2299      	movs	r2, #153	; 0x99
 80130d0:	2199      	movs	r1, #153	; 0x99
 80130d2:	2099      	movs	r0, #153	; 0x99
 80130d4:	f7fe f8c8 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80130d8:	4603      	mov	r3, r0
 80130da:	4619      	mov	r1, r3
 80130dc:	4620      	mov	r0, r4
 80130de:	f7fd fdec 	bl	8010cba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MaxRPMValue.setLinespacing(0);
 80130e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80130e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	f603 2394 	addw	r3, r3, #2708	; 0xa94
 80130f0:	2100      	movs	r1, #0
 80130f2:	4618      	mov	r0, r3
 80130f4:	f7fd fe34 	bl	8010d60 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MaxRPMValueBuffer, MAXRPMVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID85).getText());
 80130f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80130fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	f603 34e8 	addw	r4, r3, #3048	; 0xbe8
 8013106:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801310a:	2136      	movs	r1, #54	; 0x36
 801310c:	4618      	mov	r0, r3
 801310e:	f7fd fd6b 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8013112:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8013116:	4618      	mov	r0, r3
 8013118:	f7fd fd76 	bl	8010c08 <_ZNK8touchgfx9TypedText7getTextEv>
 801311c:	4603      	mov	r3, r0
 801311e:	4ae5      	ldr	r2, [pc, #916]	; (80134b4 <_ZN12MainViewBaseC1Ev+0x21fc>)
 8013120:	2105      	movs	r1, #5
 8013122:	4620      	mov	r0, r4
 8013124:	f009 f86c 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MaxRPMValue.setWildcard(MaxRPMValueBuffer);
 8013128:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801312c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	f603 2294 	addw	r2, r3, #2708	; 0xa94
 8013136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801313a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	f603 33e8 	addw	r3, r3, #3048	; 0xbe8
 8013144:	4619      	mov	r1, r3
 8013146:	4610      	mov	r0, r2
 8013148:	f7fd fe92 	bl	8010e70 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MaxRPMValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID84));
 801314c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013150:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	f603 2494 	addw	r4, r3, #2708	; 0xa94
 801315a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801315e:	2135      	movs	r1, #53	; 0x35
 8013160:	4618      	mov	r0, r3
 8013162:	f7fd fd41 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8013166:	f8b7 10f4 	ldrh.w	r1, [r7, #244]	; 0xf4
 801316a:	4620      	mov	r0, r4
 801316c:	f005 fc9e 	bl	8018aac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MaxLambdaValue.setPosition(243, 139, 43, 20);
 8013170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013174:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	f603 20cc 	addw	r0, r3, #2764	; 0xacc
 801317e:	2314      	movs	r3, #20
 8013180:	9300      	str	r3, [sp, #0]
 8013182:	232b      	movs	r3, #43	; 0x2b
 8013184:	228b      	movs	r2, #139	; 0x8b
 8013186:	21f3      	movs	r1, #243	; 0xf3
 8013188:	f7fd fac8 	bl	801071c <_ZN8touchgfx8Drawable11setPositionEssss>
    MaxLambdaValue.setColor(touchgfx::Color::getColorFrom24BitRGB(185, 184, 184));
 801318c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013190:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	f603 24cc 	addw	r4, r3, #2764	; 0xacc
 801319a:	22b8      	movs	r2, #184	; 0xb8
 801319c:	21b8      	movs	r1, #184	; 0xb8
 801319e:	20b9      	movs	r0, #185	; 0xb9
 80131a0:	f7fe f862 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80131a4:	4603      	mov	r3, r0
 80131a6:	4619      	mov	r1, r3
 80131a8:	4620      	mov	r0, r4
 80131aa:	f7fd fd86 	bl	8010cba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MaxLambdaValue.setLinespacing(0);
 80131ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80131b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	f603 23cc 	addw	r3, r3, #2764	; 0xacc
 80131bc:	2100      	movs	r1, #0
 80131be:	4618      	mov	r0, r3
 80131c0:	f7fd fdce 	bl	8010d60 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MaxLambdaValueBuffer, MAXLAMBDAVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID87).getText());
 80131c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80131c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	f603 34f2 	addw	r4, r3, #3058	; 0xbf2
 80131d2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80131d6:	2138      	movs	r1, #56	; 0x38
 80131d8:	4618      	mov	r0, r3
 80131da:	f7fd fd05 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 80131de:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80131e2:	4618      	mov	r0, r3
 80131e4:	f7fd fd10 	bl	8010c08 <_ZNK8touchgfx9TypedText7getTextEv>
 80131e8:	4603      	mov	r3, r0
 80131ea:	4ab2      	ldr	r2, [pc, #712]	; (80134b4 <_ZN12MainViewBaseC1Ev+0x21fc>)
 80131ec:	2105      	movs	r1, #5
 80131ee:	4620      	mov	r0, r4
 80131f0:	f009 f806 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MaxLambdaValue.setWildcard(MaxLambdaValueBuffer);
 80131f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80131f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	f603 22cc 	addw	r2, r3, #2764	; 0xacc
 8013202:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013206:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	f603 33f2 	addw	r3, r3, #3058	; 0xbf2
 8013210:	4619      	mov	r1, r3
 8013212:	4610      	mov	r0, r2
 8013214:	f7fd fe2c 	bl	8010e70 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MaxLambdaValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID86));
 8013218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801321c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	f603 24cc 	addw	r4, r3, #2764	; 0xacc
 8013226:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 801322a:	2137      	movs	r1, #55	; 0x37
 801322c:	4618      	mov	r0, r3
 801322e:	f7fd fcdb 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 8013232:	f8b7 10fc 	ldrh.w	r1, [r7, #252]	; 0xfc
 8013236:	4620      	mov	r0, r4
 8013238:	f005 fc38 	bl	8018aac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MaxSpeedValue.setPosition(61, 127, 43, 20);
 801323c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013240:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	f603 3004 	addw	r0, r3, #2820	; 0xb04
 801324a:	2314      	movs	r3, #20
 801324c:	9300      	str	r3, [sp, #0]
 801324e:	232b      	movs	r3, #43	; 0x2b
 8013250:	227f      	movs	r2, #127	; 0x7f
 8013252:	213d      	movs	r1, #61	; 0x3d
 8013254:	f7fd fa62 	bl	801071c <_ZN8touchgfx8Drawable11setPositionEssss>
    MaxSpeedValue.setColor(touchgfx::Color::getColorFrom24BitRGB(185, 184, 184));
 8013258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801325c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	f603 3404 	addw	r4, r3, #2820	; 0xb04
 8013266:	22b8      	movs	r2, #184	; 0xb8
 8013268:	21b8      	movs	r1, #184	; 0xb8
 801326a:	20b9      	movs	r0, #185	; 0xb9
 801326c:	f7fd fffc 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013270:	4603      	mov	r3, r0
 8013272:	4619      	mov	r1, r3
 8013274:	4620      	mov	r0, r4
 8013276:	f7fd fd20 	bl	8010cba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MaxSpeedValue.setLinespacing(0);
 801327a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801327e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	f603 3304 	addw	r3, r3, #2820	; 0xb04
 8013288:	2100      	movs	r1, #0
 801328a:	4618      	mov	r0, r3
 801328c:	f7fd fd68 	bl	8010d60 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MaxSpeedValueBuffer, MAXSPEEDVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID89).getText());
 8013290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013294:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	f603 34fc 	addw	r4, r3, #3068	; 0xbfc
 801329e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80132a2:	213a      	movs	r1, #58	; 0x3a
 80132a4:	4618      	mov	r0, r3
 80132a6:	f7fd fc9f 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 80132aa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80132ae:	4618      	mov	r0, r3
 80132b0:	f7fd fcaa 	bl	8010c08 <_ZNK8touchgfx9TypedText7getTextEv>
 80132b4:	4603      	mov	r3, r0
 80132b6:	4a7f      	ldr	r2, [pc, #508]	; (80134b4 <_ZN12MainViewBaseC1Ev+0x21fc>)
 80132b8:	2105      	movs	r1, #5
 80132ba:	4620      	mov	r0, r4
 80132bc:	f008 ffa0 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MaxSpeedValue.setWildcard(MaxSpeedValueBuffer);
 80132c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80132c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	f603 3204 	addw	r2, r3, #2820	; 0xb04
 80132ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80132d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	f603 33fc 	addw	r3, r3, #3068	; 0xbfc
 80132dc:	4619      	mov	r1, r3
 80132de:	4610      	mov	r0, r2
 80132e0:	f7fd fdc6 	bl	8010e70 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MaxSpeedValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID88));
 80132e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80132e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	f603 3404 	addw	r4, r3, #2820	; 0xb04
 80132f2:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80132f6:	2139      	movs	r1, #57	; 0x39
 80132f8:	4618      	mov	r0, r3
 80132fa:	f7fd fc75 	bl	8010be8 <_ZN8touchgfx9TypedTextC1Et>
 80132fe:	f8b7 1104 	ldrh.w	r1, [r7, #260]	; 0x104
 8013302:	4620      	mov	r0, r4
 8013304:	f005 fbd2 	bl	8018aac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    add(backgroundBox);
 8013308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801330c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013310:	681a      	ldr	r2, [r3, #0]
 8013312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013316:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	3340      	adds	r3, #64	; 0x40
 801331e:	4619      	mov	r1, r3
 8013320:	4610      	mov	r0, r2
 8013322:	f7fd fba9 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltDecsriptor);
 8013326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801332a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801332e:	681a      	ldr	r2, [r3, #0]
 8013330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013334:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	3370      	adds	r3, #112	; 0x70
 801333c:	4619      	mov	r1, r3
 801333e:	4610      	mov	r0, r2
 8013340:	f7fd fb9a 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaDescriptor);
 8013344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013348:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801334c:	681a      	ldr	r2, [r3, #0]
 801334e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013352:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	33a4      	adds	r3, #164	; 0xa4
 801335a:	4619      	mov	r1, r3
 801335c:	4610      	mov	r0, r2
 801335e:	f7fd fb8b 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtDescriptor);
 8013362:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013366:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801336a:	681a      	ldr	r2, [r3, #0]
 801336c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013370:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	33d8      	adds	r3, #216	; 0xd8
 8013378:	4619      	mov	r1, r3
 801337a:	4610      	mov	r0, r2
 801337c:	f7fd fb7c 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaValue);
 8013380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013384:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013388:	681a      	ldr	r2, [r3, #0]
 801338a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801338e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8013398:	4619      	mov	r1, r3
 801339a:	4610      	mov	r0, r2
 801339c:	f7fd fb6c 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(SpeedValue);
 80133a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80133a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80133a8:	681a      	ldr	r2, [r3, #0]
 80133aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80133ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80133b8:	4619      	mov	r1, r3
 80133ba:	4610      	mov	r0, r2
 80133bc:	f7fd fb5c 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(backgroundImage);
 80133c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80133c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80133c8:	681a      	ldr	r2, [r3, #0]
 80133ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80133ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80133d8:	4619      	mov	r1, r3
 80133da:	4610      	mov	r0, r2
 80133dc:	f7fd fb4c 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm1);
 80133e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80133e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80133e8:	681a      	ldr	r2, [r3, #0]
 80133ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80133ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80133f8:	4619      	mov	r1, r3
 80133fa:	4610      	mov	r0, r2
 80133fc:	f7fd fb3c 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm2);
 8013400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013404:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013408:	681a      	ldr	r2, [r3, #0]
 801340a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801340e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8013418:	4619      	mov	r1, r3
 801341a:	4610      	mov	r0, r2
 801341c:	f7fd fb2c 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm3);
 8013420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013424:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013428:	681a      	ldr	r2, [r3, #0]
 801342a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801342e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8013438:	4619      	mov	r1, r3
 801343a:	4610      	mov	r0, r2
 801343c:	f7fd fb1c 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm4);
 8013440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013444:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013448:	681a      	ldr	r2, [r3, #0]
 801344a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801344e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8013458:	4619      	mov	r1, r3
 801345a:	4610      	mov	r0, r2
 801345c:	f7fd fb0c 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm5);
 8013460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013464:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013468:	681a      	ldr	r2, [r3, #0]
 801346a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801346e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8013478:	4619      	mov	r1, r3
 801347a:	4610      	mov	r0, r2
 801347c:	f7fd fafc 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm6);
 8013480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013484:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013488:	681a      	ldr	r2, [r3, #0]
 801348a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801348e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8013498:	4619      	mov	r1, r3
 801349a:	4610      	mov	r0, r2
 801349c:	f7fd faec 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm7);
 80134a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80134a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80134a8:	681a      	ldr	r2, [r3, #0]
 80134aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80134ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80134b2:	e001      	b.n	80134b8 <_ZN12MainViewBaseC1Ev+0x2200>
 80134b4:	08027814 	.word	0x08027814
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 80134be:	4619      	mov	r1, r3
 80134c0:	4610      	mov	r0, r2
 80134c2:	f7fd fad9 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm8);
 80134c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80134ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80134ce:	681a      	ldr	r2, [r3, #0]
 80134d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80134d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	f503 734c 	add.w	r3, r3, #816	; 0x330
 80134de:	4619      	mov	r1, r3
 80134e0:	4610      	mov	r0, r2
 80134e2:	f7fd fac9 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line11);
 80134e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80134ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80134ee:	681a      	ldr	r2, [r3, #0]
 80134f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80134f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	f503 735a 	add.w	r3, r3, #872	; 0x368
 80134fe:	4619      	mov	r1, r3
 8013500:	4610      	mov	r0, r2
 8013502:	f7fd fab9 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor);
 8013506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801350a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801350e:	681a      	ldr	r2, [r3, #0]
 8013510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013514:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 801351e:	4619      	mov	r1, r3
 8013520:	4610      	mov	r0, r2
 8013522:	f7fd faa9 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATValue);
 8013526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801352a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801352e:	681a      	ldr	r2, [r3, #0]
 8013530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013534:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 801353e:	4619      	mov	r1, r3
 8013540:	4610      	mov	r0, r2
 8013542:	f7fd fa99 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1);
 8013546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801354a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801354e:	681a      	ldr	r2, [r3, #0]
 8013550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013554:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 801355e:	4619      	mov	r1, r3
 8013560:	4610      	mov	r0, r2
 8013562:	f7fd fa89 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ECTDescriptor_1);
 8013566:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801356a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801356e:	681a      	ldr	r2, [r3, #0]
 8013570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013574:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	f203 4394 	addw	r3, r3, #1172	; 0x494
 801357e:	4619      	mov	r1, r3
 8013580:	4610      	mov	r0, r2
 8013582:	f7fd fa79 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILTempValue);
 8013586:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801358a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801358e:	681a      	ldr	r2, [r3, #0]
 8013590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013594:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 801359e:	4619      	mov	r1, r3
 80135a0:	4610      	mov	r0, r2
 80135a2:	f7fd fa69 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILPressureValue);
 80135a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80135aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80135ae:	681a      	ldr	r2, [r3, #0]
 80135b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80135b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80135be:	4619      	mov	r1, r3
 80135c0:	4610      	mov	r0, r2
 80135c2:	f7fd fa59 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1_1);
 80135c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80135ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80135ce:	681a      	ldr	r2, [r3, #0]
 80135d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80135d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 80135de:	4619      	mov	r1, r3
 80135e0:	4610      	mov	r0, r2
 80135e2:	f7fd fa49 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TPSProgress);
 80135e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80135ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80135ee:	681a      	ldr	r2, [r3, #0]
 80135f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80135f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 80135fe:	4619      	mov	r1, r3
 8013600:	4610      	mov	r0, r2
 8013602:	f7fd fa39 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10);
 8013606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801360a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801360e:	681a      	ldr	r2, [r3, #0]
 8013610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013614:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 801361e:	4619      	mov	r1, r3
 8013620:	4610      	mov	r0, r2
 8013622:	f7fd fa29 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10_1);
 8013626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801362a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801362e:	681a      	ldr	r2, [r3, #0]
 8013630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013634:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 801363e:	4619      	mov	r1, r3
 8013640:	4610      	mov	r0, r2
 8013642:	f7fd fa19 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BatteryVoltage);
 8013646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801364a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801364e:	681a      	ldr	r2, [r3, #0]
 8013650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013654:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	f203 7344 	addw	r3, r3, #1860	; 0x744
 801365e:	4619      	mov	r1, r3
 8013660:	4610      	mov	r0, r2
 8013662:	f7fd fa09 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMProgressBar);
 8013666:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801366a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801366e:	681a      	ldr	r2, [r3, #0]
 8013670:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013674:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 801367e:	4619      	mov	r1, r3
 8013680:	4610      	mov	r0, r2
 8013682:	f7fd f9f9 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMValue);
 8013686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801368a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801368e:	681a      	ldr	r2, [r3, #0]
 8013690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013694:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	f603 036c 	addw	r3, r3, #2156	; 0x86c
 801369e:	4619      	mov	r1, r3
 80136a0:	4610      	mov	r0, r2
 80136a2:	f7fd f9e9 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltValue_1_1);
 80136a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80136aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80136ae:	681a      	ldr	r2, [r3, #0]
 80136b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80136b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 80136be:	4619      	mov	r1, r3
 80136c0:	4610      	mov	r0, r2
 80136c2:	f7fd f9d9 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CLTValue);
 80136c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80136ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80136ce:	681a      	ldr	r2, [r3, #0]
 80136d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80136d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	f603 03d8 	addw	r3, r3, #2264	; 0x8d8
 80136de:	4619      	mov	r1, r3
 80136e0:	4610      	mov	r0, r2
 80136e2:	f7fd f9c9 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(FuelPValue);
 80136e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80136ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80136ee:	681a      	ldr	r2, [r3, #0]
 80136f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80136f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 80136fe:	4619      	mov	r1, r3
 8013700:	4610      	mov	r0, r2
 8013702:	f7fd f9b9 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(FuelPDescriptor);
 8013706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801370a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801370e:	681a      	ldr	r2, [r3, #0]
 8013710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013714:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	f603 1348 	addw	r3, r3, #2376	; 0x948
 801371e:	4619      	mov	r1, r3
 8013720:	4610      	mov	r0, r2
 8013722:	f7fd f9a9 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TpsNumberValue);
 8013726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801372a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801372e:	681a      	ldr	r2, [r3, #0]
 8013730:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013734:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	f603 137c 	addw	r3, r3, #2428	; 0x97c
 801373e:	4619      	mov	r1, r3
 8013740:	4610      	mov	r0, r2
 8013742:	f7fd f999 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MinFuelPValue);
 8013746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801374a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801374e:	681a      	ldr	r2, [r3, #0]
 8013750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013754:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	f603 13b4 	addw	r3, r3, #2484	; 0x9b4
 801375e:	4619      	mov	r1, r3
 8013760:	4610      	mov	r0, r2
 8013762:	f7fd f989 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MinOilPValue);
 8013766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801376a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801376e:	681a      	ldr	r2, [r3, #0]
 8013770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013774:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	f603 13ec 	addw	r3, r3, #2540	; 0x9ec
 801377e:	4619      	mov	r1, r3
 8013780:	4610      	mov	r0, r2
 8013782:	f7fd f979 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MaxOilTValue);
 8013786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801378a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801378e:	681a      	ldr	r2, [r3, #0]
 8013790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013794:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	f603 2324 	addw	r3, r3, #2596	; 0xa24
 801379e:	4619      	mov	r1, r3
 80137a0:	4610      	mov	r0, r2
 80137a2:	f7fd f969 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MaxCltValue);
 80137a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80137aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80137ae:	681a      	ldr	r2, [r3, #0]
 80137b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80137b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 80137be:	4619      	mov	r1, r3
 80137c0:	4610      	mov	r0, r2
 80137c2:	f7fd f959 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MaxRPMValue);
 80137c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80137ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80137ce:	681a      	ldr	r2, [r3, #0]
 80137d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80137d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	f603 2394 	addw	r3, r3, #2708	; 0xa94
 80137de:	4619      	mov	r1, r3
 80137e0:	4610      	mov	r0, r2
 80137e2:	f7fd f949 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MaxLambdaValue);
 80137e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80137ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80137ee:	681a      	ldr	r2, [r3, #0]
 80137f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80137f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	f603 23cc 	addw	r3, r3, #2764	; 0xacc
 80137fe:	4619      	mov	r1, r3
 8013800:	4610      	mov	r0, r2
 8013802:	f7fd f939 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MaxSpeedValue);
 8013806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801380a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801380e:	681a      	ldr	r2, [r3, #0]
 8013810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013814:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	f603 3304 	addw	r3, r3, #2820	; 0xb04
 801381e:	4619      	mov	r1, r3
 8013820:	4610      	mov	r0, r2
 8013822:	f7fd f929 	bl	8010a78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8013826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801382a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	4618      	mov	r0, r3
 8013832:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8013836:	46bd      	mov	sp, r7
 8013838:	bd90      	pop	{r4, r7, pc}
 801383a:	bf00      	nop

0801383c <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 801383c:	b480      	push	{r7}
 801383e:	b083      	sub	sp, #12
 8013840:	af00      	add	r7, sp, #0
 8013842:	6078      	str	r0, [r7, #4]

}
 8013844:	bf00      	nop
 8013846:	370c      	adds	r7, #12
 8013848:	46bd      	mov	sp, r7
 801384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801384e:	4770      	bx	lr

08013850 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View() : presenter(0)
 8013850:	b580      	push	{r7, lr}
 8013852:	b082      	sub	sp, #8
 8013854:	af00      	add	r7, sp, #0
 8013856:	6078      	str	r0, [r7, #4]
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	4618      	mov	r0, r3
 801385c:	f007 fc0a 	bl	801b074 <_ZN8touchgfx6ScreenC1Ev>
 8013860:	4a05      	ldr	r2, [pc, #20]	; (8013878 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	601a      	str	r2, [r3, #0]
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	2200      	movs	r2, #0
 801386a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	4618      	mov	r0, r3
 8013870:	3708      	adds	r7, #8
 8013872:	46bd      	mov	sp, r7
 8013874:	bd80      	pop	{r7, pc}
 8013876:	bf00      	nop
 8013878:	08027e18 	.word	0x08027e18

0801387c <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 801387c:	b590      	push	{r4, r7, lr}
 801387e:	b089      	sub	sp, #36	; 0x24
 8013880:	af00      	add	r7, sp, #0
 8013882:	60f8      	str	r0, [r7, #12]
 8013884:	60b9      	str	r1, [r7, #8]
 8013886:	607a      	str	r2, [r7, #4]
 8013888:	68bb      	ldr	r3, [r7, #8]
 801388a:	61bb      	str	r3, [r7, #24]
#ifndef  __ICCARM__
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 801388c:	69bb      	ldr	r3, [r7, #24]
 801388e:	015a      	lsls	r2, r3, #5
 8013890:	f107 0314 	add.w	r3, r7, #20
 8013894:	4611      	mov	r1, r2
 8013896:	4618      	mov	r0, r3
 8013898:	f7fd fb1a 	bl	8010ed0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 801389c:	697b      	ldr	r3, [r7, #20]
 801389e:	461c      	mov	r4, r3
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	61fb      	str	r3, [r7, #28]
 80138a4:	69fb      	ldr	r3, [r7, #28]
 80138a6:	015a      	lsls	r2, r3, #5
 80138a8:	f107 0310 	add.w	r3, r7, #16
 80138ac:	4611      	mov	r1, r2
 80138ae:	4618      	mov	r0, r3
 80138b0:	f7fd fb0e 	bl	8010ed0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80138b4:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 80138b6:	461a      	mov	r2, r3
 80138b8:	4621      	mov	r1, r4
 80138ba:	68f8      	ldr	r0, [r7, #12]
 80138bc:	f004 ff34 	bl	8018728 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 80138c0:	bf00      	nop
 80138c2:	3724      	adds	r7, #36	; 0x24
 80138c4:	46bd      	mov	sp, r7
 80138c6:	bd90      	pop	{r4, r7, pc}

080138c8 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 80138c8:	b590      	push	{r4, r7, lr}
 80138ca:	b089      	sub	sp, #36	; 0x24
 80138cc:	af00      	add	r7, sp, #0
 80138ce:	60f8      	str	r0, [r7, #12]
 80138d0:	60b9      	str	r1, [r7, #8]
 80138d2:	607a      	str	r2, [r7, #4]
 80138d4:	68bb      	ldr	r3, [r7, #8]
 80138d6:	61bb      	str	r3, [r7, #24]
 80138d8:	69bb      	ldr	r3, [r7, #24]
 80138da:	015a      	lsls	r2, r3, #5
 80138dc:	f107 0314 	add.w	r3, r7, #20
 80138e0:	4611      	mov	r1, r2
 80138e2:	4618      	mov	r0, r3
 80138e4:	f7fd faf4 	bl	8010ed0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80138e8:	697b      	ldr	r3, [r7, #20]
 80138ea:	461c      	mov	r4, r3
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	61fb      	str	r3, [r7, #28]
 80138f0:	69fb      	ldr	r3, [r7, #28]
 80138f2:	015a      	lsls	r2, r3, #5
 80138f4:	f107 0310 	add.w	r3, r7, #16
 80138f8:	4611      	mov	r1, r2
 80138fa:	4618      	mov	r0, r3
 80138fc:	f7fd fae8 	bl	8010ed0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8013900:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8013902:	461a      	mov	r2, r3
 8013904:	4621      	mov	r1, r4
 8013906:	68f8      	ldr	r0, [r7, #12]
 8013908:	f004 ff19 	bl	801873e <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 801390c:	bf00      	nop
 801390e:	3724      	adds	r7, #36	; 0x24
 8013910:	46bd      	mov	sp, r7
 8013912:	bd90      	pop	{r4, r7, pc}

08013914 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 8013914:	b580      	push	{r7, lr}
 8013916:	b084      	sub	sp, #16
 8013918:	af00      	add	r7, sp, #0
 801391a:	6078      	str	r0, [r7, #4]
 801391c:	6039      	str	r1, [r7, #0]
 801391e:	683b      	ldr	r3, [r7, #0]
 8013920:	60fb      	str	r3, [r7, #12]
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	015a      	lsls	r2, r3, #5
 8013926:	f107 0308 	add.w	r3, r7, #8
 801392a:	4611      	mov	r1, r2
 801392c:	4618      	mov	r0, r3
 801392e:	f7fd facf 	bl	8010ed0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8013932:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 8013934:	4619      	mov	r1, r3
 8013936:	6878      	ldr	r0, [r7, #4]
 8013938:	f7fd fae5 	bl	8010f06 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 801393c:	bf00      	nop
 801393e:	3710      	adds	r7, #16
 8013940:	46bd      	mov	sp, r7
 8013942:	bd80      	pop	{r7, pc}

08013944 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8013944:	b580      	push	{r7, lr}
 8013946:	b082      	sub	sp, #8
 8013948:	af00      	add	r7, sp, #0
 801394a:	6078      	str	r0, [r7, #4]
 801394c:	4a05      	ldr	r2, [pc, #20]	; (8013964 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	601a      	str	r2, [r3, #0]
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	4618      	mov	r0, r3
 8013956:	f7fd fa53 	bl	8010e00 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	4618      	mov	r0, r3
 801395e:	3708      	adds	r7, #8
 8013960:	46bd      	mov	sp, r7
 8013962:	bd80      	pop	{r7, pc}
 8013964:	080298b8 	.word	0x080298b8

08013968 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8013968:	b580      	push	{r7, lr}
 801396a:	b082      	sub	sp, #8
 801396c:	af00      	add	r7, sp, #0
 801396e:	6078      	str	r0, [r7, #4]
 8013970:	6878      	ldr	r0, [r7, #4]
 8013972:	f7ff ffe7 	bl	8013944 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8013976:	2138      	movs	r1, #56	; 0x38
 8013978:	6878      	ldr	r0, [r7, #4]
 801397a:	f012 fbab 	bl	80260d4 <_ZdlPvj>
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	4618      	mov	r0, r3
 8013982:	3708      	adds	r7, #8
 8013984:	46bd      	mov	sp, r7
 8013986:	bd80      	pop	{r7, pc}

08013988 <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 8013988:	b580      	push	{r7, lr}
 801398a:	b082      	sub	sp, #8
 801398c:	af00      	add	r7, sp, #0
 801398e:	6078      	str	r0, [r7, #4]
 8013990:	4a05      	ldr	r2, [pc, #20]	; (80139a8 <_ZN8touchgfx4LineD1Ev+0x20>)
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	601a      	str	r2, [r3, #0]
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	4618      	mov	r0, r3
 801399a:	f004 fc9f 	bl	80182dc <_ZN8touchgfx12CanvasWidgetD1Ev>
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	4618      	mov	r0, r3
 80139a2:	3708      	adds	r7, #8
 80139a4:	46bd      	mov	sp, r7
 80139a6:	bd80      	pop	{r7, pc}
 80139a8:	08029664 	.word	0x08029664

080139ac <_ZN8touchgfx4LineD0Ev>:
 80139ac:	b580      	push	{r7, lr}
 80139ae:	b082      	sub	sp, #8
 80139b0:	af00      	add	r7, sp, #0
 80139b2:	6078      	str	r0, [r7, #4]
 80139b4:	6878      	ldr	r0, [r7, #4]
 80139b6:	f7ff ffe7 	bl	8013988 <_ZN8touchgfx4LineD1Ev>
 80139ba:	2174      	movs	r1, #116	; 0x74
 80139bc:	6878      	ldr	r0, [r7, #4]
 80139be:	f012 fb89 	bl	80260d4 <_ZdlPvj>
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	4618      	mov	r0, r3
 80139c6:	3708      	adds	r7, #8
 80139c8:	46bd      	mov	sp, r7
 80139ca:	bd80      	pop	{r7, pc}

080139cc <_ZN8touchgfx13PainterRGB888D1Ev>:
 *        The PainterRGB888 class allows a shape to be filled with a given color and alpha
 *        value. This allows transparent, anti-aliased elements to be drawn.
 *
 * @see AbstractPainter
 */
class PainterRGB888 : public AbstractPainterRGB888
 80139cc:	b580      	push	{r7, lr}
 80139ce:	b082      	sub	sp, #8
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	6078      	str	r0, [r7, #4]
 80139d4:	4a05      	ldr	r2, [pc, #20]	; (80139ec <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	601a      	str	r2, [r3, #0]
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	4618      	mov	r0, r3
 80139de:	f7fd fab5 	bl	8010f4c <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	4618      	mov	r0, r3
 80139e6:	3708      	adds	r7, #8
 80139e8:	46bd      	mov	sp, r7
 80139ea:	bd80      	pop	{r7, pc}
 80139ec:	08029368 	.word	0x08029368

080139f0 <_ZN8touchgfx13PainterRGB888D0Ev>:
 80139f0:	b580      	push	{r7, lr}
 80139f2:	b082      	sub	sp, #8
 80139f4:	af00      	add	r7, sp, #0
 80139f6:	6078      	str	r0, [r7, #4]
 80139f8:	6878      	ldr	r0, [r7, #4]
 80139fa:	f7ff ffe7 	bl	80139cc <_ZN8touchgfx13PainterRGB888D1Ev>
 80139fe:	2118      	movs	r1, #24
 8013a00:	6878      	ldr	r0, [r7, #4]
 8013a02:	f012 fb67 	bl	80260d4 <_ZdlPvj>
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	4618      	mov	r0, r3
 8013a0a:	3708      	adds	r7, #8
 8013a0c:	46bd      	mov	sp, r7
 8013a0e:	bd80      	pop	{r7, pc}

08013a10 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8013a10:	b480      	push	{r7}
 8013a12:	af00      	add	r7, sp, #0
    return bitmap_database;
 8013a14:	4b02      	ldr	r3, [pc, #8]	; (8013a20 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8013a16:	4618      	mov	r0, r3
 8013a18:	46bd      	mov	sp, r7
 8013a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a1e:	4770      	bx	lr
 8013a20:	08027f28 	.word	0x08027f28

08013a24 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8013a24:	b480      	push	{r7}
 8013a26:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8013a28:	2303      	movs	r3, #3
}
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	46bd      	mov	sp, r7
 8013a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a32:	4770      	bx	lr

08013a34 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8013a34:	b480      	push	{r7}
 8013a36:	b085      	sub	sp, #20
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	60f8      	str	r0, [r7, #12]
 8013a3c:	60b9      	str	r1, [r7, #8]
 8013a3e:	4613      	mov	r3, r2
 8013a40:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8013a42:	4a07      	ldr	r2, [pc, #28]	; (8013a60 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	6013      	str	r3, [r2, #0]
        fonts = f;
 8013a48:	4a06      	ldr	r2, [pc, #24]	; (8013a64 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8013a4a:	68bb      	ldr	r3, [r7, #8]
 8013a4c:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8013a4e:	4a06      	ldr	r2, [pc, #24]	; (8013a68 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8013a50:	88fb      	ldrh	r3, [r7, #6]
 8013a52:	8013      	strh	r3, [r2, #0]
    }
 8013a54:	bf00      	nop
 8013a56:	3714      	adds	r7, #20
 8013a58:	46bd      	mov	sp, r7
 8013a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a5e:	4770      	bx	lr
 8013a60:	2000c644 	.word	0x2000c644
 8013a64:	2000c64c 	.word	0x2000c64c
 8013a68:	2000c648 	.word	0x2000c648

08013a6c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8013a6c:	b590      	push	{r4, r7, lr}
 8013a6e:	b085      	sub	sp, #20
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	4603      	mov	r3, r0
 8013a74:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8013a76:	2300      	movs	r3, #0
 8013a78:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8013a7a:	88fb      	ldrh	r3, [r7, #6]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d127      	bne.n	8013ad0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8013a80:	88fb      	ldrh	r3, [r7, #6]
 8013a82:	4a1e      	ldr	r2, [pc, #120]	; (8013afc <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8013a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d016      	beq.n	8013aba <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8013a8c:	88fb      	ldrh	r3, [r7, #6]
 8013a8e:	4a1b      	ldr	r2, [pc, #108]	; (8013afc <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8013a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013a94:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8013a96:	68bb      	ldr	r3, [r7, #8]
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	68ba      	ldr	r2, [r7, #8]
 8013a9c:	4413      	add	r3, r2
 8013a9e:	4a18      	ldr	r2, [pc, #96]	; (8013b00 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8013aa0:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8013aa2:	68bb      	ldr	r3, [r7, #8]
 8013aa4:	685b      	ldr	r3, [r3, #4]
 8013aa6:	68ba      	ldr	r2, [r7, #8]
 8013aa8:	4413      	add	r3, r2
 8013aaa:	4a16      	ldr	r2, [pc, #88]	; (8013b04 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8013aac:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8013aae:	68bb      	ldr	r3, [r7, #8]
 8013ab0:	689b      	ldr	r3, [r3, #8]
 8013ab2:	68ba      	ldr	r2, [r7, #8]
 8013ab4:	4413      	add	r3, r2
 8013ab6:	60fb      	str	r3, [r7, #12]
 8013ab8:	e00a      	b.n	8013ad0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8013aba:	4b11      	ldr	r3, [pc, #68]	; (8013b00 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8013abc:	4a12      	ldr	r2, [pc, #72]	; (8013b08 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8013abe:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8013ac0:	4a12      	ldr	r2, [pc, #72]	; (8013b0c <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8013ac2:	4b10      	ldr	r3, [pc, #64]	; (8013b04 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8013ac4:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8013ac6:	88fb      	ldrh	r3, [r7, #6]
 8013ac8:	4a11      	ldr	r2, [pc, #68]	; (8013b10 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8013aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013ace:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d00d      	beq.n	8013af2 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8013ad6:	4a0f      	ldr	r2, [pc, #60]	; (8013b14 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8013ad8:	88fb      	ldrh	r3, [r7, #6]
 8013ada:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8013adc:	f000 f83e 	bl	8013b5c <_ZN17TypedTextDatabase8getFontsEv>
 8013ae0:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8013ae2:	f000 f833 	bl	8013b4c <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8013ae6:	4603      	mov	r3, r0
 8013ae8:	461a      	mov	r2, r3
 8013aea:	4621      	mov	r1, r4
 8013aec:	68f8      	ldr	r0, [r7, #12]
 8013aee:	f7ff ffa1 	bl	8013a34 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8013af2:	bf00      	nop
 8013af4:	3714      	adds	r7, #20
 8013af6:	46bd      	mov	sp, r7
 8013af8:	bd90      	pop	{r4, r7, pc}
 8013afa:	bf00      	nop
 8013afc:	20008e08 	.word	0x20008e08
 8013b00:	20008e10 	.word	0x20008e10
 8013b04:	20008e14 	.word	0x20008e14
 8013b08:	08062778 	.word	0x08062778
 8013b0c:	0806268c 	.word	0x0806268c
 8013b10:	080628bc 	.word	0x080628bc
 8013b14:	20008e0c 	.word	0x20008e0c

08013b18 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8013b18:	b480      	push	{r7}
 8013b1a:	b083      	sub	sp, #12
 8013b1c:	af00      	add	r7, sp, #0
 8013b1e:	6078      	str	r0, [r7, #4]
 8013b20:	460b      	mov	r3, r1
 8013b22:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8013b24:	4b07      	ldr	r3, [pc, #28]	; (8013b44 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8013b26:	681a      	ldr	r2, [r3, #0]
 8013b28:	4b07      	ldr	r3, [pc, #28]	; (8013b48 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8013b2a:	6819      	ldr	r1, [r3, #0]
 8013b2c:	887b      	ldrh	r3, [r7, #2]
 8013b2e:	009b      	lsls	r3, r3, #2
 8013b30:	440b      	add	r3, r1
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	005b      	lsls	r3, r3, #1
 8013b36:	4413      	add	r3, r2
}
 8013b38:	4618      	mov	r0, r3
 8013b3a:	370c      	adds	r7, #12
 8013b3c:	46bd      	mov	sp, r7
 8013b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b42:	4770      	bx	lr
 8013b44:	20008e10 	.word	0x20008e10
 8013b48:	20008e14 	.word	0x20008e14

08013b4c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8013b4c:	b480      	push	{r7}
 8013b4e:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8013b50:	233b      	movs	r3, #59	; 0x3b
}
 8013b52:	4618      	mov	r0, r3
 8013b54:	46bd      	mov	sp, r7
 8013b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b5a:	4770      	bx	lr

08013b5c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8013b5c:	b480      	push	{r7}
 8013b5e:	af00      	add	r7, sp, #0
    return _fonts;
 8013b60:	4b02      	ldr	r3, [pc, #8]	; (8013b6c <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8013b62:	4618      	mov	r0, r3
 8013b64:	46bd      	mov	sp, r7
 8013b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b6a:	4770      	bx	lr
 8013b6c:	20008e18 	.word	0x20008e18

08013b70 <_Z41__static_initialization_and_destruction_0ii>:
    case 6:
        _fonts[6] = &(getFont_Asap_Bold_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 8013b70:	b580      	push	{r7, lr}
 8013b72:	b082      	sub	sp, #8
 8013b74:	af00      	add	r7, sp, #0
 8013b76:	6078      	str	r0, [r7, #4]
 8013b78:	6039      	str	r1, [r7, #0]
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	2b01      	cmp	r3, #1
 8013b7e:	d127      	bne.n	8013bd0 <_Z41__static_initialization_and_destruction_0ii+0x60>
 8013b80:	683b      	ldr	r3, [r7, #0]
 8013b82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013b86:	4293      	cmp	r3, r2
 8013b88:	d122      	bne.n	8013bd0 <_Z41__static_initialization_and_destruction_0ii+0x60>
    &(getFont_Asap_Bold_14_4bpp()),
 8013b8a:	f7fb fe71 	bl	800f870 <_Z25getFont_Asap_Bold_14_4bppv>
 8013b8e:	4603      	mov	r3, r0
};
 8013b90:	4a11      	ldr	r2, [pc, #68]	; (8013bd8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8013b92:	6013      	str	r3, [r2, #0]
    &(getFont_Asap_Bold_40_4bpp()),
 8013b94:	f7fb ff68 	bl	800fa68 <_Z25getFont_Asap_Bold_40_4bppv>
 8013b98:	4603      	mov	r3, r0
};
 8013b9a:	4a0f      	ldr	r2, [pc, #60]	; (8013bd8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8013b9c:	6053      	str	r3, [r2, #4]
    &(getFont_Asap_Bold_30_4bpp()),
 8013b9e:	f7fb ff0f 	bl	800f9c0 <_Z25getFont_Asap_Bold_30_4bppv>
 8013ba2:	4603      	mov	r3, r0
};
 8013ba4:	4a0c      	ldr	r2, [pc, #48]	; (8013bd8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8013ba6:	6093      	str	r3, [r2, #8]
    &(getFont_Asap_Bold_12_4bpp()),
 8013ba8:	f7fb fe0e 	bl	800f7c8 <_Z25getFont_Asap_Bold_12_4bppv>
 8013bac:	4603      	mov	r3, r0
};
 8013bae:	4a0a      	ldr	r2, [pc, #40]	; (8013bd8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8013bb0:	60d3      	str	r3, [r2, #12]
    &(getFont_Asap_Bold_60_4bpp()),
 8013bb2:	f7fb ffad 	bl	800fb10 <_Z25getFont_Asap_Bold_60_4bppv>
 8013bb6:	4603      	mov	r3, r0
};
 8013bb8:	4a07      	ldr	r2, [pc, #28]	; (8013bd8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8013bba:	6113      	str	r3, [r2, #16]
    &(getFont_Asap_Bold_21_4bpp()),
 8013bbc:	f7fb feac 	bl	800f918 <_Z25getFont_Asap_Bold_21_4bppv>
 8013bc0:	4603      	mov	r3, r0
};
 8013bc2:	4a05      	ldr	r2, [pc, #20]	; (8013bd8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8013bc4:	6153      	str	r3, [r2, #20]
    &(getFont_Asap_Bold_10_4bpp())
 8013bc6:	f7fb fdab 	bl	800f720 <_Z25getFont_Asap_Bold_10_4bppv>
 8013bca:	4603      	mov	r3, r0
};
 8013bcc:	4a02      	ldr	r2, [pc, #8]	; (8013bd8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8013bce:	6193      	str	r3, [r2, #24]
}  // namespace TypedTextDatabase
 8013bd0:	bf00      	nop
 8013bd2:	3708      	adds	r7, #8
 8013bd4:	46bd      	mov	sp, r7
 8013bd6:	bd80      	pop	{r7, pc}
 8013bd8:	20008e18 	.word	0x20008e18

08013bdc <_GLOBAL__sub_I__fonts>:
 8013bdc:	b580      	push	{r7, lr}
 8013bde:	af00      	add	r7, sp, #0
 8013be0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013be4:	2001      	movs	r0, #1
 8013be6:	f7ff ffc3 	bl	8013b70 <_Z41__static_initialization_and_destruction_0ii>
 8013bea:	bd80      	pop	{r7, pc}

08013bec <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8013bec:	b580      	push	{r7, lr}
 8013bee:	b082      	sub	sp, #8
 8013bf0:	af00      	add	r7, sp, #0
 8013bf2:	6078      	str	r0, [r7, #4]
 8013bf4:	4a05      	ldr	r2, [pc, #20]	; (8013c0c <_ZN19FrontendApplicationD1Ev+0x20>)
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	601a      	str	r2, [r3, #0]
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	f7fc fa29 	bl	8010054 <_ZN23FrontendApplicationBaseD1Ev>
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	4618      	mov	r0, r3
 8013c06:	3708      	adds	r7, #8
 8013c08:	46bd      	mov	sp, r7
 8013c0a:	bd80      	pop	{r7, pc}
 8013c0c:	08027f6c 	.word	0x08027f6c

08013c10 <_ZN19FrontendApplicationD0Ev>:
 8013c10:	b580      	push	{r7, lr}
 8013c12:	b082      	sub	sp, #8
 8013c14:	af00      	add	r7, sp, #0
 8013c16:	6078      	str	r0, [r7, #4]
 8013c18:	6878      	ldr	r0, [r7, #4]
 8013c1a:	f7ff ffe7 	bl	8013bec <_ZN19FrontendApplicationD1Ev>
 8013c1e:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8013c22:	6878      	ldr	r0, [r7, #4]
 8013c24:	f012 fa56 	bl	80260d4 <_ZdlPvj>
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	3708      	adds	r7, #8
 8013c2e:	46bd      	mov	sp, r7
 8013c30:	bd80      	pop	{r7, pc}

08013c32 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8013c32:	b580      	push	{r7, lr}
 8013c34:	b082      	sub	sp, #8
 8013c36:	af00      	add	r7, sp, #0
 8013c38:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8013c40:	4618      	mov	r0, r3
 8013c42:	f000 fd9d 	bl	8014780 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	4618      	mov	r0, r3
 8013c4a:	f006 f997 	bl	8019f7c <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8013c4e:	bf00      	nop
 8013c50:	3708      	adds	r7, #8
 8013c52:	46bd      	mov	sp, r7
 8013c54:	bd80      	pop	{r7, pc}
	...

08013c58 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8013c58:	b580      	push	{r7, lr}
 8013c5a:	b084      	sub	sp, #16
 8013c5c:	af00      	add	r7, sp, #0
 8013c5e:	60f8      	str	r0, [r7, #12]
 8013c60:	60b9      	str	r1, [r7, #8]
 8013c62:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8013c64:	68fb      	ldr	r3, [r7, #12]
 8013c66:	687a      	ldr	r2, [r7, #4]
 8013c68:	68b9      	ldr	r1, [r7, #8]
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	f7fc fa6c 	bl	8010148 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8013c70:	4a03      	ldr	r2, [pc, #12]	; (8013c80 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	601a      	str	r2, [r3, #0]
{
}
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	4618      	mov	r0, r3
 8013c7a:	3710      	adds	r7, #16
 8013c7c:	46bd      	mov	sp, r7
 8013c7e:	bd80      	pop	{r7, pc}
 8013c80:	08027f6c 	.word	0x08027f6c

08013c84 <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8013c84:	b480      	push	{r7}
 8013c86:	b083      	sub	sp, #12
 8013c88:	af00      	add	r7, sp, #0
 8013c8a:	6078      	str	r0, [r7, #4]
    {
    }
 8013c8c:	bf00      	nop
 8013c8e:	370c      	adds	r7, #12
 8013c90:	46bd      	mov	sp, r7
 8013c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c96:	4770      	bx	lr

08013c98 <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8013c98:	b480      	push	{r7}
 8013c9a:	b083      	sub	sp, #12
 8013c9c:	af00      	add	r7, sp, #0
 8013c9e:	6078      	str	r0, [r7, #4]
    {
    }
 8013ca0:	bf00      	nop
 8013ca2:	370c      	adds	r7, #12
 8013ca4:	46bd      	mov	sp, r7
 8013ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013caa:	4770      	bx	lr

08013cac <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 8013cac:	b480      	push	{r7}
 8013cae:	b083      	sub	sp, #12
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	6078      	str	r0, [r7, #4]
    {
 8013cb4:	4a04      	ldr	r2, [pc, #16]	; (8013cc8 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	601a      	str	r2, [r3, #0]
    }
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	370c      	adds	r7, #12
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc6:	4770      	bx	lr
 8013cc8:	08027ff8 	.word	0x08027ff8

08013ccc <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8013ccc:	b580      	push	{r7, lr}
 8013cce:	b082      	sub	sp, #8
 8013cd0:	af00      	add	r7, sp, #0
 8013cd2:	6078      	str	r0, [r7, #4]
    }
 8013cd4:	6878      	ldr	r0, [r7, #4]
 8013cd6:	f7ff ffe9 	bl	8013cac <_ZN8touchgfx9PresenterD1Ev>
 8013cda:	2104      	movs	r1, #4
 8013cdc:	6878      	ldr	r0, [r7, #4]
 8013cde:	f012 f9f9 	bl	80260d4 <_ZdlPvj>
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	4618      	mov	r0, r3
 8013ce6:	3708      	adds	r7, #8
 8013ce8:	46bd      	mov	sp, r7
 8013cea:	bd80      	pop	{r7, pc}

08013cec <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 8013cec:	b480      	push	{r7}
 8013cee:	b083      	sub	sp, #12
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	6078      	str	r0, [r7, #4]
    {
 8013cf4:	4a04      	ldr	r2, [pc, #16]	; (8013d08 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	601a      	str	r2, [r3, #0]
    }
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	370c      	adds	r7, #12
 8013d00:	46bd      	mov	sp, r7
 8013d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d06:	4770      	bx	lr
 8013d08:	08027ff8 	.word	0x08027ff8

08013d0c <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8013d0c:	b480      	push	{r7}
 8013d0e:	b083      	sub	sp, #12
 8013d10:	af00      	add	r7, sp, #0
 8013d12:	6078      	str	r0, [r7, #4]
 8013d14:	4a06      	ldr	r2, [pc, #24]	; (8013d30 <_ZN13ModelListenerC1Ev+0x24>)
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	601a      	str	r2, [r3, #0]
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	2200      	movs	r2, #0
 8013d1e:	605a      	str	r2, [r3, #4]
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	4618      	mov	r0, r3
 8013d24:	370c      	adds	r7, #12
 8013d26:	46bd      	mov	sp, r7
 8013d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d2c:	4770      	bx	lr
 8013d2e:	bf00      	nop
 8013d30:	08027fe0 	.word	0x08027fe0

08013d34 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8013d34:	b480      	push	{r7}
 8013d36:	b083      	sub	sp, #12
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	6078      	str	r0, [r7, #4]
 8013d3c:	4a04      	ldr	r2, [pc, #16]	; (8013d50 <_ZN13ModelListenerD1Ev+0x1c>)
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	601a      	str	r2, [r3, #0]
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	4618      	mov	r0, r3
 8013d46:	370c      	adds	r7, #12
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d4e:	4770      	bx	lr
 8013d50:	08027fe0 	.word	0x08027fe0

08013d54 <_ZN13ModelListenerD0Ev>:
 8013d54:	b580      	push	{r7, lr}
 8013d56:	b082      	sub	sp, #8
 8013d58:	af00      	add	r7, sp, #0
 8013d5a:	6078      	str	r0, [r7, #4]
 8013d5c:	6878      	ldr	r0, [r7, #4]
 8013d5e:	f7ff ffe9 	bl	8013d34 <_ZN13ModelListenerD1Ev>
 8013d62:	2108      	movs	r1, #8
 8013d64:	6878      	ldr	r0, [r7, #4]
 8013d66:	f012 f9b5 	bl	80260d4 <_ZdlPvj>
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	4618      	mov	r0, r3
 8013d6e:	3708      	adds	r7, #8
 8013d70:	46bd      	mov	sp, r7
 8013d72:	bd80      	pop	{r7, pc}

08013d74 <_ZN13ModelListener11setNewValueEPh>:

    virtual void setNewValue(uint8_t* newValue){}
 8013d74:	b480      	push	{r7}
 8013d76:	b083      	sub	sp, #12
 8013d78:	af00      	add	r7, sp, #0
 8013d7a:	6078      	str	r0, [r7, #4]
 8013d7c:	6039      	str	r1, [r7, #0]
 8013d7e:	bf00      	nop
 8013d80:	370c      	adds	r7, #12
 8013d82:	46bd      	mov	sp, r7
 8013d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d88:	4770      	bx	lr

08013d8a <_ZN13ModelListener21updateDisplaySettingsEPh>:
    virtual void updateDisplaySettings(uint8_t* settings){}
 8013d8a:	b480      	push	{r7}
 8013d8c:	b083      	sub	sp, #12
 8013d8e:	af00      	add	r7, sp, #0
 8013d90:	6078      	str	r0, [r7, #4]
 8013d92:	6039      	str	r1, [r7, #0]
 8013d94:	bf00      	nop
 8013d96:	370c      	adds	r7, #12
 8013d98:	46bd      	mov	sp, r7
 8013d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d9e:	4770      	bx	lr

08013da0 <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 8013da0:	b580      	push	{r7, lr}
 8013da2:	b082      	sub	sp, #8
 8013da4:	af00      	add	r7, sp, #0
 8013da6:	6078      	str	r0, [r7, #4]
 8013da8:	4a09      	ldr	r2, [pc, #36]	; (8013dd0 <_ZN13MainPresenterD1Ev+0x30>)
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	601a      	str	r2, [r3, #0]
 8013dae:	4a09      	ldr	r2, [pc, #36]	; (8013dd4 <_ZN13MainPresenterD1Ev+0x34>)
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	605a      	str	r2, [r3, #4]
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	3304      	adds	r3, #4
 8013db8:	4618      	mov	r0, r3
 8013dba:	f7ff ffbb 	bl	8013d34 <_ZN13ModelListenerD1Ev>
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	4618      	mov	r0, r3
 8013dc2:	f7ff ff73 	bl	8013cac <_ZN8touchgfx9PresenterD1Ev>
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	4618      	mov	r0, r3
 8013dca:	3708      	adds	r7, #8
 8013dcc:	46bd      	mov	sp, r7
 8013dce:	bd80      	pop	{r7, pc}
 8013dd0:	08027fa8 	.word	0x08027fa8
 8013dd4:	08027fc8 	.word	0x08027fc8

08013dd8 <_ZThn4_N13MainPresenterD1Ev>:
 8013dd8:	f1a0 0004 	sub.w	r0, r0, #4
 8013ddc:	e7e0      	b.n	8013da0 <_ZN13MainPresenterD1Ev>
 8013dde:	bf00      	nop

08013de0 <_ZN13MainPresenterD0Ev>:
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b082      	sub	sp, #8
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	6078      	str	r0, [r7, #4]
 8013de8:	6878      	ldr	r0, [r7, #4]
 8013dea:	f7ff ffd9 	bl	8013da0 <_ZN13MainPresenterD1Ev>
 8013dee:	2110      	movs	r1, #16
 8013df0:	6878      	ldr	r0, [r7, #4]
 8013df2:	f012 f96f 	bl	80260d4 <_ZdlPvj>
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	4618      	mov	r0, r3
 8013dfa:	3708      	adds	r7, #8
 8013dfc:	46bd      	mov	sp, r7
 8013dfe:	bd80      	pop	{r7, pc}

08013e00 <_ZThn4_N13MainPresenterD0Ev>:
 8013e00:	f1a0 0004 	sub.w	r0, r0, #4
 8013e04:	e7ec      	b.n	8013de0 <_ZN13MainPresenterD0Ev>
	...

08013e08 <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 8013e08:	b580      	push	{r7, lr}
 8013e0a:	b082      	sub	sp, #8
 8013e0c:	af00      	add	r7, sp, #0
 8013e0e:	6078      	str	r0, [r7, #4]
 8013e10:	6039      	str	r1, [r7, #0]
    : view(v)
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	4618      	mov	r0, r3
 8013e16:	f7ff ff69 	bl	8013cec <_ZN8touchgfx9PresenterC1Ev>
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	3304      	adds	r3, #4
 8013e1e:	4618      	mov	r0, r3
 8013e20:	f7ff ff74 	bl	8013d0c <_ZN13ModelListenerC1Ev>
 8013e24:	4a06      	ldr	r2, [pc, #24]	; (8013e40 <_ZN13MainPresenterC1ER8MainView+0x38>)
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	601a      	str	r2, [r3, #0]
 8013e2a:	4a06      	ldr	r2, [pc, #24]	; (8013e44 <_ZN13MainPresenterC1ER8MainView+0x3c>)
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	605a      	str	r2, [r3, #4]
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	683a      	ldr	r2, [r7, #0]
 8013e34:	60da      	str	r2, [r3, #12]
{
}
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	4618      	mov	r0, r3
 8013e3a:	3708      	adds	r7, #8
 8013e3c:	46bd      	mov	sp, r7
 8013e3e:	bd80      	pop	{r7, pc}
 8013e40:	08027fa8 	.word	0x08027fa8
 8013e44:	08027fc8 	.word	0x08027fc8

08013e48 <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 8013e48:	b480      	push	{r7}
 8013e4a:	b083      	sub	sp, #12
 8013e4c:	af00      	add	r7, sp, #0
 8013e4e:	6078      	str	r0, [r7, #4]
}
 8013e50:	bf00      	nop
 8013e52:	370c      	adds	r7, #12
 8013e54:	46bd      	mov	sp, r7
 8013e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e5a:	4770      	bx	lr

08013e5c <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 8013e5c:	b480      	push	{r7}
 8013e5e:	b083      	sub	sp, #12
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	6078      	str	r0, [r7, #4]
}
 8013e64:	bf00      	nop
 8013e66:	370c      	adds	r7, #12
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e6e:	4770      	bx	lr

08013e70 <_ZN13MainPresenter11setNewValueEPh>:

void MainPresenter::setNewValue(uint8_t* newValue)
{
 8013e70:	b580      	push	{r7, lr}
 8013e72:	b082      	sub	sp, #8
 8013e74:	af00      	add	r7, sp, #0
 8013e76:	6078      	str	r0, [r7, #4]
 8013e78:	6039      	str	r1, [r7, #0]
	view.updateVal(newValue);
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	68db      	ldr	r3, [r3, #12]
 8013e7e:	6839      	ldr	r1, [r7, #0]
 8013e80:	4618      	mov	r0, r3
 8013e82:	f000 f9f7 	bl	8014274 <_ZN8MainView9updateValEPh>
}
 8013e86:	bf00      	nop
 8013e88:	3708      	adds	r7, #8
 8013e8a:	46bd      	mov	sp, r7
 8013e8c:	bd80      	pop	{r7, pc}

08013e8e <_ZThn4_N13MainPresenter11setNewValueEPh>:

    void setNewValue(uint8_t* newValue);
 8013e8e:	f1a0 0004 	sub.w	r0, r0, #4
 8013e92:	f7ff bfed 	b.w	8013e70 <_ZN13MainPresenter11setNewValueEPh>

08013e96 <_ZN13MainPresenter21updateDisplaySettingsEPh>:

void MainPresenter::updateDisplaySettings(uint8_t* settings)
{
 8013e96:	b580      	push	{r7, lr}
 8013e98:	b082      	sub	sp, #8
 8013e9a:	af00      	add	r7, sp, #0
 8013e9c:	6078      	str	r0, [r7, #4]
 8013e9e:	6039      	str	r1, [r7, #0]
	view.updateSettings(settings);
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	68db      	ldr	r3, [r3, #12]
 8013ea4:	6839      	ldr	r1, [r7, #0]
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	f000 f908 	bl	80140bc <_ZN8MainView14updateSettingsEPh>
}
 8013eac:	bf00      	nop
 8013eae:	3708      	adds	r7, #8
 8013eb0:	46bd      	mov	sp, r7
 8013eb2:	bd80      	pop	{r7, pc}

08013eb4 <_ZThn4_N13MainPresenter21updateDisplaySettingsEPh>:
    void updateDisplaySettings(uint8_t* settings);
 8013eb4:	f1a0 0004 	sub.w	r0, r0, #4
 8013eb8:	f7ff bfed 	b.w	8013e96 <_ZN13MainPresenter21updateDisplaySettingsEPh>

08013ebc <_ZN8touchgfx9colortypeC1Ev>:
    colortype() : color(0) {}
 8013ebc:	b480      	push	{r7}
 8013ebe:	b083      	sub	sp, #12
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	6078      	str	r0, [r7, #4]
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	2200      	movs	r2, #0
 8013ec8:	601a      	str	r2, [r3, #0]
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	4618      	mov	r0, r3
 8013ece:	370c      	adds	r7, #12
 8013ed0:	46bd      	mov	sp, r7
 8013ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ed6:	4770      	bx	lr

08013ed8 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>:
     *          touchgfx::Unicode::snprintfFloats(dst, dstSize, tmpfmt, values);
     *          \endcode
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
 8013ed8:	b580      	push	{r7, lr}
 8013eda:	b084      	sub	sp, #16
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	60f8      	str	r0, [r7, #12]
 8013ee0:	460b      	mov	r3, r1
 8013ee2:	607a      	str	r2, [r7, #4]
 8013ee4:	ed87 0a00 	vstr	s0, [r7]
 8013ee8:	817b      	strh	r3, [r7, #10]
    {
        return snprintfFloats(dst, dstSize, format, &value);
 8013eea:	463b      	mov	r3, r7
 8013eec:	8979      	ldrh	r1, [r7, #10]
 8013eee:	687a      	ldr	r2, [r7, #4]
 8013ef0:	68f8      	ldr	r0, [r7, #12]
 8013ef2:	f008 fadf 	bl	801c4b4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
 8013ef6:	4603      	mov	r3, r0
    }
 8013ef8:	4618      	mov	r0, r3
 8013efa:	3710      	adds	r7, #16
 8013efc:	46bd      	mov	sp, r7
 8013efe:	bd80      	pop	{r7, pc}

08013f00 <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 8013f00:	b480      	push	{r7}
 8013f02:	b083      	sub	sp, #12
 8013f04:	af00      	add	r7, sp, #0
 8013f06:	6078      	str	r0, [r7, #4]
        return rect.width;
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 8013f0e:	4618      	mov	r0, r3
 8013f10:	370c      	adds	r7, #12
 8013f12:	46bd      	mov	sp, r7
 8013f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f18:	4770      	bx	lr

08013f1a <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 8013f1a:	b480      	push	{r7}
 8013f1c:	b083      	sub	sp, #12
 8013f1e:	af00      	add	r7, sp, #0
 8013f20:	6078      	str	r0, [r7, #4]
        return rect.height;
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 8013f28:	4618      	mov	r0, r3
 8013f2a:	370c      	adds	r7, #12
 8013f2c:	46bd      	mov	sp, r7
 8013f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f32:	4770      	bx	lr

08013f34 <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 8013f34:	b580      	push	{r7, lr}
 8013f36:	b082      	sub	sp, #8
 8013f38:	af00      	add	r7, sp, #0
 8013f3a:	6078      	str	r0, [r7, #4]
 8013f3c:	4a05      	ldr	r2, [pc, #20]	; (8013f54 <_ZN8MainViewD1Ev+0x20>)
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	601a      	str	r2, [r3, #0]
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	4618      	mov	r0, r3
 8013f46:	f7fd f867 	bl	8011018 <_ZN12MainViewBaseD1Ev>
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	3708      	adds	r7, #8
 8013f50:	46bd      	mov	sp, r7
 8013f52:	bd80      	pop	{r7, pc}
 8013f54:	08028010 	.word	0x08028010

08013f58 <_ZN8MainViewD0Ev>:
 8013f58:	b580      	push	{r7, lr}
 8013f5a:	b082      	sub	sp, #8
 8013f5c:	af00      	add	r7, sp, #0
 8013f5e:	6078      	str	r0, [r7, #4]
 8013f60:	6878      	ldr	r0, [r7, #4]
 8013f62:	f7ff ffe7 	bl	8013f34 <_ZN8MainViewD1Ev>
 8013f66:	f642 0128 	movw	r1, #10280	; 0x2828
 8013f6a:	6878      	ldr	r0, [r7, #4]
 8013f6c:	f012 f8b2 	bl	80260d4 <_ZdlPvj>
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	4618      	mov	r0, r3
 8013f74:	3708      	adds	r7, #8
 8013f76:	46bd      	mov	sp, r7
 8013f78:	bd80      	pop	{r7, pc}
	...

08013f7c <_ZN8MainViewC1Ev>:
static int prev_min_fuel_press = 99;
static int prev_iat = 0;
static int prev_tps = 0;
static float prev_batt_v = 0;

MainView::MainView()
 8013f7c:	b590      	push	{r4, r7, lr}
 8013f7e:	b083      	sub	sp, #12
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	6078      	str	r0, [r7, #4]
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	4618      	mov	r0, r3
 8013f88:	f7fd f996 	bl	80112b8 <_ZN12MainViewBaseC1Ev>
 8013f8c:	4a15      	ldr	r2, [pc, #84]	; (8013fe4 <_ZN8MainViewC1Ev+0x68>)
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	601a      	str	r2, [r3, #0]
{
    // Support of larger displays for this example
    // is handled by showing a black box in the
    // unused part of the display.
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 8013f92:	4b15      	ldr	r3, [pc, #84]	; (8013fe8 <_ZN8MainViewC1Ev+0x6c>)
 8013f94:	881b      	ldrh	r3, [r3, #0]
 8013f96:	461c      	mov	r4, r3
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8013f9e:	4618      	mov	r0, r3
 8013fa0:	f7ff ffae 	bl	8013f00 <_ZNK8touchgfx8Drawable8getWidthEv>
 8013fa4:	4603      	mov	r3, r0
 8013fa6:	429c      	cmp	r4, r3
 8013fa8:	dc0b      	bgt.n	8013fc2 <_ZN8MainViewC1Ev+0x46>
            HAL::DISPLAY_HEIGHT > backgroundImage.getHeight())
 8013faa:	4b10      	ldr	r3, [pc, #64]	; (8013fec <_ZN8MainViewC1Ev+0x70>)
 8013fac:	881b      	ldrh	r3, [r3, #0]
 8013fae:	461c      	mov	r4, r3
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	f7ff ffaf 	bl	8013f1a <_ZNK8touchgfx8Drawable9getHeightEv>
 8013fbc:	4603      	mov	r3, r0
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 8013fbe:	429c      	cmp	r4, r3
 8013fc0:	dd01      	ble.n	8013fc6 <_ZN8MainViewC1Ev+0x4a>
 8013fc2:	2301      	movs	r3, #1
 8013fc4:	e000      	b.n	8013fc8 <_ZN8MainViewC1Ev+0x4c>
 8013fc6:	2300      	movs	r3, #0
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d005      	beq.n	8013fd8 <_ZN8MainViewC1Ev+0x5c>
    {
        backgroundBox.setVisible(true);
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	3340      	adds	r3, #64	; 0x40
 8013fd0:	2101      	movs	r1, #1
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	f7fc fc5e 	bl	8010894 <_ZN8touchgfx8Drawable10setVisibleEb>
    }
}
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	4618      	mov	r0, r3
 8013fdc:	370c      	adds	r7, #12
 8013fde:	46bd      	mov	sp, r7
 8013fe0:	bd90      	pop	{r4, r7, pc}
 8013fe2:	bf00      	nop
 8013fe4:	08028010 	.word	0x08028010
 8013fe8:	2000c5a8 	.word	0x2000c5a8
 8013fec:	2000c5aa 	.word	0x2000c5aa

08013ff0 <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen()
{
 8013ff0:	b480      	push	{r7}
 8013ff2:	b083      	sub	sp, #12
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	6078      	str	r0, [r7, #4]
}
 8013ff8:	bf00      	nop
 8013ffa:	370c      	adds	r7, #12
 8013ffc:	46bd      	mov	sp, r7
 8013ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014002:	4770      	bx	lr

08014004 <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen()
{
 8014004:	b480      	push	{r7}
 8014006:	b083      	sub	sp, #12
 8014008:	af00      	add	r7, sp, #0
 801400a:	6078      	str	r0, [r7, #4]
}
 801400c:	bf00      	nop
 801400e:	370c      	adds	r7, #12
 8014010:	46bd      	mov	sp, r7
 8014012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014016:	4770      	bx	lr

08014018 <_ZL13getBlackColorv>:

static colortype getBlackColor()
{
 8014018:	b580      	push	{r7, lr}
 801401a:	b082      	sub	sp, #8
 801401c:	af00      	add	r7, sp, #0
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0,0,0);
 801401e:	2200      	movs	r2, #0
 8014020:	2100      	movs	r1, #0
 8014022:	2000      	movs	r0, #0
 8014024:	f7fd f920 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014028:	4603      	mov	r3, r0
 801402a:	607b      	str	r3, [r7, #4]
}
 801402c:	bf00      	nop
 801402e:	4618      	mov	r0, r3
 8014030:	3708      	adds	r7, #8
 8014032:	46bd      	mov	sp, r7
 8014034:	bd80      	pop	{r7, pc}
	...

08014038 <_ZL20getColorFromRevLimitv>:

static colortype getColorFromRevLimit()
{
 8014038:	b580      	push	{r7, lr}
 801403a:	b084      	sub	sp, #16
 801403c:	af00      	add	r7, sp, #0

	color_index ++;
 801403e:	4b1e      	ldr	r3, [pc, #120]	; (80140b8 <_ZL20getColorFromRevLimitv+0x80>)
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	3301      	adds	r3, #1
 8014044:	4a1c      	ldr	r2, [pc, #112]	; (80140b8 <_ZL20getColorFromRevLimitv+0x80>)
 8014046:	6013      	str	r3, [r2, #0]
	if(color_index >= 3)
 8014048:	4b1b      	ldr	r3, [pc, #108]	; (80140b8 <_ZL20getColorFromRevLimitv+0x80>)
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	2b02      	cmp	r3, #2
 801404e:	dd02      	ble.n	8014056 <_ZL20getColorFromRevLimitv+0x1e>
	{
		color_index = 0;
 8014050:	4b19      	ldr	r3, [pc, #100]	; (80140b8 <_ZL20getColorFromRevLimitv+0x80>)
 8014052:	2200      	movs	r2, #0
 8014054:	601a      	str	r2, [r3, #0]
	}

	colortype red_color = touchgfx::Color::getColorFrom24BitRGB(255,0,0);
 8014056:	2200      	movs	r2, #0
 8014058:	2100      	movs	r1, #0
 801405a:	20ff      	movs	r0, #255	; 0xff
 801405c:	f7fd f904 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014060:	4603      	mov	r3, r0
 8014062:	60fb      	str	r3, [r7, #12]
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0,0,0);
 8014064:	2200      	movs	r2, #0
 8014066:	2100      	movs	r1, #0
 8014068:	2000      	movs	r0, #0
 801406a:	f7fd f8fd 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801406e:	4603      	mov	r3, r0
 8014070:	60bb      	str	r3, [r7, #8]
	colortype white_color = touchgfx::Color::getColorFrom24BitRGB(255,255,255);
 8014072:	22ff      	movs	r2, #255	; 0xff
 8014074:	21ff      	movs	r1, #255	; 0xff
 8014076:	20ff      	movs	r0, #255	; 0xff
 8014078:	f7fd f8f6 	bl	8011268 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801407c:	4603      	mov	r3, r0
 801407e:	607b      	str	r3, [r7, #4]

	colortype color_to_set;
 8014080:	463b      	mov	r3, r7
 8014082:	4618      	mov	r0, r3
 8014084:	f7ff ff1a 	bl	8013ebc <_ZN8touchgfx9colortypeC1Ev>

	if(color_index == 0)
 8014088:	4b0b      	ldr	r3, [pc, #44]	; (80140b8 <_ZL20getColorFromRevLimitv+0x80>)
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	2b00      	cmp	r3, #0
 801408e:	d101      	bne.n	8014094 <_ZL20getColorFromRevLimitv+0x5c>
	{
		color_to_set = red_color;
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	603b      	str	r3, [r7, #0]
	}
	if(color_index == 1)
 8014094:	4b08      	ldr	r3, [pc, #32]	; (80140b8 <_ZL20getColorFromRevLimitv+0x80>)
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	2b01      	cmp	r3, #1
 801409a:	d101      	bne.n	80140a0 <_ZL20getColorFromRevLimitv+0x68>
	{
		color_to_set = black_color;
 801409c:	68bb      	ldr	r3, [r7, #8]
 801409e:	603b      	str	r3, [r7, #0]
	}
	if(color_index == 2)
 80140a0:	4b05      	ldr	r3, [pc, #20]	; (80140b8 <_ZL20getColorFromRevLimitv+0x80>)
 80140a2:	681b      	ldr	r3, [r3, #0]
 80140a4:	2b02      	cmp	r3, #2
 80140a6:	d101      	bne.n	80140ac <_ZL20getColorFromRevLimitv+0x74>
	{
		color_to_set = white_color;
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	603b      	str	r3, [r7, #0]
	}

	return color_to_set;
 80140ac:	683b      	ldr	r3, [r7, #0]
}
 80140ae:	4618      	mov	r0, r3
 80140b0:	3710      	adds	r7, #16
 80140b2:	46bd      	mov	sp, r7
 80140b4:	bd80      	pop	{r7, pc}
 80140b6:	bf00      	nop
 80140b8:	20008e34 	.word	0x20008e34

080140bc <_ZN8MainView14updateSettingsEPh>:

void MainView::updateSettings(uint8_t* settings)
{
 80140bc:	b580      	push	{r7, lr}
 80140be:	b086      	sub	sp, #24
 80140c0:	af02      	add	r7, sp, #8
 80140c2:	6078      	str	r0, [r7, #4]
 80140c4:	6039      	str	r1, [r7, #0]
	settings_message* new_settings = (settings_message*) settings;
 80140c6:	683b      	ldr	r3, [r7, #0]
 80140c8:	60fb      	str	r3, [r7, #12]

	rev_limit = (int)new_settings->rpm_limit;
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	681b      	ldr	r3, [r3, #0]
 80140ce:	4a66      	ldr	r2, [pc, #408]	; (8014268 <_ZN8MainView14updateSettingsEPh+0x1ac>)
 80140d0:	6013      	str	r3, [r2, #0]

	RPMProgressBar.setRange(0, (int)(new_settings->rpm8*1000.0f), 0, 0);
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	f203 707c 	addw	r0, r3, #1916	; 0x77c
 80140d8:	68fb      	ldr	r3, [r7, #12]
 80140da:	6a1b      	ldr	r3, [r3, #32]
 80140dc:	ee07 3a90 	vmov	s15, r3
 80140e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80140e4:	ed9f 7a61 	vldr	s14, [pc, #388]	; 801426c <_ZN8MainView14updateSettingsEPh+0x1b0>
 80140e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80140ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80140f0:	ee17 3a90 	vmov	r3, s15
 80140f4:	b21a      	sxth	r2, r3
 80140f6:	2300      	movs	r3, #0
 80140f8:	9300      	str	r3, [sp, #0]
 80140fa:	2300      	movs	r3, #0
 80140fc:	2100      	movs	r1, #0
 80140fe:	f002 fd53 	bl	8016ba8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
	RPMProgressBar.invalidate();
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8014108:	4618      	mov	r0, r3
 801410a:	f006 fc4b 	bl	801a9a4 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(rpm1Buffer, RPM1_SIZE, "%d", new_settings->rpm1);
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	f503 6035 	add.w	r0, r3, #2896	; 0xb50
 8014114:	68fb      	ldr	r3, [r7, #12]
 8014116:	685b      	ldr	r3, [r3, #4]
 8014118:	4a55      	ldr	r2, [pc, #340]	; (8014270 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 801411a:	2102      	movs	r1, #2
 801411c:	f008 f870 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm1.resizeToCurrentText();
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014126:	4618      	mov	r0, r3
 8014128:	f004 fc96 	bl	8018a58 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm1.invalidate();
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014132:	4618      	mov	r0, r3
 8014134:	f006 fc36 	bl	801a9a4 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm2Buffer, RPM2_SIZE, "%d", new_settings->rpm2);
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	f603 3054 	addw	r0, r3, #2900	; 0xb54
 801413e:	68fb      	ldr	r3, [r7, #12]
 8014140:	689b      	ldr	r3, [r3, #8]
 8014142:	4a4b      	ldr	r2, [pc, #300]	; (8014270 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8014144:	2102      	movs	r1, #2
 8014146:	f008 f85b 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm2.resizeToCurrentText();
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8014150:	4618      	mov	r0, r3
 8014152:	f004 fc81 	bl	8018a58 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm2.invalidate();
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 801415c:	4618      	mov	r0, r3
 801415e:	f006 fc21 	bl	801a9a4 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm3Buffer, RPM3_SIZE, "%d", new_settings->rpm3);
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	f603 3058 	addw	r0, r3, #2904	; 0xb58
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	68db      	ldr	r3, [r3, #12]
 801416c:	4a40      	ldr	r2, [pc, #256]	; (8014270 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 801416e:	2102      	movs	r1, #2
 8014170:	f008 f846 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm3.resizeToCurrentText();
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	f503 7306 	add.w	r3, r3, #536	; 0x218
 801417a:	4618      	mov	r0, r3
 801417c:	f004 fc6c 	bl	8018a58 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm3.invalidate();
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8014186:	4618      	mov	r0, r3
 8014188:	f006 fc0c 	bl	801a9a4 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm4Buffer, RPM4_SIZE, "%d", new_settings->rpm4);
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	f603 305c 	addw	r0, r3, #2908	; 0xb5c
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	691b      	ldr	r3, [r3, #16]
 8014196:	4a36      	ldr	r2, [pc, #216]	; (8014270 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8014198:	2102      	movs	r1, #2
 801419a:	f008 f831 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm4.resizeToCurrentText();
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80141a4:	4618      	mov	r0, r3
 80141a6:	f004 fc57 	bl	8018a58 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm4.invalidate();
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80141b0:	4618      	mov	r0, r3
 80141b2:	f006 fbf7 	bl	801a9a4 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm5Buffer, RPM5_SIZE, "%d", new_settings->rpm5);
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	f503 6036 	add.w	r0, r3, #2912	; 0xb60
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	695b      	ldr	r3, [r3, #20]
 80141c0:	4a2b      	ldr	r2, [pc, #172]	; (8014270 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 80141c2:	2102      	movs	r1, #2
 80141c4:	f008 f81c 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm5.resizeToCurrentText();
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80141ce:	4618      	mov	r0, r3
 80141d0:	f004 fc42 	bl	8018a58 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm5.invalidate();
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80141da:	4618      	mov	r0, r3
 80141dc:	f006 fbe2 	bl	801a9a4 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm6Buffer, RPM6_SIZE, "%d", new_settings->rpm6);
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	f603 3064 	addw	r0, r3, #2916	; 0xb64
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	699b      	ldr	r3, [r3, #24]
 80141ea:	4a21      	ldr	r2, [pc, #132]	; (8014270 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 80141ec:	2102      	movs	r1, #2
 80141ee:	f008 f807 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm6.resizeToCurrentText();
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80141f8:	4618      	mov	r0, r3
 80141fa:	f004 fc2d 	bl	8018a58 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm6.invalidate();
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8014204:	4618      	mov	r0, r3
 8014206:	f006 fbcd 	bl	801a9a4 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm7Buffer, RPM7_SIZE, "%d", new_settings->rpm7);
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	f603 3068 	addw	r0, r3, #2920	; 0xb68
 8014210:	68fb      	ldr	r3, [r7, #12]
 8014212:	69db      	ldr	r3, [r3, #28]
 8014214:	4a16      	ldr	r2, [pc, #88]	; (8014270 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8014216:	2102      	movs	r1, #2
 8014218:	f007 fff2 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm7.resizeToCurrentText();
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8014222:	4618      	mov	r0, r3
 8014224:	f004 fc18 	bl	8018a58 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm7.invalidate();
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 801422e:	4618      	mov	r0, r3
 8014230:	f006 fbb8 	bl	801a9a4 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm8Buffer, RPM8_SIZE, "%d", new_settings->rpm8);
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	f603 306c 	addw	r0, r3, #2924	; 0xb6c
 801423a:	68fb      	ldr	r3, [r7, #12]
 801423c:	6a1b      	ldr	r3, [r3, #32]
 801423e:	4a0c      	ldr	r2, [pc, #48]	; (8014270 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8014240:	2102      	movs	r1, #2
 8014242:	f007 ffdd 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm8.resizeToCurrentText();
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	f503 734c 	add.w	r3, r3, #816	; 0x330
 801424c:	4618      	mov	r0, r3
 801424e:	f004 fc03 	bl	8018a58 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm8.invalidate();
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8014258:	4618      	mov	r0, r3
 801425a:	f006 fba3 	bl	801a9a4 <_ZNK8touchgfx8Drawable10invalidateEv>

}
 801425e:	bf00      	nop
 8014260:	3710      	adds	r7, #16
 8014262:	46bd      	mov	sp, r7
 8014264:	bd80      	pop	{r7, pc}
 8014266:	bf00      	nop
 8014268:	20000034 	.word	0x20000034
 801426c:	447a0000 	.word	0x447a0000
 8014270:	08027a04 	.word	0x08027a04

08014274 <_ZN8MainView9updateValEPh>:

void MainView::updateVal(uint8_t* newValue)
{
 8014274:	b590      	push	{r4, r7, lr}
 8014276:	b085      	sub	sp, #20
 8014278:	af00      	add	r7, sp, #0
 801427a:	6078      	str	r0, [r7, #4]
 801427c:	6039      	str	r1, [r7, #0]

	static bool background_is_black = false;
	display_values* values = (display_values*) newValue;
 801427e:	683b      	ldr	r3, [r7, #0]
 8014280:	60fb      	str	r3, [r7, #12]

	bool on_rev_limiter = values->rpm >= rev_limit;
 8014282:	68fb      	ldr	r3, [r7, #12]
 8014284:	681a      	ldr	r2, [r3, #0]
 8014286:	4b0e      	ldr	r3, [pc, #56]	; (80142c0 <_ZN8MainView9updateValEPh+0x4c>)
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	429a      	cmp	r2, r3
 801428c:	bfac      	ite	ge
 801428e:	2301      	movge	r3, #1
 8014290:	2300      	movlt	r3, #0
 8014292:	72fb      	strb	r3, [r7, #11]
	if(on_rev_limiter)
 8014294:	7afb      	ldrb	r3, [r7, #11]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d016      	beq.n	80142c8 <_ZN8MainView9updateValEPh+0x54>
	{
		background_is_black = false;
 801429a:	4b0a      	ldr	r3, [pc, #40]	; (80142c4 <_ZN8MainView9updateValEPh+0x50>)
 801429c:	2200      	movs	r2, #0
 801429e:	701a      	strb	r2, [r3, #0]
		backgroundBox.setColor(getColorFromRevLimit());
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80142a6:	f7ff fec7 	bl	8014038 <_ZL20getColorFromRevLimitv>
 80142aa:	4603      	mov	r3, r0
 80142ac:	4619      	mov	r1, r3
 80142ae:	4620      	mov	r0, r4
 80142b0:	f7fc fc8c 	bl	8010bcc <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	3340      	adds	r3, #64	; 0x40
 80142b8:	4618      	mov	r0, r3
 80142ba:	f006 fb73 	bl	801a9a4 <_ZNK8touchgfx8Drawable10invalidateEv>
 80142be:	e01c      	b.n	80142fa <_ZN8MainView9updateValEPh+0x86>
 80142c0:	20000034 	.word	0x20000034
 80142c4:	20008e64 	.word	0x20008e64
	}
	else if(!background_is_black){
 80142c8:	4bab      	ldr	r3, [pc, #684]	; (8014578 <_ZN8MainView9updateValEPh+0x304>)
 80142ca:	781b      	ldrb	r3, [r3, #0]
 80142cc:	f083 0301 	eor.w	r3, r3, #1
 80142d0:	b2db      	uxtb	r3, r3
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d011      	beq.n	80142fa <_ZN8MainView9updateValEPh+0x86>
		backgroundBox.setColor(getBlackColor());
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80142dc:	f7ff fe9c 	bl	8014018 <_ZL13getBlackColorv>
 80142e0:	4603      	mov	r3, r0
 80142e2:	4619      	mov	r1, r3
 80142e4:	4620      	mov	r0, r4
 80142e6:	f7fc fc71 	bl	8010bcc <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	3340      	adds	r3, #64	; 0x40
 80142ee:	4618      	mov	r0, r3
 80142f0:	f006 fb58 	bl	801a9a4 <_ZNK8touchgfx8Drawable10invalidateEv>
		background_is_black = true;
 80142f4:	4ba0      	ldr	r3, [pc, #640]	; (8014578 <_ZN8MainView9updateValEPh+0x304>)
 80142f6:	2201      	movs	r2, #1
 80142f8:	701a      	strb	r2, [r3, #0]
	}

	if(values->rpm != prev_rpm) {
 80142fa:	68fb      	ldr	r3, [r7, #12]
 80142fc:	681a      	ldr	r2, [r3, #0]
 80142fe:	4b9f      	ldr	r3, [pc, #636]	; (801457c <_ZN8MainView9updateValEPh+0x308>)
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	429a      	cmp	r2, r3
 8014304:	d021      	beq.n	801434a <_ZN8MainView9updateValEPh+0xd6>
		prev_rpm = values->rpm;
 8014306:	68fb      	ldr	r3, [r7, #12]
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	4a9c      	ldr	r2, [pc, #624]	; (801457c <_ZN8MainView9updateValEPh+0x308>)
 801430c:	6013      	str	r3, [r2, #0]
		RPMProgressBar.setValue(values->rpm);
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	f203 727c 	addw	r2, r3, #1916	; 0x77c
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	4619      	mov	r1, r3
 801431a:	4610      	mov	r0, r2
 801431c:	f002 fb2e 	bl	801697c <_ZN8touchgfx13ImageProgress8setValueEi>
		RPMProgressBar.invalidate();
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8014326:	4618      	mov	r0, r3
 8014328:	f006 fb3c 	bl	801a9a4 <_ZNK8touchgfx8Drawable10invalidateEv>

		Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%d", values->rpm);
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	f603 3098 	addw	r0, r3, #2968	; 0xb98
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	681b      	ldr	r3, [r3, #0]
 8014336:	4a92      	ldr	r2, [pc, #584]	; (8014580 <_ZN8MainView9updateValEPh+0x30c>)
 8014338:	2105      	movs	r1, #5
 801433a:	f007 ff61 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		RPMValue.invalidate();
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	f603 036c 	addw	r3, r3, #2156	; 0x86c
 8014344:	4618      	mov	r0, r3
 8014346:	f006 fb2d 	bl	801a9a4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->max_rpm != prev_max_rpm) {
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	685a      	ldr	r2, [r3, #4]
 801434e:	4b8d      	ldr	r3, [pc, #564]	; (8014584 <_ZN8MainView9updateValEPh+0x310>)
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	429a      	cmp	r2, r3
 8014354:	d012      	beq.n	801437c <_ZN8MainView9updateValEPh+0x108>
		prev_max_rpm = values->max_rpm;
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	685b      	ldr	r3, [r3, #4]
 801435a:	4a8a      	ldr	r2, [pc, #552]	; (8014584 <_ZN8MainView9updateValEPh+0x310>)
 801435c:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(MaxRPMValueBuffer, MAXRPMVALUE_SIZE, "%d", prev_max_rpm);
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	f603 30e8 	addw	r0, r3, #3048	; 0xbe8
 8014364:	4b87      	ldr	r3, [pc, #540]	; (8014584 <_ZN8MainView9updateValEPh+0x310>)
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	4a85      	ldr	r2, [pc, #532]	; (8014580 <_ZN8MainView9updateValEPh+0x30c>)
 801436a:	2105      	movs	r1, #5
 801436c:	f007 ff48 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		MaxRPMValue.invalidate();
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	f603 2394 	addw	r3, r3, #2708	; 0xa94
 8014376:	4618      	mov	r0, r3
 8014378:	f006 fb14 	bl	801a9a4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->clt != prev_clt) {
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	689a      	ldr	r2, [r3, #8]
 8014380:	4b81      	ldr	r3, [pc, #516]	; (8014588 <_ZN8MainView9updateValEPh+0x314>)
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	429a      	cmp	r2, r3
 8014386:	d012      	beq.n	80143ae <_ZN8MainView9updateValEPh+0x13a>
		prev_clt = values->clt;
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	689b      	ldr	r3, [r3, #8]
 801438c:	4a7e      	ldr	r2, [pc, #504]	; (8014588 <_ZN8MainView9updateValEPh+0x314>)
 801438e:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%d", values->clt);
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	f603 30a2 	addw	r0, r3, #2978	; 0xba2
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	689b      	ldr	r3, [r3, #8]
 801439a:	4a79      	ldr	r2, [pc, #484]	; (8014580 <_ZN8MainView9updateValEPh+0x30c>)
 801439c:	2105      	movs	r1, #5
 801439e:	f007 ff2f 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		CLTValue.invalidate();
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	f603 03d8 	addw	r3, r3, #2264	; 0x8d8
 80143a8:	4618      	mov	r0, r3
 80143aa:	f006 fafb 	bl	801a9a4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->max_clt != prev_max_clt) {
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	68da      	ldr	r2, [r3, #12]
 80143b2:	4b76      	ldr	r3, [pc, #472]	; (801458c <_ZN8MainView9updateValEPh+0x318>)
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	429a      	cmp	r2, r3
 80143b8:	d012      	beq.n	80143e0 <_ZN8MainView9updateValEPh+0x16c>
		prev_max_clt = values->max_clt;
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	68db      	ldr	r3, [r3, #12]
 80143be:	4a73      	ldr	r2, [pc, #460]	; (801458c <_ZN8MainView9updateValEPh+0x318>)
 80143c0:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(MaxCltValueBuffer, MAXCLTVALUE_SIZE, "%d", values->max_clt);
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	f603 30de 	addw	r0, r3, #3038	; 0xbde
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	68db      	ldr	r3, [r3, #12]
 80143cc:	4a6c      	ldr	r2, [pc, #432]	; (8014580 <_ZN8MainView9updateValEPh+0x30c>)
 80143ce:	2105      	movs	r1, #5
 80143d0:	f007 ff16 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		MaxCltValue.invalidate();
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 80143da:	4618      	mov	r0, r3
 80143dc:	f006 fae2 	bl	801a9a4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->lambda != prev_lambda) {
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	ed93 7a06 	vldr	s14, [r3, #24]
 80143e6:	4b6a      	ldr	r3, [pc, #424]	; (8014590 <_ZN8MainView9updateValEPh+0x31c>)
 80143e8:	edd3 7a00 	vldr	s15, [r3]
 80143ec:	eeb4 7a67 	vcmp.f32	s14, s15
 80143f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143f4:	d015      	beq.n	8014422 <_ZN8MainView9updateValEPh+0x1ae>
		prev_lambda = values->lambda;
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	699b      	ldr	r3, [r3, #24]
 80143fa:	4a65      	ldr	r2, [pc, #404]	; (8014590 <_ZN8MainView9updateValEPh+0x31c>)
 80143fc:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%.2f",values->lambda);
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	f603 303c 	addw	r0, r3, #2876	; 0xb3c
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	edd3 7a06 	vldr	s15, [r3, #24]
 801440a:	eeb0 0a67 	vmov.f32	s0, s15
 801440e:	4a61      	ldr	r2, [pc, #388]	; (8014594 <_ZN8MainView9updateValEPh+0x320>)
 8014410:	2105      	movs	r1, #5
 8014412:	f7ff fd61 	bl	8013ed8 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		LambdaValue.invalidate();
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 801441c:	4618      	mov	r0, r3
 801441e:	f006 fac1 	bl	801a9a4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->max_lambda != prev_max_lambda) {
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	ed93 7a07 	vldr	s14, [r3, #28]
 8014428:	4b5b      	ldr	r3, [pc, #364]	; (8014598 <_ZN8MainView9updateValEPh+0x324>)
 801442a:	edd3 7a00 	vldr	s15, [r3]
 801442e:	eeb4 7a67 	vcmp.f32	s14, s15
 8014432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014436:	d015      	beq.n	8014464 <_ZN8MainView9updateValEPh+0x1f0>
		prev_max_lambda = values->max_lambda;
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	69db      	ldr	r3, [r3, #28]
 801443c:	4a56      	ldr	r2, [pc, #344]	; (8014598 <_ZN8MainView9updateValEPh+0x324>)
 801443e:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(MaxLambdaValueBuffer, MAXLAMBDAVALUE_SIZE, "%.2f",values->max_lambda);
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	f603 30f2 	addw	r0, r3, #3058	; 0xbf2
 8014446:	68fb      	ldr	r3, [r7, #12]
 8014448:	edd3 7a07 	vldr	s15, [r3, #28]
 801444c:	eeb0 0a67 	vmov.f32	s0, s15
 8014450:	4a50      	ldr	r2, [pc, #320]	; (8014594 <_ZN8MainView9updateValEPh+0x320>)
 8014452:	2105      	movs	r1, #5
 8014454:	f7ff fd40 	bl	8013ed8 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		MaxLambdaValue.invalidate();
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	f603 23cc 	addw	r3, r3, #2764	; 0xacc
 801445e:	4618      	mov	r0, r3
 8014460:	f006 faa0 	bl	801a9a4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->oil_tmp != prev_oil_tmp) {
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	6a1a      	ldr	r2, [r3, #32]
 8014468:	4b4c      	ldr	r3, [pc, #304]	; (801459c <_ZN8MainView9updateValEPh+0x328>)
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	429a      	cmp	r2, r3
 801446e:	d012      	beq.n	8014496 <_ZN8MainView9updateValEPh+0x222>
		prev_oil_tmp = values->oil_tmp;
 8014470:	68fb      	ldr	r3, [r7, #12]
 8014472:	6a1b      	ldr	r3, [r3, #32]
 8014474:	4a49      	ldr	r2, [pc, #292]	; (801459c <_ZN8MainView9updateValEPh+0x328>)
 8014476:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%d",values->oil_tmp);
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	f603 307a 	addw	r0, r3, #2938	; 0xb7a
 801447e:	68fb      	ldr	r3, [r7, #12]
 8014480:	6a1b      	ldr	r3, [r3, #32]
 8014482:	4a3f      	ldr	r2, [pc, #252]	; (8014580 <_ZN8MainView9updateValEPh+0x30c>)
 8014484:	2105      	movs	r1, #5
 8014486:	f007 febb 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		OILTempValue.invalidate();
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8014490:	4618      	mov	r0, r3
 8014492:	f006 fa87 	bl	801a9a4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->max_oil_tmp != prev_max_oil_tmp) {
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801449a:	4b41      	ldr	r3, [pc, #260]	; (80145a0 <_ZN8MainView9updateValEPh+0x32c>)
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	429a      	cmp	r2, r3
 80144a0:	d012      	beq.n	80144c8 <_ZN8MainView9updateValEPh+0x254>
		prev_max_oil_tmp = values->max_oil_tmp;
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144a6:	4a3e      	ldr	r2, [pc, #248]	; (80145a0 <_ZN8MainView9updateValEPh+0x32c>)
 80144a8:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(MaxOilTValueBuffer, MAXOILTVALUE_SIZE, "%d",values->max_oil_tmp);
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	f603 30d4 	addw	r0, r3, #3028	; 0xbd4
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144b4:	4a32      	ldr	r2, [pc, #200]	; (8014580 <_ZN8MainView9updateValEPh+0x30c>)
 80144b6:	2105      	movs	r1, #5
 80144b8:	f007 fea2 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		MaxOilTValue.invalidate();
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	f603 2324 	addw	r3, r3, #2596	; 0xa24
 80144c2:	4618      	mov	r0, r3
 80144c4:	f006 fa6e 	bl	801a9a4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->oil_press != prev_oil_press) {
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80144ce:	4b35      	ldr	r3, [pc, #212]	; (80145a4 <_ZN8MainView9updateValEPh+0x330>)
 80144d0:	edd3 7a00 	vldr	s15, [r3]
 80144d4:	eeb4 7a67 	vcmp.f32	s14, s15
 80144d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144dc:	d015      	beq.n	801450a <_ZN8MainView9updateValEPh+0x296>
		prev_oil_press = values->oil_press;
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80144e2:	4a30      	ldr	r2, [pc, #192]	; (80145a4 <_ZN8MainView9updateValEPh+0x330>)
 80144e4:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%.1f",values->oil_press);
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	f603 3084 	addw	r0, r3, #2948	; 0xb84
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80144f2:	eeb0 0a67 	vmov.f32	s0, s15
 80144f6:	4a2c      	ldr	r2, [pc, #176]	; (80145a8 <_ZN8MainView9updateValEPh+0x334>)
 80144f8:	2105      	movs	r1, #5
 80144fa:	f7ff fced 	bl	8013ed8 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		OILPressureValue.invalidate();
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014504:	4618      	mov	r0, r3
 8014506:	f006 fa4d 	bl	801a9a4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->min_oil_press != prev_min_oil_press) {
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8014510:	4b26      	ldr	r3, [pc, #152]	; (80145ac <_ZN8MainView9updateValEPh+0x338>)
 8014512:	edd3 7a00 	vldr	s15, [r3]
 8014516:	eeb4 7a67 	vcmp.f32	s14, s15
 801451a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801451e:	d015      	beq.n	801454c <_ZN8MainView9updateValEPh+0x2d8>
		prev_min_oil_press = values->min_oil_press;
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014524:	4a21      	ldr	r2, [pc, #132]	; (80145ac <_ZN8MainView9updateValEPh+0x338>)
 8014526:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(MinOilPValueBuffer, MINOILPVALUE_SIZE, "%.1f",values->min_oil_press);
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	f603 30ca 	addw	r0, r3, #3018	; 0xbca
 801452e:	68fb      	ldr	r3, [r7, #12]
 8014530:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8014534:	eeb0 0a67 	vmov.f32	s0, s15
 8014538:	4a1b      	ldr	r2, [pc, #108]	; (80145a8 <_ZN8MainView9updateValEPh+0x334>)
 801453a:	2105      	movs	r1, #5
 801453c:	f7ff fccc 	bl	8013ed8 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		MinOilPValue.invalidate();
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	f603 13ec 	addw	r3, r3, #2540	; 0x9ec
 8014546:	4618      	mov	r0, r3
 8014548:	f006 fa2c 	bl	801a9a4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->fuel_press != prev_fuel_press) {
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014550:	4b17      	ldr	r3, [pc, #92]	; (80145b0 <_ZN8MainView9updateValEPh+0x33c>)
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	429a      	cmp	r2, r3
 8014556:	d032      	beq.n	80145be <_ZN8MainView9updateValEPh+0x34a>
		prev_fuel_press = values->fuel_press;
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801455c:	4a14      	ldr	r2, [pc, #80]	; (80145b0 <_ZN8MainView9updateValEPh+0x33c>)
 801455e:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(FuelPValueBuffer, FUELPVALUE_SIZE, "%d",values->fuel_press);
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	f603 30ac 	addw	r0, r3, #2988	; 0xbac
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801456a:	4a05      	ldr	r2, [pc, #20]	; (8014580 <_ZN8MainView9updateValEPh+0x30c>)
 801456c:	2105      	movs	r1, #5
 801456e:	f007 fe47 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		FuelPValue.invalidate();
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	e01e      	b.n	80145b4 <_ZN8MainView9updateValEPh+0x340>
 8014576:	bf00      	nop
 8014578:	20008e64 	.word	0x20008e64
 801457c:	20000038 	.word	0x20000038
 8014580:	08027a04 	.word	0x08027a04
 8014584:	2000003c 	.word	0x2000003c
 8014588:	20008e40 	.word	0x20008e40
 801458c:	20008e44 	.word	0x20008e44
 8014590:	20000040 	.word	0x20000040
 8014594:	08027a08 	.word	0x08027a08
 8014598:	20000044 	.word	0x20000044
 801459c:	20008e48 	.word	0x20008e48
 80145a0:	20008e4c 	.word	0x20008e4c
 80145a4:	20008e50 	.word	0x20008e50
 80145a8:	08027a10 	.word	0x08027a10
 80145ac:	20000048 	.word	0x20000048
 80145b0:	20008e54 	.word	0x20008e54
 80145b4:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 80145b8:	4618      	mov	r0, r3
 80145ba:	f006 f9f3 	bl	801a9a4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->min_fuel_press != prev_min_fuel_press) {
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80145c2:	4b57      	ldr	r3, [pc, #348]	; (8014720 <_ZN8MainView9updateValEPh+0x4ac>)
 80145c4:	681b      	ldr	r3, [r3, #0]
 80145c6:	429a      	cmp	r2, r3
 80145c8:	d012      	beq.n	80145f0 <_ZN8MainView9updateValEPh+0x37c>
		prev_min_fuel_press = values->fuel_press;
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80145ce:	4a54      	ldr	r2, [pc, #336]	; (8014720 <_ZN8MainView9updateValEPh+0x4ac>)
 80145d0:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(MinFuelPValueBuffer, MINFUELPVALUE_SIZE, "%d",values->min_fuel_press);
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	f503 603c 	add.w	r0, r3, #3008	; 0xbc0
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80145dc:	4a51      	ldr	r2, [pc, #324]	; (8014724 <_ZN8MainView9updateValEPh+0x4b0>)
 80145de:	2105      	movs	r1, #5
 80145e0:	f007 fe0e 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		MinFuelPValue.invalidate();
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	f603 13b4 	addw	r3, r3, #2484	; 0x9b4
 80145ea:	4618      	mov	r0, r3
 80145ec:	f006 f9da 	bl	801a9a4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->speed != prev_speed) {
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	691a      	ldr	r2, [r3, #16]
 80145f4:	4b4c      	ldr	r3, [pc, #304]	; (8014728 <_ZN8MainView9updateValEPh+0x4b4>)
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	429a      	cmp	r2, r3
 80145fa:	d012      	beq.n	8014622 <_ZN8MainView9updateValEPh+0x3ae>
		prev_speed = values->speed;
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	691b      	ldr	r3, [r3, #16]
 8014600:	4a49      	ldr	r2, [pc, #292]	; (8014728 <_ZN8MainView9updateValEPh+0x4b4>)
 8014602:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(SpeedValueBuffer, SPEEDVALUE_SIZE, "%d",values->speed);
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	f603 3046 	addw	r0, r3, #2886	; 0xb46
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	691b      	ldr	r3, [r3, #16]
 801460e:	4a45      	ldr	r2, [pc, #276]	; (8014724 <_ZN8MainView9updateValEPh+0x4b0>)
 8014610:	2105      	movs	r1, #5
 8014612:	f007 fdf5 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		SpeedValue.invalidate();
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801461c:	4618      	mov	r0, r3
 801461e:	f006 f9c1 	bl	801a9a4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->max_speed != prev_max_speed) {
 8014622:	68fb      	ldr	r3, [r7, #12]
 8014624:	695a      	ldr	r2, [r3, #20]
 8014626:	4b41      	ldr	r3, [pc, #260]	; (801472c <_ZN8MainView9updateValEPh+0x4b8>)
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	429a      	cmp	r2, r3
 801462c:	d012      	beq.n	8014654 <_ZN8MainView9updateValEPh+0x3e0>
		prev_max_speed = values->max_speed;
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	695b      	ldr	r3, [r3, #20]
 8014632:	4a3e      	ldr	r2, [pc, #248]	; (801472c <_ZN8MainView9updateValEPh+0x4b8>)
 8014634:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(MaxSpeedValueBuffer, MAXSPEEDVALUE_SIZE, "%d",values->max_speed);
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	f603 30fc 	addw	r0, r3, #3068	; 0xbfc
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	695b      	ldr	r3, [r3, #20]
 8014640:	4a38      	ldr	r2, [pc, #224]	; (8014724 <_ZN8MainView9updateValEPh+0x4b0>)
 8014642:	2105      	movs	r1, #5
 8014644:	f007 fddc 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		MaxSpeedValue.invalidate();
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	f603 3304 	addw	r3, r3, #2820	; 0xb04
 801464e:	4618      	mov	r0, r3
 8014650:	f006 f9a8 	bl	801a9a4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->iat != prev_iat) {
 8014654:	68fb      	ldr	r3, [r7, #12]
 8014656:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014658:	4b35      	ldr	r3, [pc, #212]	; (8014730 <_ZN8MainView9updateValEPh+0x4bc>)
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	429a      	cmp	r2, r3
 801465e:	d012      	beq.n	8014686 <_ZN8MainView9updateValEPh+0x412>
		prev_iat = values->iat;
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014664:	4a32      	ldr	r2, [pc, #200]	; (8014730 <_ZN8MainView9updateValEPh+0x4bc>)
 8014666:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%d",values->iat);
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	f503 6037 	add.w	r0, r3, #2928	; 0xb70
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014672:	4a2c      	ldr	r2, [pc, #176]	; (8014724 <_ZN8MainView9updateValEPh+0x4b0>)
 8014674:	2105      	movs	r1, #5
 8014676:	f007 fdc3 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		IATValue.invalidate();
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8014680:	4618      	mov	r0, r3
 8014682:	f006 f98f 	bl	801a9a4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->tps != prev_tps) {
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801468a:	4b2a      	ldr	r3, [pc, #168]	; (8014734 <_ZN8MainView9updateValEPh+0x4c0>)
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	429a      	cmp	r2, r3
 8014690:	d021      	beq.n	80146d6 <_ZN8MainView9updateValEPh+0x462>
		prev_tps = values->tps;
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014696:	4a27      	ldr	r2, [pc, #156]	; (8014734 <_ZN8MainView9updateValEPh+0x4c0>)
 8014698:	6013      	str	r3, [r2, #0]
		TPSProgress.setValue(values->tps);
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	f203 526c 	addw	r2, r3, #1388	; 0x56c
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80146a4:	4619      	mov	r1, r3
 80146a6:	4610      	mov	r0, r2
 80146a8:	f002 f818 	bl	80166dc <_ZN8touchgfx11BoxProgress8setValueEi>
		RPMProgressBar.invalidate();
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 80146b2:	4618      	mov	r0, r3
 80146b4:	f006 f976 	bl	801a9a4 <_ZNK8touchgfx8Drawable10invalidateEv>
		Unicode::snprintf(TpsNumberValueBuffer, TPSNUMBERVALUE_SIZE, "%d",values->tps);
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	f603 30b6 	addw	r0, r3, #2998	; 0xbb6
 80146be:	68fb      	ldr	r3, [r7, #12]
 80146c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80146c2:	4a18      	ldr	r2, [pc, #96]	; (8014724 <_ZN8MainView9updateValEPh+0x4b0>)
 80146c4:	2105      	movs	r1, #5
 80146c6:	f007 fd9b 	bl	801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		TpsNumberValue.invalidate();
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	f603 137c 	addw	r3, r3, #2428	; 0x97c
 80146d0:	4618      	mov	r0, r3
 80146d2:	f006 f967 	bl	801a9a4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->batt_v != prev_batt_v) {
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80146dc:	4b16      	ldr	r3, [pc, #88]	; (8014738 <_ZN8MainView9updateValEPh+0x4c4>)
 80146de:	edd3 7a00 	vldr	s15, [r3]
 80146e2:	eeb4 7a67 	vcmp.f32	s14, s15
 80146e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146ea:	d015      	beq.n	8014718 <_ZN8MainView9updateValEPh+0x4a4>
		prev_batt_v = values->batt_v;
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146f0:	4a11      	ldr	r2, [pc, #68]	; (8014738 <_ZN8MainView9updateValEPh+0x4c4>)
 80146f2:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%.2f",values->batt_v);
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	f603 308e 	addw	r0, r3, #2958	; 0xb8e
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8014700:	eeb0 0a67 	vmov.f32	s0, s15
 8014704:	4a0d      	ldr	r2, [pc, #52]	; (801473c <_ZN8MainView9updateValEPh+0x4c8>)
 8014706:	2105      	movs	r1, #5
 8014708:	f7ff fbe6 	bl	8013ed8 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		BatteryVoltage.invalidate();
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	f203 7344 	addw	r3, r3, #1860	; 0x744
 8014712:	4618      	mov	r0, r3
 8014714:	f006 f946 	bl	801a9a4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}
}
 8014718:	bf00      	nop
 801471a:	3714      	adds	r7, #20
 801471c:	46bd      	mov	sp, r7
 801471e:	bd90      	pop	{r4, r7, pc}
 8014720:	2000004c 	.word	0x2000004c
 8014724:	08027a04 	.word	0x08027a04
 8014728:	20008e38 	.word	0x20008e38
 801472c:	20008e3c 	.word	0x20008e3c
 8014730:	20008e58 	.word	0x20008e58
 8014734:	20008e5c 	.word	0x20008e5c
 8014738:	20008e60 	.word	0x20008e60
 801473c:	08027a08 	.word	0x08027a08

08014740 <_ZN5ModelC1Ev>:
{
	xQueueHandle messageQ;
	xQueueHandle settingsMessageQ;
}

Model::Model() : modelListener(0)
 8014740:	b580      	push	{r7, lr}
 8014742:	b082      	sub	sp, #8
 8014744:	af00      	add	r7, sp, #0
 8014746:	6078      	str	r0, [r7, #4]
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	2200      	movs	r2, #0
 801474c:	601a      	str	r2, [r3, #0]
{
	messageQ = xQueueGenericCreate(1, sizeof(display_values), 0);
 801474e:	2200      	movs	r2, #0
 8014750:	2144      	movs	r1, #68	; 0x44
 8014752:	2001      	movs	r0, #1
 8014754:	f7f8 fa86 	bl	800cc64 <xQueueGenericCreate>
 8014758:	4603      	mov	r3, r0
 801475a:	4a07      	ldr	r2, [pc, #28]	; (8014778 <_ZN5ModelC1Ev+0x38>)
 801475c:	6013      	str	r3, [r2, #0]
	settingsMessageQ = xQueueGenericCreate(1, sizeof(settings_message), 0);
 801475e:	2200      	movs	r2, #0
 8014760:	2128      	movs	r1, #40	; 0x28
 8014762:	2001      	movs	r0, #1
 8014764:	f7f8 fa7e 	bl	800cc64 <xQueueGenericCreate>
 8014768:	4603      	mov	r3, r0
 801476a:	4a04      	ldr	r2, [pc, #16]	; (801477c <_ZN5ModelC1Ev+0x3c>)
 801476c:	6013      	str	r3, [r2, #0]
}
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	4618      	mov	r0, r3
 8014772:	3708      	adds	r7, #8
 8014774:	46bd      	mov	sp, r7
 8014776:	bd80      	pop	{r7, pc}
 8014778:	20008ed4 	.word	0x20008ed4
 801477c:	20008ed8 	.word	0x20008ed8

08014780 <_ZN5Model4tickEv>:

void Model::tick()
{
 8014780:	b580      	push	{r7, lr}
 8014782:	b082      	sub	sp, #8
 8014784:	af00      	add	r7, sp, #0
 8014786:	6078      	str	r0, [r7, #4]
	if(xQueueReceive(messageQ, &values , 0) == pdTRUE)
 8014788:	4b1a      	ldr	r3, [pc, #104]	; (80147f4 <_ZN5Model4tickEv+0x74>)
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	2200      	movs	r2, #0
 801478e:	491a      	ldr	r1, [pc, #104]	; (80147f8 <_ZN5Model4tickEv+0x78>)
 8014790:	4618      	mov	r0, r3
 8014792:	f7f8 fd05 	bl	800d1a0 <xQueueReceive>
 8014796:	4603      	mov	r3, r0
 8014798:	2b01      	cmp	r3, #1
 801479a:	bf0c      	ite	eq
 801479c:	2301      	moveq	r3, #1
 801479e:	2300      	movne	r3, #0
 80147a0:	b2db      	uxtb	r3, r3
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d009      	beq.n	80147ba <_ZN5Model4tickEv+0x3a>
	{
		modelListener->setNewValue(values);
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	681a      	ldr	r2, [r3, #0]
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	3308      	adds	r3, #8
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	4910      	ldr	r1, [pc, #64]	; (80147f8 <_ZN5Model4tickEv+0x78>)
 80147b6:	4610      	mov	r0, r2
 80147b8:	4798      	blx	r3
	}

	if(xQueueReceive(settingsMessageQ, &settings_value , 0) == pdTRUE)
 80147ba:	4b10      	ldr	r3, [pc, #64]	; (80147fc <_ZN5Model4tickEv+0x7c>)
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	2200      	movs	r2, #0
 80147c0:	490f      	ldr	r1, [pc, #60]	; (8014800 <_ZN5Model4tickEv+0x80>)
 80147c2:	4618      	mov	r0, r3
 80147c4:	f7f8 fcec 	bl	800d1a0 <xQueueReceive>
 80147c8:	4603      	mov	r3, r0
 80147ca:	2b01      	cmp	r3, #1
 80147cc:	bf0c      	ite	eq
 80147ce:	2301      	moveq	r3, #1
 80147d0:	2300      	movne	r3, #0
 80147d2:	b2db      	uxtb	r3, r3
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d009      	beq.n	80147ec <_ZN5Model4tickEv+0x6c>
	{
		modelListener->updateDisplaySettings(settings_value);
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	681a      	ldr	r2, [r3, #0]
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	330c      	adds	r3, #12
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	4906      	ldr	r1, [pc, #24]	; (8014800 <_ZN5Model4tickEv+0x80>)
 80147e8:	4610      	mov	r0, r2
 80147ea:	4798      	blx	r3
	}
}
 80147ec:	bf00      	nop
 80147ee:	3708      	adds	r7, #8
 80147f0:	46bd      	mov	sp, r7
 80147f2:	bd80      	pop	{r7, pc}
 80147f4:	20008ed4 	.word	0x20008ed4
 80147f8:	20008e68 	.word	0x20008e68
 80147fc:	20008ed8 	.word	0x20008ed8
 8014800:	20008eac 	.word	0x20008eac

08014804 <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 8014804:	b480      	push	{r7}
 8014806:	b083      	sub	sp, #12
 8014808:	af00      	add	r7, sp, #0
 801480a:	6078      	str	r0, [r7, #4]
    {
 801480c:	4a04      	ldr	r2, [pc, #16]	; (8014820 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	601a      	str	r2, [r3, #0]
    }
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	4618      	mov	r0, r3
 8014816:	370c      	adds	r7, #12
 8014818:	46bd      	mov	sp, r7
 801481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801481e:	4770      	bx	lr
 8014820:	0802805c 	.word	0x0802805c

08014824 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8014824:	b580      	push	{r7, lr}
 8014826:	b082      	sub	sp, #8
 8014828:	af00      	add	r7, sp, #0
 801482a:	6078      	str	r0, [r7, #4]
    }
 801482c:	6878      	ldr	r0, [r7, #4]
 801482e:	f7ff ffe9 	bl	8014804 <_ZN8touchgfx15TouchControllerD1Ev>
 8014832:	2104      	movs	r1, #4
 8014834:	6878      	ldr	r0, [r7, #4]
 8014836:	f011 fc4d 	bl	80260d4 <_ZdlPvj>
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	4618      	mov	r0, r3
 801483e:	3708      	adds	r7, #8
 8014840:	46bd      	mov	sp, r7
 8014842:	bd80      	pop	{r7, pc}

08014844 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8014844:	b480      	push	{r7}
 8014846:	b083      	sub	sp, #12
 8014848:	af00      	add	r7, sp, #0
 801484a:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 801484c:	bf00      	nop
 801484e:	370c      	adds	r7, #12
 8014850:	46bd      	mov	sp, r7
 8014852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014856:	4770      	bx	lr

08014858 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8014858:	b480      	push	{r7}
 801485a:	b085      	sub	sp, #20
 801485c:	af00      	add	r7, sp, #0
 801485e:	60f8      	str	r0, [r7, #12]
 8014860:	60b9      	str	r1, [r7, #8]
 8014862:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8014864:	2300      	movs	r3, #0
}
 8014866:	4618      	mov	r0, r3
 8014868:	3714      	adds	r7, #20
 801486a:	46bd      	mov	sp, r7
 801486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014870:	4770      	bx	lr
	...

08014874 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8014874:	b580      	push	{r7, lr}
 8014876:	b082      	sub	sp, #8
 8014878:	af00      	add	r7, sp, #0
 801487a:	6078      	str	r0, [r7, #4]
 801487c:	4a05      	ldr	r2, [pc, #20]	; (8014894 <_ZN20STM32TouchControllerD1Ev+0x20>)
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	601a      	str	r2, [r3, #0]
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	4618      	mov	r0, r3
 8014886:	f7ff ffbd 	bl	8014804 <_ZN8touchgfx15TouchControllerD1Ev>
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	4618      	mov	r0, r3
 801488e:	3708      	adds	r7, #8
 8014890:	46bd      	mov	sp, r7
 8014892:	bd80      	pop	{r7, pc}
 8014894:	08028044 	.word	0x08028044

08014898 <_ZN20STM32TouchControllerD0Ev>:
 8014898:	b580      	push	{r7, lr}
 801489a:	b082      	sub	sp, #8
 801489c:	af00      	add	r7, sp, #0
 801489e:	6078      	str	r0, [r7, #4]
 80148a0:	6878      	ldr	r0, [r7, #4]
 80148a2:	f7ff ffe7 	bl	8014874 <_ZN20STM32TouchControllerD1Ev>
 80148a6:	2104      	movs	r1, #4
 80148a8:	6878      	ldr	r0, [r7, #4]
 80148aa:	f011 fc13 	bl	80260d4 <_ZdlPvj>
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	4618      	mov	r0, r3
 80148b2:	3708      	adds	r7, #8
 80148b4:	46bd      	mov	sp, r7
 80148b6:	bd80      	pop	{r7, pc}

080148b8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80148b8:	b480      	push	{r7}
 80148ba:	b083      	sub	sp, #12
 80148bc:	af00      	add	r7, sp, #0
 80148be:	4603      	mov	r3, r0
 80148c0:	71fb      	strb	r3, [r7, #7]

}
 80148c2:	bf00      	nop
 80148c4:	370c      	adds	r7, #12
 80148c6:	46bd      	mov	sp, r7
 80148c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148cc:	4770      	bx	lr

080148ce <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 80148ce:	b480      	push	{r7}
 80148d0:	b083      	sub	sp, #12
 80148d2:	af00      	add	r7, sp, #0
 80148d4:	4603      	mov	r3, r0
 80148d6:	71fb      	strb	r3, [r7, #7]

}
 80148d8:	bf00      	nop
 80148da:	370c      	adds	r7, #12
 80148dc:	46bd      	mov	sp, r7
 80148de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148e2:	4770      	bx	lr

080148e4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80148e4:	b480      	push	{r7}
 80148e6:	b083      	sub	sp, #12
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	4603      	mov	r3, r0
 80148ec:	71fb      	strb	r3, [r7, #7]

}
 80148ee:	bf00      	nop
 80148f0:	370c      	adds	r7, #12
 80148f2:	46bd      	mov	sp, r7
 80148f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148f8:	4770      	bx	lr
	...

080148fc <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 80148fc:	b480      	push	{r7}
 80148fe:	b083      	sub	sp, #12
 8014900:	af00      	add	r7, sp, #0
 8014902:	6078      	str	r0, [r7, #4]
    {
 8014904:	4a04      	ldr	r2, [pc, #16]	; (8014918 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	601a      	str	r2, [r3, #0]
    }
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	4618      	mov	r0, r3
 801490e:	370c      	adds	r7, #12
 8014910:	46bd      	mov	sp, r7
 8014912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014916:	4770      	bx	lr
 8014918:	08028d3c 	.word	0x08028d3c

0801491c <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 801491c:	b580      	push	{r7, lr}
 801491e:	b082      	sub	sp, #8
 8014920:	af00      	add	r7, sp, #0
 8014922:	6078      	str	r0, [r7, #4]
    }
 8014924:	6878      	ldr	r0, [r7, #4]
 8014926:	f7ff ffe9 	bl	80148fc <_ZN8touchgfx3HALD1Ev>
 801492a:	2178      	movs	r1, #120	; 0x78
 801492c:	6878      	ldr	r0, [r7, #4]
 801492e:	f011 fbd1 	bl	80260d4 <_ZdlPvj>
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	4618      	mov	r0, r3
 8014936:	3708      	adds	r7, #8
 8014938:	46bd      	mov	sp, r7
 801493a:	bd80      	pop	{r7, pc}

0801493c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 801493c:	b480      	push	{r7}
 801493e:	b083      	sub	sp, #12
 8014940:	af00      	add	r7, sp, #0
 8014942:	6078      	str	r0, [r7, #4]
 8014944:	460b      	mov	r3, r1
 8014946:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	78fa      	ldrb	r2, [r7, #3]
 801494c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	2201      	movs	r2, #1
 8014954:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8014958:	bf00      	nop
 801495a:	370c      	adds	r7, #12
 801495c:	46bd      	mov	sp, r7
 801495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014962:	4770      	bx	lr

08014964 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *        As default, will return whatever blitcaps are reported by the associated DMA
     *        object.
     *
     * @return a bitmask of the supported blitcaps.
     */
    virtual BlitOperations getBlitCaps()
 8014964:	b580      	push	{r7, lr}
 8014966:	b082      	sub	sp, #8
 8014968:	af00      	add	r7, sp, #0
 801496a:	6078      	str	r0, [r7, #4]
    {
        return dma.getBlitCaps();
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	685a      	ldr	r2, [r3, #4]
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	685b      	ldr	r3, [r3, #4]
 8014974:	681b      	ldr	r3, [r3, #0]
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	4610      	mov	r0, r2
 801497a:	4798      	blx	r3
 801497c:	4603      	mov	r3, r0
    }
 801497e:	4618      	mov	r0, r3
 8014980:	3708      	adds	r7, #8
 8014982:	46bd      	mov	sp, r7
 8014984:	bd80      	pop	{r7, pc}

08014986 <_ZN8touchgfx3HAL15backPorchExitedEv>:
     * @brief Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     *        Has to be called from within the LCD IRQ rutine when the Back Porch Exit is
     *        reached.
     */
    virtual void backPorchExited()
 8014986:	b580      	push	{r7, lr}
 8014988:	b082      	sub	sp, #8
 801498a:	af00      	add	r7, sp, #0
 801498c:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 801498e:	6878      	ldr	r0, [r7, #4]
 8014990:	f003 f8fe 	bl	8017b90 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	3390      	adds	r3, #144	; 0x90
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	6878      	ldr	r0, [r7, #4]
 801499e:	4798      	blx	r3
    }
 80149a0:	bf00      	nop
 80149a2:	3708      	adds	r7, #8
 80149a4:	46bd      	mov	sp, r7
 80149a6:	bd80      	pop	{r7, pc}

080149a8 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 80149a8:	b480      	push	{r7}
 80149aa:	b083      	sub	sp, #12
 80149ac:	af00      	add	r7, sp, #0
 80149ae:	6078      	str	r0, [r7, #4]
 80149b0:	6039      	str	r1, [r7, #0]
    {
        return false;
 80149b2:	2300      	movs	r3, #0
    }
 80149b4:	4618      	mov	r0, r3
 80149b6:	370c      	adds	r7, #12
 80149b8:	46bd      	mov	sp, r7
 80149ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149be:	4770      	bx	lr

080149c0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useDoubleBuffering  (Optional) If true, reserve memory for an extra frame buffer.
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation storage.
     *
     * @deprecated Use the setFramaBufferStartAddress with 'format' parameter instead of 'depth'
     */
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 80149c0:	b590      	push	{r4, r7, lr}
 80149c2:	b08b      	sub	sp, #44	; 0x2c
 80149c4:	af00      	add	r7, sp, #0
 80149c6:	60f8      	str	r0, [r7, #12]
 80149c8:	60b9      	str	r1, [r7, #8]
 80149ca:	4611      	mov	r1, r2
 80149cc:	461a      	mov	r2, r3
 80149ce:	460b      	mov	r3, r1
 80149d0:	80fb      	strh	r3, [r7, #6]
 80149d2:	4613      	mov	r3, r2
 80149d4:	717b      	strb	r3, [r7, #5]
    {
        uint16_t stride = lcd().framebufferStride();
 80149d6:	f7fb f9ef 	bl	800fdb8 <_ZN8touchgfx3HAL3lcdEv>
 80149da:	4603      	mov	r3, r0
 80149dc:	681a      	ldr	r2, [r3, #0]
 80149de:	3228      	adds	r2, #40	; 0x28
 80149e0:	6812      	ldr	r2, [r2, #0]
 80149e2:	4618      	mov	r0, r3
 80149e4:	4790      	blx	r2
 80149e6:	4603      	mov	r3, r0
 80149e8:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 80149ea:	8b7b      	ldrh	r3, [r7, #26]
 80149ec:	4a25      	ldr	r2, [pc, #148]	; (8014a84 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xc4>)
 80149ee:	8812      	ldrh	r2, [r2, #0]
 80149f0:	fb02 f303 	mul.w	r3, r2, r3
 80149f4:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 80149f6:	68bb      	ldr	r3, [r7, #8]
 80149f8:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 80149fa:	2300      	movs	r3, #0
 80149fc:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 80149fe:	2300      	movs	r3, #0
 8014a00:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 8014a02:	797b      	ldrb	r3, [r7, #5]
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d005      	beq.n	8014a14 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 8014a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014a0a:	697b      	ldr	r3, [r7, #20]
 8014a0c:	4413      	add	r3, r2
 8014a0e:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 8014a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a12:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 8014a14:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d005      	beq.n	8014a28 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 8014a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014a1e:	697b      	ldr	r3, [r7, #20]
 8014a20:	4413      	add	r3, r2
 8014a22:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 8014a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a26:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 8014a28:	88fb      	ldrh	r3, [r7, #6]
 8014a2a:	2b02      	cmp	r3, #2
 8014a2c:	dc10      	bgt.n	8014a50 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x90>
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	dc13      	bgt.n	8014a5a <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x9a>
 8014a32:	e01c      	b.n	8014a6e <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xae>
 8014a34:	3b04      	subs	r3, #4
 8014a36:	4a14      	ldr	r2, [pc, #80]	; (8014a88 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xc8>)
 8014a38:	fa22 f303 	lsr.w	r3, r2, r3
 8014a3c:	f003 0301 	and.w	r3, r3, #1
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	bf14      	ite	ne
 8014a44:	2301      	movne	r3, #1
 8014a46:	2300      	moveq	r3, #0
 8014a48:	b2db      	uxtb	r3, r3
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d105      	bne.n	8014a5a <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x9a>
 8014a4e:	e00e      	b.n	8014a6e <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xae>
 8014a50:	2b20      	cmp	r3, #32
 8014a52:	dc0c      	bgt.n	8014a6e <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xae>
 8014a54:	2b04      	cmp	r3, #4
 8014a56:	daed      	bge.n	8014a34 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x74>
 8014a58:	e009      	b.n	8014a6e <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xae>
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	3374      	adds	r3, #116	; 0x74
 8014a60:	681c      	ldr	r4, [r3, #0]
 8014a62:	69fb      	ldr	r3, [r7, #28]
 8014a64:	6a3a      	ldr	r2, [r7, #32]
 8014a66:	68b9      	ldr	r1, [r7, #8]
 8014a68:	68f8      	ldr	r0, [r7, #12]
 8014a6a:	47a0      	blx	r4
            break;
 8014a6c:	e006      	b.n	8014a7c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xbc>
        default:
            assert(0 && "Unsupported bit depth");
 8014a6e:	4b07      	ldr	r3, [pc, #28]	; (8014a8c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xcc>)
 8014a70:	4a07      	ldr	r2, [pc, #28]	; (8014a90 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xd0>)
 8014a72:	f240 3125 	movw	r1, #805	; 0x325
 8014a76:	4807      	ldr	r0, [pc, #28]	; (8014a94 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xd4>)
 8014a78:	f011 fb5a 	bl	8026130 <__assert_func>
            break;
        }
    }
 8014a7c:	bf00      	nop
 8014a7e:	372c      	adds	r7, #44	; 0x2c
 8014a80:	46bd      	mov	sp, r7
 8014a82:	bd90      	pop	{r4, r7, pc}
 8014a84:	2000c5b0 	.word	0x2000c5b0
 8014a88:	10101011 	.word	0x10101011
 8014a8c:	08027a18 	.word	0x08027a18
 8014a90:	08027a38 	.word	0x08027a38
 8014a94:	08027a8c 	.word	0x08027a8c

08014a98 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     *
     * @param [in] frameBuffer      Buffer for frame buffer data, must be non-null.
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8014a98:	b580      	push	{r7, lr}
 8014a9a:	b084      	sub	sp, #16
 8014a9c:	af00      	add	r7, sp, #0
 8014a9e:	60f8      	str	r0, [r7, #12]
 8014aa0:	60b9      	str	r1, [r7, #8]
 8014aa2:	607a      	str	r2, [r7, #4]
 8014aa4:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8014aa6:	68bb      	ldr	r3, [r7, #8]
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d106      	bne.n	8014aba <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8014aac:	4b11      	ldr	r3, [pc, #68]	; (8014af4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8014aae:	4a12      	ldr	r2, [pc, #72]	; (8014af8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8014ab0:	f240 3137 	movw	r1, #823	; 0x337
 8014ab4:	4811      	ldr	r0, [pc, #68]	; (8014afc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8014ab6:	f011 fb3b 	bl	8026130 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	68ba      	ldr	r2, [r7, #8]
 8014abe:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8014ac0:	68fb      	ldr	r3, [r7, #12]
 8014ac2:	687a      	ldr	r2, [r7, #4]
 8014ac4:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	683a      	ldr	r2, [r7, #0]
 8014aca:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	bf14      	ite	ne
 8014ad2:	2301      	movne	r3, #1
 8014ad4:	2300      	moveq	r3, #0
 8014ad6:	b2da      	uxtb	r2, r3
 8014ad8:	4b09      	ldr	r3, [pc, #36]	; (8014b00 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8014ada:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8014adc:	683b      	ldr	r3, [r7, #0]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	bf14      	ite	ne
 8014ae2:	2301      	movne	r3, #1
 8014ae4:	2300      	moveq	r3, #0
 8014ae6:	b2da      	uxtb	r2, r3
 8014ae8:	4b06      	ldr	r3, [pc, #24]	; (8014b04 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8014aea:	701a      	strb	r2, [r3, #0]
    }
 8014aec:	bf00      	nop
 8014aee:	3710      	adds	r7, #16
 8014af0:	46bd      	mov	sp, r7
 8014af2:	bd80      	pop	{r7, pc}
 8014af4:	08027ad0 	.word	0x08027ad0
 8014af8:	08027b08 	.word	0x08027b08
 8014afc:	08027a8c 	.word	0x08027a8c
 8014b00:	2000c5b2 	.word	0x2000c5b2
 8014b04:	2000c5b3 	.word	0x2000c5b3

08014b08 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 8014b08:	b580      	push	{r7, lr}
 8014b0a:	b082      	sub	sp, #8
 8014b0c:	af00      	add	r7, sp, #0
 8014b0e:	6078      	str	r0, [r7, #4]
 8014b10:	460b      	mov	r3, r1
 8014b12:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d004      	beq.n	8014b26 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b20:	887a      	ldrh	r2, [r7, #2]
 8014b22:	4610      	mov	r0, r2
 8014b24:	4798      	blx	r3
        }
    }
 8014b26:	bf00      	nop
 8014b28:	3708      	adds	r7, #8
 8014b2a:	46bd      	mov	sp, r7
 8014b2c:	bd80      	pop	{r7, pc}

08014b2e <_ZN8touchgfx3HAL10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8014b2e:	b580      	push	{r7, lr}
 8014b30:	b082      	sub	sp, #8
 8014b32:	af00      	add	r7, sp, #0
 8014b34:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	685a      	ldr	r2, [r3, #4]
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	685b      	ldr	r3, [r3, #4]
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	3318      	adds	r3, #24
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	4610      	mov	r0, r2
 8014b46:	4798      	blx	r3
 8014b48:	4603      	mov	r3, r0
    }
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	3708      	adds	r7, #8
 8014b4e:	46bd      	mov	sp, r7
 8014b50:	bd80      	pop	{r7, pc}
	...

08014b54 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 8014b54:	b480      	push	{r7}
 8014b56:	b083      	sub	sp, #12
 8014b58:	af00      	add	r7, sp, #0
 8014b5a:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014b68:	429a      	cmp	r2, r3
 8014b6a:	d017      	beq.n	8014b9c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8014b6c:	4b1a      	ldr	r3, [pc, #104]	; (8014bd8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8014b6e:	781b      	ldrb	r3, [r3, #0]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d12a      	bne.n	8014bca <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8014b74:	4b19      	ldr	r3, [pc, #100]	; (8014bdc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8014b76:	881a      	ldrh	r2, [r3, #0]
 8014b78:	4b19      	ldr	r3, [pc, #100]	; (8014be0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8014b7a:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8014b7c:	4b19      	ldr	r3, [pc, #100]	; (8014be4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8014b7e:	881a      	ldrh	r2, [r3, #0]
 8014b80:	4b19      	ldr	r3, [pc, #100]	; (8014be8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8014b82:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8014b84:	4b16      	ldr	r3, [pc, #88]	; (8014be0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8014b86:	881a      	ldrh	r2, [r3, #0]
 8014b88:	4b16      	ldr	r3, [pc, #88]	; (8014be4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8014b8a:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8014b8c:	4b16      	ldr	r3, [pc, #88]	; (8014be8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8014b8e:	881a      	ldrh	r2, [r3, #0]
 8014b90:	4b12      	ldr	r3, [pc, #72]	; (8014bdc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8014b92:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8014b94:	4b10      	ldr	r3, [pc, #64]	; (8014bd8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8014b96:	2201      	movs	r2, #1
 8014b98:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8014b9a:	e016      	b.n	8014bca <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8014b9c:	4b0e      	ldr	r3, [pc, #56]	; (8014bd8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8014b9e:	781b      	ldrb	r3, [r3, #0]
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d012      	beq.n	8014bca <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8014ba4:	4b0f      	ldr	r3, [pc, #60]	; (8014be4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8014ba6:	881a      	ldrh	r2, [r3, #0]
 8014ba8:	4b0d      	ldr	r3, [pc, #52]	; (8014be0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8014baa:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8014bac:	4b0b      	ldr	r3, [pc, #44]	; (8014bdc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8014bae:	881a      	ldrh	r2, [r3, #0]
 8014bb0:	4b0d      	ldr	r3, [pc, #52]	; (8014be8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8014bb2:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8014bb4:	4b0c      	ldr	r3, [pc, #48]	; (8014be8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8014bb6:	881a      	ldrh	r2, [r3, #0]
 8014bb8:	4b0a      	ldr	r3, [pc, #40]	; (8014be4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8014bba:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8014bbc:	4b08      	ldr	r3, [pc, #32]	; (8014be0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8014bbe:	881a      	ldrh	r2, [r3, #0]
 8014bc0:	4b06      	ldr	r3, [pc, #24]	; (8014bdc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8014bc2:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8014bc4:	4b04      	ldr	r3, [pc, #16]	; (8014bd8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8014bc6:	2200      	movs	r2, #0
 8014bc8:	701a      	strb	r2, [r3, #0]
    }
 8014bca:	bf00      	nop
 8014bcc:	370c      	adds	r7, #12
 8014bce:	46bd      	mov	sp, r7
 8014bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bd4:	4770      	bx	lr
 8014bd6:	bf00      	nop
 8014bd8:	2000c5ac 	.word	0x2000c5ac
 8014bdc:	2000c5a8 	.word	0x2000c5a8
 8014be0:	2000c5ae 	.word	0x2000c5ae
 8014be4:	2000c5aa 	.word	0x2000c5aa
 8014be8:	2000c5b0 	.word	0x2000c5b0

08014bec <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8014bec:	b580      	push	{r7, lr}
 8014bee:	b082      	sub	sp, #8
 8014bf0:	af00      	add	r7, sp, #0
 8014bf2:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	4618      	mov	r0, r3
 8014bf8:	f002 fa4c 	bl	8017094 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8014bfc:	bf00      	nop
 8014bfe:	3708      	adds	r7, #8
 8014c00:	46bd      	mov	sp, r7
 8014c02:	bd80      	pop	{r7, pc}

08014c04 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8014c04:	b580      	push	{r7, lr}
 8014c06:	b082      	sub	sp, #8
 8014c08:	af00      	add	r7, sp, #0
 8014c0a:	6078      	str	r0, [r7, #4]
 8014c0c:	4a05      	ldr	r2, [pc, #20]	; (8014c24 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	601a      	str	r2, [r3, #0]
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	4618      	mov	r0, r3
 8014c16:	f7ff fe71 	bl	80148fc <_ZN8touchgfx3HALD1Ev>
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	4618      	mov	r0, r3
 8014c1e:	3708      	adds	r7, #8
 8014c20:	46bd      	mov	sp, r7
 8014c22:	bd80      	pop	{r7, pc}
 8014c24:	08028270 	.word	0x08028270

08014c28 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8014c28:	b580      	push	{r7, lr}
 8014c2a:	b082      	sub	sp, #8
 8014c2c:	af00      	add	r7, sp, #0
 8014c2e:	6078      	str	r0, [r7, #4]
 8014c30:	6878      	ldr	r0, [r7, #4]
 8014c32:	f7ff ffe7 	bl	8014c04 <_ZN20TouchGFXGeneratedHALD1Ev>
 8014c36:	2178      	movs	r1, #120	; 0x78
 8014c38:	6878      	ldr	r0, [r7, #4]
 8014c3a:	f011 fa4b 	bl	80260d4 <_ZdlPvj>
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	4618      	mov	r0, r3
 8014c42:	3708      	adds	r7, #8
 8014c44:	46bd      	mov	sp, r7
 8014c46:	bd80      	pop	{r7, pc}

08014c48 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8014c48:	b580      	push	{r7, lr}
 8014c4a:	b082      	sub	sp, #8
 8014c4c:	af00      	add	r7, sp, #0
 8014c4e:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	4618      	mov	r0, r3
 8014c54:	f7ff ffca 	bl	8014bec <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8014c58:	bf00      	nop
 8014c5a:	3708      	adds	r7, #8
 8014c5c:	46bd      	mov	sp, r7
 8014c5e:	bd80      	pop	{r7, pc}

08014c60 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8014c60:	b580      	push	{r7, lr}
 8014c62:	b082      	sub	sp, #8
 8014c64:	af00      	add	r7, sp, #0
 8014c66:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	4618      	mov	r0, r3
 8014c6c:	f001 fb1a 	bl	80162a4 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8014c70:	bf00      	nop
 8014c72:	3708      	adds	r7, #8
 8014c74:	46bd      	mov	sp, r7
 8014c76:	bd80      	pop	{r7, pc}

08014c78 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8014c78:	b580      	push	{r7, lr}
 8014c7a:	b082      	sub	sp, #8
 8014c7c:	af00      	add	r7, sp, #0
 8014c7e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	4618      	mov	r0, r3
 8014c84:	f001 fb9a 	bl	80163bc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8014c88:	4603      	mov	r3, r0
}
 8014c8a:	4618      	mov	r0, r3
 8014c8c:	3708      	adds	r7, #8
 8014c8e:	46bd      	mov	sp, r7
 8014c90:	bd80      	pop	{r7, pc}

08014c92 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8014c92:	b580      	push	{r7, lr}
 8014c94:	b082      	sub	sp, #8
 8014c96:	af00      	add	r7, sp, #0
 8014c98:	6078      	str	r0, [r7, #4]
 8014c9a:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	6839      	ldr	r1, [r7, #0]
 8014ca0:	4618      	mov	r0, r3
 8014ca2:	f001 fb99 	bl	80163d8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8014ca6:	bf00      	nop
 8014ca8:	3708      	adds	r7, #8
 8014caa:	46bd      	mov	sp, r7
 8014cac:	bd80      	pop	{r7, pc}

08014cae <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8014cae:	b580      	push	{r7, lr}
 8014cb0:	b082      	sub	sp, #8
 8014cb2:	af00      	add	r7, sp, #0
 8014cb4:	6078      	str	r0, [r7, #4]
 8014cb6:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	6839      	ldr	r1, [r7, #0]
 8014cbc:	4618      	mov	r0, r3
 8014cbe:	f001 fba1 	bl	8016404 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
}
 8014cc2:	bf00      	nop
 8014cc4:	3708      	adds	r7, #8
 8014cc6:	46bd      	mov	sp, r7
 8014cc8:	bd80      	pop	{r7, pc}

08014cca <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8014cca:	b580      	push	{r7, lr}
 8014ccc:	b082      	sub	sp, #8
 8014cce:	af00      	add	r7, sp, #0
 8014cd0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	4618      	mov	r0, r3
 8014cd6:	f001 fb17 	bl	8016308 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8014cda:	bf00      	nop
 8014cdc:	3708      	adds	r7, #8
 8014cde:	46bd      	mov	sp, r7
 8014ce0:	bd80      	pop	{r7, pc}

08014ce2 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8014ce2:	b580      	push	{r7, lr}
 8014ce4:	b082      	sub	sp, #8
 8014ce6:	af00      	add	r7, sp, #0
 8014ce8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	4618      	mov	r0, r3
 8014cee:	f001 fb1b 	bl	8016328 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8014cf2:	bf00      	nop
 8014cf4:	3708      	adds	r7, #8
 8014cf6:	46bd      	mov	sp, r7
 8014cf8:	bd80      	pop	{r7, pc}

08014cfa <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8014cfa:	b580      	push	{r7, lr}
 8014cfc:	b082      	sub	sp, #8
 8014cfe:	af00      	add	r7, sp, #0
 8014d00:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	4618      	mov	r0, r3
 8014d06:	f001 fb1d 	bl	8016344 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8014d0a:	bf00      	nop
 8014d0c:	3708      	adds	r7, #8
 8014d0e:	46bd      	mov	sp, r7
 8014d10:	bd80      	pop	{r7, pc}

08014d12 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8014d12:	b580      	push	{r7, lr}
 8014d14:	b082      	sub	sp, #8
 8014d16:	af00      	add	r7, sp, #0
 8014d18:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	4618      	mov	r0, r3
 8014d1e:	f001 fb1f 	bl	8016360 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8014d22:	bf00      	nop
 8014d24:	3708      	adds	r7, #8
 8014d26:	46bd      	mov	sp, r7
 8014d28:	bd80      	pop	{r7, pc}
	...

08014d2c <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8014d2c:	b580      	push	{r7, lr}
 8014d2e:	b082      	sub	sp, #8
 8014d30:	af00      	add	r7, sp, #0
 8014d32:	6078      	str	r0, [r7, #4]
 8014d34:	4a05      	ldr	r2, [pc, #20]	; (8014d4c <_ZN11TouchGFXHALD1Ev+0x20>)
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	601a      	str	r2, [r3, #0]
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	f7ff ff61 	bl	8014c04 <_ZN20TouchGFXGeneratedHALD1Ev>
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	4618      	mov	r0, r3
 8014d46:	3708      	adds	r7, #8
 8014d48:	46bd      	mov	sp, r7
 8014d4a:	bd80      	pop	{r7, pc}
 8014d4c:	08028074 	.word	0x08028074

08014d50 <_ZN11TouchGFXHALD0Ev>:
 8014d50:	b580      	push	{r7, lr}
 8014d52:	b082      	sub	sp, #8
 8014d54:	af00      	add	r7, sp, #0
 8014d56:	6078      	str	r0, [r7, #4]
 8014d58:	6878      	ldr	r0, [r7, #4]
 8014d5a:	f7ff ffe7 	bl	8014d2c <_ZN11TouchGFXHALD1Ev>
 8014d5e:	2178      	movs	r1, #120	; 0x78
 8014d60:	6878      	ldr	r0, [r7, #4]
 8014d62:	f011 f9b7 	bl	80260d4 <_ZdlPvj>
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	4618      	mov	r0, r3
 8014d6a:	3708      	adds	r7, #8
 8014d6c:	46bd      	mov	sp, r7
 8014d6e:	bd80      	pop	{r7, pc}

08014d70 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8014d70:	b580      	push	{r7, lr}
 8014d72:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 8014d74:	2203      	movs	r2, #3
 8014d76:	2100      	movs	r1, #0
 8014d78:	2001      	movs	r0, #1
 8014d7a:	f7f7 ff73 	bl	800cc64 <xQueueGenericCreate>
 8014d7e:	4603      	mov	r3, r0
 8014d80:	4a0b      	ldr	r2, [pc, #44]	; (8014db0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8014d82:	6013      	str	r3, [r2, #0]
 8014d84:	4b0a      	ldr	r3, [pc, #40]	; (8014db0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d006      	beq.n	8014d9a <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 8014d8c:	4b08      	ldr	r3, [pc, #32]	; (8014db0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8014d8e:	6818      	ldr	r0, [r3, #0]
 8014d90:	2300      	movs	r3, #0
 8014d92:	2200      	movs	r2, #0
 8014d94:	2100      	movs	r1, #0
 8014d96:	f7f7 ffc7 	bl	800cd28 <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 8014d9a:	2200      	movs	r2, #0
 8014d9c:	2101      	movs	r1, #1
 8014d9e:	2001      	movs	r0, #1
 8014da0:	f7f7 ff60 	bl	800cc64 <xQueueGenericCreate>
 8014da4:	4603      	mov	r3, r0
 8014da6:	4a03      	ldr	r2, [pc, #12]	; (8014db4 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8014da8:	6013      	str	r3, [r2, #0]
}
 8014daa:	bf00      	nop
 8014dac:	bd80      	pop	{r7, pc}
 8014dae:	bf00      	nop
 8014db0:	20008edc 	.word	0x20008edc
 8014db4:	20008ee0 	.word	0x20008ee0

08014db8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8014db8:	b580      	push	{r7, lr}
 8014dba:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 8014dbc:	4b04      	ldr	r3, [pc, #16]	; (8014dd0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8014dc4:	4618      	mov	r0, r3
 8014dc6:	f7f8 fad1 	bl	800d36c <xQueueSemaphoreTake>
}
 8014dca:	bf00      	nop
 8014dcc:	bd80      	pop	{r7, pc}
 8014dce:	bf00      	nop
 8014dd0:	20008edc 	.word	0x20008edc

08014dd4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8014dd4:	b580      	push	{r7, lr}
 8014dd6:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 8014dd8:	4b04      	ldr	r3, [pc, #16]	; (8014dec <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 8014dda:	6818      	ldr	r0, [r3, #0]
 8014ddc:	2300      	movs	r3, #0
 8014dde:	2200      	movs	r2, #0
 8014de0:	2100      	movs	r1, #0
 8014de2:	f7f7 ffa1 	bl	800cd28 <xQueueGenericSend>
}
 8014de6:	bf00      	nop
 8014de8:	bd80      	pop	{r7, pc}
 8014dea:	bf00      	nop
 8014dec:	20008edc 	.word	0x20008edc

08014df0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8014df0:	b580      	push	{r7, lr}
 8014df2:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 8014df4:	4b03      	ldr	r3, [pc, #12]	; (8014e04 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8014df6:	681b      	ldr	r3, [r3, #0]
 8014df8:	2100      	movs	r1, #0
 8014dfa:	4618      	mov	r0, r3
 8014dfc:	f7f8 fab6 	bl	800d36c <xQueueSemaphoreTake>
}
 8014e00:	bf00      	nop
 8014e02:	bd80      	pop	{r7, pc}
 8014e04:	20008edc 	.word	0x20008edc

08014e08 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8014e08:	b580      	push	{r7, lr}
 8014e0a:	b082      	sub	sp, #8
 8014e0c:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 8014e0e:	2300      	movs	r3, #0
 8014e10:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 8014e12:	4b0b      	ldr	r3, [pc, #44]	; (8014e40 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	1d3a      	adds	r2, r7, #4
 8014e18:	4611      	mov	r1, r2
 8014e1a:	4618      	mov	r0, r3
 8014e1c:	f7f8 f92a 	bl	800d074 <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d007      	beq.n	8014e36 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 8014e26:	4b07      	ldr	r3, [pc, #28]	; (8014e44 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 8014e28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e2c:	601a      	str	r2, [r3, #0]
 8014e2e:	f3bf 8f4f 	dsb	sy
 8014e32:	f3bf 8f6f 	isb	sy
}
 8014e36:	bf00      	nop
 8014e38:	3708      	adds	r7, #8
 8014e3a:	46bd      	mov	sp, r7
 8014e3c:	bd80      	pop	{r7, pc}
 8014e3e:	bf00      	nop
 8014e40:	20008edc 	.word	0x20008edc
 8014e44:	e000ed04 	.word	0xe000ed04

08014e48 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8014e48:	b580      	push	{r7, lr}
 8014e4a:	b082      	sub	sp, #8
 8014e4c:	af00      	add	r7, sp, #0
    if (vsync_q)
 8014e4e:	4b0e      	ldr	r3, [pc, #56]	; (8014e88 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d013      	beq.n	8014e7e <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 8014e56:	2300      	movs	r3, #0
 8014e58:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 8014e5a:	4b0b      	ldr	r3, [pc, #44]	; (8014e88 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8014e5c:	6818      	ldr	r0, [r3, #0]
 8014e5e:	1d3a      	adds	r2, r7, #4
 8014e60:	2300      	movs	r3, #0
 8014e62:	490a      	ldr	r1, [pc, #40]	; (8014e8c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 8014e64:	f7f8 f866 	bl	800cf34 <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d007      	beq.n	8014e7e <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 8014e6e:	4b08      	ldr	r3, [pc, #32]	; (8014e90 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 8014e70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e74:	601a      	str	r2, [r3, #0]
 8014e76:	f3bf 8f4f 	dsb	sy
 8014e7a:	f3bf 8f6f 	isb	sy
    }
}
 8014e7e:	bf00      	nop
 8014e80:	3708      	adds	r7, #8
 8014e82:	46bd      	mov	sp, r7
 8014e84:	bd80      	pop	{r7, pc}
 8014e86:	bf00      	nop
 8014e88:	20008ee0 	.word	0x20008ee0
 8014e8c:	20000050 	.word	0x20000050
 8014e90:	e000ed04 	.word	0xe000ed04

08014e94 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8014e94:	b580      	push	{r7, lr}
 8014e96:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 8014e98:	4b08      	ldr	r3, [pc, #32]	; (8014ebc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8014e9a:	681b      	ldr	r3, [r3, #0]
 8014e9c:	2200      	movs	r2, #0
 8014e9e:	4908      	ldr	r1, [pc, #32]	; (8014ec0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8014ea0:	4618      	mov	r0, r3
 8014ea2:	f7f8 f97d 	bl	800d1a0 <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 8014ea6:	4b05      	ldr	r3, [pc, #20]	; (8014ebc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8014eae:	4904      	ldr	r1, [pc, #16]	; (8014ec0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	f7f8 f975 	bl	800d1a0 <xQueueReceive>
}
 8014eb6:	bf00      	nop
 8014eb8:	bd80      	pop	{r7, pc}
 8014eba:	bf00      	nop
 8014ebc:	20008ee0 	.word	0x20008ee0
 8014ec0:	20000050 	.word	0x20000050

08014ec4 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8014ec4:	b580      	push	{r7, lr}
 8014ec6:	b082      	sub	sp, #8
 8014ec8:	af00      	add	r7, sp, #0
 8014eca:	4603      	mov	r3, r0
 8014ecc:	80fb      	strh	r3, [r7, #6]
    vTaskDelay(ms);
 8014ece:	88fb      	ldrh	r3, [r7, #6]
 8014ed0:	4618      	mov	r0, r3
 8014ed2:	f7f8 feb3 	bl	800dc3c <vTaskDelay>
}
 8014ed6:	bf00      	nop
 8014ed8:	3708      	adds	r7, #8
 8014eda:	46bd      	mov	sp, r7
 8014edc:	bd80      	pop	{r7, pc}
	...

08014ee0 <__NVIC_EnableIRQ>:
{
 8014ee0:	b480      	push	{r7}
 8014ee2:	b083      	sub	sp, #12
 8014ee4:	af00      	add	r7, sp, #0
 8014ee6:	4603      	mov	r3, r0
 8014ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	db0b      	blt.n	8014f0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014ef2:	79fb      	ldrb	r3, [r7, #7]
 8014ef4:	f003 021f 	and.w	r2, r3, #31
 8014ef8:	4907      	ldr	r1, [pc, #28]	; (8014f18 <__NVIC_EnableIRQ+0x38>)
 8014efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014efe:	095b      	lsrs	r3, r3, #5
 8014f00:	2001      	movs	r0, #1
 8014f02:	fa00 f202 	lsl.w	r2, r0, r2
 8014f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8014f0a:	bf00      	nop
 8014f0c:	370c      	adds	r7, #12
 8014f0e:	46bd      	mov	sp, r7
 8014f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f14:	4770      	bx	lr
 8014f16:	bf00      	nop
 8014f18:	e000e100 	.word	0xe000e100

08014f1c <__NVIC_DisableIRQ>:
{
 8014f1c:	b480      	push	{r7}
 8014f1e:	b083      	sub	sp, #12
 8014f20:	af00      	add	r7, sp, #0
 8014f22:	4603      	mov	r3, r0
 8014f24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	db12      	blt.n	8014f54 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014f2e:	79fb      	ldrb	r3, [r7, #7]
 8014f30:	f003 021f 	and.w	r2, r3, #31
 8014f34:	490a      	ldr	r1, [pc, #40]	; (8014f60 <__NVIC_DisableIRQ+0x44>)
 8014f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014f3a:	095b      	lsrs	r3, r3, #5
 8014f3c:	2001      	movs	r0, #1
 8014f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8014f42:	3320      	adds	r3, #32
 8014f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8014f48:	f3bf 8f4f 	dsb	sy
}
 8014f4c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8014f4e:	f3bf 8f6f 	isb	sy
}
 8014f52:	bf00      	nop
}
 8014f54:	bf00      	nop
 8014f56:	370c      	adds	r7, #12
 8014f58:	46bd      	mov	sp, r7
 8014f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f5e:	4770      	bx	lr
 8014f60:	e000e100 	.word	0xe000e100

08014f64 <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 8014f64:	b480      	push	{r7}
 8014f66:	b083      	sub	sp, #12
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	6078      	str	r0, [r7, #4]
        return color;
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	681b      	ldr	r3, [r3, #0]
    }
 8014f70:	4618      	mov	r0, r3
 8014f72:	370c      	adds	r7, #12
 8014f74:	46bd      	mov	sp, r7
 8014f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f7a:	4770      	bx	lr

08014f7c <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 8014f7c:	b480      	push	{r7}
 8014f7e:	b083      	sub	sp, #12
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	681b      	ldr	r3, [r3, #0]
 8014f88:	b29b      	uxth	r3, r3
    }
 8014f8a:	4618      	mov	r0, r3
 8014f8c:	370c      	adds	r7, #12
 8014f8e:	46bd      	mov	sp, r7
 8014f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f94:	4770      	bx	lr
	...

08014f98 <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 8014f98:	b480      	push	{r7}
 8014f9a:	b083      	sub	sp, #12
 8014f9c:	af00      	add	r7, sp, #0
 8014f9e:	6078      	str	r0, [r7, #4]
    {
 8014fa0:	4a04      	ldr	r2, [pc, #16]	; (8014fb4 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	601a      	str	r2, [r3, #0]
    }
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	4618      	mov	r0, r3
 8014faa:	370c      	adds	r7, #12
 8014fac:	46bd      	mov	sp, r7
 8014fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fb2:	4770      	bx	lr
 8014fb4:	08028178 	.word	0x08028178

08014fb8 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8014fb8:	b580      	push	{r7, lr}
 8014fba:	b082      	sub	sp, #8
 8014fbc:	af00      	add	r7, sp, #0
 8014fbe:	6078      	str	r0, [r7, #4]
    }
 8014fc0:	6878      	ldr	r0, [r7, #4]
 8014fc2:	f7ff ffe9 	bl	8014f98 <_ZN8touchgfx9DMA_QueueD1Ev>
 8014fc6:	2104      	movs	r1, #4
 8014fc8:	6878      	ldr	r0, [r7, #4]
 8014fca:	f011 f883 	bl	80260d4 <_ZdlPvj>
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	4618      	mov	r0, r3
 8014fd2:	3708      	adds	r7, #8
 8014fd4:	46bd      	mov	sp, r7
 8014fd6:	bd80      	pop	{r7, pc}

08014fd8 <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 8014fd8:	b580      	push	{r7, lr}
 8014fda:	b082      	sub	sp, #8
 8014fdc:	af00      	add	r7, sp, #0
 8014fde:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	681b      	ldr	r3, [r3, #0]
 8014fe4:	3344      	adds	r3, #68	; 0x44
 8014fe6:	681b      	ldr	r3, [r3, #0]
 8014fe8:	6878      	ldr	r0, [r7, #4]
 8014fea:	4798      	blx	r3
    }
 8014fec:	bf00      	nop
 8014fee:	3708      	adds	r7, #8
 8014ff0:	46bd      	mov	sp, r7
 8014ff2:	bd80      	pop	{r7, pc}

08014ff4 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 8014ff4:	b480      	push	{r7}
 8014ff6:	b083      	sub	sp, #12
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 8014ffc:	2300      	movs	r3, #0
    }
 8014ffe:	4618      	mov	r0, r3
 8015000:	370c      	adds	r7, #12
 8015002:	46bd      	mov	sp, r7
 8015004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015008:	4770      	bx	lr
	...

0801500c <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 801500c:	b480      	push	{r7}
 801500e:	b083      	sub	sp, #12
 8015010:	af00      	add	r7, sp, #0
 8015012:	6078      	str	r0, [r7, #4]
    {
 8015014:	4a04      	ldr	r2, [pc, #16]	; (8015028 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	601a      	str	r2, [r3, #0]
    }
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	4618      	mov	r0, r3
 801501e:	370c      	adds	r7, #12
 8015020:	46bd      	mov	sp, r7
 8015022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015026:	4770      	bx	lr
 8015028:	08029180 	.word	0x08029180

0801502c <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 801502c:	b580      	push	{r7, lr}
 801502e:	b082      	sub	sp, #8
 8015030:	af00      	add	r7, sp, #0
 8015032:	6078      	str	r0, [r7, #4]
    }
 8015034:	6878      	ldr	r0, [r7, #4]
 8015036:	f7ff ffe9 	bl	801500c <_ZN8touchgfx13DMA_InterfaceD1Ev>
 801503a:	210c      	movs	r1, #12
 801503c:	6878      	ldr	r0, [r7, #4]
 801503e:	f011 f849 	bl	80260d4 <_ZdlPvj>
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	4618      	mov	r0, r3
 8015046:	3708      	adds	r7, #8
 8015048:	46bd      	mov	sp, r7
 801504a:	bd80      	pop	{r7, pc}

0801504c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 801504c:	b480      	push	{r7}
 801504e:	b083      	sub	sp, #12
 8015050:	af00      	add	r7, sp, #0
 8015052:	6078      	str	r0, [r7, #4]
 8015054:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8015056:	4a09      	ldr	r2, [pc, #36]	; (801507c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	601a      	str	r2, [r3, #0]
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	683a      	ldr	r2, [r7, #0]
 8015060:	605a      	str	r2, [r3, #4]
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	2200      	movs	r2, #0
 8015066:	721a      	strb	r2, [r3, #8]
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	2200      	movs	r2, #0
 801506c:	725a      	strb	r2, [r3, #9]
    {
    }
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	4618      	mov	r0, r3
 8015072:	370c      	adds	r7, #12
 8015074:	46bd      	mov	sp, r7
 8015076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801507a:	4770      	bx	lr
 801507c:	08029180 	.word	0x08029180

08015080 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8015080:	b580      	push	{r7, lr}
 8015082:	b082      	sub	sp, #8
 8015084:	af00      	add	r7, sp, #0
 8015086:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	685a      	ldr	r2, [r3, #4]
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	685b      	ldr	r3, [r3, #4]
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	3314      	adds	r3, #20
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	4610      	mov	r0, r2
 8015098:	4798      	blx	r3
    }
 801509a:	bf00      	nop
 801509c:	3708      	adds	r7, #8
 801509e:	46bd      	mov	sp, r7
 80150a0:	bd80      	pop	{r7, pc}

080150a2 <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80150a2:	b580      	push	{r7, lr}
 80150a4:	b082      	sub	sp, #8
 80150a6:	af00      	add	r7, sp, #0
 80150a8:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80150aa:	687a      	ldr	r2, [r7, #4]
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	3328      	adds	r3, #40	; 0x28
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	4610      	mov	r0, r2
 80150b6:	4798      	blx	r3
    }
 80150b8:	bf00      	nop
 80150ba:	3708      	adds	r7, #8
 80150bc:	46bd      	mov	sp, r7
 80150be:	bd80      	pop	{r7, pc}

080150c0 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 80150c0:	b480      	push	{r7}
 80150c2:	b085      	sub	sp, #20
 80150c4:	af00      	add	r7, sp, #0
 80150c6:	60f8      	str	r0, [r7, #12]
 80150c8:	60b9      	str	r1, [r7, #8]
 80150ca:	607a      	str	r2, [r7, #4]
 80150cc:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	68ba      	ldr	r2, [r7, #8]
 80150de:	430a      	orrs	r2, r1
 80150e0:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 80150e2:	68fb      	ldr	r3, [r7, #12]
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80150e8:	f023 0107 	bic.w	r1, r3, #7
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	687a      	ldr	r2, [r7, #4]
 80150f2:	430a      	orrs	r2, r1
 80150f4:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80150fc:	4b06      	ldr	r3, [pc, #24]	; (8015118 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 80150fe:	4013      	ands	r3, r2
 8015100:	68fa      	ldr	r2, [r7, #12]
 8015102:	6812      	ldr	r2, [r2, #0]
 8015104:	6839      	ldr	r1, [r7, #0]
 8015106:	430b      	orrs	r3, r1
 8015108:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 801510a:	2300      	movs	r3, #0
}
 801510c:	4618      	mov	r0, r3
 801510e:	3714      	adds	r7, #20
 8015110:	46bd      	mov	sp, r7
 8015112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015116:	4770      	bx	lr
 8015118:	ffffc000 	.word	0xffffc000

0801511c <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 801511c:	b580      	push	{r7, lr}
 801511e:	b082      	sub	sp, #8
 8015120:	af00      	add	r7, sp, #0
 8015122:	6078      	str	r0, [r7, #4]
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END DMA2D_XferCpltCallback */

    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8015124:	f7fa fe3c 	bl	800fda0 <_ZN8touchgfx3HAL11getInstanceEv>
 8015128:	4603      	mov	r3, r0
 801512a:	4618      	mov	r0, r3
 801512c:	f7ff ffa8 	bl	8015080 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 8015130:	bf00      	nop
 8015132:	3708      	adds	r7, #8
 8015134:	46bd      	mov	sp, r7
 8015136:	bd80      	pop	{r7, pc}

08015138 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 8015138:	b580      	push	{r7, lr}
 801513a:	b082      	sub	sp, #8
 801513c:	af00      	add	r7, sp, #0
 801513e:	6078      	str	r0, [r7, #4]
    assert(0);
 8015140:	4b02      	ldr	r3, [pc, #8]	; (801514c <DMA2D_XferErrorCallback+0x14>)
 8015142:	4a03      	ldr	r2, [pc, #12]	; (8015150 <DMA2D_XferErrorCallback+0x18>)
 8015144:	213e      	movs	r1, #62	; 0x3e
 8015146:	4803      	ldr	r0, [pc, #12]	; (8015154 <DMA2D_XferErrorCallback+0x1c>)
 8015148:	f010 fff2 	bl	8026130 <__assert_func>
 801514c:	08027b58 	.word	0x08027b58
 8015150:	08027b5c 	.word	0x08027b5c
 8015154:	08027b90 	.word	0x08027b90

08015158 <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 8015158:	b580      	push	{r7, lr}
 801515a:	b082      	sub	sp, #8
 801515c:	af00      	add	r7, sp, #0
 801515e:	6078      	str	r0, [r7, #4]
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	3318      	adds	r3, #24
 8015164:	4618      	mov	r0, r3
 8015166:	f7fe fea9 	bl	8013ebc <_ZN8touchgfx9colortypeC1Ev>
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	4618      	mov	r0, r3
 801516e:	3708      	adds	r7, #8
 8015170:	46bd      	mov	sp, r7
 8015172:	bd80      	pop	{r7, pc}

08015174 <_ZN10STM32F7DMAC1Ev>:
}

}

STM32F7DMA::STM32F7DMA()
 8015174:	b5b0      	push	{r4, r5, r7, lr}
 8015176:	b082      	sub	sp, #8
 8015178:	af00      	add	r7, sp, #0
 801517a:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 801517c:	687a      	ldr	r2, [r7, #4]
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	330c      	adds	r3, #12
 8015182:	4619      	mov	r1, r3
 8015184:	4610      	mov	r0, r2
 8015186:	f7ff ff61 	bl	801504c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 801518a:	4a0e      	ldr	r2, [pc, #56]	; (80151c4 <_ZN10STM32F7DMAC1Ev+0x50>)
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	601a      	str	r2, [r3, #0]
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	f103 000c 	add.w	r0, r3, #12
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	3320      	adds	r3, #32
 801519a:	2260      	movs	r2, #96	; 0x60
 801519c:	4619      	mov	r1, r3
 801519e:	f002 fe1d 	bl	8017ddc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	3320      	adds	r3, #32
 80151a6:	245f      	movs	r4, #95	; 0x5f
 80151a8:	461d      	mov	r5, r3
 80151aa:	e004      	b.n	80151b6 <_ZN10STM32F7DMAC1Ev+0x42>
 80151ac:	4628      	mov	r0, r5
 80151ae:	f7ff ffd3 	bl	8015158 <_ZN8touchgfx6BlitOpC1Ev>
 80151b2:	3520      	adds	r5, #32
 80151b4:	3c01      	subs	r4, #1
 80151b6:	2c00      	cmp	r4, #0
 80151b8:	daf8      	bge.n	80151ac <_ZN10STM32F7DMAC1Ev+0x38>
{}
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	4618      	mov	r0, r3
 80151be:	3708      	adds	r7, #8
 80151c0:	46bd      	mov	sp, r7
 80151c2:	bdb0      	pop	{r4, r5, r7, pc}
 80151c4:	08028128 	.word	0x08028128

080151c8 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 80151c8:	b580      	push	{r7, lr}
 80151ca:	b082      	sub	sp, #8
 80151cc:	af00      	add	r7, sp, #0
 80151ce:	6078      	str	r0, [r7, #4]
 80151d0:	4a0b      	ldr	r2, [pc, #44]	; (8015200 <_ZN10STM32F7DMAD1Ev+0x38>)
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 80151d6:	480b      	ldr	r0, [pc, #44]	; (8015204 <_ZN10STM32F7DMAD1Ev+0x3c>)
 80151d8:	f7f0 f8ca 	bl	8005370 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 80151dc:	205a      	movs	r0, #90	; 0x5a
 80151de:	f7ff fe9d 	bl	8014f1c <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	330c      	adds	r3, #12
 80151e6:	4618      	mov	r0, r3
 80151e8:	f000 faa8 	bl	801573c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	4618      	mov	r0, r3
 80151f0:	f7ff ff0c 	bl	801500c <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	4618      	mov	r0, r3
 80151f8:	3708      	adds	r7, #8
 80151fa:	46bd      	mov	sp, r7
 80151fc:	bd80      	pop	{r7, pc}
 80151fe:	bf00      	nop
 8015200:	08028128 	.word	0x08028128
 8015204:	2000048c 	.word	0x2000048c

08015208 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8015208:	b580      	push	{r7, lr}
 801520a:	b082      	sub	sp, #8
 801520c:	af00      	add	r7, sp, #0
 801520e:	6078      	str	r0, [r7, #4]
}
 8015210:	6878      	ldr	r0, [r7, #4]
 8015212:	f7ff ffd9 	bl	80151c8 <_ZN10STM32F7DMAD1Ev>
 8015216:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 801521a:	6878      	ldr	r0, [r7, #4]
 801521c:	f010 ff5a 	bl	80260d4 <_ZdlPvj>
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	4618      	mov	r0, r3
 8015224:	3708      	adds	r7, #8
 8015226:	46bd      	mov	sp, r7
 8015228:	bd80      	pop	{r7, pc}
	...

0801522c <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 801522c:	b580      	push	{r7, lr}
 801522e:	b082      	sub	sp, #8
 8015230:	af00      	add	r7, sp, #0
 8015232:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 8015234:	4b09      	ldr	r3, [pc, #36]	; (801525c <_ZN10STM32F7DMA10initializeEv+0x30>)
 8015236:	4a0a      	ldr	r2, [pc, #40]	; (8015260 <_ZN10STM32F7DMA10initializeEv+0x34>)
 8015238:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 801523a:	4808      	ldr	r0, [pc, #32]	; (801525c <_ZN10STM32F7DMA10initializeEv+0x30>)
 801523c:	f7f0 f84e 	bl	80052dc <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8015240:	4b06      	ldr	r3, [pc, #24]	; (801525c <_ZN10STM32F7DMA10initializeEv+0x30>)
 8015242:	4a08      	ldr	r2, [pc, #32]	; (8015264 <_ZN10STM32F7DMA10initializeEv+0x38>)
 8015244:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8015246:	4b05      	ldr	r3, [pc, #20]	; (801525c <_ZN10STM32F7DMA10initializeEv+0x30>)
 8015248:	4a07      	ldr	r2, [pc, #28]	; (8015268 <_ZN10STM32F7DMA10initializeEv+0x3c>)
 801524a:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 801524c:	205a      	movs	r0, #90	; 0x5a
 801524e:	f7ff fe47 	bl	8014ee0 <__NVIC_EnableIRQ>
}
 8015252:	bf00      	nop
 8015254:	3708      	adds	r7, #8
 8015256:	46bd      	mov	sp, r7
 8015258:	bd80      	pop	{r7, pc}
 801525a:	bf00      	nop
 801525c:	2000048c 	.word	0x2000048c
 8015260:	4002b000 	.word	0x4002b000
 8015264:	0801511d 	.word	0x0801511d
 8015268:	08015139 	.word	0x08015139

0801526c <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 801526c:	b480      	push	{r7}
 801526e:	b083      	sub	sp, #12
 8015270:	af00      	add	r7, sp, #0
 8015272:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 8015274:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 8015278:	4618      	mov	r0, r3
 801527a:	370c      	adds	r7, #12
 801527c:	46bd      	mov	sp, r7
 801527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015282:	4770      	bx	lr

08015284 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 8015284:	b590      	push	{r4, r7, lr}
 8015286:	b08d      	sub	sp, #52	; 0x34
 8015288:	af02      	add	r7, sp, #8
 801528a:	6078      	str	r0, [r7, #4]
 801528c:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 801528e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8015292:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 8015294:	2300      	movs	r3, #0
 8015296:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8015298:	683b      	ldr	r3, [r7, #0]
 801529a:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 801529c:	2b20      	cmp	r3, #32
 801529e:	d007      	beq.n	80152b0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 80152a0:	683b      	ldr	r3, [r7, #0]
 80152a2:	681b      	ldr	r3, [r3, #0]
 80152a4:	2b40      	cmp	r3, #64	; 0x40
 80152a6:	d003      	beq.n	80152b0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 80152a8:	683b      	ldr	r3, [r7, #0]
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	2b04      	cmp	r3, #4
 80152ae:	d101      	bne.n	80152b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 80152b0:	2301      	movs	r3, #1
 80152b2:	e000      	b.n	80152b6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 80152b4:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 80152b6:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 80152b8:	683b      	ldr	r3, [r7, #0]
 80152ba:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 80152bc:	2b80      	cmp	r3, #128	; 0x80
 80152be:	d004      	beq.n	80152ca <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 80152c0:	683b      	ldr	r3, [r7, #0]
 80152c2:	681b      	ldr	r3, [r3, #0]
 80152c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80152c8:	d101      	bne.n	80152ce <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 80152ca:	2301      	movs	r3, #1
 80152cc:	e000      	b.n	80152d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 80152ce:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 80152d0:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 80152d2:	f7fa fd71 	bl	800fdb8 <_ZN8touchgfx3HAL3lcdEv>
 80152d6:	4603      	mov	r3, r0
 80152d8:	681a      	ldr	r2, [r3, #0]
 80152da:	3220      	adds	r2, #32
 80152dc:	6812      	ldr	r2, [r2, #0]
 80152de:	4618      	mov	r0, r3
 80152e0:	4790      	blx	r2
 80152e2:	4603      	mov	r3, r0
 80152e4:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 80152e6:	683b      	ldr	r3, [r7, #0]
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80152ee:	d012      	beq.n	8015316 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
 80152f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80152f4:	d820      	bhi.n	8015338 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb4>
 80152f6:	2b80      	cmp	r3, #128	; 0x80
 80152f8:	d00a      	beq.n	8015310 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
 80152fa:	2b80      	cmp	r3, #128	; 0x80
 80152fc:	d81c      	bhi.n	8015338 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb4>
 80152fe:	2b40      	cmp	r3, #64	; 0x40
 8015300:	d017      	beq.n	8015332 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xae>
 8015302:	2b40      	cmp	r3, #64	; 0x40
 8015304:	d818      	bhi.n	8015338 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb4>
 8015306:	2b04      	cmp	r3, #4
 8015308:	d008      	beq.n	801531c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x98>
 801530a:	2b20      	cmp	r3, #32
 801530c:	d011      	beq.n	8015332 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xae>
 801530e:	e013      	b.n	8015338 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb4>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 8015310:	230a      	movs	r3, #10
 8015312:	623b      	str	r3, [r7, #32]
        break;
 8015314:	e01a      	b.n	801534c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc8>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 8015316:	2309      	movs	r3, #9
 8015318:	623b      	str	r3, [r7, #32]
        break;
 801531a:	e017      	b.n	801534c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc8>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 801531c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8015320:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8015322:	7f7b      	ldrb	r3, [r7, #29]
 8015324:	2b10      	cmp	r3, #16
 8015326:	d101      	bne.n	801532c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
 8015328:	2302      	movs	r3, #2
 801532a:	e000      	b.n	801532e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xaa>
 801532c:	2301      	movs	r3, #1
 801532e:	623b      	str	r3, [r7, #32]
        break;
 8015330:	e00c      	b.n	801534c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc8>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 8015332:	2300      	movs	r3, #0
 8015334:	623b      	str	r3, [r7, #32]
        break;
 8015336:	e009      	b.n	801534c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc8>
    default:
        dma2dTransferMode = DMA2D_M2M;
 8015338:	2300      	movs	r3, #0
 801533a:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801533c:	7f7b      	ldrb	r3, [r7, #29]
 801533e:	2b10      	cmp	r3, #16
 8015340:	d101      	bne.n	8015346 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc2>
 8015342:	2302      	movs	r3, #2
 8015344:	e000      	b.n	8015348 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc4>
 8015346:	2301      	movs	r3, #1
 8015348:	623b      	str	r3, [r7, #32]
        break;
 801534a:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 801534c:	4a77      	ldr	r2, [pc, #476]	; (801552c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 801534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015350:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8015352:	7f7b      	ldrb	r3, [r7, #29]
 8015354:	2b10      	cmp	r3, #16
 8015356:	d101      	bne.n	801535c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd8>
 8015358:	2302      	movs	r3, #2
 801535a:	e000      	b.n	801535e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xda>
 801535c:	2301      	movs	r3, #1
 801535e:	4a73      	ldr	r2, [pc, #460]	; (801552c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015360:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8015362:	683b      	ldr	r3, [r7, #0]
 8015364:	8adb      	ldrh	r3, [r3, #22]
 8015366:	461a      	mov	r2, r3
 8015368:	683b      	ldr	r3, [r7, #0]
 801536a:	8a1b      	ldrh	r3, [r3, #16]
 801536c:	1ad3      	subs	r3, r2, r3
 801536e:	461a      	mov	r2, r3
 8015370:	4b6e      	ldr	r3, [pc, #440]	; (801552c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015372:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8015374:	7f7b      	ldrb	r3, [r7, #29]
 8015376:	2b10      	cmp	r3, #16
 8015378:	d101      	bne.n	801537e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
 801537a:	2202      	movs	r2, #2
 801537c:	e000      	b.n	8015380 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfc>
 801537e:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8015380:	683b      	ldr	r3, [r7, #0]
 8015382:	8adb      	ldrh	r3, [r3, #22]
 8015384:	4619      	mov	r1, r3
 8015386:	683b      	ldr	r3, [r7, #0]
 8015388:	8a1b      	ldrh	r3, [r3, #16]
 801538a:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 801538c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801538e:	4867      	ldr	r0, [pc, #412]	; (801552c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015390:	f7ff fe96 	bl	80150c0 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8015394:	4a65      	ldr	r2, [pc, #404]	; (801552c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015396:	6a3b      	ldr	r3, [r7, #32]
 8015398:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 801539a:	683b      	ldr	r3, [r7, #0]
 801539c:	8a9b      	ldrh	r3, [r3, #20]
 801539e:	461a      	mov	r2, r3
 80153a0:	683b      	ldr	r3, [r7, #0]
 80153a2:	8a1b      	ldrh	r3, [r3, #16]
 80153a4:	1ad3      	subs	r3, r2, r3
 80153a6:	461a      	mov	r2, r3
 80153a8:	4b60      	ldr	r3, [pc, #384]	; (801552c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80153aa:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 80153ac:	7ffb      	ldrb	r3, [r7, #31]
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d103      	bne.n	80153ba <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 80153b2:	7fbb      	ldrb	r3, [r7, #30]
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	f000 8084 	beq.w	80154c2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23e>
    {
        if (blitOp.alpha < 255)
 80153ba:	683b      	ldr	r3, [r7, #0]
 80153bc:	7f1b      	ldrb	r3, [r3, #28]
 80153be:	2bff      	cmp	r3, #255	; 0xff
 80153c0:	d008      	beq.n	80153d4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 80153c2:	4b5a      	ldr	r3, [pc, #360]	; (801552c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80153c4:	2202      	movs	r2, #2
 80153c6:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 80153c8:	683b      	ldr	r3, [r7, #0]
 80153ca:	7f1b      	ldrb	r3, [r3, #28]
 80153cc:	461a      	mov	r2, r3
 80153ce:	4b57      	ldr	r3, [pc, #348]	; (801552c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80153d0:	635a      	str	r2, [r3, #52]	; 0x34
 80153d2:	e002      	b.n	80153da <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x156>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80153d4:	4b55      	ldr	r3, [pc, #340]	; (801552c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80153d6:	2200      	movs	r2, #0
 80153d8:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 80153da:	7fbb      	ldrb	r3, [r7, #30]
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d05b      	beq.n	8015498 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>
        {
            if (bitDepth == 16)
 80153e0:	7f7b      	ldrb	r3, [r7, #29]
 80153e2:	2b10      	cmp	r3, #16
 80153e4:	d14c      	bne.n	8015480 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1fc>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 80153e6:	683b      	ldr	r3, [r7, #0]
 80153e8:	3318      	adds	r3, #24
 80153ea:	4618      	mov	r0, r3
 80153ec:	f7ff fdc6 	bl	8014f7c <_ZNK8touchgfx9colortypecvtEv>
 80153f0:	4603      	mov	r3, r0
 80153f2:	0adb      	lsrs	r3, r3, #11
 80153f4:	b29b      	uxth	r3, r3
 80153f6:	f003 021f 	and.w	r2, r3, #31
 80153fa:	4613      	mov	r3, r2
 80153fc:	021b      	lsls	r3, r3, #8
 80153fe:	1a9b      	subs	r3, r3, r2
 8015400:	4a4b      	ldr	r2, [pc, #300]	; (8015530 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8015402:	fb82 1203 	smull	r1, r2, r2, r3
 8015406:	441a      	add	r2, r3
 8015408:	1112      	asrs	r2, r2, #4
 801540a:	17db      	asrs	r3, r3, #31
 801540c:	1ad3      	subs	r3, r2, r3
 801540e:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8015410:	683b      	ldr	r3, [r7, #0]
 8015412:	3318      	adds	r3, #24
 8015414:	4618      	mov	r0, r3
 8015416:	f7ff fdb1 	bl	8014f7c <_ZNK8touchgfx9colortypecvtEv>
 801541a:	4603      	mov	r3, r0
 801541c:	095b      	lsrs	r3, r3, #5
 801541e:	b29b      	uxth	r3, r3
 8015420:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8015424:	4613      	mov	r3, r2
 8015426:	021b      	lsls	r3, r3, #8
 8015428:	1a9b      	subs	r3, r3, r2
 801542a:	4a42      	ldr	r2, [pc, #264]	; (8015534 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 801542c:	fb82 1203 	smull	r1, r2, r2, r3
 8015430:	441a      	add	r2, r3
 8015432:	1152      	asrs	r2, r2, #5
 8015434:	17db      	asrs	r3, r3, #31
 8015436:	1ad3      	subs	r3, r2, r3
 8015438:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 801543a:	683b      	ldr	r3, [r7, #0]
 801543c:	3318      	adds	r3, #24
 801543e:	4618      	mov	r0, r3
 8015440:	f7ff fd9c 	bl	8014f7c <_ZNK8touchgfx9colortypecvtEv>
 8015444:	4603      	mov	r3, r0
 8015446:	f003 021f 	and.w	r2, r3, #31
 801544a:	4613      	mov	r3, r2
 801544c:	021b      	lsls	r3, r3, #8
 801544e:	1a9b      	subs	r3, r3, r2
 8015450:	4a37      	ldr	r2, [pc, #220]	; (8015530 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8015452:	fb82 1203 	smull	r1, r2, r2, r3
 8015456:	441a      	add	r2, r3
 8015458:	1112      	asrs	r2, r2, #4
 801545a:	17db      	asrs	r3, r3, #31
 801545c:	1ad3      	subs	r3, r2, r3
 801545e:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 8015460:	683b      	ldr	r3, [r7, #0]
 8015462:	7f1b      	ldrb	r3, [r3, #28]
 8015464:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	061a      	lsls	r2, r3, #24
 801546a:	69bb      	ldr	r3, [r7, #24]
 801546c:	041b      	lsls	r3, r3, #16
 801546e:	431a      	orrs	r2, r3
 8015470:	697b      	ldr	r3, [r7, #20]
 8015472:	021b      	lsls	r3, r3, #8
 8015474:	431a      	orrs	r2, r3
 8015476:	693b      	ldr	r3, [r7, #16]
 8015478:	4313      	orrs	r3, r2
 801547a:	4a2c      	ldr	r2, [pc, #176]	; (801552c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 801547c:	6353      	str	r3, [r2, #52]	; 0x34
 801547e:	e00b      	b.n	8015498 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 8015480:	683b      	ldr	r3, [r7, #0]
 8015482:	3318      	adds	r3, #24
 8015484:	4618      	mov	r0, r3
 8015486:	f7ff fd6d 	bl	8014f64 <_ZNK8touchgfx9colortype10getColor32Ev>
 801548a:	4602      	mov	r2, r0
 801548c:	683b      	ldr	r3, [r7, #0]
 801548e:	7f1b      	ldrb	r3, [r3, #28]
 8015490:	061b      	lsls	r3, r3, #24
 8015492:	4313      	orrs	r3, r2
 8015494:	4a25      	ldr	r2, [pc, #148]	; (801552c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015496:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8015498:	683b      	ldr	r3, [r7, #0]
 801549a:	8adb      	ldrh	r3, [r3, #22]
 801549c:	461a      	mov	r2, r3
 801549e:	683b      	ldr	r3, [r7, #0]
 80154a0:	8a1b      	ldrh	r3, [r3, #16]
 80154a2:	1ad3      	subs	r3, r2, r3
 80154a4:	461a      	mov	r2, r3
 80154a6:	4b21      	ldr	r3, [pc, #132]	; (801552c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80154a8:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80154aa:	7f7b      	ldrb	r3, [r7, #29]
 80154ac:	2b10      	cmp	r3, #16
 80154ae:	d101      	bne.n	80154b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
 80154b0:	2302      	movs	r3, #2
 80154b2:	e000      	b.n	80154b6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
 80154b4:	2301      	movs	r3, #1
 80154b6:	4a1d      	ldr	r2, [pc, #116]	; (801552c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80154b8:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 80154ba:	2100      	movs	r1, #0
 80154bc:	481b      	ldr	r0, [pc, #108]	; (801552c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80154be:	f7f0 f9d7 	bl	8005870 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 80154c2:	2101      	movs	r1, #1
 80154c4:	4819      	ldr	r0, [pc, #100]	; (801552c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80154c6:	f7f0 f9d3 	bl	8005870 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataCopy cache invalidation */

    if (blendingImage || blendingText)
 80154ca:	7ffb      	ldrb	r3, [r7, #31]
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d102      	bne.n	80154d6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x252>
 80154d0:	7fbb      	ldrb	r3, [r7, #30]
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d015      	beq.n	8015502 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27e>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 80154d6:	683b      	ldr	r3, [r7, #0]
 80154d8:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80154da:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 80154dc:	683b      	ldr	r3, [r7, #0]
 80154de:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80154e0:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 80154e2:	683b      	ldr	r3, [r7, #0]
 80154e4:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80154e6:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80154e8:	683b      	ldr	r3, [r7, #0]
 80154ea:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80154ec:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80154ee:	683b      	ldr	r3, [r7, #0]
 80154f0:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80154f2:	9301      	str	r3, [sp, #4]
 80154f4:	9200      	str	r2, [sp, #0]
 80154f6:	4623      	mov	r3, r4
 80154f8:	4602      	mov	r2, r0
 80154fa:	480c      	ldr	r0, [pc, #48]	; (801552c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80154fc:	f7ef ffdb 	bl	80054b6 <HAL_DMA2D_BlendingStart_IT>
 8015500:	e010      	b.n	8015524 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 8015502:	683b      	ldr	r3, [r7, #0]
 8015504:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 8015506:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 8015508:	683b      	ldr	r3, [r7, #0]
 801550a:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 801550c:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 801550e:	683b      	ldr	r3, [r7, #0]
 8015510:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 8015512:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 8015514:	683b      	ldr	r3, [r7, #0]
 8015516:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 8015518:	9300      	str	r3, [sp, #0]
 801551a:	4603      	mov	r3, r0
 801551c:	4803      	ldr	r0, [pc, #12]	; (801552c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 801551e:	f7ef ff97 	bl	8005450 <HAL_DMA2D_Start_IT>
    }
}
 8015522:	bf00      	nop
 8015524:	bf00      	nop
 8015526:	372c      	adds	r7, #44	; 0x2c
 8015528:	46bd      	mov	sp, r7
 801552a:	bd90      	pop	{r4, r7, pc}
 801552c:	2000048c 	.word	0x2000048c
 8015530:	84210843 	.word	0x84210843
 8015534:	82082083 	.word	0x82082083

08015538 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8015538:	b590      	push	{r4, r7, lr}
 801553a:	b08d      	sub	sp, #52	; 0x34
 801553c:	af02      	add	r7, sp, #8
 801553e:	6078      	str	r0, [r7, #4]
 8015540:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8015542:	f7fa fc39 	bl	800fdb8 <_ZN8touchgfx3HAL3lcdEv>
 8015546:	4603      	mov	r3, r0
 8015548:	681a      	ldr	r2, [r3, #0]
 801554a:	3220      	adds	r2, #32
 801554c:	6812      	ldr	r2, [r2, #0]
 801554e:	4618      	mov	r0, r3
 8015550:	4790      	blx	r2
 8015552:	4603      	mov	r3, r0
 8015554:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8015556:	7ffb      	ldrb	r3, [r7, #31]
 8015558:	2b10      	cmp	r3, #16
 801555a:	d101      	bne.n	8015560 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 801555c:	2302      	movs	r3, #2
 801555e:	e000      	b.n	8015562 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 8015560:	2301      	movs	r3, #1
 8015562:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 8015564:	2300      	movs	r3, #0
 8015566:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 8015568:	7ffb      	ldrb	r3, [r7, #31]
 801556a:	2b10      	cmp	r3, #16
 801556c:	d14b      	bne.n	8015606 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xce>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 801556e:	683b      	ldr	r3, [r7, #0]
 8015570:	3318      	adds	r3, #24
 8015572:	4618      	mov	r0, r3
 8015574:	f7ff fd02 	bl	8014f7c <_ZNK8touchgfx9colortypecvtEv>
 8015578:	4603      	mov	r3, r0
 801557a:	0adb      	lsrs	r3, r3, #11
 801557c:	b29b      	uxth	r3, r3
 801557e:	f003 021f 	and.w	r2, r3, #31
 8015582:	4613      	mov	r3, r2
 8015584:	021b      	lsls	r3, r3, #8
 8015586:	1a9b      	subs	r3, r3, r2
 8015588:	4a69      	ldr	r2, [pc, #420]	; (8015730 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 801558a:	fb82 1203 	smull	r1, r2, r2, r3
 801558e:	441a      	add	r2, r3
 8015590:	1112      	asrs	r2, r2, #4
 8015592:	17db      	asrs	r3, r3, #31
 8015594:	1ad3      	subs	r3, r2, r3
 8015596:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8015598:	683b      	ldr	r3, [r7, #0]
 801559a:	3318      	adds	r3, #24
 801559c:	4618      	mov	r0, r3
 801559e:	f7ff fced 	bl	8014f7c <_ZNK8touchgfx9colortypecvtEv>
 80155a2:	4603      	mov	r3, r0
 80155a4:	095b      	lsrs	r3, r3, #5
 80155a6:	b29b      	uxth	r3, r3
 80155a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80155ac:	4613      	mov	r3, r2
 80155ae:	021b      	lsls	r3, r3, #8
 80155b0:	1a9b      	subs	r3, r3, r2
 80155b2:	4a60      	ldr	r2, [pc, #384]	; (8015734 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80155b4:	fb82 1203 	smull	r1, r2, r2, r3
 80155b8:	441a      	add	r2, r3
 80155ba:	1152      	asrs	r2, r2, #5
 80155bc:	17db      	asrs	r3, r3, #31
 80155be:	1ad3      	subs	r3, r2, r3
 80155c0:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 80155c2:	683b      	ldr	r3, [r7, #0]
 80155c4:	3318      	adds	r3, #24
 80155c6:	4618      	mov	r0, r3
 80155c8:	f7ff fcd8 	bl	8014f7c <_ZNK8touchgfx9colortypecvtEv>
 80155cc:	4603      	mov	r3, r0
 80155ce:	f003 021f 	and.w	r2, r3, #31
 80155d2:	4613      	mov	r3, r2
 80155d4:	021b      	lsls	r3, r3, #8
 80155d6:	1a9b      	subs	r3, r3, r2
 80155d8:	4a55      	ldr	r2, [pc, #340]	; (8015730 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 80155da:	fb82 1203 	smull	r1, r2, r2, r3
 80155de:	441a      	add	r2, r3
 80155e0:	1112      	asrs	r2, r2, #4
 80155e2:	17db      	asrs	r3, r3, #31
 80155e4:	1ad3      	subs	r3, r2, r3
 80155e6:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 80155e8:	683b      	ldr	r3, [r7, #0]
 80155ea:	7f1b      	ldrb	r3, [r3, #28]
 80155ec:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 80155ee:	68bb      	ldr	r3, [r7, #8]
 80155f0:	061a      	lsls	r2, r3, #24
 80155f2:	697b      	ldr	r3, [r7, #20]
 80155f4:	041b      	lsls	r3, r3, #16
 80155f6:	431a      	orrs	r2, r3
 80155f8:	693b      	ldr	r3, [r7, #16]
 80155fa:	021b      	lsls	r3, r3, #8
 80155fc:	4313      	orrs	r3, r2
 80155fe:	68fa      	ldr	r2, [r7, #12]
 8015600:	4313      	orrs	r3, r2
 8015602:	623b      	str	r3, [r7, #32]
 8015604:	e00b      	b.n	801561e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe6>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8015606:	683b      	ldr	r3, [r7, #0]
 8015608:	7f1b      	ldrb	r3, [r3, #28]
 801560a:	061b      	lsls	r3, r3, #24
 801560c:	461c      	mov	r4, r3
 801560e:	683b      	ldr	r3, [r7, #0]
 8015610:	3318      	adds	r3, #24
 8015612:	4618      	mov	r0, r3
 8015614:	f7ff fca6 	bl	8014f64 <_ZNK8touchgfx9colortype10getColor32Ev>
 8015618:	4603      	mov	r3, r0
 801561a:	4323      	orrs	r3, r4
 801561c:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 801561e:	683b      	ldr	r3, [r7, #0]
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	2b08      	cmp	r3, #8
 8015624:	d103      	bne.n	801562e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf6>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8015626:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801562a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801562c:	e003      	b.n	8015636 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
    default:
        dma2dTransferMode = DMA2D_R2M;
 801562e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8015632:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8015634:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8015636:	4a40      	ldr	r2, [pc, #256]	; (8015738 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8015638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801563a:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 801563c:	7ffb      	ldrb	r3, [r7, #31]
 801563e:	2b10      	cmp	r3, #16
 8015640:	d101      	bne.n	8015646 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10e>
 8015642:	2302      	movs	r3, #2
 8015644:	e000      	b.n	8015648 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>
 8015646:	2301      	movs	r3, #1
 8015648:	4a3b      	ldr	r2, [pc, #236]	; (8015738 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 801564a:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 801564c:	683b      	ldr	r3, [r7, #0]
 801564e:	8adb      	ldrh	r3, [r3, #22]
 8015650:	461a      	mov	r2, r3
 8015652:	683b      	ldr	r3, [r7, #0]
 8015654:	8a1b      	ldrh	r3, [r3, #16]
 8015656:	1ad3      	subs	r3, r2, r3
 8015658:	461a      	mov	r2, r3
 801565a:	4b37      	ldr	r3, [pc, #220]	; (8015738 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 801565c:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 801565e:	7ffb      	ldrb	r3, [r7, #31]
 8015660:	2b10      	cmp	r3, #16
 8015662:	d101      	bne.n	8015668 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x130>
 8015664:	2202      	movs	r2, #2
 8015666:	e000      	b.n	801566a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x132>
 8015668:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 801566a:	683b      	ldr	r3, [r7, #0]
 801566c:	8adb      	ldrh	r3, [r3, #22]
 801566e:	4619      	mov	r1, r3
 8015670:	683b      	ldr	r3, [r7, #0]
 8015672:	8a1b      	ldrh	r3, [r3, #16]
 8015674:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8015676:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015678:	482f      	ldr	r0, [pc, #188]	; (8015738 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 801567a:	f7ff fd21 	bl	80150c0 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 801567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015680:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8015684:	d11e      	bne.n	80156c4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x18c>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8015686:	4b2c      	ldr	r3, [pc, #176]	; (8015738 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8015688:	2201      	movs	r2, #1
 801568a:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 801568c:	4a2a      	ldr	r2, [pc, #168]	; (8015738 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 801568e:	6a3b      	ldr	r3, [r7, #32]
 8015690:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 8015692:	4b29      	ldr	r3, [pc, #164]	; (8015738 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8015694:	2209      	movs	r2, #9
 8015696:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8015698:	683b      	ldr	r3, [r7, #0]
 801569a:	8adb      	ldrh	r3, [r3, #22]
 801569c:	461a      	mov	r2, r3
 801569e:	683b      	ldr	r3, [r7, #0]
 80156a0:	8a1b      	ldrh	r3, [r3, #16]
 80156a2:	1ad3      	subs	r3, r2, r3
 80156a4:	461a      	mov	r2, r3
 80156a6:	4b24      	ldr	r3, [pc, #144]	; (8015738 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 80156a8:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80156aa:	7ffb      	ldrb	r3, [r7, #31]
 80156ac:	2b10      	cmp	r3, #16
 80156ae:	d101      	bne.n	80156b4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17c>
 80156b0:	2302      	movs	r3, #2
 80156b2:	e000      	b.n	80156b6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17e>
 80156b4:	2301      	movs	r3, #1
 80156b6:	4a20      	ldr	r2, [pc, #128]	; (8015738 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 80156b8:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 80156ba:	2100      	movs	r1, #0
 80156bc:	481e      	ldr	r0, [pc, #120]	; (8015738 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 80156be:	f7f0 f8d7 	bl	8005870 <HAL_DMA2D_ConfigLayer>
 80156c2:	e005      	b.n	80156d0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x198>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 80156c4:	4a1c      	ldr	r2, [pc, #112]	; (8015738 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 80156c6:	69bb      	ldr	r3, [r7, #24]
 80156c8:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 80156ca:	4b1b      	ldr	r3, [pc, #108]	; (8015738 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 80156cc:	2200      	movs	r2, #0
 80156ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 80156d0:	2101      	movs	r1, #1
 80156d2:	4819      	ldr	r0, [pc, #100]	; (8015738 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 80156d4:	f7f0 f8cc 	bl	8005870 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataFill cache invalidation */

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 80156d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80156de:	d115      	bne.n	801570c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d4>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 80156e0:	683b      	ldr	r3, [r7, #0]
 80156e2:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80156e4:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 80156e6:	683b      	ldr	r3, [r7, #0]
 80156e8:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80156ea:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 80156ec:	683b      	ldr	r3, [r7, #0]
 80156ee:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80156f0:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80156f2:	683b      	ldr	r3, [r7, #0]
 80156f4:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80156f6:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80156f8:	683b      	ldr	r3, [r7, #0]
 80156fa:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80156fc:	9301      	str	r3, [sp, #4]
 80156fe:	9200      	str	r2, [sp, #0]
 8015700:	4623      	mov	r3, r4
 8015702:	4602      	mov	r2, r0
 8015704:	480c      	ldr	r0, [pc, #48]	; (8015738 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8015706:	f7ef fed6 	bl	80054b6 <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 801570a:	e00d      	b.n	8015728 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f0>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 801570c:	683b      	ldr	r3, [r7, #0]
 801570e:	68db      	ldr	r3, [r3, #12]
 8015710:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8015712:	683b      	ldr	r3, [r7, #0]
 8015714:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8015716:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8015718:	683b      	ldr	r3, [r7, #0]
 801571a:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 801571c:	9300      	str	r3, [sp, #0]
 801571e:	460b      	mov	r3, r1
 8015720:	6a39      	ldr	r1, [r7, #32]
 8015722:	4805      	ldr	r0, [pc, #20]	; (8015738 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8015724:	f7ef fe94 	bl	8005450 <HAL_DMA2D_Start_IT>
}
 8015728:	bf00      	nop
 801572a:	372c      	adds	r7, #44	; 0x2c
 801572c:	46bd      	mov	sp, r7
 801572e:	bd90      	pop	{r4, r7, pc}
 8015730:	84210843 	.word	0x84210843
 8015734:	82082083 	.word	0x82082083
 8015738:	2000048c 	.word	0x2000048c

0801573c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 801573c:	b580      	push	{r7, lr}
 801573e:	b082      	sub	sp, #8
 8015740:	af00      	add	r7, sp, #0
 8015742:	6078      	str	r0, [r7, #4]
 8015744:	4a05      	ldr	r2, [pc, #20]	; (801575c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	601a      	str	r2, [r3, #0]
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	4618      	mov	r0, r3
 801574e:	f7ff fc23 	bl	8014f98 <_ZN8touchgfx9DMA_QueueD1Ev>
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	4618      	mov	r0, r3
 8015756:	3708      	adds	r7, #8
 8015758:	46bd      	mov	sp, r7
 801575a:	bd80      	pop	{r7, pc}
 801575c:	080291d0 	.word	0x080291d0

08015760 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8015760:	b580      	push	{r7, lr}
 8015762:	b082      	sub	sp, #8
 8015764:	af00      	add	r7, sp, #0
 8015766:	6078      	str	r0, [r7, #4]
 8015768:	6878      	ldr	r0, [r7, #4]
 801576a:	f7ff ffe7 	bl	801573c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801576e:	2114      	movs	r1, #20
 8015770:	6878      	ldr	r0, [r7, #4]
 8015772:	f010 fcaf 	bl	80260d4 <_ZdlPvj>
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	4618      	mov	r0, r3
 801577a:	3708      	adds	r7, #8
 801577c:	46bd      	mov	sp, r7
 801577e:	bd80      	pop	{r7, pc}

08015780 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 8015780:	b480      	push	{r7}
 8015782:	b083      	sub	sp, #12
 8015784:	af00      	add	r7, sp, #0
 8015786:	6078      	str	r0, [r7, #4]
        texts = t;
 8015788:	4a04      	ldr	r2, [pc, #16]	; (801579c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	6013      	str	r3, [r2, #0]
    }
 801578e:	bf00      	nop
 8015790:	370c      	adds	r7, #12
 8015792:	46bd      	mov	sp, r7
 8015794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015798:	4770      	bx	lr
 801579a:	bf00      	nop
 801579c:	2000c650 	.word	0x2000c650

080157a0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80157a0:	b480      	push	{r7}
 80157a2:	b085      	sub	sp, #20
 80157a4:	af00      	add	r7, sp, #0
 80157a6:	60f8      	str	r0, [r7, #12]
 80157a8:	60b9      	str	r1, [r7, #8]
 80157aa:	607a      	str	r2, [r7, #4]
 80157ac:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 80157ae:	4a0b      	ldr	r2, [pc, #44]	; (80157dc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80157b0:	68fb      	ldr	r3, [r7, #12]
 80157b2:	601a      	str	r2, [r3, #0]
            MVPApplication& app) : presenterStorage(pres),
 80157b4:	68fb      	ldr	r3, [r7, #12]
 80157b6:	68ba      	ldr	r2, [r7, #8]
 80157b8:	605a      	str	r2, [r3, #4]
        screenStorage(scr),
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	687a      	ldr	r2, [r7, #4]
 80157be:	609a      	str	r2, [r3, #8]
        transitionStorage(tra),
 80157c0:	68fb      	ldr	r3, [r7, #12]
 80157c2:	683a      	ldr	r2, [r7, #0]
 80157c4:	60da      	str	r2, [r3, #12]
        frontendApplication(app)
 80157c6:	68fb      	ldr	r3, [r7, #12]
 80157c8:	69ba      	ldr	r2, [r7, #24]
 80157ca:	611a      	str	r2, [r3, #16]
    {
    }
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	4618      	mov	r0, r3
 80157d0:	3714      	adds	r7, #20
 80157d2:	46bd      	mov	sp, r7
 80157d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157d8:	4770      	bx	lr
 80157da:	bf00      	nop
 80157dc:	08028260 	.word	0x08028260

080157e0 <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 80157e0:	b480      	push	{r7}
 80157e2:	b083      	sub	sp, #12
 80157e4:	af00      	add	r7, sp, #0
 80157e6:	6078      	str	r0, [r7, #4]
    {
 80157e8:	4a04      	ldr	r2, [pc, #16]	; (80157fc <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	601a      	str	r2, [r3, #0]
    }
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	4618      	mov	r0, r3
 80157f2:	370c      	adds	r7, #12
 80157f4:	46bd      	mov	sp, r7
 80157f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157fa:	4770      	bx	lr
 80157fc:	08028260 	.word	0x08028260

08015800 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8015800:	b580      	push	{r7, lr}
 8015802:	b082      	sub	sp, #8
 8015804:	af00      	add	r7, sp, #0
 8015806:	6078      	str	r0, [r7, #4]
    }
 8015808:	6878      	ldr	r0, [r7, #4]
 801580a:	f7ff ffe9 	bl	80157e0 <_ZN8touchgfx7MVPHeapD1Ev>
 801580e:	2114      	movs	r1, #20
 8015810:	6878      	ldr	r0, [r7, #4]
 8015812:	f010 fc5f 	bl	80260d4 <_ZdlPvj>
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	4618      	mov	r0, r3
 801581a:	3708      	adds	r7, #8
 801581c:	46bd      	mov	sp, r7
 801581e:	bd80      	pop	{r7, pc}

08015820 <_ZN8touchgfx3LCDD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~LCD()
 8015820:	b480      	push	{r7}
 8015822:	b083      	sub	sp, #12
 8015824:	af00      	add	r7, sp, #0
 8015826:	6078      	str	r0, [r7, #4]
    {
 8015828:	4a04      	ldr	r2, [pc, #16]	; (801583c <_ZN8touchgfx3LCDD1Ev+0x1c>)
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	601a      	str	r2, [r3, #0]
    }
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	4618      	mov	r0, r3
 8015832:	370c      	adds	r7, #12
 8015834:	46bd      	mov	sp, r7
 8015836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801583a:	4770      	bx	lr
 801583c:	08029ab4 	.word	0x08029ab4

08015840 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8015840:	b580      	push	{r7, lr}
 8015842:	b082      	sub	sp, #8
 8015844:	af00      	add	r7, sp, #0
 8015846:	6078      	str	r0, [r7, #4]
    }
 8015848:	6878      	ldr	r0, [r7, #4]
 801584a:	f7ff ffe9 	bl	8015820 <_ZN8touchgfx3LCDD1Ev>
 801584e:	2108      	movs	r1, #8
 8015850:	6878      	ldr	r0, [r7, #4]
 8015852:	f010 fc3f 	bl	80260d4 <_ZdlPvj>
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	4618      	mov	r0, r3
 801585a:	3708      	adds	r7, #8
 801585c:	46bd      	mov	sp, r7
 801585e:	bd80      	pop	{r7, pc}

08015860 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 8015860:	b480      	push	{r7}
 8015862:	b083      	sub	sp, #12
 8015864:	af00      	add	r7, sp, #0
 8015866:	6078      	str	r0, [r7, #4]
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	2200      	movs	r2, #0
 801586c:	801a      	strh	r2, [r3, #0]
            startY(0),
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	2200      	movs	r2, #0
 8015872:	805a      	strh	r2, [r3, #2]
            downX(0),
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	2200      	movs	r2, #0
 8015878:	809a      	strh	r2, [r3, #4]
            downY(0),
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	2200      	movs	r2, #0
 801587e:	80da      	strh	r2, [r3, #6]
            tickCount(0),
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	2200      	movs	r2, #0
 8015884:	811a      	strh	r2, [r3, #8]
            velocityX(0),
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	2200      	movs	r2, #0
 801588a:	815a      	strh	r2, [r3, #10]
            velocityY(0),
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	2200      	movs	r2, #0
 8015890:	819a      	strh	r2, [r3, #12]
            inProgress(false)
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	2200      	movs	r2, #0
 8015896:	739a      	strb	r2, [r3, #14]
        {
        }
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	4618      	mov	r0, r3
 801589c:	370c      	adds	r7, #12
 801589e:	46bd      	mov	sp, r7
 80158a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158a4:	4770      	bx	lr

080158a6 <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 80158a6:	b580      	push	{r7, lr}
 80158a8:	b082      	sub	sp, #8
 80158aa:	af00      	add	r7, sp, #0
 80158ac:	6078      	str	r0, [r7, #4]
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	4618      	mov	r0, r3
 80158b2:	f7ff ffd5 	bl	8015860 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	2200      	movs	r2, #0
 80158ba:	611a      	str	r2, [r3, #16]
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	2200      	movs	r2, #0
 80158c0:	829a      	strh	r2, [r3, #20]
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	4618      	mov	r0, r3
 80158c6:	3708      	adds	r7, #8
 80158c8:	46bd      	mov	sp, r7
 80158ca:	bd80      	pop	{r7, pc}

080158cc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 80158cc:	b580      	push	{r7, lr}
 80158ce:	b084      	sub	sp, #16
 80158d0:	af00      	add	r7, sp, #0
 80158d2:	60f8      	str	r0, [r7, #12]
 80158d4:	60b9      	str	r1, [r7, #8]
 80158d6:	607a      	str	r2, [r7, #4]
 80158d8:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 80158da:	4a44      	ldr	r2, [pc, #272]	; (80159ec <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 80158dc:	68fb      	ldr	r3, [r7, #12]
 80158de:	601a      	str	r2, [r3, #0]
        dma(dmaInterface),
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	68ba      	ldr	r2, [r7, #8]
 80158e4:	605a      	str	r2, [r3, #4]
        lcdRef(display),
 80158e6:	68fb      	ldr	r3, [r7, #12]
 80158e8:	687a      	ldr	r2, [r7, #4]
 80158ea:	609a      	str	r2, [r3, #8]
        touchController(touchCtrl),
 80158ec:	68fb      	ldr	r3, [r7, #12]
 80158ee:	683a      	ldr	r2, [r7, #0]
 80158f0:	60da      	str	r2, [r3, #12]
        mcuInstrumentation(0),
 80158f2:	68fb      	ldr	r3, [r7, #12]
 80158f4:	2200      	movs	r2, #0
 80158f6:	611a      	str	r2, [r3, #16]
        buttonController(0),
 80158f8:	68fb      	ldr	r3, [r7, #12]
 80158fa:	2200      	movs	r2, #0
 80158fc:	615a      	str	r2, [r3, #20]
        frameBufferAllocator(0),
 80158fe:	68fb      	ldr	r3, [r7, #12]
 8015900:	2200      	movs	r2, #0
 8015902:	619a      	str	r2, [r3, #24]
        displayOrientationChangeRequested(false)
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	331c      	adds	r3, #28
 8015908:	4618      	mov	r0, r3
 801590a:	f7ff ffcc 	bl	80158a6 <_ZN8touchgfx8GesturesC1Ev>
        taskDelayFunc(0),
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	2200      	movs	r2, #0
 8015912:	639a      	str	r2, [r3, #56]	; 0x38
        frameBuffer0(0),
 8015914:	68fb      	ldr	r3, [r7, #12]
 8015916:	2200      	movs	r2, #0
 8015918:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1(0),
 801591a:	68fb      	ldr	r3, [r7, #12]
 801591c:	2200      	movs	r2, #0
 801591e:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2(0),
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	2200      	movs	r2, #0
 8015924:	645a      	str	r2, [r3, #68]	; 0x44
        refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8015926:	68fb      	ldr	r3, [r7, #12]
 8015928:	2200      	movs	r2, #0
 801592a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        fingerSize(1),
 801592e:	68fb      	ldr	r3, [r7, #12]
 8015930:	2201      	movs	r2, #1
 8015932:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
        lockDMAToPorch(true),
 8015936:	68fb      	ldr	r3, [r7, #12]
 8015938:	2201      	movs	r2, #1
 801593a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
        auxiliaryLCD(0),
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	2200      	movs	r2, #0
 8015942:	64da      	str	r2, [r3, #76]	; 0x4c
        displayOrientationChangeRequested(false)
 8015944:	68fb      	ldr	r3, [r7, #12]
 8015946:	3350      	adds	r3, #80	; 0x50
 8015948:	4618      	mov	r0, r3
 801594a:	f7fa fe52 	bl	80105f2 <_ZN8touchgfx4RectC1Ev>
        touchSampleRate(1),
 801594e:	68fb      	ldr	r3, [r7, #12]
 8015950:	2201      	movs	r2, #1
 8015952:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        mcuLoadPct(0),
 8015956:	68fb      	ldr	r3, [r7, #12]
 8015958:	2200      	movs	r2, #0
 801595a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        vSyncCnt(0),
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	2200      	movs	r2, #0
 8015962:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
        vSyncForFrame(1),
 8015966:	68fb      	ldr	r3, [r7, #12]
 8015968:	2201      	movs	r2, #1
 801596a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
        vSyncCompensationEnabled(false),
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	2200      	movs	r2, #0
 8015972:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        clientDirty(false),
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	2200      	movs	r2, #0
 801597a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        swapRequested(false),
 801597e:	68fb      	ldr	r3, [r7, #12]
 8015980:	2200      	movs	r2, #0
 8015982:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        lastTouched(false),
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	2200      	movs	r2, #0
 801598a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
        updateMCULoad(0),
 801598e:	68fb      	ldr	r3, [r7, #12]
 8015990:	2200      	movs	r2, #0
 8015992:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        cc_begin(0),
 8015996:	68fb      	ldr	r3, [r7, #12]
 8015998:	2200      	movs	r2, #0
 801599a:	671a      	str	r2, [r3, #112]	; 0x70
        displayOrientationChangeRequested(false)
 801599c:	68fb      	ldr	r3, [r7, #12]
 801599e:	2200      	movs	r2, #0
 80159a0:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 80159a4:	4a12      	ldr	r2, [pc, #72]	; (80159f0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 80159aa:	4a12      	ldr	r2, [pc, #72]	; (80159f4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 80159ac:	8b3b      	ldrh	r3, [r7, #24]
 80159ae:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 80159b0:	4a11      	ldr	r2, [pc, #68]	; (80159f8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 80159b2:	8bbb      	ldrh	r3, [r7, #28]
 80159b4:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 80159b6:	4b11      	ldr	r3, [pc, #68]	; (80159fc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 80159b8:	2200      	movs	r2, #0
 80159ba:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80159bc:	4b0d      	ldr	r3, [pc, #52]	; (80159f4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 80159be:	881a      	ldrh	r2, [r3, #0]
 80159c0:	4b0f      	ldr	r3, [pc, #60]	; (8015a00 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 80159c2:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80159c4:	4b0c      	ldr	r3, [pc, #48]	; (80159f8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 80159c6:	881a      	ldrh	r2, [r3, #0]
 80159c8:	4b0e      	ldr	r3, [pc, #56]	; (8015a04 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 80159ca:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80159cc:	8b3a      	ldrh	r2, [r7, #24]
 80159ce:	8bbb      	ldrh	r3, [r7, #28]
 80159d0:	429a      	cmp	r2, r3
 80159d2:	bf34      	ite	cc
 80159d4:	2301      	movcc	r3, #1
 80159d6:	2300      	movcs	r3, #0
 80159d8:	b2db      	uxtb	r3, r3
 80159da:	461a      	mov	r2, r3
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	4618      	mov	r0, r3
 80159e6:	3710      	adds	r7, #16
 80159e8:	46bd      	mov	sp, r7
 80159ea:	bd80      	pop	{r7, pc}
 80159ec:	08028d3c 	.word	0x08028d3c
 80159f0:	2000c5b4 	.word	0x2000c5b4
 80159f4:	2000c5a8 	.word	0x2000c5a8
 80159f8:	2000c5aa 	.word	0x2000c5aa
 80159fc:	2000c5ac 	.word	0x2000c5ac
 8015a00:	2000c5ae 	.word	0x2000c5ae
 8015a04:	2000c5b0 	.word	0x2000c5b0

08015a08 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8015a08:	b580      	push	{r7, lr}
 8015a0a:	b082      	sub	sp, #8
 8015a0c:	af00      	add	r7, sp, #0
 8015a0e:	6078      	str	r0, [r7, #4]
 8015a10:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 8015a12:	683b      	ldr	r3, [r7, #0]
 8015a14:	4618      	mov	r0, r3
 8015a16:	f7fa fbf3 	bl	8010200 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 8015a1a:	bf00      	nop
 8015a1c:	3708      	adds	r7, #8
 8015a1e:	46bd      	mov	sp, r7
 8015a20:	bd80      	pop	{r7, pc}
	...

08015a24 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8015a24:	b580      	push	{r7, lr}
 8015a26:	b086      	sub	sp, #24
 8015a28:	af02      	add	r7, sp, #8
 8015a2a:	60f8      	str	r0, [r7, #12]
 8015a2c:	60b9      	str	r1, [r7, #8]
 8015a2e:	607a      	str	r2, [r7, #4]
 8015a30:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8015a32:	68f8      	ldr	r0, [r7, #12]
 8015a34:	69bb      	ldr	r3, [r7, #24]
 8015a36:	9300      	str	r3, [sp, #0]
 8015a38:	683b      	ldr	r3, [r7, #0]
 8015a3a:	687a      	ldr	r2, [r7, #4]
 8015a3c:	68b9      	ldr	r1, [r7, #8]
 8015a3e:	f7ff feaf 	bl	80157a0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8015a42:	4a04      	ldr	r2, [pc, #16]	; (8015a54 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8015a44:	68fb      	ldr	r3, [r7, #12]
 8015a46:	601a      	str	r2, [r3, #0]
    {

    }
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	4618      	mov	r0, r3
 8015a4c:	3710      	adds	r7, #16
 8015a4e:	46bd      	mov	sp, r7
 8015a50:	bd80      	pop	{r7, pc}
 8015a52:	bf00      	nop
 8015a54:	0802824c 	.word	0x0802824c

08015a58 <__tcf_0>:
            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8015a58:	b580      	push	{r7, lr}
 8015a5a:	af00      	add	r7, sp, #0
 8015a5c:	4801      	ldr	r0, [pc, #4]	; (8015a64 <__tcf_0+0xc>)
 8015a5e:	f000 f9ed 	bl	8015e3c <_ZN12FrontendHeapD1Ev>
 8015a62:	bd80      	pop	{r7, pc}
 8015a64:	20008ee4 	.word	0x20008ee4

08015a68 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8015a68:	b580      	push	{r7, lr}
 8015a6a:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8015a6c:	4b11      	ldr	r3, [pc, #68]	; (8015ab4 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8015a6e:	681b      	ldr	r3, [r3, #0]
 8015a70:	f3bf 8f5b 	dmb	ish
 8015a74:	f003 0301 	and.w	r3, r3, #1
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	bf0c      	ite	eq
 8015a7c:	2301      	moveq	r3, #1
 8015a7e:	2300      	movne	r3, #0
 8015a80:	b2db      	uxtb	r3, r3
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d013      	beq.n	8015aae <_ZN12FrontendHeap11getInstanceEv+0x46>
 8015a86:	480b      	ldr	r0, [pc, #44]	; (8015ab4 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8015a88:	f010 fb26 	bl	80260d8 <__cxa_guard_acquire>
 8015a8c:	4603      	mov	r3, r0
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	bf14      	ite	ne
 8015a92:	2301      	movne	r3, #1
 8015a94:	2300      	moveq	r3, #0
 8015a96:	b2db      	uxtb	r3, r3
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d008      	beq.n	8015aae <_ZN12FrontendHeap11getInstanceEv+0x46>
 8015a9c:	4806      	ldr	r0, [pc, #24]	; (8015ab8 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8015a9e:	f000 f831 	bl	8015b04 <_ZN12FrontendHeapC1Ev>
 8015aa2:	4806      	ldr	r0, [pc, #24]	; (8015abc <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8015aa4:	f010 fb62 	bl	802616c <atexit>
 8015aa8:	4802      	ldr	r0, [pc, #8]	; (8015ab4 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8015aaa:	f010 fb21 	bl	80260f0 <__cxa_guard_release>
        return instance;
 8015aae:	4b02      	ldr	r3, [pc, #8]	; (8015ab8 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 8015ab0:	4618      	mov	r0, r3
 8015ab2:	bd80      	pop	{r7, pc}
 8015ab4:	2000b8a8 	.word	0x2000b8a8
 8015ab8:	20008ee4 	.word	0x20008ee4
 8015abc:	08015a59 	.word	0x08015a59

08015ac0 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8015ac0:	b580      	push	{r7, lr}
 8015ac2:	b082      	sub	sp, #8
 8015ac4:	af00      	add	r7, sp, #0
 8015ac6:	6078      	str	r0, [r7, #4]
 8015ac8:	4a05      	ldr	r2, [pc, #20]	; (8015ae0 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	601a      	str	r2, [r3, #0]
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	4618      	mov	r0, r3
 8015ad2:	f7ff fe85 	bl	80157e0 <_ZN8touchgfx7MVPHeapD1Ev>
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	4618      	mov	r0, r3
 8015ada:	3708      	adds	r7, #8
 8015adc:	46bd      	mov	sp, r7
 8015ade:	bd80      	pop	{r7, pc}
 8015ae0:	0802824c 	.word	0x0802824c

08015ae4 <_ZN16FrontendHeapBaseD0Ev>:
 8015ae4:	b580      	push	{r7, lr}
 8015ae6:	b082      	sub	sp, #8
 8015ae8:	af00      	add	r7, sp, #0
 8015aea:	6078      	str	r0, [r7, #4]
 8015aec:	6878      	ldr	r0, [r7, #4]
 8015aee:	f7ff ffe7 	bl	8015ac0 <_ZN16FrontendHeapBaseD1Ev>
 8015af2:	2114      	movs	r1, #20
 8015af4:	6878      	ldr	r0, [r7, #4]
 8015af6:	f010 faed 	bl	80260d4 <_ZdlPvj>
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	4618      	mov	r0, r3
 8015afe:	3708      	adds	r7, #8
 8015b00:	46bd      	mov	sp, r7
 8015b02:	bd80      	pop	{r7, pc}

08015b04 <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8015b04:	b5b0      	push	{r4, r5, r7, lr}
 8015b06:	b084      	sub	sp, #16
 8015b08:	af02      	add	r7, sp, #8
 8015b0a:	6078      	str	r0, [r7, #4]
        app(model, *this)
 8015b0c:	6878      	ldr	r0, [r7, #4]
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	f103 0414 	add.w	r4, r3, #20
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	f642 025c 	movw	r2, #10332	; 0x285c
 8015b20:	441a      	add	r2, r3
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8015b22:	6879      	ldr	r1, [r7, #4]
 8015b24:	f642 0370 	movw	r3, #10352	; 0x2870
 8015b28:	440b      	add	r3, r1
        app(model, *this)
 8015b2a:	9300      	str	r3, [sp, #0]
 8015b2c:	4613      	mov	r3, r2
 8015b2e:	462a      	mov	r2, r5
 8015b30:	4621      	mov	r1, r4
 8015b32:	f7ff ff77 	bl	8015a24 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8015b36:	4a19      	ldr	r2, [pc, #100]	; (8015b9c <_ZN12FrontendHeapC1Ev+0x98>)
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	601a      	str	r2, [r3, #0]
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	3314      	adds	r3, #20
 8015b40:	4618      	mov	r0, r3
 8015b42:	f000 f8dd 	bl	8015d00 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	332c      	adds	r3, #44	; 0x2c
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	f000 f90c 	bl	8015d68 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8015b50:	687a      	ldr	r2, [r7, #4]
 8015b52:	f642 035c 	movw	r3, #10332	; 0x285c
 8015b56:	4413      	add	r3, r2
 8015b58:	4618      	mov	r0, r3
 8015b5a:	f000 f93b 	bl	8015dd4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8015b5e:	687a      	ldr	r2, [r7, #4]
 8015b60:	f642 0370 	movw	r3, #10352	; 0x2870
 8015b64:	4413      	add	r3, r2
 8015b66:	687a      	ldr	r2, [r7, #4]
 8015b68:	f502 5127 	add.w	r1, r2, #10688	; 0x29c0
 8015b6c:	687a      	ldr	r2, [r7, #4]
 8015b6e:	4618      	mov	r0, r3
 8015b70:	f7fe f872 	bl	8013c58 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	f503 5327 	add.w	r3, r3, #10688	; 0x29c0
 8015b7a:	4618      	mov	r0, r3
 8015b7c:	f7fe fde0 	bl	8014740 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 8015b80:	6878      	ldr	r0, [r7, #4]
 8015b82:	687a      	ldr	r2, [r7, #4]
 8015b84:	f642 0370 	movw	r3, #10352	; 0x2870
 8015b88:	4413      	add	r3, r2
 8015b8a:	4619      	mov	r1, r3
 8015b8c:	f7ff ff3c 	bl	8015a08 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	4618      	mov	r0, r3
 8015b94:	3708      	adds	r7, #8
 8015b96:	46bd      	mov	sp, r7
 8015b98:	bdb0      	pop	{r4, r5, r7, pc}
 8015b9a:	bf00      	nop
 8015b9c:	0802819c 	.word	0x0802819c

08015ba0 <_ZN8touchgfx8LCD24bppD1Ev>:
class LCD24bpp : public LCD
{
public:
    LCD24bpp();

    virtual ~LCD24bpp()
 8015ba0:	b580      	push	{r7, lr}
 8015ba2:	b082      	sub	sp, #8
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	6078      	str	r0, [r7, #4]
    {
 8015ba8:	4a05      	ldr	r2, [pc, #20]	; (8015bc0 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	601a      	str	r2, [r3, #0]
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	4618      	mov	r0, r3
 8015bb2:	f7ff fe35 	bl	8015820 <_ZN8touchgfx3LCDD1Ev>
    }
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	4618      	mov	r0, r3
 8015bba:	3708      	adds	r7, #8
 8015bbc:	46bd      	mov	sp, r7
 8015bbe:	bd80      	pop	{r7, pc}
 8015bc0:	0802ae90 	.word	0x0802ae90

08015bc4 <_ZN8touchgfx8LCD24bppD0Ev>:
    virtual ~LCD24bpp()
 8015bc4:	b580      	push	{r7, lr}
 8015bc6:	b082      	sub	sp, #8
 8015bc8:	af00      	add	r7, sp, #0
 8015bca:	6078      	str	r0, [r7, #4]
    }
 8015bcc:	6878      	ldr	r0, [r7, #4]
 8015bce:	f7ff ffe7 	bl	8015ba0 <_ZN8touchgfx8LCD24bppD1Ev>
 8015bd2:	2158      	movs	r1, #88	; 0x58
 8015bd4:	6878      	ldr	r0, [r7, #4]
 8015bd6:	f010 fa7d 	bl	80260d4 <_ZdlPvj>
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	4618      	mov	r0, r3
 8015bde:	3708      	adds	r7, #8
 8015be0:	46bd      	mov	sp, r7
 8015be2:	bd80      	pop	{r7, pc}

08015be4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 8015be4:	b580      	push	{r7, lr}
 8015be6:	b086      	sub	sp, #24
 8015be8:	af02      	add	r7, sp, #8
 8015bea:	60f8      	str	r0, [r7, #12]
 8015bec:	60b9      	str	r1, [r7, #8]
 8015bee:	607a      	str	r2, [r7, #4]
 8015bf0:	603b      	str	r3, [r7, #0]
 8015bf2:	68f8      	ldr	r0, [r7, #12]
 8015bf4:	8bbb      	ldrh	r3, [r7, #28]
 8015bf6:	9301      	str	r3, [sp, #4]
 8015bf8:	8b3b      	ldrh	r3, [r7, #24]
 8015bfa:	9300      	str	r3, [sp, #0]
 8015bfc:	683b      	ldr	r3, [r7, #0]
 8015bfe:	687a      	ldr	r2, [r7, #4]
 8015c00:	68b9      	ldr	r1, [r7, #8]
 8015c02:	f7ff fe63 	bl	80158cc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8015c06:	4a04      	ldr	r2, [pc, #16]	; (8015c18 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8015c08:	68fb      	ldr	r3, [r7, #12]
 8015c0a:	601a      	str	r2, [r3, #0]
    }
 8015c0c:	68fb      	ldr	r3, [r7, #12]
 8015c0e:	4618      	mov	r0, r3
 8015c10:	3710      	adds	r7, #16
 8015c12:	46bd      	mov	sp, r7
 8015c14:	bd80      	pop	{r7, pc}
 8015c16:	bf00      	nop
 8015c18:	08028270 	.word	0x08028270

08015c1c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8015c1c:	b580      	push	{r7, lr}
 8015c1e:	b086      	sub	sp, #24
 8015c20:	af02      	add	r7, sp, #8
 8015c22:	60f8      	str	r0, [r7, #12]
 8015c24:	60b9      	str	r1, [r7, #8]
 8015c26:	607a      	str	r2, [r7, #4]
 8015c28:	603b      	str	r3, [r7, #0]
 8015c2a:	68f8      	ldr	r0, [r7, #12]
 8015c2c:	8bbb      	ldrh	r3, [r7, #28]
 8015c2e:	9301      	str	r3, [sp, #4]
 8015c30:	8b3b      	ldrh	r3, [r7, #24]
 8015c32:	9300      	str	r3, [sp, #0]
 8015c34:	683b      	ldr	r3, [r7, #0]
 8015c36:	687a      	ldr	r2, [r7, #4]
 8015c38:	68b9      	ldr	r1, [r7, #8]
 8015c3a:	f7ff ffd3 	bl	8015be4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8015c3e:	4a04      	ldr	r2, [pc, #16]	; (8015c50 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	601a      	str	r2, [r3, #0]
    }
 8015c44:	68fb      	ldr	r3, [r7, #12]
 8015c46:	4618      	mov	r0, r3
 8015c48:	3710      	adds	r7, #16
 8015c4a:	46bd      	mov	sp, r7
 8015c4c:	bd80      	pop	{r7, pc}
 8015c4e:	bf00      	nop
 8015c50:	08028074 	.word	0x08028074

08015c54 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8015c54:	b480      	push	{r7}
 8015c56:	b083      	sub	sp, #12
 8015c58:	af00      	add	r7, sp, #0
 8015c5a:	6078      	str	r0, [r7, #4]
 8015c5c:	4a04      	ldr	r2, [pc, #16]	; (8015c70 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	601a      	str	r2, [r3, #0]
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	4618      	mov	r0, r3
 8015c66:	370c      	adds	r7, #12
 8015c68:	46bd      	mov	sp, r7
 8015c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c6e:	4770      	bx	lr
 8015c70:	0802805c 	.word	0x0802805c

08015c74 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8015c74:	b580      	push	{r7, lr}
 8015c76:	b082      	sub	sp, #8
 8015c78:	af00      	add	r7, sp, #0
 8015c7a:	6078      	str	r0, [r7, #4]
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	4618      	mov	r0, r3
 8015c80:	f7ff ffe8 	bl	8015c54 <_ZN8touchgfx15TouchControllerC1Ev>
 8015c84:	4a03      	ldr	r2, [pc, #12]	; (8015c94 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	601a      	str	r2, [r3, #0]
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	4618      	mov	r0, r3
 8015c8e:	3708      	adds	r7, #8
 8015c90:	46bd      	mov	sp, r7
 8015c92:	bd80      	pop	{r7, pc}
 8015c94:	08028044 	.word	0x08028044

08015c98 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8015c98:	b590      	push	{r4, r7, lr}
 8015c9a:	b085      	sub	sp, #20
 8015c9c:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8015c9e:	f7fd feb7 	bl	8013a10 <_ZN14BitmapDatabase11getInstanceEv>
 8015ca2:	4604      	mov	r4, r0
 8015ca4:	f7fd febe 	bl	8013a24 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8015ca8:	4603      	mov	r3, r0
 8015caa:	4619      	mov	r1, r3
 8015cac:	2300      	movs	r3, #0
 8015cae:	9300      	str	r3, [sp, #0]
 8015cb0:	2300      	movs	r3, #0
 8015cb2:	2200      	movs	r2, #0
 8015cb4:	4620      	mov	r0, r4
 8015cb6:	f006 fcd5 	bl	801c664 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 8015cba:	4809      	ldr	r0, [pc, #36]	; (8015ce0 <touchgfx_init+0x48>)
 8015cbc:	f7ff fd60 	bl	8015780 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 8015cc0:	2000      	movs	r0, #0
 8015cc2:	f7fd fed3 	bl	8013a6c <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 8015cc6:	4807      	ldr	r0, [pc, #28]	; (8015ce4 <touchgfx_init+0x4c>)
 8015cc8:	f006 fc1a 	bl	801c500 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 8015ccc:	f7ff fecc 	bl	8015a68 <_ZN12FrontendHeap11getInstanceEv>
 8015cd0:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 8015cd2:	4805      	ldr	r0, [pc, #20]	; (8015ce8 <touchgfx_init+0x50>)
 8015cd4:	f7fe ffc4 	bl	8014c60 <_ZN11TouchGFXHAL10initializeEv>
}
 8015cd8:	bf00      	nop
 8015cda:	370c      	adds	r7, #12
 8015cdc:	46bd      	mov	sp, r7
 8015cde:	bd90      	pop	{r4, r7, pc}
 8015ce0:	2000c528 	.word	0x2000c528
 8015ce4:	20000054 	.word	0x20000054
 8015ce8:	2000c52c 	.word	0x2000c52c

08015cec <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8015cec:	b580      	push	{r7, lr}
 8015cee:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 8015cf0:	4802      	ldr	r0, [pc, #8]	; (8015cfc <touchgfx_taskEntry+0x10>)
 8015cf2:	f001 fa00 	bl	80170f6 <_ZN8touchgfx3HAL9taskEntryEv>
}
 8015cf6:	bf00      	nop
 8015cf8:	bd80      	pop	{r7, pc}
 8015cfa:	bf00      	nop
 8015cfc:	2000c52c 	.word	0x2000c52c

08015d00 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 8015d00:	b580      	push	{r7, lr}
 8015d02:	b082      	sub	sp, #8
 8015d04:	af00      	add	r7, sp, #0
 8015d06:	6078      	str	r0, [r7, #4]
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	f000 fc70 	bl	80165f0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8015d10:	4a03      	ldr	r2, [pc, #12]	; (8015d20 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	601a      	str	r2, [r3, #0]
    {
    }
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	4618      	mov	r0, r3
 8015d1a:	3708      	adds	r7, #8
 8015d1c:	46bd      	mov	sp, r7
 8015d1e:	bd80      	pop	{r7, pc}
 8015d20:	08028218 	.word	0x08028218

08015d24 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 8015d24:	b580      	push	{r7, lr}
 8015d26:	b082      	sub	sp, #8
 8015d28:	af00      	add	r7, sp, #0
 8015d2a:	6078      	str	r0, [r7, #4]
    {
    }
 8015d2c:	4a05      	ldr	r2, [pc, #20]	; (8015d44 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	601a      	str	r2, [r3, #0]
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	4618      	mov	r0, r3
 8015d36:	f000 fc59 	bl	80165ec <_ZN8touchgfx17AbstractPartitionD1Ev>
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	4618      	mov	r0, r3
 8015d3e:	3708      	adds	r7, #8
 8015d40:	46bd      	mov	sp, r7
 8015d42:	bd80      	pop	{r7, pc}
 8015d44:	08028218 	.word	0x08028218

08015d48 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8015d48:	b580      	push	{r7, lr}
 8015d4a:	b082      	sub	sp, #8
 8015d4c:	af00      	add	r7, sp, #0
 8015d4e:	6078      	str	r0, [r7, #4]
    }
 8015d50:	6878      	ldr	r0, [r7, #4]
 8015d52:	f7ff ffe7 	bl	8015d24 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015d56:	2118      	movs	r1, #24
 8015d58:	6878      	ldr	r0, [r7, #4]
 8015d5a:	f010 f9bb 	bl	80260d4 <_ZdlPvj>
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	4618      	mov	r0, r3
 8015d62:	3708      	adds	r7, #8
 8015d64:	46bd      	mov	sp, r7
 8015d66:	bd80      	pop	{r7, pc}

08015d68 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8015d68:	b580      	push	{r7, lr}
 8015d6a:	b082      	sub	sp, #8
 8015d6c:	af00      	add	r7, sp, #0
 8015d6e:	6078      	str	r0, [r7, #4]
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	4618      	mov	r0, r3
 8015d74:	f000 fc3c 	bl	80165f0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8015d78:	4a03      	ldr	r2, [pc, #12]	; (8015d88 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	601a      	str	r2, [r3, #0]
    }
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	4618      	mov	r0, r3
 8015d82:	3708      	adds	r7, #8
 8015d84:	46bd      	mov	sp, r7
 8015d86:	bd80      	pop	{r7, pc}
 8015d88:	080281e4 	.word	0x080281e4

08015d8c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8015d8c:	b580      	push	{r7, lr}
 8015d8e:	b082      	sub	sp, #8
 8015d90:	af00      	add	r7, sp, #0
 8015d92:	6078      	str	r0, [r7, #4]
    }
 8015d94:	4a05      	ldr	r2, [pc, #20]	; (8015dac <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	601a      	str	r2, [r3, #0]
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	4618      	mov	r0, r3
 8015d9e:	f000 fc25 	bl	80165ec <_ZN8touchgfx17AbstractPartitionD1Ev>
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	4618      	mov	r0, r3
 8015da6:	3708      	adds	r7, #8
 8015da8:	46bd      	mov	sp, r7
 8015daa:	bd80      	pop	{r7, pc}
 8015dac:	080281e4 	.word	0x080281e4

08015db0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8015db0:	b580      	push	{r7, lr}
 8015db2:	b082      	sub	sp, #8
 8015db4:	af00      	add	r7, sp, #0
 8015db6:	6078      	str	r0, [r7, #4]
    }
 8015db8:	6878      	ldr	r0, [r7, #4]
 8015dba:	f7ff ffe7 	bl	8015d8c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015dbe:	f642 0130 	movw	r1, #10288	; 0x2830
 8015dc2:	6878      	ldr	r0, [r7, #4]
 8015dc4:	f010 f986 	bl	80260d4 <_ZdlPvj>
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	4618      	mov	r0, r3
 8015dcc:	3708      	adds	r7, #8
 8015dce:	46bd      	mov	sp, r7
 8015dd0:	bd80      	pop	{r7, pc}
	...

08015dd4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8015dd4:	b580      	push	{r7, lr}
 8015dd6:	b082      	sub	sp, #8
 8015dd8:	af00      	add	r7, sp, #0
 8015dda:	6078      	str	r0, [r7, #4]
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	4618      	mov	r0, r3
 8015de0:	f000 fc06 	bl	80165f0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8015de4:	4a03      	ldr	r2, [pc, #12]	; (8015df4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	601a      	str	r2, [r3, #0]
    }
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	4618      	mov	r0, r3
 8015dee:	3708      	adds	r7, #8
 8015df0:	46bd      	mov	sp, r7
 8015df2:	bd80      	pop	{r7, pc}
 8015df4:	080281b0 	.word	0x080281b0

08015df8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8015df8:	b580      	push	{r7, lr}
 8015dfa:	b082      	sub	sp, #8
 8015dfc:	af00      	add	r7, sp, #0
 8015dfe:	6078      	str	r0, [r7, #4]
    }
 8015e00:	4a05      	ldr	r2, [pc, #20]	; (8015e18 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	601a      	str	r2, [r3, #0]
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	4618      	mov	r0, r3
 8015e0a:	f000 fbef 	bl	80165ec <_ZN8touchgfx17AbstractPartitionD1Ev>
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	4618      	mov	r0, r3
 8015e12:	3708      	adds	r7, #8
 8015e14:	46bd      	mov	sp, r7
 8015e16:	bd80      	pop	{r7, pc}
 8015e18:	080281b0 	.word	0x080281b0

08015e1c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8015e1c:	b580      	push	{r7, lr}
 8015e1e:	b082      	sub	sp, #8
 8015e20:	af00      	add	r7, sp, #0
 8015e22:	6078      	str	r0, [r7, #4]
    }
 8015e24:	6878      	ldr	r0, [r7, #4]
 8015e26:	f7ff ffe7 	bl	8015df8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015e2a:	2114      	movs	r1, #20
 8015e2c:	6878      	ldr	r0, [r7, #4]
 8015e2e:	f010 f951 	bl	80260d4 <_ZdlPvj>
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	4618      	mov	r0, r3
 8015e36:	3708      	adds	r7, #8
 8015e38:	46bd      	mov	sp, r7
 8015e3a:	bd80      	pop	{r7, pc}

08015e3c <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8015e3c:	b580      	push	{r7, lr}
 8015e3e:	b082      	sub	sp, #8
 8015e40:	af00      	add	r7, sp, #0
 8015e42:	6078      	str	r0, [r7, #4]
 8015e44:	4a11      	ldr	r2, [pc, #68]	; (8015e8c <_ZN12FrontendHeapD1Ev+0x50>)
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	601a      	str	r2, [r3, #0]
 8015e4a:	687a      	ldr	r2, [r7, #4]
 8015e4c:	f642 0370 	movw	r3, #10352	; 0x2870
 8015e50:	4413      	add	r3, r2
 8015e52:	4618      	mov	r0, r3
 8015e54:	f7fd feca 	bl	8013bec <_ZN19FrontendApplicationD1Ev>
 8015e58:	687a      	ldr	r2, [r7, #4]
 8015e5a:	f642 035c 	movw	r3, #10332	; 0x285c
 8015e5e:	4413      	add	r3, r2
 8015e60:	4618      	mov	r0, r3
 8015e62:	f7ff ffc9 	bl	8015df8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	332c      	adds	r3, #44	; 0x2c
 8015e6a:	4618      	mov	r0, r3
 8015e6c:	f7ff ff8e 	bl	8015d8c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	3314      	adds	r3, #20
 8015e74:	4618      	mov	r0, r3
 8015e76:	f7ff ff55 	bl	8015d24 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	4618      	mov	r0, r3
 8015e7e:	f7ff fe1f 	bl	8015ac0 <_ZN16FrontendHeapBaseD1Ev>
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	4618      	mov	r0, r3
 8015e86:	3708      	adds	r7, #8
 8015e88:	46bd      	mov	sp, r7
 8015e8a:	bd80      	pop	{r7, pc}
 8015e8c:	0802819c 	.word	0x0802819c

08015e90 <_ZN12FrontendHeapD0Ev>:
 8015e90:	b580      	push	{r7, lr}
 8015e92:	b082      	sub	sp, #8
 8015e94:	af00      	add	r7, sp, #0
 8015e96:	6078      	str	r0, [r7, #4]
 8015e98:	6878      	ldr	r0, [r7, #4]
 8015e9a:	f7ff ffcf 	bl	8015e3c <_ZN12FrontendHeapD1Ev>
 8015e9e:	f642 11c4 	movw	r1, #10692	; 0x29c4
 8015ea2:	6878      	ldr	r0, [r7, #4]
 8015ea4:	f010 f916 	bl	80260d4 <_ZdlPvj>
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	4618      	mov	r0, r3
 8015eac:	3708      	adds	r7, #8
 8015eae:	46bd      	mov	sp, r7
 8015eb0:	bd80      	pop	{r7, pc}
	...

08015eb4 <_Z41__static_initialization_and_destruction_0ii>:
 8015eb4:	b580      	push	{r7, lr}
 8015eb6:	b084      	sub	sp, #16
 8015eb8:	af02      	add	r7, sp, #8
 8015eba:	6078      	str	r0, [r7, #4]
 8015ebc:	6039      	str	r1, [r7, #0]
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	2b01      	cmp	r3, #1
 8015ec2:	d119      	bne.n	8015ef8 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8015ec4:	683b      	ldr	r3, [r7, #0]
 8015ec6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015eca:	4293      	cmp	r3, r2
 8015ecc:	d114      	bne.n	8015ef8 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8015ece:	4818      	ldr	r0, [pc, #96]	; (8015f30 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8015ed0:	f7ff fed0 	bl	8015c74 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 8015ed4:	4817      	ldr	r0, [pc, #92]	; (8015f34 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8015ed6:	f7ff f94d 	bl	8015174 <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 8015eda:	4817      	ldr	r0, [pc, #92]	; (8015f38 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8015edc:	f008 fde8 	bl	801eab0 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8015ee0:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015ee4:	9301      	str	r3, [sp, #4]
 8015ee6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8015eea:	9300      	str	r3, [sp, #0]
 8015eec:	4b10      	ldr	r3, [pc, #64]	; (8015f30 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8015eee:	4a12      	ldr	r2, [pc, #72]	; (8015f38 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8015ef0:	4910      	ldr	r1, [pc, #64]	; (8015f34 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8015ef2:	4812      	ldr	r0, [pc, #72]	; (8015f3c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8015ef4:	f7ff fe92 	bl	8015c1c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d113      	bne.n	8015f26 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8015efe:	683b      	ldr	r3, [r7, #0]
 8015f00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015f04:	4293      	cmp	r3, r2
 8015f06:	d10e      	bne.n	8015f26 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8015f08:	480c      	ldr	r0, [pc, #48]	; (8015f3c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8015f0a:	f7fe ff0f 	bl	8014d2c <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8015f0e:	480c      	ldr	r0, [pc, #48]	; (8015f40 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8015f10:	f7f9 fa00 	bl	800f314 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 8015f14:	4808      	ldr	r0, [pc, #32]	; (8015f38 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8015f16:	f7ff fe43 	bl	8015ba0 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 8015f1a:	4806      	ldr	r0, [pc, #24]	; (8015f34 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8015f1c:	f7ff f954 	bl	80151c8 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 8015f20:	4803      	ldr	r0, [pc, #12]	; (8015f30 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8015f22:	f7fe fca7 	bl	8014874 <_ZN20STM32TouchControllerD1Ev>
}
 8015f26:	bf00      	nop
 8015f28:	3708      	adds	r7, #8
 8015f2a:	46bd      	mov	sp, r7
 8015f2c:	bd80      	pop	{r7, pc}
 8015f2e:	bf00      	nop
 8015f30:	2000b8ac 	.word	0x2000b8ac
 8015f34:	2000b8b0 	.word	0x2000b8b0
 8015f38:	2000c4d0 	.word	0x2000c4d0
 8015f3c:	2000c52c 	.word	0x2000c52c
 8015f40:	20000054 	.word	0x20000054

08015f44 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 8015f44:	b480      	push	{r7}
 8015f46:	b083      	sub	sp, #12
 8015f48:	af00      	add	r7, sp, #0
 8015f4a:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8015f4c:	2301      	movs	r3, #1
    }
 8015f4e:	4618      	mov	r0, r3
 8015f50:	370c      	adds	r7, #12
 8015f52:	46bd      	mov	sp, r7
 8015f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f58:	4770      	bx	lr

08015f5a <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 8015f5a:	b480      	push	{r7}
 8015f5c:	b083      	sub	sp, #12
 8015f5e:	af00      	add	r7, sp, #0
 8015f60:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8015f62:	230c      	movs	r3, #12
    }
 8015f64:	4618      	mov	r0, r3
 8015f66:	370c      	adds	r7, #12
 8015f68:	46bd      	mov	sp, r7
 8015f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f6e:	4770      	bx	lr

08015f70 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 8015f70:	b480      	push	{r7}
 8015f72:	b083      	sub	sp, #12
 8015f74:	af00      	add	r7, sp, #0
 8015f76:	6078      	str	r0, [r7, #4]
 8015f78:	460b      	mov	r3, r1
 8015f7a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8015f7c:	887a      	ldrh	r2, [r7, #2]
 8015f7e:	4613      	mov	r3, r2
 8015f80:	005b      	lsls	r3, r3, #1
 8015f82:	4413      	add	r3, r2
 8015f84:	009b      	lsls	r3, r3, #2
 8015f86:	3308      	adds	r3, #8
 8015f88:	687a      	ldr	r2, [r7, #4]
 8015f8a:	4413      	add	r3, r2
    }
 8015f8c:	4618      	mov	r0, r3
 8015f8e:	370c      	adds	r7, #12
 8015f90:	46bd      	mov	sp, r7
 8015f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f96:	4770      	bx	lr

08015f98 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 8015f98:	b480      	push	{r7}
 8015f9a:	b083      	sub	sp, #12
 8015f9c:	af00      	add	r7, sp, #0
 8015f9e:	6078      	str	r0, [r7, #4]
 8015fa0:	460b      	mov	r3, r1
 8015fa2:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8015fa4:	887a      	ldrh	r2, [r7, #2]
 8015fa6:	4613      	mov	r3, r2
 8015fa8:	005b      	lsls	r3, r3, #1
 8015faa:	4413      	add	r3, r2
 8015fac:	009b      	lsls	r3, r3, #2
 8015fae:	3308      	adds	r3, #8
 8015fb0:	687a      	ldr	r2, [r7, #4]
 8015fb2:	4413      	add	r3, r2
    }
 8015fb4:	4618      	mov	r0, r3
 8015fb6:	370c      	adds	r7, #12
 8015fb8:	46bd      	mov	sp, r7
 8015fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fbe:	4770      	bx	lr

08015fc0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8015fc0:	b480      	push	{r7}
 8015fc2:	b083      	sub	sp, #12
 8015fc4:	af00      	add	r7, sp, #0
 8015fc6:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8015fc8:	2301      	movs	r3, #1
    }
 8015fca:	4618      	mov	r0, r3
 8015fcc:	370c      	adds	r7, #12
 8015fce:	46bd      	mov	sp, r7
 8015fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fd4:	4770      	bx	lr

08015fd6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8015fd6:	b480      	push	{r7}
 8015fd8:	b083      	sub	sp, #12
 8015fda:	af00      	add	r7, sp, #0
 8015fdc:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8015fde:	f642 0328 	movw	r3, #10280	; 0x2828
    }
 8015fe2:	4618      	mov	r0, r3
 8015fe4:	370c      	adds	r7, #12
 8015fe6:	46bd      	mov	sp, r7
 8015fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fec:	4770      	bx	lr

08015fee <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8015fee:	b480      	push	{r7}
 8015ff0:	b083      	sub	sp, #12
 8015ff2:	af00      	add	r7, sp, #0
 8015ff4:	6078      	str	r0, [r7, #4]
 8015ff6:	460b      	mov	r3, r1
 8015ff8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8015ffa:	887b      	ldrh	r3, [r7, #2]
 8015ffc:	f642 0228 	movw	r2, #10280	; 0x2828
 8016000:	fb02 f303 	mul.w	r3, r2, r3
 8016004:	3308      	adds	r3, #8
 8016006:	687a      	ldr	r2, [r7, #4]
 8016008:	4413      	add	r3, r2
    }
 801600a:	4618      	mov	r0, r3
 801600c:	370c      	adds	r7, #12
 801600e:	46bd      	mov	sp, r7
 8016010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016014:	4770      	bx	lr

08016016 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8016016:	b480      	push	{r7}
 8016018:	b083      	sub	sp, #12
 801601a:	af00      	add	r7, sp, #0
 801601c:	6078      	str	r0, [r7, #4]
 801601e:	460b      	mov	r3, r1
 8016020:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8016022:	887b      	ldrh	r3, [r7, #2]
 8016024:	f642 0228 	movw	r2, #10280	; 0x2828
 8016028:	fb02 f303 	mul.w	r3, r2, r3
 801602c:	3308      	adds	r3, #8
 801602e:	687a      	ldr	r2, [r7, #4]
 8016030:	4413      	add	r3, r2
    }
 8016032:	4618      	mov	r0, r3
 8016034:	370c      	adds	r7, #12
 8016036:	46bd      	mov	sp, r7
 8016038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801603c:	4770      	bx	lr

0801603e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801603e:	b480      	push	{r7}
 8016040:	b083      	sub	sp, #12
 8016042:	af00      	add	r7, sp, #0
 8016044:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8016046:	2301      	movs	r3, #1
    }
 8016048:	4618      	mov	r0, r3
 801604a:	370c      	adds	r7, #12
 801604c:	46bd      	mov	sp, r7
 801604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016052:	4770      	bx	lr

08016054 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8016054:	b480      	push	{r7}
 8016056:	b083      	sub	sp, #12
 8016058:	af00      	add	r7, sp, #0
 801605a:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801605c:	2310      	movs	r3, #16
    }
 801605e:	4618      	mov	r0, r3
 8016060:	370c      	adds	r7, #12
 8016062:	46bd      	mov	sp, r7
 8016064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016068:	4770      	bx	lr

0801606a <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801606a:	b480      	push	{r7}
 801606c:	b083      	sub	sp, #12
 801606e:	af00      	add	r7, sp, #0
 8016070:	6078      	str	r0, [r7, #4]
 8016072:	460b      	mov	r3, r1
 8016074:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8016076:	887b      	ldrh	r3, [r7, #2]
 8016078:	011b      	lsls	r3, r3, #4
 801607a:	3308      	adds	r3, #8
 801607c:	687a      	ldr	r2, [r7, #4]
 801607e:	4413      	add	r3, r2
    }
 8016080:	4618      	mov	r0, r3
 8016082:	370c      	adds	r7, #12
 8016084:	46bd      	mov	sp, r7
 8016086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801608a:	4770      	bx	lr

0801608c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801608c:	b480      	push	{r7}
 801608e:	b083      	sub	sp, #12
 8016090:	af00      	add	r7, sp, #0
 8016092:	6078      	str	r0, [r7, #4]
 8016094:	460b      	mov	r3, r1
 8016096:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8016098:	887b      	ldrh	r3, [r7, #2]
 801609a:	011b      	lsls	r3, r3, #4
 801609c:	3308      	adds	r3, #8
 801609e:	687a      	ldr	r2, [r7, #4]
 80160a0:	4413      	add	r3, r2
    }
 80160a2:	4618      	mov	r0, r3
 80160a4:	370c      	adds	r7, #12
 80160a6:	46bd      	mov	sp, r7
 80160a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160ac:	4770      	bx	lr

080160ae <_GLOBAL__sub_I_touchgfx_init>:
 80160ae:	b580      	push	{r7, lr}
 80160b0:	af00      	add	r7, sp, #0
 80160b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80160b6:	2001      	movs	r0, #1
 80160b8:	f7ff fefc 	bl	8015eb4 <_Z41__static_initialization_and_destruction_0ii>
 80160bc:	bd80      	pop	{r7, pc}

080160be <_GLOBAL__sub_D_touchgfx_init>:
 80160be:	b580      	push	{r7, lr}
 80160c0:	af00      	add	r7, sp, #0
 80160c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80160c6:	2000      	movs	r0, #0
 80160c8:	f7ff fef4 	bl	8015eb4 <_Z41__static_initialization_and_destruction_0ii>
 80160cc:	bd80      	pop	{r7, pc}

080160ce <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 80160ce:	b580      	push	{r7, lr}
 80160d0:	b082      	sub	sp, #8
 80160d2:	af00      	add	r7, sp, #0
 80160d4:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	681b      	ldr	r3, [r3, #0]
 80160da:	3318      	adds	r3, #24
 80160dc:	681b      	ldr	r3, [r3, #0]
 80160de:	6878      	ldr	r0, [r7, #4]
 80160e0:	4798      	blx	r3
    }
 80160e2:	bf00      	nop
 80160e4:	3708      	adds	r7, #8
 80160e6:	46bd      	mov	sp, r7
 80160e8:	bd80      	pop	{r7, pc}

080160ea <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 80160ea:	b480      	push	{r7}
 80160ec:	b083      	sub	sp, #12
 80160ee:	af00      	add	r7, sp, #0
 80160f0:	6078      	str	r0, [r7, #4]
 80160f2:	460b      	mov	r3, r1
 80160f4:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	78fa      	ldrb	r2, [r7, #3]
 80160fa:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 80160fe:	bf00      	nop
 8016100:	370c      	adds	r7, #12
 8016102:	46bd      	mov	sp, r7
 8016104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016108:	4770      	bx	lr

0801610a <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 801610a:	b480      	push	{r7}
 801610c:	b083      	sub	sp, #12
 801610e:	af00      	add	r7, sp, #0
 8016110:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8016118:	3301      	adds	r3, #1
 801611a:	b2da      	uxtb	r2, r3
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8016122:	bf00      	nop
 8016124:	370c      	adds	r7, #12
 8016126:	46bd      	mov	sp, r7
 8016128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801612c:	4770      	bx	lr
	...

08016130 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8016130:	b580      	push	{r7, lr}
 8016132:	b082      	sub	sp, #8
 8016134:	af00      	add	r7, sp, #0
 8016136:	6078      	str	r0, [r7, #4]
 8016138:	460b      	mov	r3, r1
 801613a:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 801613c:	78fb      	ldrb	r3, [r7, #3]
 801613e:	2b00      	cmp	r3, #0
 8016140:	d002      	beq.n	8016148 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8016142:	78fb      	ldrb	r3, [r7, #3]
 8016144:	2b02      	cmp	r3, #2
 8016146:	d105      	bne.n	8016154 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	78fa      	ldrb	r2, [r7, #3]
 801614c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8016150:	2301      	movs	r3, #1
 8016152:	e027      	b.n	80161a4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8016154:	78fb      	ldrb	r3, [r7, #3]
 8016156:	2b01      	cmp	r3, #1
 8016158:	d123      	bne.n	80161a2 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801615e:	2b00      	cmp	r3, #0
 8016160:	d014      	beq.n	801618c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	681b      	ldr	r3, [r3, #0]
 8016166:	3380      	adds	r3, #128	; 0x80
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	6878      	ldr	r0, [r7, #4]
 801616c:	4798      	blx	r3
 801616e:	4603      	mov	r3, r0
 8016170:	461a      	mov	r2, r3
 8016172:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016176:	429a      	cmp	r2, r3
 8016178:	d008      	beq.n	801618c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801617a:	4b0c      	ldr	r3, [pc, #48]	; (80161ac <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 801617c:	781b      	ldrb	r3, [r3, #0]
 801617e:	f083 0301 	eor.w	r3, r3, #1
 8016182:	b2db      	uxtb	r3, r3
 8016184:	2b00      	cmp	r3, #0
 8016186:	d001      	beq.n	801618c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8016188:	2301      	movs	r3, #1
 801618a:	e000      	b.n	801618e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 801618c:	2300      	movs	r3, #0
 801618e:	2b00      	cmp	r3, #0
 8016190:	d005      	beq.n	801619e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	78fa      	ldrb	r2, [r7, #3]
 8016196:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 801619a:	2301      	movs	r3, #1
 801619c:	e002      	b.n	80161a4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 801619e:	2300      	movs	r3, #0
 80161a0:	e000      	b.n	80161a4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 80161a2:	2300      	movs	r3, #0
    }
 80161a4:	4618      	mov	r0, r3
 80161a6:	3708      	adds	r7, #8
 80161a8:	46bd      	mov	sp, r7
 80161aa:	bd80      	pop	{r7, pc}
 80161ac:	2000c5b2 	.word	0x2000c5b2

080161b0 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void(*delayF)(uint16_t))
 80161b0:	b480      	push	{r7}
 80161b2:	b083      	sub	sp, #12
 80161b4:	af00      	add	r7, sp, #0
 80161b6:	6078      	str	r0, [r7, #4]
 80161b8:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	683a      	ldr	r2, [r7, #0]
 80161be:	639a      	str	r2, [r3, #56]	; 0x38
    }
 80161c0:	bf00      	nop
 80161c2:	370c      	adds	r7, #12
 80161c4:	46bd      	mov	sp, r7
 80161c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ca:	4770      	bx	lr

080161cc <__NVIC_EnableIRQ>:
{
 80161cc:	b480      	push	{r7}
 80161ce:	b083      	sub	sp, #12
 80161d0:	af00      	add	r7, sp, #0
 80161d2:	4603      	mov	r3, r0
 80161d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80161d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80161da:	2b00      	cmp	r3, #0
 80161dc:	db0b      	blt.n	80161f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80161de:	79fb      	ldrb	r3, [r7, #7]
 80161e0:	f003 021f 	and.w	r2, r3, #31
 80161e4:	4907      	ldr	r1, [pc, #28]	; (8016204 <__NVIC_EnableIRQ+0x38>)
 80161e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80161ea:	095b      	lsrs	r3, r3, #5
 80161ec:	2001      	movs	r0, #1
 80161ee:	fa00 f202 	lsl.w	r2, r0, r2
 80161f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80161f6:	bf00      	nop
 80161f8:	370c      	adds	r7, #12
 80161fa:	46bd      	mov	sp, r7
 80161fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016200:	4770      	bx	lr
 8016202:	bf00      	nop
 8016204:	e000e100 	.word	0xe000e100

08016208 <__NVIC_DisableIRQ>:
{
 8016208:	b480      	push	{r7}
 801620a:	b083      	sub	sp, #12
 801620c:	af00      	add	r7, sp, #0
 801620e:	4603      	mov	r3, r0
 8016210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016216:	2b00      	cmp	r3, #0
 8016218:	db12      	blt.n	8016240 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801621a:	79fb      	ldrb	r3, [r7, #7]
 801621c:	f003 021f 	and.w	r2, r3, #31
 8016220:	490a      	ldr	r1, [pc, #40]	; (801624c <__NVIC_DisableIRQ+0x44>)
 8016222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016226:	095b      	lsrs	r3, r3, #5
 8016228:	2001      	movs	r0, #1
 801622a:	fa00 f202 	lsl.w	r2, r0, r2
 801622e:	3320      	adds	r3, #32
 8016230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8016234:	f3bf 8f4f 	dsb	sy
}
 8016238:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801623a:	f3bf 8f6f 	isb	sy
}
 801623e:	bf00      	nop
}
 8016240:	bf00      	nop
 8016242:	370c      	adds	r7, #12
 8016244:	46bd      	mov	sp, r7
 8016246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801624a:	4770      	bx	lr
 801624c:	e000e100 	.word	0xe000e100

08016250 <__NVIC_SetPriority>:
{
 8016250:	b480      	push	{r7}
 8016252:	b083      	sub	sp, #12
 8016254:	af00      	add	r7, sp, #0
 8016256:	4603      	mov	r3, r0
 8016258:	6039      	str	r1, [r7, #0]
 801625a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801625c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016260:	2b00      	cmp	r3, #0
 8016262:	db0a      	blt.n	801627a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016264:	683b      	ldr	r3, [r7, #0]
 8016266:	b2da      	uxtb	r2, r3
 8016268:	490c      	ldr	r1, [pc, #48]	; (801629c <__NVIC_SetPriority+0x4c>)
 801626a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801626e:	0112      	lsls	r2, r2, #4
 8016270:	b2d2      	uxtb	r2, r2
 8016272:	440b      	add	r3, r1
 8016274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8016278:	e00a      	b.n	8016290 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801627a:	683b      	ldr	r3, [r7, #0]
 801627c:	b2da      	uxtb	r2, r3
 801627e:	4908      	ldr	r1, [pc, #32]	; (80162a0 <__NVIC_SetPriority+0x50>)
 8016280:	79fb      	ldrb	r3, [r7, #7]
 8016282:	f003 030f 	and.w	r3, r3, #15
 8016286:	3b04      	subs	r3, #4
 8016288:	0112      	lsls	r2, r2, #4
 801628a:	b2d2      	uxtb	r2, r2
 801628c:	440b      	add	r3, r1
 801628e:	761a      	strb	r2, [r3, #24]
}
 8016290:	bf00      	nop
 8016292:	370c      	adds	r7, #12
 8016294:	46bd      	mov	sp, r7
 8016296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801629a:	4770      	bx	lr
 801629c:	e000e100 	.word	0xe000e100
 80162a0:	e000ed00 	.word	0xe000ed00

080162a4 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 80162a4:	b5b0      	push	{r4, r5, r7, lr}
 80162a6:	b082      	sub	sp, #8
 80162a8:	af00      	add	r7, sp, #0
 80162aa:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	4618      	mov	r0, r3
 80162b0:	f001 f9e6 	bl	8017680 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(touchgfx::Application::getInstance()));
 80162b4:	687d      	ldr	r5, [r7, #4]
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	334c      	adds	r3, #76	; 0x4c
 80162bc:	681c      	ldr	r4, [r3, #0]
 80162be:	f003 ff43 	bl	801a148 <_ZN8touchgfx11Application11getInstanceEv>
 80162c2:	4603      	mov	r3, r0
 80162c4:	4619      	mov	r1, r3
 80162c6:	4628      	mov	r0, r5
 80162c8:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	490d      	ldr	r1, [pc, #52]	; (8016304 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 80162ce:	4618      	mov	r0, r3
 80162d0:	f7ff ff6e 	bl	80161b0 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	2101      	movs	r1, #1
 80162d8:	4618      	mov	r0, r3
 80162da:	f7ff ff29 	bl	8016130 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>

    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 80162de:	6878      	ldr	r0, [r7, #4]
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	3374      	adds	r3, #116	; 0x74
 80162e6:	681c      	ldr	r4, [r3, #0]
 80162e8:	2300      	movs	r3, #0
 80162ea:	2200      	movs	r2, #0
 80162ec:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80162f0:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	2101      	movs	r1, #1
 80162f6:	4618      	mov	r0, r3
 80162f8:	f7ff fef7 	bl	80160ea <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 80162fc:	bf00      	nop
 80162fe:	3708      	adds	r7, #8
 8016300:	46bd      	mov	sp, r7
 8016302:	bdb0      	pop	{r4, r5, r7, pc}
 8016304:	08014ec5 	.word	0x08014ec5

08016308 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8016308:	b580      	push	{r7, lr}
 801630a:	b082      	sub	sp, #8
 801630c:	af00      	add	r7, sp, #0
 801630e:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8016310:	2109      	movs	r1, #9
 8016312:	205a      	movs	r0, #90	; 0x5a
 8016314:	f7ff ff9c 	bl	8016250 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8016318:	2109      	movs	r1, #9
 801631a:	2058      	movs	r0, #88	; 0x58
 801631c:	f7ff ff98 	bl	8016250 <__NVIC_SetPriority>
}
 8016320:	bf00      	nop
 8016322:	3708      	adds	r7, #8
 8016324:	46bd      	mov	sp, r7
 8016326:	bd80      	pop	{r7, pc}

08016328 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8016328:	b580      	push	{r7, lr}
 801632a:	b082      	sub	sp, #8
 801632c:	af00      	add	r7, sp, #0
 801632e:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8016330:	205a      	movs	r0, #90	; 0x5a
 8016332:	f7ff ff4b 	bl	80161cc <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8016336:	2058      	movs	r0, #88	; 0x58
 8016338:	f7ff ff48 	bl	80161cc <__NVIC_EnableIRQ>
}
 801633c:	bf00      	nop
 801633e:	3708      	adds	r7, #8
 8016340:	46bd      	mov	sp, r7
 8016342:	bd80      	pop	{r7, pc}

08016344 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8016344:	b580      	push	{r7, lr}
 8016346:	b082      	sub	sp, #8
 8016348:	af00      	add	r7, sp, #0
 801634a:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 801634c:	205a      	movs	r0, #90	; 0x5a
 801634e:	f7ff ff5b 	bl	8016208 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8016352:	2058      	movs	r0, #88	; 0x58
 8016354:	f7ff ff58 	bl	8016208 <__NVIC_DisableIRQ>
}
 8016358:	bf00      	nop
 801635a:	3708      	adds	r7, #8
 801635c:	46bd      	mov	sp, r7
 801635e:	bd80      	pop	{r7, pc}

08016360 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8016360:	b480      	push	{r7}
 8016362:	b083      	sub	sp, #12
 8016364:	af00      	add	r7, sp, #0
 8016366:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8016368:	4b11      	ldr	r3, [pc, #68]	; (80163b0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801636a:	68db      	ldr	r3, [r3, #12]
 801636c:	b29b      	uxth	r3, r3
 801636e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016372:	b29b      	uxth	r3, r3
 8016374:	3b01      	subs	r3, #1
 8016376:	b29a      	uxth	r2, r3
 8016378:	4b0e      	ldr	r3, [pc, #56]	; (80163b4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 801637a:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 801637c:	4b0c      	ldr	r3, [pc, #48]	; (80163b0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801637e:	691b      	ldr	r3, [r3, #16]
 8016380:	b29b      	uxth	r3, r3
 8016382:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016386:	b29b      	uxth	r3, r3
 8016388:	3b01      	subs	r3, #1
 801638a:	b29a      	uxth	r2, r3
 801638c:	4b0a      	ldr	r3, [pc, #40]	; (80163b8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 801638e:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8016390:	4b08      	ldr	r3, [pc, #32]	; (80163b4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8016392:	881a      	ldrh	r2, [r3, #0]
 8016394:	4b06      	ldr	r3, [pc, #24]	; (80163b0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8016396:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8016398:	4b05      	ldr	r3, [pc, #20]	; (80163b0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801639a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801639c:	4a04      	ldr	r2, [pc, #16]	; (80163b0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801639e:	f043 0301 	orr.w	r3, r3, #1
 80163a2:	6353      	str	r3, [r2, #52]	; 0x34
}
 80163a4:	bf00      	nop
 80163a6:	370c      	adds	r7, #12
 80163a8:	46bd      	mov	sp, r7
 80163aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163ae:	4770      	bx	lr
 80163b0:	40016800 	.word	0x40016800
 80163b4:	2000c5a4 	.word	0x2000c5a4
 80163b8:	2000c5a6 	.word	0x2000c5a6

080163bc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 80163bc:	b480      	push	{r7}
 80163be:	b083      	sub	sp, #12
 80163c0:	af00      	add	r7, sp, #0
 80163c2:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80163c4:	4b03      	ldr	r3, [pc, #12]	; (80163d4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 80163c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80163c8:	4618      	mov	r0, r3
 80163ca:	370c      	adds	r7, #12
 80163cc:	46bd      	mov	sp, r7
 80163ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163d2:	4770      	bx	lr
 80163d4:	40016884 	.word	0x40016884

080163d8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 80163d8:	b480      	push	{r7}
 80163da:	b083      	sub	sp, #12
 80163dc:	af00      	add	r7, sp, #0
 80163de:	6078      	str	r0, [r7, #4]
 80163e0:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80163e2:	4a06      	ldr	r2, [pc, #24]	; (80163fc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 80163e4:	683b      	ldr	r3, [r7, #0]
 80163e6:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80163e8:	4b05      	ldr	r3, [pc, #20]	; (8016400 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 80163ea:	2201      	movs	r2, #1
 80163ec:	625a      	str	r2, [r3, #36]	; 0x24
}
 80163ee:	bf00      	nop
 80163f0:	370c      	adds	r7, #12
 80163f2:	46bd      	mov	sp, r7
 80163f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163f8:	4770      	bx	lr
 80163fa:	bf00      	nop
 80163fc:	40016884 	.word	0x40016884
 8016400:	40016800 	.word	0x40016800

08016404 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8016404:	b580      	push	{r7, lr}
 8016406:	b082      	sub	sp, #8
 8016408:	af00      	add	r7, sp, #0
 801640a:	6078      	str	r0, [r7, #4]
 801640c:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	6839      	ldr	r1, [r7, #0]
 8016412:	4618      	mov	r0, r3
 8016414:	f000 fe44 	bl	80170a0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8016418:	bf00      	nop
 801641a:	3708      	adds	r7, #8
 801641c:	46bd      	mov	sp, r7
 801641e:	bd80      	pop	{r7, pc}

08016420 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8016420:	b480      	push	{r7}
 8016422:	b085      	sub	sp, #20
 8016424:	af00      	add	r7, sp, #0
 8016426:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8016428:	4b0d      	ldr	r3, [pc, #52]	; (8016460 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 801642a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801642c:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 801642e:	4b0c      	ldr	r3, [pc, #48]	; (8016460 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8016430:	68db      	ldr	r3, [r3, #12]
 8016432:	b29b      	uxth	r3, r3
 8016434:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016438:	b29b      	uxth	r3, r3
 801643a:	3301      	adds	r3, #1
 801643c:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 801643e:	89fa      	ldrh	r2, [r7, #14]
 8016440:	89bb      	ldrh	r3, [r7, #12]
 8016442:	429a      	cmp	r2, r3
 8016444:	d201      	bcs.n	801644a <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 8016446:	2300      	movs	r3, #0
 8016448:	e003      	b.n	8016452 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 801644a:	89fa      	ldrh	r2, [r7, #14]
 801644c:	89bb      	ldrh	r3, [r7, #12]
 801644e:	1ad3      	subs	r3, r2, r3
 8016450:	b29b      	uxth	r3, r3
    }
}
 8016452:	4618      	mov	r0, r3
 8016454:	3714      	adds	r7, #20
 8016456:	46bd      	mov	sp, r7
 8016458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801645c:	4770      	bx	lr
 801645e:	bf00      	nop
 8016460:	40016800 	.word	0x40016800

08016464 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 8016464:	b580      	push	{r7, lr}
 8016466:	b082      	sub	sp, #8
 8016468:	af00      	add	r7, sp, #0
 801646a:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 801646c:	4b1a      	ldr	r3, [pc, #104]	; (80164d8 <HAL_LTDC_LineEventCallback+0x74>)
 801646e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016470:	4a1a      	ldr	r2, [pc, #104]	; (80164dc <HAL_LTDC_LineEventCallback+0x78>)
 8016472:	8812      	ldrh	r2, [r2, #0]
 8016474:	4293      	cmp	r3, r2
 8016476:	bf0c      	ite	eq
 8016478:	2301      	moveq	r3, #1
 801647a:	2300      	movne	r3, #0
 801647c:	b2db      	uxtb	r3, r3
 801647e:	2b00      	cmp	r3, #0
 8016480:	d017      	beq.n	80164b2 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8016482:	4b17      	ldr	r3, [pc, #92]	; (80164e0 <HAL_LTDC_LineEventCallback+0x7c>)
 8016484:	881b      	ldrh	r3, [r3, #0]
 8016486:	4619      	mov	r1, r3
 8016488:	6878      	ldr	r0, [r7, #4]
 801648a:	f7ef fec3 	bl	8006214 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 801648e:	f7f9 fc87 	bl	800fda0 <_ZN8touchgfx3HAL11getInstanceEv>
 8016492:	4603      	mov	r3, r0
 8016494:	4618      	mov	r0, r3
 8016496:	f7ff fe38 	bl	801610a <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 801649a:	f7fe fcd5 	bl	8014e48 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 801649e:	f7f9 fc7f 	bl	800fda0 <_ZN8touchgfx3HAL11getInstanceEv>
 80164a2:	4603      	mov	r3, r0
 80164a4:	4618      	mov	r0, r3
 80164a6:	f001 fb73 	bl	8017b90 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80164aa:	2000      	movs	r0, #0
 80164ac:	f7fe fa04 	bl	80148b8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 80164b0:	e00e      	b.n	80164d0 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 80164b2:	4b0a      	ldr	r3, [pc, #40]	; (80164dc <HAL_LTDC_LineEventCallback+0x78>)
 80164b4:	881b      	ldrh	r3, [r3, #0]
 80164b6:	4619      	mov	r1, r3
 80164b8:	6878      	ldr	r0, [r7, #4]
 80164ba:	f7ef feab 	bl	8006214 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 80164be:	2000      	movs	r0, #0
 80164c0:	f7fe fa05 	bl	80148ce <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 80164c4:	f7f9 fc6c 	bl	800fda0 <_ZN8touchgfx3HAL11getInstanceEv>
 80164c8:	4603      	mov	r3, r0
 80164ca:	4618      	mov	r0, r3
 80164cc:	f7ff fdff 	bl	80160ce <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 80164d0:	bf00      	nop
 80164d2:	3708      	adds	r7, #8
 80164d4:	46bd      	mov	sp, r7
 80164d6:	bd80      	pop	{r7, pc}
 80164d8:	40016800 	.word	0x40016800
 80164dc:	2000c5a4 	.word	0x2000c5a4
 80164e0:	2000c5a6 	.word	0x2000c5a6

080164e4 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 80164e4:	8880      	ldrh	r0, [r0, #4]
 80164e6:	4770      	bx	lr

080164e8 <_ZN8touchgfx17AbstractPartition5clearEv>:
 80164e8:	2300      	movs	r3, #0
 80164ea:	8083      	strh	r3, [r0, #4]
 80164ec:	4770      	bx	lr
	...

080164f0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80164f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164f2:	6803      	ldr	r3, [r0, #0]
 80164f4:	460e      	mov	r6, r1
 80164f6:	2100      	movs	r1, #0
 80164f8:	4605      	mov	r5, r0
 80164fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164fc:	4798      	blx	r3
 80164fe:	4604      	mov	r4, r0
 8016500:	682b      	ldr	r3, [r5, #0]
 8016502:	4628      	mov	r0, r5
 8016504:	1b34      	subs	r4, r6, r4
 8016506:	6a1b      	ldr	r3, [r3, #32]
 8016508:	b2a4      	uxth	r4, r4
 801650a:	4798      	blx	r3
 801650c:	88ab      	ldrh	r3, [r5, #4]
 801650e:	fbb4 f4f0 	udiv	r4, r4, r0
 8016512:	42a3      	cmp	r3, r4
 8016514:	d805      	bhi.n	8016522 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8016516:	4b0e      	ldr	r3, [pc, #56]	; (8016550 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8016518:	211e      	movs	r1, #30
 801651a:	4a0e      	ldr	r2, [pc, #56]	; (8016554 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 801651c:	480e      	ldr	r0, [pc, #56]	; (8016558 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 801651e:	f00f fe07 	bl	8026130 <__assert_func>
 8016522:	682b      	ldr	r3, [r5, #0]
 8016524:	2100      	movs	r1, #0
 8016526:	4628      	mov	r0, r5
 8016528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801652a:	4798      	blx	r3
 801652c:	682b      	ldr	r3, [r5, #0]
 801652e:	4607      	mov	r7, r0
 8016530:	4628      	mov	r0, r5
 8016532:	6a1b      	ldr	r3, [r3, #32]
 8016534:	4798      	blx	r3
 8016536:	1bf3      	subs	r3, r6, r7
 8016538:	b29b      	uxth	r3, r3
 801653a:	fbb3 f2f0 	udiv	r2, r3, r0
 801653e:	fb02 3010 	mls	r0, r2, r0, r3
 8016542:	b118      	cbz	r0, 801654c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8016544:	4b05      	ldr	r3, [pc, #20]	; (801655c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8016546:	211f      	movs	r1, #31
 8016548:	4a02      	ldr	r2, [pc, #8]	; (8016554 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 801654a:	e7e7      	b.n	801651c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 801654c:	4620      	mov	r0, r4
 801654e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016550:	0802831c 	.word	0x0802831c
 8016554:	0802848a 	.word	0x0802848a
 8016558:	08028331 	.word	0x08028331
 801655c:	0802835f 	.word	0x0802835f

08016560 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8016560:	b538      	push	{r3, r4, r5, lr}
 8016562:	6803      	ldr	r3, [r0, #0]
 8016564:	460d      	mov	r5, r1
 8016566:	4604      	mov	r4, r0
 8016568:	6a1b      	ldr	r3, [r3, #32]
 801656a:	4798      	blx	r3
 801656c:	4285      	cmp	r5, r0
 801656e:	d905      	bls.n	801657c <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8016570:	4b0c      	ldr	r3, [pc, #48]	; (80165a4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8016572:	212f      	movs	r1, #47	; 0x2f
 8016574:	4a0c      	ldr	r2, [pc, #48]	; (80165a8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8016576:	480d      	ldr	r0, [pc, #52]	; (80165ac <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8016578:	f00f fdda 	bl	8026130 <__assert_func>
 801657c:	6823      	ldr	r3, [r4, #0]
 801657e:	4620      	mov	r0, r4
 8016580:	88a5      	ldrh	r5, [r4, #4]
 8016582:	69db      	ldr	r3, [r3, #28]
 8016584:	4798      	blx	r3
 8016586:	4285      	cmp	r5, r0
 8016588:	d303      	bcc.n	8016592 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 801658a:	4b09      	ldr	r3, [pc, #36]	; (80165b0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 801658c:	2130      	movs	r1, #48	; 0x30
 801658e:	4a06      	ldr	r2, [pc, #24]	; (80165a8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8016590:	e7f1      	b.n	8016576 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8016592:	6823      	ldr	r3, [r4, #0]
 8016594:	4620      	mov	r0, r4
 8016596:	88a1      	ldrh	r1, [r4, #4]
 8016598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801659a:	4798      	blx	r3
 801659c:	88a3      	ldrh	r3, [r4, #4]
 801659e:	3301      	adds	r3, #1
 80165a0:	80a3      	strh	r3, [r4, #4]
 80165a2:	bd38      	pop	{r3, r4, r5, pc}
 80165a4:	080283d9 	.word	0x080283d9
 80165a8:	080284cd 	.word	0x080284cd
 80165ac:	08028331 	.word	0x08028331
 80165b0:	080283f0 	.word	0x080283f0

080165b4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80165b4:	b570      	push	{r4, r5, r6, lr}
 80165b6:	6803      	ldr	r3, [r0, #0]
 80165b8:	4616      	mov	r6, r2
 80165ba:	4604      	mov	r4, r0
 80165bc:	460d      	mov	r5, r1
 80165be:	6a1b      	ldr	r3, [r3, #32]
 80165c0:	4798      	blx	r3
 80165c2:	4286      	cmp	r6, r0
 80165c4:	d905      	bls.n	80165d2 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 80165c6:	4b06      	ldr	r3, [pc, #24]	; (80165e0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 80165c8:	2139      	movs	r1, #57	; 0x39
 80165ca:	4a06      	ldr	r2, [pc, #24]	; (80165e4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 80165cc:	4806      	ldr	r0, [pc, #24]	; (80165e8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 80165ce:	f00f fdaf 	bl	8026130 <__assert_func>
 80165d2:	6823      	ldr	r3, [r4, #0]
 80165d4:	4629      	mov	r1, r5
 80165d6:	4620      	mov	r0, r4
 80165d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80165de:	4718      	bx	r3
 80165e0:	080283d9 	.word	0x080283d9
 80165e4:	08028440 	.word	0x08028440
 80165e8:	08028331 	.word	0x08028331

080165ec <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80165ec:	4770      	bx	lr
	...

080165f0 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80165f0:	4a02      	ldr	r2, [pc, #8]	; (80165fc <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80165f2:	6002      	str	r2, [r0, #0]
 80165f4:	2200      	movs	r2, #0
 80165f6:	8082      	strh	r2, [r0, #4]
 80165f8:	4770      	bx	lr
 80165fa:	bf00      	nop
 80165fc:	08028414 	.word	0x08028414

08016600 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>:
 8016600:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
 8016604:	4770      	bx	lr

08016606 <_ZNK8touchgfx11BoxProgress8getColorEv>:
 8016606:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 801660a:	4770      	bx	lr

0801660c <_ZN8touchgfx11BoxProgress8setAlphaEh>:
 801660c:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
 8016610:	4770      	bx	lr

08016612 <_ZNK8touchgfx11BoxProgress8getAlphaEv>:
 8016612:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
 8016616:	4770      	bx	lr

08016618 <_ZN8touchgfx11BoxProgressD1Ev>:
 8016618:	4b03      	ldr	r3, [pc, #12]	; (8016628 <_ZN8touchgfx11BoxProgressD1Ev+0x10>)
 801661a:	b510      	push	{r4, lr}
 801661c:	4604      	mov	r4, r0
 801661e:	6003      	str	r3, [r0, #0]
 8016620:	f000 f8b6 	bl	8016790 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8016624:	4620      	mov	r0, r4
 8016626:	bd10      	pop	{r4, pc}
 8016628:	08028514 	.word	0x08028514

0801662c <_ZN8touchgfx11BoxProgressD0Ev>:
 801662c:	b510      	push	{r4, lr}
 801662e:	4604      	mov	r4, r0
 8016630:	f7ff fff2 	bl	8016618 <_ZN8touchgfx11BoxProgressD1Ev>
 8016634:	21c0      	movs	r1, #192	; 0xc0
 8016636:	4620      	mov	r0, r4
 8016638:	f00f fd4c 	bl	80260d4 <_ZdlPvj>
 801663c:	4620      	mov	r0, r4
 801663e:	bd10      	pop	{r4, pc}

08016640 <_ZN8touchgfx11BoxProgressC1Ev>:
 8016640:	b510      	push	{r4, lr}
 8016642:	4604      	mov	r4, r0
 8016644:	f000 f8b8 	bl	80167b8 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 8016648:	2201      	movs	r2, #1
 801664a:	4b16      	ldr	r3, [pc, #88]	; (80166a4 <_ZN8touchgfx11BoxProgressC1Ev+0x64>)
 801664c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016650:	f104 0190 	add.w	r1, r4, #144	; 0x90
 8016654:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
 8016658:	4a13      	ldr	r2, [pc, #76]	; (80166a8 <_ZN8touchgfx11BoxProgressC1Ev+0x68>)
 801665a:	6023      	str	r3, [r4, #0]
 801665c:	2300      	movs	r3, #0
 801665e:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8016662:	22ff      	movs	r2, #255	; 0xff
 8016664:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
 8016668:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
 801666c:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
 8016670:	f8a4 309a 	strh.w	r3, [r4, #154]	; 0x9a
 8016674:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
 8016678:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 801667c:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 8016680:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 8016684:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 8016688:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 801668c:	f884 20b6 	strb.w	r2, [r4, #182]	; 0xb6
 8016690:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8016694:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 8016698:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 801669c:	f000 fbb8 	bl	8016e10 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80166a0:	4620      	mov	r0, r4
 80166a2:	bd10      	pop	{r4, pc}
 80166a4:	08028514 	.word	0x08028514
 80166a8:	080297cc 	.word	0x080297cc

080166ac <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>:
 80166ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80166b0:	4617      	mov	r7, r2
 80166b2:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 80166b6:	2200      	movs	r2, #0
 80166b8:	4604      	mov	r4, r0
 80166ba:	460e      	mov	r6, r1
 80166bc:	4698      	mov	r8, r3
 80166be:	4611      	mov	r1, r2
 80166c0:	9500      	str	r5, [sp, #0]
 80166c2:	3090      	adds	r0, #144	; 0x90
 80166c4:	f7fa f82a 	bl	801071c <_ZN8touchgfx8Drawable11setPositionEssss>
 80166c8:	4643      	mov	r3, r8
 80166ca:	463a      	mov	r2, r7
 80166cc:	4631      	mov	r1, r6
 80166ce:	4620      	mov	r0, r4
 80166d0:	9508      	str	r5, [sp, #32]
 80166d2:	b002      	add	sp, #8
 80166d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80166d8:	f000 b9fa 	b.w	8016ad0 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

080166dc <_ZN8touchgfx11BoxProgress8setValueEi>:
 80166dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80166de:	4604      	mov	r4, r0
 80166e0:	f000 fa40 	bl	8016b64 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 80166e4:	f104 0590 	add.w	r5, r4, #144	; 0x90
 80166e8:	4628      	mov	r0, r5
 80166ea:	f004 f95b 	bl	801a9a4 <_ZNK8touchgfx8Drawable10invalidateEv>
 80166ee:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 80166f2:	2b03      	cmp	r3, #3
 80166f4:	d814      	bhi.n	8016720 <_ZN8touchgfx11BoxProgress8setValueEi+0x44>
 80166f6:	e8df f003 	tbb	[pc, r3]
 80166fa:	0202      	.short	0x0202
 80166fc:	1010      	.short	0x1010
 80166fe:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8016702:	4620      	mov	r0, r4
 8016704:	f000 fa88 	bl	8016c18 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8016708:	b200      	sxth	r0, r0
 801670a:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 801670e:	2b03      	cmp	r3, #3
 8016710:	d81a      	bhi.n	8016748 <_ZN8touchgfx11BoxProgress8setValueEi+0x6c>
 8016712:	e8df f003 	tbb	[pc, r3]
 8016716:	0e07      	.short	0x0e07
 8016718:	231f      	.short	0x231f
 801671a:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 801671e:	e7f0      	b.n	8016702 <_ZN8touchgfx11BoxProgress8setValueEi+0x26>
 8016720:	2000      	movs	r0, #0
 8016722:	e7f2      	b.n	801670a <_ZN8touchgfx11BoxProgress8setValueEi+0x2e>
 8016724:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8016728:	9300      	str	r3, [sp, #0]
 801672a:	4603      	mov	r3, r0
 801672c:	2200      	movs	r2, #0
 801672e:	2100      	movs	r1, #0
 8016730:	e007      	b.n	8016742 <_ZN8touchgfx11BoxProgress8setValueEi+0x66>
 8016732:	8921      	ldrh	r1, [r4, #8]
 8016734:	2200      	movs	r2, #0
 8016736:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 801673a:	1a09      	subs	r1, r1, r0
 801673c:	9300      	str	r3, [sp, #0]
 801673e:	4603      	mov	r3, r0
 8016740:	b209      	sxth	r1, r1
 8016742:	4628      	mov	r0, r5
 8016744:	f7f9 ffea 	bl	801071c <_ZN8touchgfx8Drawable11setPositionEssss>
 8016748:	4628      	mov	r0, r5
 801674a:	b003      	add	sp, #12
 801674c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016750:	f004 b928 	b.w	801a9a4 <_ZNK8touchgfx8Drawable10invalidateEv>
 8016754:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016758:	9000      	str	r0, [sp, #0]
 801675a:	e7e7      	b.n	801672c <_ZN8touchgfx11BoxProgress8setValueEi+0x50>
 801675c:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8016760:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016764:	1a12      	subs	r2, r2, r0
 8016766:	9000      	str	r0, [sp, #0]
 8016768:	b212      	sxth	r2, r2
 801676a:	e7e0      	b.n	801672e <_ZN8touchgfx11BoxProgress8setValueEi+0x52>

0801676c <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 801676c:	b570      	push	{r4, r5, r6, lr}
 801676e:	6803      	ldr	r3, [r0, #0]
 8016770:	4604      	mov	r4, r0
 8016772:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
 8016776:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 801677a:	4798      	blx	r3
 801677c:	4601      	mov	r1, r0
 801677e:	462b      	mov	r3, r5
 8016780:	4620      	mov	r0, r4
 8016782:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016786:	4718      	bx	r3

08016788 <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 8016788:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
 801678c:	4770      	bx	lr
	...

08016790 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
 8016790:	4b03      	ldr	r3, [pc, #12]	; (80167a0 <_ZN8touchgfx25AbstractDirectionProgressD1Ev+0x10>)
 8016792:	b510      	push	{r4, lr}
 8016794:	4604      	mov	r4, r0
 8016796:	6003      	str	r3, [r0, #0]
 8016798:	f000 f999 	bl	8016ace <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 801679c:	4620      	mov	r0, r4
 801679e:	bd10      	pop	{r4, pc}
 80167a0:	080285ec 	.word	0x080285ec

080167a4 <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 80167a4:	b510      	push	{r4, lr}
 80167a6:	4604      	mov	r4, r0
 80167a8:	f7ff fff2 	bl	8016790 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 80167ac:	2190      	movs	r1, #144	; 0x90
 80167ae:	4620      	mov	r0, r4
 80167b0:	f00f fc90 	bl	80260d4 <_ZdlPvj>
 80167b4:	4620      	mov	r0, r4
 80167b6:	bd10      	pop	{r4, pc}

080167b8 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 80167b8:	b510      	push	{r4, lr}
 80167ba:	4604      	mov	r4, r0
 80167bc:	f000 fa4c 	bl	8016c58 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 80167c0:	4b03      	ldr	r3, [pc, #12]	; (80167d0 <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 80167c2:	2100      	movs	r1, #0
 80167c4:	4620      	mov	r0, r4
 80167c6:	6023      	str	r3, [r4, #0]
 80167c8:	f7ff ffd0 	bl	801676c <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
 80167cc:	4620      	mov	r0, r4
 80167ce:	bd10      	pop	{r4, pc}
 80167d0:	080285ec 	.word	0x080285ec

080167d4 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>:
 80167d4:	b570      	push	{r4, r5, r6, lr}
 80167d6:	6803      	ldr	r3, [r0, #0]
 80167d8:	4604      	mov	r4, r0
 80167da:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
 80167de:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 80167e2:	4798      	blx	r3
 80167e4:	4601      	mov	r1, r0
 80167e6:	462b      	mov	r3, r5
 80167e8:	4620      	mov	r0, r4
 80167ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80167ee:	4718      	bx	r3

080167f0 <_ZNK8touchgfx13ImageProgress15getAnchorAtZeroEv>:
 80167f0:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
 80167f4:	4770      	bx	lr

080167f6 <_ZN8touchgfx13ImageProgress8setAlphaEh>:
 80167f6:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
 80167fa:	4770      	bx	lr

080167fc <_ZNK8touchgfx13ImageProgress8getAlphaEv>:
 80167fc:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
 8016800:	4770      	bx	lr

08016802 <_ZN8touchgfx13ImageProgress9setBitmapEt>:
 8016802:	b507      	push	{r0, r1, r2, lr}
 8016804:	ab02      	add	r3, sp, #8
 8016806:	30bc      	adds	r0, #188	; 0xbc
 8016808:	f823 1d04 	strh.w	r1, [r3, #-4]!
 801680c:	4619      	mov	r1, r3
 801680e:	f002 f9a9 	bl	8018b64 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
 8016812:	b003      	add	sp, #12
 8016814:	f85d fb04 	ldr.w	pc, [sp], #4

08016818 <_ZN8touchgfx13ImageProgressD1Ev>:
 8016818:	4b03      	ldr	r3, [pc, #12]	; (8016828 <_ZN8touchgfx13ImageProgressD1Ev+0x10>)
 801681a:	b510      	push	{r4, lr}
 801681c:	4604      	mov	r4, r0
 801681e:	6003      	str	r3, [r0, #0]
 8016820:	f7ff ffb6 	bl	8016790 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8016824:	4620      	mov	r0, r4
 8016826:	bd10      	pop	{r4, pc}
 8016828:	08028718 	.word	0x08028718

0801682c <_ZN8touchgfx13ImageProgressD0Ev>:
 801682c:	b510      	push	{r4, lr}
 801682e:	4604      	mov	r4, r0
 8016830:	f7ff fff2 	bl	8016818 <_ZN8touchgfx13ImageProgressD1Ev>
 8016834:	21f0      	movs	r1, #240	; 0xf0
 8016836:	4620      	mov	r0, r4
 8016838:	f00f fc4c 	bl	80260d4 <_ZdlPvj>
 801683c:	4620      	mov	r0, r4
 801683e:	bd10      	pop	{r4, pc}

08016840 <_ZNK8touchgfx13ImageProgress9getBitmapEv>:
 8016840:	b508      	push	{r3, lr}
 8016842:	4b06      	ldr	r3, [pc, #24]	; (801685c <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x1c>)
 8016844:	681b      	ldr	r3, [r3, #0]
 8016846:	b92b      	cbnz	r3, 8016854 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x14>
 8016848:	4b05      	ldr	r3, [pc, #20]	; (8016860 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x20>)
 801684a:	21b8      	movs	r1, #184	; 0xb8
 801684c:	4a05      	ldr	r2, [pc, #20]	; (8016864 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x24>)
 801684e:	4806      	ldr	r0, [pc, #24]	; (8016868 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x28>)
 8016850:	f00f fc6e 	bl	8026130 <__assert_func>
 8016854:	f8b0 00e2 	ldrh.w	r0, [r0, #226]	; 0xe2
 8016858:	bd08      	pop	{r3, pc}
 801685a:	bf00      	nop
 801685c:	2000c67c 	.word	0x2000c67c
 8016860:	080286ac 	.word	0x080286ac
 8016864:	080287f0 	.word	0x080287f0
 8016868:	080286e8 	.word	0x080286e8

0801686c <_ZN8touchgfx13ImageProgressC1Ev>:
 801686c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016870:	4604      	mov	r4, r0
 8016872:	f7ff ffa1 	bl	80167b8 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 8016876:	4b31      	ldr	r3, [pc, #196]	; (801693c <_ZN8touchgfx13ImageProgressC1Ev+0xd0>)
 8016878:	a902      	add	r1, sp, #8
 801687a:	4626      	mov	r6, r4
 801687c:	f104 08bc 	add.w	r8, r4, #188	; 0xbc
 8016880:	2500      	movs	r5, #0
 8016882:	4a2f      	ldr	r2, [pc, #188]	; (8016940 <_ZN8touchgfx13ImageProgressC1Ev+0xd4>)
 8016884:	f846 3b90 	str.w	r3, [r6], #144
 8016888:	2701      	movs	r7, #1
 801688a:	4b2e      	ldr	r3, [pc, #184]	; (8016944 <_ZN8touchgfx13ImageProgressC1Ev+0xd8>)
 801688c:	4640      	mov	r0, r8
 801688e:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
 8016892:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8016896:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801689a:	f8a4 5094 	strh.w	r5, [r4, #148]	; 0x94
 801689e:	f821 3d04 	strh.w	r3, [r1, #-4]!
 80168a2:	f8a4 30e2 	strh.w	r3, [r4, #226]	; 0xe2
 80168a6:	f8a4 5096 	strh.w	r5, [r4, #150]	; 0x96
 80168aa:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
 80168ae:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
 80168b2:	f8a4 509c 	strh.w	r5, [r4, #156]	; 0x9c
 80168b6:	f8a4 509e 	strh.w	r5, [r4, #158]	; 0x9e
 80168ba:	f8a4 50a0 	strh.w	r5, [r4, #160]	; 0xa0
 80168be:	f8a4 50a2 	strh.w	r5, [r4, #162]	; 0xa2
 80168c2:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
 80168c6:	f884 50b4 	strb.w	r5, [r4, #180]	; 0xb4
 80168ca:	f884 70b5 	strb.w	r7, [r4, #181]	; 0xb5
 80168ce:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
 80168d2:	f8a4 50c0 	strh.w	r5, [r4, #192]	; 0xc0
 80168d6:	f8a4 50c2 	strh.w	r5, [r4, #194]	; 0xc2
 80168da:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
 80168de:	f8a4 50c6 	strh.w	r5, [r4, #198]	; 0xc6
 80168e2:	f8a4 50c8 	strh.w	r5, [r4, #200]	; 0xc8
 80168e6:	f8a4 50ca 	strh.w	r5, [r4, #202]	; 0xca
 80168ea:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
 80168ee:	f8a4 50ce 	strh.w	r5, [r4, #206]	; 0xce
 80168f2:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
 80168f6:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
 80168fa:	f884 70e1 	strb.w	r7, [r4, #225]	; 0xe1
 80168fe:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8016902:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
 8016906:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
 801690a:	f002 fb6f 	bl	8018fec <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801690e:	4b0e      	ldr	r3, [pc, #56]	; (8016948 <_ZN8touchgfx13ImageProgressC1Ev+0xdc>)
 8016910:	4641      	mov	r1, r8
 8016912:	4630      	mov	r0, r6
 8016914:	f8a4 50e6 	strh.w	r5, [r4, #230]	; 0xe6
 8016918:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 801691c:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
 8016920:	f884 70ec 	strb.w	r7, [r4, #236]	; 0xec
 8016924:	f000 fa74 	bl	8016e10 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016928:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801692c:	4631      	mov	r1, r6
 801692e:	f000 fa6f 	bl	8016e10 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016932:	4620      	mov	r0, r4
 8016934:	b002      	add	sp, #8
 8016936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801693a:	bf00      	nop
 801693c:	08028718 	.word	0x08028718
 8016940:	08029934 	.word	0x08029934
 8016944:	08028a94 	.word	0x08028a94
 8016948:	08029834 	.word	0x08029834

0801694c <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>:
 801694c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016950:	4617      	mov	r7, r2
 8016952:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 8016956:	2200      	movs	r2, #0
 8016958:	4604      	mov	r4, r0
 801695a:	460e      	mov	r6, r1
 801695c:	4698      	mov	r8, r3
 801695e:	4611      	mov	r1, r2
 8016960:	9500      	str	r5, [sp, #0]
 8016962:	3090      	adds	r0, #144	; 0x90
 8016964:	f7f9 feda 	bl	801071c <_ZN8touchgfx8Drawable11setPositionEssss>
 8016968:	4643      	mov	r3, r8
 801696a:	463a      	mov	r2, r7
 801696c:	4631      	mov	r1, r6
 801696e:	4620      	mov	r0, r4
 8016970:	9508      	str	r5, [sp, #32]
 8016972:	b002      	add	sp, #8
 8016974:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016978:	f000 b8aa 	b.w	8016ad0 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

0801697c <_ZN8touchgfx13ImageProgress8setValueEi>:
 801697c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801697e:	4604      	mov	r4, r0
 8016980:	f000 f8f0 	bl	8016b64 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8016984:	f104 0790 	add.w	r7, r4, #144	; 0x90
 8016988:	4638      	mov	r0, r7
 801698a:	f004 f80b 	bl	801a9a4 <_ZNK8touchgfx8Drawable10invalidateEv>
 801698e:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8016992:	4620      	mov	r0, r4
 8016994:	2b01      	cmp	r3, #1
 8016996:	bf94      	ite	ls
 8016998:	f8b4 1060 	ldrhls.w	r1, [r4, #96]	; 0x60
 801699c:	f8b4 1062 	ldrhhi.w	r1, [r4, #98]	; 0x62
 80169a0:	f000 f93a 	bl	8016c18 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 80169a4:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
 80169a8:	4606      	mov	r6, r0
 80169aa:	b205      	sxth	r5, r0
 80169ac:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 80169b0:	2a00      	cmp	r2, #0
 80169b2:	d056      	beq.n	8016a62 <_ZN8touchgfx13ImageProgress8setValueEi+0xe6>
 80169b4:	2b03      	cmp	r3, #3
 80169b6:	d82c      	bhi.n	8016a12 <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 80169b8:	e8df f003 	tbb	[pc, r3]
 80169bc:	3d311202 	.word	0x3d311202
 80169c0:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 80169c4:	2200      	movs	r2, #0
 80169c6:	9300      	str	r3, [sp, #0]
 80169c8:	4611      	mov	r1, r2
 80169ca:	462b      	mov	r3, r5
 80169cc:	4638      	mov	r0, r7
 80169ce:	f7f9 fea5 	bl	801071c <_ZN8touchgfx8Drawable11setPositionEssss>
 80169d2:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 80169d6:	9300      	str	r3, [sp, #0]
 80169d8:	462b      	mov	r3, r5
 80169da:	2200      	movs	r2, #0
 80169dc:	4611      	mov	r1, r2
 80169de:	e014      	b.n	8016a0a <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 80169e0:	8921      	ldrh	r1, [r4, #8]
 80169e2:	2200      	movs	r2, #0
 80169e4:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 80169e8:	1a09      	subs	r1, r1, r0
 80169ea:	4638      	mov	r0, r7
 80169ec:	9300      	str	r3, [sp, #0]
 80169ee:	462b      	mov	r3, r5
 80169f0:	b209      	sxth	r1, r1
 80169f2:	f7f9 fe93 	bl	801071c <_ZN8touchgfx8Drawable11setPositionEssss>
 80169f6:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
 80169fa:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80169fe:	4249      	negs	r1, r1
 8016a00:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	; 0x62
 8016a04:	9200      	str	r2, [sp, #0]
 8016a06:	b209      	sxth	r1, r1
 8016a08:	2200      	movs	r2, #0
 8016a0a:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8016a0e:	f7f9 fe85 	bl	801071c <_ZN8touchgfx8Drawable11setPositionEssss>
 8016a12:	4638      	mov	r0, r7
 8016a14:	b003      	add	sp, #12
 8016a16:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016a1a:	f003 bfc3 	b.w	801a9a4 <_ZNK8touchgfx8Drawable10invalidateEv>
 8016a1e:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016a22:	2200      	movs	r2, #0
 8016a24:	9500      	str	r5, [sp, #0]
 8016a26:	2100      	movs	r1, #0
 8016a28:	4638      	mov	r0, r7
 8016a2a:	f7f9 fe77 	bl	801071c <_ZN8touchgfx8Drawable11setPositionEssss>
 8016a2e:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016a32:	9500      	str	r5, [sp, #0]
 8016a34:	e7d1      	b.n	80169da <_ZN8touchgfx13ImageProgress8setValueEi+0x5e>
 8016a36:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8016a3a:	2100      	movs	r1, #0
 8016a3c:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016a40:	1a12      	subs	r2, r2, r0
 8016a42:	9500      	str	r5, [sp, #0]
 8016a44:	4638      	mov	r0, r7
 8016a46:	b212      	sxth	r2, r2
 8016a48:	f7f9 fe68 	bl	801071c <_ZN8touchgfx8Drawable11setPositionEssss>
 8016a4c:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
 8016a50:	f9b4 1062 	ldrsh.w	r1, [r4, #98]	; 0x62
 8016a54:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016a58:	4252      	negs	r2, r2
 8016a5a:	9100      	str	r1, [sp, #0]
 8016a5c:	b212      	sxth	r2, r2
 8016a5e:	2100      	movs	r1, #0
 8016a60:	e7d3      	b.n	8016a0a <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 8016a62:	2b03      	cmp	r3, #3
 8016a64:	d8d5      	bhi.n	8016a12 <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 8016a66:	e8df f003 	tbb	[pc, r3]
 8016a6a:	1102      	.short	0x1102
 8016a6c:	2a1b      	.short	0x2a1b
 8016a6e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8016a72:	2200      	movs	r2, #0
 8016a74:	4638      	mov	r0, r7
 8016a76:	4611      	mov	r1, r2
 8016a78:	9300      	str	r3, [sp, #0]
 8016a7a:	462b      	mov	r3, r5
 8016a7c:	f7f9 fe4e 	bl	801071c <_ZN8touchgfx8Drawable11setPositionEssss>
 8016a80:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016a84:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8016a88:	1af1      	subs	r1, r6, r3
 8016a8a:	e7bb      	b.n	8016a04 <_ZN8touchgfx13ImageProgress8setValueEi+0x88>
 8016a8c:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8016a90:	2200      	movs	r2, #0
 8016a92:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8016a96:	1a09      	subs	r1, r1, r0
 8016a98:	9300      	str	r3, [sp, #0]
 8016a9a:	462b      	mov	r3, r5
 8016a9c:	b209      	sxth	r1, r1
 8016a9e:	e795      	b.n	80169cc <_ZN8touchgfx13ImageProgress8setValueEi+0x50>
 8016aa0:	2200      	movs	r2, #0
 8016aa2:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016aa6:	4638      	mov	r0, r7
 8016aa8:	9500      	str	r5, [sp, #0]
 8016aaa:	4611      	mov	r1, r2
 8016aac:	f7f9 fe36 	bl	801071c <_ZN8touchgfx8Drawable11setPositionEssss>
 8016ab0:	f9b4 0062 	ldrsh.w	r0, [r4, #98]	; 0x62
 8016ab4:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016ab8:	1a32      	subs	r2, r6, r0
 8016aba:	9000      	str	r0, [sp, #0]
 8016abc:	e7ce      	b.n	8016a5c <_ZN8touchgfx13ImageProgress8setValueEi+0xe0>
 8016abe:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8016ac2:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016ac6:	1a12      	subs	r2, r2, r0
 8016ac8:	9500      	str	r5, [sp, #0]
 8016aca:	b212      	sxth	r2, r2
 8016acc:	e7ab      	b.n	8016a26 <_ZN8touchgfx13ImageProgress8setValueEi+0xaa>

08016ace <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 8016ace:	4770      	bx	lr

08016ad0 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 8016ad0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016ad4:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 8016ad8:	4604      	mov	r4, r0
 8016ada:	460e      	mov	r6, r1
 8016adc:	4698      	mov	r8, r3
 8016ade:	9700      	str	r7, [sp, #0]
 8016ae0:	3058      	adds	r0, #88	; 0x58
 8016ae2:	4615      	mov	r5, r2
 8016ae4:	f7f9 fe1a 	bl	801071c <_ZN8touchgfx8Drawable11setPositionEssss>
 8016ae8:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8016aec:	eb06 0308 	add.w	r3, r6, r8
 8016af0:	429a      	cmp	r2, r3
 8016af2:	eb05 0207 	add.w	r2, r5, r7
 8016af6:	bfb8      	it	lt
 8016af8:	8123      	strhlt	r3, [r4, #8]
 8016afa:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8016afe:	4293      	cmp	r3, r2
 8016b00:	bfb8      	it	lt
 8016b02:	8162      	strhlt	r2, [r4, #10]
 8016b04:	b002      	add	sp, #8
 8016b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016b0a <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8016b0a:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 8016b0e:	4770      	bx	lr

08016b10 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 8016b10:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 8016b14:	4770      	bx	lr

08016b16 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 8016b16:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 8016b1a:	4770      	bx	lr

08016b1c <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 8016b1c:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 8016b20:	4770      	bx	lr

08016b22 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_RtS2_>:
 8016b22:	b510      	push	{r4, lr}
 8016b24:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 8016b28:	800c      	strh	r4, [r1, #0]
 8016b2a:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 8016b2e:	8011      	strh	r1, [r2, #0]
 8016b30:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 8016b34:	801a      	strh	r2, [r3, #0]
 8016b36:	9b02      	ldr	r3, [sp, #8]
 8016b38:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
 8016b3c:	801a      	strh	r2, [r3, #0]
 8016b3e:	bd10      	pop	{r4, pc}

08016b40 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_Rt>:
 8016b40:	b510      	push	{r4, lr}
 8016b42:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 8016b46:	800c      	strh	r4, [r1, #0]
 8016b48:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 8016b4c:	8011      	strh	r1, [r2, #0]
 8016b4e:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 8016b52:	801a      	strh	r2, [r3, #0]
 8016b54:	bd10      	pop	{r4, pc}

08016b56 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_>:
 8016b56:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 8016b5a:	800b      	strh	r3, [r1, #0]
 8016b5c:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 8016b60:	8013      	strh	r3, [r2, #0]
 8016b62:	4770      	bx	lr

08016b64 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 8016b64:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 8016b68:	4299      	cmp	r1, r3
 8016b6a:	bfb8      	it	lt
 8016b6c:	4619      	movlt	r1, r3
 8016b6e:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 8016b72:	4299      	cmp	r1, r3
 8016b74:	bfa8      	it	ge
 8016b76:	4619      	movge	r1, r3
 8016b78:	f8a0 1088 	strh.w	r1, [r0, #136]	; 0x88
 8016b7c:	4770      	bx	lr

08016b7e <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 8016b7e:	f8b0 0088 	ldrh.w	r0, [r0, #136]	; 0x88
 8016b82:	4770      	bx	lr

08016b84 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 8016b84:	b510      	push	{r4, lr}
 8016b86:	4604      	mov	r4, r0
 8016b88:	2190      	movs	r1, #144	; 0x90
 8016b8a:	f00f faa3 	bl	80260d4 <_ZdlPvj>
 8016b8e:	4620      	mov	r0, r4
 8016b90:	bd10      	pop	{r4, pc}

08016b92 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 8016b92:	b510      	push	{r4, lr}
 8016b94:	4604      	mov	r4, r0
 8016b96:	302c      	adds	r0, #44	; 0x2c
 8016b98:	f002 fa28 	bl	8018fec <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8016b9c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8016b9e:	8123      	strh	r3, [r4, #8]
 8016ba0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8016ba2:	8163      	strh	r3, [r4, #10]
 8016ba4:	bd10      	pop	{r4, pc}
	...

08016ba8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>:
 8016ba8:	4291      	cmp	r1, r2
 8016baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bae:	4604      	mov	r4, r0
 8016bb0:	460e      	mov	r6, r1
 8016bb2:	4615      	mov	r5, r2
 8016bb4:	4698      	mov	r8, r3
 8016bb6:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8016bba:	db05      	blt.n	8016bc8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x20>
 8016bbc:	4b12      	ldr	r3, [pc, #72]	; (8016c08 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x60>)
 8016bbe:	214d      	movs	r1, #77	; 0x4d
 8016bc0:	4a12      	ldr	r2, [pc, #72]	; (8016c0c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 8016bc2:	4813      	ldr	r0, [pc, #76]	; (8016c10 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x68>)
 8016bc4:	f00f fab4 	bl	8026130 <__assert_func>
 8016bc8:	f8a4 1084 	strh.w	r1, [r4, #132]	; 0x84
 8016bcc:	f8a4 2086 	strh.w	r2, [r4, #134]	; 0x86
 8016bd0:	6803      	ldr	r3, [r0, #0]
 8016bd2:	f8b0 1088 	ldrh.w	r1, [r0, #136]	; 0x88
 8016bd6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8016bda:	4798      	blx	r3
 8016bdc:	f1b8 0f00 	cmp.w	r8, #0
 8016be0:	d10c      	bne.n	8016bfc <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x54>
 8016be2:	1bad      	subs	r5, r5, r6
 8016be4:	f8a4 508a 	strh.w	r5, [r4, #138]	; 0x8a
 8016be8:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
 8016bec:	f8a4 708c 	strh.w	r7, [r4, #140]	; 0x8c
 8016bf0:	42bb      	cmp	r3, r7
 8016bf2:	d806      	bhi.n	8016c02 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x5a>
 8016bf4:	4b07      	ldr	r3, [pc, #28]	; (8016c14 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x6c>)
 8016bf6:	215a      	movs	r1, #90	; 0x5a
 8016bf8:	4a04      	ldr	r2, [pc, #16]	; (8016c0c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 8016bfa:	e7e2      	b.n	8016bc2 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x1a>
 8016bfc:	f8a4 808a 	strh.w	r8, [r4, #138]	; 0x8a
 8016c00:	e7f2      	b.n	8016be8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x40>
 8016c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c06:	bf00      	nop
 8016c08:	08028823 	.word	0x08028823
 8016c0c:	08028960 	.word	0x08028960
 8016c10:	0802882d 	.word	0x0802882d
 8016c14:	08028884 	.word	0x08028884

08016c18 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 8016c18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016c1a:	4604      	mov	r4, r0
 8016c1c:	460d      	mov	r5, r1
 8016c1e:	b1b9      	cbz	r1, 8016c50 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x38>
 8016c20:	f8b0 608c 	ldrh.w	r6, [r0, #140]	; 0x8c
 8016c24:	ab01      	add	r3, sp, #4
 8016c26:	f9b0 0084 	ldrsh.w	r0, [r0, #132]	; 0x84
 8016c2a:	f9b4 2086 	ldrsh.w	r2, [r4, #134]	; 0x86
 8016c2e:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
 8016c32:	f8b4 7088 	ldrh.w	r7, [r4, #136]	; 0x88
 8016c36:	1a12      	subs	r2, r2, r0
 8016c38:	1b89      	subs	r1, r1, r6
 8016c3a:	1a38      	subs	r0, r7, r0
 8016c3c:	f003 fff3 	bl	801ac26 <_ZN8touchgfx6muldivElllRl>
 8016c40:	4629      	mov	r1, r5
 8016c42:	ab01      	add	r3, sp, #4
 8016c44:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
 8016c48:	4430      	add	r0, r6
 8016c4a:	f003 ffec 	bl	801ac26 <_ZN8touchgfx6muldivElllRl>
 8016c4e:	b285      	uxth	r5, r0
 8016c50:	4628      	mov	r0, r5
 8016c52:	b003      	add	sp, #12
 8016c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08016c58 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8016c58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016c5c:	4604      	mov	r4, r0
 8016c5e:	2600      	movs	r6, #0
 8016c60:	f7f9 fd0e 	bl	8010680 <_ZN8touchgfx8DrawableC1Ev>
 8016c64:	4b1b      	ldr	r3, [pc, #108]	; (8016cd4 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x7c>)
 8016c66:	4625      	mov	r5, r4
 8016c68:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8016c6c:	af02      	add	r7, sp, #8
 8016c6e:	62a6      	str	r6, [r4, #40]	; 0x28
 8016c70:	f845 3b2c 	str.w	r3, [r5], #44
 8016c74:	4628      	mov	r0, r5
 8016c76:	f827 8d04 	strh.w	r8, [r7, #-4]!
 8016c7a:	f7f9 fd01 	bl	8010680 <_ZN8touchgfx8DrawableC1Ev>
 8016c7e:	4b16      	ldr	r3, [pc, #88]	; (8016cd8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x80>)
 8016c80:	4639      	mov	r1, r7
 8016c82:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8016c86:	4628      	mov	r0, r5
 8016c88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016c8a:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
 8016c8e:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
 8016c92:	f002 f9ab 	bl	8018fec <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8016c96:	4638      	mov	r0, r7
 8016c98:	f7f9 fcf2 	bl	8010680 <_ZN8touchgfx8DrawableC1Ev>
 8016c9c:	4b0f      	ldr	r3, [pc, #60]	; (8016cdc <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x84>)
 8016c9e:	4632      	mov	r2, r6
 8016ca0:	4631      	mov	r1, r6
 8016ca2:	65a3      	str	r3, [r4, #88]	; 0x58
 8016ca4:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8016ca8:	4628      	mov	r0, r5
 8016caa:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 8016cae:	f8a4 608c 	strh.w	r6, [r4, #140]	; 0x8c
 8016cb2:	e9c4 3321 	strd	r3, r3, [r4, #132]	; 0x84
 8016cb6:	f7f9 fd7c 	bl	80107b2 <_ZN8touchgfx8Drawable5setXYEss>
 8016cba:	4629      	mov	r1, r5
 8016cbc:	4620      	mov	r0, r4
 8016cbe:	f000 f8a7 	bl	8016e10 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016cc2:	4620      	mov	r0, r4
 8016cc4:	4639      	mov	r1, r7
 8016cc6:	f000 f8a3 	bl	8016e10 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016cca:	4620      	mov	r0, r4
 8016ccc:	b002      	add	sp, #8
 8016cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cd2:	bf00      	nop
 8016cd4:	080288a8 	.word	0x080288a8
 8016cd8:	08029934 	.word	0x08029934
 8016cdc:	08028a94 	.word	0x08028a94

08016ce0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8016ce0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016ce2:	2000      	movs	r0, #0
 8016ce4:	b12b      	cbz	r3, 8016cf2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8016ce6:	b920      	cbnz	r0, 8016cf2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8016ce8:	1a5a      	subs	r2, r3, r1
 8016cea:	699b      	ldr	r3, [r3, #24]
 8016cec:	4250      	negs	r0, r2
 8016cee:	4150      	adcs	r0, r2
 8016cf0:	e7f8      	b.n	8016ce4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8016cf2:	4770      	bx	lr

08016cf4 <_ZN8touchgfx9Container9removeAllEv>:
 8016cf4:	2200      	movs	r2, #0
 8016cf6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016cf8:	b123      	cbz	r3, 8016d04 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8016cfa:	6999      	ldr	r1, [r3, #24]
 8016cfc:	6281      	str	r1, [r0, #40]	; 0x28
 8016cfe:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8016d02:	e7f8      	b.n	8016cf6 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8016d04:	4770      	bx	lr

08016d06 <_ZN8touchgfx9Container6unlinkEv>:
 8016d06:	2300      	movs	r3, #0
 8016d08:	6283      	str	r3, [r0, #40]	; 0x28
 8016d0a:	4770      	bx	lr

08016d0c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8016d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d10:	461f      	mov	r7, r3
 8016d12:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8016d16:	460d      	mov	r5, r1
 8016d18:	4616      	mov	r6, r2
 8016d1a:	b103      	cbz	r3, 8016d1e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8016d1c:	6038      	str	r0, [r7, #0]
 8016d1e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016d20:	b314      	cbz	r4, 8016d68 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8016d22:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8016d26:	b1eb      	cbz	r3, 8016d64 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016d28:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8016d2c:	428d      	cmp	r5, r1
 8016d2e:	db19      	blt.n	8016d64 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016d30:	b289      	uxth	r1, r1
 8016d32:	8923      	ldrh	r3, [r4, #8]
 8016d34:	440b      	add	r3, r1
 8016d36:	b21b      	sxth	r3, r3
 8016d38:	429d      	cmp	r5, r3
 8016d3a:	da13      	bge.n	8016d64 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016d3c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8016d40:	4296      	cmp	r6, r2
 8016d42:	db0f      	blt.n	8016d64 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016d44:	b292      	uxth	r2, r2
 8016d46:	8963      	ldrh	r3, [r4, #10]
 8016d48:	4413      	add	r3, r2
 8016d4a:	b21b      	sxth	r3, r3
 8016d4c:	429e      	cmp	r6, r3
 8016d4e:	da09      	bge.n	8016d64 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016d50:	6823      	ldr	r3, [r4, #0]
 8016d52:	1ab2      	subs	r2, r6, r2
 8016d54:	1a69      	subs	r1, r5, r1
 8016d56:	4620      	mov	r0, r4
 8016d58:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8016d5c:	b212      	sxth	r2, r2
 8016d5e:	463b      	mov	r3, r7
 8016d60:	b209      	sxth	r1, r1
 8016d62:	47c0      	blx	r8
 8016d64:	69a4      	ldr	r4, [r4, #24]
 8016d66:	e7db      	b.n	8016d20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8016d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016d6c <_ZNK8touchgfx9Container12getSolidRectEv>:
 8016d6c:	2200      	movs	r2, #0
 8016d6e:	8002      	strh	r2, [r0, #0]
 8016d70:	8042      	strh	r2, [r0, #2]
 8016d72:	8082      	strh	r2, [r0, #4]
 8016d74:	80c2      	strh	r2, [r0, #6]
 8016d76:	4770      	bx	lr

08016d78 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8016d78:	b570      	push	{r4, r5, r6, lr}
 8016d7a:	460d      	mov	r5, r1
 8016d7c:	4616      	mov	r6, r2
 8016d7e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016d80:	b13c      	cbz	r4, 8016d92 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8016d82:	6823      	ldr	r3, [r4, #0]
 8016d84:	4620      	mov	r0, r4
 8016d86:	4632      	mov	r2, r6
 8016d88:	4629      	mov	r1, r5
 8016d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016d8c:	4798      	blx	r3
 8016d8e:	69a4      	ldr	r4, [r4, #24]
 8016d90:	e7f6      	b.n	8016d80 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8016d92:	bd70      	pop	{r4, r5, r6, pc}

08016d94 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8016d94:	b538      	push	{r3, r4, r5, lr}
 8016d96:	460d      	mov	r5, r1
 8016d98:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016d9a:	b134      	cbz	r4, 8016daa <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8016d9c:	682b      	ldr	r3, [r5, #0]
 8016d9e:	4621      	mov	r1, r4
 8016da0:	4628      	mov	r0, r5
 8016da2:	689b      	ldr	r3, [r3, #8]
 8016da4:	4798      	blx	r3
 8016da6:	69a4      	ldr	r4, [r4, #24]
 8016da8:	e7f7      	b.n	8016d9a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8016daa:	bd38      	pop	{r3, r4, r5, pc}

08016dac <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8016dac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016dae:	b19b      	cbz	r3, 8016dd8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8016db0:	428b      	cmp	r3, r1
 8016db2:	d109      	bne.n	8016dc8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8016db4:	699a      	ldr	r2, [r3, #24]
 8016db6:	2100      	movs	r1, #0
 8016db8:	6159      	str	r1, [r3, #20]
 8016dba:	6282      	str	r2, [r0, #40]	; 0x28
 8016dbc:	b902      	cbnz	r2, 8016dc0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8016dbe:	4770      	bx	lr
 8016dc0:	6199      	str	r1, [r3, #24]
 8016dc2:	4770      	bx	lr
 8016dc4:	4613      	mov	r3, r2
 8016dc6:	b13a      	cbz	r2, 8016dd8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8016dc8:	699a      	ldr	r2, [r3, #24]
 8016dca:	428a      	cmp	r2, r1
 8016dcc:	d1fa      	bne.n	8016dc4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8016dce:	698a      	ldr	r2, [r1, #24]
 8016dd0:	619a      	str	r2, [r3, #24]
 8016dd2:	2300      	movs	r3, #0
 8016dd4:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8016dd8:	4770      	bx	lr

08016dda <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8016dda:	b410      	push	{r4}
 8016ddc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016dde:	4604      	mov	r4, r0
 8016de0:	b92b      	cbnz	r3, 8016dee <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8016de2:	6803      	ldr	r3, [r0, #0]
 8016de4:	4611      	mov	r1, r2
 8016de6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016dec:	4718      	bx	r3
 8016dee:	b941      	cbnz	r1, 8016e02 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8016df0:	6193      	str	r3, [r2, #24]
 8016df2:	6282      	str	r2, [r0, #40]	; 0x28
 8016df4:	6154      	str	r4, [r2, #20]
 8016df6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016dfa:	4770      	bx	lr
 8016dfc:	4603      	mov	r3, r0
 8016dfe:	2800      	cmp	r0, #0
 8016e00:	d0f9      	beq.n	8016df6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8016e02:	4299      	cmp	r1, r3
 8016e04:	6998      	ldr	r0, [r3, #24]
 8016e06:	d1f9      	bne.n	8016dfc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8016e08:	6190      	str	r0, [r2, #24]
 8016e0a:	618a      	str	r2, [r1, #24]
 8016e0c:	e7f2      	b.n	8016df4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08016e10 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8016e10:	4288      	cmp	r0, r1
 8016e12:	b508      	push	{r3, lr}
 8016e14:	d105      	bne.n	8016e22 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8016e16:	4b11      	ldr	r3, [pc, #68]	; (8016e5c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8016e18:	2123      	movs	r1, #35	; 0x23
 8016e1a:	4a11      	ldr	r2, [pc, #68]	; (8016e60 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8016e1c:	4811      	ldr	r0, [pc, #68]	; (8016e64 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8016e1e:	f00f f987 	bl	8026130 <__assert_func>
 8016e22:	694b      	ldr	r3, [r1, #20]
 8016e24:	b11b      	cbz	r3, 8016e2e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8016e26:	4b10      	ldr	r3, [pc, #64]	; (8016e68 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8016e28:	2124      	movs	r1, #36	; 0x24
 8016e2a:	4a0d      	ldr	r2, [pc, #52]	; (8016e60 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8016e2c:	e7f6      	b.n	8016e1c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8016e2e:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8016e32:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016e34:	b913      	cbnz	r3, 8016e3c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8016e36:	6281      	str	r1, [r0, #40]	; 0x28
 8016e38:	bd08      	pop	{r3, pc}
 8016e3a:	4613      	mov	r3, r2
 8016e3c:	699a      	ldr	r2, [r3, #24]
 8016e3e:	b12a      	cbz	r2, 8016e4c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8016e40:	428b      	cmp	r3, r1
 8016e42:	d1fa      	bne.n	8016e3a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8016e44:	4b09      	ldr	r3, [pc, #36]	; (8016e6c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8016e46:	2135      	movs	r1, #53	; 0x35
 8016e48:	4a05      	ldr	r2, [pc, #20]	; (8016e60 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8016e4a:	e7e7      	b.n	8016e1c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8016e4c:	428b      	cmp	r3, r1
 8016e4e:	d103      	bne.n	8016e58 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8016e50:	4b06      	ldr	r3, [pc, #24]	; (8016e6c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8016e52:	2138      	movs	r1, #56	; 0x38
 8016e54:	4a02      	ldr	r2, [pc, #8]	; (8016e60 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8016e56:	e7e1      	b.n	8016e1c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8016e58:	6199      	str	r1, [r3, #24]
 8016e5a:	e7ed      	b.n	8016e38 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8016e5c:	080289c1 	.word	0x080289c1
 8016e60:	08028b18 	.word	0x08028b18
 8016e64:	080289ed 	.word	0x080289ed
 8016e68:	08028a20 	.word	0x08028a20
 8016e6c:	08028a56 	.word	0x08028a56

08016e70 <_ZN8touchgfx4RectaNERKS0_>:
 8016e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e74:	888b      	ldrh	r3, [r1, #4]
 8016e76:	f9b1 9000 	ldrsh.w	r9, [r1]
 8016e7a:	f9b0 a000 	ldrsh.w	sl, [r0]
 8016e7e:	444b      	add	r3, r9
 8016e80:	b29b      	uxth	r3, r3
 8016e82:	fa0f f883 	sxth.w	r8, r3
 8016e86:	45c2      	cmp	sl, r8
 8016e88:	da30      	bge.n	8016eec <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8016e8a:	8882      	ldrh	r2, [r0, #4]
 8016e8c:	4452      	add	r2, sl
 8016e8e:	b292      	uxth	r2, r2
 8016e90:	fa0f fe82 	sxth.w	lr, r2
 8016e94:	45f1      	cmp	r9, lr
 8016e96:	da29      	bge.n	8016eec <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8016e98:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8016e9c:	88cc      	ldrh	r4, [r1, #6]
 8016e9e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8016ea2:	442c      	add	r4, r5
 8016ea4:	b224      	sxth	r4, r4
 8016ea6:	42a6      	cmp	r6, r4
 8016ea8:	da20      	bge.n	8016eec <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8016eaa:	88c7      	ldrh	r7, [r0, #6]
 8016eac:	4437      	add	r7, r6
 8016eae:	b2bf      	uxth	r7, r7
 8016eb0:	fa0f fc87 	sxth.w	ip, r7
 8016eb4:	4565      	cmp	r5, ip
 8016eb6:	da19      	bge.n	8016eec <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8016eb8:	45ca      	cmp	sl, r9
 8016eba:	4654      	mov	r4, sl
 8016ebc:	bfb8      	it	lt
 8016ebe:	464c      	movlt	r4, r9
 8016ec0:	42b5      	cmp	r5, r6
 8016ec2:	bfb8      	it	lt
 8016ec4:	4635      	movlt	r5, r6
 8016ec6:	45f0      	cmp	r8, lr
 8016ec8:	bfc8      	it	gt
 8016eca:	4613      	movgt	r3, r2
 8016ecc:	1b1b      	subs	r3, r3, r4
 8016ece:	8083      	strh	r3, [r0, #4]
 8016ed0:	88ca      	ldrh	r2, [r1, #6]
 8016ed2:	884b      	ldrh	r3, [r1, #2]
 8016ed4:	8004      	strh	r4, [r0, #0]
 8016ed6:	4413      	add	r3, r2
 8016ed8:	8045      	strh	r5, [r0, #2]
 8016eda:	b29b      	uxth	r3, r3
 8016edc:	b21a      	sxth	r2, r3
 8016ede:	4594      	cmp	ip, r2
 8016ee0:	bfb8      	it	lt
 8016ee2:	463b      	movlt	r3, r7
 8016ee4:	1b5b      	subs	r3, r3, r5
 8016ee6:	80c3      	strh	r3, [r0, #6]
 8016ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016eec:	2300      	movs	r3, #0
 8016eee:	8003      	strh	r3, [r0, #0]
 8016ef0:	8043      	strh	r3, [r0, #2]
 8016ef2:	8083      	strh	r3, [r0, #4]
 8016ef4:	80c3      	strh	r3, [r0, #6]
 8016ef6:	e7f7      	b.n	8016ee8 <_ZN8touchgfx4RectaNERKS0_+0x78>

08016ef8 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8016ef8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016efc:	b12b      	cbz	r3, 8016f0a <_ZNK8touchgfx4Rect7isEmptyEv+0x12>
 8016efe:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8016f02:	fab0 f080 	clz	r0, r0
 8016f06:	0940      	lsrs	r0, r0, #5
 8016f08:	4770      	bx	lr
 8016f0a:	2001      	movs	r0, #1
 8016f0c:	4770      	bx	lr

08016f0e <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8016f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f12:	2300      	movs	r3, #0
 8016f14:	4604      	mov	r4, r0
 8016f16:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8016f18:	8003      	strh	r3, [r0, #0]
 8016f1a:	8043      	strh	r3, [r0, #2]
 8016f1c:	8083      	strh	r3, [r0, #4]
 8016f1e:	80c3      	strh	r3, [r0, #6]
 8016f20:	2d00      	cmp	r5, #0
 8016f22:	d040      	beq.n	8016fa6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8016f24:	1d28      	adds	r0, r5, #4
 8016f26:	f7ff ffe7 	bl	8016ef8 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016f2a:	b988      	cbnz	r0, 8016f50 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8016f2c:	4620      	mov	r0, r4
 8016f2e:	f7ff ffe3 	bl	8016ef8 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016f32:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8016f36:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8016f3a:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8016f3e:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8016f42:	b138      	cbz	r0, 8016f54 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8016f44:	8022      	strh	r2, [r4, #0]
 8016f46:	8063      	strh	r3, [r4, #2]
 8016f48:	f8a4 e004 	strh.w	lr, [r4, #4]
 8016f4c:	f8a4 c006 	strh.w	ip, [r4, #6]
 8016f50:	69ad      	ldr	r5, [r5, #24]
 8016f52:	e7e5      	b.n	8016f20 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8016f54:	f9b4 0000 	ldrsh.w	r0, [r4]
 8016f58:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8016f5c:	4290      	cmp	r0, r2
 8016f5e:	4607      	mov	r7, r0
 8016f60:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8016f64:	460e      	mov	r6, r1
 8016f66:	bfa8      	it	ge
 8016f68:	4617      	movge	r7, r2
 8016f6a:	4299      	cmp	r1, r3
 8016f6c:	4472      	add	r2, lr
 8016f6e:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8016f72:	bfa8      	it	ge
 8016f74:	461e      	movge	r6, r3
 8016f76:	4440      	add	r0, r8
 8016f78:	4471      	add	r1, lr
 8016f7a:	4463      	add	r3, ip
 8016f7c:	b200      	sxth	r0, r0
 8016f7e:	8027      	strh	r7, [r4, #0]
 8016f80:	b212      	sxth	r2, r2
 8016f82:	8066      	strh	r6, [r4, #2]
 8016f84:	b209      	sxth	r1, r1
 8016f86:	b21b      	sxth	r3, r3
 8016f88:	4290      	cmp	r0, r2
 8016f8a:	bfac      	ite	ge
 8016f8c:	ebc7 0200 	rsbge	r2, r7, r0
 8016f90:	ebc7 0202 	rsblt	r2, r7, r2
 8016f94:	4299      	cmp	r1, r3
 8016f96:	bfac      	ite	ge
 8016f98:	ebc6 0301 	rsbge	r3, r6, r1
 8016f9c:	ebc6 0303 	rsblt	r3, r6, r3
 8016fa0:	80a2      	strh	r2, [r4, #4]
 8016fa2:	80e3      	strh	r3, [r4, #6]
 8016fa4:	e7d4      	b.n	8016f50 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8016fa6:	4620      	mov	r0, r4
 8016fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016fac <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8016fac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016fb0:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8016fb4:	b383      	cbz	r3, 8017018 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8016fb6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016fb8:	b374      	cbz	r4, 8017018 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8016fba:	f9b1 5000 	ldrsh.w	r5, [r1]
 8016fbe:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8016fc2:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8016fc6:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8016fca:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8016fce:	b303      	cbz	r3, 8017012 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8016fd0:	4668      	mov	r0, sp
 8016fd2:	1d21      	adds	r1, r4, #4
 8016fd4:	f8ad 5000 	strh.w	r5, [sp]
 8016fd8:	f8ad 6002 	strh.w	r6, [sp, #2]
 8016fdc:	f8ad 7004 	strh.w	r7, [sp, #4]
 8016fe0:	f8ad 8006 	strh.w	r8, [sp, #6]
 8016fe4:	f7ff ff44 	bl	8016e70 <_ZN8touchgfx4RectaNERKS0_>
 8016fe8:	4668      	mov	r0, sp
 8016fea:	f7ff ff85 	bl	8016ef8 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016fee:	b980      	cbnz	r0, 8017012 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8016ff0:	f8bd 3000 	ldrh.w	r3, [sp]
 8016ff4:	4669      	mov	r1, sp
 8016ff6:	88a2      	ldrh	r2, [r4, #4]
 8016ff8:	4620      	mov	r0, r4
 8016ffa:	1a9b      	subs	r3, r3, r2
 8016ffc:	88e2      	ldrh	r2, [r4, #6]
 8016ffe:	f8ad 3000 	strh.w	r3, [sp]
 8017002:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017006:	1a9b      	subs	r3, r3, r2
 8017008:	f8ad 3002 	strh.w	r3, [sp, #2]
 801700c:	6823      	ldr	r3, [r4, #0]
 801700e:	689b      	ldr	r3, [r3, #8]
 8017010:	4798      	blx	r3
 8017012:	69a4      	ldr	r4, [r4, #24]
 8017014:	2c00      	cmp	r4, #0
 8017016:	d1d8      	bne.n	8016fca <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8017018:	b002      	add	sp, #8
 801701a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801701e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 801701e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017020:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8017024:	460d      	mov	r5, r1
 8017026:	4616      	mov	r6, r2
 8017028:	b323      	cbz	r3, 8017074 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801702a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801702c:	b314      	cbz	r4, 8017074 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801702e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8017032:	b1eb      	cbz	r3, 8017070 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8017034:	6828      	ldr	r0, [r5, #0]
 8017036:	466b      	mov	r3, sp
 8017038:	6869      	ldr	r1, [r5, #4]
 801703a:	c303      	stmia	r3!, {r0, r1}
 801703c:	4668      	mov	r0, sp
 801703e:	1d21      	adds	r1, r4, #4
 8017040:	f7ff ff16 	bl	8016e70 <_ZN8touchgfx4RectaNERKS0_>
 8017044:	4668      	mov	r0, sp
 8017046:	f7ff ff57 	bl	8016ef8 <_ZNK8touchgfx4Rect7isEmptyEv>
 801704a:	b988      	cbnz	r0, 8017070 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801704c:	f8bd 3000 	ldrh.w	r3, [sp]
 8017050:	4669      	mov	r1, sp
 8017052:	88a2      	ldrh	r2, [r4, #4]
 8017054:	4620      	mov	r0, r4
 8017056:	1a9b      	subs	r3, r3, r2
 8017058:	88e2      	ldrh	r2, [r4, #6]
 801705a:	f8ad 3000 	strh.w	r3, [sp]
 801705e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017062:	1a9b      	subs	r3, r3, r2
 8017064:	4632      	mov	r2, r6
 8017066:	f8ad 3002 	strh.w	r3, [sp, #2]
 801706a:	6823      	ldr	r3, [r4, #0]
 801706c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801706e:	4798      	blx	r3
 8017070:	69a4      	ldr	r4, [r4, #24]
 8017072:	e7db      	b.n	801702c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8017074:	b002      	add	sp, #8
 8017076:	bd70      	pop	{r4, r5, r6, pc}

08017078 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8017078:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801707c:	4770      	bx	lr

0801707e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801707e:	6803      	ldr	r3, [r0, #0]
 8017080:	b513      	push	{r0, r1, r4, lr}
 8017082:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8017086:	2300      	movs	r3, #0
 8017088:	e9cd 3300 	strd	r3, r3, [sp]
 801708c:	466b      	mov	r3, sp
 801708e:	47a0      	blx	r4
 8017090:	b002      	add	sp, #8
 8017092:	bd10      	pop	{r4, pc}

08017094 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8017094:	2301      	movs	r3, #1
 8017096:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801709a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801709e:	4770      	bx	lr

080170a0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80170a0:	2301      	movs	r3, #1
 80170a2:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80170a6:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80170aa:	4770      	bx	lr

080170ac <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80170ac:	6843      	ldr	r3, [r0, #4]
 80170ae:	2201      	movs	r2, #1
 80170b0:	725a      	strb	r2, [r3, #9]
 80170b2:	6840      	ldr	r0, [r0, #4]
 80170b4:	6803      	ldr	r3, [r0, #0]
 80170b6:	691b      	ldr	r3, [r3, #16]
 80170b8:	4718      	bx	r3

080170ba <_ZN8touchgfx3HAL8flushDMAEv>:
 80170ba:	6840      	ldr	r0, [r0, #4]
 80170bc:	6803      	ldr	r3, [r0, #0]
 80170be:	689b      	ldr	r3, [r3, #8]
 80170c0:	4718      	bx	r3
	...

080170c4 <_ZN8touchgfx3HAL10beginFrameEv>:
 80170c4:	4b04      	ldr	r3, [pc, #16]	; (80170d8 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80170c6:	781b      	ldrb	r3, [r3, #0]
 80170c8:	b123      	cbz	r3, 80170d4 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80170ca:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 80170ce:	f080 0001 	eor.w	r0, r0, #1
 80170d2:	4770      	bx	lr
 80170d4:	2001      	movs	r0, #1
 80170d6:	4770      	bx	lr
 80170d8:	2000c5b2 	.word	0x2000c5b2

080170dc <_ZN8touchgfx3HAL8endFrameEv>:
 80170dc:	b510      	push	{r4, lr}
 80170de:	4604      	mov	r4, r0
 80170e0:	6840      	ldr	r0, [r0, #4]
 80170e2:	6803      	ldr	r3, [r0, #0]
 80170e4:	689b      	ldr	r3, [r3, #8]
 80170e6:	4798      	blx	r3
 80170e8:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80170ec:	b113      	cbz	r3, 80170f4 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80170ee:	2301      	movs	r3, #1
 80170f0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80170f4:	bd10      	pop	{r4, pc}

080170f6 <_ZN8touchgfx3HAL9taskEntryEv>:
 80170f6:	b508      	push	{r3, lr}
 80170f8:	6803      	ldr	r3, [r0, #0]
 80170fa:	4604      	mov	r4, r0
 80170fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80170fe:	4798      	blx	r3
 8017100:	6823      	ldr	r3, [r4, #0]
 8017102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017104:	4620      	mov	r0, r4
 8017106:	4798      	blx	r3
 8017108:	f7fd fec4 	bl	8014e94 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801710c:	6823      	ldr	r3, [r4, #0]
 801710e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017110:	e7f8      	b.n	8017104 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08017114 <_ZN8touchgfx3HAL4tickEv>:
 8017114:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8017116:	6803      	ldr	r3, [r0, #0]
 8017118:	4604      	mov	r4, r0
 801711a:	4d5c      	ldr	r5, [pc, #368]	; (801728c <_ZN8touchgfx3HAL4tickEv+0x178>)
 801711c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017120:	4798      	blx	r3
 8017122:	2800      	cmp	r0, #0
 8017124:	f000 8097 	beq.w	8017256 <_ZN8touchgfx3HAL4tickEv+0x142>
 8017128:	2001      	movs	r0, #1
 801712a:	2600      	movs	r6, #0
 801712c:	f7fd fbc4 	bl	80148b8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8017130:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8017134:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8017138:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801713c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8017140:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8017144:	b133      	cbz	r3, 8017154 <_ZN8touchgfx3HAL4tickEv+0x40>
 8017146:	6823      	ldr	r3, [r4, #0]
 8017148:	4620      	mov	r0, r4
 801714a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801714e:	4798      	blx	r3
 8017150:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8017154:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8017158:	2601      	movs	r6, #1
 801715a:	6862      	ldr	r2, [r4, #4]
 801715c:	f083 0301 	eor.w	r3, r3, #1
 8017160:	702e      	strb	r6, [r5, #0]
 8017162:	7253      	strb	r3, [r2, #9]
 8017164:	f002 fff0 	bl	801a148 <_ZN8touchgfx11Application11getInstanceEv>
 8017168:	6803      	ldr	r3, [r0, #0]
 801716a:	4631      	mov	r1, r6
 801716c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801716e:	4798      	blx	r3
 8017170:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8017174:	b90b      	cbnz	r3, 801717a <_ZN8touchgfx3HAL4tickEv+0x66>
 8017176:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 801717a:	f002 ffe5 	bl	801a148 <_ZN8touchgfx11Application11getInstanceEv>
 801717e:	6803      	ldr	r3, [r0, #0]
 8017180:	695b      	ldr	r3, [r3, #20]
 8017182:	4798      	blx	r3
 8017184:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017186:	6803      	ldr	r3, [r0, #0]
 8017188:	691b      	ldr	r3, [r3, #16]
 801718a:	4798      	blx	r3
 801718c:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8017190:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8017194:	3b01      	subs	r3, #1
 8017196:	b2db      	uxtb	r3, r3
 8017198:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801719c:	b10a      	cbz	r2, 80171a2 <_ZN8touchgfx3HAL4tickEv+0x8e>
 801719e:	2b00      	cmp	r3, #0
 80171a0:	d1eb      	bne.n	801717a <_ZN8touchgfx3HAL4tickEv+0x66>
 80171a2:	4a3b      	ldr	r2, [pc, #236]	; (8017290 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80171a4:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 80171a8:	7813      	ldrb	r3, [r2, #0]
 80171aa:	3301      	adds	r3, #1
 80171ac:	b25b      	sxtb	r3, r3
 80171ae:	4299      	cmp	r1, r3
 80171b0:	7013      	strb	r3, [r2, #0]
 80171b2:	dc10      	bgt.n	80171d6 <_ZN8touchgfx3HAL4tickEv+0xc2>
 80171b4:	2300      	movs	r3, #0
 80171b6:	68e0      	ldr	r0, [r4, #12]
 80171b8:	a902      	add	r1, sp, #8
 80171ba:	7013      	strb	r3, [r2, #0]
 80171bc:	aa03      	add	r2, sp, #12
 80171be:	6803      	ldr	r3, [r0, #0]
 80171c0:	68db      	ldr	r3, [r3, #12]
 80171c2:	4798      	blx	r3
 80171c4:	6823      	ldr	r3, [r4, #0]
 80171c6:	2800      	cmp	r0, #0
 80171c8:	d051      	beq.n	801726e <_ZN8touchgfx3HAL4tickEv+0x15a>
 80171ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80171ce:	4620      	mov	r0, r4
 80171d0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80171d4:	4798      	blx	r3
 80171d6:	2300      	movs	r3, #0
 80171d8:	6960      	ldr	r0, [r4, #20]
 80171da:	f88d 3007 	strb.w	r3, [sp, #7]
 80171de:	b158      	cbz	r0, 80171f8 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80171e0:	6803      	ldr	r3, [r0, #0]
 80171e2:	f10d 0107 	add.w	r1, sp, #7
 80171e6:	68db      	ldr	r3, [r3, #12]
 80171e8:	4798      	blx	r3
 80171ea:	b128      	cbz	r0, 80171f8 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80171ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80171ee:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80171f2:	6803      	ldr	r3, [r0, #0]
 80171f4:	68db      	ldr	r3, [r3, #12]
 80171f6:	4798      	blx	r3
 80171f8:	f104 001c 	add.w	r0, r4, #28
 80171fc:	f00d facc 	bl	8024798 <_ZN8touchgfx8Gestures4tickEv>
 8017200:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8017204:	b30b      	cbz	r3, 801724a <_ZN8touchgfx3HAL4tickEv+0x136>
 8017206:	6920      	ldr	r0, [r4, #16]
 8017208:	6803      	ldr	r3, [r0, #0]
 801720a:	691b      	ldr	r3, [r3, #16]
 801720c:	4798      	blx	r3
 801720e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017210:	4606      	mov	r6, r0
 8017212:	b903      	cbnz	r3, 8017216 <_ZN8touchgfx3HAL4tickEv+0x102>
 8017214:	6720      	str	r0, [r4, #112]	; 0x70
 8017216:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017218:	4a1e      	ldr	r2, [pc, #120]	; (8017294 <_ZN8touchgfx3HAL4tickEv+0x180>)
 801721a:	1af3      	subs	r3, r6, r3
 801721c:	4293      	cmp	r3, r2
 801721e:	d914      	bls.n	801724a <_ZN8touchgfx3HAL4tickEv+0x136>
 8017220:	6920      	ldr	r0, [r4, #16]
 8017222:	6803      	ldr	r3, [r0, #0]
 8017224:	699b      	ldr	r3, [r3, #24]
 8017226:	4798      	blx	r3
 8017228:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801722a:	2264      	movs	r2, #100	; 0x64
 801722c:	1af3      	subs	r3, r6, r3
 801722e:	fbb3 f3f2 	udiv	r3, r3, r2
 8017232:	fbb0 f0f3 	udiv	r0, r0, r3
 8017236:	2800      	cmp	r0, #0
 8017238:	dc1e      	bgt.n	8017278 <_ZN8touchgfx3HAL4tickEv+0x164>
 801723a:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 801723e:	6920      	ldr	r0, [r4, #16]
 8017240:	2100      	movs	r1, #0
 8017242:	6803      	ldr	r3, [r0, #0]
 8017244:	69db      	ldr	r3, [r3, #28]
 8017246:	4798      	blx	r3
 8017248:	6726      	str	r6, [r4, #112]	; 0x70
 801724a:	f002 ff7d 	bl	801a148 <_ZN8touchgfx11Application11getInstanceEv>
 801724e:	6803      	ldr	r3, [r0, #0]
 8017250:	2100      	movs	r1, #0
 8017252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017254:	4798      	blx	r3
 8017256:	6823      	ldr	r3, [r4, #0]
 8017258:	4620      	mov	r0, r4
 801725a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801725e:	4798      	blx	r3
 8017260:	2001      	movs	r0, #1
 8017262:	f7fd fb34 	bl	80148ce <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8017266:	2300      	movs	r3, #0
 8017268:	702b      	strb	r3, [r5, #0]
 801726a:	b004      	add	sp, #16
 801726c:	bd70      	pop	{r4, r5, r6, pc}
 801726e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8017272:	4620      	mov	r0, r4
 8017274:	4798      	blx	r3
 8017276:	e7ae      	b.n	80171d6 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8017278:	2863      	cmp	r0, #99	; 0x63
 801727a:	bfcb      	itete	gt
 801727c:	2300      	movgt	r3, #0
 801727e:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8017282:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8017286:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801728a:	e7d8      	b.n	801723e <_ZN8touchgfx3HAL4tickEv+0x12a>
 801728c:	2000c5b8 	.word	0x2000c5b8
 8017290:	2000c5b9 	.word	0x2000c5b9
 8017294:	05f5e100 	.word	0x05f5e100

08017298 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8017298:	f7fd bd9c 	b.w	8014dd4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801729c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 801729c:	6581      	str	r1, [r0, #88]	; 0x58
 801729e:	301c      	adds	r0, #28
 80172a0:	f00d ba78 	b.w	8024794 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080172a4 <_ZN8touchgfx3HAL5touchEll>:
 80172a4:	b530      	push	{r4, r5, lr}
 80172a6:	b087      	sub	sp, #28
 80172a8:	4604      	mov	r4, r0
 80172aa:	a804      	add	r0, sp, #16
 80172ac:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80172b0:	f002 fd4e 	bl	8019d50 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80172b4:	9b04      	ldr	r3, [sp, #16]
 80172b6:	a906      	add	r1, sp, #24
 80172b8:	a803      	add	r0, sp, #12
 80172ba:	f8ad 300c 	strh.w	r3, [sp, #12]
 80172be:	9b05      	ldr	r3, [sp, #20]
 80172c0:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80172c4:	f002 fd92 	bl	8019dec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80172c8:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 80172cc:	f104 001c 	add.w	r0, r4, #28
 80172d0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80172d4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80172d8:	b189      	cbz	r1, 80172fe <_ZN8touchgfx3HAL5touchEll+0x5a>
 80172da:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80172de:	9300      	str	r3, [sp, #0]
 80172e0:	4613      	mov	r3, r2
 80172e2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80172e6:	462a      	mov	r2, r5
 80172e8:	f00d fa64 	bl	80247b4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80172ec:	b128      	cbz	r0, 80172fa <_ZN8touchgfx3HAL5touchEll+0x56>
 80172ee:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80172f2:	65e3      	str	r3, [r4, #92]	; 0x5c
 80172f4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80172f8:	6623      	str	r3, [r4, #96]	; 0x60
 80172fa:	b007      	add	sp, #28
 80172fc:	bd30      	pop	{r4, r5, pc}
 80172fe:	f00d fa9d 	bl	802483c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8017302:	2301      	movs	r3, #1
 8017304:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8017308:	e7f1      	b.n	80172ee <_ZN8touchgfx3HAL5touchEll+0x4a>

0801730a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801730a:	b570      	push	{r4, r5, r6, lr}
 801730c:	2b00      	cmp	r3, #0
 801730e:	d050      	beq.n	80173b2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8017310:	ea81 0002 	eor.w	r0, r1, r2
 8017314:	07c6      	lsls	r6, r0, #31
 8017316:	d508      	bpl.n	801732a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8017318:	3a01      	subs	r2, #1
 801731a:	18cc      	adds	r4, r1, r3
 801731c:	42a1      	cmp	r1, r4
 801731e:	d048      	beq.n	80173b2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8017320:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8017324:	f801 0b01 	strb.w	r0, [r1], #1
 8017328:	e7f8      	b.n	801731c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801732a:	07d5      	lsls	r5, r2, #31
 801732c:	bf42      	ittt	mi
 801732e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8017332:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8017336:	f801 0b01 	strbmi.w	r0, [r1], #1
 801733a:	2b01      	cmp	r3, #1
 801733c:	d915      	bls.n	801736a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801733e:	ea82 0001 	eor.w	r0, r2, r1
 8017342:	0784      	lsls	r4, r0, #30
 8017344:	d02d      	beq.n	80173a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 8017346:	1e94      	subs	r4, r2, #2
 8017348:	4608      	mov	r0, r1
 801734a:	18ce      	adds	r6, r1, r3
 801734c:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8017350:	f820 5b02 	strh.w	r5, [r0], #2
 8017354:	1a35      	subs	r5, r6, r0
 8017356:	2d01      	cmp	r5, #1
 8017358:	d8f8      	bhi.n	801734c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 801735a:	1e98      	subs	r0, r3, #2
 801735c:	f003 0301 	and.w	r3, r3, #1
 8017360:	f020 0001 	bic.w	r0, r0, #1
 8017364:	3002      	adds	r0, #2
 8017366:	4401      	add	r1, r0
 8017368:	4402      	add	r2, r0
 801736a:	1f14      	subs	r4, r2, #4
 801736c:	4608      	mov	r0, r1
 801736e:	18ce      	adds	r6, r1, r3
 8017370:	1a35      	subs	r5, r6, r0
 8017372:	2d03      	cmp	r5, #3
 8017374:	d810      	bhi.n	8017398 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 8017376:	089c      	lsrs	r4, r3, #2
 8017378:	00a0      	lsls	r0, r4, #2
 801737a:	4401      	add	r1, r0
 801737c:	3801      	subs	r0, #1
 801737e:	4402      	add	r2, r0
 8017380:	f06f 0003 	mvn.w	r0, #3
 8017384:	fb00 3404 	mla	r4, r0, r4, r3
 8017388:	440c      	add	r4, r1
 801738a:	42a1      	cmp	r1, r4
 801738c:	d011      	beq.n	80173b2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 801738e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8017392:	f801 3b01 	strb.w	r3, [r1], #1
 8017396:	e7f8      	b.n	801738a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8017398:	f854 5f04 	ldr.w	r5, [r4, #4]!
 801739c:	f840 5b04 	str.w	r5, [r0], #4
 80173a0:	e7e6      	b.n	8017370 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 80173a2:	0790      	lsls	r0, r2, #30
 80173a4:	d0e1      	beq.n	801736a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80173a6:	f832 0b02 	ldrh.w	r0, [r2], #2
 80173aa:	3b02      	subs	r3, #2
 80173ac:	f821 0b02 	strh.w	r0, [r1], #2
 80173b0:	e7db      	b.n	801736a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80173b2:	2001      	movs	r0, #1
 80173b4:	bd70      	pop	{r4, r5, r6, pc}

080173b6 <_ZN8touchgfx3HAL7noTouchEv>:
 80173b6:	b510      	push	{r4, lr}
 80173b8:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 80173bc:	4604      	mov	r4, r0
 80173be:	b153      	cbz	r3, 80173d6 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80173c0:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80173c4:	2101      	movs	r1, #1
 80173c6:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 80173ca:	301c      	adds	r0, #28
 80173cc:	f00d fa36 	bl	802483c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80173d0:	2300      	movs	r3, #0
 80173d2:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80173d6:	bd10      	pop	{r4, pc}

080173d8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80173d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80173dc:	4605      	mov	r5, r0
 80173de:	6980      	ldr	r0, [r0, #24]
 80173e0:	b085      	sub	sp, #20
 80173e2:	460f      	mov	r7, r1
 80173e4:	4690      	mov	r8, r2
 80173e6:	4699      	mov	r9, r3
 80173e8:	b930      	cbnz	r0, 80173f8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 80173ea:	4b1f      	ldr	r3, [pc, #124]	; (8017468 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 80173ec:	f44f 7198 	mov.w	r1, #304	; 0x130
 80173f0:	4a1e      	ldr	r2, [pc, #120]	; (801746c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 80173f2:	481f      	ldr	r0, [pc, #124]	; (8017470 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 80173f4:	f00e fe9c 	bl	8026130 <__assert_func>
 80173f8:	ac04      	add	r4, sp, #16
 80173fa:	2600      	movs	r6, #0
 80173fc:	f844 6d04 	str.w	r6, [r4, #-4]!
 8017400:	6806      	ldr	r6, [r0, #0]
 8017402:	9401      	str	r4, [sp, #4]
 8017404:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8017408:	9400      	str	r4, [sp, #0]
 801740a:	6834      	ldr	r4, [r6, #0]
 801740c:	47a0      	blx	r4
 801740e:	4c19      	ldr	r4, [pc, #100]	; (8017474 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 8017410:	4606      	mov	r6, r0
 8017412:	f8a4 9000 	strh.w	r9, [r4]
 8017416:	f7f8 fccf 	bl	800fdb8 <_ZN8touchgfx3HAL3lcdEv>
 801741a:	6803      	ldr	r3, [r0, #0]
 801741c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801741e:	4798      	blx	r3
 8017420:	280c      	cmp	r0, #12
 8017422:	d80f      	bhi.n	8017444 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8017424:	e8df f000 	tbb	[pc, r0]
 8017428:	1b1b1207 	.word	0x1b1b1207
 801742c:	1b1b1b1b 	.word	0x1b1b1b1b
 8017430:	1b1b1b1b 	.word	0x1b1b1b1b
 8017434:	1b          	.byte	0x1b
 8017435:	00          	.byte	0x00
 8017436:	8823      	ldrh	r3, [r4, #0]
 8017438:	fb08 7203 	mla	r2, r8, r3, r7
 801743c:	9b03      	ldr	r3, [sp, #12]
 801743e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8017442:	63eb      	str	r3, [r5, #60]	; 0x3c
 8017444:	4630      	mov	r0, r6
 8017446:	b005      	add	sp, #20
 8017448:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801744c:	8822      	ldrh	r2, [r4, #0]
 801744e:	9b03      	ldr	r3, [sp, #12]
 8017450:	fb08 7202 	mla	r2, r8, r2, r7
 8017454:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017458:	1a9a      	subs	r2, r3, r2
 801745a:	63ea      	str	r2, [r5, #60]	; 0x3c
 801745c:	e7f2      	b.n	8017444 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 801745e:	4b06      	ldr	r3, [pc, #24]	; (8017478 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 8017460:	f240 114d 	movw	r1, #333	; 0x14d
 8017464:	4a01      	ldr	r2, [pc, #4]	; (801746c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8017466:	e7c4      	b.n	80173f2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8017468:	08028bc1 	.word	0x08028bc1
 801746c:	08028ed2 	.word	0x08028ed2
 8017470:	08028c06 	.word	0x08028c06
 8017474:	2000c5ae 	.word	0x2000c5ae
 8017478:	08028c2c 	.word	0x08028c2c

0801747c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 801747c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017480:	4698      	mov	r8, r3
 8017482:	6803      	ldr	r3, [r0, #0]
 8017484:	b087      	sub	sp, #28
 8017486:	460e      	mov	r6, r1
 8017488:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 801748a:	4617      	mov	r7, r2
 801748c:	4b0d      	ldr	r3, [pc, #52]	; (80174c4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 801748e:	4604      	mov	r4, r0
 8017490:	f8b3 9000 	ldrh.w	r9, [r3]
 8017494:	f7f8 fc90 	bl	800fdb8 <_ZN8touchgfx3HAL3lcdEv>
 8017498:	6803      	ldr	r3, [r0, #0]
 801749a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801749c:	4798      	blx	r3
 801749e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80174a2:	463a      	mov	r2, r7
 80174a4:	4631      	mov	r1, r6
 80174a6:	9302      	str	r3, [sp, #8]
 80174a8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80174ac:	9301      	str	r3, [sp, #4]
 80174ae:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80174b2:	e9cd 9003 	strd	r9, r0, [sp, #12]
 80174b6:	9300      	str	r3, [sp, #0]
 80174b8:	4620      	mov	r0, r4
 80174ba:	4643      	mov	r3, r8
 80174bc:	47a8      	blx	r5
 80174be:	b007      	add	sp, #28
 80174c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80174c4:	2000c5ae 	.word	0x2000c5ae

080174c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80174c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174cc:	4606      	mov	r6, r0
 80174ce:	b089      	sub	sp, #36	; 0x24
 80174d0:	4610      	mov	r0, r2
 80174d2:	460c      	mov	r4, r1
 80174d4:	4691      	mov	r9, r2
 80174d6:	4698      	mov	r8, r3
 80174d8:	f005 f818 	bl	801c50c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80174dc:	2800      	cmp	r0, #0
 80174de:	f000 8092 	beq.w	8017606 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13e>
 80174e2:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8017620 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 80174e6:	ad08      	add	r5, sp, #32
 80174e8:	f8df b138 	ldr.w	fp, [pc, #312]	; 8017624 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 80174ec:	f8da 0000 	ldr.w	r0, [sl]
 80174f0:	4f4a      	ldr	r7, [pc, #296]	; (801761c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 80174f2:	6802      	ldr	r2, [r0, #0]
 80174f4:	6a12      	ldr	r2, [r2, #32]
 80174f6:	4790      	blx	r2
 80174f8:	f8da 0000 	ldr.w	r0, [sl]
 80174fc:	6802      	ldr	r2, [r0, #0]
 80174fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8017500:	4790      	blx	r2
 8017502:	f8bb 3000 	ldrh.w	r3, [fp]
 8017506:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 801750a:	4628      	mov	r0, r5
 801750c:	9300      	str	r3, [sp, #0]
 801750e:	883b      	ldrh	r3, [r7, #0]
 8017510:	9301      	str	r3, [sp, #4]
 8017512:	f005 f8bb 	bl	801c68c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017516:	f8ab 0000 	strh.w	r0, [fp]
 801751a:	4628      	mov	r0, r5
 801751c:	f005 f8f0 	bl	801c700 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017520:	f8da b000 	ldr.w	fp, [sl]
 8017524:	8038      	strh	r0, [r7, #0]
 8017526:	4648      	mov	r0, r9
 8017528:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 801752c:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 8017530:	9302      	str	r3, [sp, #8]
 8017532:	f004 ffeb 	bl	801c50c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8017536:	f8da 2000 	ldr.w	r2, [sl]
 801753a:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 801753e:	63d0      	str	r0, [r2, #60]	; 0x3c
 8017540:	4620      	mov	r0, r4
 8017542:	6822      	ldr	r2, [r4, #0]
 8017544:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 8017548:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801754a:	2200      	movs	r2, #0
 801754c:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 8017550:	4611      	mov	r1, r2
 8017552:	4798      	blx	r3
 8017554:	2201      	movs	r2, #1
 8017556:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 801755a:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 801755e:	1d22      	adds	r2, r4, #4
 8017560:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 8017564:	2900      	cmp	r1, #0
 8017566:	d051      	beq.n	801760c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8017568:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 801756c:	2900      	cmp	r1, #0
 801756e:	d04d      	beq.n	801760c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8017570:	6810      	ldr	r0, [r2, #0]
 8017572:	f10d 0c18 	add.w	ip, sp, #24
 8017576:	6851      	ldr	r1, [r2, #4]
 8017578:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801757c:	4641      	mov	r1, r8
 801757e:	a806      	add	r0, sp, #24
 8017580:	f7ff fc76 	bl	8016e70 <_ZN8touchgfx4RectaNERKS0_>
 8017584:	4628      	mov	r0, r5
 8017586:	f005 fa0d 	bl	801c9a4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801758a:	4680      	mov	r8, r0
 801758c:	f7f8 fc14 	bl	800fdb8 <_ZN8touchgfx3HAL3lcdEv>
 8017590:	6802      	ldr	r2, [r0, #0]
 8017592:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8017594:	4790      	blx	r2
 8017596:	4580      	cmp	r8, r0
 8017598:	d03d      	beq.n	8017616 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x14e>
 801759a:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 801759c:	b150      	cbz	r0, 80175b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 801759e:	4628      	mov	r0, r5
 80175a0:	f005 fa00 	bl	801c9a4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80175a4:	4605      	mov	r5, r0
 80175a6:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 80175a8:	6803      	ldr	r3, [r0, #0]
 80175aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175ac:	4798      	blx	r3
 80175ae:	1a2b      	subs	r3, r5, r0
 80175b0:	4258      	negs	r0, r3
 80175b2:	4158      	adcs	r0, r3
 80175b4:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 80175b8:	2500      	movs	r5, #0
 80175ba:	6963      	ldr	r3, [r4, #20]
 80175bc:	4620      	mov	r0, r4
 80175be:	6822      	ldr	r2, [r4, #0]
 80175c0:	a906      	add	r1, sp, #24
 80175c2:	6165      	str	r5, [r4, #20]
 80175c4:	9303      	str	r3, [sp, #12]
 80175c6:	6892      	ldr	r2, [r2, #8]
 80175c8:	4790      	blx	r2
 80175ca:	9b03      	ldr	r3, [sp, #12]
 80175cc:	4620      	mov	r0, r4
 80175ce:	4652      	mov	r2, sl
 80175d0:	6163      	str	r3, [r4, #20]
 80175d2:	4649      	mov	r1, r9
 80175d4:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 80175d8:	6823      	ldr	r3, [r4, #0]
 80175da:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 80175de:	4c10      	ldr	r4, [pc, #64]	; (8017620 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 80175e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80175e2:	4798      	blx	r3
 80175e4:	6820      	ldr	r0, [r4, #0]
 80175e6:	9b02      	ldr	r3, [sp, #8]
 80175e8:	9a00      	ldr	r2, [sp, #0]
 80175ea:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 80175ee:	4b0d      	ldr	r3, [pc, #52]	; (8017624 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 80175f0:	801a      	strh	r2, [r3, #0]
 80175f2:	4b0a      	ldr	r3, [pc, #40]	; (801761c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 80175f4:	9a01      	ldr	r2, [sp, #4]
 80175f6:	801a      	strh	r2, [r3, #0]
 80175f8:	6803      	ldr	r3, [r0, #0]
 80175fa:	6a1b      	ldr	r3, [r3, #32]
 80175fc:	4798      	blx	r3
 80175fe:	6820      	ldr	r0, [r4, #0]
 8017600:	6803      	ldr	r3, [r0, #0]
 8017602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017604:	4798      	blx	r3
 8017606:	b009      	add	sp, #36	; 0x24
 8017608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801760c:	ab06      	add	r3, sp, #24
 801760e:	6810      	ldr	r0, [r2, #0]
 8017610:	6851      	ldr	r1, [r2, #4]
 8017612:	c303      	stmia	r3!, {r0, r1}
 8017614:	e7b6      	b.n	8017584 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbc>
 8017616:	2000      	movs	r0, #0
 8017618:	e7cc      	b.n	80175b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 801761a:	bf00      	nop
 801761c:	2000c5b0 	.word	0x2000c5b0
 8017620:	2000c5b4 	.word	0x2000c5b4
 8017624:	2000c5ae 	.word	0x2000c5ae

08017628 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8017628:	4b07      	ldr	r3, [pc, #28]	; (8017648 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801762a:	b510      	push	{r4, lr}
 801762c:	781b      	ldrb	r3, [r3, #0]
 801762e:	4604      	mov	r4, r0
 8017630:	b13b      	cbz	r3, 8017642 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8017632:	6803      	ldr	r3, [r0, #0]
 8017634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017636:	4798      	blx	r3
 8017638:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801763a:	4283      	cmp	r3, r0
 801763c:	d101      	bne.n	8017642 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801763e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8017640:	bd10      	pop	{r4, pc}
 8017642:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8017644:	e7fc      	b.n	8017640 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8017646:	bf00      	nop
 8017648:	2000c5b2 	.word	0x2000c5b2

0801764c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801764c:	4b0b      	ldr	r3, [pc, #44]	; (801767c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 801764e:	b510      	push	{r4, lr}
 8017650:	781b      	ldrb	r3, [r3, #0]
 8017652:	4604      	mov	r4, r0
 8017654:	b95b      	cbnz	r3, 801766e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017656:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801765a:	2b02      	cmp	r3, #2
 801765c:	d007      	beq.n	801766e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801765e:	6840      	ldr	r0, [r0, #4]
 8017660:	f000 fbc8 	bl	8017df4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8017664:	b118      	cbz	r0, 801766e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017666:	6862      	ldr	r2, [r4, #4]
 8017668:	7a53      	ldrb	r3, [r2, #9]
 801766a:	2b00      	cmp	r3, #0
 801766c:	d0fc      	beq.n	8017668 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801766e:	f7fd fba3 	bl	8014db8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8017672:	4620      	mov	r0, r4
 8017674:	f7ff ffd8 	bl	8017628 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017678:	bd10      	pop	{r4, pc}
 801767a:	bf00      	nop
 801767c:	2000c5b2 	.word	0x2000c5b2

08017680 <_ZN8touchgfx3HAL10initializeEv>:
 8017680:	b510      	push	{r4, lr}
 8017682:	4604      	mov	r4, r0
 8017684:	f7fd fb74 	bl	8014d70 <_ZN8touchgfx10OSWrappers10initializeEv>
 8017688:	6860      	ldr	r0, [r4, #4]
 801768a:	6803      	ldr	r3, [r0, #0]
 801768c:	68db      	ldr	r3, [r3, #12]
 801768e:	4798      	blx	r3
 8017690:	68e0      	ldr	r0, [r4, #12]
 8017692:	6803      	ldr	r3, [r0, #0]
 8017694:	689b      	ldr	r3, [r3, #8]
 8017696:	4798      	blx	r3
 8017698:	6823      	ldr	r3, [r4, #0]
 801769a:	4620      	mov	r0, r4
 801769c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801769e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80176a2:	4718      	bx	r3

080176a4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 80176a4:	b508      	push	{r3, lr}
 80176a6:	290c      	cmp	r1, #12
 80176a8:	d817      	bhi.n	80176da <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 80176aa:	e8df f001 	tbb	[pc, r1]
 80176ae:	090b      	.short	0x090b
 80176b0:	0d0d0d07 	.word	0x0d0d0d07
 80176b4:	1414140d 	.word	0x1414140d
 80176b8:	1414      	.short	0x1414
 80176ba:	0d          	.byte	0x0d
 80176bb:	00          	.byte	0x00
 80176bc:	2020      	movs	r0, #32
 80176be:	bd08      	pop	{r3, pc}
 80176c0:	2018      	movs	r0, #24
 80176c2:	e7fc      	b.n	80176be <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80176c4:	2010      	movs	r0, #16
 80176c6:	e7fa      	b.n	80176be <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80176c8:	4b05      	ldr	r3, [pc, #20]	; (80176e0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 80176ca:	f44f 710c 	mov.w	r1, #560	; 0x230
 80176ce:	4a05      	ldr	r2, [pc, #20]	; (80176e4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 80176d0:	4805      	ldr	r0, [pc, #20]	; (80176e8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 80176d2:	f00e fd2d 	bl	8026130 <__assert_func>
 80176d6:	2008      	movs	r0, #8
 80176d8:	e7f1      	b.n	80176be <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80176da:	2000      	movs	r0, #0
 80176dc:	e7ef      	b.n	80176be <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80176de:	bf00      	nop
 80176e0:	08028cff 	.word	0x08028cff
 80176e4:	08029094 	.word	0x08029094
 80176e8:	08028c06 	.word	0x08028c06

080176ec <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 80176ec:	b570      	push	{r4, r5, r6, lr}
 80176ee:	460d      	mov	r5, r1
 80176f0:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80176f4:	4616      	mov	r6, r2
 80176f6:	461c      	mov	r4, r3
 80176f8:	f7ff ffd4 	bl	80176a4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 80176fc:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8017700:	10c0      	asrs	r0, r0, #3
 8017702:	fb06 5101 	mla	r1, r6, r1, r5
 8017706:	fb00 4001 	mla	r0, r0, r1, r4
 801770a:	bd70      	pop	{r4, r5, r6, pc}

0801770c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 801770c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017710:	b08a      	sub	sp, #40	; 0x28
 8017712:	f04f 0c00 	mov.w	ip, #0
 8017716:	4604      	mov	r4, r0
 8017718:	469a      	mov	sl, r3
 801771a:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 801771e:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8017722:	f1b8 0f02 	cmp.w	r8, #2
 8017726:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 801772a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801772e:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8017732:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8017736:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801773a:	f8cd c020 	str.w	ip, [sp, #32]
 801773e:	d030      	beq.n	80177a2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8017740:	2bff      	cmp	r3, #255	; 0xff
 8017742:	d12c      	bne.n	801779e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 8017744:	4560      	cmp	r0, ip
 8017746:	bf14      	ite	ne
 8017748:	2004      	movne	r0, #4
 801774a:	2001      	moveq	r0, #1
 801774c:	9204      	str	r2, [sp, #16]
 801774e:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8017752:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8017756:	f8ad 201c 	strh.w	r2, [sp, #28]
 801775a:	f8ad 6018 	strh.w	r6, [sp, #24]
 801775e:	f8ad 501a 	strh.w	r5, [sp, #26]
 8017762:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017766:	4620      	mov	r0, r4
 8017768:	f7ff ff5e 	bl	8017628 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801776c:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8017770:	4603      	mov	r3, r0
 8017772:	4651      	mov	r1, sl
 8017774:	4620      	mov	r0, r4
 8017776:	e9cd 9700 	strd	r9, r7, [sp]
 801777a:	f7ff ffb7 	bl	80176ec <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801777e:	f8ad 901e 	strh.w	r9, [sp, #30]
 8017782:	9005      	str	r0, [sp, #20]
 8017784:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 8017788:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 801778c:	b106      	cbz	r6, 8017790 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 801778e:	b98d      	cbnz	r5, 80177b4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8017790:	4b12      	ldr	r3, [pc, #72]	; (80177dc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 8017792:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8017796:	4a12      	ldr	r2, [pc, #72]	; (80177e0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8017798:	4812      	ldr	r0, [pc, #72]	; (80177e4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 801779a:	f00e fcc9 	bl	8026130 <__assert_func>
 801779e:	2004      	movs	r0, #4
 80177a0:	e7d4      	b.n	801774c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 80177a2:	2bff      	cmp	r3, #255	; 0xff
 80177a4:	d104      	bne.n	80177b0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 80177a6:	2800      	cmp	r0, #0
 80177a8:	bf14      	ite	ne
 80177aa:	2040      	movne	r0, #64	; 0x40
 80177ac:	2020      	moveq	r0, #32
 80177ae:	e7cd      	b.n	801774c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 80177b0:	2040      	movs	r0, #64	; 0x40
 80177b2:	e7cb      	b.n	801774c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 80177b4:	6823      	ldr	r3, [r4, #0]
 80177b6:	4620      	mov	r0, r4
 80177b8:	9d02      	ldr	r5, [sp, #8]
 80177ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80177bc:	4798      	blx	r3
 80177be:	4228      	tst	r0, r5
 80177c0:	d104      	bne.n	80177cc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 80177c2:	4b09      	ldr	r3, [pc, #36]	; (80177e8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 80177c4:	f240 11b1 	movw	r1, #433	; 0x1b1
 80177c8:	4a05      	ldr	r2, [pc, #20]	; (80177e0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 80177ca:	e7e5      	b.n	8017798 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 80177cc:	6860      	ldr	r0, [r4, #4]
 80177ce:	a902      	add	r1, sp, #8
 80177d0:	6803      	ldr	r3, [r0, #0]
 80177d2:	685b      	ldr	r3, [r3, #4]
 80177d4:	4798      	blx	r3
 80177d6:	b00a      	add	sp, #40	; 0x28
 80177d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80177dc:	08028c82 	.word	0x08028c82
 80177e0:	08028f36 	.word	0x08028f36
 80177e4:	08028c06 	.word	0x08028c06
 80177e8:	08028cba 	.word	0x08028cba

080177ec <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 80177ec:	b510      	push	{r4, lr}
 80177ee:	b08a      	sub	sp, #40	; 0x28
 80177f0:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 80177f4:	9408      	str	r4, [sp, #32]
 80177f6:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 80177fa:	9407      	str	r4, [sp, #28]
 80177fc:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8017800:	9406      	str	r4, [sp, #24]
 8017802:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8017806:	9405      	str	r4, [sp, #20]
 8017808:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 801780c:	9404      	str	r4, [sp, #16]
 801780e:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8017812:	9403      	str	r4, [sp, #12]
 8017814:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8017818:	9402      	str	r4, [sp, #8]
 801781a:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 801781e:	e9cd 3400 	strd	r3, r4, [sp]
 8017822:	4613      	mov	r3, r2
 8017824:	2200      	movs	r2, #0
 8017826:	f7ff ff71 	bl	801770c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801782a:	b00a      	add	sp, #40	; 0x28
 801782c:	bd10      	pop	{r4, pc}
	...

08017830 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8017830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017832:	b08b      	sub	sp, #44	; 0x2c
 8017834:	4616      	mov	r6, r2
 8017836:	460d      	mov	r5, r1
 8017838:	461f      	mov	r7, r3
 801783a:	4604      	mov	r4, r0
 801783c:	f7f8 fabc 	bl	800fdb8 <_ZN8touchgfx3HAL3lcdEv>
 8017840:	6803      	ldr	r3, [r0, #0]
 8017842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017844:	4798      	blx	r3
 8017846:	4b0e      	ldr	r3, [pc, #56]	; (8017880 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8017848:	2200      	movs	r2, #0
 801784a:	4629      	mov	r1, r5
 801784c:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8017850:	881b      	ldrh	r3, [r3, #0]
 8017852:	4620      	mov	r0, r4
 8017854:	9306      	str	r3, [sp, #24]
 8017856:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801785a:	9305      	str	r3, [sp, #20]
 801785c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8017860:	9304      	str	r3, [sp, #16]
 8017862:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017866:	9303      	str	r3, [sp, #12]
 8017868:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801786c:	9302      	str	r3, [sp, #8]
 801786e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017872:	e9cd 7300 	strd	r7, r3, [sp]
 8017876:	4633      	mov	r3, r6
 8017878:	f7ff ff48 	bl	801770c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801787c:	b00b      	add	sp, #44	; 0x2c
 801787e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017880:	2000c5ae 	.word	0x2000c5ae

08017884 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8017884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017888:	461f      	mov	r7, r3
 801788a:	4b14      	ldr	r3, [pc, #80]	; (80178dc <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 801788c:	b08a      	sub	sp, #40	; 0x28
 801788e:	4616      	mov	r6, r2
 8017890:	f8b3 8000 	ldrh.w	r8, [r3]
 8017894:	460d      	mov	r5, r1
 8017896:	4604      	mov	r4, r0
 8017898:	f7f8 fa8e 	bl	800fdb8 <_ZN8touchgfx3HAL3lcdEv>
 801789c:	6803      	ldr	r3, [r0, #0]
 801789e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178a0:	4798      	blx	r3
 80178a2:	2302      	movs	r3, #2
 80178a4:	9008      	str	r0, [sp, #32]
 80178a6:	2200      	movs	r2, #0
 80178a8:	4629      	mov	r1, r5
 80178aa:	4620      	mov	r0, r4
 80178ac:	e9cd 8306 	strd	r8, r3, [sp, #24]
 80178b0:	2301      	movs	r3, #1
 80178b2:	9305      	str	r3, [sp, #20]
 80178b4:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80178b8:	9304      	str	r3, [sp, #16]
 80178ba:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80178be:	9303      	str	r3, [sp, #12]
 80178c0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80178c4:	9302      	str	r3, [sp, #8]
 80178c6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80178ca:	e9cd 7300 	strd	r7, r3, [sp]
 80178ce:	4633      	mov	r3, r6
 80178d0:	f7ff ff1c 	bl	801770c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80178d4:	b00a      	add	sp, #40	; 0x28
 80178d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178da:	bf00      	nop
 80178dc:	2000c5ae 	.word	0x2000c5ae

080178e0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 80178e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178e4:	b08b      	sub	sp, #44	; 0x2c
 80178e6:	469b      	mov	fp, r3
 80178e8:	4604      	mov	r4, r0
 80178ea:	4692      	mov	sl, r2
 80178ec:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 80178f0:	2600      	movs	r6, #0
 80178f2:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 80178f6:	4689      	mov	r9, r1
 80178f8:	2fff      	cmp	r7, #255	; 0xff
 80178fa:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 80178fe:	9608      	str	r6, [sp, #32]
 8017900:	bf14      	ite	ne
 8017902:	2308      	movne	r3, #8
 8017904:	2302      	moveq	r3, #2
 8017906:	e9cd 3602 	strd	r3, r6, [sp, #8]
 801790a:	f7ff fe8d 	bl	8017628 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801790e:	465a      	mov	r2, fp
 8017910:	4603      	mov	r3, r0
 8017912:	4651      	mov	r1, sl
 8017914:	4620      	mov	r0, r4
 8017916:	e9cd 8500 	strd	r8, r5, [sp]
 801791a:	f7ff fee7 	bl	80176ec <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801791e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8017922:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8017926:	f8ad 3018 	strh.w	r3, [sp, #24]
 801792a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801792e:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8017932:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017936:	6823      	ldr	r3, [r4, #0]
 8017938:	9d02      	ldr	r5, [sp, #8]
 801793a:	9005      	str	r0, [sp, #20]
 801793c:	4620      	mov	r0, r4
 801793e:	f8ad 601c 	strh.w	r6, [sp, #28]
 8017942:	f8ad 801e 	strh.w	r8, [sp, #30]
 8017946:	f8cd 9020 	str.w	r9, [sp, #32]
 801794a:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 801794e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017950:	4798      	blx	r3
 8017952:	4228      	tst	r0, r5
 8017954:	d106      	bne.n	8017964 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 8017956:	4b07      	ldr	r3, [pc, #28]	; (8017974 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8017958:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 801795c:	4a06      	ldr	r2, [pc, #24]	; (8017978 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 801795e:	4807      	ldr	r0, [pc, #28]	; (801797c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8017960:	f00e fbe6 	bl	8026130 <__assert_func>
 8017964:	6860      	ldr	r0, [r4, #4]
 8017966:	a902      	add	r1, sp, #8
 8017968:	6803      	ldr	r3, [r0, #0]
 801796a:	685b      	ldr	r3, [r3, #4]
 801796c:	4798      	blx	r3
 801796e:	b00b      	add	sp, #44	; 0x2c
 8017970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017974:	08028cba 	.word	0x08028cba
 8017978:	08028fff 	.word	0x08028fff
 801797c:	08028c06 	.word	0x08028c06

08017980 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8017980:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8017984:	461f      	mov	r7, r3
 8017986:	4b0b      	ldr	r3, [pc, #44]	; (80179b4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8017988:	460d      	mov	r5, r1
 801798a:	4616      	mov	r6, r2
 801798c:	f8b3 8000 	ldrh.w	r8, [r3]
 8017990:	4604      	mov	r4, r0
 8017992:	f7f8 fa11 	bl	800fdb8 <_ZN8touchgfx3HAL3lcdEv>
 8017996:	6803      	ldr	r3, [r0, #0]
 8017998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801799a:	4798      	blx	r3
 801799c:	463b      	mov	r3, r7
 801799e:	4632      	mov	r2, r6
 80179a0:	4629      	mov	r1, r5
 80179a2:	e9cd 8000 	strd	r8, r0, [sp]
 80179a6:	4620      	mov	r0, r4
 80179a8:	f7ff fea0 	bl	80176ec <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80179ac:	b002      	add	sp, #8
 80179ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179b2:	bf00      	nop
 80179b4:	2000c5ae 	.word	0x2000c5ae

080179b8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 80179b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179bc:	4698      	mov	r8, r3
 80179be:	b088      	sub	sp, #32
 80179c0:	2300      	movs	r3, #0
 80179c2:	4617      	mov	r7, r2
 80179c4:	4604      	mov	r4, r0
 80179c6:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 80179ca:	9306      	str	r3, [sp, #24]
 80179cc:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80179d0:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80179d4:	f8ad 6010 	strh.w	r6, [sp, #16]
 80179d8:	f8ad 5012 	strh.w	r5, [sp, #18]
 80179dc:	e9cd 3100 	strd	r3, r1, [sp]
 80179e0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80179e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80179e8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80179ec:	f88d 301c 	strb.w	r3, [sp, #28]
 80179f0:	f7ff fe1a 	bl	8017628 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80179f4:	4642      	mov	r2, r8
 80179f6:	4603      	mov	r3, r0
 80179f8:	4639      	mov	r1, r7
 80179fa:	4620      	mov	r0, r4
 80179fc:	f7ff ffc0 	bl	8017980 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8017a00:	4b16      	ldr	r3, [pc, #88]	; (8017a5c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 8017a02:	9003      	str	r0, [sp, #12]
 8017a04:	881b      	ldrh	r3, [r3, #0]
 8017a06:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017a0a:	f7f8 f9d5 	bl	800fdb8 <_ZN8touchgfx3HAL3lcdEv>
 8017a0e:	6803      	ldr	r3, [r0, #0]
 8017a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a12:	4798      	blx	r3
 8017a14:	f88d 001e 	strb.w	r0, [sp, #30]
 8017a18:	f88d 001d 	strb.w	r0, [sp, #29]
 8017a1c:	b106      	cbz	r6, 8017a20 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8017a1e:	b935      	cbnz	r5, 8017a2e <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8017a20:	4b0f      	ldr	r3, [pc, #60]	; (8017a60 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 8017a22:	f240 11cd 	movw	r1, #461	; 0x1cd
 8017a26:	4a0f      	ldr	r2, [pc, #60]	; (8017a64 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8017a28:	480f      	ldr	r0, [pc, #60]	; (8017a68 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 8017a2a:	f00e fb81 	bl	8026130 <__assert_func>
 8017a2e:	6823      	ldr	r3, [r4, #0]
 8017a30:	4620      	mov	r0, r4
 8017a32:	9d00      	ldr	r5, [sp, #0]
 8017a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a36:	4798      	blx	r3
 8017a38:	4228      	tst	r0, r5
 8017a3a:	d104      	bne.n	8017a46 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8017a3c:	4b0b      	ldr	r3, [pc, #44]	; (8017a6c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8017a3e:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8017a42:	4a08      	ldr	r2, [pc, #32]	; (8017a64 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8017a44:	e7f0      	b.n	8017a28 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 8017a46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017a48:	4669      	mov	r1, sp
 8017a4a:	6860      	ldr	r0, [r4, #4]
 8017a4c:	9306      	str	r3, [sp, #24]
 8017a4e:	6803      	ldr	r3, [r0, #0]
 8017a50:	685b      	ldr	r3, [r3, #4]
 8017a52:	4798      	blx	r3
 8017a54:	b008      	add	sp, #32
 8017a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a5a:	bf00      	nop
 8017a5c:	2000c5ae 	.word	0x2000c5ae
 8017a60:	08028c82 	.word	0x08028c82
 8017a64:	08028de8 	.word	0x08028de8
 8017a68:	08028c06 	.word	0x08028c06
 8017a6c:	08028cba 	.word	0x08028cba

08017a70 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8017a70:	b570      	push	{r4, r5, r6, lr}
 8017a72:	b08a      	sub	sp, #40	; 0x28
 8017a74:	4604      	mov	r4, r0
 8017a76:	466b      	mov	r3, sp
 8017a78:	e883 0006 	stmia.w	r3, {r1, r2}
 8017a7c:	4b1f      	ldr	r3, [pc, #124]	; (8017afc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8017a7e:	781b      	ldrb	r3, [r3, #0]
 8017a80:	b933      	cbnz	r3, 8017a90 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8017a82:	4b1f      	ldr	r3, [pc, #124]	; (8017b00 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8017a84:	f240 11f9 	movw	r1, #505	; 0x1f9
 8017a88:	4a1e      	ldr	r2, [pc, #120]	; (8017b04 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8017a8a:	481f      	ldr	r0, [pc, #124]	; (8017b08 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8017a8c:	f00e fb50 	bl	8026130 <__assert_func>
 8017a90:	2300      	movs	r3, #0
 8017a92:	f8bd 5000 	ldrh.w	r5, [sp]
 8017a96:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8017a9a:	9308      	str	r3, [sp, #32]
 8017a9c:	2301      	movs	r3, #1
 8017a9e:	9302      	str	r3, [sp, #8]
 8017aa0:	6803      	ldr	r3, [r0, #0]
 8017aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017aa4:	4798      	blx	r3
 8017aa6:	4632      	mov	r2, r6
 8017aa8:	4629      	mov	r1, r5
 8017aaa:	4603      	mov	r3, r0
 8017aac:	4620      	mov	r0, r4
 8017aae:	f7ff ff67 	bl	8017980 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8017ab2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017ab4:	9003      	str	r0, [sp, #12]
 8017ab6:	9305      	str	r3, [sp, #20]
 8017ab8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8017abc:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017ac0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017ac4:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017ac8:	4b10      	ldr	r3, [pc, #64]	; (8017b0c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8017aca:	881b      	ldrh	r3, [r3, #0]
 8017acc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017ad0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8017ad4:	f7f8 f970 	bl	800fdb8 <_ZN8touchgfx3HAL3lcdEv>
 8017ad8:	6803      	ldr	r3, [r0, #0]
 8017ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017adc:	4798      	blx	r3
 8017ade:	23ff      	movs	r3, #255	; 0xff
 8017ae0:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8017ae4:	a902      	add	r1, sp, #8
 8017ae6:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8017aea:	6860      	ldr	r0, [r4, #4]
 8017aec:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8017af0:	6803      	ldr	r3, [r0, #0]
 8017af2:	685b      	ldr	r3, [r3, #4]
 8017af4:	4798      	blx	r3
 8017af6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8017af8:	b00a      	add	sp, #40	; 0x28
 8017afa:	bd70      	pop	{r4, r5, r6, pc}
 8017afc:	2000c5b3 	.word	0x2000c5b3
 8017b00:	08028b53 	.word	0x08028b53
 8017b04:	08028e8c 	.word	0x08028e8c
 8017b08:	08028c06 	.word	0x08028c06
 8017b0c:	2000c5ae 	.word	0x2000c5ae

08017b10 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8017b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b12:	b08b      	sub	sp, #44	; 0x2c
 8017b14:	4604      	mov	r4, r0
 8017b16:	466d      	mov	r5, sp
 8017b18:	e885 0006 	stmia.w	r5, {r1, r2}
 8017b1c:	461d      	mov	r5, r3
 8017b1e:	2300      	movs	r3, #0
 8017b20:	f8bd 6000 	ldrh.w	r6, [sp]
 8017b24:	9308      	str	r3, [sp, #32]
 8017b26:	2301      	movs	r3, #1
 8017b28:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8017b2c:	9302      	str	r3, [sp, #8]
 8017b2e:	6803      	ldr	r3, [r0, #0]
 8017b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017b32:	4798      	blx	r3
 8017b34:	463a      	mov	r2, r7
 8017b36:	4631      	mov	r1, r6
 8017b38:	4603      	mov	r3, r0
 8017b3a:	4620      	mov	r0, r4
 8017b3c:	f7ff ff20 	bl	8017980 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8017b40:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8017b44:	9003      	str	r0, [sp, #12]
 8017b46:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017b4a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017b4e:	9505      	str	r5, [sp, #20]
 8017b50:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017b54:	4b0d      	ldr	r3, [pc, #52]	; (8017b8c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 8017b56:	881b      	ldrh	r3, [r3, #0]
 8017b58:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017b5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017b5e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8017b62:	f7f8 f929 	bl	800fdb8 <_ZN8touchgfx3HAL3lcdEv>
 8017b66:	6803      	ldr	r3, [r0, #0]
 8017b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b6a:	4798      	blx	r3
 8017b6c:	23ff      	movs	r3, #255	; 0xff
 8017b6e:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8017b72:	a902      	add	r1, sp, #8
 8017b74:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8017b78:	6860      	ldr	r0, [r4, #4]
 8017b7a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8017b7e:	6803      	ldr	r3, [r0, #0]
 8017b80:	685b      	ldr	r3, [r3, #4]
 8017b82:	4798      	blx	r3
 8017b84:	4628      	mov	r0, r5
 8017b86:	b00b      	add	sp, #44	; 0x2c
 8017b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b8a:	bf00      	nop
 8017b8c:	2000c5ae 	.word	0x2000c5ae

08017b90 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8017b90:	b570      	push	{r4, r5, r6, lr}
 8017b92:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8017b96:	4604      	mov	r4, r0
 8017b98:	b19b      	cbz	r3, 8017bc2 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8017b9a:	2002      	movs	r0, #2
 8017b9c:	f7fc fea2 	bl	80148e4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8017ba0:	2300      	movs	r3, #0
 8017ba2:	4620      	mov	r0, r4
 8017ba4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8017ba8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8017bac:	6823      	ldr	r3, [r4, #0]
 8017bae:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 8017bb2:	f7ff fd39 	bl	8017628 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017bb6:	4601      	mov	r1, r0
 8017bb8:	4620      	mov	r0, r4
 8017bba:	462b      	mov	r3, r5
 8017bbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017bc0:	4718      	bx	r3
 8017bc2:	bd70      	pop	{r4, r5, r6, pc}

08017bc4 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8017bc4:	4770      	bx	lr

08017bc6 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8017bc6:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8017bca:	1a13      	subs	r3, r2, r0
 8017bcc:	4258      	negs	r0, r3
 8017bce:	4158      	adcs	r0, r3
 8017bd0:	4770      	bx	lr

08017bd2 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8017bd2:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8017bd6:	1a9b      	subs	r3, r3, r2
 8017bd8:	2b00      	cmp	r3, #0
 8017bda:	bfdc      	itt	le
 8017bdc:	6882      	ldrle	r2, [r0, #8]
 8017bde:	189b      	addle	r3, r3, r2
 8017be0:	2b01      	cmp	r3, #1
 8017be2:	bfcc      	ite	gt
 8017be4:	2000      	movgt	r0, #0
 8017be6:	2001      	movle	r0, #1
 8017be8:	4770      	bx	lr

08017bea <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8017bea:	6902      	ldr	r2, [r0, #16]
 8017bec:	6840      	ldr	r0, [r0, #4]
 8017bee:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8017bf2:	4770      	bx	lr

08017bf4 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8017bf4:	6803      	ldr	r3, [r0, #0]
 8017bf6:	691b      	ldr	r3, [r3, #16]
 8017bf8:	4718      	bx	r3

08017bfa <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8017bfa:	4770      	bx	lr

08017bfc <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8017bfc:	4770      	bx	lr
	...

08017c00 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8017c00:	2301      	movs	r3, #1
 8017c02:	b570      	push	{r4, r5, r6, lr}
 8017c04:	7203      	strb	r3, [r0, #8]
 8017c06:	4604      	mov	r4, r0
 8017c08:	6840      	ldr	r0, [r0, #4]
 8017c0a:	6803      	ldr	r3, [r0, #0]
 8017c0c:	699b      	ldr	r3, [r3, #24]
 8017c0e:	4798      	blx	r3
 8017c10:	6803      	ldr	r3, [r0, #0]
 8017c12:	4605      	mov	r5, r0
 8017c14:	2b08      	cmp	r3, #8
 8017c16:	d01e      	beq.n	8017c56 <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 8017c18:	d80b      	bhi.n	8017c32 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8017c1a:	2b02      	cmp	r3, #2
 8017c1c:	d027      	beq.n	8017c6e <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8017c1e:	2b04      	cmp	r3, #4
 8017c20:	d011      	beq.n	8017c46 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8017c22:	2b01      	cmp	r3, #1
 8017c24:	d028      	beq.n	8017c78 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8017c26:	4b17      	ldr	r3, [pc, #92]	; (8017c84 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8017c28:	218b      	movs	r1, #139	; 0x8b
 8017c2a:	4a17      	ldr	r2, [pc, #92]	; (8017c88 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8017c2c:	4817      	ldr	r0, [pc, #92]	; (8017c8c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 8017c2e:	f00e fa7f 	bl	8026130 <__assert_func>
 8017c32:	2b40      	cmp	r3, #64	; 0x40
 8017c34:	d020      	beq.n	8017c78 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8017c36:	d801      	bhi.n	8017c3c <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8017c38:	2b20      	cmp	r3, #32
 8017c3a:	e7f3      	b.n	8017c24 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8017c3c:	2b80      	cmp	r3, #128	; 0x80
 8017c3e:	d01b      	beq.n	8017c78 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8017c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017c44:	e7ee      	b.n	8017c24 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8017c46:	6823      	ldr	r3, [r4, #0]
 8017c48:	7f01      	ldrb	r1, [r0, #28]
 8017c4a:	4620      	mov	r0, r4
 8017c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017c4e:	4798      	blx	r3
 8017c50:	6823      	ldr	r3, [r4, #0]
 8017c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c54:	e006      	b.n	8017c64 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8017c56:	6823      	ldr	r3, [r4, #0]
 8017c58:	7f01      	ldrb	r1, [r0, #28]
 8017c5a:	4620      	mov	r0, r4
 8017c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017c5e:	4798      	blx	r3
 8017c60:	6823      	ldr	r3, [r4, #0]
 8017c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017c64:	4629      	mov	r1, r5
 8017c66:	4620      	mov	r0, r4
 8017c68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017c6c:	4718      	bx	r3
 8017c6e:	6823      	ldr	r3, [r4, #0]
 8017c70:	4620      	mov	r0, r4
 8017c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c74:	4798      	blx	r3
 8017c76:	e7f3      	b.n	8017c60 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8017c78:	6823      	ldr	r3, [r4, #0]
 8017c7a:	4620      	mov	r0, r4
 8017c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c7e:	4798      	blx	r3
 8017c80:	e7e6      	b.n	8017c50 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 8017c82:	bf00      	nop
 8017c84:	080290dd 	.word	0x080290dd
 8017c88:	080291ec 	.word	0x080291ec
 8017c8c:	08029102 	.word	0x08029102

08017c90 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8017c90:	b570      	push	{r4, r5, r6, lr}
 8017c92:	4604      	mov	r4, r0
 8017c94:	460e      	mov	r6, r1
 8017c96:	6860      	ldr	r0, [r4, #4]
 8017c98:	6803      	ldr	r3, [r0, #0]
 8017c9a:	685b      	ldr	r3, [r3, #4]
 8017c9c:	4798      	blx	r3
 8017c9e:	2800      	cmp	r0, #0
 8017ca0:	d1f9      	bne.n	8017c96 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8017ca2:	4d0b      	ldr	r5, [pc, #44]	; (8017cd0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 8017ca4:	6828      	ldr	r0, [r5, #0]
 8017ca6:	6803      	ldr	r3, [r0, #0]
 8017ca8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017caa:	4798      	blx	r3
 8017cac:	f7fd f8a0 	bl	8014df0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8017cb0:	6860      	ldr	r0, [r4, #4]
 8017cb2:	4631      	mov	r1, r6
 8017cb4:	6803      	ldr	r3, [r0, #0]
 8017cb6:	689b      	ldr	r3, [r3, #8]
 8017cb8:	4798      	blx	r3
 8017cba:	6823      	ldr	r3, [r4, #0]
 8017cbc:	4620      	mov	r0, r4
 8017cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017cc0:	4798      	blx	r3
 8017cc2:	6828      	ldr	r0, [r5, #0]
 8017cc4:	6803      	ldr	r3, [r0, #0]
 8017cc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017ccc:	4718      	bx	r3
 8017cce:	bf00      	nop
 8017cd0:	2000c5b4 	.word	0x2000c5b4

08017cd4 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8017cd4:	b508      	push	{r3, lr}
 8017cd6:	f7fd f86f 	bl	8014db8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8017cda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017cde:	f7fd b879 	b.w	8014dd4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08017ce2 <_ZN8touchgfx13DMA_Interface5startEv>:
 8017ce2:	b510      	push	{r4, lr}
 8017ce4:	4604      	mov	r4, r0
 8017ce6:	6840      	ldr	r0, [r0, #4]
 8017ce8:	6803      	ldr	r3, [r0, #0]
 8017cea:	681b      	ldr	r3, [r3, #0]
 8017cec:	4798      	blx	r3
 8017cee:	b948      	cbnz	r0, 8017d04 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8017cf0:	7a63      	ldrb	r3, [r4, #9]
 8017cf2:	b13b      	cbz	r3, 8017d04 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8017cf4:	7a23      	ldrb	r3, [r4, #8]
 8017cf6:	b92b      	cbnz	r3, 8017d04 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8017cf8:	6823      	ldr	r3, [r4, #0]
 8017cfa:	4620      	mov	r0, r4
 8017cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017cfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017d02:	4718      	bx	r3
 8017d04:	bd10      	pop	{r4, pc}
	...

08017d08 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8017d08:	b510      	push	{r4, lr}
 8017d0a:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 8017d0e:	1b12      	subs	r2, r2, r4
 8017d10:	2a00      	cmp	r2, #0
 8017d12:	bfdc      	itt	le
 8017d14:	6883      	ldrle	r3, [r0, #8]
 8017d16:	18d2      	addle	r2, r2, r3
 8017d18:	2a01      	cmp	r2, #1
 8017d1a:	dd18      	ble.n	8017d4e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8017d1c:	6843      	ldr	r3, [r0, #4]
 8017d1e:	f101 021c 	add.w	r2, r1, #28
 8017d22:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8017d26:	f851 4b04 	ldr.w	r4, [r1], #4
 8017d2a:	4291      	cmp	r1, r2
 8017d2c:	f843 4b04 	str.w	r4, [r3], #4
 8017d30:	d1f9      	bne.n	8017d26 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 8017d32:	880a      	ldrh	r2, [r1, #0]
 8017d34:	801a      	strh	r2, [r3, #0]
 8017d36:	788a      	ldrb	r2, [r1, #2]
 8017d38:	709a      	strb	r2, [r3, #2]
 8017d3a:	68c3      	ldr	r3, [r0, #12]
 8017d3c:	6882      	ldr	r2, [r0, #8]
 8017d3e:	f3bf 8f5b 	dmb	ish
 8017d42:	3301      	adds	r3, #1
 8017d44:	429a      	cmp	r2, r3
 8017d46:	bfd8      	it	le
 8017d48:	1a9b      	suble	r3, r3, r2
 8017d4a:	60c3      	str	r3, [r0, #12]
 8017d4c:	bd10      	pop	{r4, pc}
 8017d4e:	4b03      	ldr	r3, [pc, #12]	; (8017d5c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8017d50:	2139      	movs	r1, #57	; 0x39
 8017d52:	4a03      	ldr	r2, [pc, #12]	; (8017d60 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8017d54:	4803      	ldr	r0, [pc, #12]	; (8017d64 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8017d56:	f00e f9eb 	bl	8026130 <__assert_func>
 8017d5a:	bf00      	nop
 8017d5c:	08029128 	.word	0x08029128
 8017d60:	0802921c 	.word	0x0802921c
 8017d64:	08029102 	.word	0x08029102

08017d68 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8017d68:	b510      	push	{r4, lr}
 8017d6a:	6803      	ldr	r3, [r0, #0]
 8017d6c:	4604      	mov	r4, r0
 8017d6e:	681b      	ldr	r3, [r3, #0]
 8017d70:	4798      	blx	r3
 8017d72:	b128      	cbz	r0, 8017d80 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8017d74:	4b07      	ldr	r3, [pc, #28]	; (8017d94 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8017d76:	213f      	movs	r1, #63	; 0x3f
 8017d78:	4a07      	ldr	r2, [pc, #28]	; (8017d98 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8017d7a:	4808      	ldr	r0, [pc, #32]	; (8017d9c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8017d7c:	f00e f9d8 	bl	8026130 <__assert_func>
 8017d80:	6923      	ldr	r3, [r4, #16]
 8017d82:	68a2      	ldr	r2, [r4, #8]
 8017d84:	f3bf 8f5b 	dmb	ish
 8017d88:	3301      	adds	r3, #1
 8017d8a:	429a      	cmp	r2, r3
 8017d8c:	bfd8      	it	le
 8017d8e:	1a9b      	suble	r3, r3, r2
 8017d90:	6123      	str	r3, [r4, #16]
 8017d92:	bd10      	pop	{r4, pc}
 8017d94:	0802914b 	.word	0x0802914b
 8017d98:	0802926a 	.word	0x0802926a
 8017d9c:	08029102 	.word	0x08029102

08017da0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8017da0:	b570      	push	{r4, r5, r6, lr}
 8017da2:	4604      	mov	r4, r0
 8017da4:	6840      	ldr	r0, [r0, #4]
 8017da6:	6803      	ldr	r3, [r0, #0]
 8017da8:	681b      	ldr	r3, [r3, #0]
 8017daa:	4798      	blx	r3
 8017dac:	4605      	mov	r5, r0
 8017dae:	b930      	cbnz	r0, 8017dbe <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8017db0:	7a23      	ldrb	r3, [r4, #8]
 8017db2:	b123      	cbz	r3, 8017dbe <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8017db4:	6860      	ldr	r0, [r4, #4]
 8017db6:	6803      	ldr	r3, [r0, #0]
 8017db8:	695b      	ldr	r3, [r3, #20]
 8017dba:	4798      	blx	r3
 8017dbc:	7225      	strb	r5, [r4, #8]
 8017dbe:	6860      	ldr	r0, [r4, #4]
 8017dc0:	6803      	ldr	r3, [r0, #0]
 8017dc2:	681b      	ldr	r3, [r3, #0]
 8017dc4:	4798      	blx	r3
 8017dc6:	b928      	cbnz	r0, 8017dd4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8017dc8:	6823      	ldr	r3, [r4, #0]
 8017dca:	4620      	mov	r0, r4
 8017dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017dce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017dd2:	4718      	bx	r3
 8017dd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017dd8:	f7fd b816 	b.w	8014e08 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08017ddc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8017ddc:	b510      	push	{r4, lr}
 8017dde:	6082      	str	r2, [r0, #8]
 8017de0:	2200      	movs	r2, #0
 8017de2:	4c03      	ldr	r4, [pc, #12]	; (8017df0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8017de4:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8017de8:	e9c0 4100 	strd	r4, r1, [r0]
 8017dec:	bd10      	pop	{r4, pc}
 8017dee:	bf00      	nop
 8017df0:	080291d0 	.word	0x080291d0

08017df4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8017df4:	6840      	ldr	r0, [r0, #4]
 8017df6:	6803      	ldr	r3, [r0, #0]
 8017df8:	681b      	ldr	r3, [r3, #0]
 8017dfa:	4718      	bx	r3

08017dfc <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 8017dfc:	2001      	movs	r0, #1
 8017dfe:	4770      	bx	lr

08017e00 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 8017e00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017e04:	460d      	mov	r5, r1
 8017e06:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8017e0a:	b085      	sub	sp, #20
 8017e0c:	4690      	mov	r8, r2
 8017e0e:	4411      	add	r1, r2
 8017e10:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8017e14:	4699      	mov	r9, r3
 8017e16:	6803      	ldr	r3, [r0, #0]
 8017e18:	60c1      	str	r1, [r0, #12]
 8017e1a:	4604      	mov	r4, r0
 8017e1c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017e1e:	440a      	add	r2, r1
 8017e20:	6102      	str	r2, [r0, #16]
 8017e22:	68db      	ldr	r3, [r3, #12]
 8017e24:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 8017e28:	4798      	blx	r3
 8017e2a:	2800      	cmp	r0, #0
 8017e2c:	d039      	beq.n	8017ea2 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa2>
 8017e2e:	44c8      	add	r8, r9
 8017e30:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8017e34:	4445      	add	r5, r8
 8017e36:	6823      	ldr	r3, [r4, #0]
 8017e38:	f10d 020f 	add.w	r2, sp, #15
 8017e3c:	a903      	add	r1, sp, #12
 8017e3e:	4620      	mov	r0, r4
 8017e40:	9200      	str	r2, [sp, #0]
 8017e42:	f10d 020d 	add.w	r2, sp, #13
 8017e46:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8017e4a:	f10d 030e 	add.w	r3, sp, #14
 8017e4e:	47c0      	blx	r8
 8017e50:	b1f8      	cbz	r0, 8017e92 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x92>
 8017e52:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8017e56:	7a20      	ldrb	r0, [r4, #8]
 8017e58:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8017e5c:	4358      	muls	r0, r3
 8017e5e:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8017e62:	1c43      	adds	r3, r0, #1
 8017e64:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8017e68:	f817 0b01 	ldrb.w	r0, [r7], #1
 8017e6c:	121b      	asrs	r3, r3, #8
 8017e6e:	fb10 f003 	smulbb	r0, r0, r3
 8017e72:	b283      	uxth	r3, r0
 8017e74:	1c58      	adds	r0, r3, #1
 8017e76:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8017e7a:	6823      	ldr	r3, [r4, #0]
 8017e7c:	1200      	asrs	r0, r0, #8
 8017e7e:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8017e82:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8017e86:	28ff      	cmp	r0, #255	; 0xff
 8017e88:	d10e      	bne.n	8017ea8 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa8>
 8017e8a:	9100      	str	r1, [sp, #0]
 8017e8c:	4629      	mov	r1, r5
 8017e8e:	4620      	mov	r0, r4
 8017e90:	47c0      	blx	r8
 8017e92:	68e3      	ldr	r3, [r4, #12]
 8017e94:	3e01      	subs	r6, #1
 8017e96:	f105 0503 	add.w	r5, r5, #3
 8017e9a:	f103 0301 	add.w	r3, r3, #1
 8017e9e:	60e3      	str	r3, [r4, #12]
 8017ea0:	d1c9      	bne.n	8017e36 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x36>
 8017ea2:	b005      	add	sp, #20
 8017ea4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017ea8:	fa1f fc80 	uxth.w	ip, r0
 8017eac:	43c0      	mvns	r0, r0
 8017eae:	f895 e002 	ldrb.w	lr, [r5, #2]
 8017eb2:	fb12 f20c 	smulbb	r2, r2, ip
 8017eb6:	b2c0      	uxtb	r0, r0
 8017eb8:	fb13 f30c 	smulbb	r3, r3, ip
 8017ebc:	fb0e 2200 	mla	r2, lr, r0, r2
 8017ec0:	f895 e001 	ldrb.w	lr, [r5, #1]
 8017ec4:	fb11 f10c 	smulbb	r1, r1, ip
 8017ec8:	fb0e 3300 	mla	r3, lr, r0, r3
 8017ecc:	f895 e000 	ldrb.w	lr, [r5]
 8017ed0:	b292      	uxth	r2, r2
 8017ed2:	b29b      	uxth	r3, r3
 8017ed4:	fb0e 1000 	mla	r0, lr, r0, r1
 8017ed8:	1c59      	adds	r1, r3, #1
 8017eda:	b280      	uxth	r0, r0
 8017edc:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8017ee0:	1c51      	adds	r1, r2, #1
 8017ee2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8017ee6:	1c41      	adds	r1, r0, #1
 8017ee8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8017eec:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8017ef0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8017ef4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8017ef8:	9000      	str	r0, [sp, #0]
 8017efa:	e7c7      	b.n	8017e8c <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x8c>

08017efc <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 8017efc:	f89d 0000 	ldrb.w	r0, [sp]
 8017f00:	704b      	strb	r3, [r1, #1]
 8017f02:	7008      	strb	r0, [r1, #0]
 8017f04:	708a      	strb	r2, [r1, #2]
 8017f06:	4770      	bx	lr

08017f08 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 8017f08:	4413      	add	r3, r2
 8017f0a:	7dc2      	ldrb	r2, [r0, #23]
 8017f0c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017f10:	4419      	add	r1, r3
 8017f12:	7a03      	ldrb	r3, [r0, #8]
 8017f14:	435a      	muls	r2, r3
 8017f16:	1c53      	adds	r3, r2, #1
 8017f18:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8017f1c:	121b      	asrs	r3, r3, #8
 8017f1e:	2bff      	cmp	r3, #255	; 0xff
 8017f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017f22:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
 8017f26:	d13e      	bne.n	8017fa6 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x9e>
 8017f28:	4427      	add	r7, r4
 8017f2a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017f2e:	3103      	adds	r1, #3
 8017f30:	7d86      	ldrb	r6, [r0, #22]
 8017f32:	2bff      	cmp	r3, #255	; 0xff
 8017f34:	d10a      	bne.n	8017f4c <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x44>
 8017f36:	f801 6c03 	strb.w	r6, [r1, #-3]
 8017f3a:	7d43      	ldrb	r3, [r0, #21]
 8017f3c:	f801 3c02 	strb.w	r3, [r1, #-2]
 8017f40:	7d03      	ldrb	r3, [r0, #20]
 8017f42:	f801 3c01 	strb.w	r3, [r1, #-1]
 8017f46:	42a7      	cmp	r7, r4
 8017f48:	d1ef      	bne.n	8017f2a <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x22>
 8017f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017f4c:	b29a      	uxth	r2, r3
 8017f4e:	43db      	mvns	r3, r3
 8017f50:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 8017f54:	fb16 f602 	smulbb	r6, r6, r2
 8017f58:	b2db      	uxtb	r3, r3
 8017f5a:	fb05 6503 	mla	r5, r5, r3, r6
 8017f5e:	b2ad      	uxth	r5, r5
 8017f60:	1c6e      	adds	r6, r5, #1
 8017f62:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8017f66:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 8017f6a:	fb16 f603 	smulbb	r6, r6, r3
 8017f6e:	122d      	asrs	r5, r5, #8
 8017f70:	f801 5c03 	strb.w	r5, [r1, #-3]
 8017f74:	7d45      	ldrb	r5, [r0, #21]
 8017f76:	fb05 6502 	mla	r5, r5, r2, r6
 8017f7a:	b2ad      	uxth	r5, r5
 8017f7c:	1c6e      	adds	r6, r5, #1
 8017f7e:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8017f82:	122d      	asrs	r5, r5, #8
 8017f84:	f801 5c02 	strb.w	r5, [r1, #-2]
 8017f88:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8017f8c:	7d06      	ldrb	r6, [r0, #20]
 8017f8e:	fb15 f303 	smulbb	r3, r5, r3
 8017f92:	fb06 3202 	mla	r2, r6, r2, r3
 8017f96:	b292      	uxth	r2, r2
 8017f98:	1c53      	adds	r3, r2, #1
 8017f9a:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8017f9e:	1212      	asrs	r2, r2, #8
 8017fa0:	f801 2c01 	strb.w	r2, [r1, #-1]
 8017fa4:	e7cf      	b.n	8017f46 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3e>
 8017fa6:	b2de      	uxtb	r6, r3
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	d0ce      	beq.n	8017f4a <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>
 8017fac:	3103      	adds	r1, #3
 8017fae:	4427      	add	r7, r4
 8017fb0:	f814 2b01 	ldrb.w	r2, [r4], #1
 8017fb4:	3103      	adds	r1, #3
 8017fb6:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 8017fba:	fb02 f306 	mul.w	r3, r2, r6
 8017fbe:	42bc      	cmp	r4, r7
 8017fc0:	f103 0201 	add.w	r2, r3, #1
 8017fc4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8017fc8:	ea4f 2222 	mov.w	r2, r2, asr #8
 8017fcc:	b295      	uxth	r5, r2
 8017fce:	ea6f 0202 	mvn.w	r2, r2
 8017fd2:	b2d3      	uxtb	r3, r2
 8017fd4:	7d82      	ldrb	r2, [r0, #22]
 8017fd6:	fb1c fc03 	smulbb	ip, ip, r3
 8017fda:	fb02 c205 	mla	r2, r2, r5, ip
 8017fde:	b292      	uxth	r2, r2
 8017fe0:	f102 0c01 	add.w	ip, r2, #1
 8017fe4:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8017fe8:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 8017fec:	fb1c fc03 	smulbb	ip, ip, r3
 8017ff0:	ea4f 2222 	mov.w	r2, r2, asr #8
 8017ff4:	f801 2c06 	strb.w	r2, [r1, #-6]
 8017ff8:	7d42      	ldrb	r2, [r0, #21]
 8017ffa:	fb02 c205 	mla	r2, r2, r5, ip
 8017ffe:	b292      	uxth	r2, r2
 8018000:	f102 0c01 	add.w	ip, r2, #1
 8018004:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8018008:	ea4f 2222 	mov.w	r2, r2, asr #8
 801800c:	f801 2c05 	strb.w	r2, [r1, #-5]
 8018010:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 8018014:	f890 c014 	ldrb.w	ip, [r0, #20]
 8018018:	fb12 f303 	smulbb	r3, r2, r3
 801801c:	fb0c 3305 	mla	r3, ip, r5, r3
 8018020:	b29b      	uxth	r3, r3
 8018022:	f103 0201 	add.w	r2, r3, #1
 8018026:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801802a:	ea4f 2323 	mov.w	r3, r3, asr #8
 801802e:	f801 3c04 	strb.w	r3, [r1, #-4]
 8018032:	d1bd      	bne.n	8017fb0 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0xa8>
 8018034:	e789      	b.n	8017f4a <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>

08018036 <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 8018036:	b510      	push	{r4, lr}
 8018038:	7d04      	ldrb	r4, [r0, #20]
 801803a:	700c      	strb	r4, [r1, #0]
 801803c:	7d41      	ldrb	r1, [r0, #21]
 801803e:	7011      	strb	r1, [r2, #0]
 8018040:	7d82      	ldrb	r2, [r0, #22]
 8018042:	701a      	strb	r2, [r3, #0]
 8018044:	9b02      	ldr	r3, [sp, #8]
 8018046:	7dc2      	ldrb	r2, [r0, #23]
 8018048:	2001      	movs	r0, #1
 801804a:	701a      	strb	r2, [r3, #0]
 801804c:	bd10      	pop	{r4, pc}

0801804e <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>:
 801804e:	b570      	push	{r4, r5, r6, lr}
 8018050:	4616      	mov	r6, r2
 8018052:	4604      	mov	r4, r0
 8018054:	460d      	mov	r5, r1
 8018056:	f7f7 feaf 	bl	800fdb8 <_ZN8touchgfx3HAL3lcdEv>
 801805a:	6803      	ldr	r3, [r0, #0]
 801805c:	4629      	mov	r1, r5
 801805e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018060:	4798      	blx	r3
 8018062:	7520      	strb	r0, [r4, #20]
 8018064:	f7f7 fea8 	bl	800fdb8 <_ZN8touchgfx3HAL3lcdEv>
 8018068:	6803      	ldr	r3, [r0, #0]
 801806a:	4629      	mov	r1, r5
 801806c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801806e:	4798      	blx	r3
 8018070:	7560      	strb	r0, [r4, #21]
 8018072:	f7f7 fea1 	bl	800fdb8 <_ZN8touchgfx3HAL3lcdEv>
 8018076:	6803      	ldr	r3, [r0, #0]
 8018078:	4629      	mov	r1, r5
 801807a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801807c:	4798      	blx	r3
 801807e:	75e6      	strb	r6, [r4, #23]
 8018080:	75a0      	strb	r0, [r4, #22]
 8018082:	bd70      	pop	{r4, r5, r6, pc}

08018084 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>:
 8018084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018086:	460e      	mov	r6, r1
 8018088:	4617      	mov	r7, r2
 801808a:	4604      	mov	r4, r0
 801808c:	f000 f832 	bl	80180f4 <_ZN8touchgfx15AbstractPainterC1Ev>
 8018090:	4b12      	ldr	r3, [pc, #72]	; (80180dc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x58>)
 8018092:	6023      	str	r3, [r4, #0]
 8018094:	f7f7 fe90 	bl	800fdb8 <_ZN8touchgfx3HAL3lcdEv>
 8018098:	6803      	ldr	r3, [r0, #0]
 801809a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801809c:	4798      	blx	r3
 801809e:	1e43      	subs	r3, r0, #1
 80180a0:	425d      	negs	r5, r3
 80180a2:	415d      	adcs	r5, r3
 80180a4:	4b0e      	ldr	r3, [pc, #56]	; (80180e0 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x5c>)
 80180a6:	681b      	ldr	r3, [r3, #0]
 80180a8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80180aa:	b130      	cbz	r0, 80180ba <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x36>
 80180ac:	6803      	ldr	r3, [r0, #0]
 80180ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80180b0:	4798      	blx	r3
 80180b2:	2801      	cmp	r0, #1
 80180b4:	bf08      	it	eq
 80180b6:	f045 0501 	orreq.w	r5, r5, #1
 80180ba:	b92d      	cbnz	r5, 80180c8 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x44>
 80180bc:	4b09      	ldr	r3, [pc, #36]	; (80180e4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x60>)
 80180be:	2129      	movs	r1, #41	; 0x29
 80180c0:	4a09      	ldr	r2, [pc, #36]	; (80180e8 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x64>)
 80180c2:	480a      	ldr	r0, [pc, #40]	; (80180ec <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x68>)
 80180c4:	f00e f834 	bl	8026130 <__assert_func>
 80180c8:	4b09      	ldr	r3, [pc, #36]	; (80180f0 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x6c>)
 80180ca:	4620      	mov	r0, r4
 80180cc:	463a      	mov	r2, r7
 80180ce:	4631      	mov	r1, r6
 80180d0:	6023      	str	r3, [r4, #0]
 80180d2:	f7ff ffbc 	bl	801804e <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
 80180d6:	4620      	mov	r0, r4
 80180d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80180da:	bf00      	nop
 80180dc:	080292a4 	.word	0x080292a4
 80180e0:	2000c5b4 	.word	0x2000c5b4
 80180e4:	080292bc 	.word	0x080292bc
 80180e8:	08029380 	.word	0x08029380
 80180ec:	0802931a 	.word	0x0802931a
 80180f0:	08029368 	.word	0x08029368

080180f4 <_ZN8touchgfx15AbstractPainterC1Ev>:
 80180f4:	4a03      	ldr	r2, [pc, #12]	; (8018104 <_ZN8touchgfx15AbstractPainterC1Ev+0x10>)
 80180f6:	6002      	str	r2, [r0, #0]
 80180f8:	2200      	movs	r2, #0
 80180fa:	6042      	str	r2, [r0, #4]
 80180fc:	22ff      	movs	r2, #255	; 0xff
 80180fe:	7202      	strb	r2, [r0, #8]
 8018100:	4770      	bx	lr
 8018102:	bf00      	nop
 8018104:	080293c4 	.word	0x080293c4

08018108 <_ZN8touchgfx15AbstractPainterD1Ev>:
 8018108:	4770      	bx	lr

0801810a <_ZN8touchgfx15AbstractPainter9setOffsetEtt>:
 801810a:	8081      	strh	r1, [r0, #4]
 801810c:	80c2      	strh	r2, [r0, #6]
 801810e:	4770      	bx	lr

08018110 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>:
 8018110:	7201      	strb	r1, [r0, #8]
 8018112:	4770      	bx	lr

08018114 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 8018114:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 8018118:	4770      	bx	lr

0801811a <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 801811a:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 801811e:	4770      	bx	lr

08018120 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 8018120:	6281      	str	r1, [r0, #40]	; 0x28
 8018122:	4770      	bx	lr

08018124 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8018124:	b513      	push	{r0, r1, r4, lr}
 8018126:	6803      	ldr	r3, [r0, #0]
 8018128:	4604      	mov	r4, r0
 801812a:	4601      	mov	r1, r0
 801812c:	4668      	mov	r0, sp
 801812e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018130:	4798      	blx	r3
 8018132:	6823      	ldr	r3, [r4, #0]
 8018134:	4669      	mov	r1, sp
 8018136:	4620      	mov	r0, r4
 8018138:	691b      	ldr	r3, [r3, #16]
 801813a:	4798      	blx	r3
 801813c:	b002      	add	sp, #8
 801813e:	bd10      	pop	{r4, pc}

08018140 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8018140:	b510      	push	{r4, lr}
 8018142:	2200      	movs	r2, #0
 8018144:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8018148:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 801814c:	8002      	strh	r2, [r0, #0]
 801814e:	8042      	strh	r2, [r0, #2]
 8018150:	8084      	strh	r4, [r0, #4]
 8018152:	80c1      	strh	r1, [r0, #6]
 8018154:	bd10      	pop	{r4, pc}

08018156 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 8018156:	2200      	movs	r2, #0
 8018158:	8002      	strh	r2, [r0, #0]
 801815a:	8042      	strh	r2, [r0, #2]
 801815c:	8082      	strh	r2, [r0, #4]
 801815e:	80c2      	strh	r2, [r0, #6]
 8018160:	4770      	bx	lr
	...

08018164 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 8018164:	b508      	push	{r3, lr}
 8018166:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8018168:	b928      	cbnz	r0, 8018176 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 801816a:	4b03      	ldr	r3, [pc, #12]	; (8018178 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 801816c:	2127      	movs	r1, #39	; 0x27
 801816e:	4a03      	ldr	r2, [pc, #12]	; (801817c <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 8018170:	4803      	ldr	r0, [pc, #12]	; (8018180 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 8018172:	f00d ffdd 	bl	8026130 <__assert_func>
 8018176:	bd08      	pop	{r3, pc}
 8018178:	080293d0 	.word	0x080293d0
 801817c:	080294b4 	.word	0x080294b4
 8018180:	080293f7 	.word	0x080293f7

08018184 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8018184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018188:	b089      	sub	sp, #36	; 0x24
 801818a:	4604      	mov	r4, r0
 801818c:	6808      	ldr	r0, [r1, #0]
 801818e:	f04f 0a00 	mov.w	sl, #0
 8018192:	6849      	ldr	r1, [r1, #4]
 8018194:	ab02      	add	r3, sp, #8
 8018196:	f04f 0b01 	mov.w	fp, #1
 801819a:	c303      	stmia	r3!, {r0, r1}
 801819c:	4b3f      	ldr	r3, [pc, #252]	; (801829c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 801819e:	4621      	mov	r1, r4
 80181a0:	a804      	add	r0, sp, #16
 80181a2:	781b      	ldrb	r3, [r3, #0]
 80181a4:	2b01      	cmp	r3, #1
 80181a6:	6823      	ldr	r3, [r4, #0]
 80181a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80181aa:	bf1f      	itttt	ne
 80181ac:	f10d 0906 	addne.w	r9, sp, #6
 80181b0:	ae03      	addne	r6, sp, #12
 80181b2:	f10d 050e 	addne.w	r5, sp, #14
 80181b6:	f10d 080a 	addne.w	r8, sp, #10
 80181ba:	bf01      	itttt	eq
 80181bc:	f10d 090e 	addeq.w	r9, sp, #14
 80181c0:	f10d 0606 	addeq.w	r6, sp, #6
 80181c4:	ad03      	addeq	r5, sp, #12
 80181c6:	f10d 0808 	addeq.w	r8, sp, #8
 80181ca:	4798      	blx	r3
 80181cc:	f9b5 3000 	ldrsh.w	r3, [r5]
 80181d0:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	d056      	beq.n	8018286 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 80181d8:	4293      	cmp	r3, r2
 80181da:	bfa8      	it	ge
 80181dc:	4613      	movge	r3, r2
 80181de:	f8ad 3006 	strh.w	r3, [sp, #6]
 80181e2:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 80181e6:	2f00      	cmp	r7, #0
 80181e8:	dd34      	ble.n	8018254 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd0>
 80181ea:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 80181ee:	f8bd c014 	ldrh.w	ip, [sp, #20]
 80181f2:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80181f6:	4484      	add	ip, r0
 80181f8:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80181fc:	f9b6 e000 	ldrsh.w	lr, [r6]
 8018200:	fa0f fc8c 	sxth.w	ip, ip
 8018204:	f9b9 1000 	ldrsh.w	r1, [r9]
 8018208:	f8ad 2018 	strh.w	r2, [sp, #24]
 801820c:	4562      	cmp	r2, ip
 801820e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018212:	f8ad e01c 	strh.w	lr, [sp, #28]
 8018216:	f8ad 101e 	strh.w	r1, [sp, #30]
 801821a:	da29      	bge.n	8018270 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801821c:	4472      	add	r2, lr
 801821e:	b212      	sxth	r2, r2
 8018220:	4290      	cmp	r0, r2
 8018222:	da25      	bge.n	8018270 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8018224:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8018228:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801822c:	4402      	add	r2, r0
 801822e:	b212      	sxth	r2, r2
 8018230:	4293      	cmp	r3, r2
 8018232:	da1d      	bge.n	8018270 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8018234:	440b      	add	r3, r1
 8018236:	b21b      	sxth	r3, r3
 8018238:	4298      	cmp	r0, r3
 801823a:	da19      	bge.n	8018270 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801823c:	6823      	ldr	r3, [r4, #0]
 801823e:	a906      	add	r1, sp, #24
 8018240:	4620      	mov	r0, r4
 8018242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018244:	4798      	blx	r3
 8018246:	b998      	cbnz	r0, 8018270 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8018248:	107f      	asrs	r7, r7, #1
 801824a:	f04f 0a01 	mov.w	sl, #1
 801824e:	f8ad 7006 	strh.w	r7, [sp, #6]
 8018252:	e7c6      	b.n	80181e2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8018254:	d10c      	bne.n	8018270 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8018256:	f8ad b006 	strh.w	fp, [sp, #6]
 801825a:	f8b8 2000 	ldrh.w	r2, [r8]
 801825e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8018262:	440a      	add	r2, r1
 8018264:	f8a8 2000 	strh.w	r2, [r8]
 8018268:	882b      	ldrh	r3, [r5, #0]
 801826a:	1a5b      	subs	r3, r3, r1
 801826c:	802b      	strh	r3, [r5, #0]
 801826e:	e7ad      	b.n	80181cc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8018270:	f1ba 0f00 	cmp.w	sl, #0
 8018274:	d0f1      	beq.n	801825a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8018276:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801827a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801827e:	429a      	cmp	r2, r3
 8018280:	bf08      	it	eq
 8018282:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 8018284:	e7e9      	b.n	801825a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8018286:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801828a:	429a      	cmp	r2, r3
 801828c:	bf04      	itt	eq
 801828e:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 8018292:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 8018294:	b009      	add	sp, #36	; 0x24
 8018296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801829a:	bf00      	nop
 801829c:	2000c5ac 	.word	0x2000c5ac

080182a0 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 80182a0:	2200      	movs	r2, #0
 80182a2:	2101      	movs	r1, #1
 80182a4:	8082      	strh	r2, [r0, #4]
 80182a6:	80c2      	strh	r2, [r0, #6]
 80182a8:	8102      	strh	r2, [r0, #8]
 80182aa:	8142      	strh	r2, [r0, #10]
 80182ac:	8182      	strh	r2, [r0, #12]
 80182ae:	81c2      	strh	r2, [r0, #14]
 80182b0:	8202      	strh	r2, [r0, #16]
 80182b2:	8242      	strh	r2, [r0, #18]
 80182b4:	61c2      	str	r2, [r0, #28]
 80182b6:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 80182ba:	6282      	str	r2, [r0, #40]	; 0x28
 80182bc:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 80182c0:	4905      	ldr	r1, [pc, #20]	; (80182d8 <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 80182c2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80182c6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80182ca:	6001      	str	r1, [r0, #0]
 80182cc:	8582      	strh	r2, [r0, #44]	; 0x2c
 80182ce:	22ff      	movs	r2, #255	; 0xff
 80182d0:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 80182d4:	4770      	bx	lr
 80182d6:	bf00      	nop
 80182d8:	0802943c 	.word	0x0802943c

080182dc <_ZN8touchgfx12CanvasWidgetD1Ev>:
 80182dc:	4770      	bx	lr

080182de <_ZNK8touchgfx4Line14getMinimalRectEv>:
 80182de:	f101 0368 	add.w	r3, r1, #104	; 0x68
 80182e2:	4602      	mov	r2, r0
 80182e4:	cb03      	ldmia	r3!, {r0, r1}
 80182e6:	6010      	str	r0, [r2, #0]
 80182e8:	4610      	mov	r0, r2
 80182ea:	6051      	str	r1, [r2, #4]
 80182ec:	4770      	bx	lr

080182ee <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80182ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182f2:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 80182f6:	b395      	cbz	r5, 801835e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 80182f8:	f9b1 c006 	ldrsh.w	ip, [r1, #6]
 80182fc:	f1bc 0f00 	cmp.w	ip, #0
 8018300:	d02d      	beq.n	801835e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 8018302:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8018306:	f9b1 e000 	ldrsh.w	lr, [r1]
 801830a:	b354      	cbz	r4, 8018362 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 801830c:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8018310:	b33f      	cbz	r7, 8018362 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 8018312:	f9b0 8000 	ldrsh.w	r8, [r0]
 8018316:	4475      	add	r5, lr
 8018318:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801831c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8018320:	45f0      	cmp	r8, lr
 8018322:	4646      	mov	r6, r8
 8018324:	4444      	add	r4, r8
 8018326:	bfa8      	it	ge
 8018328:	4676      	movge	r6, lr
 801832a:	4293      	cmp	r3, r2
 801832c:	4619      	mov	r1, r3
 801832e:	443b      	add	r3, r7
 8018330:	bfa8      	it	ge
 8018332:	4611      	movge	r1, r2
 8018334:	4462      	add	r2, ip
 8018336:	b22d      	sxth	r5, r5
 8018338:	8006      	strh	r6, [r0, #0]
 801833a:	b224      	sxth	r4, r4
 801833c:	8041      	strh	r1, [r0, #2]
 801833e:	b212      	sxth	r2, r2
 8018340:	b21b      	sxth	r3, r3
 8018342:	42a5      	cmp	r5, r4
 8018344:	bfac      	ite	ge
 8018346:	ebc6 0405 	rsbge	r4, r6, r5
 801834a:	ebc6 0404 	rsblt	r4, r6, r4
 801834e:	429a      	cmp	r2, r3
 8018350:	bfac      	ite	ge
 8018352:	ebc1 0302 	rsbge	r3, r1, r2
 8018356:	ebc1 0303 	rsblt	r3, r1, r3
 801835a:	8084      	strh	r4, [r0, #4]
 801835c:	80c3      	strh	r3, [r0, #6]
 801835e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018362:	f8a0 e000 	strh.w	lr, [r0]
 8018366:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801836a:	8043      	strh	r3, [r0, #2]
 801836c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8018370:	8083      	strh	r3, [r0, #4]
 8018372:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8018376:	e7f1      	b.n	801835c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x6e>

08018378 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8018378:	b507      	push	{r0, r1, r2, lr}
 801837a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801837e:	ab01      	add	r3, sp, #4
 8018380:	6809      	ldr	r1, [r1, #0]
 8018382:	6800      	ldr	r0, [r0, #0]
 8018384:	f002 fc4f 	bl	801ac26 <_ZN8touchgfx6muldivElllRl>
 8018388:	b003      	add	sp, #12
 801838a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08018390 <_ZN8touchgfx7CWRUtil4sineEi>:
 8018390:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8018394:	fb90 f3f2 	sdiv	r3, r0, r2
 8018398:	fb03 0312 	mls	r3, r3, r2, r0
 801839c:	4413      	add	r3, r2
 801839e:	fb93 f0f2 	sdiv	r0, r3, r2
 80183a2:	fb02 3010 	mls	r0, r2, r0, r3
 80183a6:	4b0a      	ldr	r3, [pc, #40]	; (80183d0 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 80183a8:	285a      	cmp	r0, #90	; 0x5a
 80183aa:	dc02      	bgt.n	80183b2 <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 80183ac:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80183b0:	4770      	bx	lr
 80183b2:	28b4      	cmp	r0, #180	; 0xb4
 80183b4:	dc02      	bgt.n	80183bc <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 80183b6:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 80183ba:	e7f7      	b.n	80183ac <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 80183bc:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 80183c0:	bfd4      	ite	le
 80183c2:	38b4      	suble	r0, #180	; 0xb4
 80183c4:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 80183c8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80183cc:	4240      	negs	r0, r0
 80183ce:	4770      	bx	lr
 80183d0:	0802955e 	.word	0x0802955e

080183d4 <_ZN8touchgfx7CWRUtil5isqrtEm>:
 80183d4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80183d8:	f04f 0300 	mov.w	r3, #0
 80183dc:	bf2c      	ite	cs
 80183de:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 80183e2:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 80183e6:	1899      	adds	r1, r3, r2
 80183e8:	4288      	cmp	r0, r1
 80183ea:	bf24      	itt	cs
 80183ec:	1853      	addcs	r3, r2, r1
 80183ee:	1a40      	subcs	r0, r0, r1
 80183f0:	0892      	lsrs	r2, r2, #2
 80183f2:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80183f6:	d1f6      	bne.n	80183e6 <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 80183f8:	4618      	mov	r0, r3
 80183fa:	4770      	bx	lr

080183fc <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 80183fc:	2800      	cmp	r0, #0
 80183fe:	b508      	push	{r3, lr}
 8018400:	da05      	bge.n	801840e <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 8018402:	4240      	negs	r0, r0
 8018404:	f7ff fffa 	bl	80183fc <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8018408:	4240      	negs	r0, r0
 801840a:	b240      	sxtb	r0, r0
 801840c:	bd08      	pop	{r3, pc}
 801840e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8018412:	dc11      	bgt.n	8018438 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 8018414:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 8018418:	dd09      	ble.n	801842e <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 801841a:	4340      	muls	r0, r0
 801841c:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 8018420:	f7ff ffd8 	bl	80183d4 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8018424:	f7ff ffea 	bl	80183fc <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8018428:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 801842c:	e7ed      	b.n	801840a <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 801842e:	3003      	adds	r0, #3
 8018430:	4b02      	ldr	r3, [pc, #8]	; (801843c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 8018432:	10c0      	asrs	r0, r0, #3
 8018434:	5618      	ldrsb	r0, [r3, r0]
 8018436:	e7e9      	b.n	801840c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8018438:	2000      	movs	r0, #0
 801843a:	e7e7      	b.n	801840c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 801843c:	08029502 	.word	0x08029502

08018440 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 8018440:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018442:	460c      	mov	r4, r1
 8018444:	1e01      	subs	r1, r0, #0
 8018446:	4615      	mov	r5, r2
 8018448:	db01      	blt.n	801844e <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0xe>
 801844a:	2c00      	cmp	r4, #0
 801844c:	da06      	bge.n	801845c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1c>
 801844e:	4b11      	ldr	r3, [pc, #68]	; (8018494 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x54>)
 8018450:	f240 3197 	movw	r1, #919	; 0x397
 8018454:	4a10      	ldr	r2, [pc, #64]	; (8018498 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x58>)
 8018456:	4811      	ldr	r0, [pc, #68]	; (801849c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x5c>)
 8018458:	f00d fe6a 	bl	8026130 <__assert_func>
 801845c:	428c      	cmp	r4, r1
 801845e:	dd06      	ble.n	801846e <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2e>
 8018460:	4620      	mov	r0, r4
 8018462:	f7ff ffed 	bl	8018440 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8018466:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 801846a:	b003      	add	sp, #12
 801846c:	bd30      	pop	{r4, r5, pc}
 801846e:	4349      	muls	r1, r1
 8018470:	fb04 1004 	mla	r0, r4, r4, r1
 8018474:	f7ff ffae 	bl	80183d4 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8018478:	6028      	str	r0, [r5, #0]
 801847a:	2800      	cmp	r0, #0
 801847c:	d0f5      	beq.n	801846a <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 801847e:	4602      	mov	r2, r0
 8018480:	ab01      	add	r3, sp, #4
 8018482:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8018486:	4620      	mov	r0, r4
 8018488:	f002 fbcd 	bl	801ac26 <_ZN8touchgfx6muldivElllRl>
 801848c:	f7ff ffb6 	bl	80183fc <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8018490:	e7eb      	b.n	801846a <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 8018492:	bf00      	nop
 8018494:	08029614 	.word	0x08029614
 8018498:	080296dc 	.word	0x080296dc
 801849c:	08029625 	.word	0x08029625

080184a0 <_ZN8touchgfx4LineC1Ev>:
 80184a0:	b510      	push	{r4, lr}
 80184a2:	4604      	mov	r4, r0
 80184a4:	f7ff fefc 	bl	80182a0 <_ZN8touchgfx12CanvasWidgetC1Ev>
 80184a8:	4b0c      	ldr	r3, [pc, #48]	; (80184dc <_ZN8touchgfx4LineC1Ev+0x3c>)
 80184aa:	2220      	movs	r2, #32
 80184ac:	4620      	mov	r0, r4
 80184ae:	6023      	str	r3, [r4, #0]
 80184b0:	2300      	movs	r3, #0
 80184b2:	6422      	str	r2, [r4, #64]	; 0x40
 80184b4:	2212      	movs	r2, #18
 80184b6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80184ba:	6722      	str	r2, [r4, #112]	; 0x70
 80184bc:	60a3      	str	r3, [r4, #8]
 80184be:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 80184c2:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 80184c6:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80184ca:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 80184ce:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
 80184d2:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 80184d6:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 80184da:	bd10      	pop	{r4, pc}
 80184dc:	08029664 	.word	0x08029664

080184e0 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 80184e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184e4:	6b86      	ldr	r6, [r0, #56]	; 0x38
 80184e6:	b085      	sub	sp, #20
 80184e8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80184ea:	4604      	mov	r4, r0
 80184ec:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80184ee:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80184f0:	1af6      	subs	r6, r6, r3
 80184f2:	eba5 0502 	sub.w	r5, r5, r2
 80184f6:	f040 809b 	bne.w	8018630 <_ZN8touchgfx4Line17updateCachedShapeEv+0x150>
 80184fa:	b955      	cbnz	r5, 8018512 <_ZN8touchgfx4Line17updateCachedShapeEv+0x32>
 80184fc:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 8018500:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8018504:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8018508:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801850c:	b005      	add	sp, #20
 801850e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018512:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 8018516:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 801851a:	f04f 0802 	mov.w	r8, #2
 801851e:	463a      	mov	r2, r7
 8018520:	4629      	mov	r1, r5
 8018522:	ab03      	add	r3, sp, #12
 8018524:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8018526:	f002 fb7e 	bl	801ac26 <_ZN8touchgfx6muldivElllRl>
 801852a:	ab03      	add	r3, sp, #12
 801852c:	463a      	mov	r2, r7
 801852e:	4631      	mov	r1, r6
 8018530:	fb90 f5f8 	sdiv	r5, r0, r8
 8018534:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8018536:	f002 fb76 	bl	801ac26 <_ZN8touchgfx6muldivElllRl>
 801853a:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
 801853e:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
 8018542:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
 8018546:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8018548:	fb90 f0f8 	sdiv	r0, r0, r8
 801854c:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8018550:	eba8 0305 	sub.w	r3, r8, r5
 8018554:	f1ba 0f00 	cmp.w	sl, #0
 8018558:	f040 80c3 	bne.w	80186e2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x202>
 801855c:	64a3      	str	r3, [r4, #72]	; 0x48
 801855e:	19c3      	adds	r3, r0, r7
 8018560:	65a3      	str	r3, [r4, #88]	; 0x58
 8018562:	ebae 0305 	sub.w	r3, lr, r5
 8018566:	64e3      	str	r3, [r4, #76]	; 0x4c
 8018568:	eb00 030c 	add.w	r3, r0, ip
 801856c:	65e3      	str	r3, [r4, #92]	; 0x5c
 801856e:	eb05 030e 	add.w	r3, r5, lr
 8018572:	6523      	str	r3, [r4, #80]	; 0x50
 8018574:	ebac 0300 	sub.w	r3, ip, r0
 8018578:	6623      	str	r3, [r4, #96]	; 0x60
 801857a:	eb05 0308 	add.w	r3, r5, r8
 801857e:	6563      	str	r3, [r4, #84]	; 0x54
 8018580:	1a3b      	subs	r3, r7, r0
 8018582:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8018584:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 8018588:	6663      	str	r3, [r4, #100]	; 0x64
 801858a:	f104 0358 	add.w	r3, r4, #88	; 0x58
 801858e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8018590:	4632      	mov	r2, r6
 8018592:	9301      	str	r3, [sp, #4]
 8018594:	9100      	str	r1, [sp, #0]
 8018596:	f859 bb04 	ldr.w	fp, [r9], #4
 801859a:	9b00      	ldr	r3, [sp, #0]
 801859c:	455e      	cmp	r6, fp
 801859e:	bfa8      	it	ge
 80185a0:	465e      	movge	r6, fp
 80185a2:	455a      	cmp	r2, fp
 80185a4:	bfb8      	it	lt
 80185a6:	465a      	movlt	r2, fp
 80185a8:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 80185ac:	4559      	cmp	r1, fp
 80185ae:	bfa8      	it	ge
 80185b0:	4659      	movge	r1, fp
 80185b2:	455b      	cmp	r3, fp
 80185b4:	bfb8      	it	lt
 80185b6:	465b      	movlt	r3, fp
 80185b8:	9300      	str	r3, [sp, #0]
 80185ba:	9b01      	ldr	r3, [sp, #4]
 80185bc:	454b      	cmp	r3, r9
 80185be:	d1ea      	bne.n	8018596 <_ZN8touchgfx4Line17updateCachedShapeEv+0xb6>
 80185c0:	f04f 0b20 	mov.w	fp, #32
 80185c4:	b209      	sxth	r1, r1
 80185c6:	b212      	sxth	r2, r2
 80185c8:	f1ba 0f01 	cmp.w	sl, #1
 80185cc:	b236      	sxth	r6, r6
 80185ce:	fb91 f9fb 	sdiv	r9, r1, fp
 80185d2:	f9bd 1000 	ldrsh.w	r1, [sp]
 80185d6:	f8a4 906a 	strh.w	r9, [r4, #106]	; 0x6a
 80185da:	fb92 f2fb 	sdiv	r2, r2, fp
 80185de:	fb91 f1fb 	sdiv	r1, r1, fp
 80185e2:	fb96 f6fb 	sdiv	r6, r6, fp
 80185e6:	f102 0201 	add.w	r2, r2, #1
 80185ea:	f101 0101 	add.w	r1, r1, #1
 80185ee:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
 80185f2:	eba1 0109 	sub.w	r1, r1, r9
 80185f6:	eba2 0606 	sub.w	r6, r2, r6
 80185fa:	f8a4 106e 	strh.w	r1, [r4, #110]	; 0x6e
 80185fe:	f8a4 606c 	strh.w	r6, [r4, #108]	; 0x6c
 8018602:	d183      	bne.n	801850c <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 8018604:	eba8 0305 	sub.w	r3, r8, r5
 8018608:	64a3      	str	r3, [r4, #72]	; 0x48
 801860a:	19c3      	adds	r3, r0, r7
 801860c:	65a3      	str	r3, [r4, #88]	; 0x58
 801860e:	ebae 0305 	sub.w	r3, lr, r5
 8018612:	64e3      	str	r3, [r4, #76]	; 0x4c
 8018614:	eb00 030c 	add.w	r3, r0, ip
 8018618:	65e3      	str	r3, [r4, #92]	; 0x5c
 801861a:	eb05 030e 	add.w	r3, r5, lr
 801861e:	4445      	add	r5, r8
 8018620:	6523      	str	r3, [r4, #80]	; 0x50
 8018622:	ebac 0300 	sub.w	r3, ip, r0
 8018626:	1a38      	subs	r0, r7, r0
 8018628:	6565      	str	r5, [r4, #84]	; 0x54
 801862a:	6623      	str	r3, [r4, #96]	; 0x60
 801862c:	6660      	str	r0, [r4, #100]	; 0x64
 801862e:	e76d      	b.n	801850c <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 8018630:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 8018634:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
 8018638:	2d00      	cmp	r5, #0
 801863a:	f43f af6e 	beq.w	801851a <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 801863e:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 8018642:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 8018646:	fb93 f2f7 	sdiv	r2, r3, r7
 801864a:	fb07 3312 	mls	r3, r7, r2, r3
 801864e:	b34b      	cbz	r3, 80186a4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c4>
 8018650:	fb97 f2f3 	sdiv	r2, r7, r3
 8018654:	fb03 7712 	mls	r7, r3, r2, r7
 8018658:	2f00      	cmp	r7, #0
 801865a:	d1f4      	bne.n	8018646 <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 801865c:	2b01      	cmp	r3, #1
 801865e:	f24b 5204 	movw	r2, #46340	; 0xb504
 8018662:	bf18      	it	ne
 8018664:	fb96 f6f3 	sdivne	r6, r6, r3
 8018668:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
 801866c:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
 8018670:	bf18      	it	ne
 8018672:	fb95 f5f3 	sdivne	r5, r5, r3
 8018676:	4291      	cmp	r1, r2
 8018678:	dd16      	ble.n	80186a8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c8>
 801867a:	2d00      	cmp	r5, #0
 801867c:	da4d      	bge.n	801871a <_ZN8touchgfx4Line17updateCachedShapeEv+0x23a>
 801867e:	4b29      	ldr	r3, [pc, #164]	; (8018724 <_ZN8touchgfx4Line17updateCachedShapeEv+0x244>)
 8018680:	429d      	cmp	r5, r3
 8018682:	da27      	bge.n	80186d4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f4>
 8018684:	426a      	negs	r2, r5
 8018686:	f24b 5304 	movw	r3, #46340	; 0xb504
 801868a:	fb91 f1f3 	sdiv	r1, r1, r3
 801868e:	fb92 f3f3 	sdiv	r3, r2, r3
 8018692:	4299      	cmp	r1, r3
 8018694:	bfcc      	ite	gt
 8018696:	1c4b      	addgt	r3, r1, #1
 8018698:	3301      	addle	r3, #1
 801869a:	fb96 f6f3 	sdiv	r6, r6, r3
 801869e:	fb95 f5f3 	sdiv	r5, r5, r3
 80186a2:	e00f      	b.n	80186c4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1e4>
 80186a4:	463b      	mov	r3, r7
 80186a6:	e7d9      	b.n	801865c <_ZN8touchgfx4Line17updateCachedShapeEv+0x17c>
 80186a8:	2d00      	cmp	r5, #0
 80186aa:	fb92 f2f1 	sdiv	r2, r2, r1
 80186ae:	da13      	bge.n	80186d8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f8>
 80186b0:	4269      	negs	r1, r5
 80186b2:	f24b 5304 	movw	r3, #46340	; 0xb504
 80186b6:	fb93 f3f1 	sdiv	r3, r3, r1
 80186ba:	429a      	cmp	r2, r3
 80186bc:	bfa8      	it	ge
 80186be:	461a      	movge	r2, r3
 80186c0:	4356      	muls	r6, r2
 80186c2:	4355      	muls	r5, r2
 80186c4:	fb05 f005 	mul.w	r0, r5, r5
 80186c8:	fb06 0006 	mla	r0, r6, r6, r0
 80186cc:	f7ff fe82 	bl	80183d4 <_ZN8touchgfx7CWRUtil5isqrtEm>
 80186d0:	4607      	mov	r7, r0
 80186d2:	e722      	b.n	801851a <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 80186d4:	2200      	movs	r2, #0
 80186d6:	e7eb      	b.n	80186b0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d0>
 80186d8:	4629      	mov	r1, r5
 80186da:	e7ea      	b.n	80186b2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 80186dc:	4629      	mov	r1, r5
 80186de:	2200      	movs	r2, #0
 80186e0:	e7e7      	b.n	80186b2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 80186e2:	1a1b      	subs	r3, r3, r0
 80186e4:	64a3      	str	r3, [r4, #72]	; 0x48
 80186e6:	19c3      	adds	r3, r0, r7
 80186e8:	1b5b      	subs	r3, r3, r5
 80186ea:	65a3      	str	r3, [r4, #88]	; 0x58
 80186ec:	ebae 0305 	sub.w	r3, lr, r5
 80186f0:	4403      	add	r3, r0
 80186f2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80186f4:	eb00 030c 	add.w	r3, r0, ip
 80186f8:	442b      	add	r3, r5
 80186fa:	65e3      	str	r3, [r4, #92]	; 0x5c
 80186fc:	eb05 030e 	add.w	r3, r5, lr
 8018700:	4403      	add	r3, r0
 8018702:	6523      	str	r3, [r4, #80]	; 0x50
 8018704:	ebac 0300 	sub.w	r3, ip, r0
 8018708:	442b      	add	r3, r5
 801870a:	6623      	str	r3, [r4, #96]	; 0x60
 801870c:	eb05 0308 	add.w	r3, r5, r8
 8018710:	1a1b      	subs	r3, r3, r0
 8018712:	6563      	str	r3, [r4, #84]	; 0x54
 8018714:	1a3b      	subs	r3, r7, r0
 8018716:	1b5b      	subs	r3, r3, r5
 8018718:	e733      	b.n	8018582 <_ZN8touchgfx4Line17updateCachedShapeEv+0xa2>
 801871a:	4295      	cmp	r5, r2
 801871c:	ddde      	ble.n	80186dc <_ZN8touchgfx4Line17updateCachedShapeEv+0x1fc>
 801871e:	462a      	mov	r2, r5
 8018720:	e7b1      	b.n	8018686 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1a6>
 8018722:	bf00      	nop
 8018724:	ffff4afc 	.word	0xffff4afc

08018728 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 8018728:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801872a:	428b      	cmp	r3, r1
 801872c:	d102      	bne.n	8018734 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 801872e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8018730:	4293      	cmp	r3, r2
 8018732:	d003      	beq.n	801873c <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 8018734:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
 8018738:	f7ff bed2 	b.w	80184e0 <_ZN8touchgfx4Line17updateCachedShapeEv>
 801873c:	4770      	bx	lr

0801873e <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 801873e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8018740:	428b      	cmp	r3, r1
 8018742:	d102      	bne.n	801874a <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 8018744:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8018746:	4293      	cmp	r3, r2
 8018748:	d003      	beq.n	8018752 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 801874a:	e9c0 120e 	strd	r1, r2, [r0, #56]	; 0x38
 801874e:	f7ff bec7 	b.w	80184e0 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8018752:	4770      	bx	lr

08018754 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 8018754:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
 8018758:	f7ff bec2 	b.w	80184e0 <_ZN8touchgfx4Line17updateCachedShapeEv>

0801875c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 801875c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018760:	b0b3      	sub	sp, #204	; 0xcc
 8018762:	4604      	mov	r4, r0
 8018764:	460a      	mov	r2, r1
 8018766:	4601      	mov	r1, r0
 8018768:	a804      	add	r0, sp, #16
 801876a:	ad32      	add	r5, sp, #200	; 0xc8
 801876c:	f00c f914 	bl	8024998 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8018770:	2300      	movs	r3, #0
 8018772:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8018774:	f845 3dc4 	str.w	r3, [r5, #-196]!
 8018778:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801877a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801877c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801877e:	1ac0      	subs	r0, r0, r3
 8018780:	eba1 0102 	sub.w	r1, r1, r2
 8018784:	d43c      	bmi.n	8018800 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xa4>
 8018786:	2900      	cmp	r1, #0
 8018788:	462a      	mov	r2, r5
 801878a:	db33      	blt.n	80187f4 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x98>
 801878c:	f7ff fe58 	bl	8018440 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8018790:	f100 075a 	add.w	r7, r0, #90	; 0x5a
 8018794:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8018796:	a804      	add	r0, sp, #16
 8018798:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801879a:	f00c fac6 	bl	8024d2a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801879e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80187a0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80187a2:	a804      	add	r0, sp, #16
 80187a4:	f00c fa50 	bl	8024c48 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80187a8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80187ac:	2b01      	cmp	r3, #1
 80187ae:	d137      	bne.n	8018820 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 80187b0:	6f26      	ldr	r6, [r4, #112]	; 0x70
 80187b2:	2eb3      	cmp	r6, #179	; 0xb3
 80187b4:	dc34      	bgt.n	8018820 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 80187b6:	eba7 0906 	sub.w	r9, r7, r6
 80187ba:	4648      	mov	r0, r9
 80187bc:	f7ff fde8 	bl	8018390 <_ZN8touchgfx7CWRUtil4sineEi>
 80187c0:	a902      	add	r1, sp, #8
 80187c2:	9002      	str	r0, [sp, #8]
 80187c4:	4628      	mov	r0, r5
 80187c6:	f7ff fdd7 	bl	8018378 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80187ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80187cc:	eb00 0801 	add.w	r8, r0, r1
 80187d0:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 80187d4:	f7ff fddc 	bl	8018390 <_ZN8touchgfx7CWRUtil4sineEi>
 80187d8:	a903      	add	r1, sp, #12
 80187da:	9003      	str	r0, [sp, #12]
 80187dc:	4628      	mov	r0, r5
 80187de:	f7ff fdcb 	bl	8018378 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80187e2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80187e4:	4641      	mov	r1, r8
 80187e6:	1a12      	subs	r2, r2, r0
 80187e8:	a804      	add	r0, sp, #16
 80187ea:	f00c fa2d 	bl	8024c48 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80187ee:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80187f0:	441e      	add	r6, r3
 80187f2:	e7de      	b.n	80187b2 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x56>
 80187f4:	4249      	negs	r1, r1
 80187f6:	f7ff fe23 	bl	8018440 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 80187fa:	f1c0 075a 	rsb	r7, r0, #90	; 0x5a
 80187fe:	e7c9      	b.n	8018794 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8018800:	2900      	cmp	r1, #0
 8018802:	f1c0 0000 	rsb	r0, r0, #0
 8018806:	462a      	mov	r2, r5
 8018808:	db04      	blt.n	8018814 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb8>
 801880a:	f7ff fe19 	bl	8018440 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801880e:	f5c0 7787 	rsb	r7, r0, #270	; 0x10e
 8018812:	e7bf      	b.n	8018794 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8018814:	4249      	negs	r1, r1
 8018816:	f7ff fe13 	bl	8018440 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801881a:	f500 7787 	add.w	r7, r0, #270	; 0x10e
 801881e:	e7b9      	b.n	8018794 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8018820:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8018822:	a804      	add	r0, sp, #16
 8018824:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8018826:	f00c fa0f 	bl	8024c48 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801882a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801882c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801882e:	a804      	add	r0, sp, #16
 8018830:	f00c fa0a 	bl	8024c48 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018834:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018838:	2b01      	cmp	r3, #1
 801883a:	d123      	bne.n	8018884 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 801883c:	6f26      	ldr	r6, [r4, #112]	; 0x70
 801883e:	f1c6 06b4 	rsb	r6, r6, #180	; 0xb4
 8018842:	2e00      	cmp	r6, #0
 8018844:	dd1e      	ble.n	8018884 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 8018846:	eb06 0907 	add.w	r9, r6, r7
 801884a:	4648      	mov	r0, r9
 801884c:	f7ff fda0 	bl	8018390 <_ZN8touchgfx7CWRUtil4sineEi>
 8018850:	a902      	add	r1, sp, #8
 8018852:	9002      	str	r0, [sp, #8]
 8018854:	4628      	mov	r0, r5
 8018856:	f7ff fd8f 	bl	8018378 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801885a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801885c:	eb00 0801 	add.w	r8, r0, r1
 8018860:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8018864:	f7ff fd94 	bl	8018390 <_ZN8touchgfx7CWRUtil4sineEi>
 8018868:	a903      	add	r1, sp, #12
 801886a:	9003      	str	r0, [sp, #12]
 801886c:	4628      	mov	r0, r5
 801886e:	f7ff fd83 	bl	8018378 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018872:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8018874:	4641      	mov	r1, r8
 8018876:	1a12      	subs	r2, r2, r0
 8018878:	a804      	add	r0, sp, #16
 801887a:	f00c f9e5 	bl	8024c48 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801887e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018880:	1af6      	subs	r6, r6, r3
 8018882:	e7de      	b.n	8018842 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xe6>
 8018884:	a804      	add	r0, sp, #16
 8018886:	f00c fb54 	bl	8024f32 <_ZN8touchgfx6Canvas6renderEv>
 801888a:	4604      	mov	r4, r0
 801888c:	a804      	add	r0, sp, #16
 801888e:	f00c fb91 	bl	8024fb4 <_ZN8touchgfx6CanvasD1Ev>
 8018892:	4620      	mov	r0, r4
 8018894:	b033      	add	sp, #204	; 0xcc
 8018896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801889a <_ZN8touchgfx8TextArea13getTextHeightEv>:
 801889a:	b570      	push	{r4, r5, r6, lr}
 801889c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80188a0:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80188a2:	4604      	mov	r4, r0
 80188a4:	429a      	cmp	r2, r3
 80188a6:	d00c      	beq.n	80188c2 <_ZN8touchgfx8TextArea13getTextHeightEv+0x28>
 80188a8:	f850 3b26 	ldr.w	r3, [r0], #38
 80188ac:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 80188ae:	f7f8 f9ab 	bl	8010c08 <_ZNK8touchgfx9TypedText7getTextEv>
 80188b2:	2300      	movs	r3, #0
 80188b4:	4601      	mov	r1, r0
 80188b6:	46ac      	mov	ip, r5
 80188b8:	4620      	mov	r0, r4
 80188ba:	461a      	mov	r2, r3
 80188bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80188c0:	4760      	bx	ip
 80188c2:	2000      	movs	r0, #0
 80188c4:	bd70      	pop	{r4, r5, r6, pc}

080188c6 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 80188c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80188c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80188cc:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80188ce:	429a      	cmp	r2, r3
 80188d0:	d016      	beq.n	8018900 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x3a>
 80188d2:	f100 0426 	add.w	r4, r0, #38	; 0x26
 80188d6:	4620      	mov	r0, r4
 80188d8:	f7f6 fe10 	bl	800f4fc <_ZNK8touchgfx9TypedText7getFontEv>
 80188dc:	6803      	ldr	r3, [r0, #0]
 80188de:	4605      	mov	r5, r0
 80188e0:	4620      	mov	r0, r4
 80188e2:	69de      	ldr	r6, [r3, #28]
 80188e4:	f7f6 fe26 	bl	800f534 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80188e8:	4607      	mov	r7, r0
 80188ea:	4620      	mov	r0, r4
 80188ec:	f7f8 f98c 	bl	8010c08 <_ZNK8touchgfx9TypedText7getTextEv>
 80188f0:	2300      	movs	r3, #0
 80188f2:	4602      	mov	r2, r0
 80188f4:	4639      	mov	r1, r7
 80188f6:	9300      	str	r3, [sp, #0]
 80188f8:	4628      	mov	r0, r5
 80188fa:	47b0      	blx	r6
 80188fc:	b003      	add	sp, #12
 80188fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018900:	2000      	movs	r0, #0
 8018902:	e7fb      	b.n	80188fc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x36>

08018904 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8018904:	b40e      	push	{r1, r2, r3}
 8018906:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801890a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801890e:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8018910:	b09b      	sub	sp, #108	; 0x6c
 8018912:	4604      	mov	r4, r0
 8018914:	429a      	cmp	r2, r3
 8018916:	d03f      	beq.n	8018998 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x94>
 8018918:	f100 0726 	add.w	r7, r0, #38	; 0x26
 801891c:	ab22      	add	r3, sp, #136	; 0x88
 801891e:	4638      	mov	r0, r7
 8018920:	9303      	str	r3, [sp, #12]
 8018922:	f7f6 fdeb 	bl	800f4fc <_ZNK8touchgfx9TypedText7getFontEv>
 8018926:	6803      	ldr	r3, [r0, #0]
 8018928:	4680      	mov	r8, r0
 801892a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801892c:	4798      	blx	r3
 801892e:	4606      	mov	r6, r0
 8018930:	b205      	sxth	r5, r0
 8018932:	a804      	add	r0, sp, #16
 8018934:	f002 ff7e 	bl	801b834 <_ZN8touchgfx12TextProviderC1Ev>
 8018938:	f8d8 3000 	ldr.w	r3, [r8]
 801893c:	4640      	mov	r0, r8
 801893e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018940:	4798      	blx	r3
 8018942:	9a03      	ldr	r2, [sp, #12]
 8018944:	4603      	mov	r3, r0
 8018946:	9921      	ldr	r1, [sp, #132]	; 0x84
 8018948:	a804      	add	r0, sp, #16
 801894a:	f002 ff90 	bl	801b86e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801894e:	4638      	mov	r0, r7
 8018950:	f7f6 fdf0 	bl	800f534 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8018954:	4680      	mov	r8, r0
 8018956:	4638      	mov	r0, r7
 8018958:	f7f6 fdd0 	bl	800f4fc <_ZNK8touchgfx9TypedText7getFontEv>
 801895c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8018960:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 8018964:	4642      	mov	r2, r8
 8018966:	9300      	str	r3, [sp, #0]
 8018968:	4603      	mov	r3, r0
 801896a:	a804      	add	r0, sp, #16
 801896c:	f001 f815 	bl	801999a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8018970:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8018974:	b203      	sxth	r3, r0
 8018976:	18a9      	adds	r1, r5, r2
 8018978:	2900      	cmp	r1, #0
 801897a:	dd0b      	ble.n	8018994 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x90>
 801897c:	3b01      	subs	r3, #1
 801897e:	fb13 f302 	smulbb	r3, r3, r2
 8018982:	fb16 3300 	smlabb	r3, r6, r0, r3
 8018986:	b21d      	sxth	r5, r3
 8018988:	4628      	mov	r0, r5
 801898a:	b01b      	add	sp, #108	; 0x6c
 801898c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018990:	b003      	add	sp, #12
 8018992:	4770      	bx	lr
 8018994:	2b00      	cmp	r3, #0
 8018996:	dcf7      	bgt.n	8018988 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
 8018998:	2500      	movs	r5, #0
 801899a:	e7f5      	b.n	8018988 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>

0801899c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 801899c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80189a4:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 80189a6:	b08d      	sub	sp, #52	; 0x34
 80189a8:	4604      	mov	r4, r0
 80189aa:	429e      	cmp	r6, r3
 80189ac:	4688      	mov	r8, r1
 80189ae:	d04b      	beq.n	8018a48 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 80189b0:	f100 0526 	add.w	r5, r0, #38	; 0x26
 80189b4:	4628      	mov	r0, r5
 80189b6:	f7f6 fda1 	bl	800f4fc <_ZNK8touchgfx9TypedText7getFontEv>
 80189ba:	4607      	mov	r7, r0
 80189bc:	2800      	cmp	r0, #0
 80189be:	d043      	beq.n	8018a48 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 80189c0:	4628      	mov	r0, r5
 80189c2:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 80189c6:	f7f6 fdcd 	bl	800f564 <_ZNK8touchgfx9TypedText11assertValidEv>
 80189ca:	4b21      	ldr	r3, [pc, #132]	; (8018a50 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb4>)
 80189cc:	4628      	mov	r0, r5
 80189ce:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 80189d2:	681b      	ldr	r3, [r3, #0]
 80189d4:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 80189d8:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 80189dc:	785e      	ldrb	r6, [r3, #1]
 80189de:	f7f6 fda9 	bl	800f534 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80189e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80189e4:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 80189e8:	f3c6 0601 	ubfx	r6, r6, #0, #2
 80189ec:	9309      	str	r3, [sp, #36]	; 0x24
 80189ee:	4b19      	ldr	r3, [pc, #100]	; (8018a54 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb8>)
 80189f0:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 80189f4:	681b      	ldr	r3, [r3, #0]
 80189f6:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 80189fa:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80189fe:	9707      	str	r7, [sp, #28]
 8018a00:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8018a04:	f88d 6020 	strb.w	r6, [sp, #32]
 8018a08:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8018a0c:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 8018a10:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8018a14:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8018a18:	b10a      	cbz	r2, 8018a1e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 8018a1a:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8018a1c:	b906      	cbnz	r6, 8018a20 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x84>
 8018a1e:	689e      	ldr	r6, [r3, #8]
 8018a20:	af05      	add	r7, sp, #20
 8018a22:	4621      	mov	r1, r4
 8018a24:	4638      	mov	r0, r7
 8018a26:	f002 f864 	bl	801aaf2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018a2a:	4628      	mov	r0, r5
 8018a2c:	f7f8 f8ec 	bl	8010c08 <_ZNK8touchgfx9TypedText7getTextEv>
 8018a30:	2300      	movs	r3, #0
 8018a32:	9001      	str	r0, [sp, #4]
 8018a34:	4630      	mov	r0, r6
 8018a36:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8018a3a:	ab07      	add	r3, sp, #28
 8018a3c:	9300      	str	r3, [sp, #0]
 8018a3e:	4643      	mov	r3, r8
 8018a40:	e897 0006 	ldmia.w	r7, {r1, r2}
 8018a44:	f000 fd76 	bl	8019534 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8018a48:	b00d      	add	sp, #52	; 0x34
 8018a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a4e:	bf00      	nop
 8018a50:	2000c644 	.word	0x2000c644
 8018a54:	2000c5b4 	.word	0x2000c5b4

08018a58 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8018a58:	b570      	push	{r4, r5, r6, lr}
 8018a5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018a5e:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8018a60:	4604      	mov	r4, r0
 8018a62:	429a      	cmp	r2, r3
 8018a64:	d021      	beq.n	8018aaa <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 8018a66:	6803      	ldr	r3, [r0, #0]
 8018a68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018a6a:	4798      	blx	r3
 8018a6c:	6823      	ldr	r3, [r4, #0]
 8018a6e:	4605      	mov	r5, r0
 8018a70:	4620      	mov	r0, r4
 8018a72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018a74:	4798      	blx	r3
 8018a76:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8018a7a:	4606      	mov	r6, r0
 8018a7c:	b22d      	sxth	r5, r5
 8018a7e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8018a82:	6823      	ldr	r3, [r4, #0]
 8018a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018a86:	d109      	bne.n	8018a9c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 8018a88:	4629      	mov	r1, r5
 8018a8a:	4620      	mov	r0, r4
 8018a8c:	4798      	blx	r3
 8018a8e:	6823      	ldr	r3, [r4, #0]
 8018a90:	4631      	mov	r1, r6
 8018a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018a94:	4620      	mov	r0, r4
 8018a96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018a9a:	4718      	bx	r3
 8018a9c:	4601      	mov	r1, r0
 8018a9e:	4620      	mov	r0, r4
 8018aa0:	4798      	blx	r3
 8018aa2:	6823      	ldr	r3, [r4, #0]
 8018aa4:	4629      	mov	r1, r5
 8018aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018aa8:	e7f4      	b.n	8018a94 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 8018aaa:	bd70      	pop	{r4, r5, r6, pc}

08018aac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 8018aac:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8018ab0:	84c1      	strh	r1, [r0, #38]	; 0x26
 8018ab2:	b922      	cbnz	r2, 8018abe <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 8018ab4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8018ab8:	b90b      	cbnz	r3, 8018abe <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 8018aba:	f7ff bfcd 	b.w	8018a58 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8018abe:	4770      	bx	lr

08018ac0 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8018ac0:	2300      	movs	r3, #0
 8018ac2:	8003      	strh	r3, [r0, #0]
 8018ac4:	8043      	strh	r3, [r0, #2]
 8018ac6:	8083      	strh	r3, [r0, #4]
 8018ac8:	80c3      	strh	r3, [r0, #6]
 8018aca:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8018ace:	b91b      	cbnz	r3, 8018ad8 <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 8018ad0:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8018ad4:	2bff      	cmp	r3, #255	; 0xff
 8018ad6:	d103      	bne.n	8018ae0 <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 8018ad8:	890b      	ldrh	r3, [r1, #8]
 8018ada:	8083      	strh	r3, [r0, #4]
 8018adc:	894b      	ldrh	r3, [r1, #10]
 8018ade:	80c3      	strh	r3, [r0, #6]
 8018ae0:	4770      	bx	lr
	...

08018ae4 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8018ae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018ae6:	4604      	mov	r4, r0
 8018ae8:	466b      	mov	r3, sp
 8018aea:	6808      	ldr	r0, [r1, #0]
 8018aec:	6849      	ldr	r1, [r1, #4]
 8018aee:	c303      	stmia	r3!, {r0, r1}
 8018af0:	6823      	ldr	r3, [r4, #0]
 8018af2:	4669      	mov	r1, sp
 8018af4:	4620      	mov	r0, r4
 8018af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018af8:	4798      	blx	r3
 8018afa:	4b08      	ldr	r3, [pc, #32]	; (8018b1c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8018afc:	681b      	ldr	r3, [r3, #0]
 8018afe:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8018b02:	b10a      	cbz	r2, 8018b08 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8018b04:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8018b06:	b900      	cbnz	r0, 8018b0a <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8018b08:	6898      	ldr	r0, [r3, #8]
 8018b0a:	6803      	ldr	r3, [r0, #0]
 8018b0c:	4669      	mov	r1, sp
 8018b0e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8018b10:	69dd      	ldr	r5, [r3, #28]
 8018b12:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8018b16:	47a8      	blx	r5
 8018b18:	b003      	add	sp, #12
 8018b1a:	bd30      	pop	{r4, r5, pc}
 8018b1c:	2000c5b4 	.word	0x2000c5b4

08018b20 <_ZN8touchgfx10TiledImage9setOffsetEss>:
 8018b20:	b570      	push	{r4, r5, r6, lr}
 8018b22:	6803      	ldr	r3, [r0, #0]
 8018b24:	4604      	mov	r4, r0
 8018b26:	4615      	mov	r5, r2
 8018b28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018b2a:	4798      	blx	r3
 8018b2c:	6823      	ldr	r3, [r4, #0]
 8018b2e:	4629      	mov	r1, r5
 8018b30:	4620      	mov	r0, r4
 8018b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018b34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018b38:	4718      	bx	r3

08018b3a <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
 8018b3a:	b570      	push	{r4, r5, r6, lr}
 8018b3c:	6803      	ldr	r3, [r0, #0]
 8018b3e:	4604      	mov	r4, r0
 8018b40:	460e      	mov	r6, r1
 8018b42:	4615      	mov	r5, r2
 8018b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018b46:	4798      	blx	r3
 8018b48:	8030      	strh	r0, [r6, #0]
 8018b4a:	6823      	ldr	r3, [r4, #0]
 8018b4c:	4620      	mov	r0, r4
 8018b4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018b50:	4798      	blx	r3
 8018b52:	8028      	strh	r0, [r5, #0]
 8018b54:	bd70      	pop	{r4, r5, r6, pc}

08018b56 <_ZN8touchgfx10TiledImage10getXOffsetEv>:
 8018b56:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	; 0x2a
 8018b5a:	4770      	bx	lr

08018b5c <_ZN8touchgfx10TiledImage10getYOffsetEv>:
 8018b5c:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8018b60:	4770      	bx	lr

08018b62 <_ZN8touchgfx10TiledImageD1Ev>:
 8018b62:	4770      	bx	lr

08018b64 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
 8018b64:	b510      	push	{r4, lr}
 8018b66:	4604      	mov	r4, r0
 8018b68:	f000 fa40 	bl	8018fec <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8018b6c:	6823      	ldr	r3, [r4, #0]
 8018b6e:	4620      	mov	r0, r4
 8018b70:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8018b74:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
 8018b78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018b7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018b7e:	4718      	bx	r3

08018b80 <_ZN8touchgfx10TiledImage10setXOffsetEs>:
 8018b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b82:	f100 0626 	add.w	r6, r0, #38	; 0x26
 8018b86:	4605      	mov	r5, r0
 8018b88:	8541      	strh	r1, [r0, #42]	; 0x2a
 8018b8a:	4630      	mov	r0, r6
 8018b8c:	f003 fd7e 	bl	801c68c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018b90:	b1a0      	cbz	r0, 8018bbc <_ZN8touchgfx10TiledImage10setXOffsetEs+0x3c>
 8018b92:	f9b5 702a 	ldrsh.w	r7, [r5, #42]	; 0x2a
 8018b96:	4630      	mov	r0, r6
 8018b98:	f003 fd78 	bl	801c68c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018b9c:	fb97 f4f0 	sdiv	r4, r7, r0
 8018ba0:	fb04 7410 	mls	r4, r4, r0, r7
 8018ba4:	4630      	mov	r0, r6
 8018ba6:	f003 fd71 	bl	801c68c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018baa:	4404      	add	r4, r0
 8018bac:	4630      	mov	r0, r6
 8018bae:	f003 fd6d 	bl	801c68c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018bb2:	fb94 f3f0 	sdiv	r3, r4, r0
 8018bb6:	fb03 4010 	mls	r0, r3, r0, r4
 8018bba:	8568      	strh	r0, [r5, #42]	; 0x2a
 8018bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018bbe <_ZN8touchgfx10TiledImage10setYOffsetEs>:
 8018bbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018bc0:	f100 0626 	add.w	r6, r0, #38	; 0x26
 8018bc4:	4605      	mov	r5, r0
 8018bc6:	8581      	strh	r1, [r0, #44]	; 0x2c
 8018bc8:	4630      	mov	r0, r6
 8018bca:	f003 fd99 	bl	801c700 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018bce:	b1a0      	cbz	r0, 8018bfa <_ZN8touchgfx10TiledImage10setYOffsetEs+0x3c>
 8018bd0:	f9b5 702c 	ldrsh.w	r7, [r5, #44]	; 0x2c
 8018bd4:	4630      	mov	r0, r6
 8018bd6:	f003 fd93 	bl	801c700 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018bda:	fb97 f4f0 	sdiv	r4, r7, r0
 8018bde:	fb04 7410 	mls	r4, r4, r0, r7
 8018be2:	4630      	mov	r0, r6
 8018be4:	f003 fd8c 	bl	801c700 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018be8:	4404      	add	r4, r0
 8018bea:	4630      	mov	r0, r6
 8018bec:	f003 fd88 	bl	801c700 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018bf0:	fb94 f3f0 	sdiv	r3, r4, r0
 8018bf4:	fb03 4010 	mls	r0, r3, r0, r4
 8018bf8:	85a8      	strh	r0, [r5, #44]	; 0x2c
 8018bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018bfc <_ZN8touchgfx10TiledImageD0Ev>:
 8018bfc:	b510      	push	{r4, lr}
 8018bfe:	4604      	mov	r4, r0
 8018c00:	2130      	movs	r1, #48	; 0x30
 8018c02:	f00d fa67 	bl	80260d4 <_ZdlPvj>
 8018c06:	4620      	mov	r0, r4
 8018c08:	bd10      	pop	{r4, pc}
	...

08018c0c <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:
 8018c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c10:	f100 0b26 	add.w	fp, r0, #38	; 0x26
 8018c14:	b093      	sub	sp, #76	; 0x4c
 8018c16:	4607      	mov	r7, r0
 8018c18:	460e      	mov	r6, r1
 8018c1a:	4658      	mov	r0, fp
 8018c1c:	f003 fd36 	bl	801c68c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018c20:	4605      	mov	r5, r0
 8018c22:	4658      	mov	r0, fp
 8018c24:	f003 fd6c 	bl	801c700 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018c28:	4680      	mov	r8, r0
 8018c2a:	2d00      	cmp	r5, #0
 8018c2c:	f000 80c5 	beq.w	8018dba <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8018c30:	2800      	cmp	r0, #0
 8018c32:	f000 80c2 	beq.w	8018dba <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8018c36:	2300      	movs	r3, #0
 8018c38:	a90e      	add	r1, sp, #56	; 0x38
 8018c3a:	4638      	mov	r0, r7
 8018c3c:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 8018c40:	683b      	ldr	r3, [r7, #0]
 8018c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c44:	4798      	blx	r3
 8018c46:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8018c4a:	f9b6 3000 	ldrsh.w	r3, [r6]
 8018c4e:	88b1      	ldrh	r1, [r6, #4]
 8018c50:	189c      	adds	r4, r3, r2
 8018c52:	440b      	add	r3, r1
 8018c54:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8018c58:	fa02 f383 	sxtah	r3, r2, r3
 8018c5c:	3b01      	subs	r3, #1
 8018c5e:	fb93 f3f5 	sdiv	r3, r3, r5
 8018c62:	fb94 f4f5 	sdiv	r4, r4, r5
 8018c66:	fb13 f305 	smulbb	r3, r3, r5
 8018c6a:	fb14 f405 	smulbb	r4, r4, r5
 8018c6e:	b21b      	sxth	r3, r3
 8018c70:	1aa4      	subs	r4, r4, r2
 8018c72:	930b      	str	r3, [sp, #44]	; 0x2c
 8018c74:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8018c78:	b2a4      	uxth	r4, r4
 8018c7a:	185a      	adds	r2, r3, r1
 8018c7c:	fb92 f2f8 	sdiv	r2, r2, r8
 8018c80:	fb12 f208 	smulbb	r2, r2, r8
 8018c84:	1a52      	subs	r2, r2, r1
 8018c86:	b212      	sxth	r2, r2
 8018c88:	920c      	str	r2, [sp, #48]	; 0x30
 8018c8a:	88f2      	ldrh	r2, [r6, #6]
 8018c8c:	4413      	add	r3, r2
 8018c8e:	fa01 f383 	sxtah	r3, r1, r3
 8018c92:	3b01      	subs	r3, #1
 8018c94:	fb93 f3f8 	sdiv	r3, r3, r8
 8018c98:	fb13 f308 	smulbb	r3, r3, r8
 8018c9c:	b21b      	sxth	r3, r3
 8018c9e:	930d      	str	r3, [sp, #52]	; 0x34
 8018ca0:	1963      	adds	r3, r4, r5
 8018ca2:	fa1f fa83 	uxth.w	sl, r3
 8018ca6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018ca8:	b223      	sxth	r3, r4
 8018caa:	4293      	cmp	r3, r2
 8018cac:	9305      	str	r3, [sp, #20]
 8018cae:	f300 8084 	bgt.w	8018dba <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8018cb2:	fa0f f38a 	sxth.w	r3, sl
 8018cb6:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8018cba:	9309      	str	r3, [sp, #36]	; 0x24
 8018cbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018cbe:	4599      	cmp	r9, r3
 8018cc0:	dd04      	ble.n	8018ccc <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc0>
 8018cc2:	442c      	add	r4, r5
 8018cc4:	eb05 030a 	add.w	r3, r5, sl
 8018cc8:	b2a4      	uxth	r4, r4
 8018cca:	e7ea      	b.n	8018ca2 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x96>
 8018ccc:	f9b6 c000 	ldrsh.w	ip, [r6]
 8018cd0:	88b2      	ldrh	r2, [r6, #4]
 8018cd2:	4462      	add	r2, ip
 8018cd4:	b292      	uxth	r2, r2
 8018cd6:	b213      	sxth	r3, r2
 8018cd8:	9308      	str	r3, [sp, #32]
 8018cda:	fa1f f389 	uxth.w	r3, r9
 8018cde:	eb08 0103 	add.w	r1, r8, r3
 8018ce2:	9307      	str	r3, [sp, #28]
 8018ce4:	b289      	uxth	r1, r1
 8018ce6:	b208      	sxth	r0, r1
 8018ce8:	9006      	str	r0, [sp, #24]
 8018cea:	9805      	ldr	r0, [sp, #20]
 8018cec:	4603      	mov	r3, r0
 8018cee:	9808      	ldr	r0, [sp, #32]
 8018cf0:	4283      	cmp	r3, r0
 8018cf2:	da5e      	bge.n	8018db2 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8018cf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018cf6:	4584      	cmp	ip, r0
 8018cf8:	da5b      	bge.n	8018db2 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8018cfa:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 8018cfe:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 8018d02:	4486      	add	lr, r0
 8018d04:	fa1f fe8e 	uxth.w	lr, lr
 8018d08:	fa0f f38e 	sxth.w	r3, lr
 8018d0c:	4599      	cmp	r9, r3
 8018d0e:	930a      	str	r3, [sp, #40]	; 0x28
 8018d10:	da4f      	bge.n	8018db2 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8018d12:	9b06      	ldr	r3, [sp, #24]
 8018d14:	4298      	cmp	r0, r3
 8018d16:	da4c      	bge.n	8018db2 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8018d18:	9b05      	ldr	r3, [sp, #20]
 8018d1a:	459c      	cmp	ip, r3
 8018d1c:	bfb8      	it	lt
 8018d1e:	469c      	movlt	ip, r3
 8018d20:	4548      	cmp	r0, r9
 8018d22:	9b08      	ldr	r3, [sp, #32]
 8018d24:	bfb8      	it	lt
 8018d26:	4648      	movlt	r0, r9
 8018d28:	f8ad c040 	strh.w	ip, [sp, #64]	; 0x40
 8018d2c:	4699      	mov	r9, r3
 8018d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018d30:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 8018d34:	4599      	cmp	r9, r3
 8018d36:	bfc8      	it	gt
 8018d38:	4652      	movgt	r2, sl
 8018d3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018d3c:	eba2 020c 	sub.w	r2, r2, ip
 8018d40:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 8018d44:	9a06      	ldr	r2, [sp, #24]
 8018d46:	4293      	cmp	r3, r2
 8018d48:	bfd8      	it	le
 8018d4a:	4671      	movle	r1, lr
 8018d4c:	1a09      	subs	r1, r1, r0
 8018d4e:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 8018d52:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8018d56:	9b07      	ldr	r3, [sp, #28]
 8018d58:	1b12      	subs	r2, r2, r4
 8018d5a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8018d5e:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8018d62:	1ad2      	subs	r2, r2, r3
 8018d64:	4b16      	ldr	r3, [pc, #88]	; (8018dc0 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b4>)
 8018d66:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 8018d6a:	681a      	ldr	r2, [r3, #0]
 8018d6c:	f892 1076 	ldrb.w	r1, [r2, #118]	; 0x76
 8018d70:	b109      	cbz	r1, 8018d76 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16a>
 8018d72:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8018d74:	b900      	cbnz	r0, 8018d78 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16c>
 8018d76:	6890      	ldr	r0, [r2, #8]
 8018d78:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8018d7c:	f04f 0c01 	mov.w	ip, #1
 8018d80:	9b07      	ldr	r3, [sp, #28]
 8018d82:	6801      	ldr	r1, [r0, #0]
 8018d84:	4413      	add	r3, r2
 8018d86:	f8cd c008 	str.w	ip, [sp, #8]
 8018d8a:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8018d8e:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 8018d92:	b21b      	sxth	r3, r3
 8018d94:	4422      	add	r2, r4
 8018d96:	f8cd c004 	str.w	ip, [sp, #4]
 8018d9a:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 8018d9e:	b212      	sxth	r2, r2
 8018da0:	f8cd c000 	str.w	ip, [sp]
 8018da4:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8018da8:	4659      	mov	r1, fp
 8018daa:	47c8      	blx	r9
 8018dac:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8018db0:	e784      	b.n	8018cbc <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xb0>
 8018db2:	2300      	movs	r3, #0
 8018db4:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 8018db8:	e7cb      	b.n	8018d52 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x146>
 8018dba:	b013      	add	sp, #76	; 0x4c
 8018dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018dc0:	2000c5b4 	.word	0x2000c5b4

08018dc4 <_ZNK8touchgfx10TiledImage12getSolidRectEv>:
 8018dc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018dc8:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8018dcc:	4606      	mov	r6, r0
 8018dce:	4689      	mov	r9, r1
 8018dd0:	2bff      	cmp	r3, #255	; 0xff
 8018dd2:	d008      	beq.n	8018de6 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
 8018dd4:	2300      	movs	r3, #0
 8018dd6:	8003      	strh	r3, [r0, #0]
 8018dd8:	8043      	strh	r3, [r0, #2]
 8018dda:	8083      	strh	r3, [r0, #4]
 8018ddc:	4630      	mov	r0, r6
 8018dde:	80f3      	strh	r3, [r6, #6]
 8018de0:	b003      	add	sp, #12
 8018de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018de6:	f101 0b26 	add.w	fp, r1, #38	; 0x26
 8018dea:	4668      	mov	r0, sp
 8018dec:	4659      	mov	r1, fp
 8018dee:	f003 fcc1 	bl	801c774 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8018df2:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 8018df6:	4658      	mov	r0, fp
 8018df8:	f9bd 7000 	ldrsh.w	r7, [sp]
 8018dfc:	f9bd a002 	ldrsh.w	sl, [sp, #2]
 8018e00:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
 8018e04:	f003 fc42 	bl	801c68c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018e08:	4284      	cmp	r4, r0
 8018e0a:	d10d      	bne.n	8018e28 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
 8018e0c:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
 8018e10:	4658      	mov	r0, fp
 8018e12:	f003 fc75 	bl	801c700 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018e16:	4580      	cmp	r8, r0
 8018e18:	d12a      	bne.n	8018e70 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xac>
 8018e1a:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
 8018e1e:	8037      	strh	r7, [r6, #0]
 8018e20:	f8a6 a002 	strh.w	sl, [r6, #2]
 8018e24:	80b5      	strh	r5, [r6, #4]
 8018e26:	e7d9      	b.n	8018ddc <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
 8018e28:	f8b9 502a 	ldrh.w	r5, [r9, #42]	; 0x2a
 8018e2c:	4658      	mov	r0, fp
 8018e2e:	f003 fc2d 	bl	801c68c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018e32:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 8018e36:	1b7f      	subs	r7, r7, r5
 8018e38:	b2a3      	uxth	r3, r4
 8018e3a:	b2bd      	uxth	r5, r7
 8018e3c:	b22f      	sxth	r7, r5
 8018e3e:	4428      	add	r0, r5
 8018e40:	2f00      	cmp	r7, #0
 8018e42:	b280      	uxth	r0, r0
 8018e44:	bfb8      	it	lt
 8018e46:	18ed      	addlt	r5, r5, r3
 8018e48:	4403      	add	r3, r0
 8018e4a:	bfac      	ite	ge
 8018e4c:	4625      	movge	r5, r4
 8018e4e:	2700      	movlt	r7, #0
 8018e50:	b29b      	uxth	r3, r3
 8018e52:	bfb8      	it	lt
 8018e54:	b22d      	sxthlt	r5, r5
 8018e56:	b219      	sxth	r1, r3
 8018e58:	bfb8      	it	lt
 8018e5a:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
 8018e5e:	4291      	cmp	r1, r2
 8018e60:	bfc4      	itt	gt
 8018e62:	1a9c      	subgt	r4, r3, r2
 8018e64:	b224      	sxthgt	r4, r4
 8018e66:	42ac      	cmp	r4, r5
 8018e68:	bfc4      	itt	gt
 8018e6a:	b207      	sxthgt	r7, r0
 8018e6c:	4625      	movgt	r5, r4
 8018e6e:	e7cf      	b.n	8018e10 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
 8018e70:	f8b9 402c 	ldrh.w	r4, [r9, #44]	; 0x2c
 8018e74:	4658      	mov	r0, fp
 8018e76:	f003 fc43 	bl	801c700 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018e7a:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
 8018e7e:	ebaa 0404 	sub.w	r4, sl, r4
 8018e82:	fa1f f288 	uxth.w	r2, r8
 8018e86:	b2a4      	uxth	r4, r4
 8018e88:	fa0f fa84 	sxth.w	sl, r4
 8018e8c:	4420      	add	r0, r4
 8018e8e:	f1ba 0f00 	cmp.w	sl, #0
 8018e92:	b280      	uxth	r0, r0
 8018e94:	bfb8      	it	lt
 8018e96:	18a3      	addlt	r3, r4, r2
 8018e98:	4402      	add	r2, r0
 8018e9a:	bfac      	ite	ge
 8018e9c:	4643      	movge	r3, r8
 8018e9e:	f04f 0a00 	movlt.w	sl, #0
 8018ea2:	b292      	uxth	r2, r2
 8018ea4:	bfb8      	it	lt
 8018ea6:	b21b      	sxthlt	r3, r3
 8018ea8:	b214      	sxth	r4, r2
 8018eaa:	bfb8      	it	lt
 8018eac:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8018eb0:	428c      	cmp	r4, r1
 8018eb2:	bfc4      	itt	gt
 8018eb4:	eba2 0801 	subgt.w	r8, r2, r1
 8018eb8:	fa0f f888 	sxthgt.w	r8, r8
 8018ebc:	4543      	cmp	r3, r8
 8018ebe:	bfbc      	itt	lt
 8018ec0:	fa0f fa80 	sxthlt.w	sl, r0
 8018ec4:	4643      	movlt	r3, r8
 8018ec6:	e7aa      	b.n	8018e1e <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>

08018ec8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8018ec8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018ecc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018ed0:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8018ed2:	4604      	mov	r4, r0
 8018ed4:	429a      	cmp	r2, r3
 8018ed6:	d018      	beq.n	8018f0a <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x42>
 8018ed8:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8018edc:	4628      	mov	r0, r5
 8018ede:	f7f6 fb0d 	bl	800f4fc <_ZNK8touchgfx9TypedText7getFontEv>
 8018ee2:	6803      	ldr	r3, [r0, #0]
 8018ee4:	4606      	mov	r6, r0
 8018ee6:	4628      	mov	r0, r5
 8018ee8:	69df      	ldr	r7, [r3, #28]
 8018eea:	f7f6 fb23 	bl	800f534 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8018eee:	4680      	mov	r8, r0
 8018ef0:	4628      	mov	r0, r5
 8018ef2:	f7f7 fe89 	bl	8010c08 <_ZNK8touchgfx9TypedText7getTextEv>
 8018ef6:	2300      	movs	r3, #0
 8018ef8:	4602      	mov	r2, r0
 8018efa:	4641      	mov	r1, r8
 8018efc:	9300      	str	r3, [sp, #0]
 8018efe:	4630      	mov	r0, r6
 8018f00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018f02:	47b8      	blx	r7
 8018f04:	b002      	add	sp, #8
 8018f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f0a:	2000      	movs	r0, #0
 8018f0c:	e7fa      	b.n	8018f04 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x3c>

08018f0e <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 8018f0e:	b570      	push	{r4, r5, r6, lr}
 8018f10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018f14:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8018f16:	4604      	mov	r4, r0
 8018f18:	429a      	cmp	r2, r3
 8018f1a:	d00c      	beq.n	8018f36 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x28>
 8018f1c:	f850 3b26 	ldr.w	r3, [r0], #38
 8018f20:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 8018f22:	f7f7 fe71 	bl	8010c08 <_ZNK8touchgfx9TypedText7getTextEv>
 8018f26:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8018f28:	4601      	mov	r1, r0
 8018f2a:	46ac      	mov	ip, r5
 8018f2c:	4620      	mov	r0, r4
 8018f2e:	2300      	movs	r3, #0
 8018f30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018f34:	4760      	bx	ip
 8018f36:	2000      	movs	r0, #0
 8018f38:	bd70      	pop	{r4, r5, r6, pc}
	...

08018f3c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8018f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018f44:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 8018f46:	b08d      	sub	sp, #52	; 0x34
 8018f48:	4604      	mov	r4, r0
 8018f4a:	429e      	cmp	r6, r3
 8018f4c:	460f      	mov	r7, r1
 8018f4e:	d048      	beq.n	8018fe2 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 8018f50:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8018f54:	4628      	mov	r0, r5
 8018f56:	f7f6 fad1 	bl	800f4fc <_ZNK8touchgfx9TypedText7getFontEv>
 8018f5a:	4680      	mov	r8, r0
 8018f5c:	2800      	cmp	r0, #0
 8018f5e:	d040      	beq.n	8018fe2 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 8018f60:	4628      	mov	r0, r5
 8018f62:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 8018f66:	f7f6 fafd 	bl	800f564 <_ZNK8touchgfx9TypedText11assertValidEv>
 8018f6a:	4b1f      	ldr	r3, [pc, #124]	; (8018fe8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xac>)
 8018f6c:	4628      	mov	r0, r5
 8018f6e:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 8018f72:	681b      	ldr	r3, [r3, #0]
 8018f74:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 8018f78:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8018f7c:	785e      	ldrb	r6, [r3, #1]
 8018f7e:	f7f6 fad9 	bl	800f534 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8018f82:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8018f86:	f3c6 0601 	ubfx	r6, r6, #0, #2
 8018f8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8018f8c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8018f90:	f88d 6020 	strb.w	r6, [sp, #32]
 8018f94:	ae05      	add	r6, sp, #20
 8018f96:	9309      	str	r3, [sp, #36]	; 0x24
 8018f98:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 8018f9c:	f8cd 801c 	str.w	r8, [sp, #28]
 8018fa0:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8018fa4:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8018fa8:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8018fac:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 8018fb0:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8018fb4:	f7f6 ff00 	bl	800fdb8 <_ZN8touchgfx3HAL3lcdEv>
 8018fb8:	4621      	mov	r1, r4
 8018fba:	4680      	mov	r8, r0
 8018fbc:	4630      	mov	r0, r6
 8018fbe:	f001 fd98 	bl	801aaf2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018fc2:	4628      	mov	r0, r5
 8018fc4:	f7f7 fe20 	bl	8010c08 <_ZNK8touchgfx9TypedText7getTextEv>
 8018fc8:	2300      	movs	r3, #0
 8018fca:	9303      	str	r3, [sp, #12]
 8018fcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018fce:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8018fd2:	ab07      	add	r3, sp, #28
 8018fd4:	4640      	mov	r0, r8
 8018fd6:	9300      	str	r3, [sp, #0]
 8018fd8:	463b      	mov	r3, r7
 8018fda:	e896 0006 	ldmia.w	r6, {r1, r2}
 8018fde:	f000 faa9 	bl	8019534 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8018fe2:	b00d      	add	sp, #52	; 0x34
 8018fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fe8:	2000c644 	.word	0x2000c644

08018fec <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8018fec:	b570      	push	{r4, r5, r6, lr}
 8018fee:	4605      	mov	r5, r0
 8018ff0:	880b      	ldrh	r3, [r1, #0]
 8018ff2:	4604      	mov	r4, r0
 8018ff4:	84c3      	strh	r3, [r0, #38]	; 0x26
 8018ff6:	f855 3b26 	ldr.w	r3, [r5], #38
 8018ffa:	4628      	mov	r0, r5
 8018ffc:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8018ffe:	f003 fb45 	bl	801c68c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019002:	b201      	sxth	r1, r0
 8019004:	4620      	mov	r0, r4
 8019006:	47b0      	blx	r6
 8019008:	6823      	ldr	r3, [r4, #0]
 801900a:	4628      	mov	r0, r5
 801900c:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 801900e:	f003 fb77 	bl	801c700 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019012:	b201      	sxth	r1, r0
 8019014:	4620      	mov	r0, r4
 8019016:	47b0      	blx	r6
 8019018:	4628      	mov	r0, r5
 801901a:	f003 fc05 	bl	801c828 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801901e:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 8019022:	bd70      	pop	{r4, r5, r6, pc}

08019024 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8019024:	b510      	push	{r4, lr}
 8019026:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801902a:	4604      	mov	r4, r0
 801902c:	2bff      	cmp	r3, #255	; 0xff
 801902e:	d006      	beq.n	801903e <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8019030:	2300      	movs	r3, #0
 8019032:	8003      	strh	r3, [r0, #0]
 8019034:	8043      	strh	r3, [r0, #2]
 8019036:	8083      	strh	r3, [r0, #4]
 8019038:	80c3      	strh	r3, [r0, #6]
 801903a:	4620      	mov	r0, r4
 801903c:	bd10      	pop	{r4, pc}
 801903e:	3126      	adds	r1, #38	; 0x26
 8019040:	f003 fb98 	bl	801c774 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8019044:	e7f9      	b.n	801903a <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

08019048 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8019048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801904c:	4604      	mov	r4, r0
 801904e:	b088      	sub	sp, #32
 8019050:	2500      	movs	r5, #0
 8019052:	460f      	mov	r7, r1
 8019054:	f854 3b26 	ldr.w	r3, [r4], #38
 8019058:	a904      	add	r1, sp, #16
 801905a:	4606      	mov	r6, r0
 801905c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801905e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8019062:	4798      	blx	r3
 8019064:	4620      	mov	r0, r4
 8019066:	f003 fb11 	bl	801c68c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801906a:	4680      	mov	r8, r0
 801906c:	4620      	mov	r0, r4
 801906e:	f003 fb47 	bl	801c700 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019072:	9506      	str	r5, [sp, #24]
 8019074:	ad06      	add	r5, sp, #24
 8019076:	f8ad 001e 	strh.w	r0, [sp, #30]
 801907a:	4639      	mov	r1, r7
 801907c:	f8ad 801c 	strh.w	r8, [sp, #28]
 8019080:	4628      	mov	r0, r5
 8019082:	f7fd fef5 	bl	8016e70 <_ZN8touchgfx4RectaNERKS0_>
 8019086:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801908a:	b1c3      	cbz	r3, 80190be <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 801908c:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8019090:	b1ab      	cbz	r3, 80190be <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 8019092:	4b0c      	ldr	r3, [pc, #48]	; (80190c4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7c>)
 8019094:	681b      	ldr	r3, [r3, #0]
 8019096:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801909a:	b10a      	cbz	r2, 80190a0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x58>
 801909c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801909e:	b900      	cbnz	r0, 80190a2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5a>
 80190a0:	6898      	ldr	r0, [r3, #8]
 80190a2:	2701      	movs	r7, #1
 80190a4:	6801      	ldr	r1, [r0, #0]
 80190a6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80190aa:	9702      	str	r7, [sp, #8]
 80190ac:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 80190b0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80190b4:	e9cd 5600 	strd	r5, r6, [sp]
 80190b8:	68cd      	ldr	r5, [r1, #12]
 80190ba:	4621      	mov	r1, r4
 80190bc:	47a8      	blx	r5
 80190be:	b008      	add	sp, #32
 80190c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80190c4:	2000c5b4 	.word	0x2000c5b4

080190c8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 80190c8:	4b02      	ldr	r3, [pc, #8]	; (80190d4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 80190ca:	6018      	str	r0, [r3, #0]
 80190cc:	4b02      	ldr	r3, [pc, #8]	; (80190d8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 80190ce:	6019      	str	r1, [r3, #0]
 80190d0:	4770      	bx	lr
 80190d2:	bf00      	nop
 80190d4:	2000c5bc 	.word	0x2000c5bc
 80190d8:	2000c5d0 	.word	0x2000c5d0

080190dc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 80190dc:	b538      	push	{r3, r4, r5, lr}
 80190de:	4c2b      	ldr	r4, [pc, #172]	; (801918c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 80190e0:	4b2b      	ldr	r3, [pc, #172]	; (8019190 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 80190e2:	6821      	ldr	r1, [r4, #0]
 80190e4:	681a      	ldr	r2, [r3, #0]
 80190e6:	4281      	cmp	r1, r0
 80190e8:	4d2a      	ldr	r5, [pc, #168]	; (8019194 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 80190ea:	492b      	ldr	r1, [pc, #172]	; (8019198 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 80190ec:	d108      	bne.n	8019100 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 80190ee:	682b      	ldr	r3, [r5, #0]
 80190f0:	4293      	cmp	r3, r2
 80190f2:	d105      	bne.n	8019100 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 80190f4:	6808      	ldr	r0, [r1, #0]
 80190f6:	280f      	cmp	r0, #15
 80190f8:	bf94      	ite	ls
 80190fa:	2000      	movls	r0, #0
 80190fc:	2001      	movhi	r0, #1
 80190fe:	bd38      	pop	{r3, r4, r5, pc}
 8019100:	4b26      	ldr	r3, [pc, #152]	; (801919c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 8019102:	6020      	str	r0, [r4, #0]
 8019104:	681b      	ldr	r3, [r3, #0]
 8019106:	602a      	str	r2, [r5, #0]
 8019108:	4298      	cmp	r0, r3
 801910a:	d905      	bls.n	8019118 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 801910c:	4b24      	ldr	r3, [pc, #144]	; (80191a0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801910e:	2137      	movs	r1, #55	; 0x37
 8019110:	4a24      	ldr	r2, [pc, #144]	; (80191a4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8019112:	4825      	ldr	r0, [pc, #148]	; (80191a8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 8019114:	f00d f80c 	bl	8026130 <__assert_func>
 8019118:	f010 0403 	ands.w	r4, r0, #3
 801911c:	bf1f      	itttt	ne
 801911e:	f1c4 0504 	rsbne	r5, r4, #4
 8019122:	3b04      	subne	r3, #4
 8019124:	1952      	addne	r2, r2, r5
 8019126:	191b      	addne	r3, r3, r4
 8019128:	4d20      	ldr	r5, [pc, #128]	; (80191ac <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 801912a:	4402      	add	r2, r0
 801912c:	1a1b      	subs	r3, r3, r0
 801912e:	3001      	adds	r0, #1
 8019130:	602a      	str	r2, [r5, #0]
 8019132:	f020 0401 	bic.w	r4, r0, #1
 8019136:	42a3      	cmp	r3, r4
 8019138:	d203      	bcs.n	8019142 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 801913a:	4b19      	ldr	r3, [pc, #100]	; (80191a0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801913c:	214a      	movs	r1, #74	; 0x4a
 801913e:	4a19      	ldr	r2, [pc, #100]	; (80191a4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8019140:	e7e7      	b.n	8019112 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8019142:	f010 0002 	ands.w	r0, r0, #2
 8019146:	bf1f      	itttt	ne
 8019148:	f1c0 0504 	rsbne	r5, r0, #4
 801914c:	1952      	addne	r2, r2, r5
 801914e:	1f05      	subne	r5, r0, #4
 8019150:	195b      	addne	r3, r3, r5
 8019152:	4422      	add	r2, r4
 8019154:	4d16      	ldr	r5, [pc, #88]	; (80191b0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 8019156:	1b1b      	subs	r3, r3, r4
 8019158:	602a      	str	r2, [r5, #0]
 801915a:	429c      	cmp	r4, r3
 801915c:	d903      	bls.n	8019166 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 801915e:	4b10      	ldr	r3, [pc, #64]	; (80191a0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8019160:	215d      	movs	r1, #93	; 0x5d
 8019162:	4a10      	ldr	r2, [pc, #64]	; (80191a4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8019164:	e7d5      	b.n	8019112 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8019166:	b120      	cbz	r0, 8019172 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 8019168:	f1c0 0504 	rsb	r5, r0, #4
 801916c:	3804      	subs	r0, #4
 801916e:	442a      	add	r2, r5
 8019170:	4403      	add	r3, r0
 8019172:	1b1b      	subs	r3, r3, r4
 8019174:	4422      	add	r2, r4
 8019176:	480f      	ldr	r0, [pc, #60]	; (80191b4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 8019178:	2b0f      	cmp	r3, #15
 801917a:	600b      	str	r3, [r1, #0]
 801917c:	6002      	str	r2, [r0, #0]
 801917e:	d803      	bhi.n	8019188 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 8019180:	4b0d      	ldr	r3, [pc, #52]	; (80191b8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 8019182:	2170      	movs	r1, #112	; 0x70
 8019184:	4a07      	ldr	r2, [pc, #28]	; (80191a4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8019186:	e7c4      	b.n	8019112 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8019188:	2001      	movs	r0, #1
 801918a:	e7b8      	b.n	80190fe <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 801918c:	2000c5c4 	.word	0x2000c5c4
 8019190:	2000c5bc 	.word	0x2000c5bc
 8019194:	2000c5cc 	.word	0x2000c5cc
 8019198:	2000c5d4 	.word	0x2000c5d4
 801919c:	2000c5d0 	.word	0x2000c5d0
 80191a0:	08029998 	.word	0x08029998
 80191a4:	08029a60 	.word	0x08029a60
 80191a8:	080299d1 	.word	0x080299d1
 80191ac:	2000c5d8 	.word	0x2000c5d8
 80191b0:	2000c5c8 	.word	0x2000c5c8
 80191b4:	2000c5c0 	.word	0x2000c5c0
 80191b8:	08029a1b 	.word	0x08029a1b

080191bc <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 80191bc:	4b04      	ldr	r3, [pc, #16]	; (80191d0 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 80191be:	6818      	ldr	r0, [r3, #0]
 80191c0:	b120      	cbz	r0, 80191cc <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 80191c2:	4b04      	ldr	r3, [pc, #16]	; (80191d4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 80191c4:	6818      	ldr	r0, [r3, #0]
 80191c6:	3000      	adds	r0, #0
 80191c8:	bf18      	it	ne
 80191ca:	2001      	movne	r0, #1
 80191cc:	4770      	bx	lr
 80191ce:	bf00      	nop
 80191d0:	2000c5bc 	.word	0x2000c5bc
 80191d4:	2000c5d0 	.word	0x2000c5d0

080191d8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 80191d8:	4b01      	ldr	r3, [pc, #4]	; (80191e0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 80191da:	6818      	ldr	r0, [r3, #0]
 80191dc:	4770      	bx	lr
 80191de:	bf00      	nop
 80191e0:	2000c5c4 	.word	0x2000c5c4

080191e4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 80191e4:	4b01      	ldr	r3, [pc, #4]	; (80191ec <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 80191e6:	6818      	ldr	r0, [r3, #0]
 80191e8:	4770      	bx	lr
 80191ea:	bf00      	nop
 80191ec:	2000c5cc 	.word	0x2000c5cc

080191f0 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 80191f0:	4b01      	ldr	r3, [pc, #4]	; (80191f8 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 80191f2:	6818      	ldr	r0, [r3, #0]
 80191f4:	4770      	bx	lr
 80191f6:	bf00      	nop
 80191f8:	2000c5d8 	.word	0x2000c5d8

080191fc <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 80191fc:	4b01      	ldr	r3, [pc, #4]	; (8019204 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 80191fe:	6818      	ldr	r0, [r3, #0]
 8019200:	4770      	bx	lr
 8019202:	bf00      	nop
 8019204:	2000c5c8 	.word	0x2000c5c8

08019208 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8019208:	4b01      	ldr	r3, [pc, #4]	; (8019210 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801920a:	6818      	ldr	r0, [r3, #0]
 801920c:	4770      	bx	lr
 801920e:	bf00      	nop
 8019210:	2000c5c0 	.word	0x2000c5c0

08019214 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8019214:	4b01      	ldr	r3, [pc, #4]	; (801921c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8019216:	6818      	ldr	r0, [r3, #0]
 8019218:	4770      	bx	lr
 801921a:	bf00      	nop
 801921c:	2000c5d4 	.word	0x2000c5d4

08019220 <_ZN8touchgfx3LCD4initEv>:
 8019220:	4770      	bx	lr

08019222 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8019222:	2000      	movs	r0, #0
 8019224:	4770      	bx	lr

08019226 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8019226:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801922a:	b091      	sub	sp, #68	; 0x44
 801922c:	4699      	mov	r9, r3
 801922e:	4617      	mov	r7, r2
 8019230:	2500      	movs	r5, #0
 8019232:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 8019236:	4680      	mov	r8, r0
 8019238:	a80e      	add	r0, sp, #56	; 0x38
 801923a:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 801923c:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 8019240:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 8019244:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8019248:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801924c:	910d      	str	r1, [sp, #52]	; 0x34
 801924e:	950e      	str	r5, [sp, #56]	; 0x38
 8019250:	f000 fe3a 	bl	8019ec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019254:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8019256:	f8d9 6000 	ldr.w	r6, [r9]
 801925a:	6818      	ldr	r0, [r3, #0]
 801925c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801925e:	f9b4 b000 	ldrsh.w	fp, [r4]
 8019262:	1b80      	subs	r0, r0, r6
 8019264:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019268:	eb02 0c06 	add.w	ip, r2, r6
 801926c:	ebab 0e0c 	sub.w	lr, fp, ip
 8019270:	4570      	cmp	r0, lr
 8019272:	f340 80bc 	ble.w	80193ee <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8019276:	88a1      	ldrh	r1, [r4, #4]
 8019278:	4459      	add	r1, fp
 801927a:	b209      	sxth	r1, r1
 801927c:	458c      	cmp	ip, r1
 801927e:	f300 80b6 	bgt.w	80193ee <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8019282:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 8019286:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 801928a:	4283      	cmp	r3, r0
 801928c:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 8019290:	edd9 6a07 	vldr	s13, [r9, #28]
 8019294:	bfa8      	it	ge
 8019296:	4603      	movge	r3, r0
 8019298:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 801929c:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 80192a0:	45e3      	cmp	fp, ip
 80192a2:	ee07 3a90 	vmov	s15, r3
 80192a6:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80192aa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80192ae:	ee25 4a04 	vmul.f32	s8, s10, s8
 80192b2:	ee65 4a24 	vmul.f32	s9, s10, s9
 80192b6:	ee25 5a27 	vmul.f32	s10, s10, s15
 80192ba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80192be:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80192c2:	ee32 1a05 	vadd.f32	s2, s4, s10
 80192c6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80192ca:	ee36 0a84 	vadd.f32	s0, s13, s8
 80192ce:	ee61 1a87 	vmul.f32	s3, s3, s14
 80192d2:	ee22 2a07 	vmul.f32	s4, s4, s14
 80192d6:	f340 808d 	ble.w	80193f4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ce>
 80192da:	fb9e f5f3 	sdiv	r5, lr, r3
 80192de:	ee07 5a10 	vmov	s14, r5
 80192e2:	2d00      	cmp	r5, #0
 80192e4:	fb03 e415 	mls	r4, r3, r5, lr
 80192e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80192ec:	eea7 0a04 	vfma.f32	s0, s14, s8
 80192f0:	eee7 0a24 	vfma.f32	s1, s14, s9
 80192f4:	eea7 1a05 	vfma.f32	s2, s14, s10
 80192f8:	dd12      	ble.n	8019320 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfa>
 80192fa:	ee70 6a44 	vsub.f32	s13, s0, s8
 80192fe:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8019302:	ee31 2a45 	vsub.f32	s4, s2, s10
 8019306:	eef5 6a40 	vcmp.f32	s13, #0.0
 801930a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801930e:	bf14      	ite	ne
 8019310:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8019314:	eeb0 7a67 	vmoveq.f32	s14, s15
 8019318:	ee61 1a87 	vmul.f32	s3, s3, s14
 801931c:	ee22 2a07 	vmul.f32	s4, s4, s14
 8019320:	fb05 f703 	mul.w	r7, r5, r3
 8019324:	1bc0      	subs	r0, r0, r7
 8019326:	443e      	add	r6, r7
 8019328:	1997      	adds	r7, r2, r6
 801932a:	4407      	add	r7, r0
 801932c:	42b9      	cmp	r1, r7
 801932e:	bfbc      	itt	lt
 8019330:	1a88      	sublt	r0, r1, r2
 8019332:	1b80      	sublt	r0, r0, r6
 8019334:	2800      	cmp	r0, #0
 8019336:	dd5a      	ble.n	80193ee <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8019338:	fb90 f1f3 	sdiv	r1, r0, r3
 801933c:	fb03 0211 	mls	r2, r3, r1, r0
 8019340:	b90a      	cbnz	r2, 8019346 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x120>
 8019342:	3901      	subs	r1, #1
 8019344:	461a      	mov	r2, r3
 8019346:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801934a:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 801934e:	44a4      	add	ip, r4
 8019350:	2900      	cmp	r1, #0
 8019352:	bfcc      	ite	gt
 8019354:	469e      	movgt	lr, r3
 8019356:	4696      	movle	lr, r2
 8019358:	fb03 c505 	mla	r5, r3, r5, ip
 801935c:	eef0 6a42 	vmov.f32	s13, s4
 8019360:	eeb0 7a61 	vmov.f32	s14, s3
 8019364:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019368:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801936c:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8019370:	ee21 3a23 	vmul.f32	s6, s2, s7
 8019374:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8019378:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801937c:	ee17 0a90 	vmov	r0, s15
 8019380:	ee73 7a42 	vsub.f32	s15, s6, s4
 8019384:	fb90 f6f3 	sdiv	r6, r0, r3
 8019388:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801938c:	ee17 0a90 	vmov	r0, s15
 8019390:	fb90 f7f3 	sdiv	r7, r0, r3
 8019394:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8019398:	f8d0 8000 	ldr.w	r8, [r0]
 801939c:	900c      	str	r0, [sp, #48]	; 0x30
 801939e:	981c      	ldr	r0, [sp, #112]	; 0x70
 80193a0:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80193a4:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 80193a8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80193ac:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80193b0:	f8cd a020 	str.w	sl, [sp, #32]
 80193b4:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 80193b8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80193ba:	f8d9 9014 	ldr.w	r9, [r9, #20]
 80193be:	9603      	str	r6, [sp, #12]
 80193c0:	44ca      	add	sl, r9
 80193c2:	9506      	str	r5, [sp, #24]
 80193c4:	e9cd 7004 	strd	r7, r0, [sp, #16]
 80193c8:	ee16 0a90 	vmov	r0, s13
 80193cc:	f8cd a01c 	str.w	sl, [sp, #28]
 80193d0:	fb07 0704 	mla	r7, r7, r4, r0
 80193d4:	ee17 0a10 	vmov	r0, s14
 80193d8:	fb06 0604 	mla	r6, r6, r4, r0
 80193dc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80193de:	9702      	str	r7, [sp, #8]
 80193e0:	e9cd 3600 	strd	r3, r6, [sp]
 80193e4:	ebae 0304 	sub.w	r3, lr, r4
 80193e8:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80193ec:	47a8      	blx	r5
 80193ee:	b011      	add	sp, #68	; 0x44
 80193f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193f4:	462c      	mov	r4, r5
 80193f6:	e797      	b.n	8019328 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x102>

080193f8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 80193f8:	b570      	push	{r4, r5, r6, lr}
 80193fa:	4604      	mov	r4, r0
 80193fc:	2500      	movs	r5, #0
 80193fe:	9804      	ldr	r0, [sp, #16]
 8019400:	7223      	strb	r3, [r4, #8]
 8019402:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8019406:	8025      	strh	r5, [r4, #0]
 8019408:	6061      	str	r1, [r4, #4]
 801940a:	7263      	strb	r3, [r4, #9]
 801940c:	60e0      	str	r0, [r4, #12]
 801940e:	8222      	strh	r2, [r4, #16]
 8019410:	8265      	strh	r5, [r4, #18]
 8019412:	82a5      	strh	r5, [r4, #20]
 8019414:	82e5      	strh	r5, [r4, #22]
 8019416:	8325      	strh	r5, [r4, #24]
 8019418:	8365      	strh	r5, [r4, #26]
 801941a:	83a5      	strh	r5, [r4, #28]
 801941c:	77a5      	strb	r5, [r4, #30]
 801941e:	6803      	ldr	r3, [r0, #0]
 8019420:	695b      	ldr	r3, [r3, #20]
 8019422:	4798      	blx	r3
 8019424:	4606      	mov	r6, r0
 8019426:	b1f8      	cbz	r0, 8019468 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8019428:	68e0      	ldr	r0, [r4, #12]
 801942a:	4631      	mov	r1, r6
 801942c:	6803      	ldr	r3, [r0, #0]
 801942e:	68db      	ldr	r3, [r3, #12]
 8019430:	4798      	blx	r3
 8019432:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8019436:	4605      	mov	r5, r0
 8019438:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801943c:	7a83      	ldrb	r3, [r0, #10]
 801943e:	4313      	orrs	r3, r2
 8019440:	83a3      	strh	r3, [r4, #28]
 8019442:	7a63      	ldrb	r3, [r4, #9]
 8019444:	2b04      	cmp	r3, #4
 8019446:	d10f      	bne.n	8019468 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8019448:	68e0      	ldr	r0, [r4, #12]
 801944a:	462a      	mov	r2, r5
 801944c:	4631      	mov	r1, r6
 801944e:	6803      	ldr	r3, [r0, #0]
 8019450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019452:	4798      	blx	r3
 8019454:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8019458:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801945c:	7aab      	ldrb	r3, [r5, #10]
 801945e:	4313      	orrs	r3, r2
 8019460:	4418      	add	r0, r3
 8019462:	8ba3      	ldrh	r3, [r4, #28]
 8019464:	4418      	add	r0, r3
 8019466:	83a0      	strh	r0, [r4, #28]
 8019468:	4620      	mov	r0, r4
 801946a:	bd70      	pop	{r4, r5, r6, pc}

0801946c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801946c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019470:	2400      	movs	r4, #0
 8019472:	b085      	sub	sp, #20
 8019474:	4681      	mov	r9, r0
 8019476:	460f      	mov	r7, r1
 8019478:	4692      	mov	sl, r2
 801947a:	469b      	mov	fp, r3
 801947c:	46a0      	mov	r8, r4
 801947e:	4626      	mov	r6, r4
 8019480:	4554      	cmp	r4, sl
 8019482:	da21      	bge.n	80194c8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8019484:	2300      	movs	r3, #0
 8019486:	463a      	mov	r2, r7
 8019488:	4659      	mov	r1, fp
 801948a:	4648      	mov	r0, r9
 801948c:	9303      	str	r3, [sp, #12]
 801948e:	ab03      	add	r3, sp, #12
 8019490:	f002 fb52 	bl	801bb38 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019494:	4605      	mov	r5, r0
 8019496:	b1b8      	cbz	r0, 80194c8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8019498:	280a      	cmp	r0, #10
 801949a:	d015      	beq.n	80194c8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 801949c:	9a03      	ldr	r2, [sp, #12]
 801949e:	b182      	cbz	r2, 80194c2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x56>
 80194a0:	f992 000d 	ldrsb.w	r0, [r2, #13]
 80194a4:	4641      	mov	r1, r8
 80194a6:	7a93      	ldrb	r3, [r2, #10]
 80194a8:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80194ac:	8895      	ldrh	r5, [r2, #4]
 80194ae:	4303      	orrs	r3, r0
 80194b0:	4638      	mov	r0, r7
 80194b2:	9301      	str	r3, [sp, #4]
 80194b4:	683b      	ldr	r3, [r7, #0]
 80194b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80194b8:	4798      	blx	r3
 80194ba:	9b01      	ldr	r3, [sp, #4]
 80194bc:	4418      	add	r0, r3
 80194be:	4406      	add	r6, r0
 80194c0:	b2b6      	uxth	r6, r6
 80194c2:	3401      	adds	r4, #1
 80194c4:	46a8      	mov	r8, r5
 80194c6:	e7db      	b.n	8019480 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x14>
 80194c8:	4630      	mov	r0, r6
 80194ca:	b005      	add	sp, #20
 80194cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080194d0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80194d0:	2a02      	cmp	r2, #2
 80194d2:	b530      	push	{r4, r5, lr}
 80194d4:	d011      	beq.n	80194fa <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 80194d6:	2a03      	cmp	r2, #3
 80194d8:	d01c      	beq.n	8019514 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 80194da:	2a01      	cmp	r2, #1
 80194dc:	d10c      	bne.n	80194f8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80194de:	888b      	ldrh	r3, [r1, #4]
 80194e0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80194e4:	8801      	ldrh	r1, [r0, #0]
 80194e6:	1a9b      	subs	r3, r3, r2
 80194e8:	8844      	ldrh	r4, [r0, #2]
 80194ea:	1a5b      	subs	r3, r3, r1
 80194ec:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80194f0:	8004      	strh	r4, [r0, #0]
 80194f2:	8043      	strh	r3, [r0, #2]
 80194f4:	8081      	strh	r1, [r0, #4]
 80194f6:	80c2      	strh	r2, [r0, #6]
 80194f8:	bd30      	pop	{r4, r5, pc}
 80194fa:	88cb      	ldrh	r3, [r1, #6]
 80194fc:	88c2      	ldrh	r2, [r0, #6]
 80194fe:	1a9b      	subs	r3, r3, r2
 8019500:	8842      	ldrh	r2, [r0, #2]
 8019502:	1a9b      	subs	r3, r3, r2
 8019504:	888a      	ldrh	r2, [r1, #4]
 8019506:	8881      	ldrh	r1, [r0, #4]
 8019508:	8043      	strh	r3, [r0, #2]
 801950a:	1a52      	subs	r2, r2, r1
 801950c:	8801      	ldrh	r1, [r0, #0]
 801950e:	1a52      	subs	r2, r2, r1
 8019510:	8002      	strh	r2, [r0, #0]
 8019512:	e7f1      	b.n	80194f8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8019514:	88cb      	ldrh	r3, [r1, #6]
 8019516:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801951a:	8841      	ldrh	r1, [r0, #2]
 801951c:	1a9b      	subs	r3, r3, r2
 801951e:	f9b0 5000 	ldrsh.w	r5, [r0]
 8019522:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8019526:	1a5b      	subs	r3, r3, r1
 8019528:	8045      	strh	r5, [r0, #2]
 801952a:	8082      	strh	r2, [r0, #4]
 801952c:	8003      	strh	r3, [r0, #0]
 801952e:	80c4      	strh	r4, [r0, #6]
 8019530:	e7e2      	b.n	80194f8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
	...

08019534 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
 8019534:	b570      	push	{r4, r5, r6, lr}
 8019536:	b086      	sub	sp, #24
 8019538:	ac02      	add	r4, sp, #8
 801953a:	e884 0006 	stmia.w	r4, {r1, r2}
 801953e:	461a      	mov	r2, r3
 8019540:	ab0c      	add	r3, sp, #48	; 0x30
 8019542:	9305      	str	r3, [sp, #20]
 8019544:	4b0a      	ldr	r3, [pc, #40]	; (8019570 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz+0x3c>)
 8019546:	685d      	ldr	r5, [r3, #4]
 8019548:	1069      	asrs	r1, r5, #1
 801954a:	07ed      	lsls	r5, r5, #31
 801954c:	eb00 0601 	add.w	r6, r0, r1
 8019550:	bf46      	itte	mi
 8019552:	681b      	ldrmi	r3, [r3, #0]
 8019554:	5841      	ldrmi	r1, [r0, r1]
 8019556:	681d      	ldrpl	r5, [r3, #0]
 8019558:	4630      	mov	r0, r6
 801955a:	bf48      	it	mi
 801955c:	58cd      	ldrmi	r5, [r1, r3]
 801955e:	4621      	mov	r1, r4
 8019560:	9b05      	ldr	r3, [sp, #20]
 8019562:	9301      	str	r3, [sp, #4]
 8019564:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019566:	9300      	str	r3, [sp, #0]
 8019568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801956a:	47a8      	blx	r5
 801956c:	b006      	add	sp, #24
 801956e:	bd70      	pop	{r4, r5, r6, pc}
 8019570:	2000002c 	.word	0x2000002c

08019574 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8019574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019578:	b09d      	sub	sp, #116	; 0x74
 801957a:	9114      	str	r1, [sp, #80]	; 0x50
 801957c:	9315      	str	r3, [sp, #84]	; 0x54
 801957e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8019580:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019582:	8809      	ldrh	r1, [r1, #0]
 8019584:	889b      	ldrh	r3, [r3, #4]
 8019586:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8019588:	440b      	add	r3, r1
 801958a:	9210      	str	r2, [sp, #64]	; 0x40
 801958c:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 8019590:	b21b      	sxth	r3, r3
 8019592:	900f      	str	r0, [sp, #60]	; 0x3c
 8019594:	f89d b0a4 	ldrb.w	fp, [sp, #164]	; 0xa4
 8019598:	930e      	str	r3, [sp, #56]	; 0x38
 801959a:	6833      	ldr	r3, [r6, #0]
 801959c:	7a59      	ldrb	r1, [r3, #9]
 801959e:	7a1b      	ldrb	r3, [r3, #8]
 80195a0:	9113      	str	r1, [sp, #76]	; 0x4c
 80195a2:	9312      	str	r3, [sp, #72]	; 0x48
 80195a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80195a6:	f9b3 4000 	ldrsh.w	r4, [r3]
 80195aa:	2a00      	cmp	r2, #0
 80195ac:	d059      	beq.n	8019662 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xee>
 80195ae:	7c33      	ldrb	r3, [r6, #16]
 80195b0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80195b2:	2b04      	cmp	r3, #4
 80195b4:	bf14      	ite	ne
 80195b6:	2301      	movne	r3, #1
 80195b8:	2302      	moveq	r3, #2
 80195ba:	4413      	add	r3, r2
 80195bc:	f04f 0800 	mov.w	r8, #0
 80195c0:	930d      	str	r3, [sp, #52]	; 0x34
 80195c2:	4645      	mov	r5, r8
 80195c4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80195c8:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 80195cc:	4293      	cmp	r3, r2
 80195ce:	da75      	bge.n	80196bc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x148>
 80195d0:	2300      	movs	r3, #0
 80195d2:	992b      	ldr	r1, [sp, #172]	; 0xac
 80195d4:	6832      	ldr	r2, [r6, #0]
 80195d6:	931a      	str	r3, [sp, #104]	; 0x68
 80195d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80195da:	428b      	cmp	r3, r1
 80195dc:	db43      	blt.n	8019666 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf2>
 80195de:	6813      	ldr	r3, [r2, #0]
 80195e0:	4610      	mov	r0, r2
 80195e2:	695b      	ldr	r3, [r3, #20]
 80195e4:	4798      	blx	r3
 80195e6:	4681      	mov	r9, r0
 80195e8:	6830      	ldr	r0, [r6, #0]
 80195ea:	aa1b      	add	r2, sp, #108	; 0x6c
 80195ec:	4649      	mov	r1, r9
 80195ee:	6803      	ldr	r3, [r0, #0]
 80195f0:	689f      	ldr	r7, [r3, #8]
 80195f2:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 80195f6:	47b8      	blx	r7
 80195f8:	901a      	str	r0, [sp, #104]	; 0x68
 80195fa:	f64f 6aff 	movw	sl, #65279	; 0xfeff
 80195fe:	45d1      	cmp	r9, sl
 8019600:	d045      	beq.n	801968e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8019602:	f242 070b 	movw	r7, #8203	; 0x200b
 8019606:	45b9      	cmp	r9, r7
 8019608:	d041      	beq.n	801968e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801960a:	f1b9 0f00 	cmp.w	r9, #0
 801960e:	f000 80ee 	beq.w	80197ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 8019612:	f1b9 0f0a 	cmp.w	r9, #10
 8019616:	d057      	beq.n	80196c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8019618:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801961a:	b383      	cbz	r3, 801967e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10a>
 801961c:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8019620:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8019622:	2a00      	cmp	r2, #0
 8019624:	f000 80d2 	beq.w	80197cc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x258>
 8019628:	f1bb 0f00 	cmp.w	fp, #0
 801962c:	d100      	bne.n	8019630 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xbc>
 801962e:	4444      	add	r4, r8
 8019630:	f992 800d 	ldrsb.w	r8, [r2, #13]
 8019634:	f1bb 0f01 	cmp.w	fp, #1
 8019638:	f408 7380 	and.w	r3, r8, #256	; 0x100
 801963c:	f892 800a 	ldrb.w	r8, [r2, #10]
 8019640:	ea48 0803 	orr.w	r8, r8, r3
 8019644:	d128      	bne.n	8019698 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x124>
 8019646:	eba4 0408 	sub.w	r4, r4, r8
 801964a:	2d00      	cmp	r5, #0
 801964c:	d143      	bne.n	80196d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 801964e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019650:	eb08 0304 	add.w	r3, r8, r4
 8019654:	4413      	add	r3, r2
 8019656:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8019658:	f9b2 2000 	ldrsh.w	r2, [r2]
 801965c:	4293      	cmp	r3, r2
 801965e:	da44      	bge.n	80196ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8019660:	e02b      	b.n	80196ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x146>
 8019662:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8019664:	e7aa      	b.n	80195bc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 8019666:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 801966a:	4659      	mov	r1, fp
 801966c:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801966e:	9301      	str	r3, [sp, #4]
 8019670:	ab1b      	add	r3, sp, #108	; 0x6c
 8019672:	9300      	str	r3, [sp, #0]
 8019674:	ab1a      	add	r3, sp, #104	; 0x68
 8019676:	f002 fa93 	bl	801bba0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801967a:	4681      	mov	r9, r0
 801967c:	e7bd      	b.n	80195fa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 801967e:	6830      	ldr	r0, [r6, #0]
 8019680:	6803      	ldr	r3, [r0, #0]
 8019682:	691b      	ldr	r3, [r3, #16]
 8019684:	4798      	blx	r3
 8019686:	4550      	cmp	r0, sl
 8019688:	d001      	beq.n	801968e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801968a:	42b8      	cmp	r0, r7
 801968c:	d1c8      	bne.n	8019620 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 801968e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019690:	464d      	mov	r5, r9
 8019692:	3301      	adds	r3, #1
 8019694:	930c      	str	r3, [sp, #48]	; 0x30
 8019696:	e797      	b.n	80195c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x54>
 8019698:	2d00      	cmp	r5, #0
 801969a:	f000 80aa 	beq.w	80197f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27e>
 801969e:	f1bb 0f00 	cmp.w	fp, #0
 80196a2:	d118      	bne.n	80196d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 80196a4:	6830      	ldr	r0, [r6, #0]
 80196a6:	4629      	mov	r1, r5
 80196a8:	6803      	ldr	r3, [r0, #0]
 80196aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80196ac:	4798      	blx	r3
 80196ae:	4404      	add	r4, r0
 80196b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80196b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80196b4:	1ae3      	subs	r3, r4, r3
 80196b6:	4293      	cmp	r3, r2
 80196b8:	dd17      	ble.n	80196ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 80196ba:	464d      	mov	r5, r9
 80196bc:	2d00      	cmp	r5, #0
 80196be:	f000 8096 	beq.w	80197ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 80196c2:	2d0a      	cmp	r5, #10
 80196c4:	f040 8084 	bne.w	80197d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25c>
 80196c8:	250a      	movs	r5, #10
 80196ca:	fab5 f085 	clz	r0, r5
 80196ce:	0940      	lsrs	r0, r0, #5
 80196d0:	b01d      	add	sp, #116	; 0x74
 80196d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196d6:	6830      	ldr	r0, [r6, #0]
 80196d8:	4629      	mov	r1, r5
 80196da:	6803      	ldr	r3, [r0, #0]
 80196dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80196de:	4798      	blx	r3
 80196e0:	f1bb 0f01 	cmp.w	fp, #1
 80196e4:	eba4 0400 	sub.w	r4, r4, r0
 80196e8:	d0b1      	beq.n	801964e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 80196ea:	981a      	ldr	r0, [sp, #104]	; 0x68
 80196ec:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80196ee:	f990 1009 	ldrsb.w	r1, [r0, #9]
 80196f2:	f9b3 5000 	ldrsh.w	r5, [r3]
 80196f6:	7b43      	ldrb	r3, [r0, #13]
 80196f8:	4421      	add	r1, r4
 80196fa:	015b      	lsls	r3, r3, #5
 80196fc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019700:	7983      	ldrb	r3, [r0, #6]
 8019702:	4313      	orrs	r3, r2
 8019704:	440b      	add	r3, r1
 8019706:	42ab      	cmp	r3, r5
 8019708:	dbc1      	blt.n	801968e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801970a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801970c:	4299      	cmp	r1, r3
 801970e:	dabe      	bge.n	801968e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8019710:	6830      	ldr	r0, [r6, #0]
 8019712:	42a5      	cmp	r5, r4
 8019714:	6803      	ldr	r3, [r0, #0]
 8019716:	bfcc      	ite	gt
 8019718:	1b2d      	subgt	r5, r5, r4
 801971a:	2500      	movle	r5, #0
 801971c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801971e:	bfc8      	it	gt
 8019720:	b2ad      	uxthgt	r5, r5
 8019722:	4798      	blx	r3
 8019724:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8019726:	4935      	ldr	r1, [pc, #212]	; (80197fc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>)
 8019728:	7b5a      	ldrb	r2, [r3, #13]
 801972a:	f893 e008 	ldrb.w	lr, [r3, #8]
 801972e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8019732:	bf18      	it	ne
 8019734:	468c      	movne	ip, r1
 8019736:	9915      	ldr	r1, [sp, #84]	; 0x54
 8019738:	bf08      	it	eq
 801973a:	f04f 0c00 	moveq.w	ip, #0
 801973e:	4408      	add	r0, r1
 8019740:	00d1      	lsls	r1, r2, #3
 8019742:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8019746:	ea41 070e 	orr.w	r7, r1, lr
 801974a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801974c:	ea4c 0707 	orr.w	r7, ip, r7
 8019750:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8019754:	1bc7      	subs	r7, r0, r7
 8019756:	b2bf      	uxth	r7, r7
 8019758:	fa0f fa87 	sxth.w	sl, r7
 801975c:	4551      	cmp	r1, sl
 801975e:	dd33      	ble.n	80197c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x254>
 8019760:	0112      	lsls	r2, r2, #4
 8019762:	79d8      	ldrb	r0, [r3, #7]
 8019764:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8019768:	4302      	orrs	r2, r0
 801976a:	4492      	add	sl, r2
 801976c:	4551      	cmp	r1, sl
 801976e:	dc8e      	bgt.n	801968e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8019770:	1bcf      	subs	r7, r1, r7
 8019772:	468a      	mov	sl, r1
 8019774:	b2bf      	uxth	r7, r7
 8019776:	9317      	str	r3, [sp, #92]	; 0x5c
 8019778:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801977a:	6830      	ldr	r0, [r6, #0]
 801977c:	681a      	ldr	r2, [r3, #0]
 801977e:	6801      	ldr	r1, [r0, #0]
 8019780:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8019782:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8019784:	9311      	str	r3, [sp, #68]	; 0x44
 8019786:	9216      	str	r2, [sp, #88]	; 0x58
 8019788:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801978a:	4788      	blx	r1
 801978c:	79b1      	ldrb	r1, [r6, #6]
 801978e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019790:	910b      	str	r1, [sp, #44]	; 0x2c
 8019792:	7bb1      	ldrb	r1, [r6, #14]
 8019794:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019796:	910a      	str	r1, [sp, #40]	; 0x28
 8019798:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
 801979c:	9109      	str	r1, [sp, #36]	; 0x24
 801979e:	68b1      	ldr	r1, [r6, #8]
 80197a0:	9305      	str	r3, [sp, #20]
 80197a2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80197a4:	9206      	str	r2, [sp, #24]
 80197a6:	e9cd a501 	strd	sl, r5, [sp, #4]
 80197aa:	4425      	add	r5, r4
 80197ac:	e9cd 7303 	strd	r7, r3, [sp, #12]
 80197b0:	b22d      	sxth	r5, r5
 80197b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80197b4:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80197b8:	9500      	str	r5, [sp, #0]
 80197ba:	9914      	ldr	r1, [sp, #80]	; 0x50
 80197bc:	681a      	ldr	r2, [r3, #0]
 80197be:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80197c0:	685b      	ldr	r3, [r3, #4]
 80197c2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80197c4:	47a8      	blx	r5
 80197c6:	e762      	b.n	801968e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80197c8:	2700      	movs	r7, #0
 80197ca:	e7d4      	b.n	8019776 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x202>
 80197cc:	4690      	mov	r8, r2
 80197ce:	e75e      	b.n	801968e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80197d0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80197d2:	3401      	adds	r4, #1
 80197d4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80197d6:	429c      	cmp	r4, r3
 80197d8:	f6bf af77 	bge.w	80196ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 80197dc:	4659      	mov	r1, fp
 80197de:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80197e0:	f002 f96a 	bl	801bab8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80197e4:	4605      	mov	r5, r0
 80197e6:	b110      	cbz	r0, 80197ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 80197e8:	280a      	cmp	r0, #10
 80197ea:	d1f2      	bne.n	80197d2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25e>
 80197ec:	e76c      	b.n	80196c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 80197ee:	2500      	movs	r5, #0
 80197f0:	e76b      	b.n	80196ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 80197f2:	f1bb 0f00 	cmp.w	fp, #0
 80197f6:	f43f af5b 	beq.w	80196b0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x13c>
 80197fa:	e776      	b.n	80196ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 80197fc:	fffffe00 	.word	0xfffffe00

08019800 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8019800:	b530      	push	{r4, r5, lr}
 8019802:	8a44      	ldrh	r4, [r0, #18]
 8019804:	8ac5      	ldrh	r5, [r0, #22]
 8019806:	82c3      	strh	r3, [r0, #22]
 8019808:	442c      	add	r4, r5
 801980a:	1ae4      	subs	r4, r4, r3
 801980c:	8b03      	ldrh	r3, [r0, #24]
 801980e:	8244      	strh	r4, [r0, #18]
 8019810:	8a84      	ldrh	r4, [r0, #20]
 8019812:	4422      	add	r2, r4
 8019814:	440c      	add	r4, r1
 8019816:	1a59      	subs	r1, r3, r1
 8019818:	8342      	strh	r2, [r0, #26]
 801981a:	8284      	strh	r4, [r0, #20]
 801981c:	8301      	strh	r1, [r0, #24]
 801981e:	bd30      	pop	{r4, r5, pc}

08019820 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8019820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019824:	7a45      	ldrb	r5, [r0, #9]
 8019826:	b085      	sub	sp, #20
 8019828:	4604      	mov	r4, r0
 801982a:	4689      	mov	r9, r1
 801982c:	1eeb      	subs	r3, r5, #3
 801982e:	b2db      	uxtb	r3, r3
 8019830:	b329      	cbz	r1, 801987e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 8019832:	2b01      	cmp	r3, #1
 8019834:	d921      	bls.n	801987a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5a>
 8019836:	1e69      	subs	r1, r5, #1
 8019838:	f1d1 0b00 	rsbs	fp, r1, #0
 801983c:	eb4b 0b01 	adc.w	fp, fp, r1
 8019840:	1eaa      	subs	r2, r5, #2
 8019842:	2500      	movs	r5, #0
 8019844:	4253      	negs	r3, r2
 8019846:	9500      	str	r5, [sp, #0]
 8019848:	4153      	adcs	r3, r2
 801984a:	9301      	str	r3, [sp, #4]
 801984c:	2600      	movs	r6, #0
 801984e:	f242 080b 	movw	r8, #8203	; 0x200b
 8019852:	8266      	strh	r6, [r4, #18]
 8019854:	82a6      	strh	r6, [r4, #20]
 8019856:	2300      	movs	r3, #0
 8019858:	68e2      	ldr	r2, [r4, #12]
 801985a:	7a21      	ldrb	r1, [r4, #8]
 801985c:	9303      	str	r3, [sp, #12]
 801985e:	ab03      	add	r3, sp, #12
 8019860:	6860      	ldr	r0, [r4, #4]
 8019862:	8827      	ldrh	r7, [r4, #0]
 8019864:	f002 f968 	bl	801bb38 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019868:	8020      	strh	r0, [r4, #0]
 801986a:	b9b0      	cbnz	r0, 801989a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7a>
 801986c:	8b22      	ldrh	r2, [r4, #24]
 801986e:	2300      	movs	r3, #0
 8019870:	4611      	mov	r1, r2
 8019872:	4620      	mov	r0, r4
 8019874:	f7ff ffc4 	bl	8019800 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8019878:	e062      	b.n	8019940 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 801987a:	468b      	mov	fp, r1
 801987c:	e7e0      	b.n	8019840 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x20>
 801987e:	2b01      	cmp	r3, #1
 8019880:	f105 35ff 	add.w	r5, r5, #4294967295
 8019884:	9101      	str	r1, [sp, #4]
 8019886:	468b      	mov	fp, r1
 8019888:	bf8c      	ite	hi
 801988a:	2300      	movhi	r3, #0
 801988c:	2301      	movls	r3, #1
 801988e:	2d01      	cmp	r5, #1
 8019890:	9300      	str	r3, [sp, #0]
 8019892:	bf8c      	ite	hi
 8019894:	2500      	movhi	r5, #0
 8019896:	2501      	movls	r5, #1
 8019898:	e7d8      	b.n	801984c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x2c>
 801989a:	8ae3      	ldrh	r3, [r4, #22]
 801989c:	280a      	cmp	r0, #10
 801989e:	f103 0301 	add.w	r3, r3, #1
 80198a2:	82e3      	strh	r3, [r4, #22]
 80198a4:	d0e2      	beq.n	801986c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 80198a6:	9a03      	ldr	r2, [sp, #12]
 80198a8:	b972      	cbnz	r2, 80198c8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa8>
 80198aa:	4540      	cmp	r0, r8
 80198ac:	d1d3      	bne.n	8019856 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80198ae:	8823      	ldrh	r3, [r4, #0]
 80198b0:	8b21      	ldrh	r1, [r4, #24]
 80198b2:	2b20      	cmp	r3, #32
 80198b4:	d001      	beq.n	80198ba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9a>
 80198b6:	4543      	cmp	r3, r8
 80198b8:	d11d      	bne.n	80198f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 80198ba:	2f20      	cmp	r7, #32
 80198bc:	d002      	beq.n	80198c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 80198be:	4547      	cmp	r7, r8
 80198c0:	bf18      	it	ne
 80198c2:	460e      	movne	r6, r1
 80198c4:	2001      	movs	r0, #1
 80198c6:	e017      	b.n	80198f8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd8>
 80198c8:	4540      	cmp	r0, r8
 80198ca:	d012      	beq.n	80198f2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd2>
 80198cc:	8893      	ldrh	r3, [r2, #4]
 80198ce:	4639      	mov	r1, r7
 80198d0:	8023      	strh	r3, [r4, #0]
 80198d2:	f992 a00d 	ldrsb.w	sl, [r2, #13]
 80198d6:	f40a 7080 	and.w	r0, sl, #256	; 0x100
 80198da:	f892 a00a 	ldrb.w	sl, [r2, #10]
 80198de:	ea4a 0a00 	orr.w	sl, sl, r0
 80198e2:	68e0      	ldr	r0, [r4, #12]
 80198e4:	6803      	ldr	r3, [r0, #0]
 80198e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80198e8:	4798      	blx	r3
 80198ea:	eb0a 0200 	add.w	r2, sl, r0
 80198ee:	b292      	uxth	r2, r2
 80198f0:	e7dd      	b.n	80198ae <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 80198f2:	2200      	movs	r2, #0
 80198f4:	e7db      	b.n	80198ae <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 80198f6:	2000      	movs	r0, #0
 80198f8:	440a      	add	r2, r1
 80198fa:	8aa3      	ldrh	r3, [r4, #20]
 80198fc:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8019900:	b292      	uxth	r2, r2
 8019902:	8322      	strh	r2, [r4, #24]
 8019904:	4413      	add	r3, r2
 8019906:	f1b9 0f00 	cmp.w	r9, #0
 801990a:	d022      	beq.n	8019952 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x132>
 801990c:	f1bb 0f00 	cmp.w	fp, #0
 8019910:	d102      	bne.n	8019918 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf8>
 8019912:	9901      	ldr	r1, [sp, #4]
 8019914:	b149      	cbz	r1, 801992a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 8019916:	b140      	cbz	r0, 801992a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 8019918:	8ba1      	ldrh	r1, [r4, #28]
 801991a:	4419      	add	r1, r3
 801991c:	458c      	cmp	ip, r1
 801991e:	da12      	bge.n	8019946 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 8019920:	8a61      	ldrh	r1, [r4, #18]
 8019922:	b181      	cbz	r1, 8019946 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 8019924:	4563      	cmp	r3, ip
 8019926:	dd96      	ble.n	8019856 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8019928:	e004      	b.n	8019934 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x114>
 801992a:	4563      	cmp	r3, ip
 801992c:	dd93      	ble.n	8019856 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801992e:	8a63      	ldrh	r3, [r4, #18]
 8019930:	2b00      	cmp	r3, #0
 8019932:	d090      	beq.n	8019856 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8019934:	2301      	movs	r3, #1
 8019936:	8ba2      	ldrh	r2, [r4, #28]
 8019938:	77a3      	strb	r3, [r4, #30]
 801993a:	8b63      	ldrh	r3, [r4, #26]
 801993c:	4413      	add	r3, r2
 801993e:	8363      	strh	r3, [r4, #26]
 8019940:	b005      	add	sp, #20
 8019942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019946:	2300      	movs	r3, #0
 8019948:	4611      	mov	r1, r2
 801994a:	4620      	mov	r0, r4
 801994c:	f7ff ff58 	bl	8019800 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8019950:	e781      	b.n	8019856 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8019952:	4563      	cmp	r3, ip
 8019954:	dd16      	ble.n	8019984 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x164>
 8019956:	9b00      	ldr	r3, [sp, #0]
 8019958:	b113      	cbz	r3, 8019960 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801995a:	2301      	movs	r3, #1
 801995c:	460a      	mov	r2, r1
 801995e:	e787      	b.n	8019870 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 8019960:	2d00      	cmp	r5, #0
 8019962:	f43f af78 	beq.w	8019856 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8019966:	2800      	cmp	r0, #0
 8019968:	f47f af75 	bne.w	8019856 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801996c:	2f20      	cmp	r7, #32
 801996e:	d001      	beq.n	8019974 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x154>
 8019970:	4547      	cmp	r7, r8
 8019972:	d102      	bne.n	801997a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15a>
 8019974:	2301      	movs	r3, #1
 8019976:	4632      	mov	r2, r6
 8019978:	e77b      	b.n	8019872 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 801997a:	8a63      	ldrh	r3, [r4, #18]
 801997c:	2b00      	cmp	r3, #0
 801997e:	f43f af6a 	beq.w	8019856 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8019982:	e7dd      	b.n	8019940 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 8019984:	2800      	cmp	r0, #0
 8019986:	f47f af66 	bne.w	8019856 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801998a:	2f20      	cmp	r7, #32
 801998c:	d002      	beq.n	8019994 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x174>
 801998e:	4547      	cmp	r7, r8
 8019990:	f47f af61 	bne.w	8019856 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8019994:	2301      	movs	r3, #1
 8019996:	4632      	mov	r2, r6
 8019998:	e7d7      	b.n	801994a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12a>

0801999a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801999a:	b570      	push	{r4, r5, r6, lr}
 801999c:	4606      	mov	r6, r0
 801999e:	b08a      	sub	sp, #40	; 0x28
 80199a0:	4615      	mov	r5, r2
 80199a2:	b191      	cbz	r1, 80199ca <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 80199a4:	2401      	movs	r4, #1
 80199a6:	e9cd 3100 	strd	r3, r1, [sp]
 80199aa:	4613      	mov	r3, r2
 80199ac:	4601      	mov	r1, r0
 80199ae:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80199b2:	a802      	add	r0, sp, #8
 80199b4:	f7ff fd20 	bl	80193f8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80199b8:	2100      	movs	r1, #0
 80199ba:	a802      	add	r0, sp, #8
 80199bc:	f7ff ff30 	bl	8019820 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80199c0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80199c4:	b173      	cbz	r3, 80199e4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 80199c6:	3401      	adds	r4, #1
 80199c8:	e7f6      	b.n	80199b8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 80199ca:	2401      	movs	r4, #1
 80199cc:	4611      	mov	r1, r2
 80199ce:	f002 f873 	bl	801bab8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80199d2:	280a      	cmp	r0, #10
 80199d4:	4629      	mov	r1, r5
 80199d6:	4630      	mov	r0, r6
 80199d8:	bf08      	it	eq
 80199da:	3401      	addeq	r4, #1
 80199dc:	f002 f86c 	bl	801bab8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80199e0:	2800      	cmp	r0, #0
 80199e2:	d1f6      	bne.n	80199d2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 80199e4:	b2a0      	uxth	r0, r4
 80199e6:	b00a      	add	sp, #40	; 0x28
 80199e8:	bd70      	pop	{r4, r5, r6, pc}

080199ea <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 80199ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199ee:	b0db      	sub	sp, #364	; 0x16c
 80199f0:	468a      	mov	sl, r1
 80199f2:	461c      	mov	r4, r3
 80199f4:	f8dd b190 	ldr.w	fp, [sp, #400]	; 0x190
 80199f8:	9009      	str	r0, [sp, #36]	; 0x24
 80199fa:	f1bb 0f00 	cmp.w	fp, #0
 80199fe:	f000 80c7 	beq.w	8019b90 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8019a02:	681b      	ldr	r3, [r3, #0]
 8019a04:	2b00      	cmp	r3, #0
 8019a06:	f000 80c3 	beq.w	8019b90 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8019a0a:	7ba3      	ldrb	r3, [r4, #14]
 8019a0c:	2b00      	cmp	r3, #0
 8019a0e:	f000 80bf 	beq.w	8019b90 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8019a12:	af0c      	add	r7, sp, #48	; 0x30
 8019a14:	6810      	ldr	r0, [r2, #0]
 8019a16:	6851      	ldr	r1, [r2, #4]
 8019a18:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 8019a1c:	463b      	mov	r3, r7
 8019a1e:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 8019a22:	c303      	stmia	r3!, {r0, r1}
 8019a24:	2100      	movs	r1, #0
 8019a26:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 8019a2a:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8019a2e:	4638      	mov	r0, r7
 8019a30:	910e      	str	r1, [sp, #56]	; 0x38
 8019a32:	a90e      	add	r1, sp, #56	; 0x38
 8019a34:	79a2      	ldrb	r2, [r4, #6]
 8019a36:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8019a3a:	f7ff fd49 	bl	80194d0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8019a3e:	a90e      	add	r1, sp, #56	; 0x38
 8019a40:	79a2      	ldrb	r2, [r4, #6]
 8019a42:	4608      	mov	r0, r1
 8019a44:	f7ff fd44 	bl	80194d0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8019a48:	4648      	mov	r0, r9
 8019a4a:	f001 fef3 	bl	801b834 <_ZN8touchgfx12TextProviderC1Ev>
 8019a4e:	6820      	ldr	r0, [r4, #0]
 8019a50:	6803      	ldr	r3, [r0, #0]
 8019a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019a54:	4798      	blx	r3
 8019a56:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8019a58:	4603      	mov	r3, r0
 8019a5a:	4659      	mov	r1, fp
 8019a5c:	4648      	mov	r0, r9
 8019a5e:	f001 ff06 	bl	801b86e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019a62:	a82e      	add	r0, sp, #184	; 0xb8
 8019a64:	f001 fee6 	bl	801b834 <_ZN8touchgfx12TextProviderC1Ev>
 8019a68:	f894 8004 	ldrb.w	r8, [r4, #4]
 8019a6c:	f1b8 0f00 	cmp.w	r8, #0
 8019a70:	d009      	beq.n	8019a86 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 8019a72:	6820      	ldr	r0, [r4, #0]
 8019a74:	6803      	ldr	r3, [r0, #0]
 8019a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019a78:	4798      	blx	r3
 8019a7a:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8019a7c:	4603      	mov	r3, r0
 8019a7e:	4659      	mov	r1, fp
 8019a80:	a82e      	add	r0, sp, #184	; 0xb8
 8019a82:	f001 fef4 	bl	801b86e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019a86:	6820      	ldr	r0, [r4, #0]
 8019a88:	6803      	ldr	r3, [r0, #0]
 8019a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019a8c:	4798      	blx	r3
 8019a8e:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019a92:	182e      	adds	r6, r5, r0
 8019a94:	2e00      	cmp	r6, #0
 8019a96:	dd45      	ble.n	8019b24 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 8019a98:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8019a9c:	4283      	cmp	r3, r0
 8019a9e:	db41      	blt.n	8019b24 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 8019aa0:	441d      	add	r5, r3
 8019aa2:	fb95 f5f6 	sdiv	r5, r5, r6
 8019aa6:	a844      	add	r0, sp, #272	; 0x110
 8019aa8:	f001 fec4 	bl	801b834 <_ZN8touchgfx12TextProviderC1Ev>
 8019aac:	7c23      	ldrb	r3, [r4, #16]
 8019aae:	b14b      	cbz	r3, 8019ac4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xda>
 8019ab0:	6820      	ldr	r0, [r4, #0]
 8019ab2:	6803      	ldr	r3, [r0, #0]
 8019ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019ab6:	4798      	blx	r3
 8019ab8:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8019aba:	4603      	mov	r3, r0
 8019abc:	4659      	mov	r1, fp
 8019abe:	a844      	add	r0, sp, #272	; 0x110
 8019ac0:	f001 fed5 	bl	801b86e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019ac4:	7c21      	ldrb	r1, [r4, #16]
 8019ac6:	a810      	add	r0, sp, #64	; 0x40
 8019ac8:	7963      	ldrb	r3, [r4, #5]
 8019aca:	9101      	str	r1, [sp, #4]
 8019acc:	6821      	ldr	r1, [r4, #0]
 8019ace:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8019ad2:	9100      	str	r1, [sp, #0]
 8019ad4:	a944      	add	r1, sp, #272	; 0x110
 8019ad6:	f7ff fc8f 	bl	80193f8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8019ada:	7c23      	ldrb	r3, [r4, #16]
 8019adc:	bb23      	cbnz	r3, 8019b28 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13e>
 8019ade:	fa1f fb86 	uxth.w	fp, r6
 8019ae2:	2d00      	cmp	r5, #0
 8019ae4:	dd57      	ble.n	8019b96 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 8019ae6:	7961      	ldrb	r1, [r4, #5]
 8019ae8:	4648      	mov	r0, r9
 8019aea:	f001 ffe5 	bl	801bab8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019aee:	4603      	mov	r3, r0
 8019af0:	f1b8 0f00 	cmp.w	r8, #0
 8019af4:	d005      	beq.n	8019b02 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x118>
 8019af6:	9008      	str	r0, [sp, #32]
 8019af8:	a82e      	add	r0, sp, #184	; 0xb8
 8019afa:	7961      	ldrb	r1, [r4, #5]
 8019afc:	f001 ffdc 	bl	801bab8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019b00:	9b08      	ldr	r3, [sp, #32]
 8019b02:	2b00      	cmp	r3, #0
 8019b04:	d044      	beq.n	8019b90 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8019b06:	2b0a      	cmp	r3, #10
 8019b08:	d1eb      	bne.n	8019ae2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 8019b0a:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8019b0e:	3d01      	subs	r5, #1
 8019b10:	445b      	add	r3, fp
 8019b12:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8019b16:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8019b1a:	eba3 030b 	sub.w	r3, r3, fp
 8019b1e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8019b22:	e7de      	b.n	8019ae2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 8019b24:	2500      	movs	r5, #0
 8019b26:	e7be      	b.n	8019aa6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xbc>
 8019b28:	0073      	lsls	r3, r6, #1
 8019b2a:	9308      	str	r3, [sp, #32]
 8019b2c:	2d00      	cmp	r5, #0
 8019b2e:	dd32      	ble.n	8019b96 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 8019b30:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8019b34:	a810      	add	r0, sp, #64	; 0x40
 8019b36:	9b08      	ldr	r3, [sp, #32]
 8019b38:	428b      	cmp	r3, r1
 8019b3a:	bfd4      	ite	le
 8019b3c:	2100      	movle	r1, #0
 8019b3e:	2101      	movgt	r1, #1
 8019b40:	f7ff fe6e 	bl	8019820 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8019b44:	f8bd b052 	ldrh.w	fp, [sp, #82]	; 0x52
 8019b48:	f10b 33ff 	add.w	r3, fp, #4294967295
 8019b4c:	fa1f fb83 	uxth.w	fp, r3
 8019b50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019b54:	459b      	cmp	fp, r3
 8019b56:	d00b      	beq.n	8019b70 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8019b58:	7961      	ldrb	r1, [r4, #5]
 8019b5a:	4648      	mov	r0, r9
 8019b5c:	f001 ffac 	bl	801bab8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019b60:	f1b8 0f00 	cmp.w	r8, #0
 8019b64:	d0f0      	beq.n	8019b48 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 8019b66:	7961      	ldrb	r1, [r4, #5]
 8019b68:	a82e      	add	r0, sp, #184	; 0xb8
 8019b6a:	f001 ffa5 	bl	801bab8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019b6e:	e7eb      	b.n	8019b48 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 8019b70:	b2b3      	uxth	r3, r6
 8019b72:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8019b76:	3d01      	subs	r5, #1
 8019b78:	441a      	add	r2, r3
 8019b7a:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 8019b7e:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8019b82:	1ad3      	subs	r3, r2, r3
 8019b84:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8019b88:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8019b8c:	2b00      	cmp	r3, #0
 8019b8e:	d1cd      	bne.n	8019b2c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 8019b90:	b05b      	add	sp, #364	; 0x16c
 8019b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b96:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 8019b9a:	f10d 052e 	add.w	r5, sp, #46	; 0x2e
 8019b9e:	7c23      	ldrb	r3, [r4, #16]
 8019ba0:	2b00      	cmp	r3, #0
 8019ba2:	d05f      	beq.n	8019c64 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x27a>
 8019ba4:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8019ba8:	a810      	add	r0, sp, #64	; 0x40
 8019baa:	458b      	cmp	fp, r1
 8019bac:	bfd4      	ite	le
 8019bae:	2100      	movle	r1, #0
 8019bb0:	2101      	movgt	r1, #1
 8019bb2:	f7ff fe35 	bl	8019820 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8019bb6:	f1b8 0f00 	cmp.w	r8, #0
 8019bba:	d04c      	beq.n	8019c56 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8019bbc:	7c23      	ldrb	r3, [r4, #16]
 8019bbe:	2b00      	cmp	r3, #0
 8019bc0:	d053      	beq.n	8019c6a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x280>
 8019bc2:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 8019bc6:	7922      	ldrb	r2, [r4, #4]
 8019bc8:	2a01      	cmp	r2, #1
 8019bca:	d13c      	bne.n	8019c46 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8019bcc:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 8019bd0:	1ac0      	subs	r0, r0, r3
 8019bd2:	2302      	movs	r3, #2
 8019bd4:	fb90 f0f3 	sdiv	r0, r0, r3
 8019bd8:	b200      	sxth	r0, r0
 8019bda:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8019bde:	4418      	add	r0, r3
 8019be0:	7c23      	ldrb	r3, [r4, #16]
 8019be2:	8028      	strh	r0, [r5, #0]
 8019be4:	2b00      	cmp	r3, #0
 8019be6:	d03a      	beq.n	8019c5e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x274>
 8019be8:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 8019bec:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 8019bf0:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8019bf4:	f8cd 9010 	str.w	r9, [sp, #16]
 8019bf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019bfa:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8019bfe:	2200      	movs	r2, #0
 8019c00:	2100      	movs	r1, #0
 8019c02:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8019c06:	e9cd 5700 	strd	r5, r7, [sp]
 8019c0a:	4652      	mov	r2, sl
 8019c0c:	f7ff fcb2 	bl	8019574 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8019c10:	2800      	cmp	r0, #0
 8019c12:	d1bd      	bne.n	8019b90 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8019c14:	b2b2      	uxth	r2, r6
 8019c16:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8019c1a:	4611      	mov	r1, r2
 8019c1c:	4413      	add	r3, r2
 8019c1e:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8019c22:	b21b      	sxth	r3, r3
 8019c24:	1a52      	subs	r2, r2, r1
 8019c26:	7c21      	ldrb	r1, [r4, #16]
 8019c28:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8019c2c:	b212      	sxth	r2, r2
 8019c2e:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8019c32:	b109      	cbz	r1, 8019c38 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 8019c34:	42b2      	cmp	r2, r6
 8019c36:	dbab      	blt.n	8019b90 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8019c38:	887a      	ldrh	r2, [r7, #2]
 8019c3a:	88f9      	ldrh	r1, [r7, #6]
 8019c3c:	440a      	add	r2, r1
 8019c3e:	b212      	sxth	r2, r2
 8019c40:	4293      	cmp	r3, r2
 8019c42:	ddac      	ble.n	8019b9e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 8019c44:	e7a4      	b.n	8019b90 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8019c46:	2a02      	cmp	r2, #2
 8019c48:	d107      	bne.n	8019c5a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 8019c4a:	7be2      	ldrb	r2, [r4, #15]
 8019c4c:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8019c50:	1a80      	subs	r0, r0, r2
 8019c52:	1ac0      	subs	r0, r0, r3
 8019c54:	e7c0      	b.n	8019bd8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 8019c56:	7be0      	ldrb	r0, [r4, #15]
 8019c58:	e7bf      	b.n	8019bda <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 8019c5a:	2000      	movs	r0, #0
 8019c5c:	e7bd      	b.n	8019bda <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 8019c5e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019c62:	e7c3      	b.n	8019bec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x202>
 8019c64:	f1b8 0f00 	cmp.w	r8, #0
 8019c68:	d0f5      	beq.n	8019c56 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8019c6a:	2300      	movs	r3, #0
 8019c6c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019c70:	6821      	ldr	r1, [r4, #0]
 8019c72:	a82e      	add	r0, sp, #184	; 0xb8
 8019c74:	f7ff fbfa 	bl	801946c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8019c78:	b203      	sxth	r3, r0
 8019c7a:	e7a4      	b.n	8019bc6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>

08019c7c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8019c7c:	2b02      	cmp	r3, #2
 8019c7e:	b510      	push	{r4, lr}
 8019c80:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019c84:	d00b      	beq.n	8019c9e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8019c86:	2b03      	cmp	r3, #3
 8019c88:	d00e      	beq.n	8019ca8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8019c8a:	2b01      	cmp	r3, #1
 8019c8c:	d001      	beq.n	8019c92 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8019c8e:	1860      	adds	r0, r4, r1
 8019c90:	bd10      	pop	{r4, pc}
 8019c92:	8880      	ldrh	r0, [r0, #4]
 8019c94:	4420      	add	r0, r4
 8019c96:	b200      	sxth	r0, r0
 8019c98:	1a80      	subs	r0, r0, r2
 8019c9a:	3801      	subs	r0, #1
 8019c9c:	e7f8      	b.n	8019c90 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8019c9e:	8880      	ldrh	r0, [r0, #4]
 8019ca0:	4420      	add	r0, r4
 8019ca2:	b200      	sxth	r0, r0
 8019ca4:	1a40      	subs	r0, r0, r1
 8019ca6:	e7f8      	b.n	8019c9a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8019ca8:	18a0      	adds	r0, r4, r2
 8019caa:	e7f1      	b.n	8019c90 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08019cac <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8019cac:	2b02      	cmp	r3, #2
 8019cae:	b510      	push	{r4, lr}
 8019cb0:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8019cb4:	d006      	beq.n	8019cc4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8019cb6:	2b03      	cmp	r3, #3
 8019cb8:	d00a      	beq.n	8019cd0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8019cba:	2b01      	cmp	r3, #1
 8019cbc:	bf14      	ite	ne
 8019cbe:	18a0      	addne	r0, r4, r2
 8019cc0:	1860      	addeq	r0, r4, r1
 8019cc2:	bd10      	pop	{r4, pc}
 8019cc4:	88c0      	ldrh	r0, [r0, #6]
 8019cc6:	4420      	add	r0, r4
 8019cc8:	b200      	sxth	r0, r0
 8019cca:	1a80      	subs	r0, r0, r2
 8019ccc:	3801      	subs	r0, #1
 8019cce:	e7f8      	b.n	8019cc2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8019cd0:	88c0      	ldrh	r0, [r0, #6]
 8019cd2:	4420      	add	r0, r4
 8019cd4:	b200      	sxth	r0, r0
 8019cd6:	1a40      	subs	r0, r0, r1
 8019cd8:	e7f8      	b.n	8019ccc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

08019cdc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8019cdc:	4b01      	ldr	r3, [pc, #4]	; (8019ce4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8019cde:	2200      	movs	r2, #0
 8019ce0:	601a      	str	r2, [r3, #0]
 8019ce2:	4770      	bx	lr
 8019ce4:	2000c5dc 	.word	0x2000c5dc

08019ce8 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 8019ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019cea:	1e05      	subs	r5, r0, #0
 8019cec:	f04f 0601 	mov.w	r6, #1
 8019cf0:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8019cf4:	bfba      	itte	lt
 8019cf6:	f04f 37ff 	movlt.w	r7, #4294967295
 8019cfa:	426d      	neglt	r5, r5
 8019cfc:	2701      	movge	r7, #1
 8019cfe:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 8019d02:	f1be 0f00 	cmp.w	lr, #0
 8019d06:	bfbc      	itt	lt
 8019d08:	f1ce 0e00 	rsblt	lr, lr, #0
 8019d0c:	427f      	neglt	r7, r7
 8019d0e:	2c00      	cmp	r4, #0
 8019d10:	fa4e f001 	asr.w	r0, lr, r1
 8019d14:	fa06 f101 	lsl.w	r1, r6, r1
 8019d18:	bfbc      	itt	lt
 8019d1a:	4264      	neglt	r4, r4
 8019d1c:	427f      	neglt	r7, r7
 8019d1e:	3901      	subs	r1, #1
 8019d20:	ea01 010e 	and.w	r1, r1, lr
 8019d24:	434d      	muls	r5, r1
 8019d26:	f8dc 1000 	ldr.w	r1, [ip]
 8019d2a:	fb03 1300 	mla	r3, r3, r0, r1
 8019d2e:	fb95 f1f4 	sdiv	r1, r5, r4
 8019d32:	fb04 5511 	mls	r5, r4, r1, r5
 8019d36:	441d      	add	r5, r3
 8019d38:	fb95 f3f4 	sdiv	r3, r5, r4
 8019d3c:	4419      	add	r1, r3
 8019d3e:	fb04 5413 	mls	r4, r4, r3, r5
 8019d42:	fb02 1000 	mla	r0, r2, r0, r1
 8019d46:	f8cc 4000 	str.w	r4, [ip]
 8019d4a:	4378      	muls	r0, r7
 8019d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08019d50 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8019d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d54:	4c24      	ldr	r4, [pc, #144]	; (8019de8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 8019d56:	b086      	sub	sp, #24
 8019d58:	4605      	mov	r5, r0
 8019d5a:	6807      	ldr	r7, [r0, #0]
 8019d5c:	69a3      	ldr	r3, [r4, #24]
 8019d5e:	b92b      	cbnz	r3, 8019d6c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 8019d60:	6840      	ldr	r0, [r0, #4]
 8019d62:	e9c5 7000 	strd	r7, r0, [r5]
 8019d66:	b006      	add	sp, #24
 8019d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d6c:	f04f 0802 	mov.w	r8, #2
 8019d70:	68a2      	ldr	r2, [r4, #8]
 8019d72:	ae06      	add	r6, sp, #24
 8019d74:	6820      	ldr	r0, [r4, #0]
 8019d76:	fb93 f1f8 	sdiv	r1, r3, r8
 8019d7a:	440a      	add	r2, r1
 8019d7c:	69e1      	ldr	r1, [r4, #28]
 8019d7e:	f846 2d04 	str.w	r2, [r6, #-4]!
 8019d82:	9700      	str	r7, [sp, #0]
 8019d84:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8019d86:	e9cd 3601 	strd	r3, r6, [sp, #4]
 8019d8a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019d8c:	f7ff ffac 	bl	8019ce8 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8019d90:	69a3      	ldr	r3, [r4, #24]
 8019d92:	4607      	mov	r7, r0
 8019d94:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8019d96:	9301      	str	r3, [sp, #4]
 8019d98:	686b      	ldr	r3, [r5, #4]
 8019d9a:	6a21      	ldr	r1, [r4, #32]
 8019d9c:	9300      	str	r3, [sp, #0]
 8019d9e:	9602      	str	r6, [sp, #8]
 8019da0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019da2:	6860      	ldr	r0, [r4, #4]
 8019da4:	f7ff ffa0 	bl	8019ce8 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8019da8:	69a2      	ldr	r2, [r4, #24]
 8019daa:	6963      	ldr	r3, [r4, #20]
 8019dac:	4407      	add	r7, r0
 8019dae:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8019db0:	68e0      	ldr	r0, [r4, #12]
 8019db2:	fb92 f8f8 	sdiv	r8, r2, r8
 8019db6:	4443      	add	r3, r8
 8019db8:	9305      	str	r3, [sp, #20]
 8019dba:	682b      	ldr	r3, [r5, #0]
 8019dbc:	e9cd 2601 	strd	r2, r6, [sp, #4]
 8019dc0:	9300      	str	r3, [sp, #0]
 8019dc2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8019dc4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019dc6:	f7ff ff8f 	bl	8019ce8 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8019dca:	69a3      	ldr	r3, [r4, #24]
 8019dcc:	4680      	mov	r8, r0
 8019dce:	9602      	str	r6, [sp, #8]
 8019dd0:	9301      	str	r3, [sp, #4]
 8019dd2:	686b      	ldr	r3, [r5, #4]
 8019dd4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8019dd6:	9300      	str	r3, [sp, #0]
 8019dd8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8019dda:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8019ddc:	6920      	ldr	r0, [r4, #16]
 8019dde:	f7ff ff83 	bl	8019ce8 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8019de2:	4440      	add	r0, r8
 8019de4:	e7bd      	b.n	8019d62 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 8019de6:	bf00      	nop
 8019de8:	2000c5e0 	.word	0x2000c5e0

08019dec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8019dec:	4b07      	ldr	r3, [pc, #28]	; (8019e0c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8019dee:	b510      	push	{r4, lr}
 8019df0:	781b      	ldrb	r3, [r3, #0]
 8019df2:	2b01      	cmp	r3, #1
 8019df4:	d108      	bne.n	8019e08 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8019df6:	4b06      	ldr	r3, [pc, #24]	; (8019e10 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8019df8:	880c      	ldrh	r4, [r1, #0]
 8019dfa:	881b      	ldrh	r3, [r3, #0]
 8019dfc:	f9b0 2000 	ldrsh.w	r2, [r0]
 8019e00:	3b01      	subs	r3, #1
 8019e02:	1b1b      	subs	r3, r3, r4
 8019e04:	8003      	strh	r3, [r0, #0]
 8019e06:	800a      	strh	r2, [r1, #0]
 8019e08:	bd10      	pop	{r4, pc}
 8019e0a:	bf00      	nop
 8019e0c:	2000c5ac 	.word	0x2000c5ac
 8019e10:	2000c5b0 	.word	0x2000c5b0

08019e14 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8019e14:	4b0a      	ldr	r3, [pc, #40]	; (8019e40 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8019e16:	b510      	push	{r4, lr}
 8019e18:	781b      	ldrb	r3, [r3, #0]
 8019e1a:	2b01      	cmp	r3, #1
 8019e1c:	d10e      	bne.n	8019e3c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8019e1e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8019e22:	8843      	ldrh	r3, [r0, #2]
 8019e24:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019e28:	18ca      	adds	r2, r1, r3
 8019e2a:	4b06      	ldr	r3, [pc, #24]	; (8019e44 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8019e2c:	8044      	strh	r4, [r0, #2]
 8019e2e:	881b      	ldrh	r3, [r3, #0]
 8019e30:	1a9b      	subs	r3, r3, r2
 8019e32:	8003      	strh	r3, [r0, #0]
 8019e34:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019e38:	8081      	strh	r1, [r0, #4]
 8019e3a:	80c3      	strh	r3, [r0, #6]
 8019e3c:	bd10      	pop	{r4, pc}
 8019e3e:	bf00      	nop
 8019e40:	2000c5ac 	.word	0x2000c5ac
 8019e44:	2000c5a8 	.word	0x2000c5a8

08019e48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8019e48:	4b07      	ldr	r3, [pc, #28]	; (8019e68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8019e4a:	b510      	push	{r4, lr}
 8019e4c:	781b      	ldrb	r3, [r3, #0]
 8019e4e:	2b01      	cmp	r3, #1
 8019e50:	d108      	bne.n	8019e64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8019e52:	f9b1 3000 	ldrsh.w	r3, [r1]
 8019e56:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019e5a:	8003      	strh	r3, [r0, #0]
 8019e5c:	8893      	ldrh	r3, [r2, #4]
 8019e5e:	3b01      	subs	r3, #1
 8019e60:	1b1b      	subs	r3, r3, r4
 8019e62:	800b      	strh	r3, [r1, #0]
 8019e64:	bd10      	pop	{r4, pc}
 8019e66:	bf00      	nop
 8019e68:	2000c5ac 	.word	0x2000c5ac

08019e6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8019e6c:	4b08      	ldr	r3, [pc, #32]	; (8019e90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8019e6e:	b513      	push	{r0, r1, r4, lr}
 8019e70:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019e74:	2400      	movs	r4, #0
 8019e76:	4b07      	ldr	r3, [pc, #28]	; (8019e94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 8019e78:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019e7c:	466a      	mov	r2, sp
 8019e7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019e82:	9400      	str	r4, [sp, #0]
 8019e84:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019e88:	f7ff ffde 	bl	8019e48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8019e8c:	b002      	add	sp, #8
 8019e8e:	bd10      	pop	{r4, pc}
 8019e90:	2000c5a8 	.word	0x2000c5a8
 8019e94:	2000c5aa 	.word	0x2000c5aa

08019e98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8019e98:	4b0a      	ldr	r3, [pc, #40]	; (8019ec4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8019e9a:	460a      	mov	r2, r1
 8019e9c:	b510      	push	{r4, lr}
 8019e9e:	781b      	ldrb	r3, [r3, #0]
 8019ea0:	2b01      	cmp	r3, #1
 8019ea2:	d10d      	bne.n	8019ec0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8019ea4:	8881      	ldrh	r1, [r0, #4]
 8019ea6:	8803      	ldrh	r3, [r0, #0]
 8019ea8:	440b      	add	r3, r1
 8019eaa:	4601      	mov	r1, r0
 8019eac:	3b01      	subs	r3, #1
 8019eae:	f821 3b02 	strh.w	r3, [r1], #2
 8019eb2:	f7ff ffc9 	bl	8019e48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8019eb6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019eba:	88c2      	ldrh	r2, [r0, #6]
 8019ebc:	80c3      	strh	r3, [r0, #6]
 8019ebe:	8082      	strh	r2, [r0, #4]
 8019ec0:	bd10      	pop	{r4, pc}
 8019ec2:	bf00      	nop
 8019ec4:	2000c5ac 	.word	0x2000c5ac

08019ec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8019ec8:	4b09      	ldr	r3, [pc, #36]	; (8019ef0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8019eca:	b507      	push	{r0, r1, r2, lr}
 8019ecc:	2100      	movs	r1, #0
 8019ece:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019ed2:	4b08      	ldr	r3, [pc, #32]	; (8019ef4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 8019ed4:	9100      	str	r1, [sp, #0]
 8019ed6:	4669      	mov	r1, sp
 8019ed8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019edc:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019ee0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019ee4:	f7ff ffd8 	bl	8019e98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019ee8:	b003      	add	sp, #12
 8019eea:	f85d fb04 	ldr.w	pc, [sp], #4
 8019eee:	bf00      	nop
 8019ef0:	2000c5a8 	.word	0x2000c5a8
 8019ef4:	2000c5aa 	.word	0x2000c5aa

08019ef8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8019ef8:	4b03      	ldr	r3, [pc, #12]	; (8019f08 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8019efa:	6818      	ldr	r0, [r3, #0]
 8019efc:	b110      	cbz	r0, 8019f04 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8019efe:	6803      	ldr	r3, [r0, #0]
 8019f00:	699b      	ldr	r3, [r3, #24]
 8019f02:	4718      	bx	r3
 8019f04:	4770      	bx	lr
 8019f06:	bf00      	nop
 8019f08:	2000c630 	.word	0x2000c630

08019f0c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8019f0c:	4770      	bx	lr
	...

08019f10 <_ZN8touchgfx11Application4drawEv>:
 8019f10:	4b09      	ldr	r3, [pc, #36]	; (8019f38 <_ZN8touchgfx11Application4drawEv+0x28>)
 8019f12:	b507      	push	{r0, r1, r2, lr}
 8019f14:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019f18:	2100      	movs	r1, #0
 8019f1a:	4b08      	ldr	r3, [pc, #32]	; (8019f3c <_ZN8touchgfx11Application4drawEv+0x2c>)
 8019f1c:	9100      	str	r1, [sp, #0]
 8019f1e:	4669      	mov	r1, sp
 8019f20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019f24:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019f28:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019f2c:	6803      	ldr	r3, [r0, #0]
 8019f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019f30:	4798      	blx	r3
 8019f32:	b003      	add	sp, #12
 8019f34:	f85d fb04 	ldr.w	pc, [sp], #4
 8019f38:	2000c5a8 	.word	0x2000c5a8
 8019f3c:	2000c5aa 	.word	0x2000c5aa

08019f40 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8019f40:	4b03      	ldr	r3, [pc, #12]	; (8019f50 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8019f42:	6818      	ldr	r0, [r3, #0]
 8019f44:	b110      	cbz	r0, 8019f4c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8019f46:	6803      	ldr	r3, [r0, #0]
 8019f48:	69db      	ldr	r3, [r3, #28]
 8019f4a:	4718      	bx	r3
 8019f4c:	4770      	bx	lr
 8019f4e:	bf00      	nop
 8019f50:	2000c630 	.word	0x2000c630

08019f54 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8019f54:	4b03      	ldr	r3, [pc, #12]	; (8019f64 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8019f56:	6818      	ldr	r0, [r3, #0]
 8019f58:	b110      	cbz	r0, 8019f60 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8019f5a:	6803      	ldr	r3, [r0, #0]
 8019f5c:	6a1b      	ldr	r3, [r3, #32]
 8019f5e:	4718      	bx	r3
 8019f60:	4770      	bx	lr
 8019f62:	bf00      	nop
 8019f64:	2000c630 	.word	0x2000c630

08019f68 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8019f68:	4b03      	ldr	r3, [pc, #12]	; (8019f78 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8019f6a:	6818      	ldr	r0, [r3, #0]
 8019f6c:	b110      	cbz	r0, 8019f74 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8019f6e:	6803      	ldr	r3, [r0, #0]
 8019f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019f72:	4718      	bx	r3
 8019f74:	4770      	bx	lr
 8019f76:	bf00      	nop
 8019f78:	2000c630 	.word	0x2000c630

08019f7c <_ZN8touchgfx11Application15handleTickEventEv>:
 8019f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019f80:	4d3a      	ldr	r5, [pc, #232]	; (801a06c <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 8019f82:	4604      	mov	r4, r0
 8019f84:	6828      	ldr	r0, [r5, #0]
 8019f86:	b140      	cbz	r0, 8019f9a <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 8019f88:	7a03      	ldrb	r3, [r0, #8]
 8019f8a:	b933      	cbnz	r3, 8019f9a <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 8019f8c:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 8019f90:	6803      	ldr	r3, [r0, #0]
 8019f92:	689b      	ldr	r3, [r3, #8]
 8019f94:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019f98:	4718      	bx	r3
 8019f9a:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 8019f9e:	b97b      	cbnz	r3, 8019fc0 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8019fa0:	b170      	cbz	r0, 8019fc0 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8019fa2:	7a03      	ldrb	r3, [r0, #8]
 8019fa4:	b163      	cbz	r3, 8019fc0 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8019fa6:	4b32      	ldr	r3, [pc, #200]	; (801a070 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 8019fa8:	6818      	ldr	r0, [r3, #0]
 8019faa:	b110      	cbz	r0, 8019fb2 <_ZN8touchgfx11Application15handleTickEventEv+0x36>
 8019fac:	6803      	ldr	r3, [r0, #0]
 8019fae:	691b      	ldr	r3, [r3, #16]
 8019fb0:	4798      	blx	r3
 8019fb2:	6828      	ldr	r0, [r5, #0]
 8019fb4:	6803      	ldr	r3, [r0, #0]
 8019fb6:	68db      	ldr	r3, [r3, #12]
 8019fb8:	4798      	blx	r3
 8019fba:	2301      	movs	r3, #1
 8019fbc:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 8019fc0:	2500      	movs	r5, #0
 8019fc2:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8019fc6:	42a8      	cmp	r0, r5
 8019fc8:	dd0c      	ble.n	8019fe4 <_ZN8touchgfx11Application15handleTickEventEv+0x68>
 8019fca:	1963      	adds	r3, r4, r5
 8019fcc:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8019fd0:	b132      	cbz	r2, 8019fe0 <_ZN8touchgfx11Application15handleTickEventEv+0x64>
 8019fd2:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8019fd6:	4413      	add	r3, r2
 8019fd8:	6858      	ldr	r0, [r3, #4]
 8019fda:	6803      	ldr	r3, [r0, #0]
 8019fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019fde:	4798      	blx	r3
 8019fe0:	3501      	adds	r5, #1
 8019fe2:	e7ee      	b.n	8019fc2 <_ZN8touchgfx11Application15handleTickEventEv+0x46>
 8019fe4:	f5c4 467f 	rsb	r6, r4, #65280	; 0xff00
 8019fe8:	3801      	subs	r0, #1
 8019fea:	f04f 0c00 	mov.w	ip, #0
 8019fee:	3678      	adds	r6, #120	; 0x78
 8019ff0:	1c43      	adds	r3, r0, #1
 8019ff2:	d033      	beq.n	801a05c <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 8019ff4:	1823      	adds	r3, r4, r0
 8019ff6:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8019ffa:	bb6a      	cbnz	r2, 801a058 <_ZN8touchgfx11Application15handleTickEventEv+0xdc>
 8019ffc:	b281      	uxth	r1, r0
 8019ffe:	1d25      	adds	r5, r4, #4
 801a000:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 801a004:	f8d3 9004 	ldr.w	r9, [r3, #4]
 801a008:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 801a00c:	4293      	cmp	r3, r2
 801a00e:	dc0a      	bgt.n	801a026 <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 801a010:	f101 0288 	add.w	r2, r1, #136	; 0x88
 801a014:	4422      	add	r2, r4
 801a016:	18b1      	adds	r1, r6, r2
 801a018:	b289      	uxth	r1, r1
 801a01a:	428b      	cmp	r3, r1
 801a01c:	d919      	bls.n	801a052 <_ZN8touchgfx11Application15handleTickEventEv+0xd6>
 801a01e:	7851      	ldrb	r1, [r2, #1]
 801a020:	f802 1b01 	strb.w	r1, [r2], #1
 801a024:	e7f7      	b.n	801a016 <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 801a026:	682f      	ldr	r7, [r5, #0]
 801a028:	f105 0804 	add.w	r8, r5, #4
 801a02c:	45b9      	cmp	r9, r7
 801a02e:	d10d      	bne.n	801a04c <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 801a030:	4696      	mov	lr, r2
 801a032:	f1be 0f1e 	cmp.w	lr, #30
 801a036:	dc06      	bgt.n	801a046 <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 801a038:	f10e 0e01 	add.w	lr, lr, #1
 801a03c:	686f      	ldr	r7, [r5, #4]
 801a03e:	4573      	cmp	r3, lr
 801a040:	f845 7b04 	str.w	r7, [r5], #4
 801a044:	dcf5      	bgt.n	801a032 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 801a046:	3b01      	subs	r3, #1
 801a048:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 801a04c:	3201      	adds	r2, #1
 801a04e:	4645      	mov	r5, r8
 801a050:	e7da      	b.n	801a008 <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 801a052:	4423      	add	r3, r4
 801a054:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
 801a058:	3801      	subs	r0, #1
 801a05a:	e7c9      	b.n	8019ff0 <_ZN8touchgfx11Application15handleTickEventEv+0x74>
 801a05c:	4b04      	ldr	r3, [pc, #16]	; (801a070 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801a05e:	6818      	ldr	r0, [r3, #0]
 801a060:	b110      	cbz	r0, 801a068 <_ZN8touchgfx11Application15handleTickEventEv+0xec>
 801a062:	6803      	ldr	r3, [r0, #0]
 801a064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a066:	e795      	b.n	8019f94 <_ZN8touchgfx11Application15handleTickEventEv+0x18>
 801a068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a06c:	2000c634 	.word	0x2000c634
 801a070:	2000c630 	.word	0x2000c630

0801a074 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801a074:	b570      	push	{r4, r5, r6, lr}
 801a076:	4606      	mov	r6, r0
 801a078:	460c      	mov	r4, r1
 801a07a:	b929      	cbnz	r1, 801a088 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801a07c:	4b0c      	ldr	r3, [pc, #48]	; (801a0b0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801a07e:	2164      	movs	r1, #100	; 0x64
 801a080:	4a0c      	ldr	r2, [pc, #48]	; (801a0b4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801a082:	480d      	ldr	r0, [pc, #52]	; (801a0b8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801a084:	f00c f854 	bl	8026130 <__assert_func>
 801a088:	2300      	movs	r3, #0
 801a08a:	4d0c      	ldr	r5, [pc, #48]	; (801a0bc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801a08c:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801a090:	6828      	ldr	r0, [r5, #0]
 801a092:	b110      	cbz	r0, 801a09a <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801a094:	6803      	ldr	r3, [r0, #0]
 801a096:	695b      	ldr	r3, [r3, #20]
 801a098:	4798      	blx	r3
 801a09a:	602c      	str	r4, [r5, #0]
 801a09c:	4620      	mov	r0, r4
 801a09e:	6823      	ldr	r3, [r4, #0]
 801a0a0:	68db      	ldr	r3, [r3, #12]
 801a0a2:	4798      	blx	r3
 801a0a4:	6833      	ldr	r3, [r6, #0]
 801a0a6:	4630      	mov	r0, r6
 801a0a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a0aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a0ae:	4718      	bx	r3
 801a0b0:	08029afc 	.word	0x08029afc
 801a0b4:	08029bc4 	.word	0x08029bc4
 801a0b8:	08029b06 	.word	0x08029b06
 801a0bc:	2000c630 	.word	0x2000c630

0801a0c0 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801a0c0:	b510      	push	{r4, lr}
 801a0c2:	f9b1 4000 	ldrsh.w	r4, [r1]
 801a0c6:	888a      	ldrh	r2, [r1, #4]
 801a0c8:	f9b0 3000 	ldrsh.w	r3, [r0]
 801a0cc:	4422      	add	r2, r4
 801a0ce:	b212      	sxth	r2, r2
 801a0d0:	4293      	cmp	r3, r2
 801a0d2:	da15      	bge.n	801a100 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a0d4:	8882      	ldrh	r2, [r0, #4]
 801a0d6:	4413      	add	r3, r2
 801a0d8:	b21b      	sxth	r3, r3
 801a0da:	429c      	cmp	r4, r3
 801a0dc:	da10      	bge.n	801a100 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a0de:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801a0e2:	88c9      	ldrh	r1, [r1, #6]
 801a0e4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801a0e8:	4419      	add	r1, r3
 801a0ea:	b209      	sxth	r1, r1
 801a0ec:	428a      	cmp	r2, r1
 801a0ee:	da07      	bge.n	801a100 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a0f0:	88c0      	ldrh	r0, [r0, #6]
 801a0f2:	4410      	add	r0, r2
 801a0f4:	b200      	sxth	r0, r0
 801a0f6:	4283      	cmp	r3, r0
 801a0f8:	bfac      	ite	ge
 801a0fa:	2000      	movge	r0, #0
 801a0fc:	2001      	movlt	r0, #1
 801a0fe:	bd10      	pop	{r4, pc}
 801a100:	2000      	movs	r0, #0
 801a102:	e7fc      	b.n	801a0fe <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801a104 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801a104:	b570      	push	{r4, r5, r6, lr}
 801a106:	f9b1 4000 	ldrsh.w	r4, [r1]
 801a10a:	f9b0 5000 	ldrsh.w	r5, [r0]
 801a10e:	42ac      	cmp	r4, r5
 801a110:	db18      	blt.n	801a144 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801a112:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801a116:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801a11a:	429a      	cmp	r2, r3
 801a11c:	db12      	blt.n	801a144 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801a11e:	8886      	ldrh	r6, [r0, #4]
 801a120:	4435      	add	r5, r6
 801a122:	888e      	ldrh	r6, [r1, #4]
 801a124:	4434      	add	r4, r6
 801a126:	b22d      	sxth	r5, r5
 801a128:	b224      	sxth	r4, r4
 801a12a:	42a5      	cmp	r5, r4
 801a12c:	db0a      	blt.n	801a144 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801a12e:	88c0      	ldrh	r0, [r0, #6]
 801a130:	4418      	add	r0, r3
 801a132:	88cb      	ldrh	r3, [r1, #6]
 801a134:	441a      	add	r2, r3
 801a136:	b200      	sxth	r0, r0
 801a138:	b212      	sxth	r2, r2
 801a13a:	4290      	cmp	r0, r2
 801a13c:	bfb4      	ite	lt
 801a13e:	2000      	movlt	r0, #0
 801a140:	2001      	movge	r0, #1
 801a142:	bd70      	pop	{r4, r5, r6, pc}
 801a144:	2000      	movs	r0, #0
 801a146:	e7fc      	b.n	801a142 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801a148 <_ZN8touchgfx11Application11getInstanceEv>:
 801a148:	4b01      	ldr	r3, [pc, #4]	; (801a150 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801a14a:	6818      	ldr	r0, [r3, #0]
 801a14c:	4770      	bx	lr
 801a14e:	bf00      	nop
 801a150:	2000c640 	.word	0x2000c640

0801a154 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801a154:	2300      	movs	r3, #0
 801a156:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801a15a:	30a8      	adds	r0, #168	; 0xa8
 801a15c:	f820 3c24 	strh.w	r3, [r0, #-36]
 801a160:	f802 3b01 	strb.w	r3, [r2], #1
 801a164:	4282      	cmp	r2, r0
 801a166:	d1fb      	bne.n	801a160 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801a168:	4770      	bx	lr

0801a16a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801a16a:	4603      	mov	r3, r0
 801a16c:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801a170:	2200      	movs	r2, #0
 801a172:	801a      	strh	r2, [r3, #0]
 801a174:	3308      	adds	r3, #8
 801a176:	f823 2c06 	strh.w	r2, [r3, #-6]
 801a17a:	f823 2c04 	strh.w	r2, [r3, #-4]
 801a17e:	f823 2c02 	strh.w	r2, [r3, #-2]
 801a182:	428b      	cmp	r3, r1
 801a184:	d1f5      	bne.n	801a172 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801a186:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801a18a:	4770      	bx	lr

0801a18c <_ZN8touchgfx11ApplicationC1Ev>:
 801a18c:	b570      	push	{r4, r5, r6, lr}
 801a18e:	4b16      	ldr	r3, [pc, #88]	; (801a1e8 <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 801a190:	2500      	movs	r5, #0
 801a192:	4604      	mov	r4, r0
 801a194:	30a8      	adds	r0, #168	; 0xa8
 801a196:	f840 3ca8 	str.w	r3, [r0, #-168]
 801a19a:	f820 5c24 	strh.w	r5, [r0, #-36]
 801a19e:	f7ff ffe4 	bl	801a16a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a1a2:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801a1a6:	f7ff ffe0 	bl	801a16a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a1aa:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 801a1ae:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 801a1b2:	490e      	ldr	r1, [pc, #56]	; (801a1ec <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 801a1b4:	480e      	ldr	r0, [pc, #56]	; (801a1f0 <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 801a1b6:	f00a faa1 	bl	80246fc <CRC_Lock>
 801a1ba:	4e0e      	ldr	r6, [pc, #56]	; (801a1f4 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 801a1bc:	4b0e      	ldr	r3, [pc, #56]	; (801a1f8 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801a1be:	b158      	cbz	r0, 801a1d8 <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 801a1c0:	801d      	strh	r5, [r3, #0]
 801a1c2:	2300      	movs	r3, #0
 801a1c4:	4a0d      	ldr	r2, [pc, #52]	; (801a1fc <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801a1c6:	4620      	mov	r0, r4
 801a1c8:	6013      	str	r3, [r2, #0]
 801a1ca:	4a0d      	ldr	r2, [pc, #52]	; (801a200 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801a1cc:	6033      	str	r3, [r6, #0]
 801a1ce:	6013      	str	r3, [r2, #0]
 801a1d0:	f7ff ffc0 	bl	801a154 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801a1d4:	4620      	mov	r0, r4
 801a1d6:	bd70      	pop	{r4, r5, r6, pc}
 801a1d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801a1dc:	2002      	movs	r0, #2
 801a1de:	801a      	strh	r2, [r3, #0]
 801a1e0:	6030      	str	r0, [r6, #0]
 801a1e2:	f000 ff81 	bl	801b0e8 <_ZN8touchgfx6Screen4drawEv>
 801a1e6:	e7ec      	b.n	801a1c2 <_ZN8touchgfx11ApplicationC1Ev+0x36>
 801a1e8:	08029b90 	.word	0x08029b90
 801a1ec:	b5e8b5cd 	.word	0xb5e8b5cd
 801a1f0:	f407a5c2 	.word	0xf407a5c2
 801a1f4:	2000c630 	.word	0x2000c630
 801a1f8:	20000058 	.word	0x20000058
 801a1fc:	2000c640 	.word	0x2000c640
 801a200:	2000c634 	.word	0x2000c634

0801a204 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801a204:	2300      	movs	r3, #0
 801a206:	8003      	strh	r3, [r0, #0]
 801a208:	8043      	strh	r3, [r0, #2]
 801a20a:	8083      	strh	r3, [r0, #4]
 801a20c:	80c3      	strh	r3, [r0, #6]
 801a20e:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 801a212:	4293      	cmp	r3, r2
 801a214:	b530      	push	{r4, r5, lr}
 801a216:	d912      	bls.n	801a23e <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801a218:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801a21c:	3b01      	subs	r3, #1
 801a21e:	6825      	ldr	r5, [r4, #0]
 801a220:	b29b      	uxth	r3, r3
 801a222:	6005      	str	r5, [r0, #0]
 801a224:	4293      	cmp	r3, r2
 801a226:	6865      	ldr	r5, [r4, #4]
 801a228:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 801a22c:	6045      	str	r5, [r0, #4]
 801a22e:	d906      	bls.n	801a23e <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801a230:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801a234:	681d      	ldr	r5, [r3, #0]
 801a236:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 801a23a:	685d      	ldr	r5, [r3, #4]
 801a23c:	6065      	str	r5, [r4, #4]
 801a23e:	bd30      	pop	{r4, r5, pc}

0801a240 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801a240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a242:	466b      	mov	r3, sp
 801a244:	4604      	mov	r4, r0
 801a246:	e883 0006 	stmia.w	r3, {r1, r2}
 801a24a:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801a24e:	2a07      	cmp	r2, #7
 801a250:	d906      	bls.n	801a260 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801a252:	4b09      	ldr	r3, [pc, #36]	; (801a278 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801a254:	f44f 7102 	mov.w	r1, #520	; 0x208
 801a258:	4a08      	ldr	r2, [pc, #32]	; (801a27c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801a25a:	4809      	ldr	r0, [pc, #36]	; (801a280 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801a25c:	f00b ff68 	bl	8026130 <__assert_func>
 801a260:	1c51      	adds	r1, r2, #1
 801a262:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801a266:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801a26a:	cb03      	ldmia	r3!, {r0, r1}
 801a26c:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801a270:	6069      	str	r1, [r5, #4]
 801a272:	b003      	add	sp, #12
 801a274:	bd30      	pop	{r4, r5, pc}
 801a276:	bf00      	nop
 801a278:	08029b30 	.word	0x08029b30
 801a27c:	08029c08 	.word	0x08029c08
 801a280:	08029b5f 	.word	0x08029b5f

0801a284 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801a284:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a288:	b089      	sub	sp, #36	; 0x24
 801a28a:	4606      	mov	r6, r0
 801a28c:	466c      	mov	r4, sp
 801a28e:	4620      	mov	r0, r4
 801a290:	e884 0006 	stmia.w	r4, {r1, r2}
 801a294:	f7fc fe30 	bl	8016ef8 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a298:	bbb0      	cbnz	r0, 801a308 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801a29a:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 801a29e:	b1fd      	cbz	r5, 801a2e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 801a2a0:	3d01      	subs	r5, #1
 801a2a2:	af04      	add	r7, sp, #16
 801a2a4:	f04f 090a 	mov.w	r9, #10
 801a2a8:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 801a2ac:	ab02      	add	r3, sp, #8
 801a2ae:	fa1f f885 	uxth.w	r8, r5
 801a2b2:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801a2b6:	6851      	ldr	r1, [r2, #4]
 801a2b8:	c303      	stmia	r3!, {r0, r1}
 801a2ba:	4621      	mov	r1, r4
 801a2bc:	a802      	add	r0, sp, #8
 801a2be:	f7ff ff21 	bl	801a104 <_ZNK8touchgfx4Rect8includesERKS0_>
 801a2c2:	bb08      	cbnz	r0, 801a308 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801a2c4:	a902      	add	r1, sp, #8
 801a2c6:	4620      	mov	r0, r4
 801a2c8:	f7ff ff1c 	bl	801a104 <_ZNK8touchgfx4Rect8includesERKS0_>
 801a2cc:	b1f8      	cbz	r0, 801a30e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 801a2ce:	4642      	mov	r2, r8
 801a2d0:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801a2d4:	a806      	add	r0, sp, #24
 801a2d6:	f7ff ff95 	bl	801a204 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a2da:	f115 35ff 	adds.w	r5, r5, #4294967295
 801a2de:	d2e3      	bcs.n	801a2a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 801a2e0:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 801a2e4:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 801a2e8:	2b08      	cmp	r3, #8
 801a2ea:	d108      	bne.n	801a2fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801a2ec:	4629      	mov	r1, r5
 801a2ee:	a806      	add	r0, sp, #24
 801a2f0:	2207      	movs	r2, #7
 801a2f2:	f7ff ff87 	bl	801a204 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a2f6:	a906      	add	r1, sp, #24
 801a2f8:	4620      	mov	r0, r4
 801a2fa:	f7fd fff8 	bl	80182ee <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a2fe:	4628      	mov	r0, r5
 801a300:	e894 0006 	ldmia.w	r4, {r1, r2}
 801a304:	f7ff ff9c 	bl	801a240 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801a308:	b009      	add	sp, #36	; 0x24
 801a30a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a30e:	4621      	mov	r1, r4
 801a310:	a802      	add	r0, sp, #8
 801a312:	f7ff fed5 	bl	801a0c0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a316:	b150      	cbz	r0, 801a32e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 801a318:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801a31c:	a806      	add	r0, sp, #24
 801a31e:	4642      	mov	r2, r8
 801a320:	f7ff ff70 	bl	801a204 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a324:	a902      	add	r1, sp, #8
 801a326:	4620      	mov	r0, r4
 801a328:	f7fd ffe1 	bl	80182ee <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a32c:	e7d5      	b.n	801a2da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801a32e:	e894 0003 	ldmia.w	r4, {r0, r1}
 801a332:	e887 0003 	stmia.w	r7, {r0, r1}
 801a336:	a902      	add	r1, sp, #8
 801a338:	4638      	mov	r0, r7
 801a33a:	f7fd ffd8 	bl	80182ee <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a33e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801a342:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801a346:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801a34a:	fb13 f302 	smulbb	r3, r3, r2
 801a34e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801a352:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801a356:	fb11 f102 	smulbb	r1, r1, r2
 801a35a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801a35e:	fb09 f303 	mul.w	r3, r9, r3
 801a362:	fb12 1100 	smlabb	r1, r2, r0, r1
 801a366:	220b      	movs	r2, #11
 801a368:	434a      	muls	r2, r1
 801a36a:	4293      	cmp	r3, r2
 801a36c:	dab5      	bge.n	801a2da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801a36e:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801a372:	a806      	add	r0, sp, #24
 801a374:	4642      	mov	r2, r8
 801a376:	f7ff ff45 	bl	801a204 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a37a:	e897 0003 	ldmia.w	r7, {r0, r1}
 801a37e:	e884 0003 	stmia.w	r4, {r0, r1}
 801a382:	e7aa      	b.n	801a2da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

0801a384 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801a384:	4b1d      	ldr	r3, [pc, #116]	; (801a3fc <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801a386:	b530      	push	{r4, r5, lr}
 801a388:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a38c:	b085      	sub	sp, #20
 801a38e:	4b1c      	ldr	r3, [pc, #112]	; (801a400 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801a390:	460c      	mov	r4, r1
 801a392:	2100      	movs	r1, #0
 801a394:	4605      	mov	r5, r0
 801a396:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a39a:	6820      	ldr	r0, [r4, #0]
 801a39c:	9100      	str	r1, [sp, #0]
 801a39e:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a3a2:	ab02      	add	r3, sp, #8
 801a3a4:	6861      	ldr	r1, [r4, #4]
 801a3a6:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a3aa:	c303      	stmia	r3!, {r0, r1}
 801a3ac:	4669      	mov	r1, sp
 801a3ae:	a802      	add	r0, sp, #8
 801a3b0:	f7fc fd5e 	bl	8016e70 <_ZN8touchgfx4RectaNERKS0_>
 801a3b4:	ab02      	add	r3, sp, #8
 801a3b6:	cb03      	ldmia	r3!, {r0, r1}
 801a3b8:	4b12      	ldr	r3, [pc, #72]	; (801a404 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801a3ba:	6020      	str	r0, [r4, #0]
 801a3bc:	6818      	ldr	r0, [r3, #0]
 801a3be:	6061      	str	r1, [r4, #4]
 801a3c0:	b138      	cbz	r0, 801a3d2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801a3c2:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 801a3c6:	b133      	cbz	r3, 801a3d6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801a3c8:	6821      	ldr	r1, [r4, #0]
 801a3ca:	4628      	mov	r0, r5
 801a3cc:	6862      	ldr	r2, [r4, #4]
 801a3ce:	f7ff ff59 	bl	801a284 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801a3d2:	b005      	add	sp, #20
 801a3d4:	bd30      	pop	{r4, r5, pc}
 801a3d6:	6803      	ldr	r3, [r0, #0]
 801a3d8:	4621      	mov	r1, r4
 801a3da:	689b      	ldr	r3, [r3, #8]
 801a3dc:	4798      	blx	r3
 801a3de:	4b0a      	ldr	r3, [pc, #40]	; (801a408 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801a3e0:	6818      	ldr	r0, [r3, #0]
 801a3e2:	b118      	cbz	r0, 801a3ec <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801a3e4:	6803      	ldr	r3, [r0, #0]
 801a3e6:	4621      	mov	r1, r4
 801a3e8:	689b      	ldr	r3, [r3, #8]
 801a3ea:	4798      	blx	r3
 801a3ec:	4b07      	ldr	r3, [pc, #28]	; (801a40c <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801a3ee:	4621      	mov	r1, r4
 801a3f0:	6818      	ldr	r0, [r3, #0]
 801a3f2:	6803      	ldr	r3, [r0, #0]
 801a3f4:	695b      	ldr	r3, [r3, #20]
 801a3f6:	4798      	blx	r3
 801a3f8:	e7eb      	b.n	801a3d2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801a3fa:	bf00      	nop
 801a3fc:	2000c5a8 	.word	0x2000c5a8
 801a400:	2000c5aa 	.word	0x2000c5aa
 801a404:	2000c630 	.word	0x2000c630
 801a408:	2000c62c 	.word	0x2000c62c
 801a40c:	2000c5b4 	.word	0x2000c5b4

0801a410 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801a410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a414:	4604      	mov	r4, r0
 801a416:	b09b      	sub	sp, #108	; 0x6c
 801a418:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 801a41c:	b129      	cbz	r1, 801a42a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801a41e:	2300      	movs	r3, #0
 801a420:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801a424:	b01b      	add	sp, #108	; 0x6c
 801a426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a42a:	4baf      	ldr	r3, [pc, #700]	; (801a6e8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801a42c:	681b      	ldr	r3, [r3, #0]
 801a42e:	b33b      	cbz	r3, 801a480 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801a430:	4dae      	ldr	r5, [pc, #696]	; (801a6ec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801a432:	4628      	mov	r0, r5
 801a434:	f7fc fd60 	bl	8016ef8 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a438:	4606      	mov	r6, r0
 801a43a:	bb08      	cbnz	r0, 801a480 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801a43c:	4628      	mov	r0, r5
 801a43e:	f7ff fce9 	bl	8019e14 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801a442:	6829      	ldr	r1, [r5, #0]
 801a444:	686a      	ldr	r2, [r5, #4]
 801a446:	4620      	mov	r0, r4
 801a448:	f7ff ff1c 	bl	801a284 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801a44c:	802e      	strh	r6, [r5, #0]
 801a44e:	806e      	strh	r6, [r5, #2]
 801a450:	80ae      	strh	r6, [r5, #4]
 801a452:	80ee      	strh	r6, [r5, #6]
 801a454:	4fa6      	ldr	r7, [pc, #664]	; (801a6f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801a456:	a809      	add	r0, sp, #36	; 0x24
 801a458:	f7ff fe87 	bl	801a16a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a45c:	883d      	ldrh	r5, [r7, #0]
 801a45e:	462e      	mov	r6, r5
 801a460:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801a464:	42b3      	cmp	r3, r6
 801a466:	d910      	bls.n	801a48a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7a>
 801a468:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801a46c:	3601      	adds	r6, #1
 801a46e:	a809      	add	r0, sp, #36	; 0x24
 801a470:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801a474:	b2b6      	uxth	r6, r6
 801a476:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801a47a:	f7ff fee1 	bl	801a240 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801a47e:	e7ef      	b.n	801a460 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x50>
 801a480:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801a484:	2b00      	cmp	r3, #0
 801a486:	d1e5      	bne.n	801a454 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x44>
 801a488:	e7cc      	b.n	801a424 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801a48a:	462e      	mov	r6, r5
 801a48c:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801a490:	42b3      	cmp	r3, r6
 801a492:	d90b      	bls.n	801a4ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801a494:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801a498:	3601      	adds	r6, #1
 801a49a:	4620      	mov	r0, r4
 801a49c:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801a4a0:	b2b6      	uxth	r6, r6
 801a4a2:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801a4a6:	f7ff feed 	bl	801a284 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801a4aa:	e7ef      	b.n	801a48c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7c>
 801a4ac:	4e91      	ldr	r6, [pc, #580]	; (801a6f4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801a4ae:	6833      	ldr	r3, [r6, #0]
 801a4b0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801a4b4:	2b01      	cmp	r3, #1
 801a4b6:	f040 8092 	bne.w	801a5de <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 801a4ba:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801a4be:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801a4c2:	f04f 0900 	mov.w	r9, #0
 801a4c6:	33aa      	adds	r3, #170	; 0xaa
 801a4c8:	42a8      	cmp	r0, r5
 801a4ca:	f103 0308 	add.w	r3, r3, #8
 801a4ce:	dd0a      	ble.n	801a4e6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd6>
 801a4d0:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801a4d4:	3501      	adds	r5, #1
 801a4d6:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801a4da:	440a      	add	r2, r1
 801a4dc:	b212      	sxth	r2, r2
 801a4de:	4591      	cmp	r9, r2
 801a4e0:	bfb8      	it	lt
 801a4e2:	4691      	movlt	r9, r2
 801a4e4:	e7f0      	b.n	801a4c8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xb8>
 801a4e6:	4b84      	ldr	r3, [pc, #528]	; (801a6f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801a4e8:	f8df 8214 	ldr.w	r8, [pc, #532]	; 801a700 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>
 801a4ec:	881d      	ldrh	r5, [r3, #0]
 801a4ee:	2300      	movs	r3, #0
 801a4f0:	2d0f      	cmp	r5, #15
 801a4f2:	bf8c      	ite	hi
 801a4f4:	08ed      	lsrhi	r5, r5, #3
 801a4f6:	2501      	movls	r5, #1
 801a4f8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801a4fc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801a500:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801a504:	6830      	ldr	r0, [r6, #0]
 801a506:	440b      	add	r3, r1
 801a508:	6802      	ldr	r2, [r0, #0]
 801a50a:	b21b      	sxth	r3, r3
 801a50c:	4599      	cmp	r9, r3
 801a50e:	dd49      	ble.n	801a5a4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x194>
 801a510:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 801a514:	4798      	blx	r3
 801a516:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801a51a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801a51e:	4413      	add	r3, r2
 801a520:	b21b      	sxth	r3, r3
 801a522:	195a      	adds	r2, r3, r5
 801a524:	4290      	cmp	r0, r2
 801a526:	da07      	bge.n	801a538 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 801a528:	4581      	cmp	r9, r0
 801a52a:	dd05      	ble.n	801a538 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 801a52c:	4298      	cmp	r0, r3
 801a52e:	da33      	bge.n	801a598 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 801a530:	2b00      	cmp	r3, #0
 801a532:	dd31      	ble.n	801a598 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 801a534:	4648      	mov	r0, r9
 801a536:	e004      	b.n	801a542 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 801a538:	4298      	cmp	r0, r3
 801a53a:	dbfb      	blt.n	801a534 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x124>
 801a53c:	4548      	cmp	r0, r9
 801a53e:	bfa8      	it	ge
 801a540:	4648      	movge	r0, r9
 801a542:	f9b8 2000 	ldrsh.w	r2, [r8]
 801a546:	2100      	movs	r1, #0
 801a548:	1ac0      	subs	r0, r0, r3
 801a54a:	f8b7 a000 	ldrh.w	sl, [r7]
 801a54e:	f8ad 1014 	strh.w	r1, [sp, #20]
 801a552:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a556:	f8ad 2018 	strh.w	r2, [sp, #24]
 801a55a:	f8ad 001a 	strh.w	r0, [sp, #26]
 801a55e:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801a562:	4553      	cmp	r3, sl
 801a564:	d9ca      	bls.n	801a4fc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 801a566:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801a56a:	ab07      	add	r3, sp, #28
 801a56c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801a570:	6851      	ldr	r1, [r2, #4]
 801a572:	c303      	stmia	r3!, {r0, r1}
 801a574:	a807      	add	r0, sp, #28
 801a576:	a905      	add	r1, sp, #20
 801a578:	f7fc fc7a 	bl	8016e70 <_ZN8touchgfx4RectaNERKS0_>
 801a57c:	a807      	add	r0, sp, #28
 801a57e:	f7fc fcbb 	bl	8016ef8 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a582:	b920      	cbnz	r0, 801a58e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x17e>
 801a584:	6823      	ldr	r3, [r4, #0]
 801a586:	a907      	add	r1, sp, #28
 801a588:	4620      	mov	r0, r4
 801a58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a58c:	4798      	blx	r3
 801a58e:	f10a 0a01 	add.w	sl, sl, #1
 801a592:	fa1f fa8a 	uxth.w	sl, sl
 801a596:	e7e2      	b.n	801a55e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14e>
 801a598:	6830      	ldr	r0, [r6, #0]
 801a59a:	2101      	movs	r1, #1
 801a59c:	6803      	ldr	r3, [r0, #0]
 801a59e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a5a0:	4798      	blx	r3
 801a5a2:	e7ab      	b.n	801a4fc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 801a5a4:	69d3      	ldr	r3, [r2, #28]
 801a5a6:	4798      	blx	r3
 801a5a8:	4b54      	ldr	r3, [pc, #336]	; (801a6fc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801a5aa:	781b      	ldrb	r3, [r3, #0]
 801a5ac:	2b00      	cmp	r3, #0
 801a5ae:	f43f af39 	beq.w	801a424 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801a5b2:	2300      	movs	r3, #0
 801a5b4:	883d      	ldrh	r5, [r7, #0]
 801a5b6:	34ea      	adds	r4, #234	; 0xea
 801a5b8:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801a5bc:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801a5c0:	42ab      	cmp	r3, r5
 801a5c2:	f67f af2f 	bls.w	801a424 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801a5c6:	ab1a      	add	r3, sp, #104	; 0x68
 801a5c8:	4620      	mov	r0, r4
 801a5ca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a5ce:	3501      	adds	r5, #1
 801a5d0:	3b44      	subs	r3, #68	; 0x44
 801a5d2:	b2ad      	uxth	r5, r5
 801a5d4:	e893 0006 	ldmia.w	r3, {r1, r2}
 801a5d8:	f7ff fe32 	bl	801a240 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801a5dc:	e7ee      	b.n	801a5bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ac>
 801a5de:	2b02      	cmp	r3, #2
 801a5e0:	d16a      	bne.n	801a6b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801a5e2:	f8df a120 	ldr.w	sl, [pc, #288]	; 801a704 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801a5e6:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801a5ea:	42ab      	cmp	r3, r5
 801a5ec:	d9dc      	bls.n	801a5a8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 801a5ee:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801a5f2:	ab03      	add	r3, sp, #12
 801a5f4:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801a5f8:	6851      	ldr	r1, [r2, #4]
 801a5fa:	c303      	stmia	r3!, {r0, r1}
 801a5fc:	f89a 3000 	ldrb.w	r3, [sl]
 801a600:	2b01      	cmp	r3, #1
 801a602:	d102      	bne.n	801a60a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1fa>
 801a604:	a803      	add	r0, sp, #12
 801a606:	f7ff fc5f 	bl	8019ec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a60a:	a803      	add	r0, sp, #12
 801a60c:	f7fc fc74 	bl	8016ef8 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a610:	2800      	cmp	r0, #0
 801a612:	d14a      	bne.n	801a6aa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29a>
 801a614:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801a618:	f10d 0914 	add.w	r9, sp, #20
 801a61c:	f10d 081c 	add.w	r8, sp, #28
 801a620:	f8ad 001a 	strh.w	r0, [sp, #26]
 801a624:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a628:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801a62c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a630:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801a634:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a638:	f8bd b012 	ldrh.w	fp, [sp, #18]
 801a63c:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 801a640:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801a644:	44dc      	add	ip, fp
 801a646:	6830      	ldr	r0, [r6, #0]
 801a648:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801a64c:	ebac 0c02 	sub.w	ip, ip, r2
 801a650:	f8d0 e000 	ldr.w	lr, [r0]
 801a654:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801a658:	fa1f fc8c 	uxth.w	ip, ip
 801a65c:	f8cd c000 	str.w	ip, [sp]
 801a660:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 801a664:	47d8      	blx	fp
 801a666:	f89a 3000 	ldrb.w	r3, [sl]
 801a66a:	f8ad 001a 	strh.w	r0, [sp, #26]
 801a66e:	2b01      	cmp	r3, #1
 801a670:	d11e      	bne.n	801a6b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>
 801a672:	e899 0003 	ldmia.w	r9, {r0, r1}
 801a676:	e888 0003 	stmia.w	r8, {r0, r1}
 801a67a:	4640      	mov	r0, r8
 801a67c:	f7ff fbca 	bl	8019e14 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801a680:	6823      	ldr	r3, [r4, #0]
 801a682:	4641      	mov	r1, r8
 801a684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a686:	4620      	mov	r0, r4
 801a688:	4798      	blx	r3
 801a68a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801a68e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801a692:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 801a696:	4413      	add	r3, r2
 801a698:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801a69c:	440a      	add	r2, r1
 801a69e:	b21b      	sxth	r3, r3
 801a6a0:	b212      	sxth	r2, r2
 801a6a2:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a6a6:	4293      	cmp	r3, r2
 801a6a8:	dbc6      	blt.n	801a638 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 801a6aa:	3501      	adds	r5, #1
 801a6ac:	b2ad      	uxth	r5, r5
 801a6ae:	e79a      	b.n	801a5e6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d6>
 801a6b0:	6823      	ldr	r3, [r4, #0]
 801a6b2:	4649      	mov	r1, r9
 801a6b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a6b6:	e7e6      	b.n	801a686 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 801a6b8:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801a6bc:	42ab      	cmp	r3, r5
 801a6be:	f67f af73 	bls.w	801a5a8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 801a6c2:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801a6c6:	ab07      	add	r3, sp, #28
 801a6c8:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801a6cc:	6851      	ldr	r1, [r2, #4]
 801a6ce:	c303      	stmia	r3!, {r0, r1}
 801a6d0:	a807      	add	r0, sp, #28
 801a6d2:	f7fc fc11 	bl	8016ef8 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a6d6:	b920      	cbnz	r0, 801a6e2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d2>
 801a6d8:	6823      	ldr	r3, [r4, #0]
 801a6da:	a907      	add	r1, sp, #28
 801a6dc:	4620      	mov	r0, r4
 801a6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a6e0:	4798      	blx	r3
 801a6e2:	3501      	adds	r5, #1
 801a6e4:	b2ad      	uxth	r5, r5
 801a6e6:	e7e7      	b.n	801a6b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801a6e8:	2000c62c 	.word	0x2000c62c
 801a6ec:	2000c638 	.word	0x2000c638
 801a6f0:	20000058 	.word	0x20000058
 801a6f4:	2000c5b4 	.word	0x2000c5b4
 801a6f8:	2000c5aa 	.word	0x2000c5aa
 801a6fc:	2000c5b2 	.word	0x2000c5b2
 801a700:	2000c5a8 	.word	0x2000c5a8
 801a704:	2000c5ac 	.word	0x2000c5ac

0801a708 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801a708:	4b03      	ldr	r3, [pc, #12]	; (801a718 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801a70a:	2200      	movs	r2, #0
 801a70c:	801a      	strh	r2, [r3, #0]
 801a70e:	805a      	strh	r2, [r3, #2]
 801a710:	809a      	strh	r2, [r3, #4]
 801a712:	80da      	strh	r2, [r3, #6]
 801a714:	4770      	bx	lr
 801a716:	bf00      	nop
 801a718:	2000c638 	.word	0x2000c638

0801a71c <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 801a71c:	2000      	movs	r0, #0
 801a71e:	4770      	bx	lr

0801a720 <_ZNK8touchgfx4Font12getGSUBTableEv>:
 801a720:	2000      	movs	r0, #0
 801a722:	4770      	bx	lr

0801a724 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801a724:	b508      	push	{r3, lr}
 801a726:	6803      	ldr	r3, [r0, #0]
 801a728:	68db      	ldr	r3, [r3, #12]
 801a72a:	4798      	blx	r3
 801a72c:	b128      	cbz	r0, 801a73a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801a72e:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801a732:	7a80      	ldrb	r0, [r0, #10]
 801a734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a738:	4318      	orrs	r0, r3
 801a73a:	bd08      	pop	{r3, pc}

0801a73c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 801a73c:	b40e      	push	{r1, r2, r3}
 801a73e:	b533      	push	{r0, r1, r4, r5, lr}
 801a740:	ab05      	add	r3, sp, #20
 801a742:	f853 2b04 	ldr.w	r2, [r3], #4
 801a746:	9301      	str	r3, [sp, #4]
 801a748:	4b0a      	ldr	r3, [pc, #40]	; (801a774 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 801a74a:	685c      	ldr	r4, [r3, #4]
 801a74c:	1061      	asrs	r1, r4, #1
 801a74e:	07e4      	lsls	r4, r4, #31
 801a750:	eb00 0501 	add.w	r5, r0, r1
 801a754:	bf46      	itte	mi
 801a756:	681b      	ldrmi	r3, [r3, #0]
 801a758:	5841      	ldrmi	r1, [r0, r1]
 801a75a:	681c      	ldrpl	r4, [r3, #0]
 801a75c:	4628      	mov	r0, r5
 801a75e:	bf48      	it	mi
 801a760:	58cc      	ldrmi	r4, [r1, r3]
 801a762:	2100      	movs	r1, #0
 801a764:	9b01      	ldr	r3, [sp, #4]
 801a766:	47a0      	blx	r4
 801a768:	b002      	add	sp, #8
 801a76a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a76e:	b003      	add	sp, #12
 801a770:	4770      	bx	lr
 801a772:	bf00      	nop
 801a774:	20000024 	.word	0x20000024

0801a778 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 801a778:	b40c      	push	{r2, r3}
 801a77a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a77c:	ab06      	add	r3, sp, #24
 801a77e:	f853 2b04 	ldr.w	r2, [r3], #4
 801a782:	9301      	str	r3, [sp, #4]
 801a784:	4b09      	ldr	r3, [pc, #36]	; (801a7ac <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 801a786:	685d      	ldr	r5, [r3, #4]
 801a788:	106c      	asrs	r4, r5, #1
 801a78a:	07ed      	lsls	r5, r5, #31
 801a78c:	eb00 0604 	add.w	r6, r0, r4
 801a790:	bf45      	ittet	mi
 801a792:	681b      	ldrmi	r3, [r3, #0]
 801a794:	5900      	ldrmi	r0, [r0, r4]
 801a796:	681c      	ldrpl	r4, [r3, #0]
 801a798:	58c4      	ldrmi	r4, [r0, r3]
 801a79a:	4630      	mov	r0, r6
 801a79c:	9b01      	ldr	r3, [sp, #4]
 801a79e:	47a0      	blx	r4
 801a7a0:	b002      	add	sp, #8
 801a7a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a7a6:	b002      	add	sp, #8
 801a7a8:	4770      	bx	lr
 801a7aa:	bf00      	nop
 801a7ac:	20000024 	.word	0x20000024

0801a7b0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801a7b0:	b40e      	push	{r1, r2, r3}
 801a7b2:	b530      	push	{r4, r5, lr}
 801a7b4:	b098      	sub	sp, #96	; 0x60
 801a7b6:	4604      	mov	r4, r0
 801a7b8:	ab1b      	add	r3, sp, #108	; 0x6c
 801a7ba:	a802      	add	r0, sp, #8
 801a7bc:	f853 5b04 	ldr.w	r5, [r3], #4
 801a7c0:	9301      	str	r3, [sp, #4]
 801a7c2:	f001 f837 	bl	801b834 <_ZN8touchgfx12TextProviderC1Ev>
 801a7c6:	6823      	ldr	r3, [r4, #0]
 801a7c8:	4620      	mov	r0, r4
 801a7ca:	2401      	movs	r4, #1
 801a7cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a7ce:	4798      	blx	r3
 801a7d0:	9a01      	ldr	r2, [sp, #4]
 801a7d2:	4603      	mov	r3, r0
 801a7d4:	4629      	mov	r1, r5
 801a7d6:	a802      	add	r0, sp, #8
 801a7d8:	f001 f849 	bl	801b86e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801a7dc:	a802      	add	r0, sp, #8
 801a7de:	f001 f87f 	bl	801b8e0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a7e2:	b2a3      	uxth	r3, r4
 801a7e4:	b138      	cbz	r0, 801a7f6 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 801a7e6:	280a      	cmp	r0, #10
 801a7e8:	a802      	add	r0, sp, #8
 801a7ea:	bf04      	itt	eq
 801a7ec:	3301      	addeq	r3, #1
 801a7ee:	b21c      	sxtheq	r4, r3
 801a7f0:	f001 f876 	bl	801b8e0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a7f4:	e7f5      	b.n	801a7e2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 801a7f6:	4618      	mov	r0, r3
 801a7f8:	b018      	add	sp, #96	; 0x60
 801a7fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a7fe:	b003      	add	sp, #12
 801a800:	4770      	bx	lr
	...

0801a804 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801a804:	b40e      	push	{r1, r2, r3}
 801a806:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a808:	b098      	sub	sp, #96	; 0x60
 801a80a:	4605      	mov	r5, r0
 801a80c:	4f25      	ldr	r7, [pc, #148]	; (801a8a4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>)
 801a80e:	ab1d      	add	r3, sp, #116	; 0x74
 801a810:	a802      	add	r0, sp, #8
 801a812:	ae18      	add	r6, sp, #96	; 0x60
 801a814:	f853 4b04 	ldr.w	r4, [r3], #4
 801a818:	9300      	str	r3, [sp, #0]
 801a81a:	f001 f80b 	bl	801b834 <_ZN8touchgfx12TextProviderC1Ev>
 801a81e:	682b      	ldr	r3, [r5, #0]
 801a820:	4628      	mov	r0, r5
 801a822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a824:	4798      	blx	r3
 801a826:	4621      	mov	r1, r4
 801a828:	2400      	movs	r4, #0
 801a82a:	4603      	mov	r3, r0
 801a82c:	9a00      	ldr	r2, [sp, #0]
 801a82e:	a802      	add	r0, sp, #8
 801a830:	f001 f81d 	bl	801b86e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801a834:	f846 4d5c 	str.w	r4, [r6, #-92]!
 801a838:	462a      	mov	r2, r5
 801a83a:	4633      	mov	r3, r6
 801a83c:	4621      	mov	r1, r4
 801a83e:	a802      	add	r0, sp, #8
 801a840:	f001 f97a 	bl	801bb38 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a844:	b340      	cbz	r0, 801a898 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x94>
 801a846:	280a      	cmp	r0, #10
 801a848:	d01f      	beq.n	801a88a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801a84a:	9901      	ldr	r1, [sp, #4]
 801a84c:	b1e9      	cbz	r1, 801a88a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801a84e:	7b4b      	ldrb	r3, [r1, #13]
 801a850:	f891 c008 	ldrb.w	ip, [r1, #8]
 801a854:	f013 0f40 	tst.w	r3, #64	; 0x40
 801a858:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 801a85c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801a860:	79c9      	ldrb	r1, [r1, #7]
 801a862:	f40e 7e80 	and.w	lr, lr, #256	; 0x100
 801a866:	bf18      	it	ne
 801a868:	4638      	movne	r0, r7
 801a86a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a86e:	bf08      	it	eq
 801a870:	2000      	moveq	r0, #0
 801a872:	88aa      	ldrh	r2, [r5, #4]
 801a874:	ea41 010e 	orr.w	r1, r1, lr
 801a878:	ea43 030c 	orr.w	r3, r3, ip
 801a87c:	440a      	add	r2, r1
 801a87e:	4303      	orrs	r3, r0
 801a880:	1ad3      	subs	r3, r2, r3
 801a882:	b29b      	uxth	r3, r3
 801a884:	42a3      	cmp	r3, r4
 801a886:	bfc8      	it	gt
 801a888:	b21c      	sxthgt	r4, r3
 801a88a:	4633      	mov	r3, r6
 801a88c:	462a      	mov	r2, r5
 801a88e:	2100      	movs	r1, #0
 801a890:	a802      	add	r0, sp, #8
 801a892:	f001 f951 	bl	801bb38 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a896:	e7d5      	b.n	801a844 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 801a898:	b2a0      	uxth	r0, r4
 801a89a:	b018      	add	sp, #96	; 0x60
 801a89c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a8a0:	b003      	add	sp, #12
 801a8a2:	4770      	bx	lr
 801a8a4:	fffffe00 	.word	0xfffffe00

0801a8a8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801a8a8:	b40e      	push	{r1, r2, r3}
 801a8aa:	b570      	push	{r4, r5, r6, lr}
 801a8ac:	b099      	sub	sp, #100	; 0x64
 801a8ae:	4604      	mov	r4, r0
 801a8b0:	26ff      	movs	r6, #255	; 0xff
 801a8b2:	ab1d      	add	r3, sp, #116	; 0x74
 801a8b4:	a802      	add	r0, sp, #8
 801a8b6:	f853 5b04 	ldr.w	r5, [r3], #4
 801a8ba:	9300      	str	r3, [sp, #0]
 801a8bc:	f000 ffba 	bl	801b834 <_ZN8touchgfx12TextProviderC1Ev>
 801a8c0:	6823      	ldr	r3, [r4, #0]
 801a8c2:	4620      	mov	r0, r4
 801a8c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a8c6:	4798      	blx	r3
 801a8c8:	4629      	mov	r1, r5
 801a8ca:	4603      	mov	r3, r0
 801a8cc:	9a00      	ldr	r2, [sp, #0]
 801a8ce:	a802      	add	r0, sp, #8
 801a8d0:	ad18      	add	r5, sp, #96	; 0x60
 801a8d2:	f000 ffcc 	bl	801b86e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801a8d6:	2100      	movs	r1, #0
 801a8d8:	4622      	mov	r2, r4
 801a8da:	a802      	add	r0, sp, #8
 801a8dc:	f845 1d5c 	str.w	r1, [r5, #-92]!
 801a8e0:	462b      	mov	r3, r5
 801a8e2:	f001 f929 	bl	801bb38 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a8e6:	b190      	cbz	r0, 801a90e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 801a8e8:	280a      	cmp	r0, #10
 801a8ea:	d009      	beq.n	801a900 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 801a8ec:	9a01      	ldr	r2, [sp, #4]
 801a8ee:	b13a      	cbz	r2, 801a900 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 801a8f0:	7923      	ldrb	r3, [r4, #4]
 801a8f2:	7a12      	ldrb	r2, [r2, #8]
 801a8f4:	1a9b      	subs	r3, r3, r2
 801a8f6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 801a8fa:	429e      	cmp	r6, r3
 801a8fc:	bf28      	it	cs
 801a8fe:	461e      	movcs	r6, r3
 801a900:	462b      	mov	r3, r5
 801a902:	4622      	mov	r2, r4
 801a904:	2100      	movs	r1, #0
 801a906:	a802      	add	r0, sp, #8
 801a908:	f001 f916 	bl	801bb38 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a90c:	e7eb      	b.n	801a8e6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 801a90e:	4630      	mov	r0, r6
 801a910:	b019      	add	sp, #100	; 0x64
 801a912:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a916:	b003      	add	sp, #12
 801a918:	4770      	bx	lr

0801a91a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801a91a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a91e:	b099      	sub	sp, #100	; 0x64
 801a920:	4606      	mov	r6, r0
 801a922:	4614      	mov	r4, r2
 801a924:	4688      	mov	r8, r1
 801a926:	a802      	add	r0, sp, #8
 801a928:	461d      	mov	r5, r3
 801a92a:	f04f 0b00 	mov.w	fp, #0
 801a92e:	f000 ff81 	bl	801b834 <_ZN8touchgfx12TextProviderC1Ev>
 801a932:	6833      	ldr	r3, [r6, #0]
 801a934:	4630      	mov	r0, r6
 801a936:	465f      	mov	r7, fp
 801a938:	46da      	mov	sl, fp
 801a93a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a93c:	46d9      	mov	r9, fp
 801a93e:	4798      	blx	r3
 801a940:	462a      	mov	r2, r5
 801a942:	4603      	mov	r3, r0
 801a944:	4621      	mov	r1, r4
 801a946:	a802      	add	r0, sp, #8
 801a948:	f000 ff91 	bl	801b86e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801a94c:	ab01      	add	r3, sp, #4
 801a94e:	4632      	mov	r2, r6
 801a950:	4641      	mov	r1, r8
 801a952:	a802      	add	r0, sp, #8
 801a954:	f8cd 9004 	str.w	r9, [sp, #4]
 801a958:	f001 f8ee 	bl	801bb38 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a95c:	4605      	mov	r5, r0
 801a95e:	b108      	cbz	r0, 801a964 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x4a>
 801a960:	280a      	cmp	r0, #10
 801a962:	d10b      	bne.n	801a97c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x62>
 801a964:	4557      	cmp	r7, sl
 801a966:	bf38      	it	cc
 801a968:	4657      	movcc	r7, sl
 801a96a:	f04f 0a00 	mov.w	sl, #0
 801a96e:	b91d      	cbnz	r5, 801a978 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 801a970:	4638      	mov	r0, r7
 801a972:	b019      	add	sp, #100	; 0x64
 801a974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a978:	46ab      	mov	fp, r5
 801a97a:	e7e7      	b.n	801a94c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x32>
 801a97c:	9a01      	ldr	r2, [sp, #4]
 801a97e:	2a00      	cmp	r2, #0
 801a980:	d0fa      	beq.n	801a978 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 801a982:	f992 400d 	ldrsb.w	r4, [r2, #13]
 801a986:	4659      	mov	r1, fp
 801a988:	6833      	ldr	r3, [r6, #0]
 801a98a:	f404 7080 	and.w	r0, r4, #256	; 0x100
 801a98e:	7a94      	ldrb	r4, [r2, #10]
 801a990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a992:	4304      	orrs	r4, r0
 801a994:	4630      	mov	r0, r6
 801a996:	8895      	ldrh	r5, [r2, #4]
 801a998:	4798      	blx	r3
 801a99a:	4420      	add	r0, r4
 801a99c:	4450      	add	r0, sl
 801a99e:	fa1f fa80 	uxth.w	sl, r0
 801a9a2:	e7e4      	b.n	801a96e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x54>

0801a9a4 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801a9a4:	b513      	push	{r0, r1, r4, lr}
 801a9a6:	1d01      	adds	r1, r0, #4
 801a9a8:	4603      	mov	r3, r0
 801a9aa:	466a      	mov	r2, sp
 801a9ac:	c903      	ldmia	r1, {r0, r1}
 801a9ae:	e882 0003 	stmia.w	r2, {r0, r1}
 801a9b2:	2100      	movs	r1, #0
 801a9b4:	4618      	mov	r0, r3
 801a9b6:	9100      	str	r1, [sp, #0]
 801a9b8:	6819      	ldr	r1, [r3, #0]
 801a9ba:	690c      	ldr	r4, [r1, #16]
 801a9bc:	4611      	mov	r1, r2
 801a9be:	47a0      	blx	r4
 801a9c0:	b002      	add	sp, #8
 801a9c2:	bd10      	pop	{r4, pc}

0801a9c4 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801a9c4:	b538      	push	{r3, r4, r5, lr}
 801a9c6:	680b      	ldr	r3, [r1, #0]
 801a9c8:	460c      	mov	r4, r1
 801a9ca:	4605      	mov	r5, r0
 801a9cc:	68db      	ldr	r3, [r3, #12]
 801a9ce:	4798      	blx	r3
 801a9d0:	6823      	ldr	r3, [r4, #0]
 801a9d2:	4620      	mov	r0, r4
 801a9d4:	4629      	mov	r1, r5
 801a9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a9d8:	4798      	blx	r3
 801a9da:	4628      	mov	r0, r5
 801a9dc:	bd38      	pop	{r3, r4, r5, pc}

0801a9de <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801a9de:	b410      	push	{r4}
 801a9e0:	880a      	ldrh	r2, [r1, #0]
 801a9e2:	8884      	ldrh	r4, [r0, #4]
 801a9e4:	4422      	add	r2, r4
 801a9e6:	800a      	strh	r2, [r1, #0]
 801a9e8:	884a      	ldrh	r2, [r1, #2]
 801a9ea:	88c4      	ldrh	r4, [r0, #6]
 801a9ec:	4422      	add	r2, r4
 801a9ee:	804a      	strh	r2, [r1, #2]
 801a9f0:	6940      	ldr	r0, [r0, #20]
 801a9f2:	b120      	cbz	r0, 801a9fe <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801a9f4:	6803      	ldr	r3, [r0, #0]
 801a9f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a9fc:	4718      	bx	r3
 801a9fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aa02:	4770      	bx	lr

0801aa04 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801aa04:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aa06:	460b      	mov	r3, r1
 801aa08:	b085      	sub	sp, #20
 801aa0a:	4604      	mov	r4, r0
 801aa0c:	b901      	cbnz	r1, 801aa10 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801aa0e:	b1fa      	cbz	r2, 801aa50 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 801aa10:	1d27      	adds	r7, r4, #4
 801aa12:	466e      	mov	r6, sp
 801aa14:	ad02      	add	r5, sp, #8
 801aa16:	e897 0003 	ldmia.w	r7, {r0, r1}
 801aa1a:	e886 0003 	stmia.w	r6, {r0, r1}
 801aa1e:	88e1      	ldrh	r1, [r4, #6]
 801aa20:	4620      	mov	r0, r4
 801aa22:	440a      	add	r2, r1
 801aa24:	88a1      	ldrh	r1, [r4, #4]
 801aa26:	4419      	add	r1, r3
 801aa28:	6823      	ldr	r3, [r4, #0]
 801aa2a:	b212      	sxth	r2, r2
 801aa2c:	b209      	sxth	r1, r1
 801aa2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801aa30:	4798      	blx	r3
 801aa32:	e897 0003 	ldmia.w	r7, {r0, r1}
 801aa36:	e885 0003 	stmia.w	r5, {r0, r1}
 801aa3a:	6960      	ldr	r0, [r4, #20]
 801aa3c:	b150      	cbz	r0, 801aa54 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 801aa3e:	6803      	ldr	r3, [r0, #0]
 801aa40:	4631      	mov	r1, r6
 801aa42:	691b      	ldr	r3, [r3, #16]
 801aa44:	4798      	blx	r3
 801aa46:	6960      	ldr	r0, [r4, #20]
 801aa48:	6803      	ldr	r3, [r0, #0]
 801aa4a:	691b      	ldr	r3, [r3, #16]
 801aa4c:	4629      	mov	r1, r5
 801aa4e:	4798      	blx	r3
 801aa50:	b005      	add	sp, #20
 801aa52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aa54:	f7ff fb78 	bl	801a148 <_ZN8touchgfx11Application11getInstanceEv>
 801aa58:	6803      	ldr	r3, [r0, #0]
 801aa5a:	4631      	mov	r1, r6
 801aa5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa5e:	4798      	blx	r3
 801aa60:	f7ff fb72 	bl	801a148 <_ZN8touchgfx11Application11getInstanceEv>
 801aa64:	6803      	ldr	r3, [r0, #0]
 801aa66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa68:	e7f0      	b.n	801aa4c <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

0801aa6a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801aa6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801aa6c:	8882      	ldrh	r2, [r0, #4]
 801aa6e:	4605      	mov	r5, r0
 801aa70:	880b      	ldrh	r3, [r1, #0]
 801aa72:	460c      	mov	r4, r1
 801aa74:	4413      	add	r3, r2
 801aa76:	800b      	strh	r3, [r1, #0]
 801aa78:	884b      	ldrh	r3, [r1, #2]
 801aa7a:	88c2      	ldrh	r2, [r0, #6]
 801aa7c:	4413      	add	r3, r2
 801aa7e:	4602      	mov	r2, r0
 801aa80:	804b      	strh	r3, [r1, #2]
 801aa82:	466b      	mov	r3, sp
 801aa84:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801aa88:	6851      	ldr	r1, [r2, #4]
 801aa8a:	c303      	stmia	r3!, {r0, r1}
 801aa8c:	4621      	mov	r1, r4
 801aa8e:	4668      	mov	r0, sp
 801aa90:	f7fc f9ee 	bl	8016e70 <_ZN8touchgfx4RectaNERKS0_>
 801aa94:	466b      	mov	r3, sp
 801aa96:	cb03      	ldmia	r3!, {r0, r1}
 801aa98:	6020      	str	r0, [r4, #0]
 801aa9a:	6061      	str	r1, [r4, #4]
 801aa9c:	6968      	ldr	r0, [r5, #20]
 801aa9e:	b128      	cbz	r0, 801aaac <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801aaa0:	6803      	ldr	r3, [r0, #0]
 801aaa2:	691b      	ldr	r3, [r3, #16]
 801aaa4:	4621      	mov	r1, r4
 801aaa6:	4798      	blx	r3
 801aaa8:	b003      	add	sp, #12
 801aaaa:	bd30      	pop	{r4, r5, pc}
 801aaac:	f7ff fb4c 	bl	801a148 <_ZN8touchgfx11Application11getInstanceEv>
 801aab0:	6803      	ldr	r3, [r0, #0]
 801aab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aab4:	e7f6      	b.n	801aaa4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801aab6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801aab6:	b570      	push	{r4, r5, r6, lr}
 801aab8:	8882      	ldrh	r2, [r0, #4]
 801aaba:	460c      	mov	r4, r1
 801aabc:	880b      	ldrh	r3, [r1, #0]
 801aabe:	4605      	mov	r5, r0
 801aac0:	4413      	add	r3, r2
 801aac2:	800b      	strh	r3, [r1, #0]
 801aac4:	884b      	ldrh	r3, [r1, #2]
 801aac6:	88c2      	ldrh	r2, [r0, #6]
 801aac8:	4413      	add	r3, r2
 801aaca:	804b      	strh	r3, [r1, #2]
 801aacc:	1d01      	adds	r1, r0, #4
 801aace:	4620      	mov	r0, r4
 801aad0:	f7fc f9ce 	bl	8016e70 <_ZN8touchgfx4RectaNERKS0_>
 801aad4:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801aad8:	b153      	cbz	r3, 801aaf0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801aada:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801aade:	b13b      	cbz	r3, 801aaf0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801aae0:	6968      	ldr	r0, [r5, #20]
 801aae2:	b128      	cbz	r0, 801aaf0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801aae4:	6803      	ldr	r3, [r0, #0]
 801aae6:	4621      	mov	r1, r4
 801aae8:	6a1b      	ldr	r3, [r3, #32]
 801aaea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aaee:	4718      	bx	r3
 801aaf0:	bd70      	pop	{r4, r5, r6, pc}

0801aaf2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801aaf2:	b510      	push	{r4, lr}
 801aaf4:	2300      	movs	r3, #0
 801aaf6:	4604      	mov	r4, r0
 801aaf8:	4608      	mov	r0, r1
 801aafa:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801aafe:	8023      	strh	r3, [r4, #0]
 801ab00:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801ab04:	8063      	strh	r3, [r4, #2]
 801ab06:	6803      	ldr	r3, [r0, #0]
 801ab08:	80a1      	strh	r1, [r4, #4]
 801ab0a:	4621      	mov	r1, r4
 801ab0c:	80e2      	strh	r2, [r4, #6]
 801ab0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ab10:	4798      	blx	r3
 801ab12:	4620      	mov	r0, r4
 801ab14:	bd10      	pop	{r4, pc}
	...

0801ab18 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801ab18:	b530      	push	{r4, r5, lr}
 801ab1a:	8083      	strh	r3, [r0, #4]
 801ab1c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801ab20:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801ab24:	7183      	strb	r3, [r0, #6]
 801ab26:	79c3      	ldrb	r3, [r0, #7]
 801ab28:	6101      	str	r1, [r0, #16]
 801ab2a:	f365 0306 	bfi	r3, r5, #0, #7
 801ab2e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801ab32:	8282      	strh	r2, [r0, #20]
 801ab34:	f365 13c7 	bfi	r3, r5, #7, #1
 801ab38:	71c3      	strb	r3, [r0, #7]
 801ab3a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801ab3e:	7203      	strb	r3, [r0, #8]
 801ab40:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801ab44:	7243      	strb	r3, [r0, #9]
 801ab46:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801ab4a:	8143      	strh	r3, [r0, #10]
 801ab4c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801ab50:	8183      	strh	r3, [r0, #12]
 801ab52:	4b01      	ldr	r3, [pc, #4]	; (801ab58 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801ab54:	6003      	str	r3, [r0, #0]
 801ab56:	bd30      	pop	{r4, r5, pc}
 801ab58:	08029d30 	.word	0x08029d30

0801ab5c <_ZNK8touchgfx9ConstFont4findEt>:
 801ab5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ab5e:	8a84      	ldrh	r4, [r0, #20]
 801ab60:	2500      	movs	r5, #0
 801ab62:	260e      	movs	r6, #14
 801ab64:	3c01      	subs	r4, #1
 801ab66:	42a5      	cmp	r5, r4
 801ab68:	dc0c      	bgt.n	801ab84 <_ZNK8touchgfx9ConstFont4findEt+0x28>
 801ab6a:	192a      	adds	r2, r5, r4
 801ab6c:	6903      	ldr	r3, [r0, #16]
 801ab6e:	1052      	asrs	r2, r2, #1
 801ab70:	fb06 3302 	mla	r3, r6, r2, r3
 801ab74:	889f      	ldrh	r7, [r3, #4]
 801ab76:	428f      	cmp	r7, r1
 801ab78:	d901      	bls.n	801ab7e <_ZNK8touchgfx9ConstFont4findEt+0x22>
 801ab7a:	1e54      	subs	r4, r2, #1
 801ab7c:	e7f3      	b.n	801ab66 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801ab7e:	d202      	bcs.n	801ab86 <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 801ab80:	1c55      	adds	r5, r2, #1
 801ab82:	e7f0      	b.n	801ab66 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801ab84:	2300      	movs	r3, #0
 801ab86:	4618      	mov	r0, r3
 801ab88:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ab8a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801ab8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab8c:	4605      	mov	r5, r0
 801ab8e:	4617      	mov	r7, r2
 801ab90:	461e      	mov	r6, r3
 801ab92:	f7ff ffe3 	bl	801ab5c <_ZNK8touchgfx9ConstFont4findEt>
 801ab96:	b9e0      	cbnz	r0, 801abd2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 801ab98:	b911      	cbnz	r1, 801aba0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 801ab9a:	2400      	movs	r4, #0
 801ab9c:	4620      	mov	r0, r4
 801ab9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aba0:	290a      	cmp	r1, #10
 801aba2:	d0fa      	beq.n	801ab9a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801aba4:	682b      	ldr	r3, [r5, #0]
 801aba6:	4628      	mov	r0, r5
 801aba8:	691b      	ldr	r3, [r3, #16]
 801abaa:	4798      	blx	r3
 801abac:	4601      	mov	r1, r0
 801abae:	4628      	mov	r0, r5
 801abb0:	f7ff ffd4 	bl	801ab5c <_ZNK8touchgfx9ConstFont4findEt>
 801abb4:	4604      	mov	r4, r0
 801abb6:	2800      	cmp	r0, #0
 801abb8:	d0ef      	beq.n	801ab9a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801abba:	682b      	ldr	r3, [r5, #0]
 801abbc:	4621      	mov	r1, r4
 801abbe:	4628      	mov	r0, r5
 801abc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801abc2:	4798      	blx	r3
 801abc4:	6038      	str	r0, [r7, #0]
 801abc6:	682b      	ldr	r3, [r5, #0]
 801abc8:	4628      	mov	r0, r5
 801abca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801abcc:	4798      	blx	r3
 801abce:	7030      	strb	r0, [r6, #0]
 801abd0:	e7e4      	b.n	801ab9c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 801abd2:	4604      	mov	r4, r0
 801abd4:	e7f1      	b.n	801abba <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

0801abd6 <_ZN8touchgfx6memsetEPvhm>:
 801abd6:	4402      	add	r2, r0
 801abd8:	4290      	cmp	r0, r2
 801abda:	d002      	beq.n	801abe2 <_ZN8touchgfx6memsetEPvhm+0xc>
 801abdc:	f800 1b01 	strb.w	r1, [r0], #1
 801abe0:	e7fa      	b.n	801abd8 <_ZN8touchgfx6memsetEPvhm+0x2>
 801abe2:	4770      	bx	lr

0801abe4 <_ZN8touchgfx3clzEl>:
 801abe4:	b1e8      	cbz	r0, 801ac22 <_ZN8touchgfx3clzEl+0x3e>
 801abe6:	2800      	cmp	r0, #0
 801abe8:	bfb8      	it	lt
 801abea:	4240      	neglt	r0, r0
 801abec:	0c03      	lsrs	r3, r0, #16
 801abee:	041b      	lsls	r3, r3, #16
 801abf0:	b9ab      	cbnz	r3, 801ac1e <_ZN8touchgfx3clzEl+0x3a>
 801abf2:	0400      	lsls	r0, r0, #16
 801abf4:	2310      	movs	r3, #16
 801abf6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801abfa:	bf04      	itt	eq
 801abfc:	0200      	lsleq	r0, r0, #8
 801abfe:	3308      	addeq	r3, #8
 801ac00:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801ac04:	bf04      	itt	eq
 801ac06:	0100      	lsleq	r0, r0, #4
 801ac08:	3304      	addeq	r3, #4
 801ac0a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801ac0e:	bf04      	itt	eq
 801ac10:	0080      	lsleq	r0, r0, #2
 801ac12:	3302      	addeq	r3, #2
 801ac14:	2800      	cmp	r0, #0
 801ac16:	bfa8      	it	ge
 801ac18:	3301      	addge	r3, #1
 801ac1a:	1e58      	subs	r0, r3, #1
 801ac1c:	4770      	bx	lr
 801ac1e:	2300      	movs	r3, #0
 801ac20:	e7e9      	b.n	801abf6 <_ZN8touchgfx3clzEl+0x12>
 801ac22:	201f      	movs	r0, #31
 801ac24:	4770      	bx	lr

0801ac26 <_ZN8touchgfx6muldivElllRl>:
 801ac26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac2a:	4604      	mov	r4, r0
 801ac2c:	4698      	mov	r8, r3
 801ac2e:	2601      	movs	r6, #1
 801ac30:	f7ff ffd8 	bl	801abe4 <_ZN8touchgfx3clzEl>
 801ac34:	2c00      	cmp	r4, #0
 801ac36:	fa04 f500 	lsl.w	r5, r4, r0
 801ac3a:	fa06 f600 	lsl.w	r6, r6, r0
 801ac3e:	bfba      	itte	lt
 801ac40:	f04f 37ff 	movlt.w	r7, #4294967295
 801ac44:	4264      	neglt	r4, r4
 801ac46:	2701      	movge	r7, #1
 801ac48:	2900      	cmp	r1, #0
 801ac4a:	f106 36ff 	add.w	r6, r6, #4294967295
 801ac4e:	bfbc      	itt	lt
 801ac50:	4249      	neglt	r1, r1
 801ac52:	427f      	neglt	r7, r7
 801ac54:	2a00      	cmp	r2, #0
 801ac56:	fa41 fc00 	asr.w	ip, r1, r0
 801ac5a:	ea01 0106 	and.w	r1, r1, r6
 801ac5e:	bfb8      	it	lt
 801ac60:	427f      	neglt	r7, r7
 801ac62:	fb04 f401 	mul.w	r4, r4, r1
 801ac66:	fb95 f3f2 	sdiv	r3, r5, r2
 801ac6a:	fb02 5513 	mls	r5, r2, r3, r5
 801ac6e:	bfb8      	it	lt
 801ac70:	4252      	neglt	r2, r2
 801ac72:	fb94 f0f2 	sdiv	r0, r4, r2
 801ac76:	fb02 4410 	mls	r4, r2, r0, r4
 801ac7a:	fb0c 4405 	mla	r4, ip, r5, r4
 801ac7e:	fb94 f1f2 	sdiv	r1, r4, r2
 801ac82:	4408      	add	r0, r1
 801ac84:	fb02 4211 	mls	r2, r2, r1, r4
 801ac88:	fb0c 0003 	mla	r0, ip, r3, r0
 801ac8c:	f8c8 2000 	str.w	r2, [r8]
 801ac90:	4378      	muls	r0, r7
 801ac92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ac96 <_ZN8touchgfx10ClickEventD1Ev>:
 801ac96:	4770      	bx	lr

0801ac98 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801ac98:	2000      	movs	r0, #0
 801ac9a:	4770      	bx	lr

0801ac9c <_ZN8touchgfx9DragEventD1Ev>:
 801ac9c:	4770      	bx	lr

0801ac9e <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801ac9e:	2001      	movs	r0, #1
 801aca0:	4770      	bx	lr

0801aca2 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801aca2:	2002      	movs	r0, #2
 801aca4:	4770      	bx	lr

0801aca6 <_ZN8touchgfx12GestureEventD1Ev>:
 801aca6:	4770      	bx	lr

0801aca8 <_ZN8touchgfx10ClickEventD0Ev>:
 801aca8:	b510      	push	{r4, lr}
 801acaa:	4604      	mov	r4, r0
 801acac:	210c      	movs	r1, #12
 801acae:	f00b fa11 	bl	80260d4 <_ZdlPvj>
 801acb2:	4620      	mov	r0, r4
 801acb4:	bd10      	pop	{r4, pc}

0801acb6 <_ZN8touchgfx9DragEventD0Ev>:
 801acb6:	b510      	push	{r4, lr}
 801acb8:	4604      	mov	r4, r0
 801acba:	2110      	movs	r1, #16
 801acbc:	f00b fa0a 	bl	80260d4 <_ZdlPvj>
 801acc0:	4620      	mov	r0, r4
 801acc2:	bd10      	pop	{r4, pc}

0801acc4 <_ZN8touchgfx12GestureEventD0Ev>:
 801acc4:	b510      	push	{r4, lr}
 801acc6:	4604      	mov	r4, r0
 801acc8:	210c      	movs	r1, #12
 801acca:	f00b fa03 	bl	80260d4 <_ZdlPvj>
 801acce:	4620      	mov	r0, r4
 801acd0:	bd10      	pop	{r4, pc}
	...

0801acd4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801acd4:	b530      	push	{r4, r5, lr}
 801acd6:	460d      	mov	r5, r1
 801acd8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801acda:	b087      	sub	sp, #28
 801acdc:	4604      	mov	r4, r0
 801acde:	b301      	cbz	r1, 801ad22 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801ace0:	a801      	add	r0, sp, #4
 801ace2:	f7ff ff06 	bl	801aaf2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ace6:	892a      	ldrh	r2, [r5, #8]
 801ace8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801acec:	7928      	ldrb	r0, [r5, #4]
 801acee:	1ad2      	subs	r2, r2, r3
 801acf0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801acf2:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801acf6:	441a      	add	r2, r3
 801acf8:	896b      	ldrh	r3, [r5, #10]
 801acfa:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801acfe:	f88d 0010 	strb.w	r0, [sp, #16]
 801ad02:	1b5b      	subs	r3, r3, r5
 801ad04:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801ad06:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801ad08:	442b      	add	r3, r5
 801ad0a:	4d07      	ldr	r5, [pc, #28]	; (801ad28 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801ad0c:	f8ad 1012 	strh.w	r1, [sp, #18]
 801ad10:	a903      	add	r1, sp, #12
 801ad12:	9503      	str	r5, [sp, #12]
 801ad14:	f8ad 2014 	strh.w	r2, [sp, #20]
 801ad18:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ad1c:	6803      	ldr	r3, [r0, #0]
 801ad1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ad20:	4798      	blx	r3
 801ad22:	b007      	add	sp, #28
 801ad24:	bd30      	pop	{r4, r5, pc}
 801ad26:	bf00      	nop
 801ad28:	08029dac 	.word	0x08029dac

0801ad2c <_ZNK8touchgfx4Rect9intersectEss>:
 801ad2c:	b510      	push	{r4, lr}
 801ad2e:	f9b0 3000 	ldrsh.w	r3, [r0]
 801ad32:	428b      	cmp	r3, r1
 801ad34:	dc10      	bgt.n	801ad58 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801ad36:	8884      	ldrh	r4, [r0, #4]
 801ad38:	4423      	add	r3, r4
 801ad3a:	b21b      	sxth	r3, r3
 801ad3c:	4299      	cmp	r1, r3
 801ad3e:	da0b      	bge.n	801ad58 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801ad40:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801ad44:	4293      	cmp	r3, r2
 801ad46:	dc07      	bgt.n	801ad58 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801ad48:	88c0      	ldrh	r0, [r0, #6]
 801ad4a:	4418      	add	r0, r3
 801ad4c:	b200      	sxth	r0, r0
 801ad4e:	4282      	cmp	r2, r0
 801ad50:	bfac      	ite	ge
 801ad52:	2000      	movge	r0, #0
 801ad54:	2001      	movlt	r0, #1
 801ad56:	bd10      	pop	{r4, pc}
 801ad58:	2000      	movs	r0, #0
 801ad5a:	e7fc      	b.n	801ad56 <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801ad5c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801ad5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ad5e:	460c      	mov	r4, r1
 801ad60:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801ad62:	b089      	sub	sp, #36	; 0x24
 801ad64:	4605      	mov	r5, r0
 801ad66:	2900      	cmp	r1, #0
 801ad68:	d054      	beq.n	801ae14 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801ad6a:	4668      	mov	r0, sp
 801ad6c:	f7ff fec1 	bl	801aaf2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ad70:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801ad72:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801ad74:	4668      	mov	r0, sp
 801ad76:	8922      	ldrh	r2, [r4, #8]
 801ad78:	88e1      	ldrh	r1, [r4, #6]
 801ad7a:	443a      	add	r2, r7
 801ad7c:	4431      	add	r1, r6
 801ad7e:	b212      	sxth	r2, r2
 801ad80:	b209      	sxth	r1, r1
 801ad82:	f7ff ffd3 	bl	801ad2c <_ZNK8touchgfx4Rect9intersectEss>
 801ad86:	b1d0      	cbz	r0, 801adbe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801ad88:	89a2      	ldrh	r2, [r4, #12]
 801ad8a:	4668      	mov	r0, sp
 801ad8c:	8961      	ldrh	r1, [r4, #10]
 801ad8e:	443a      	add	r2, r7
 801ad90:	4431      	add	r1, r6
 801ad92:	b212      	sxth	r2, r2
 801ad94:	b209      	sxth	r1, r1
 801ad96:	f7ff ffc9 	bl	801ad2c <_ZNK8touchgfx4Rect9intersectEss>
 801ad9a:	4603      	mov	r3, r0
 801ad9c:	b978      	cbnz	r0, 801adbe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801ad9e:	4a1e      	ldr	r2, [pc, #120]	; (801ae18 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801ada0:	a904      	add	r1, sp, #16
 801ada2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801ada4:	9204      	str	r2, [sp, #16]
 801ada6:	2202      	movs	r2, #2
 801ada8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801adac:	f88d 2014 	strb.w	r2, [sp, #20]
 801adb0:	f8ad 3018 	strh.w	r3, [sp, #24]
 801adb4:	f8ad 301a 	strh.w	r3, [sp, #26]
 801adb8:	6803      	ldr	r3, [r0, #0]
 801adba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801adbc:	4798      	blx	r3
 801adbe:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801adc0:	a802      	add	r0, sp, #8
 801adc2:	f7ff fe96 	bl	801aaf2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801adc6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801adca:	88e0      	ldrh	r0, [r4, #6]
 801adcc:	8961      	ldrh	r1, [r4, #10]
 801adce:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801add2:	1a80      	subs	r0, r0, r2
 801add4:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801add8:	1a89      	subs	r1, r1, r2
 801adda:	8923      	ldrh	r3, [r4, #8]
 801addc:	4460      	add	r0, ip
 801adde:	89a2      	ldrh	r2, [r4, #12]
 801ade0:	4461      	add	r1, ip
 801ade2:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801ade4:	eba3 030e 	sub.w	r3, r3, lr
 801ade8:	eba2 020e 	sub.w	r2, r2, lr
 801adec:	f8ad 0016 	strh.w	r0, [sp, #22]
 801adf0:	7927      	ldrb	r7, [r4, #4]
 801adf2:	4433      	add	r3, r6
 801adf4:	4432      	add	r2, r6
 801adf6:	4c09      	ldr	r4, [pc, #36]	; (801ae1c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801adf8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801adfa:	f8ad 101a 	strh.w	r1, [sp, #26]
 801adfe:	a904      	add	r1, sp, #16
 801ae00:	9404      	str	r4, [sp, #16]
 801ae02:	f88d 7014 	strb.w	r7, [sp, #20]
 801ae06:	f8ad 3018 	strh.w	r3, [sp, #24]
 801ae0a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801ae0e:	6803      	ldr	r3, [r0, #0]
 801ae10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ae12:	4798      	blx	r3
 801ae14:	b009      	add	sp, #36	; 0x24
 801ae16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ae18:	08029d84 	.word	0x08029d84
 801ae1c:	08029d98 	.word	0x08029d98

0801ae20 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801ae20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae24:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801ae28:	b0a1      	sub	sp, #132	; 0x84
 801ae2a:	4604      	mov	r4, r0
 801ae2c:	460d      	mov	r5, r1
 801ae2e:	790b      	ldrb	r3, [r1, #4]
 801ae30:	f1b9 0f00 	cmp.w	r9, #0
 801ae34:	d00f      	beq.n	801ae56 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801ae36:	2b00      	cmp	r3, #0
 801ae38:	f040 80a2 	bne.w	801af80 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801ae3c:	b021      	add	sp, #132	; 0x84
 801ae3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae42:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801ae46:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801ae4a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801ae4e:	1d20      	adds	r0, r4, #4
 801ae50:	f7fb ff5c 	bl	8016d0c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801ae54:	e094      	b.n	801af80 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801ae56:	2b00      	cmp	r3, #0
 801ae58:	d1f0      	bne.n	801ae3c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801ae5a:	4b5f      	ldr	r3, [pc, #380]	; (801afd8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801ae5c:	681b      	ldr	r3, [r3, #0]
 801ae5e:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801ae62:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801ae66:	f1ba 0f03 	cmp.w	sl, #3
 801ae6a:	ddea      	ble.n	801ae42 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 801ae6c:	f1ba 0f0c 	cmp.w	sl, #12
 801ae70:	f04f 0303 	mov.w	r3, #3
 801ae74:	f04f 0600 	mov.w	r6, #0
 801ae78:	4958      	ldr	r1, [pc, #352]	; (801afdc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801ae7a:	bfd8      	it	le
 801ae7c:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801ae80:	960a      	str	r6, [sp, #40]	; 0x28
 801ae82:	bfd8      	it	le
 801ae84:	fb92 f3f3 	sdivle	r3, r2, r3
 801ae88:	9301      	str	r3, [sp, #4]
 801ae8a:	4b55      	ldr	r3, [pc, #340]	; (801afe0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801ae8c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ae90:	4b54      	ldr	r3, [pc, #336]	; (801afe4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801ae92:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801ae96:	2248      	movs	r2, #72	; 0x48
 801ae98:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ae9c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801aea0:	ab0e      	add	r3, sp, #56	; 0x38
 801aea2:	4618      	mov	r0, r3
 801aea4:	f00b fc06 	bl	80266b4 <memcpy>
 801aea8:	f04f 32ff 	mov.w	r2, #4294967295
 801aeac:	f8cd a008 	str.w	sl, [sp, #8]
 801aeb0:	e9cd 2006 	strd	r2, r0, [sp, #24]
 801aeb4:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801aeb8:	46b3      	mov	fp, r6
 801aeba:	fb93 f3f2 	sdiv	r3, r3, r2
 801aebe:	b29b      	uxth	r3, r3
 801aec0:	9303      	str	r3, [sp, #12]
 801aec2:	2300      	movs	r3, #0
 801aec4:	9a03      	ldr	r2, [sp, #12]
 801aec6:	88ef      	ldrh	r7, [r5, #6]
 801aec8:	a80a      	add	r0, sp, #40	; 0x28
 801aeca:	9309      	str	r3, [sp, #36]	; 0x24
 801aecc:	9b07      	ldr	r3, [sp, #28]
 801aece:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801aed2:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801aed6:	fb13 f302 	smulbb	r3, r3, r2
 801aeda:	b29b      	uxth	r3, r3
 801aedc:	9304      	str	r3, [sp, #16]
 801aede:	9b07      	ldr	r3, [sp, #28]
 801aee0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801aee4:	685b      	ldr	r3, [r3, #4]
 801aee6:	fb13 f302 	smulbb	r3, r3, r2
 801aeea:	b29b      	uxth	r3, r3
 801aeec:	9305      	str	r3, [sp, #20]
 801aeee:	9b04      	ldr	r3, [sp, #16]
 801aef0:	441f      	add	r7, r3
 801aef2:	9b05      	ldr	r3, [sp, #20]
 801aef4:	4498      	add	r8, r3
 801aef6:	b23f      	sxth	r7, r7
 801aef8:	fa0f f888 	sxth.w	r8, r8
 801aefc:	4639      	mov	r1, r7
 801aefe:	4642      	mov	r2, r8
 801af00:	f7ff ff14 	bl	801ad2c <_ZNK8touchgfx4Rect9intersectEss>
 801af04:	b380      	cbz	r0, 801af68 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801af06:	4639      	mov	r1, r7
 801af08:	ab09      	add	r3, sp, #36	; 0x24
 801af0a:	4642      	mov	r2, r8
 801af0c:	1d20      	adds	r0, r4, #4
 801af0e:	f7fb fefd 	bl	8016d0c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801af12:	9909      	ldr	r1, [sp, #36]	; 0x24
 801af14:	b341      	cbz	r1, 801af68 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801af16:	4549      	cmp	r1, r9
 801af18:	d026      	beq.n	801af68 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801af1a:	a80c      	add	r0, sp, #48	; 0x30
 801af1c:	f7ff fde9 	bl	801aaf2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801af20:	2002      	movs	r0, #2
 801af22:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801af26:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801af2a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801af2e:	fb92 f2f0 	sdiv	r2, r2, r0
 801af32:	440a      	add	r2, r1
 801af34:	1a99      	subs	r1, r3, r2
 801af36:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801af3a:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801af3e:	fb93 f3f0 	sdiv	r3, r3, r0
 801af42:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801af46:	4403      	add	r3, r0
 801af48:	1ad3      	subs	r3, r2, r3
 801af4a:	9a06      	ldr	r2, [sp, #24]
 801af4c:	435b      	muls	r3, r3
 801af4e:	fb01 3301 	mla	r3, r1, r1, r3
 801af52:	4293      	cmp	r3, r2
 801af54:	d208      	bcs.n	801af68 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801af56:	9a04      	ldr	r2, [sp, #16]
 801af58:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801af5c:	86a2      	strh	r2, [r4, #52]	; 0x34
 801af5e:	9a05      	ldr	r2, [sp, #20]
 801af60:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801af64:	86e2      	strh	r2, [r4, #54]	; 0x36
 801af66:	9306      	str	r3, [sp, #24]
 801af68:	f10b 0b02 	add.w	fp, fp, #2
 801af6c:	f1bb 0f08 	cmp.w	fp, #8
 801af70:	dda7      	ble.n	801aec2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 801af72:	9b02      	ldr	r3, [sp, #8]
 801af74:	3601      	adds	r6, #1
 801af76:	4453      	add	r3, sl
 801af78:	9302      	str	r3, [sp, #8]
 801af7a:	9b01      	ldr	r3, [sp, #4]
 801af7c:	42b3      	cmp	r3, r6
 801af7e:	d199      	bne.n	801aeb4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 801af80:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801af82:	2900      	cmp	r1, #0
 801af84:	f43f af5a 	beq.w	801ae3c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801af88:	a80c      	add	r0, sp, #48	; 0x30
 801af8a:	2600      	movs	r6, #0
 801af8c:	f7ff fdb1 	bl	801aaf2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801af90:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801af94:	88ea      	ldrh	r2, [r5, #6]
 801af96:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801af9a:	1ad2      	subs	r2, r2, r3
 801af9c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801af9e:	7929      	ldrb	r1, [r5, #4]
 801afa0:	441a      	add	r2, r3
 801afa2:	892b      	ldrh	r3, [r5, #8]
 801afa4:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801afa8:	a90e      	add	r1, sp, #56	; 0x38
 801afaa:	1a1b      	subs	r3, r3, r0
 801afac:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801afae:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801afb2:	4403      	add	r3, r0
 801afb4:	480c      	ldr	r0, [pc, #48]	; (801afe8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 801afb6:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801afba:	900e      	str	r0, [sp, #56]	; 0x38
 801afbc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801afbe:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801afc2:	6803      	ldr	r3, [r0, #0]
 801afc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801afc6:	4798      	blx	r3
 801afc8:	792b      	ldrb	r3, [r5, #4]
 801afca:	2b00      	cmp	r3, #0
 801afcc:	f43f af36 	beq.w	801ae3c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801afd0:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801afd4:	e732      	b.n	801ae3c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801afd6:	bf00      	nop
 801afd8:	2000c5b4 	.word	0x2000c5b4
 801afdc:	08027bbc 	.word	0x08027bbc
 801afe0:	2000c5a8 	.word	0x2000c5a8
 801afe4:	2000c5aa 	.word	0x2000c5aa
 801afe8:	08029d84 	.word	0x08029d84

0801afec <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801afec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801afee:	4604      	mov	r4, r0
 801aff0:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801aff4:	3201      	adds	r2, #1
 801aff6:	d112      	bne.n	801b01e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801aff8:	2500      	movs	r5, #0
 801affa:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801affe:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b002:	6803      	ldr	r3, [r0, #0]
 801b004:	9500      	str	r5, [sp, #0]
 801b006:	466d      	mov	r5, sp
 801b008:	f8ad 1004 	strh.w	r1, [sp, #4]
 801b00c:	f8ad 2006 	strh.w	r2, [sp, #6]
 801b010:	4629      	mov	r1, r5
 801b012:	6a1b      	ldr	r3, [r3, #32]
 801b014:	4798      	blx	r3
 801b016:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b01a:	e884 0003 	stmia.w	r4, {r0, r1}
 801b01e:	4620      	mov	r0, r4
 801b020:	b003      	add	sp, #12
 801b022:	bd30      	pop	{r4, r5, pc}

0801b024 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801b024:	b513      	push	{r0, r1, r4, lr}
 801b026:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801b02a:	4604      	mov	r4, r0
 801b02c:	3301      	adds	r3, #1
 801b02e:	d109      	bne.n	801b044 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801b030:	4601      	mov	r1, r0
 801b032:	4668      	mov	r0, sp
 801b034:	f7ff fd5d 	bl	801aaf2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b038:	f8bd 3000 	ldrh.w	r3, [sp]
 801b03c:	8423      	strh	r3, [r4, #32]
 801b03e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b042:	8463      	strh	r3, [r4, #34]	; 0x22
 801b044:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801b048:	b002      	add	sp, #8
 801b04a:	bd10      	pop	{r4, pc}

0801b04c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801b04c:	b513      	push	{r0, r1, r4, lr}
 801b04e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801b052:	4604      	mov	r4, r0
 801b054:	3301      	adds	r3, #1
 801b056:	d109      	bne.n	801b06c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801b058:	4601      	mov	r1, r0
 801b05a:	4668      	mov	r0, sp
 801b05c:	f7ff fd49 	bl	801aaf2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b060:	f8bd 3000 	ldrh.w	r3, [sp]
 801b064:	8423      	strh	r3, [r4, #32]
 801b066:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b06a:	8463      	strh	r3, [r4, #34]	; 0x22
 801b06c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801b070:	b002      	add	sp, #8
 801b072:	bd10      	pop	{r4, pc}

0801b074 <_ZN8touchgfx6ScreenC1Ev>:
 801b074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b076:	4605      	mov	r5, r0
 801b078:	4b17      	ldr	r3, [pc, #92]	; (801b0d8 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801b07a:	2200      	movs	r2, #0
 801b07c:	4917      	ldr	r1, [pc, #92]	; (801b0dc <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801b07e:	f845 3b04 	str.w	r3, [r5], #4
 801b082:	2301      	movs	r3, #1
 801b084:	8102      	strh	r2, [r0, #8]
 801b086:	4604      	mov	r4, r0
 801b088:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 801b08c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801b090:	4b13      	ldr	r3, [pc, #76]	; (801b0e0 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801b092:	8142      	strh	r2, [r0, #10]
 801b094:	f9b3 7000 	ldrsh.w	r7, [r3]
 801b098:	4b12      	ldr	r3, [pc, #72]	; (801b0e4 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 801b09a:	8182      	strh	r2, [r0, #12]
 801b09c:	81c2      	strh	r2, [r0, #14]
 801b09e:	8202      	strh	r2, [r0, #16]
 801b0a0:	8242      	strh	r2, [r0, #18]
 801b0a2:	8282      	strh	r2, [r0, #20]
 801b0a4:	82c2      	strh	r2, [r0, #22]
 801b0a6:	6202      	str	r2, [r0, #32]
 801b0a8:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801b0ac:	6342      	str	r2, [r0, #52]	; 0x34
 801b0ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b0b2:	6041      	str	r1, [r0, #4]
 801b0b4:	4611      	mov	r1, r2
 801b0b6:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801b0ba:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 801b0be:	4628      	mov	r0, r5
 801b0c0:	f7f5 fb77 	bl	80107b2 <_ZN8touchgfx8Drawable5setXYEss>
 801b0c4:	4639      	mov	r1, r7
 801b0c6:	4628      	mov	r0, r5
 801b0c8:	f7f5 fb91 	bl	80107ee <_ZN8touchgfx8Drawable8setWidthEs>
 801b0cc:	4628      	mov	r0, r5
 801b0ce:	4631      	mov	r1, r6
 801b0d0:	f7f5 fb9c 	bl	801080c <_ZN8touchgfx8Drawable9setHeightEs>
 801b0d4:	4620      	mov	r0, r4
 801b0d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b0d8:	08029dc0 	.word	0x08029dc0
 801b0dc:	08028a94 	.word	0x08028a94
 801b0e0:	2000c5a8 	.word	0x2000c5a8
 801b0e4:	2000c5aa 	.word	0x2000c5aa

0801b0e8 <_ZN8touchgfx6Screen4drawEv>:
 801b0e8:	4b09      	ldr	r3, [pc, #36]	; (801b110 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801b0ea:	b507      	push	{r0, r1, r2, lr}
 801b0ec:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b0f0:	2100      	movs	r1, #0
 801b0f2:	4b08      	ldr	r3, [pc, #32]	; (801b114 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801b0f4:	9100      	str	r1, [sp, #0]
 801b0f6:	4669      	mov	r1, sp
 801b0f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b0fc:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b100:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b104:	6803      	ldr	r3, [r0, #0]
 801b106:	689b      	ldr	r3, [r3, #8]
 801b108:	4798      	blx	r3
 801b10a:	b003      	add	sp, #12
 801b10c:	f85d fb04 	ldr.w	pc, [sp], #4
 801b110:	2000c5a8 	.word	0x2000c5a8
 801b114:	2000c5aa 	.word	0x2000c5aa

0801b118 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801b118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b11c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801b120:	b089      	sub	sp, #36	; 0x24
 801b122:	4680      	mov	r8, r0
 801b124:	460c      	mov	r4, r1
 801b126:	4615      	mov	r5, r2
 801b128:	b16b      	cbz	r3, 801b146 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801b12a:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801b12e:	b153      	cbz	r3, 801b146 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801b130:	4628      	mov	r0, r5
 801b132:	f7ff ff5b 	bl	801afec <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b136:	4621      	mov	r1, r4
 801b138:	f7fe ffc2 	bl	801a0c0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b13c:	69eb      	ldr	r3, [r5, #28]
 801b13e:	b928      	cbnz	r0, 801b14c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 801b140:	461d      	mov	r5, r3
 801b142:	2b00      	cmp	r3, #0
 801b144:	d1f4      	bne.n	801b130 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 801b146:	b009      	add	sp, #36	; 0x24
 801b148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b14c:	ae04      	add	r6, sp, #16
 801b14e:	2b00      	cmp	r3, #0
 801b150:	d051      	beq.n	801b1f6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801b152:	682b      	ldr	r3, [r5, #0]
 801b154:	4629      	mov	r1, r5
 801b156:	a802      	add	r0, sp, #8
 801b158:	68db      	ldr	r3, [r3, #12]
 801b15a:	4798      	blx	r3
 801b15c:	4628      	mov	r0, r5
 801b15e:	f7ff ff61 	bl	801b024 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801b162:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801b166:	4407      	add	r7, r0
 801b168:	4628      	mov	r0, r5
 801b16a:	f7ff ff6f 	bl	801b04c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801b16e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b172:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801b176:	b23f      	sxth	r7, r7
 801b178:	4418      	add	r0, r3
 801b17a:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801b17e:	4621      	mov	r1, r4
 801b180:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b184:	f8ad 0012 	strh.w	r0, [sp, #18]
 801b188:	4630      	mov	r0, r6
 801b18a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b18e:	f8ad 7010 	strh.w	r7, [sp, #16]
 801b192:	f7fb fe6d 	bl	8016e70 <_ZN8touchgfx4RectaNERKS0_>
 801b196:	4628      	mov	r0, r5
 801b198:	f7ff ff28 	bl	801afec <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b19c:	ab06      	add	r3, sp, #24
 801b19e:	4602      	mov	r2, r0
 801b1a0:	e896 0003 	ldmia.w	r6, {r0, r1}
 801b1a4:	e883 0003 	stmia.w	r3, {r0, r1}
 801b1a8:	4611      	mov	r1, r2
 801b1aa:	4618      	mov	r0, r3
 801b1ac:	f7fb fe60 	bl	8016e70 <_ZN8touchgfx4RectaNERKS0_>
 801b1b0:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801b1b4:	f9b4 1000 	ldrsh.w	r1, [r4]
 801b1b8:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801b1bc:	4299      	cmp	r1, r3
 801b1be:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801b1c2:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801b1c6:	d10b      	bne.n	801b1e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801b1c8:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b1cc:	4552      	cmp	r2, sl
 801b1ce:	d107      	bne.n	801b1e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801b1d0:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801b1d4:	455a      	cmp	r2, fp
 801b1d6:	d103      	bne.n	801b1e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801b1d8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801b1dc:	454a      	cmp	r2, r9
 801b1de:	d00a      	beq.n	801b1f6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801b1e0:	f1bb 0f00 	cmp.w	fp, #0
 801b1e4:	d002      	beq.n	801b1ec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd4>
 801b1e6:	f1b9 0f00 	cmp.w	r9, #0
 801b1ea:	d12e      	bne.n	801b24a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x132>
 801b1ec:	69ea      	ldr	r2, [r5, #28]
 801b1ee:	4621      	mov	r1, r4
 801b1f0:	4640      	mov	r0, r8
 801b1f2:	f7ff ff91 	bl	801b118 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b1f6:	4628      	mov	r0, r5
 801b1f8:	f7ff fef8 	bl	801afec <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b1fc:	6861      	ldr	r1, [r4, #4]
 801b1fe:	4602      	mov	r2, r0
 801b200:	4633      	mov	r3, r6
 801b202:	6820      	ldr	r0, [r4, #0]
 801b204:	c303      	stmia	r3!, {r0, r1}
 801b206:	4611      	mov	r1, r2
 801b208:	4630      	mov	r0, r6
 801b20a:	f7fb fe31 	bl	8016e70 <_ZN8touchgfx4RectaNERKS0_>
 801b20e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801b212:	2b00      	cmp	r3, #0
 801b214:	d097      	beq.n	801b146 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801b216:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801b21a:	2b00      	cmp	r3, #0
 801b21c:	d093      	beq.n	801b146 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801b21e:	4628      	mov	r0, r5
 801b220:	f7ff ff00 	bl	801b024 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801b224:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801b228:	1a18      	subs	r0, r3, r0
 801b22a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801b22e:	4628      	mov	r0, r5
 801b230:	f7ff ff0c 	bl	801b04c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801b234:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801b238:	4631      	mov	r1, r6
 801b23a:	1a18      	subs	r0, r3, r0
 801b23c:	f8ad 0012 	strh.w	r0, [sp, #18]
 801b240:	4628      	mov	r0, r5
 801b242:	682b      	ldr	r3, [r5, #0]
 801b244:	689b      	ldr	r3, [r3, #8]
 801b246:	4798      	blx	r3
 801b248:	e77d      	b.n	801b146 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801b24a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b24e:	fa1f f08a 	uxth.w	r0, sl
 801b252:	4552      	cmp	r2, sl
 801b254:	9000      	str	r0, [sp, #0]
 801b256:	da12      	bge.n	801b27e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x166>
 801b258:	9301      	str	r3, [sp, #4]
 801b25a:	9b00      	ldr	r3, [sp, #0]
 801b25c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b260:	f8ad 2012 	strh.w	r2, [sp, #18]
 801b264:	1a9a      	subs	r2, r3, r2
 801b266:	f8ad 1010 	strh.w	r1, [sp, #16]
 801b26a:	4631      	mov	r1, r6
 801b26c:	f8ad 0014 	strh.w	r0, [sp, #20]
 801b270:	4640      	mov	r0, r8
 801b272:	f8ad 2016 	strh.w	r2, [sp, #22]
 801b276:	69ea      	ldr	r2, [r5, #28]
 801b278:	f7ff ff4e 	bl	801b118 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b27c:	9b01      	ldr	r3, [sp, #4]
 801b27e:	f9b4 2000 	ldrsh.w	r2, [r4]
 801b282:	b29f      	uxth	r7, r3
 801b284:	429a      	cmp	r2, r3
 801b286:	da0d      	bge.n	801b2a4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18c>
 801b288:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b28c:	1aba      	subs	r2, r7, r2
 801b28e:	f8ad a012 	strh.w	sl, [sp, #18]
 801b292:	4631      	mov	r1, r6
 801b294:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b298:	4640      	mov	r0, r8
 801b29a:	f8ad 9016 	strh.w	r9, [sp, #22]
 801b29e:	69ea      	ldr	r2, [r5, #28]
 801b2a0:	f7ff ff3a 	bl	801b118 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b2a4:	8822      	ldrh	r2, [r4, #0]
 801b2a6:	445f      	add	r7, fp
 801b2a8:	88a3      	ldrh	r3, [r4, #4]
 801b2aa:	b2bf      	uxth	r7, r7
 801b2ac:	4413      	add	r3, r2
 801b2ae:	b23a      	sxth	r2, r7
 801b2b0:	b29b      	uxth	r3, r3
 801b2b2:	b219      	sxth	r1, r3
 801b2b4:	4291      	cmp	r1, r2
 801b2b6:	dd0d      	ble.n	801b2d4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1bc>
 801b2b8:	1bdb      	subs	r3, r3, r7
 801b2ba:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b2be:	f8ad a012 	strh.w	sl, [sp, #18]
 801b2c2:	4631      	mov	r1, r6
 801b2c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b2c8:	4640      	mov	r0, r8
 801b2ca:	f8ad 9016 	strh.w	r9, [sp, #22]
 801b2ce:	69ea      	ldr	r2, [r5, #28]
 801b2d0:	f7ff ff22 	bl	801b118 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b2d4:	88e2      	ldrh	r2, [r4, #6]
 801b2d6:	8863      	ldrh	r3, [r4, #2]
 801b2d8:	4413      	add	r3, r2
 801b2da:	9a00      	ldr	r2, [sp, #0]
 801b2dc:	444a      	add	r2, r9
 801b2de:	b29b      	uxth	r3, r3
 801b2e0:	fa1f f982 	uxth.w	r9, r2
 801b2e4:	b219      	sxth	r1, r3
 801b2e6:	fa0f f289 	sxth.w	r2, r9
 801b2ea:	428a      	cmp	r2, r1
 801b2ec:	da83      	bge.n	801b1f6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801b2ee:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b2f2:	eba3 0309 	sub.w	r3, r3, r9
 801b2f6:	f9b4 0000 	ldrsh.w	r0, [r4]
 801b2fa:	f8ad 1014 	strh.w	r1, [sp, #20]
 801b2fe:	4631      	mov	r1, r6
 801b300:	f8ad 0010 	strh.w	r0, [sp, #16]
 801b304:	f8ad 2012 	strh.w	r2, [sp, #18]
 801b308:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b30c:	69ea      	ldr	r2, [r5, #28]
 801b30e:	e76f      	b.n	801b1f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>

0801b310 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801b310:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b312:	2300      	movs	r3, #0
 801b314:	aa02      	add	r2, sp, #8
 801b316:	4604      	mov	r4, r0
 801b318:	3004      	adds	r0, #4
 801b31a:	f842 3d04 	str.w	r3, [r2, #-4]!
 801b31e:	460d      	mov	r5, r1
 801b320:	f7fb fe7d 	bl	801701e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801b324:	9a01      	ldr	r2, [sp, #4]
 801b326:	b11a      	cbz	r2, 801b330 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801b328:	4629      	mov	r1, r5
 801b32a:	4620      	mov	r0, r4
 801b32c:	f7ff fef4 	bl	801b118 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b330:	b003      	add	sp, #12
 801b332:	bd30      	pop	{r4, r5, pc}

0801b334 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801b334:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b336:	4602      	mov	r2, r0
 801b338:	4604      	mov	r4, r0
 801b33a:	460d      	mov	r5, r1
 801b33c:	466b      	mov	r3, sp
 801b33e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801b342:	6851      	ldr	r1, [r2, #4]
 801b344:	c303      	stmia	r3!, {r0, r1}
 801b346:	4629      	mov	r1, r5
 801b348:	4668      	mov	r0, sp
 801b34a:	f7fb fd91 	bl	8016e70 <_ZN8touchgfx4RectaNERKS0_>
 801b34e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801b352:	4669      	mov	r1, sp
 801b354:	b123      	cbz	r3, 801b360 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801b356:	4620      	mov	r0, r4
 801b358:	f7ff ffda 	bl	801b310 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801b35c:	b003      	add	sp, #12
 801b35e:	bd30      	pop	{r4, r5, pc}
 801b360:	1d20      	adds	r0, r4, #4
 801b362:	f7fb fe23 	bl	8016fac <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801b366:	e7f9      	b.n	801b35c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801b368 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801b368:	460b      	mov	r3, r1
 801b36a:	680a      	ldr	r2, [r1, #0]
 801b36c:	1d01      	adds	r1, r0, #4
 801b36e:	6952      	ldr	r2, [r2, #20]
 801b370:	4618      	mov	r0, r3
 801b372:	4710      	bx	r2

0801b374 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 801b374:	f011 0f40 	tst.w	r1, #64	; 0x40
 801b378:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 801b37c:	4b03      	ldr	r3, [pc, #12]	; (801b38c <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x18>)
 801b37e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801b382:	bf08      	it	eq
 801b384:	2300      	moveq	r3, #0
 801b386:	4308      	orrs	r0, r1
 801b388:	4318      	orrs	r0, r3
 801b38a:	4770      	bx	lr
 801b38c:	fffffe00 	.word	0xfffffe00

0801b390 <_ZN8touchgfx9GlyphNode6setTopEs>:
 801b390:	7b43      	ldrb	r3, [r0, #13]
 801b392:	7201      	strb	r1, [r0, #8]
 801b394:	b289      	uxth	r1, r1
 801b396:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 801b39a:	05ca      	lsls	r2, r1, #23
 801b39c:	bf48      	it	mi
 801b39e:	f043 0320 	orrmi.w	r3, r3, #32
 801b3a2:	7343      	strb	r3, [r0, #13]
 801b3a4:	058b      	lsls	r3, r1, #22
 801b3a6:	bf42      	ittt	mi
 801b3a8:	7b43      	ldrbmi	r3, [r0, #13]
 801b3aa:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801b3ae:	7343      	strbmi	r3, [r0, #13]
 801b3b0:	4770      	bx	lr

0801b3b2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801b3b2:	b530      	push	{r4, r5, lr}
 801b3b4:	2500      	movs	r5, #0
 801b3b6:	2401      	movs	r4, #1
 801b3b8:	6843      	ldr	r3, [r0, #4]
 801b3ba:	b913      	cbnz	r3, 801b3c2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801b3bc:	6803      	ldr	r3, [r0, #0]
 801b3be:	b1f3      	cbz	r3, 801b3fe <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801b3c0:	6043      	str	r3, [r0, #4]
 801b3c2:	7c03      	ldrb	r3, [r0, #16]
 801b3c4:	b143      	cbz	r3, 801b3d8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801b3c6:	68c3      	ldr	r3, [r0, #12]
 801b3c8:	b12b      	cbz	r3, 801b3d6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801b3ca:	881a      	ldrh	r2, [r3, #0]
 801b3cc:	b11a      	cbz	r2, 801b3d6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801b3ce:	1c9a      	adds	r2, r3, #2
 801b3d0:	60c2      	str	r2, [r0, #12]
 801b3d2:	8818      	ldrh	r0, [r3, #0]
 801b3d4:	bd30      	pop	{r4, r5, pc}
 801b3d6:	7405      	strb	r5, [r0, #16]
 801b3d8:	6843      	ldr	r3, [r0, #4]
 801b3da:	8819      	ldrh	r1, [r3, #0]
 801b3dc:	b179      	cbz	r1, 801b3fe <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801b3de:	1c9a      	adds	r2, r3, #2
 801b3e0:	2902      	cmp	r1, #2
 801b3e2:	6042      	str	r2, [r0, #4]
 801b3e4:	d1f5      	bne.n	801b3d2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801b3e6:	6883      	ldr	r3, [r0, #8]
 801b3e8:	1d1a      	adds	r2, r3, #4
 801b3ea:	6082      	str	r2, [r0, #8]
 801b3ec:	681b      	ldr	r3, [r3, #0]
 801b3ee:	60c3      	str	r3, [r0, #12]
 801b3f0:	2b00      	cmp	r3, #0
 801b3f2:	d0e1      	beq.n	801b3b8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801b3f4:	881b      	ldrh	r3, [r3, #0]
 801b3f6:	2b00      	cmp	r3, #0
 801b3f8:	d0de      	beq.n	801b3b8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801b3fa:	7404      	strb	r4, [r0, #16]
 801b3fc:	e7dc      	b.n	801b3b8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801b3fe:	2000      	movs	r0, #0
 801b400:	e7e8      	b.n	801b3d4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801b402 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801b402:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b404:	4605      	mov	r5, r0
 801b406:	4608      	mov	r0, r1
 801b408:	b1f1      	cbz	r1, 801b448 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801b40a:	f105 0440 	add.w	r4, r5, #64	; 0x40
 801b40e:	460b      	mov	r3, r1
 801b410:	f101 0708 	add.w	r7, r1, #8
 801b414:	4622      	mov	r2, r4
 801b416:	6818      	ldr	r0, [r3, #0]
 801b418:	3308      	adds	r3, #8
 801b41a:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801b41e:	4626      	mov	r6, r4
 801b420:	42bb      	cmp	r3, r7
 801b422:	c603      	stmia	r6!, {r0, r1}
 801b424:	4634      	mov	r4, r6
 801b426:	d1f6      	bne.n	801b416 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801b428:	6818      	ldr	r0, [r3, #0]
 801b42a:	6030      	str	r0, [r6, #0]
 801b42c:	4610      	mov	r0, r2
 801b42e:	889b      	ldrh	r3, [r3, #4]
 801b430:	80b3      	strh	r3, [r6, #4]
 801b432:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801b436:	015b      	lsls	r3, r3, #5
 801b438:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801b43c:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 801b440:	430b      	orrs	r3, r1
 801b442:	425b      	negs	r3, r3
 801b444:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 801b448:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b44a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801b44a:	b538      	push	{r3, r4, r5, lr}
 801b44c:	460c      	mov	r4, r1
 801b44e:	6811      	ldr	r1, [r2, #0]
 801b450:	4610      	mov	r0, r2
 801b452:	68cd      	ldr	r5, [r1, #12]
 801b454:	4619      	mov	r1, r3
 801b456:	47a8      	blx	r5
 801b458:	2800      	cmp	r0, #0
 801b45a:	bf08      	it	eq
 801b45c:	4620      	moveq	r0, r4
 801b45e:	bd38      	pop	{r3, r4, r5, pc}

0801b460 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801b460:	b570      	push	{r4, r5, r6, lr}
 801b462:	8810      	ldrh	r0, [r2, #0]
 801b464:	4298      	cmp	r0, r3
 801b466:	d817      	bhi.n	801b498 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b468:	1e48      	subs	r0, r1, #1
 801b46a:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801b46e:	4298      	cmp	r0, r3
 801b470:	d312      	bcc.n	801b498 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b472:	2400      	movs	r4, #0
 801b474:	428c      	cmp	r4, r1
 801b476:	d20f      	bcs.n	801b498 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b478:	1860      	adds	r0, r4, r1
 801b47a:	1040      	asrs	r0, r0, #1
 801b47c:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801b480:	0085      	lsls	r5, r0, #2
 801b482:	42b3      	cmp	r3, r6
 801b484:	d902      	bls.n	801b48c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801b486:	3001      	adds	r0, #1
 801b488:	b284      	uxth	r4, r0
 801b48a:	e7f3      	b.n	801b474 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801b48c:	d102      	bne.n	801b494 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 801b48e:	442a      	add	r2, r5
 801b490:	8850      	ldrh	r0, [r2, #2]
 801b492:	bd70      	pop	{r4, r5, r6, pc}
 801b494:	b281      	uxth	r1, r0
 801b496:	e7ed      	b.n	801b474 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801b498:	2000      	movs	r0, #0
 801b49a:	e7fa      	b.n	801b492 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>

0801b49c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 801b49c:	b510      	push	{r4, lr}
 801b49e:	8ac3      	ldrh	r3, [r0, #22]
 801b4a0:	428b      	cmp	r3, r1
 801b4a2:	d805      	bhi.n	801b4b0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 801b4a4:	4b07      	ldr	r3, [pc, #28]	; (801b4c4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 801b4a6:	21fd      	movs	r1, #253	; 0xfd
 801b4a8:	4a07      	ldr	r2, [pc, #28]	; (801b4c8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 801b4aa:	4808      	ldr	r0, [pc, #32]	; (801b4cc <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 801b4ac:	f00a fe40 	bl	8026130 <__assert_func>
 801b4b0:	8a83      	ldrh	r3, [r0, #20]
 801b4b2:	240a      	movs	r4, #10
 801b4b4:	4419      	add	r1, r3
 801b4b6:	fbb1 f3f4 	udiv	r3, r1, r4
 801b4ba:	fb04 1113 	mls	r1, r4, r3, r1
 801b4be:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801b4c2:	bd10      	pop	{r4, pc}
 801b4c4:	08029e0d 	.word	0x08029e0d
 801b4c8:	0802a23c 	.word	0x0802a23c
 801b4cc:	08029e1b 	.word	0x08029e1b

0801b4d0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 801b4d0:	b508      	push	{r3, lr}
 801b4d2:	8ac3      	ldrh	r3, [r0, #22]
 801b4d4:	428b      	cmp	r3, r1
 801b4d6:	d805      	bhi.n	801b4e4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 801b4d8:	4b07      	ldr	r3, [pc, #28]	; (801b4f8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 801b4da:	21d3      	movs	r1, #211	; 0xd3
 801b4dc:	4a07      	ldr	r2, [pc, #28]	; (801b4fc <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 801b4de:	4808      	ldr	r0, [pc, #32]	; (801b500 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 801b4e0:	f00a fe26 	bl	8026130 <__assert_func>
 801b4e4:	8a83      	ldrh	r3, [r0, #20]
 801b4e6:	220a      	movs	r2, #10
 801b4e8:	4419      	add	r1, r3
 801b4ea:	fbb1 f3f2 	udiv	r3, r1, r2
 801b4ee:	fb02 1113 	mls	r1, r2, r3, r1
 801b4f2:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 801b4f6:	bd08      	pop	{r3, pc}
 801b4f8:	08029e0d 	.word	0x08029e0d
 801b4fc:	08029f8c 	.word	0x08029f8c
 801b500:	08029e1b 	.word	0x08029e1b

0801b504 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801b504:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b508:	4604      	mov	r4, r0
 801b50a:	4688      	mov	r8, r1
 801b50c:	4615      	mov	r5, r2
 801b50e:	b94a      	cbnz	r2, 801b524 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20>
 801b510:	4691      	mov	r9, r2
 801b512:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801b516:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801b51a:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801b51e:	4648      	mov	r0, r9
 801b520:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b524:	f100 0640 	add.w	r6, r0, #64	; 0x40
 801b528:	8892      	ldrh	r2, [r2, #4]
 801b52a:	462b      	mov	r3, r5
 801b52c:	f105 0c08 	add.w	ip, r5, #8
 801b530:	46b3      	mov	fp, r6
 801b532:	6818      	ldr	r0, [r3, #0]
 801b534:	3308      	adds	r3, #8
 801b536:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801b53a:	4637      	mov	r7, r6
 801b53c:	4563      	cmp	r3, ip
 801b53e:	c703      	stmia	r7!, {r0, r1}
 801b540:	463e      	mov	r6, r7
 801b542:	d1f6      	bne.n	801b532 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2e>
 801b544:	6818      	ldr	r0, [r3, #0]
 801b546:	46d9      	mov	r9, fp
 801b548:	6038      	str	r0, [r7, #0]
 801b54a:	889b      	ldrh	r3, [r3, #4]
 801b54c:	80bb      	strh	r3, [r7, #4]
 801b54e:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 801b552:	f894 704d 	ldrb.w	r7, [r4, #77]	; 0x4d
 801b556:	18d3      	adds	r3, r2, r3
 801b558:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 801b55c:	b298      	uxth	r0, r3
 801b55e:	f40a 7180 	and.w	r1, sl, #256	; 0x100
 801b562:	f894 a047 	ldrb.w	sl, [r4, #71]	; 0x47
 801b566:	281d      	cmp	r0, #29
 801b568:	ea4a 0a01 	orr.w	sl, sl, r1
 801b56c:	fa1f f68a 	uxth.w	r6, sl
 801b570:	d842      	bhi.n	801b5f8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf4>
 801b572:	2301      	movs	r3, #1
 801b574:	4950      	ldr	r1, [pc, #320]	; (801b6b8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>)
 801b576:	ea4f 0aea 	mov.w	sl, sl, asr #3
 801b57a:	4083      	lsls	r3, r0
 801b57c:	420b      	tst	r3, r1
 801b57e:	d114      	bne.n	801b5aa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801b580:	f413 7f60 	tst.w	r3, #896	; 0x380
 801b584:	d03c      	beq.n	801b600 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfc>
 801b586:	fa1f fa8a 	uxth.w	sl, sl
 801b58a:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801b58e:	4658      	mov	r0, fp
 801b590:	eba1 010a 	sub.w	r1, r1, sl
 801b594:	b209      	sxth	r1, r1
 801b596:	f7ff fefb 	bl	801b390 <_ZN8touchgfx9GlyphNode6setTopEs>
 801b59a:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 801b59e:	1b86      	subs	r6, r0, r6
 801b5a0:	eba6 0a0a 	sub.w	sl, r6, sl
 801b5a4:	f8a4 a050 	strh.w	sl, [r4, #80]	; 0x50
 801b5a8:	e7b9      	b.n	801b51e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801b5aa:	2100      	movs	r1, #0
 801b5ac:	f104 001a 	add.w	r0, r4, #26
 801b5b0:	f7ff ff8e 	bl	801b4d0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801b5b4:	f640 6333 	movw	r3, #3635	; 0xe33
 801b5b8:	4601      	mov	r1, r0
 801b5ba:	4298      	cmp	r0, r3
 801b5bc:	d10a      	bne.n	801b5d4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd0>
 801b5be:	f8d8 3000 	ldr.w	r3, [r8]
 801b5c2:	4640      	mov	r0, r8
 801b5c4:	68db      	ldr	r3, [r3, #12]
 801b5c6:	4798      	blx	r3
 801b5c8:	7b41      	ldrb	r1, [r0, #13]
 801b5ca:	7a00      	ldrb	r0, [r0, #8]
 801b5cc:	f7ff fed2 	bl	801b374 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801b5d0:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801b5d4:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 801b5d8:	4658      	mov	r0, fp
 801b5da:	4431      	add	r1, r6
 801b5dc:	4451      	add	r1, sl
 801b5de:	b209      	sxth	r1, r1
 801b5e0:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 801b5e4:	f7ff fed4 	bl	801b390 <_ZN8touchgfx9GlyphNode6setTopEs>
 801b5e8:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801b5ec:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801b5f0:	1a9b      	subs	r3, r3, r2
 801b5f2:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801b5f6:	e792      	b.n	801b51e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801b5f8:	f640 631b 	movw	r3, #3611	; 0xe1b
 801b5fc:	429a      	cmp	r2, r3
 801b5fe:	d005      	beq.n	801b60c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x108>
 801b600:	f022 0302 	bic.w	r3, r2, #2
 801b604:	f640 611d 	movw	r1, #3613	; 0xe1d
 801b608:	428b      	cmp	r3, r1
 801b60a:	d119      	bne.n	801b640 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13c>
 801b60c:	1e53      	subs	r3, r2, #1
 801b60e:	4629      	mov	r1, r5
 801b610:	4642      	mov	r2, r8
 801b612:	4620      	mov	r0, r4
 801b614:	b29b      	uxth	r3, r3
 801b616:	f7ff ff18 	bl	801b44a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801b61a:	7b41      	ldrb	r1, [r0, #13]
 801b61c:	7a00      	ldrb	r0, [r0, #8]
 801b61e:	f7ff fea9 	bl	801b374 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801b622:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 801b626:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801b62a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b62e:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801b632:	4313      	orrs	r3, r2
 801b634:	115a      	asrs	r2, r3, #5
 801b636:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801b63a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801b63e:	e02e      	b.n	801b69e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801b640:	4639      	mov	r1, r7
 801b642:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801b646:	f7ff fe95 	bl	801b374 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801b64a:	f640 6109 	movw	r1, #3593	; 0xe09
 801b64e:	f022 0310 	bic.w	r3, r2, #16
 801b652:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801b656:	428b      	cmp	r3, r1
 801b658:	d003      	beq.n	801b662 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15e>
 801b65a:	f640 6313 	movw	r3, #3603	; 0xe13
 801b65e:	429a      	cmp	r2, r3
 801b660:	d127      	bne.n	801b6b2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ae>
 801b662:	b27f      	sxtb	r7, r7
 801b664:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801b668:	4629      	mov	r1, r5
 801b66a:	4620      	mov	r0, r4
 801b66c:	f407 7780 	and.w	r7, r7, #256	; 0x100
 801b670:	431f      	orrs	r7, r3
 801b672:	f640 6313 	movw	r3, #3603	; 0xe13
 801b676:	429a      	cmp	r2, r3
 801b678:	bf14      	ite	ne
 801b67a:	f102 33ff 	addne.w	r3, r2, #4294967295
 801b67e:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801b682:	4642      	mov	r2, r8
 801b684:	bf18      	it	ne
 801b686:	b29b      	uxthne	r3, r3
 801b688:	f7ff fedf 	bl	801b44a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801b68c:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801b690:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b694:	7a83      	ldrb	r3, [r0, #10]
 801b696:	4313      	orrs	r3, r2
 801b698:	1aff      	subs	r7, r7, r3
 801b69a:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 801b69e:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801b6a2:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801b6a6:	f7ff fe65 	bl	801b374 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801b6aa:	1b80      	subs	r0, r0, r6
 801b6ac:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 801b6b0:	e735      	b.n	801b51e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801b6b2:	2300      	movs	r3, #0
 801b6b4:	e7c1      	b.n	801b63a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 801b6b6:	bf00      	nop
 801b6b8:	3fc00079 	.word	0x3fc00079

0801b6bc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801b6bc:	3a01      	subs	r2, #1
 801b6be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b6c2:	b292      	uxth	r2, r2
 801b6c4:	460c      	mov	r4, r1
 801b6c6:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801b6ca:	42b2      	cmp	r2, r6
 801b6cc:	d018      	beq.n	801b700 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x44>
 801b6ce:	8b01      	ldrh	r1, [r0, #24]
 801b6d0:	f834 5b02 	ldrh.w	r5, [r4], #2
 801b6d4:	4291      	cmp	r1, r2
 801b6d6:	d805      	bhi.n	801b6e4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x28>
 801b6d8:	4b13      	ldr	r3, [pc, #76]	; (801b728 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6c>)
 801b6da:	21d3      	movs	r1, #211	; 0xd3
 801b6dc:	4a13      	ldr	r2, [pc, #76]	; (801b72c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x70>)
 801b6de:	4814      	ldr	r0, [pc, #80]	; (801b730 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 801b6e0:	f00a fd26 	bl	8026130 <__assert_func>
 801b6e4:	8ac1      	ldrh	r1, [r0, #22]
 801b6e6:	4411      	add	r1, r2
 801b6e8:	3a01      	subs	r2, #1
 801b6ea:	f001 0101 	and.w	r1, r1, #1
 801b6ee:	b292      	uxth	r2, r2
 801b6f0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801b6f4:	8a49      	ldrh	r1, [r1, #18]
 801b6f6:	428d      	cmp	r5, r1
 801b6f8:	d0e7      	beq.n	801b6ca <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xe>
 801b6fa:	2000      	movs	r0, #0
 801b6fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b700:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 801b704:	2600      	movs	r6, #0
 801b706:	f100 051a 	add.w	r5, r0, #26
 801b70a:	441f      	add	r7, r3
 801b70c:	b2b1      	uxth	r1, r6
 801b70e:	42b9      	cmp	r1, r7
 801b710:	da08      	bge.n	801b724 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x68>
 801b712:	f834 8016 	ldrh.w	r8, [r4, r6, lsl #1]
 801b716:	4628      	mov	r0, r5
 801b718:	f7ff feda 	bl	801b4d0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801b71c:	3601      	adds	r6, #1
 801b71e:	4540      	cmp	r0, r8
 801b720:	d0f4      	beq.n	801b70c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x50>
 801b722:	e7ea      	b.n	801b6fa <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801b724:	2001      	movs	r0, #1
 801b726:	e7e9      	b.n	801b6fc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801b728:	08029e0d 	.word	0x08029e0d
 801b72c:	0802a39c 	.word	0x0802a39c
 801b730:	08029e1b 	.word	0x08029e1b

0801b734 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 801b734:	b538      	push	{r3, r4, r5, lr}
 801b736:	8ac3      	ldrh	r3, [r0, #22]
 801b738:	428b      	cmp	r3, r1
 801b73a:	d205      	bcs.n	801b748 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 801b73c:	4b08      	ldr	r3, [pc, #32]	; (801b760 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 801b73e:	21d8      	movs	r1, #216	; 0xd8
 801b740:	4a08      	ldr	r2, [pc, #32]	; (801b764 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 801b742:	4809      	ldr	r0, [pc, #36]	; (801b768 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 801b744:	f00a fcf4 	bl	8026130 <__assert_func>
 801b748:	8a82      	ldrh	r2, [r0, #20]
 801b74a:	250a      	movs	r5, #10
 801b74c:	1a5b      	subs	r3, r3, r1
 801b74e:	440a      	add	r2, r1
 801b750:	82c3      	strh	r3, [r0, #22]
 801b752:	fbb2 f4f5 	udiv	r4, r2, r5
 801b756:	fb05 2214 	mls	r2, r5, r4, r2
 801b75a:	8282      	strh	r2, [r0, #20]
 801b75c:	bd38      	pop	{r3, r4, r5, pc}
 801b75e:	bf00      	nop
 801b760:	08029e01 	.word	0x08029e01
 801b764:	0802a1b8 	.word	0x0802a1b8
 801b768:	08029e1b 	.word	0x08029e1b

0801b76c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 801b76c:	b538      	push	{r3, r4, r5, lr}
 801b76e:	8ac3      	ldrh	r3, [r0, #22]
 801b770:	2b09      	cmp	r3, #9
 801b772:	d905      	bls.n	801b780 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 801b774:	4b08      	ldr	r3, [pc, #32]	; (801b798 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 801b776:	21f7      	movs	r1, #247	; 0xf7
 801b778:	4a08      	ldr	r2, [pc, #32]	; (801b79c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 801b77a:	4809      	ldr	r0, [pc, #36]	; (801b7a0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 801b77c:	f00a fcd8 	bl	8026130 <__assert_func>
 801b780:	8a82      	ldrh	r2, [r0, #20]
 801b782:	250a      	movs	r5, #10
 801b784:	441a      	add	r2, r3
 801b786:	3301      	adds	r3, #1
 801b788:	fbb2 f4f5 	udiv	r4, r2, r5
 801b78c:	fb05 2214 	mls	r2, r5, r4, r2
 801b790:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 801b794:	82c3      	strh	r3, [r0, #22]
 801b796:	bd38      	pop	{r3, r4, r5, pc}
 801b798:	08029df5 	.word	0x08029df5
 801b79c:	0802a109 	.word	0x0802a109
 801b7a0:	08029e1b 	.word	0x08029e1b

0801b7a4 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801b7a4:	b538      	push	{r3, r4, r5, lr}
 801b7a6:	4604      	mov	r4, r0
 801b7a8:	f100 051a 	add.w	r5, r0, #26
 801b7ac:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b7ae:	2b0a      	cmp	r3, #10
 801b7b0:	d01c      	beq.n	801b7ec <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801b7b2:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 801b7b4:	b962      	cbnz	r2, 801b7d0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801b7b6:	f104 051a 	add.w	r5, r4, #26
 801b7ba:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b7bc:	2b0a      	cmp	r3, #10
 801b7be:	d015      	beq.n	801b7ec <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801b7c0:	4620      	mov	r0, r4
 801b7c2:	f7ff fdf6 	bl	801b3b2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801b7c6:	4601      	mov	r1, r0
 801b7c8:	4628      	mov	r0, r5
 801b7ca:	f7ff ffcf 	bl	801b76c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801b7ce:	e7f4      	b.n	801b7ba <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 801b7d0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801b7d2:	3a01      	subs	r2, #1
 801b7d4:	4628      	mov	r0, r5
 801b7d6:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 801b7da:	3301      	adds	r3, #1
 801b7dc:	f003 0301 	and.w	r3, r3, #1
 801b7e0:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 801b7e2:	8722      	strh	r2, [r4, #56]	; 0x38
 801b7e4:	86e3      	strh	r3, [r4, #54]	; 0x36
 801b7e6:	f7ff ffc1 	bl	801b76c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801b7ea:	e7df      	b.n	801b7ac <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 801b7ec:	bd38      	pop	{r3, r4, r5, pc}
	...

0801b7f0 <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 801b7f0:	2300      	movs	r3, #0
 801b7f2:	b510      	push	{r4, lr}
 801b7f4:	6043      	str	r3, [r0, #4]
 801b7f6:	4604      	mov	r4, r0
 801b7f8:	60c3      	str	r3, [r0, #12]
 801b7fa:	7403      	strb	r3, [r0, #16]
 801b7fc:	8603      	strh	r3, [r0, #48]	; 0x30
 801b7fe:	8303      	strh	r3, [r0, #24]
 801b800:	8703      	strh	r3, [r0, #56]	; 0x38
 801b802:	f7ff ffcf 	bl	801b7a4 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801b806:	4a0a      	ldr	r2, [pc, #40]	; (801b830 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 801b808:	6813      	ldr	r3, [r2, #0]
 801b80a:	4611      	mov	r1, r2
 801b80c:	b913      	cbnz	r3, 801b814 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 801b80e:	6852      	ldr	r2, [r2, #4]
 801b810:	07d0      	lsls	r0, r2, #31
 801b812:	d50b      	bpl.n	801b82c <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3c>
 801b814:	6849      	ldr	r1, [r1, #4]
 801b816:	104a      	asrs	r2, r1, #1
 801b818:	07c9      	lsls	r1, r1, #31
 801b81a:	eb04 0002 	add.w	r0, r4, r2
 801b81e:	bf48      	it	mi
 801b820:	58a2      	ldrmi	r2, [r4, r2]
 801b822:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b826:	bf48      	it	mi
 801b828:	58d3      	ldrmi	r3, [r2, r3]
 801b82a:	4718      	bx	r3
 801b82c:	bd10      	pop	{r4, pc}
 801b82e:	bf00      	nop
 801b830:	20008df8 	.word	0x20008df8

0801b834 <_ZN8touchgfx12TextProviderC1Ev>:
 801b834:	2300      	movs	r3, #0
 801b836:	2201      	movs	r2, #1
 801b838:	b510      	push	{r4, lr}
 801b83a:	4604      	mov	r4, r0
 801b83c:	60c3      	str	r3, [r0, #12]
 801b83e:	7403      	strb	r3, [r0, #16]
 801b840:	82c3      	strh	r3, [r0, #22]
 801b842:	8303      	strh	r3, [r0, #24]
 801b844:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801b846:	8603      	strh	r3, [r0, #48]	; 0x30
 801b848:	86c3      	strh	r3, [r0, #54]	; 0x36
 801b84a:	8703      	strh	r3, [r0, #56]	; 0x38
 801b84c:	63c3      	str	r3, [r0, #60]	; 0x3c
 801b84e:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801b852:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801b856:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801b85a:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801b85e:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801b862:	e9c0 3300 	strd	r3, r3, [r0]
 801b866:	f7ff ffc3 	bl	801b7f0 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801b86a:	4620      	mov	r0, r4
 801b86c:	bd10      	pop	{r4, pc}

0801b86e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801b86e:	b410      	push	{r4}
 801b870:	6082      	str	r2, [r0, #8]
 801b872:	6001      	str	r1, [r0, #0]
 801b874:	63c3      	str	r3, [r0, #60]	; 0x3c
 801b876:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b87a:	f7ff bfb9 	b.w	801b7f0 <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

0801b880 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 801b880:	b508      	push	{r3, lr}
 801b882:	88c2      	ldrh	r2, [r0, #6]
 801b884:	440a      	add	r2, r1
 801b886:	2a02      	cmp	r2, #2
 801b888:	dd05      	ble.n	801b896 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 801b88a:	4b06      	ldr	r3, [pc, #24]	; (801b8a4 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 801b88c:	21ec      	movs	r1, #236	; 0xec
 801b88e:	4a06      	ldr	r2, [pc, #24]	; (801b8a8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 801b890:	4806      	ldr	r0, [pc, #24]	; (801b8ac <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 801b892:	f00a fc4d 	bl	8026130 <__assert_func>
 801b896:	8883      	ldrh	r3, [r0, #4]
 801b898:	80c2      	strh	r2, [r0, #6]
 801b89a:	1a59      	subs	r1, r3, r1
 801b89c:	f001 0101 	and.w	r1, r1, #1
 801b8a0:	8081      	strh	r1, [r0, #4]
 801b8a2:	bd08      	pop	{r3, pc}
 801b8a4:	08029e47 	.word	0x08029e47
 801b8a8:	0802a315 	.word	0x0802a315
 801b8ac:	08029e1b 	.word	0x08029e1b

0801b8b0 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 801b8b0:	b508      	push	{r3, lr}
 801b8b2:	88c3      	ldrh	r3, [r0, #6]
 801b8b4:	428b      	cmp	r3, r1
 801b8b6:	d805      	bhi.n	801b8c4 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 801b8b8:	4b06      	ldr	r3, [pc, #24]	; (801b8d4 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 801b8ba:	21fd      	movs	r1, #253	; 0xfd
 801b8bc:	4a06      	ldr	r2, [pc, #24]	; (801b8d8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 801b8be:	4807      	ldr	r0, [pc, #28]	; (801b8dc <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 801b8c0:	f00a fc36 	bl	8026130 <__assert_func>
 801b8c4:	8883      	ldrh	r3, [r0, #4]
 801b8c6:	4419      	add	r1, r3
 801b8c8:	f001 0101 	and.w	r1, r1, #1
 801b8cc:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801b8d0:	bd08      	pop	{r3, pc}
 801b8d2:	bf00      	nop
 801b8d4:	08029e0d 	.word	0x08029e0d
 801b8d8:	0802a46d 	.word	0x0802a46d
 801b8dc:	08029e1b 	.word	0x08029e1b

0801b8e0 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801b8e0:	b570      	push	{r4, r5, r6, lr}
 801b8e2:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801b8e4:	4604      	mov	r4, r0
 801b8e6:	b92a      	cbnz	r2, 801b8f4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801b8e8:	4b12      	ldr	r3, [pc, #72]	; (801b934 <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 801b8ea:	21de      	movs	r1, #222	; 0xde
 801b8ec:	4a12      	ldr	r2, [pc, #72]	; (801b938 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801b8ee:	4813      	ldr	r0, [pc, #76]	; (801b93c <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801b8f0:	f00a fc1e 	bl	8026130 <__assert_func>
 801b8f4:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801b8f6:	260a      	movs	r6, #10
 801b8f8:	3a01      	subs	r2, #1
 801b8fa:	3412      	adds	r4, #18
 801b8fc:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801b900:	3301      	adds	r3, #1
 801b902:	8b4d      	ldrh	r5, [r1, #26]
 801b904:	8602      	strh	r2, [r0, #48]	; 0x30
 801b906:	fbb3 f1f6 	udiv	r1, r3, r6
 801b90a:	fb06 3311 	mls	r3, r6, r1, r3
 801b90e:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801b910:	f7ff ff48 	bl	801b7a4 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801b914:	88e3      	ldrh	r3, [r4, #6]
 801b916:	2101      	movs	r1, #1
 801b918:	2b02      	cmp	r3, #2
 801b91a:	bf04      	itt	eq
 801b91c:	2301      	moveq	r3, #1
 801b91e:	80e3      	strheq	r3, [r4, #6]
 801b920:	4620      	mov	r0, r4
 801b922:	f7ff ffad 	bl	801b880 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801b926:	4620      	mov	r0, r4
 801b928:	462a      	mov	r2, r5
 801b92a:	2100      	movs	r1, #0
 801b92c:	f7ff ffc0 	bl	801b8b0 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801b930:	4628      	mov	r0, r5
 801b932:	bd70      	pop	{r4, r5, r6, pc}
 801b934:	08029dec 	.word	0x08029dec
 801b938:	0802a05e 	.word	0x0802a05e
 801b93c:	08029e1b 	.word	0x08029e1b

0801b940 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801b940:	428a      	cmp	r2, r1
 801b942:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b946:	4604      	mov	r4, r0
 801b948:	460e      	mov	r6, r1
 801b94a:	4615      	mov	r5, r2
 801b94c:	469a      	mov	sl, r3
 801b94e:	d92b      	bls.n	801b9a8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 801b950:	1a57      	subs	r7, r2, r1
 801b952:	f04f 0800 	mov.w	r8, #0
 801b956:	f100 0932 	add.w	r9, r0, #50	; 0x32
 801b95a:	f04f 0b0a 	mov.w	fp, #10
 801b95e:	b2bf      	uxth	r7, r7
 801b960:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b962:	b92b      	cbnz	r3, 801b970 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x30>
 801b964:	4b24      	ldr	r3, [pc, #144]	; (801b9f8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 801b966:	21e6      	movs	r1, #230	; 0xe6
 801b968:	4a24      	ldr	r2, [pc, #144]	; (801b9fc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 801b96a:	4825      	ldr	r0, [pc, #148]	; (801ba00 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 801b96c:	f00a fbe0 	bl	8026130 <__assert_func>
 801b970:	3b01      	subs	r3, #1
 801b972:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801b974:	2101      	movs	r1, #1
 801b976:	4648      	mov	r0, r9
 801b978:	b29b      	uxth	r3, r3
 801b97a:	f108 0801 	add.w	r8, r8, #1
 801b97e:	441a      	add	r2, r3
 801b980:	8623      	strh	r3, [r4, #48]	; 0x30
 801b982:	fbb2 f3fb 	udiv	r3, r2, fp
 801b986:	fb0b 2313 	mls	r3, fp, r3, r2
 801b98a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b98e:	8b5a      	ldrh	r2, [r3, #26]
 801b990:	9201      	str	r2, [sp, #4]
 801b992:	f7ff ff75 	bl	801b880 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801b996:	9a01      	ldr	r2, [sp, #4]
 801b998:	2100      	movs	r1, #0
 801b99a:	4648      	mov	r0, r9
 801b99c:	f7ff ff88 	bl	801b8b0 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801b9a0:	fa1f f388 	uxth.w	r3, r8
 801b9a4:	429f      	cmp	r7, r3
 801b9a6:	d8db      	bhi.n	801b960 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x20>
 801b9a8:	f104 071a 	add.w	r7, r4, #26
 801b9ac:	4631      	mov	r1, r6
 801b9ae:	260a      	movs	r6, #10
 801b9b0:	4638      	mov	r0, r7
 801b9b2:	f7ff febf 	bl	801b734 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801b9b6:	b1c5      	cbz	r5, 801b9ea <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801b9b8:	3d01      	subs	r5, #1
 801b9ba:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b9bc:	b2ad      	uxth	r5, r5
 801b9be:	2b09      	cmp	r3, #9
 801b9c0:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 801b9c4:	d903      	bls.n	801b9ce <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 801b9c6:	4b0f      	ldr	r3, [pc, #60]	; (801ba04 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 801b9c8:	21ec      	movs	r1, #236	; 0xec
 801b9ca:	4a0f      	ldr	r2, [pc, #60]	; (801ba08 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 801b9cc:	e7cd      	b.n	801b96a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2a>
 801b9ce:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 801b9d0:	3301      	adds	r3, #1
 801b9d2:	3109      	adds	r1, #9
 801b9d4:	8623      	strh	r3, [r4, #48]	; 0x30
 801b9d6:	fbb1 f0f6 	udiv	r0, r1, r6
 801b9da:	fb06 1110 	mls	r1, r6, r0, r1
 801b9de:	4638      	mov	r0, r7
 801b9e0:	85e1      	strh	r1, [r4, #46]	; 0x2e
 801b9e2:	2100      	movs	r1, #0
 801b9e4:	f7ff fd5a 	bl	801b49c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801b9e8:	e7e5      	b.n	801b9b6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 801b9ea:	4620      	mov	r0, r4
 801b9ec:	b003      	add	sp, #12
 801b9ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9f2:	f7ff bed7 	b.w	801b7a4 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801b9f6:	bf00      	nop
 801b9f8:	08029dec 	.word	0x08029dec
 801b9fc:	08029ee2 	.word	0x08029ee2
 801ba00:	08029e1b 	.word	0x08029e1b
 801ba04:	08029e47 	.word	0x08029e47
 801ba08:	08029e5a 	.word	0x08029e5a

0801ba0c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801ba0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba10:	4605      	mov	r5, r0
 801ba12:	4616      	mov	r6, r2
 801ba14:	1c8c      	adds	r4, r1, #2
 801ba16:	8809      	ldrh	r1, [r1, #0]
 801ba18:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801ba1c:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801ba20:	42b3      	cmp	r3, r6
 801ba22:	d124      	bne.n	801ba6e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801ba24:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801ba28:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801ba2c:	f001 070f 	and.w	r7, r1, #15
 801ba30:	4652      	mov	r2, sl
 801ba32:	f8cd 8000 	str.w	r8, [sp]
 801ba36:	464b      	mov	r3, r9
 801ba38:	4621      	mov	r1, r4
 801ba3a:	4628      	mov	r0, r5
 801ba3c:	f7ff fe3e 	bl	801b6bc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801ba40:	4683      	mov	fp, r0
 801ba42:	b168      	cbz	r0, 801ba60 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801ba44:	eb0a 0109 	add.w	r1, sl, r9
 801ba48:	463a      	mov	r2, r7
 801ba4a:	4628      	mov	r0, r5
 801ba4c:	4441      	add	r1, r8
 801ba4e:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801ba52:	4649      	mov	r1, r9
 801ba54:	f7ff ff74 	bl	801b940 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801ba58:	4658      	mov	r0, fp
 801ba5a:	b003      	add	sp, #12
 801ba5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba60:	eb07 010a 	add.w	r1, r7, sl
 801ba64:	4449      	add	r1, r9
 801ba66:	4441      	add	r1, r8
 801ba68:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801ba6c:	e7d2      	b.n	801ba14 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801ba6e:	f04f 0b00 	mov.w	fp, #0
 801ba72:	e7f1      	b.n	801ba58 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801ba74 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801ba74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ba78:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801ba7a:	4604      	mov	r4, r0
 801ba7c:	260b      	movs	r6, #11
 801ba7e:	f100 091a 	add.w	r9, r0, #26
 801ba82:	886f      	ldrh	r7, [r5, #2]
 801ba84:	087f      	lsrs	r7, r7, #1
 801ba86:	3e01      	subs	r6, #1
 801ba88:	d013      	beq.n	801bab2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801ba8a:	2100      	movs	r1, #0
 801ba8c:	4648      	mov	r0, r9
 801ba8e:	f7ff fd1f 	bl	801b4d0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801ba92:	462a      	mov	r2, r5
 801ba94:	4680      	mov	r8, r0
 801ba96:	4603      	mov	r3, r0
 801ba98:	4639      	mov	r1, r7
 801ba9a:	4620      	mov	r0, r4
 801ba9c:	f7ff fce0 	bl	801b460 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801baa0:	b138      	cbz	r0, 801bab2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801baa2:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801baa6:	4642      	mov	r2, r8
 801baa8:	4620      	mov	r0, r4
 801baaa:	f7ff ffaf 	bl	801ba0c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801baae:	2800      	cmp	r0, #0
 801bab0:	d1e9      	bne.n	801ba86 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 801bab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0801bab8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 801bab8:	4b1e      	ldr	r3, [pc, #120]	; (801bb34 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 801baba:	b570      	push	{r4, r5, r6, lr}
 801babc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bac0:	4604      	mov	r4, r0
 801bac2:	f003 0501 	and.w	r5, r3, #1
 801bac6:	b902      	cbnz	r2, 801baca <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
 801bac8:	b165      	cbz	r5, 801bae4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2c>
 801baca:	105b      	asrs	r3, r3, #1
 801bacc:	f104 061a 	add.w	r6, r4, #26
 801bad0:	18e0      	adds	r0, r4, r3
 801bad2:	b10d      	cbz	r5, 801bad8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
 801bad4:	58e3      	ldr	r3, [r4, r3]
 801bad6:	589a      	ldr	r2, [r3, r2]
 801bad8:	4790      	blx	r2
 801bada:	2100      	movs	r1, #0
 801badc:	4602      	mov	r2, r0
 801bade:	4630      	mov	r0, r6
 801bae0:	f7ff fcdc 	bl	801b49c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801bae4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801bae6:	b303      	cbz	r3, 801bb2a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801bae8:	f104 051a 	add.w	r5, r4, #26
 801baec:	2100      	movs	r1, #0
 801baee:	4628      	mov	r0, r5
 801baf0:	f7ff fcee 	bl	801b4d0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801baf4:	b1c8      	cbz	r0, 801bb2a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801baf6:	4620      	mov	r0, r4
 801baf8:	f7ff ffbc 	bl	801ba74 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 801bafc:	2101      	movs	r1, #1
 801bafe:	4628      	mov	r0, r5
 801bb00:	f7ff fce6 	bl	801b4d0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801bb04:	f640 133f 	movw	r3, #2367	; 0x93f
 801bb08:	4606      	mov	r6, r0
 801bb0a:	4298      	cmp	r0, r3
 801bb0c:	d10d      	bne.n	801bb2a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801bb0e:	2100      	movs	r1, #0
 801bb10:	4628      	mov	r0, r5
 801bb12:	f7ff fcdd 	bl	801b4d0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801bb16:	2101      	movs	r1, #1
 801bb18:	4602      	mov	r2, r0
 801bb1a:	4628      	mov	r0, r5
 801bb1c:	f7ff fcbe 	bl	801b49c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801bb20:	4632      	mov	r2, r6
 801bb22:	2100      	movs	r1, #0
 801bb24:	4628      	mov	r0, r5
 801bb26:	f7ff fcb9 	bl	801b49c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801bb2a:	4620      	mov	r0, r4
 801bb2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bb30:	f7ff bed6 	b.w	801b8e0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801bb34:	20008e00 	.word	0x20008e00

0801bb38 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801bb38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb3a:	4617      	mov	r7, r2
 801bb3c:	461e      	mov	r6, r3
 801bb3e:	4605      	mov	r5, r0
 801bb40:	f7ff ffba 	bl	801bab8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801bb44:	683b      	ldr	r3, [r7, #0]
 801bb46:	4604      	mov	r4, r0
 801bb48:	4601      	mov	r1, r0
 801bb4a:	4638      	mov	r0, r7
 801bb4c:	68db      	ldr	r3, [r3, #12]
 801bb4e:	4798      	blx	r3
 801bb50:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801bb54:	4602      	mov	r2, r0
 801bb56:	6030      	str	r0, [r6, #0]
 801bb58:	b29b      	uxth	r3, r3
 801bb5a:	2b7f      	cmp	r3, #127	; 0x7f
 801bb5c:	d813      	bhi.n	801bb86 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 801bb5e:	4639      	mov	r1, r7
 801bb60:	4628      	mov	r0, r5
 801bb62:	f7ff fccf 	bl	801b504 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801bb66:	6030      	str	r0, [r6, #0]
 801bb68:	6833      	ldr	r3, [r6, #0]
 801bb6a:	b143      	cbz	r3, 801bb7e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801bb6c:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801bb70:	7a9b      	ldrb	r3, [r3, #10]
 801bb72:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801bb76:	4313      	orrs	r3, r2
 801bb78:	bf0c      	ite	eq
 801bb7a:	2301      	moveq	r3, #1
 801bb7c:	2300      	movne	r3, #0
 801bb7e:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801bb82:	4620      	mov	r0, r4
 801bb84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bb86:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801bb8a:	2b00      	cmp	r3, #0
 801bb8c:	d0ec      	beq.n	801bb68 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801bb8e:	f640 1302 	movw	r3, #2306	; 0x902
 801bb92:	429c      	cmp	r4, r3
 801bb94:	d1e8      	bne.n	801bb68 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801bb96:	4601      	mov	r1, r0
 801bb98:	4628      	mov	r0, r5
 801bb9a:	f7ff fc32 	bl	801b402 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801bb9e:	e7e2      	b.n	801bb66 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>

0801bba0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801bba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bba4:	4617      	mov	r7, r2
 801bba6:	461e      	mov	r6, r3
 801bba8:	4605      	mov	r5, r0
 801bbaa:	f7ff ff85 	bl	801bab8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801bbae:	683b      	ldr	r3, [r7, #0]
 801bbb0:	4604      	mov	r4, r0
 801bbb2:	4601      	mov	r1, r0
 801bbb4:	4638      	mov	r0, r7
 801bbb6:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801bbba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801bbbe:	47c0      	blx	r8
 801bbc0:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801bbc4:	4602      	mov	r2, r0
 801bbc6:	6030      	str	r0, [r6, #0]
 801bbc8:	b29b      	uxth	r3, r3
 801bbca:	2b7f      	cmp	r3, #127	; 0x7f
 801bbcc:	d814      	bhi.n	801bbf8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x58>
 801bbce:	4639      	mov	r1, r7
 801bbd0:	4628      	mov	r0, r5
 801bbd2:	f7ff fc97 	bl	801b504 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801bbd6:	6030      	str	r0, [r6, #0]
 801bbd8:	6833      	ldr	r3, [r6, #0]
 801bbda:	b143      	cbz	r3, 801bbee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801bbdc:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801bbe0:	7a9b      	ldrb	r3, [r3, #10]
 801bbe2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801bbe6:	4313      	orrs	r3, r2
 801bbe8:	bf0c      	ite	eq
 801bbea:	2301      	moveq	r3, #1
 801bbec:	2300      	movne	r3, #0
 801bbee:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801bbf2:	4620      	mov	r0, r4
 801bbf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bbf8:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801bbfc:	2b00      	cmp	r3, #0
 801bbfe:	d0eb      	beq.n	801bbd8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801bc00:	f640 1302 	movw	r3, #2306	; 0x902
 801bc04:	429c      	cmp	r4, r3
 801bc06:	d1e7      	bne.n	801bbd8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801bc08:	4601      	mov	r1, r0
 801bc0a:	4628      	mov	r0, r5
 801bc0c:	f7ff fbf9 	bl	801b402 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801bc10:	e7e1      	b.n	801bbd6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x36>

0801bc12 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801bc12:	4602      	mov	r2, r0
 801bc14:	b148      	cbz	r0, 801bc2a <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801bc16:	2300      	movs	r3, #0
 801bc18:	b298      	uxth	r0, r3
 801bc1a:	3301      	adds	r3, #1
 801bc1c:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801bc20:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801bc24:	2900      	cmp	r1, #0
 801bc26:	d1f7      	bne.n	801bc18 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801bc28:	4770      	bx	lr
 801bc2a:	4770      	bx	lr

0801bc2c <_ZN8touchgfx7Unicode6strlenEPKc>:
 801bc2c:	b140      	cbz	r0, 801bc40 <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 801bc2e:	4602      	mov	r2, r0
 801bc30:	1a13      	subs	r3, r2, r0
 801bc32:	f812 1b01 	ldrb.w	r1, [r2], #1
 801bc36:	b29b      	uxth	r3, r3
 801bc38:	2900      	cmp	r1, #0
 801bc3a:	d1f9      	bne.n	801bc30 <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 801bc3c:	4618      	mov	r0, r3
 801bc3e:	4770      	bx	lr
 801bc40:	4603      	mov	r3, r0
 801bc42:	e7fb      	b.n	801bc3c <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

0801bc44 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801bc44:	b530      	push	{r4, r5, lr}
 801bc46:	4604      	mov	r4, r0
 801bc48:	b159      	cbz	r1, 801bc62 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801bc4a:	b148      	cbz	r0, 801bc60 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801bc4c:	2300      	movs	r3, #0
 801bc4e:	b298      	uxth	r0, r3
 801bc50:	4282      	cmp	r2, r0
 801bc52:	d905      	bls.n	801bc60 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801bc54:	5ccd      	ldrb	r5, [r1, r3]
 801bc56:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801bc5a:	3301      	adds	r3, #1
 801bc5c:	2d00      	cmp	r5, #0
 801bc5e:	d1f6      	bne.n	801bc4e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801bc60:	bd30      	pop	{r4, r5, pc}
 801bc62:	4608      	mov	r0, r1
 801bc64:	e7fc      	b.n	801bc60 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801bc66 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801bc66:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bc68:	468c      	mov	ip, r1
 801bc6a:	b08b      	sub	sp, #44	; 0x2c
 801bc6c:	2100      	movs	r1, #0
 801bc6e:	ae01      	add	r6, sp, #4
 801bc70:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801bc74:	211f      	movs	r1, #31
 801bc76:	fbb0 f7f3 	udiv	r7, r0, r3
 801bc7a:	fb03 0517 	mls	r5, r3, r7, r0
 801bc7e:	4638      	mov	r0, r7
 801bc80:	b2ec      	uxtb	r4, r5
 801bc82:	2d09      	cmp	r5, #9
 801bc84:	bfd4      	ite	le
 801bc86:	3430      	addle	r4, #48	; 0x30
 801bc88:	3457      	addgt	r4, #87	; 0x57
 801bc8a:	b2e4      	uxtb	r4, r4
 801bc8c:	558c      	strb	r4, [r1, r6]
 801bc8e:	1e4c      	subs	r4, r1, #1
 801bc90:	b92f      	cbnz	r7, 801bc9e <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801bc92:	4431      	add	r1, r6
 801bc94:	4660      	mov	r0, ip
 801bc96:	f7ff ffd5 	bl	801bc44 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801bc9a:	b00b      	add	sp, #44	; 0x2c
 801bc9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bc9e:	4621      	mov	r1, r4
 801bca0:	e7e9      	b.n	801bc76 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801bca2 <_ZN8touchgfx7Unicode4itoaElPtti>:
 801bca2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bca4:	4607      	mov	r7, r0
 801bca6:	b08b      	sub	sp, #44	; 0x2c
 801bca8:	4608      	mov	r0, r1
 801bcaa:	b341      	cbz	r1, 801bcfe <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801bcac:	1e99      	subs	r1, r3, #2
 801bcae:	290e      	cmp	r1, #14
 801bcb0:	d825      	bhi.n	801bcfe <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801bcb2:	2100      	movs	r1, #0
 801bcb4:	463c      	mov	r4, r7
 801bcb6:	261f      	movs	r6, #31
 801bcb8:	f10d 0c04 	add.w	ip, sp, #4
 801bcbc:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801bcc0:	1e71      	subs	r1, r6, #1
 801bcc2:	fb94 fef3 	sdiv	lr, r4, r3
 801bcc6:	fb03 441e 	mls	r4, r3, lr, r4
 801bcca:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801bcce:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801bcd2:	b2ec      	uxtb	r4, r5
 801bcd4:	2d09      	cmp	r5, #9
 801bcd6:	bfd4      	ite	le
 801bcd8:	3430      	addle	r4, #48	; 0x30
 801bcda:	3457      	addgt	r4, #87	; 0x57
 801bcdc:	b2e4      	uxtb	r4, r4
 801bcde:	f80c 4006 	strb.w	r4, [ip, r6]
 801bce2:	4674      	mov	r4, lr
 801bce4:	b96c      	cbnz	r4, 801bd02 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801bce6:	2f00      	cmp	r7, #0
 801bce8:	da05      	bge.n	801bcf6 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801bcea:	ab0a      	add	r3, sp, #40	; 0x28
 801bcec:	4419      	add	r1, r3
 801bcee:	232d      	movs	r3, #45	; 0x2d
 801bcf0:	f801 3c24 	strb.w	r3, [r1, #-36]
 801bcf4:	1eb1      	subs	r1, r6, #2
 801bcf6:	3101      	adds	r1, #1
 801bcf8:	4461      	add	r1, ip
 801bcfa:	f7ff ffa3 	bl	801bc44 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801bcfe:	b00b      	add	sp, #44	; 0x2c
 801bd00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bd02:	460e      	mov	r6, r1
 801bd04:	e7dc      	b.n	801bcc0 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801bd06 <_ZN8touchgfx7Unicode4atoiEPKt>:
 801bd06:	b510      	push	{r4, lr}
 801bd08:	b158      	cbz	r0, 801bd22 <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801bd0a:	1e82      	subs	r2, r0, #2
 801bd0c:	210a      	movs	r1, #10
 801bd0e:	2000      	movs	r0, #0
 801bd10:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801bd14:	3b30      	subs	r3, #48	; 0x30
 801bd16:	b29c      	uxth	r4, r3
 801bd18:	2c09      	cmp	r4, #9
 801bd1a:	d802      	bhi.n	801bd22 <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801bd1c:	fb01 3000 	mla	r0, r1, r0, r3
 801bd20:	e7f6      	b.n	801bd10 <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 801bd22:	bd10      	pop	{r4, pc}

0801bd24 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 801bd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd28:	b085      	sub	sp, #20
 801bd2a:	f8d0 8000 	ldr.w	r8, [r0]
 801bd2e:	468a      	mov	sl, r1
 801bd30:	461c      	mov	r4, r3
 801bd32:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801bd36:	4681      	mov	r9, r0
 801bd38:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801bd3c:	4640      	mov	r0, r8
 801bd3e:	9203      	str	r2, [sp, #12]
 801bd40:	9102      	str	r1, [sp, #8]
 801bd42:	9301      	str	r3, [sp, #4]
 801bd44:	f7ff ff65 	bl	801bc12 <_ZN8touchgfx7Unicode6strlenEPKt>
 801bd48:	9a03      	ldr	r2, [sp, #12]
 801bd4a:	f1ba 0f00 	cmp.w	sl, #0
 801bd4e:	bf0c      	ite	eq
 801bd50:	4684      	moveq	ip, r0
 801bd52:	f100 0c01 	addne.w	ip, r0, #1
 801bd56:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 801bd5a:	8812      	ldrh	r2, [r2, #0]
 801bd5c:	fa1f fc8c 	uxth.w	ip, ip
 801bd60:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801bd62:	2a69      	cmp	r2, #105	; 0x69
 801bd64:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801bd66:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801bd68:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 801bd6c:	d004      	beq.n	801bd78 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801bd6e:	d844      	bhi.n	801bdfa <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd6>
 801bd70:	2a58      	cmp	r2, #88	; 0x58
 801bd72:	d001      	beq.n	801bd78 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801bd74:	2a64      	cmp	r2, #100	; 0x64
 801bd76:	d14b      	bne.n	801be10 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801bd78:	b1a4      	cbz	r4, 801bda4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801bd7a:	b956      	cbnz	r6, 801bd92 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801bd7c:	2801      	cmp	r0, #1
 801bd7e:	d108      	bne.n	801bd92 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801bd80:	f8b8 2000 	ldrh.w	r2, [r8]
 801bd84:	2a30      	cmp	r2, #48	; 0x30
 801bd86:	bf02      	ittt	eq
 801bd88:	f108 0202 	addeq.w	r2, r8, #2
 801bd8c:	4630      	moveq	r0, r6
 801bd8e:	f8c9 2000 	streq.w	r2, [r9]
 801bd92:	45b4      	cmp	ip, r6
 801bd94:	da3e      	bge.n	801be14 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf0>
 801bd96:	b2b6      	uxth	r6, r6
 801bd98:	eba6 040c 	sub.w	r4, r6, ip
 801bd9c:	46b4      	mov	ip, r6
 801bd9e:	b2a4      	uxth	r4, r4
 801bda0:	f04f 0b00 	mov.w	fp, #0
 801bda4:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801bda8:	3a01      	subs	r2, #1
 801bdaa:	b169      	cbz	r1, 801bdc8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801bdac:	9911      	ldr	r1, [sp, #68]	; 0x44
 801bdae:	458c      	cmp	ip, r1
 801bdb0:	da09      	bge.n	801bdc6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801bdb2:	eba1 010c 	sub.w	r1, r1, ip
 801bdb6:	b289      	uxth	r1, r1
 801bdb8:	b933      	cbnz	r3, 801bdc8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801bdba:	f1bb 0f00 	cmp.w	fp, #0
 801bdbe:	d02b      	beq.n	801be18 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801bdc0:	b350      	cbz	r0, 801be18 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801bdc2:	440c      	add	r4, r1
 801bdc4:	b2a4      	uxth	r4, r4
 801bdc6:	2100      	movs	r1, #0
 801bdc8:	682b      	ldr	r3, [r5, #0]
 801bdca:	4293      	cmp	r3, r2
 801bdcc:	da07      	bge.n	801bdde <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801bdce:	f1ba 0f00 	cmp.w	sl, #0
 801bdd2:	d004      	beq.n	801bdde <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801bdd4:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 801bdd8:	682b      	ldr	r3, [r5, #0]
 801bdda:	3301      	adds	r3, #1
 801bddc:	602b      	str	r3, [r5, #0]
 801bdde:	f04f 0c30 	mov.w	ip, #48	; 0x30
 801bde2:	b354      	cbz	r4, 801be3a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801bde4:	682e      	ldr	r6, [r5, #0]
 801bde6:	3c01      	subs	r4, #1
 801bde8:	42b2      	cmp	r2, r6
 801bdea:	b2a4      	uxth	r4, r4
 801bdec:	dd25      	ble.n	801be3a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801bdee:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801bdf2:	682b      	ldr	r3, [r5, #0]
 801bdf4:	3301      	adds	r3, #1
 801bdf6:	602b      	str	r3, [r5, #0]
 801bdf8:	e7f3      	b.n	801bde2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xbe>
 801bdfa:	2a73      	cmp	r2, #115	; 0x73
 801bdfc:	d003      	beq.n	801be06 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe2>
 801bdfe:	2a78      	cmp	r2, #120	; 0x78
 801be00:	d0ba      	beq.n	801bd78 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801be02:	2a6f      	cmp	r2, #111	; 0x6f
 801be04:	e7b7      	b.n	801bd76 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x52>
 801be06:	2c00      	cmp	r4, #0
 801be08:	d0cc      	beq.n	801bda4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801be0a:	42b0      	cmp	r0, r6
 801be0c:	dd00      	ble.n	801be10 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801be0e:	b2b0      	uxth	r0, r6
 801be10:	2400      	movs	r4, #0
 801be12:	e7c7      	b.n	801bda4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801be14:	2400      	movs	r4, #0
 801be16:	e7c3      	b.n	801bda0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x7c>
 801be18:	2900      	cmp	r1, #0
 801be1a:	d0d5      	beq.n	801bdc8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801be1c:	f04f 0c20 	mov.w	ip, #32
 801be20:	682e      	ldr	r6, [r5, #0]
 801be22:	2900      	cmp	r1, #0
 801be24:	d0d0      	beq.n	801bdc8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801be26:	3901      	subs	r1, #1
 801be28:	4296      	cmp	r6, r2
 801be2a:	b289      	uxth	r1, r1
 801be2c:	dacb      	bge.n	801bdc6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801be2e:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801be32:	682b      	ldr	r3, [r5, #0]
 801be34:	3301      	adds	r3, #1
 801be36:	602b      	str	r3, [r5, #0]
 801be38:	e7f2      	b.n	801be20 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xfc>
 801be3a:	b198      	cbz	r0, 801be64 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801be3c:	f8d9 3000 	ldr.w	r3, [r9]
 801be40:	881c      	ldrh	r4, [r3, #0]
 801be42:	b17c      	cbz	r4, 801be64 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801be44:	682c      	ldr	r4, [r5, #0]
 801be46:	3801      	subs	r0, #1
 801be48:	42a2      	cmp	r2, r4
 801be4a:	b280      	uxth	r0, r0
 801be4c:	dd0a      	ble.n	801be64 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801be4e:	1c9c      	adds	r4, r3, #2
 801be50:	f8c9 4000 	str.w	r4, [r9]
 801be54:	881c      	ldrh	r4, [r3, #0]
 801be56:	682b      	ldr	r3, [r5, #0]
 801be58:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 801be5c:	682b      	ldr	r3, [r5, #0]
 801be5e:	3301      	adds	r3, #1
 801be60:	602b      	str	r3, [r5, #0]
 801be62:	e7ea      	b.n	801be3a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801be64:	2620      	movs	r6, #32
 801be66:	b151      	cbz	r1, 801be7e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801be68:	6828      	ldr	r0, [r5, #0]
 801be6a:	3901      	subs	r1, #1
 801be6c:	4282      	cmp	r2, r0
 801be6e:	b289      	uxth	r1, r1
 801be70:	dd05      	ble.n	801be7e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801be72:	f827 6010 	strh.w	r6, [r7, r0, lsl #1]
 801be76:	682b      	ldr	r3, [r5, #0]
 801be78:	3301      	adds	r3, #1
 801be7a:	602b      	str	r3, [r5, #0]
 801be7c:	e7f3      	b.n	801be66 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x142>
 801be7e:	b005      	add	sp, #20
 801be80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801be84 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 801be84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be88:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801be8a:	4604      	mov	r4, r0
 801be8c:	f04f 0801 	mov.w	r8, #1
 801be90:	2000      	movs	r0, #0
 801be92:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 801be96:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801be9a:	8008      	strh	r0, [r1, #0]
 801be9c:	7010      	strb	r0, [r2, #0]
 801be9e:	7018      	strb	r0, [r3, #0]
 801bea0:	f88c 0000 	strb.w	r0, [ip]
 801bea4:	f88e 0000 	strb.w	r0, [lr]
 801bea8:	7030      	strb	r0, [r6, #0]
 801beaa:	6820      	ldr	r0, [r4, #0]
 801beac:	8800      	ldrh	r0, [r0, #0]
 801beae:	b190      	cbz	r0, 801bed6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801beb0:	282b      	cmp	r0, #43	; 0x2b
 801beb2:	d001      	beq.n	801beb8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x34>
 801beb4:	2820      	cmp	r0, #32
 801beb6:	d104      	bne.n	801bec2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3e>
 801beb8:	8008      	strh	r0, [r1, #0]
 801beba:	6820      	ldr	r0, [r4, #0]
 801bebc:	3002      	adds	r0, #2
 801bebe:	6020      	str	r0, [r4, #0]
 801bec0:	e7f3      	b.n	801beaa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x26>
 801bec2:	282d      	cmp	r0, #45	; 0x2d
 801bec4:	d102      	bne.n	801becc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x48>
 801bec6:	f882 8000 	strb.w	r8, [r2]
 801beca:	e7f6      	b.n	801beba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801becc:	2823      	cmp	r0, #35	; 0x23
 801bece:	d102      	bne.n	801bed6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801bed0:	f883 8000 	strb.w	r8, [r3]
 801bed4:	e7f1      	b.n	801beba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801bed6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801beda:	2b09      	cmp	r3, #9
 801bedc:	d901      	bls.n	801bee2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x5e>
 801bede:	282a      	cmp	r0, #42	; 0x2a
 801bee0:	d114      	bne.n	801bf0c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801bee2:	2201      	movs	r2, #1
 801bee4:	f88e 2000 	strb.w	r2, [lr]
 801bee8:	6823      	ldr	r3, [r4, #0]
 801beea:	8819      	ldrh	r1, [r3, #0]
 801beec:	2930      	cmp	r1, #48	; 0x30
 801beee:	bf02      	ittt	eq
 801bef0:	3302      	addeq	r3, #2
 801bef2:	6023      	streq	r3, [r4, #0]
 801bef4:	f88c 2000 	strbeq.w	r2, [ip]
 801bef8:	6820      	ldr	r0, [r4, #0]
 801befa:	8803      	ldrh	r3, [r0, #0]
 801befc:	2b2a      	cmp	r3, #42	; 0x2a
 801befe:	d11e      	bne.n	801bf3e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 801bf00:	f04f 33ff 	mov.w	r3, #4294967295
 801bf04:	603b      	str	r3, [r7, #0]
 801bf06:	6823      	ldr	r3, [r4, #0]
 801bf08:	3302      	adds	r3, #2
 801bf0a:	6023      	str	r3, [r4, #0]
 801bf0c:	6823      	ldr	r3, [r4, #0]
 801bf0e:	881b      	ldrh	r3, [r3, #0]
 801bf10:	2b2e      	cmp	r3, #46	; 0x2e
 801bf12:	d112      	bne.n	801bf3a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb6>
 801bf14:	2301      	movs	r3, #1
 801bf16:	7033      	strb	r3, [r6, #0]
 801bf18:	6823      	ldr	r3, [r4, #0]
 801bf1a:	1c98      	adds	r0, r3, #2
 801bf1c:	6020      	str	r0, [r4, #0]
 801bf1e:	885b      	ldrh	r3, [r3, #2]
 801bf20:	2b2a      	cmp	r3, #42	; 0x2a
 801bf22:	d117      	bne.n	801bf54 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd0>
 801bf24:	f04f 33ff 	mov.w	r3, #4294967295
 801bf28:	602b      	str	r3, [r5, #0]
 801bf2a:	6823      	ldr	r3, [r4, #0]
 801bf2c:	3302      	adds	r3, #2
 801bf2e:	6023      	str	r3, [r4, #0]
 801bf30:	682b      	ldr	r3, [r5, #0]
 801bf32:	2b06      	cmp	r3, #6
 801bf34:	bfa8      	it	ge
 801bf36:	2306      	movge	r3, #6
 801bf38:	602b      	str	r3, [r5, #0]
 801bf3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bf3e:	f7ff fee2 	bl	801bd06 <_ZN8touchgfx7Unicode4atoiEPKt>
 801bf42:	6038      	str	r0, [r7, #0]
 801bf44:	6823      	ldr	r3, [r4, #0]
 801bf46:	881a      	ldrh	r2, [r3, #0]
 801bf48:	3a30      	subs	r2, #48	; 0x30
 801bf4a:	2a09      	cmp	r2, #9
 801bf4c:	d8de      	bhi.n	801bf0c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801bf4e:	3302      	adds	r3, #2
 801bf50:	6023      	str	r3, [r4, #0]
 801bf52:	e7f7      	b.n	801bf44 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc0>
 801bf54:	f7ff fed7 	bl	801bd06 <_ZN8touchgfx7Unicode4atoiEPKt>
 801bf58:	6028      	str	r0, [r5, #0]
 801bf5a:	6823      	ldr	r3, [r4, #0]
 801bf5c:	881a      	ldrh	r2, [r3, #0]
 801bf5e:	3a30      	subs	r2, #48	; 0x30
 801bf60:	2a09      	cmp	r2, #9
 801bf62:	d8e5      	bhi.n	801bf30 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xac>
 801bf64:	3302      	adds	r3, #2
 801bf66:	6023      	str	r3, [r4, #0]
 801bf68:	e7f7      	b.n	801bf5a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>

0801bf6a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 801bf6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bf6e:	b0a2      	sub	sp, #136	; 0x88
 801bf70:	2500      	movs	r5, #0
 801bf72:	4606      	mov	r6, r0
 801bf74:	460f      	mov	r7, r1
 801bf76:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801bf7a:	9209      	str	r2, [sp, #36]	; 0x24
 801bf7c:	4629      	mov	r1, r5
 801bf7e:	2242      	movs	r2, #66	; 0x42
 801bf80:	4640      	mov	r0, r8
 801bf82:	461c      	mov	r4, r3
 801bf84:	950d      	str	r5, [sp, #52]	; 0x34
 801bf86:	f7fe fe26 	bl	801abd6 <_ZN8touchgfx6memsetEPvhm>
 801bf8a:	b30e      	cbz	r6, 801bfd0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801bf8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf8e:	b1f3      	cbz	r3, 801bfce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x64>
 801bf90:	f107 3aff 	add.w	sl, r7, #4294967295
 801bf94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bf96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bf98:	8812      	ldrh	r2, [r2, #0]
 801bf9a:	2a00      	cmp	r2, #0
 801bf9c:	f000 80b3 	beq.w	801c106 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801bfa0:	459a      	cmp	sl, r3
 801bfa2:	f340 80b0 	ble.w	801c106 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801bfa6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801bfaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bfac:	f8b9 2000 	ldrh.w	r2, [r9]
 801bfb0:	2a00      	cmp	r2, #0
 801bfb2:	d0ef      	beq.n	801bf94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801bfb4:	2a25      	cmp	r2, #37	; 0x25
 801bfb6:	f000 80aa 	beq.w	801c10e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a4>
 801bfba:	459a      	cmp	sl, r3
 801bfbc:	ddea      	ble.n	801bf94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801bfbe:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801bfc2:	f109 0202 	add.w	r2, r9, #2
 801bfc6:	3301      	adds	r3, #1
 801bfc8:	9209      	str	r2, [sp, #36]	; 0x24
 801bfca:	930d      	str	r3, [sp, #52]	; 0x34
 801bfcc:	e7eb      	b.n	801bfa6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x3c>
 801bfce:	8033      	strh	r3, [r6, #0]
 801bfd0:	4630      	mov	r0, r6
 801bfd2:	b022      	add	sp, #136	; 0x88
 801bfd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bfd8:	3b63      	subs	r3, #99	; 0x63
 801bfda:	2b01      	cmp	r3, #1
 801bfdc:	f200 80df 	bhi.w	801c19e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801bfe0:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801bfe4:	8813      	ldrh	r3, [r2, #0]
 801bfe6:	2b69      	cmp	r3, #105	; 0x69
 801bfe8:	d058      	beq.n	801c09c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801bfea:	d81b      	bhi.n	801c024 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xba>
 801bfec:	2b63      	cmp	r3, #99	; 0x63
 801bfee:	d02e      	beq.n	801c04e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe4>
 801bff0:	2b64      	cmp	r3, #100	; 0x64
 801bff2:	d053      	beq.n	801c09c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801bff4:	2b58      	cmp	r3, #88	; 0x58
 801bff6:	d06f      	beq.n	801c0d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x16e>
 801bff8:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 801bffc:	46a1      	mov	r9, r4
 801bffe:	e02d      	b.n	801c05c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801c000:	2b73      	cmp	r3, #115	; 0x73
 801c002:	d0ed      	beq.n	801bfe0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801c004:	d803      	bhi.n	801c00e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa4>
 801c006:	2b6f      	cmp	r3, #111	; 0x6f
 801c008:	f040 80c9 	bne.w	801c19e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801c00c:	e7e8      	b.n	801bfe0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801c00e:	2b75      	cmp	r3, #117	; 0x75
 801c010:	d0e6      	beq.n	801bfe0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801c012:	2b78      	cmp	r3, #120	; 0x78
 801c014:	e7f8      	b.n	801c008 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 801c016:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c018:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801c01c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c01e:	3302      	adds	r3, #2
 801c020:	9309      	str	r3, [sp, #36]	; 0x24
 801c022:	e7b7      	b.n	801bf94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801c024:	2b73      	cmp	r3, #115	; 0x73
 801c026:	d034      	beq.n	801c092 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x128>
 801c028:	d807      	bhi.n	801c03a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xd0>
 801c02a:	2b6f      	cmp	r3, #111	; 0x6f
 801c02c:	d1e4      	bne.n	801bff8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801c02e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c030:	f104 0904 	add.w	r9, r4, #4
 801c034:	2308      	movs	r3, #8
 801c036:	1aba      	subs	r2, r7, r2
 801c038:	e048      	b.n	801c0cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801c03a:	2b75      	cmp	r3, #117	; 0x75
 801c03c:	d041      	beq.n	801c0c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x158>
 801c03e:	2b78      	cmp	r3, #120	; 0x78
 801c040:	d1da      	bne.n	801bff8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801c042:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c044:	f104 0904 	add.w	r9, r4, #4
 801c048:	2310      	movs	r3, #16
 801c04a:	1aba      	subs	r2, r7, r2
 801c04c:	e03e      	b.n	801c0cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801c04e:	7823      	ldrb	r3, [r4, #0]
 801c050:	f104 0904 	add.w	r9, r4, #4
 801c054:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 801c058:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801c05c:	aa0d      	add	r2, sp, #52	; 0x34
 801c05e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801c062:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801c066:	a810      	add	r0, sp, #64	; 0x40
 801c068:	9205      	str	r2, [sp, #20]
 801c06a:	464c      	mov	r4, r9
 801c06c:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 801c070:	9204      	str	r2, [sp, #16]
 801c072:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c074:	9203      	str	r2, [sp, #12]
 801c076:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 801c07a:	9202      	str	r2, [sp, #8]
 801c07c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c07e:	9201      	str	r2, [sp, #4]
 801c080:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 801c084:	e9cd 7606 	strd	r7, r6, [sp, #24]
 801c088:	9200      	str	r2, [sp, #0]
 801c08a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c08c:	f7ff fe4a 	bl	801bd24 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801c090:	e7c4      	b.n	801c01c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
 801c092:	f104 0904 	add.w	r9, r4, #4
 801c096:	6823      	ldr	r3, [r4, #0]
 801c098:	9310      	str	r3, [sp, #64]	; 0x40
 801c09a:	e7df      	b.n	801c05c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801c09c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c09e:	230a      	movs	r3, #10
 801c0a0:	4641      	mov	r1, r8
 801c0a2:	6820      	ldr	r0, [r4, #0]
 801c0a4:	1aba      	subs	r2, r7, r2
 801c0a6:	f104 0904 	add.w	r9, r4, #4
 801c0aa:	b292      	uxth	r2, r2
 801c0ac:	f7ff fdf9 	bl	801bca2 <_ZN8touchgfx7Unicode4itoaElPtti>
 801c0b0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801c0b4:	2b2d      	cmp	r3, #45	; 0x2d
 801c0b6:	d1d1      	bne.n	801c05c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801c0b8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801c0bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c0be:	3302      	adds	r3, #2
 801c0c0:	e7ea      	b.n	801c098 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x12e>
 801c0c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c0c4:	f104 0904 	add.w	r9, r4, #4
 801c0c8:	230a      	movs	r3, #10
 801c0ca:	1aba      	subs	r2, r7, r2
 801c0cc:	b292      	uxth	r2, r2
 801c0ce:	4641      	mov	r1, r8
 801c0d0:	6820      	ldr	r0, [r4, #0]
 801c0d2:	f7ff fdc8 	bl	801bc66 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801c0d6:	e7c1      	b.n	801c05c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801c0d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c0da:	2310      	movs	r3, #16
 801c0dc:	4641      	mov	r1, r8
 801c0de:	6820      	ldr	r0, [r4, #0]
 801c0e0:	1aba      	subs	r2, r7, r2
 801c0e2:	f104 0904 	add.w	r9, r4, #4
 801c0e6:	b292      	uxth	r2, r2
 801c0e8:	f7ff fdbd 	bl	801bc66 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801c0ec:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801c0f0:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801c0f4:	2b00      	cmp	r3, #0
 801c0f6:	d0b1      	beq.n	801c05c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801c0f8:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801c0fc:	2919      	cmp	r1, #25
 801c0fe:	d8f7      	bhi.n	801c0f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801c100:	3b20      	subs	r3, #32
 801c102:	8013      	strh	r3, [r2, #0]
 801c104:	e7f4      	b.n	801c0f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801c106:	2200      	movs	r2, #0
 801c108:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801c10c:	e760      	b.n	801bfd0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801c10e:	459a      	cmp	sl, r3
 801c110:	f77f af40 	ble.w	801bf94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801c114:	f109 0302 	add.w	r3, r9, #2
 801c118:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 801c11c:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 801c120:	a809      	add	r0, sp, #36	; 0x24
 801c122:	9309      	str	r3, [sp, #36]	; 0x24
 801c124:	ab0f      	add	r3, sp, #60	; 0x3c
 801c126:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 801c12a:	9304      	str	r3, [sp, #16]
 801c12c:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801c130:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 801c134:	9303      	str	r3, [sp, #12]
 801c136:	ab0e      	add	r3, sp, #56	; 0x38
 801c138:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
 801c13c:	9302      	str	r3, [sp, #8]
 801c13e:	ab0c      	add	r3, sp, #48	; 0x30
 801c140:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 801c144:	9301      	str	r3, [sp, #4]
 801c146:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801c14a:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 801c14e:	9300      	str	r3, [sp, #0]
 801c150:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801c154:	950e      	str	r5, [sp, #56]	; 0x38
 801c156:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 801c15a:	950f      	str	r5, [sp, #60]	; 0x3c
 801c15c:	f7ff fe92 	bl	801be84 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801c160:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c162:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c164:	2b00      	cmp	r3, #0
 801c166:	bfbf      	itttt	lt
 801c168:	6823      	ldrlt	r3, [r4, #0]
 801c16a:	3404      	addlt	r4, #4
 801c16c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801c170:	930e      	strlt	r3, [sp, #56]	; 0x38
 801c172:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c174:	2b00      	cmp	r3, #0
 801c176:	bfbf      	itttt	lt
 801c178:	6823      	ldrlt	r3, [r4, #0]
 801c17a:	3404      	addlt	r4, #4
 801c17c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801c180:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801c182:	8813      	ldrh	r3, [r2, #0]
 801c184:	2b69      	cmp	r3, #105	; 0x69
 801c186:	f43f af2b 	beq.w	801bfe0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801c18a:	f63f af39 	bhi.w	801c000 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x96>
 801c18e:	2b58      	cmp	r3, #88	; 0x58
 801c190:	f43f af26 	beq.w	801bfe0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801c194:	f63f af20 	bhi.w	801bfd8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x6e>
 801c198:	2b25      	cmp	r3, #37	; 0x25
 801c19a:	f43f af3c 	beq.w	801c016 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xac>
 801c19e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c1a0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801c1a4:	f8b9 2000 	ldrh.w	r2, [r9]
 801c1a8:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801c1ac:	3301      	adds	r3, #1
 801c1ae:	930d      	str	r3, [sp, #52]	; 0x34
 801c1b0:	e734      	b.n	801c01c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
	...

0801c1b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801c1b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c1b6:	4605      	mov	r5, r0
 801c1b8:	b0a1      	sub	sp, #132	; 0x84
 801c1ba:	4610      	mov	r0, r2
 801c1bc:	460e      	mov	r6, r1
 801c1be:	4614      	mov	r4, r2
 801c1c0:	461f      	mov	r7, r3
 801c1c2:	f7ff fd33 	bl	801bc2c <_ZN8touchgfx7Unicode6strlenEPKc>
 801c1c6:	283f      	cmp	r0, #63	; 0x3f
 801c1c8:	d906      	bls.n	801c1d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 801c1ca:	4b0a      	ldr	r3, [pc, #40]	; (801c1f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 801c1cc:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 801c1d0:	4a09      	ldr	r2, [pc, #36]	; (801c1f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 801c1d2:	480a      	ldr	r0, [pc, #40]	; (801c1fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 801c1d4:	f009 ffac 	bl	8026130 <__assert_func>
 801c1d8:	4621      	mov	r1, r4
 801c1da:	2240      	movs	r2, #64	; 0x40
 801c1dc:	4668      	mov	r0, sp
 801c1de:	f7ff fd31 	bl	801bc44 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801c1e2:	463b      	mov	r3, r7
 801c1e4:	466a      	mov	r2, sp
 801c1e6:	4631      	mov	r1, r6
 801c1e8:	4628      	mov	r0, r5
 801c1ea:	f7ff febe 	bl	801bf6a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 801c1ee:	b021      	add	sp, #132	; 0x84
 801c1f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c1f2:	bf00      	nop
 801c1f4:	0802a545 	.word	0x0802a545
 801c1f8:	0802a617 	.word	0x0802a617
 801c1fc:	0802a562 	.word	0x0802a562

0801c200 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801c200:	b40c      	push	{r2, r3}
 801c202:	b507      	push	{r0, r1, r2, lr}
 801c204:	ab04      	add	r3, sp, #16
 801c206:	f853 2b04 	ldr.w	r2, [r3], #4
 801c20a:	9301      	str	r3, [sp, #4]
 801c20c:	f7ff ffd2 	bl	801c1b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801c210:	b003      	add	sp, #12
 801c212:	f85d eb04 	ldr.w	lr, [sp], #4
 801c216:	b002      	add	sp, #8
 801c218:	4770      	bx	lr
	...

0801c21c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>:
 801c21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c220:	b0c3      	sub	sp, #268	; 0x10c
 801c222:	2400      	movs	r4, #0
 801c224:	4606      	mov	r6, r0
 801c226:	4689      	mov	r9, r1
 801c228:	af10      	add	r7, sp, #64	; 0x40
 801c22a:	9209      	str	r2, [sp, #36]	; 0x24
 801c22c:	4621      	mov	r1, r4
 801c22e:	22c8      	movs	r2, #200	; 0xc8
 801c230:	4638      	mov	r0, r7
 801c232:	469a      	mov	sl, r3
 801c234:	940c      	str	r4, [sp, #48]	; 0x30
 801c236:	f7fe fcce 	bl	801abd6 <_ZN8touchgfx6memsetEPvhm>
 801c23a:	b116      	cbz	r6, 801c242 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 801c23c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c23e:	b923      	cbnz	r3, 801c24a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x2e>
 801c240:	8033      	strh	r3, [r6, #0]
 801c242:	4630      	mov	r0, r6
 801c244:	b043      	add	sp, #268	; 0x10c
 801c246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c24a:	f109 3bff 	add.w	fp, r9, #4294967295
 801c24e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c250:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c252:	8812      	ldrh	r2, [r2, #0]
 801c254:	2a00      	cmp	r2, #0
 801c256:	f000 80d1 	beq.w	801c3fc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 801c25a:	459b      	cmp	fp, r3
 801c25c:	f340 80ce 	ble.w	801c3fc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 801c260:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801c262:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c264:	882a      	ldrh	r2, [r5, #0]
 801c266:	2a00      	cmp	r2, #0
 801c268:	d0f1      	beq.n	801c24e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801c26a:	2a25      	cmp	r2, #37	; 0x25
 801c26c:	f000 80ca 	beq.w	801c404 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e8>
 801c270:	459b      	cmp	fp, r3
 801c272:	ddec      	ble.n	801c24e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801c274:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801c278:	3502      	adds	r5, #2
 801c27a:	3301      	adds	r3, #1
 801c27c:	9509      	str	r5, [sp, #36]	; 0x24
 801c27e:	930c      	str	r3, [sp, #48]	; 0x30
 801c280:	e7ee      	b.n	801c260 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x44>
 801c282:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801c286:	3202      	adds	r2, #2
 801c288:	920c      	str	r2, [sp, #48]	; 0x30
 801c28a:	e0ac      	b.n	801c3e6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1ca>
 801c28c:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801c290:	970f      	str	r7, [sp, #60]	; 0x3c
 801c292:	3401      	adds	r4, #1
 801c294:	edd3 7a00 	vldr	s15, [r3]
 801c298:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801c29c:	b923      	cbnz	r3, 801c2a8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x8c>
 801c29e:	2301      	movs	r3, #1
 801c2a0:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801c2a4:	2303      	movs	r3, #3
 801c2a6:	930e      	str	r3, [sp, #56]	; 0x38
 801c2a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c2ac:	980e      	ldr	r0, [sp, #56]	; 0x38
 801c2ae:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 801c2b2:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 801c4b0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x294>
 801c2b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c2ba:	bf42      	ittt	mi
 801c2bc:	232d      	movmi	r3, #45	; 0x2d
 801c2be:	eef1 7a67 	vnegmi.f32	s15, s15
 801c2c2:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 801c2c6:	2300      	movs	r3, #0
 801c2c8:	4298      	cmp	r0, r3
 801c2ca:	dd03      	ble.n	801c2d4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xb8>
 801c2cc:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801c2d0:	3301      	adds	r3, #1
 801c2d2:	e7f9      	b.n	801c2c8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xac>
 801c2d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c2d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c2dc:	eeb0 7a67 	vmov.f32	s14, s15
 801c2e0:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801c2e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c2e8:	da26      	bge.n	801c338 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x11c>
 801c2ea:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801c2ee:	eba9 0202 	sub.w	r2, r9, r2
 801c2f2:	2100      	movs	r1, #0
 801c2f4:	eef4 6ae5 	vcmpe.f32	s13, s11
 801c2f8:	b28d      	uxth	r5, r1
 801c2fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c2fe:	db21      	blt.n	801c344 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801c300:	1a53      	subs	r3, r2, r1
 801c302:	2b00      	cmp	r3, #0
 801c304:	dd1e      	ble.n	801c344 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801c306:	2963      	cmp	r1, #99	; 0x63
 801c308:	d01b      	beq.n	801c342 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x126>
 801c30a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801c30e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801c312:	ee17 3a10 	vmov	r3, s14
 801c316:	2b09      	cmp	r3, #9
 801c318:	bfa8      	it	ge
 801c31a:	2309      	movge	r3, #9
 801c31c:	ee07 3a10 	vmov	s14, r3
 801c320:	f103 0530 	add.w	r5, r3, #48	; 0x30
 801c324:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c328:	f827 5011 	strh.w	r5, [r7, r1, lsl #1]
 801c32c:	3101      	adds	r1, #1
 801c32e:	eee7 7a66 	vfms.f32	s15, s14, s13
 801c332:	eec6 6a86 	vdiv.f32	s13, s13, s12
 801c336:	e7dd      	b.n	801c2f4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xd8>
 801c338:	ee66 6a86 	vmul.f32	s13, s13, s12
 801c33c:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801c340:	e7ce      	b.n	801c2e0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xc4>
 801c342:	460d      	mov	r5, r1
 801c344:	2a63      	cmp	r2, #99	; 0x63
 801c346:	bfd4      	ite	le
 801c348:	ebc5 0202 	rsble	r2, r5, r2
 801c34c:	f1c5 0263 	rsbgt	r2, r5, #99	; 0x63
 801c350:	2a00      	cmp	r2, #0
 801c352:	dd4e      	ble.n	801c3f2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d6>
 801c354:	4603      	mov	r3, r0
 801c356:	f04f 0801 	mov.w	r8, #1
 801c35a:	2b00      	cmp	r3, #0
 801c35c:	dd0e      	ble.n	801c37c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x160>
 801c35e:	ee67 7a86 	vmul.f32	s15, s15, s12
 801c362:	210a      	movs	r1, #10
 801c364:	3b01      	subs	r3, #1
 801c366:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801c36a:	ee17 ca10 	vmov	ip, s14
 801c36e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c372:	fb01 c808 	mla	r8, r1, r8, ip
 801c376:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c37a:	e7ee      	b.n	801c35a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x13e>
 801c37c:	2800      	cmp	r0, #0
 801c37e:	f100 33ff 	add.w	r3, r0, #4294967295
 801c382:	ea4f 0545 	mov.w	r5, r5, lsl #1
 801c386:	bfac      	ite	ge
 801c388:	1a18      	subge	r0, r3, r0
 801c38a:	4618      	movlt	r0, r3
 801c38c:	b292      	uxth	r2, r2
 801c38e:	230a      	movs	r3, #10
 801c390:	900e      	str	r0, [sp, #56]	; 0x38
 801c392:	1979      	adds	r1, r7, r5
 801c394:	4640      	mov	r0, r8
 801c396:	f7ff fc84 	bl	801bca2 <_ZN8touchgfx7Unicode4itoaElPtti>
 801c39a:	f1b8 0f01 	cmp.w	r8, #1
 801c39e:	dc26      	bgt.n	801c3ee <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d2>
 801c3a0:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 801c3a4:	2b00      	cmp	r3, #0
 801c3a6:	bf0c      	ite	eq
 801c3a8:	2300      	moveq	r3, #0
 801c3aa:	232e      	movne	r3, #46	; 0x2e
 801c3ac:	aa42      	add	r2, sp, #264	; 0x108
 801c3ae:	4415      	add	r5, r2
 801c3b0:	aa0c      	add	r2, sp, #48	; 0x30
 801c3b2:	f825 3cc8 	strh.w	r3, [r5, #-200]
 801c3b6:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801c3ba:	a80f      	add	r0, sp, #60	; 0x3c
 801c3bc:	9205      	str	r2, [sp, #20]
 801c3be:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 801c3c2:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801c3c6:	9204      	str	r2, [sp, #16]
 801c3c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c3ca:	9203      	str	r2, [sp, #12]
 801c3cc:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 801c3d0:	9202      	str	r2, [sp, #8]
 801c3d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c3d4:	9201      	str	r2, [sp, #4]
 801c3d6:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 801c3da:	e9cd 9606 	strd	r9, r6, [sp, #24]
 801c3de:	9200      	str	r2, [sp, #0]
 801c3e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c3e2:	f7ff fc9f 	bl	801bd24 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801c3e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c3e8:	3302      	adds	r3, #2
 801c3ea:	9309      	str	r3, [sp, #36]	; 0x24
 801c3ec:	e72f      	b.n	801c24e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801c3ee:	232e      	movs	r3, #46	; 0x2e
 801c3f0:	e7dc      	b.n	801c3ac <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x190>
 801c3f2:	ab42      	add	r3, sp, #264	; 0x108
 801c3f4:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801c3f8:	2300      	movs	r3, #0
 801c3fa:	e7d9      	b.n	801c3b0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x194>
 801c3fc:	2200      	movs	r2, #0
 801c3fe:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801c402:	e71e      	b.n	801c242 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 801c404:	459b      	cmp	fp, r3
 801c406:	f77f af22 	ble.w	801c24e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801c40a:	2300      	movs	r3, #0
 801c40c:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 801c410:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 801c414:	a809      	add	r0, sp, #36	; 0x24
 801c416:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801c41a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c41e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c422:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801c426:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801c42a:	930d      	str	r3, [sp, #52]	; 0x34
 801c42c:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801c430:	930e      	str	r3, [sp, #56]	; 0x38
 801c432:	1cab      	adds	r3, r5, #2
 801c434:	9309      	str	r3, [sp, #36]	; 0x24
 801c436:	ab0e      	add	r3, sp, #56	; 0x38
 801c438:	9304      	str	r3, [sp, #16]
 801c43a:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801c43e:	9303      	str	r3, [sp, #12]
 801c440:	ab0d      	add	r3, sp, #52	; 0x34
 801c442:	9302      	str	r3, [sp, #8]
 801c444:	ab0b      	add	r3, sp, #44	; 0x2c
 801c446:	9301      	str	r3, [sp, #4]
 801c448:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801c44c:	9300      	str	r3, [sp, #0]
 801c44e:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 801c452:	f7ff fd17 	bl	801be84 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801c456:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c458:	2b00      	cmp	r3, #0
 801c45a:	da0b      	bge.n	801c474 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x258>
 801c45c:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801c460:	3401      	adds	r4, #1
 801c462:	edd3 7a00 	vldr	s15, [r3]
 801c466:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c46a:	ee17 3a90 	vmov	r3, s15
 801c46e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c472:	930d      	str	r3, [sp, #52]	; 0x34
 801c474:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c476:	2b00      	cmp	r3, #0
 801c478:	da0b      	bge.n	801c492 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x276>
 801c47a:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801c47e:	3401      	adds	r4, #1
 801c480:	edd3 7a00 	vldr	s15, [r3]
 801c484:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c488:	ee17 3a90 	vmov	r3, s15
 801c48c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c490:	930e      	str	r3, [sp, #56]	; 0x38
 801c492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c494:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c496:	881b      	ldrh	r3, [r3, #0]
 801c498:	2b25      	cmp	r3, #37	; 0x25
 801c49a:	f43f aef2 	beq.w	801c282 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x66>
 801c49e:	2b66      	cmp	r3, #102	; 0x66
 801c4a0:	f43f aef4 	beq.w	801c28c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x70>
 801c4a4:	9509      	str	r5, [sp, #36]	; 0x24
 801c4a6:	882b      	ldrh	r3, [r5, #0]
 801c4a8:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801c4ac:	3201      	adds	r2, #1
 801c4ae:	e6eb      	b.n	801c288 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x6c>
 801c4b0:	3f000002 	.word	0x3f000002

0801c4b4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 801c4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c4b6:	4605      	mov	r5, r0
 801c4b8:	b0a1      	sub	sp, #132	; 0x84
 801c4ba:	4610      	mov	r0, r2
 801c4bc:	460e      	mov	r6, r1
 801c4be:	4614      	mov	r4, r2
 801c4c0:	461f      	mov	r7, r3
 801c4c2:	f7ff fbb3 	bl	801bc2c <_ZN8touchgfx7Unicode6strlenEPKc>
 801c4c6:	283f      	cmp	r0, #63	; 0x3f
 801c4c8:	d906      	bls.n	801c4d8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x24>
 801c4ca:	4b0a      	ldr	r3, [pc, #40]	; (801c4f4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x40>)
 801c4cc:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 801c4d0:	4a09      	ldr	r2, [pc, #36]	; (801c4f8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x44>)
 801c4d2:	480a      	ldr	r0, [pc, #40]	; (801c4fc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x48>)
 801c4d4:	f009 fe2c 	bl	8026130 <__assert_func>
 801c4d8:	4621      	mov	r1, r4
 801c4da:	2240      	movs	r2, #64	; 0x40
 801c4dc:	4668      	mov	r0, sp
 801c4de:	f7ff fbb1 	bl	801bc44 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801c4e2:	463b      	mov	r3, r7
 801c4e4:	466a      	mov	r2, sp
 801c4e6:	4631      	mov	r1, r6
 801c4e8:	4628      	mov	r0, r5
 801c4ea:	f7ff fe97 	bl	801c21c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>
 801c4ee:	b021      	add	sp, #132	; 0x84
 801c4f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c4f2:	bf00      	nop
 801c4f4:	0802a545 	.word	0x0802a545
 801c4f8:	0802a588 	.word	0x0802a588
 801c4fc:	0802a562 	.word	0x0802a562

0801c500 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801c500:	4b01      	ldr	r3, [pc, #4]	; (801c508 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801c502:	6018      	str	r0, [r3, #0]
 801c504:	4770      	bx	lr
 801c506:	bf00      	nop
 801c508:	2000c654 	.word	0x2000c654

0801c50c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801c50c:	4b07      	ldr	r3, [pc, #28]	; (801c52c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 801c50e:	881a      	ldrh	r2, [r3, #0]
 801c510:	4282      	cmp	r2, r0
 801c512:	d809      	bhi.n	801c528 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801c514:	4b06      	ldr	r3, [pc, #24]	; (801c530 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 801c516:	881b      	ldrh	r3, [r3, #0]
 801c518:	4413      	add	r3, r2
 801c51a:	4298      	cmp	r0, r3
 801c51c:	da04      	bge.n	801c528 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801c51e:	4b05      	ldr	r3, [pc, #20]	; (801c534 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 801c520:	681b      	ldr	r3, [r3, #0]
 801c522:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801c526:	4770      	bx	lr
 801c528:	2000      	movs	r0, #0
 801c52a:	4770      	bx	lr
 801c52c:	2000c674 	.word	0x2000c674
 801c530:	2000c678 	.word	0x2000c678
 801c534:	2000c658 	.word	0x2000c658

0801c538 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801c538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c53c:	4d26      	ldr	r5, [pc, #152]	; (801c5d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801c53e:	682b      	ldr	r3, [r5, #0]
 801c540:	2b00      	cmp	r3, #0
 801c542:	d046      	beq.n	801c5d2 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801c544:	4a25      	ldr	r2, [pc, #148]	; (801c5dc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801c546:	4f26      	ldr	r7, [pc, #152]	; (801c5e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801c548:	8810      	ldrh	r0, [r2, #0]
 801c54a:	883c      	ldrh	r4, [r7, #0]
 801c54c:	4e25      	ldr	r6, [pc, #148]	; (801c5e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801c54e:	4420      	add	r0, r4
 801c550:	1c42      	adds	r2, r0, #1
 801c552:	ea4f 0880 	mov.w	r8, r0, lsl #2
 801c556:	f022 0201 	bic.w	r2, r2, #1
 801c55a:	0412      	lsls	r2, r2, #16
 801c55c:	0c12      	lsrs	r2, r2, #16
 801c55e:	0051      	lsls	r1, r2, #1
 801c560:	220e      	movs	r2, #14
 801c562:	eb08 0e01 	add.w	lr, r8, r1
 801c566:	fb02 fc04 	mul.w	ip, r2, r4
 801c56a:	eb03 0208 	add.w	r2, r3, r8
 801c56e:	4c1e      	ldr	r4, [pc, #120]	; (801c5e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801c570:	6022      	str	r2, [r4, #0]
 801c572:	eb03 020e 	add.w	r2, r3, lr
 801c576:	44e6      	add	lr, ip
 801c578:	6032      	str	r2, [r6, #0]
 801c57a:	4473      	add	r3, lr
 801c57c:	4a1b      	ldr	r2, [pc, #108]	; (801c5ec <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801c57e:	6013      	str	r3, [r2, #0]
 801c580:	2300      	movs	r3, #0
 801c582:	4a1b      	ldr	r2, [pc, #108]	; (801c5f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801c584:	8013      	strh	r3, [r2, #0]
 801c586:	4a1b      	ldr	r2, [pc, #108]	; (801c5f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801c588:	6812      	ldr	r2, [r2, #0]
 801c58a:	eba2 0208 	sub.w	r2, r2, r8
 801c58e:	1a52      	subs	r2, r2, r1
 801c590:	4919      	ldr	r1, [pc, #100]	; (801c5f8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801c592:	eba2 020c 	sub.w	r2, r2, ip
 801c596:	469c      	mov	ip, r3
 801c598:	600a      	str	r2, [r1, #0]
 801c59a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801c59e:	4a17      	ldr	r2, [pc, #92]	; (801c5fc <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801c5a0:	8013      	strh	r3, [r2, #0]
 801c5a2:	4283      	cmp	r3, r0
 801c5a4:	d10d      	bne.n	801c5c2 <_ZN8touchgfx6Bitmap10clearCacheEv+0x8a>
 801c5a6:	883d      	ldrh	r5, [r7, #0]
 801c5a8:	2300      	movs	r3, #0
 801c5aa:	6830      	ldr	r0, [r6, #0]
 801c5ac:	240e      	movs	r4, #14
 801c5ae:	429d      	cmp	r5, r3
 801c5b0:	d90f      	bls.n	801c5d2 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801c5b2:	fb04 0203 	mla	r2, r4, r3, r0
 801c5b6:	3301      	adds	r3, #1
 801c5b8:	7b11      	ldrb	r1, [r2, #12]
 801c5ba:	f36f 1145 	bfc	r1, #5, #1
 801c5be:	7311      	strb	r1, [r2, #12]
 801c5c0:	e7f5      	b.n	801c5ae <_ZN8touchgfx6Bitmap10clearCacheEv+0x76>
 801c5c2:	682a      	ldr	r2, [r5, #0]
 801c5c4:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801c5c8:	6822      	ldr	r2, [r4, #0]
 801c5ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801c5ce:	3301      	adds	r3, #1
 801c5d0:	e7e7      	b.n	801c5a2 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 801c5d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c5d6:	bf00      	nop
 801c5d8:	2000c658 	.word	0x2000c658
 801c5dc:	2000c674 	.word	0x2000c674
 801c5e0:	2000c678 	.word	0x2000c678
 801c5e4:	2000c65c 	.word	0x2000c65c
 801c5e8:	2000c66c 	.word	0x2000c66c
 801c5ec:	2000c664 	.word	0x2000c664
 801c5f0:	2000c676 	.word	0x2000c676
 801c5f4:	2000c660 	.word	0x2000c660
 801c5f8:	2000c670 	.word	0x2000c670
 801c5fc:	2000c668 	.word	0x2000c668

0801c600 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801c600:	4b10      	ldr	r3, [pc, #64]	; (801c644 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801c602:	b510      	push	{r4, lr}
 801c604:	681b      	ldr	r3, [r3, #0]
 801c606:	b9db      	cbnz	r3, 801c640 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801c608:	b1d1      	cbz	r1, 801c640 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801c60a:	4b0f      	ldr	r3, [pc, #60]	; (801c648 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801c60c:	240e      	movs	r4, #14
 801c60e:	801a      	strh	r2, [r3, #0]
 801c610:	b292      	uxth	r2, r2
 801c612:	4b0e      	ldr	r3, [pc, #56]	; (801c64c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801c614:	881b      	ldrh	r3, [r3, #0]
 801c616:	4413      	add	r3, r2
 801c618:	4362      	muls	r2, r4
 801c61a:	2406      	movs	r4, #6
 801c61c:	fb04 2203 	mla	r2, r4, r3, r2
 801c620:	428a      	cmp	r2, r1
 801c622:	d305      	bcc.n	801c630 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801c624:	4b0a      	ldr	r3, [pc, #40]	; (801c650 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801c626:	2137      	movs	r1, #55	; 0x37
 801c628:	4a0a      	ldr	r2, [pc, #40]	; (801c654 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801c62a:	480b      	ldr	r0, [pc, #44]	; (801c658 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801c62c:	f009 fd80 	bl	8026130 <__assert_func>
 801c630:	4b0a      	ldr	r3, [pc, #40]	; (801c65c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801c632:	6019      	str	r1, [r3, #0]
 801c634:	4b0a      	ldr	r3, [pc, #40]	; (801c660 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801c636:	6018      	str	r0, [r3, #0]
 801c638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c63c:	f7ff bf7c 	b.w	801c538 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801c640:	bd10      	pop	{r4, pc}
 801c642:	bf00      	nop
 801c644:	2000c664 	.word	0x2000c664
 801c648:	2000c678 	.word	0x2000c678
 801c64c:	2000c674 	.word	0x2000c674
 801c650:	0802a6f9 	.word	0x0802a6f9
 801c654:	0802a752 	.word	0x0802a752
 801c658:	0802a6d4 	.word	0x0802a6d4
 801c65c:	2000c660 	.word	0x2000c660
 801c660:	2000c658 	.word	0x2000c658

0801c664 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801c664:	b470      	push	{r4, r5, r6}
 801c666:	4c07      	ldr	r4, [pc, #28]	; (801c684 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801c668:	4605      	mov	r5, r0
 801c66a:	4610      	mov	r0, r2
 801c66c:	9a03      	ldr	r2, [sp, #12]
 801c66e:	6826      	ldr	r6, [r4, #0]
 801c670:	b936      	cbnz	r6, 801c680 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801c672:	6025      	str	r5, [r4, #0]
 801c674:	4c04      	ldr	r4, [pc, #16]	; (801c688 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801c676:	8021      	strh	r1, [r4, #0]
 801c678:	4619      	mov	r1, r3
 801c67a:	bc70      	pop	{r4, r5, r6}
 801c67c:	f7ff bfc0 	b.w	801c600 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801c680:	bc70      	pop	{r4, r5, r6}
 801c682:	4770      	bx	lr
 801c684:	2000c67c 	.word	0x2000c67c
 801c688:	2000c674 	.word	0x2000c674

0801c68c <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801c68c:	b508      	push	{r3, lr}
 801c68e:	4b14      	ldr	r3, [pc, #80]	; (801c6e0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801c690:	6819      	ldr	r1, [r3, #0]
 801c692:	b931      	cbnz	r1, 801c6a2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801c694:	4b13      	ldr	r3, [pc, #76]	; (801c6e4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801c696:	f240 21e6 	movw	r1, #742	; 0x2e6
 801c69a:	4a13      	ldr	r2, [pc, #76]	; (801c6e8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801c69c:	4813      	ldr	r0, [pc, #76]	; (801c6ec <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801c69e:	f009 fd47 	bl	8026130 <__assert_func>
 801c6a2:	4a13      	ldr	r2, [pc, #76]	; (801c6f0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801c6a4:	8803      	ldrh	r3, [r0, #0]
 801c6a6:	8812      	ldrh	r2, [r2, #0]
 801c6a8:	4293      	cmp	r3, r2
 801c6aa:	d204      	bcs.n	801c6b6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801c6ac:	2214      	movs	r2, #20
 801c6ae:	fb02 1303 	mla	r3, r2, r3, r1
 801c6b2:	8918      	ldrh	r0, [r3, #8]
 801c6b4:	bd08      	pop	{r3, pc}
 801c6b6:	490f      	ldr	r1, [pc, #60]	; (801c6f4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801c6b8:	8809      	ldrh	r1, [r1, #0]
 801c6ba:	4411      	add	r1, r2
 801c6bc:	428b      	cmp	r3, r1
 801c6be:	da06      	bge.n	801c6ce <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801c6c0:	1a9b      	subs	r3, r3, r2
 801c6c2:	4a0d      	ldr	r2, [pc, #52]	; (801c6f8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801c6c4:	210e      	movs	r1, #14
 801c6c6:	6812      	ldr	r2, [r2, #0]
 801c6c8:	fb01 2303 	mla	r3, r1, r3, r2
 801c6cc:	e7f1      	b.n	801c6b2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801c6ce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c6d2:	4293      	cmp	r3, r2
 801c6d4:	bf0a      	itet	eq
 801c6d6:	4b09      	ldreq	r3, [pc, #36]	; (801c6fc <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801c6d8:	2000      	movne	r0, #0
 801c6da:	8818      	ldrheq	r0, [r3, #0]
 801c6dc:	e7ea      	b.n	801c6b4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801c6de:	bf00      	nop
 801c6e0:	2000c67c 	.word	0x2000c67c
 801c6e4:	080286ac 	.word	0x080286ac
 801c6e8:	0802a7ff 	.word	0x0802a7ff
 801c6ec:	0802a6d4 	.word	0x0802a6d4
 801c6f0:	2000c674 	.word	0x2000c674
 801c6f4:	2000c678 	.word	0x2000c678
 801c6f8:	2000c65c 	.word	0x2000c65c
 801c6fc:	2000c5a8 	.word	0x2000c5a8

0801c700 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801c700:	b508      	push	{r3, lr}
 801c702:	4b14      	ldr	r3, [pc, #80]	; (801c754 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801c704:	6819      	ldr	r1, [r3, #0]
 801c706:	b931      	cbnz	r1, 801c716 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801c708:	4b13      	ldr	r3, [pc, #76]	; (801c758 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801c70a:	f240 21fa 	movw	r1, #762	; 0x2fa
 801c70e:	4a13      	ldr	r2, [pc, #76]	; (801c75c <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801c710:	4813      	ldr	r0, [pc, #76]	; (801c760 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801c712:	f009 fd0d 	bl	8026130 <__assert_func>
 801c716:	4a13      	ldr	r2, [pc, #76]	; (801c764 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801c718:	8803      	ldrh	r3, [r0, #0]
 801c71a:	8812      	ldrh	r2, [r2, #0]
 801c71c:	4293      	cmp	r3, r2
 801c71e:	d204      	bcs.n	801c72a <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801c720:	2214      	movs	r2, #20
 801c722:	fb02 1303 	mla	r3, r2, r3, r1
 801c726:	8958      	ldrh	r0, [r3, #10]
 801c728:	bd08      	pop	{r3, pc}
 801c72a:	490f      	ldr	r1, [pc, #60]	; (801c768 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801c72c:	8809      	ldrh	r1, [r1, #0]
 801c72e:	4411      	add	r1, r2
 801c730:	428b      	cmp	r3, r1
 801c732:	da06      	bge.n	801c742 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801c734:	1a9b      	subs	r3, r3, r2
 801c736:	4a0d      	ldr	r2, [pc, #52]	; (801c76c <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801c738:	210e      	movs	r1, #14
 801c73a:	6812      	ldr	r2, [r2, #0]
 801c73c:	fb01 2303 	mla	r3, r1, r3, r2
 801c740:	e7f1      	b.n	801c726 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801c742:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c746:	4293      	cmp	r3, r2
 801c748:	bf0a      	itet	eq
 801c74a:	4b09      	ldreq	r3, [pc, #36]	; (801c770 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801c74c:	2000      	movne	r0, #0
 801c74e:	8818      	ldrheq	r0, [r3, #0]
 801c750:	e7ea      	b.n	801c728 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801c752:	bf00      	nop
 801c754:	2000c67c 	.word	0x2000c67c
 801c758:	080286ac 	.word	0x080286ac
 801c75c:	0802a82b 	.word	0x0802a82b
 801c760:	0802a6d4 	.word	0x0802a6d4
 801c764:	2000c674 	.word	0x2000c674
 801c768:	2000c678 	.word	0x2000c678
 801c76c:	2000c65c 	.word	0x2000c65c
 801c770:	2000c5aa 	.word	0x2000c5aa

0801c774 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801c774:	4b23      	ldr	r3, [pc, #140]	; (801c804 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801c776:	b510      	push	{r4, lr}
 801c778:	681c      	ldr	r4, [r3, #0]
 801c77a:	b934      	cbnz	r4, 801c78a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801c77c:	4b22      	ldr	r3, [pc, #136]	; (801c808 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801c77e:	f240 310e 	movw	r1, #782	; 0x30e
 801c782:	4a22      	ldr	r2, [pc, #136]	; (801c80c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801c784:	4822      	ldr	r0, [pc, #136]	; (801c810 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801c786:	f009 fcd3 	bl	8026130 <__assert_func>
 801c78a:	4a22      	ldr	r2, [pc, #136]	; (801c814 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801c78c:	880b      	ldrh	r3, [r1, #0]
 801c78e:	8812      	ldrh	r2, [r2, #0]
 801c790:	4293      	cmp	r3, r2
 801c792:	d211      	bcs.n	801c7b8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801c794:	2214      	movs	r2, #20
 801c796:	fb02 4303 	mla	r3, r2, r3, r4
 801c79a:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801c79e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801c7a2:	8a1a      	ldrh	r2, [r3, #16]
 801c7a4:	8a5b      	ldrh	r3, [r3, #18]
 801c7a6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801c7aa:	8004      	strh	r4, [r0, #0]
 801c7ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c7b0:	8041      	strh	r1, [r0, #2]
 801c7b2:	8082      	strh	r2, [r0, #4]
 801c7b4:	80c3      	strh	r3, [r0, #6]
 801c7b6:	e00e      	b.n	801c7d6 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801c7b8:	4917      	ldr	r1, [pc, #92]	; (801c818 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801c7ba:	8809      	ldrh	r1, [r1, #0]
 801c7bc:	4411      	add	r1, r2
 801c7be:	428b      	cmp	r3, r1
 801c7c0:	da0a      	bge.n	801c7d8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801c7c2:	1a9b      	subs	r3, r3, r2
 801c7c4:	4a15      	ldr	r2, [pc, #84]	; (801c81c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801c7c6:	210e      	movs	r1, #14
 801c7c8:	6812      	ldr	r2, [r2, #0]
 801c7ca:	fb01 2303 	mla	r3, r1, r3, r2
 801c7ce:	681a      	ldr	r2, [r3, #0]
 801c7d0:	6002      	str	r2, [r0, #0]
 801c7d2:	685a      	ldr	r2, [r3, #4]
 801c7d4:	6042      	str	r2, [r0, #4]
 801c7d6:	bd10      	pop	{r4, pc}
 801c7d8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c7dc:	4293      	cmp	r3, r2
 801c7de:	d10b      	bne.n	801c7f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801c7e0:	4b0f      	ldr	r3, [pc, #60]	; (801c820 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801c7e2:	f9b3 1000 	ldrsh.w	r1, [r3]
 801c7e6:	4b0f      	ldr	r3, [pc, #60]	; (801c824 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801c7e8:	8081      	strh	r1, [r0, #4]
 801c7ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c7ee:	2300      	movs	r3, #0
 801c7f0:	80c2      	strh	r2, [r0, #6]
 801c7f2:	8003      	strh	r3, [r0, #0]
 801c7f4:	8043      	strh	r3, [r0, #2]
 801c7f6:	e7ee      	b.n	801c7d6 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801c7f8:	2300      	movs	r3, #0
 801c7fa:	8003      	strh	r3, [r0, #0]
 801c7fc:	8043      	strh	r3, [r0, #2]
 801c7fe:	8083      	strh	r3, [r0, #4]
 801c800:	e7d8      	b.n	801c7b4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801c802:	bf00      	nop
 801c804:	2000c67c 	.word	0x2000c67c
 801c808:	080286ac 	.word	0x080286ac
 801c80c:	0802a798 	.word	0x0802a798
 801c810:	0802a6d4 	.word	0x0802a6d4
 801c814:	2000c674 	.word	0x2000c674
 801c818:	2000c678 	.word	0x2000c678
 801c81c:	2000c65c 	.word	0x2000c65c
 801c820:	2000c5a8 	.word	0x2000c5a8
 801c824:	2000c5aa 	.word	0x2000c5aa

0801c828 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801c828:	4b18      	ldr	r3, [pc, #96]	; (801c88c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801c82a:	681b      	ldr	r3, [r3, #0]
 801c82c:	b34b      	cbz	r3, 801c882 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801c82e:	4a18      	ldr	r2, [pc, #96]	; (801c890 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801c830:	8800      	ldrh	r0, [r0, #0]
 801c832:	8812      	ldrh	r2, [r2, #0]
 801c834:	4290      	cmp	r0, r2
 801c836:	d211      	bcs.n	801c85c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801c838:	2214      	movs	r2, #20
 801c83a:	fb02 3300 	mla	r3, r2, r0, r3
 801c83e:	8a1a      	ldrh	r2, [r3, #16]
 801c840:	8919      	ldrh	r1, [r3, #8]
 801c842:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801c846:	428a      	cmp	r2, r1
 801c848:	db1d      	blt.n	801c886 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801c84a:	8a58      	ldrh	r0, [r3, #18]
 801c84c:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801c850:	895b      	ldrh	r3, [r3, #10]
 801c852:	4298      	cmp	r0, r3
 801c854:	bfac      	ite	ge
 801c856:	2000      	movge	r0, #0
 801c858:	2001      	movlt	r0, #1
 801c85a:	4770      	bx	lr
 801c85c:	4b0d      	ldr	r3, [pc, #52]	; (801c894 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801c85e:	881b      	ldrh	r3, [r3, #0]
 801c860:	4413      	add	r3, r2
 801c862:	4298      	cmp	r0, r3
 801c864:	da0d      	bge.n	801c882 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801c866:	4b0c      	ldr	r3, [pc, #48]	; (801c898 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801c868:	1a80      	subs	r0, r0, r2
 801c86a:	220e      	movs	r2, #14
 801c86c:	681b      	ldr	r3, [r3, #0]
 801c86e:	fb02 3300 	mla	r3, r2, r0, r3
 801c872:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801c876:	891a      	ldrh	r2, [r3, #8]
 801c878:	4291      	cmp	r1, r2
 801c87a:	db04      	blt.n	801c886 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801c87c:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801c880:	e7e6      	b.n	801c850 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801c882:	2000      	movs	r0, #0
 801c884:	4770      	bx	lr
 801c886:	2001      	movs	r0, #1
 801c888:	4770      	bx	lr
 801c88a:	bf00      	nop
 801c88c:	2000c67c 	.word	0x2000c67c
 801c890:	2000c674 	.word	0x2000c674
 801c894:	2000c678 	.word	0x2000c678
 801c898:	2000c65c 	.word	0x2000c65c

0801c89c <_ZNK8touchgfx6Bitmap7getDataEv>:
 801c89c:	b508      	push	{r3, lr}
 801c89e:	4b12      	ldr	r3, [pc, #72]	; (801c8e8 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801c8a0:	6819      	ldr	r1, [r3, #0]
 801c8a2:	b931      	cbnz	r1, 801c8b2 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801c8a4:	4b11      	ldr	r3, [pc, #68]	; (801c8ec <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801c8a6:	f240 3132 	movw	r1, #818	; 0x332
 801c8aa:	4a11      	ldr	r2, [pc, #68]	; (801c8f0 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801c8ac:	4811      	ldr	r0, [pc, #68]	; (801c8f4 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801c8ae:	f009 fc3f 	bl	8026130 <__assert_func>
 801c8b2:	8803      	ldrh	r3, [r0, #0]
 801c8b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c8b8:	4293      	cmp	r3, r2
 801c8ba:	d012      	beq.n	801c8e2 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801c8bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c8c0:	4293      	cmp	r3, r2
 801c8c2:	d103      	bne.n	801c8cc <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801c8c4:	4b0c      	ldr	r3, [pc, #48]	; (801c8f8 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801c8c6:	681b      	ldr	r3, [r3, #0]
 801c8c8:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801c8ca:	bd08      	pop	{r3, pc}
 801c8cc:	4a0b      	ldr	r2, [pc, #44]	; (801c8fc <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801c8ce:	6812      	ldr	r2, [r2, #0]
 801c8d0:	b11a      	cbz	r2, 801c8da <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801c8d2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801c8d6:	2800      	cmp	r0, #0
 801c8d8:	d1f7      	bne.n	801c8ca <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801c8da:	2214      	movs	r2, #20
 801c8dc:	4353      	muls	r3, r2
 801c8de:	58c8      	ldr	r0, [r1, r3]
 801c8e0:	e7f3      	b.n	801c8ca <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801c8e2:	2000      	movs	r0, #0
 801c8e4:	e7f1      	b.n	801c8ca <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801c8e6:	bf00      	nop
 801c8e8:	2000c67c 	.word	0x2000c67c
 801c8ec:	080286ac 	.word	0x080286ac
 801c8f0:	0802a7ce 	.word	0x0802a7ce
 801c8f4:	0802a6d4 	.word	0x0802a6d4
 801c8f8:	2000c5b4 	.word	0x2000c5b4
 801c8fc:	2000c658 	.word	0x2000c658

0801c900 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801c900:	8802      	ldrh	r2, [r0, #0]
 801c902:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801c906:	429a      	cmp	r2, r3
 801c908:	d840      	bhi.n	801c98c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801c90a:	4b21      	ldr	r3, [pc, #132]	; (801c990 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 801c90c:	881b      	ldrh	r3, [r3, #0]
 801c90e:	429a      	cmp	r2, r3
 801c910:	d220      	bcs.n	801c954 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 801c912:	4b20      	ldr	r3, [pc, #128]	; (801c994 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801c914:	6819      	ldr	r1, [r3, #0]
 801c916:	2314      	movs	r3, #20
 801c918:	fb03 1302 	mla	r3, r3, r2, r1
 801c91c:	6858      	ldr	r0, [r3, #4]
 801c91e:	2800      	cmp	r0, #0
 801c920:	d035      	beq.n	801c98e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801c922:	491d      	ldr	r1, [pc, #116]	; (801c998 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801c924:	6809      	ldr	r1, [r1, #0]
 801c926:	2900      	cmp	r1, #0
 801c928:	d031      	beq.n	801c98e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801c92a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801c92e:	b371      	cbz	r1, 801c98e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801c930:	895a      	ldrh	r2, [r3, #10]
 801c932:	8918      	ldrh	r0, [r3, #8]
 801c934:	4350      	muls	r0, r2
 801c936:	7c5a      	ldrb	r2, [r3, #17]
 801c938:	7cdb      	ldrb	r3, [r3, #19]
 801c93a:	0952      	lsrs	r2, r2, #5
 801c93c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801c940:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801c944:	2b0b      	cmp	r3, #11
 801c946:	bf18      	it	ne
 801c948:	0040      	lslne	r0, r0, #1
 801c94a:	3003      	adds	r0, #3
 801c94c:	f020 0003 	bic.w	r0, r0, #3
 801c950:	4408      	add	r0, r1
 801c952:	4770      	bx	lr
 801c954:	4911      	ldr	r1, [pc, #68]	; (801c99c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801c956:	8809      	ldrh	r1, [r1, #0]
 801c958:	4419      	add	r1, r3
 801c95a:	428a      	cmp	r2, r1
 801c95c:	da16      	bge.n	801c98c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801c95e:	4910      	ldr	r1, [pc, #64]	; (801c9a0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801c960:	1ad3      	subs	r3, r2, r3
 801c962:	200e      	movs	r0, #14
 801c964:	6809      	ldr	r1, [r1, #0]
 801c966:	fb00 1303 	mla	r3, r0, r3, r1
 801c96a:	7b19      	ldrb	r1, [r3, #12]
 801c96c:	f001 011f 	and.w	r1, r1, #31
 801c970:	290b      	cmp	r1, #11
 801c972:	d10b      	bne.n	801c98c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801c974:	8919      	ldrh	r1, [r3, #8]
 801c976:	8958      	ldrh	r0, [r3, #10]
 801c978:	4b07      	ldr	r3, [pc, #28]	; (801c998 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801c97a:	4348      	muls	r0, r1
 801c97c:	6819      	ldr	r1, [r3, #0]
 801c97e:	3003      	adds	r0, #3
 801c980:	f020 0303 	bic.w	r3, r0, #3
 801c984:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801c988:	4418      	add	r0, r3
 801c98a:	4770      	bx	lr
 801c98c:	2000      	movs	r0, #0
 801c98e:	4770      	bx	lr
 801c990:	2000c674 	.word	0x2000c674
 801c994:	2000c67c 	.word	0x2000c67c
 801c998:	2000c658 	.word	0x2000c658
 801c99c:	2000c678 	.word	0x2000c678
 801c9a0:	2000c65c 	.word	0x2000c65c

0801c9a4 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801c9a4:	4b19      	ldr	r3, [pc, #100]	; (801ca0c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801c9a6:	6819      	ldr	r1, [r3, #0]
 801c9a8:	8803      	ldrh	r3, [r0, #0]
 801c9aa:	b1e9      	cbz	r1, 801c9e8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801c9ac:	4a18      	ldr	r2, [pc, #96]	; (801ca10 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801c9ae:	8812      	ldrh	r2, [r2, #0]
 801c9b0:	429a      	cmp	r2, r3
 801c9b2:	d90a      	bls.n	801c9ca <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801c9b4:	2214      	movs	r2, #20
 801c9b6:	fb02 1303 	mla	r3, r2, r3, r1
 801c9ba:	7c58      	ldrb	r0, [r3, #17]
 801c9bc:	0942      	lsrs	r2, r0, #5
 801c9be:	7cd8      	ldrb	r0, [r3, #19]
 801c9c0:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801c9c4:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801c9c8:	4770      	bx	lr
 801c9ca:	4912      	ldr	r1, [pc, #72]	; (801ca14 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801c9cc:	8809      	ldrh	r1, [r1, #0]
 801c9ce:	4411      	add	r1, r2
 801c9d0:	428b      	cmp	r3, r1
 801c9d2:	da09      	bge.n	801c9e8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801c9d4:	1a9b      	subs	r3, r3, r2
 801c9d6:	4a10      	ldr	r2, [pc, #64]	; (801ca18 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801c9d8:	210e      	movs	r1, #14
 801c9da:	6812      	ldr	r2, [r2, #0]
 801c9dc:	fb01 2303 	mla	r3, r1, r3, r2
 801c9e0:	7b18      	ldrb	r0, [r3, #12]
 801c9e2:	f000 001f 	and.w	r0, r0, #31
 801c9e6:	4770      	bx	lr
 801c9e8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c9ec:	4293      	cmp	r3, r2
 801c9ee:	d10a      	bne.n	801ca06 <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 801c9f0:	4b0a      	ldr	r3, [pc, #40]	; (801ca1c <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801c9f2:	681b      	ldr	r3, [r3, #0]
 801c9f4:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801c9f8:	b10a      	cbz	r2, 801c9fe <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801c9fa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801c9fc:	b900      	cbnz	r0, 801ca00 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801c9fe:	6898      	ldr	r0, [r3, #8]
 801ca00:	6803      	ldr	r3, [r0, #0]
 801ca02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ca04:	4718      	bx	r3
 801ca06:	2000      	movs	r0, #0
 801ca08:	4770      	bx	lr
 801ca0a:	bf00      	nop
 801ca0c:	2000c67c 	.word	0x2000c67c
 801ca10:	2000c674 	.word	0x2000c674
 801ca14:	2000c678 	.word	0x2000c678
 801ca18:	2000c65c 	.word	0x2000c65c
 801ca1c:	2000c5b4 	.word	0x2000c5b4

0801ca20 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801ca20:	2018      	movs	r0, #24
 801ca22:	4770      	bx	lr

0801ca24 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801ca24:	2001      	movs	r0, #1
 801ca26:	4770      	bx	lr

0801ca28 <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 801ca28:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801ca2c:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 801ca30:	4770      	bx	lr

0801ca32 <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 801ca32:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801ca36:	4770      	bx	lr

0801ca38 <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 801ca38:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801ca3c:	4770      	bx	lr

0801ca3e <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 801ca3e:	b2c8      	uxtb	r0, r1
 801ca40:	4770      	bx	lr

0801ca42 <_ZN8touchgfx8LCD24bpp4initEv>:
 801ca42:	4770      	bx	lr

0801ca44 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ca44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca48:	b085      	sub	sp, #20
 801ca4a:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801ca4c:	9203      	str	r2, [sp, #12]
 801ca4e:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801ca52:	6878      	ldr	r0, [r7, #4]
 801ca54:	9201      	str	r2, [sp, #4]
 801ca56:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801ca58:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 801ca5c:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 801ca60:	fa1f fc84 	uxth.w	ip, r4
 801ca64:	43e4      	mvns	r4, r4
 801ca66:	9100      	str	r1, [sp, #0]
 801ca68:	b2e4      	uxtb	r4, r4
 801ca6a:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801ca6e:	fb00 2505 	mla	r5, r0, r5, r2
 801ca72:	683a      	ldr	r2, [r7, #0]
 801ca74:	6877      	ldr	r7, [r6, #4]
 801ca76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ca7a:	3704      	adds	r7, #4
 801ca7c:	4415      	add	r5, r2
 801ca7e:	6832      	ldr	r2, [r6, #0]
 801ca80:	9202      	str	r2, [sp, #8]
 801ca82:	9a00      	ldr	r2, [sp, #0]
 801ca84:	2a00      	cmp	r2, #0
 801ca86:	dc03      	bgt.n	801ca90 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801ca88:	9a03      	ldr	r2, [sp, #12]
 801ca8a:	2a00      	cmp	r2, #0
 801ca8c:	f340 8116 	ble.w	801ccbc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801ca90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ca92:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ca96:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ca98:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ca9c:	2b00      	cmp	r3, #0
 801ca9e:	dd0f      	ble.n	801cac0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801caa0:	1406      	asrs	r6, r0, #16
 801caa2:	d406      	bmi.n	801cab2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801caa4:	4546      	cmp	r6, r8
 801caa6:	da04      	bge.n	801cab2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801caa8:	1416      	asrs	r6, r2, #16
 801caaa:	d402      	bmi.n	801cab2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801caac:	9901      	ldr	r1, [sp, #4]
 801caae:	428e      	cmp	r6, r1
 801cab0:	db07      	blt.n	801cac2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801cab2:	9911      	ldr	r1, [sp, #68]	; 0x44
 801cab4:	3b01      	subs	r3, #1
 801cab6:	3503      	adds	r5, #3
 801cab8:	4408      	add	r0, r1
 801caba:	9912      	ldr	r1, [sp, #72]	; 0x48
 801cabc:	440a      	add	r2, r1
 801cabe:	e7ed      	b.n	801ca9c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 801cac0:	d011      	beq.n	801cae6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 801cac2:	1e5e      	subs	r6, r3, #1
 801cac4:	9911      	ldr	r1, [sp, #68]	; 0x44
 801cac6:	fb01 0e06 	mla	lr, r1, r6, r0
 801caca:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801cace:	d548      	bpl.n	801cb62 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 801cad0:	4699      	mov	r9, r3
 801cad2:	462e      	mov	r6, r5
 801cad4:	f1b9 0f00 	cmp.w	r9, #0
 801cad8:	f300 809e 	bgt.w	801cc18 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 801cadc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cae0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cae4:	441d      	add	r5, r3
 801cae6:	9b00      	ldr	r3, [sp, #0]
 801cae8:	2b00      	cmp	r3, #0
 801caea:	f340 80e7 	ble.w	801ccbc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801caee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801caf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801caf4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801caf8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cafc:	eef0 6a62 	vmov.f32	s13, s5
 801cb00:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801cb04:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cb08:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cb0c:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801cb10:	eef0 6a43 	vmov.f32	s13, s6
 801cb14:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cb18:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801cb1c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cb20:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cb24:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cb28:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cb2c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cb30:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cb34:	ee12 2a90 	vmov	r2, s5
 801cb38:	eef0 2a47 	vmov.f32	s5, s14
 801cb3c:	fb92 f3f3 	sdiv	r3, r2, r3
 801cb40:	ee13 2a10 	vmov	r2, s6
 801cb44:	9311      	str	r3, [sp, #68]	; 0x44
 801cb46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cb48:	eeb0 3a67 	vmov.f32	s6, s15
 801cb4c:	fb92 f3f3 	sdiv	r3, r2, r3
 801cb50:	9312      	str	r3, [sp, #72]	; 0x48
 801cb52:	9b00      	ldr	r3, [sp, #0]
 801cb54:	9a03      	ldr	r2, [sp, #12]
 801cb56:	3b01      	subs	r3, #1
 801cb58:	9300      	str	r3, [sp, #0]
 801cb5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cb5c:	bf08      	it	eq
 801cb5e:	4613      	moveq	r3, r2
 801cb60:	e78f      	b.n	801ca82 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 801cb62:	45c6      	cmp	lr, r8
 801cb64:	dab4      	bge.n	801cad0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801cb66:	9912      	ldr	r1, [sp, #72]	; 0x48
 801cb68:	fb01 2606 	mla	r6, r1, r6, r2
 801cb6c:	1436      	asrs	r6, r6, #16
 801cb6e:	d4af      	bmi.n	801cad0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801cb70:	9901      	ldr	r1, [sp, #4]
 801cb72:	428e      	cmp	r6, r1
 801cb74:	daac      	bge.n	801cad0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801cb76:	1cee      	adds	r6, r5, #3
 801cb78:	4699      	mov	r9, r3
 801cb7a:	f1b9 0f00 	cmp.w	r9, #0
 801cb7e:	f106 0603 	add.w	r6, r6, #3
 801cb82:	ddab      	ble.n	801cadc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801cb84:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801cb88:	9902      	ldr	r1, [sp, #8]
 801cb8a:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801cb8e:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801cb92:	fb08 1e0e 	mla	lr, r8, lr, r1
 801cb96:	9911      	ldr	r1, [sp, #68]	; 0x44
 801cb98:	fb1b fb04 	smulbb	fp, fp, r4
 801cb9c:	f109 39ff 	add.w	r9, r9, #4294967295
 801cba0:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801cba4:	4408      	add	r0, r1
 801cba6:	9912      	ldr	r1, [sp, #72]	; 0x48
 801cba8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801cbac:	440a      	add	r2, r1
 801cbae:	eb07 0a0e 	add.w	sl, r7, lr
 801cbb2:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801cbb6:	fb0e be0c 	mla	lr, lr, ip, fp
 801cbba:	fa1f fe8e 	uxth.w	lr, lr
 801cbbe:	f10e 0b01 	add.w	fp, lr, #1
 801cbc2:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801cbc6:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801cbca:	fb1b fb04 	smulbb	fp, fp, r4
 801cbce:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801cbd2:	f806 ec06 	strb.w	lr, [r6, #-6]
 801cbd6:	f89a e001 	ldrb.w	lr, [sl, #1]
 801cbda:	fb0e be0c 	mla	lr, lr, ip, fp
 801cbde:	fa1f fe8e 	uxth.w	lr, lr
 801cbe2:	f10e 0b01 	add.w	fp, lr, #1
 801cbe6:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801cbea:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801cbee:	f806 ec05 	strb.w	lr, [r6, #-5]
 801cbf2:	f89a e002 	ldrb.w	lr, [sl, #2]
 801cbf6:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801cbfa:	fb1a fa04 	smulbb	sl, sl, r4
 801cbfe:	fb0e ae0c 	mla	lr, lr, ip, sl
 801cc02:	fa1f fe8e 	uxth.w	lr, lr
 801cc06:	f10e 0a01 	add.w	sl, lr, #1
 801cc0a:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801cc0e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801cc12:	f806 ec04 	strb.w	lr, [r6, #-4]
 801cc16:	e7b0      	b.n	801cb7a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801cc18:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801cc1c:	d446      	bmi.n	801ccac <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801cc1e:	45c2      	cmp	sl, r8
 801cc20:	da44      	bge.n	801ccac <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801cc22:	ea5f 4e22 	movs.w	lr, r2, asr #16
 801cc26:	d441      	bmi.n	801ccac <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801cc28:	9901      	ldr	r1, [sp, #4]
 801cc2a:	458e      	cmp	lr, r1
 801cc2c:	da3e      	bge.n	801ccac <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801cc2e:	9902      	ldr	r1, [sp, #8]
 801cc30:	f896 b000 	ldrb.w	fp, [r6]
 801cc34:	fb08 1e0e 	mla	lr, r8, lr, r1
 801cc38:	fb1b fb04 	smulbb	fp, fp, r4
 801cc3c:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801cc40:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801cc44:	eb07 0a0e 	add.w	sl, r7, lr
 801cc48:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801cc4c:	fb0e be0c 	mla	lr, lr, ip, fp
 801cc50:	fa1f fe8e 	uxth.w	lr, lr
 801cc54:	f10e 0b01 	add.w	fp, lr, #1
 801cc58:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801cc5c:	f896 b001 	ldrb.w	fp, [r6, #1]
 801cc60:	fb1b fb04 	smulbb	fp, fp, r4
 801cc64:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801cc68:	f886 e000 	strb.w	lr, [r6]
 801cc6c:	f89a e001 	ldrb.w	lr, [sl, #1]
 801cc70:	fb0e be0c 	mla	lr, lr, ip, fp
 801cc74:	fa1f fe8e 	uxth.w	lr, lr
 801cc78:	f10e 0b01 	add.w	fp, lr, #1
 801cc7c:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801cc80:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801cc84:	f886 e001 	strb.w	lr, [r6, #1]
 801cc88:	f89a e002 	ldrb.w	lr, [sl, #2]
 801cc8c:	f896 a002 	ldrb.w	sl, [r6, #2]
 801cc90:	fb1a fa04 	smulbb	sl, sl, r4
 801cc94:	fb0e ae0c 	mla	lr, lr, ip, sl
 801cc98:	fa1f fe8e 	uxth.w	lr, lr
 801cc9c:	f10e 0a01 	add.w	sl, lr, #1
 801cca0:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801cca4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801cca8:	f886 e002 	strb.w	lr, [r6, #2]
 801ccac:	9911      	ldr	r1, [sp, #68]	; 0x44
 801ccae:	3603      	adds	r6, #3
 801ccb0:	f109 39ff 	add.w	r9, r9, #4294967295
 801ccb4:	4408      	add	r0, r1
 801ccb6:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ccb8:	440a      	add	r2, r1
 801ccba:	e70b      	b.n	801cad4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801ccbc:	b005      	add	sp, #20
 801ccbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ccc2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ccc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ccc6:	b085      	sub	sp, #20
 801ccc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cccc:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801ccce:	9203      	str	r2, [sp, #12]
 801ccd0:	6870      	ldr	r0, [r6, #4]
 801ccd2:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801ccd4:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801ccd8:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801ccdc:	9101      	str	r1, [sp, #4]
 801ccde:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801cce2:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 801cce6:	fb00 2404 	mla	r4, r0, r4, r2
 801ccea:	6832      	ldr	r2, [r6, #0]
 801ccec:	686e      	ldr	r6, [r5, #4]
 801ccee:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ccf2:	3604      	adds	r6, #4
 801ccf4:	4414      	add	r4, r2
 801ccf6:	682a      	ldr	r2, [r5, #0]
 801ccf8:	9202      	str	r2, [sp, #8]
 801ccfa:	9a01      	ldr	r2, [sp, #4]
 801ccfc:	2a00      	cmp	r2, #0
 801ccfe:	dc03      	bgt.n	801cd08 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 801cd00:	9a03      	ldr	r2, [sp, #12]
 801cd02:	2a00      	cmp	r2, #0
 801cd04:	f340 80b2 	ble.w	801ce6c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801cd08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cd0a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801cd0e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cd10:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801cd14:	2b00      	cmp	r3, #0
 801cd16:	dd0c      	ble.n	801cd32 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801cd18:	1405      	asrs	r5, r0, #16
 801cd1a:	d405      	bmi.n	801cd28 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801cd1c:	4575      	cmp	r5, lr
 801cd1e:	da03      	bge.n	801cd28 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801cd20:	1415      	asrs	r5, r2, #16
 801cd22:	d401      	bmi.n	801cd28 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801cd24:	4545      	cmp	r5, r8
 801cd26:	db05      	blt.n	801cd34 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801cd28:	4460      	add	r0, ip
 801cd2a:	443a      	add	r2, r7
 801cd2c:	3b01      	subs	r3, #1
 801cd2e:	3403      	adds	r4, #3
 801cd30:	e7f0      	b.n	801cd14 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 801cd32:	d03d      	beq.n	801cdb0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801cd34:	1e5d      	subs	r5, r3, #1
 801cd36:	fb0c 0905 	mla	r9, ip, r5, r0
 801cd3a:	ea5f 4929 	movs.w	r9, r9, asr #16
 801cd3e:	d42c      	bmi.n	801cd9a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801cd40:	45f1      	cmp	r9, lr
 801cd42:	da2a      	bge.n	801cd9a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801cd44:	fb07 2505 	mla	r5, r7, r5, r2
 801cd48:	142d      	asrs	r5, r5, #16
 801cd4a:	d426      	bmi.n	801cd9a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801cd4c:	4545      	cmp	r5, r8
 801cd4e:	da24      	bge.n	801cd9a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801cd50:	1ce5      	adds	r5, r4, #3
 801cd52:	469a      	mov	sl, r3
 801cd54:	f1ba 0f00 	cmp.w	sl, #0
 801cd58:	f105 0503 	add.w	r5, r5, #3
 801cd5c:	dd23      	ble.n	801cda6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801cd5e:	ea4f 4922 	mov.w	r9, r2, asr #16
 801cd62:	9902      	ldr	r1, [sp, #8]
 801cd64:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801cd68:	443a      	add	r2, r7
 801cd6a:	fb0e 1909 	mla	r9, lr, r9, r1
 801cd6e:	4460      	add	r0, ip
 801cd70:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cd74:	f819 900b 	ldrb.w	r9, [r9, fp]
 801cd78:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801cd7c:	eb06 0b09 	add.w	fp, r6, r9
 801cd80:	f816 9009 	ldrb.w	r9, [r6, r9]
 801cd84:	f805 9c06 	strb.w	r9, [r5, #-6]
 801cd88:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801cd8c:	f805 9c05 	strb.w	r9, [r5, #-5]
 801cd90:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801cd94:	f805 9c04 	strb.w	r9, [r5, #-4]
 801cd98:	e7dc      	b.n	801cd54 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801cd9a:	2500      	movs	r5, #0
 801cd9c:	eba3 0905 	sub.w	r9, r3, r5
 801cda0:	f1b9 0f00 	cmp.w	r9, #0
 801cda4:	dc3c      	bgt.n	801ce20 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 801cda6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cdaa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cdae:	441c      	add	r4, r3
 801cdb0:	9b01      	ldr	r3, [sp, #4]
 801cdb2:	2b00      	cmp	r3, #0
 801cdb4:	dd5a      	ble.n	801ce6c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801cdb6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cdba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cdbc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cdc0:	eeb0 6a62 	vmov.f32	s12, s5
 801cdc4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cdc8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cdcc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cdd0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801cdd4:	eeb0 6a43 	vmov.f32	s12, s6
 801cdd8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cddc:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801cde0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cde4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cde8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cdec:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cdf0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cdf4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cdf8:	ee12 2a90 	vmov	r2, s5
 801cdfc:	eef0 2a47 	vmov.f32	s5, s14
 801ce00:	fb92 fcf3 	sdiv	ip, r2, r3
 801ce04:	ee13 2a10 	vmov	r2, s6
 801ce08:	eeb0 3a67 	vmov.f32	s6, s15
 801ce0c:	fb92 f7f3 	sdiv	r7, r2, r3
 801ce10:	9b01      	ldr	r3, [sp, #4]
 801ce12:	9a03      	ldr	r2, [sp, #12]
 801ce14:	3b01      	subs	r3, #1
 801ce16:	9301      	str	r3, [sp, #4]
 801ce18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ce1a:	bf08      	it	eq
 801ce1c:	4613      	moveq	r3, r2
 801ce1e:	e76c      	b.n	801ccfa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 801ce20:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801ce24:	d41e      	bmi.n	801ce64 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801ce26:	45f2      	cmp	sl, lr
 801ce28:	da1c      	bge.n	801ce64 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801ce2a:	ea5f 4922 	movs.w	r9, r2, asr #16
 801ce2e:	d419      	bmi.n	801ce64 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801ce30:	45c1      	cmp	r9, r8
 801ce32:	da17      	bge.n	801ce64 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801ce34:	9902      	ldr	r1, [sp, #8]
 801ce36:	fb0e 1909 	mla	r9, lr, r9, r1
 801ce3a:	f819 900a 	ldrb.w	r9, [r9, sl]
 801ce3e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801ce42:	f816 b009 	ldrb.w	fp, [r6, r9]
 801ce46:	eb06 0a09 	add.w	sl, r6, r9
 801ce4a:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 801ce4e:	f804 b009 	strb.w	fp, [r4, r9]
 801ce52:	44a1      	add	r9, r4
 801ce54:	f89a b001 	ldrb.w	fp, [sl, #1]
 801ce58:	f889 b001 	strb.w	fp, [r9, #1]
 801ce5c:	f89a a002 	ldrb.w	sl, [sl, #2]
 801ce60:	f889 a002 	strb.w	sl, [r9, #2]
 801ce64:	4460      	add	r0, ip
 801ce66:	443a      	add	r2, r7
 801ce68:	3501      	adds	r5, #1
 801ce6a:	e797      	b.n	801cd9c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801ce6c:	b005      	add	sp, #20
 801ce6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ce72 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ce72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce76:	b087      	sub	sp, #28
 801ce78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ce7c:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801ce7e:	9204      	str	r2, [sp, #16]
 801ce80:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801ce84:	6870      	ldr	r0, [r6, #4]
 801ce86:	9205      	str	r2, [sp, #20]
 801ce88:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801ce8a:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801ce8e:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801ce92:	9101      	str	r1, [sp, #4]
 801ce94:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801ce98:	fb00 2505 	mla	r5, r0, r5, r2
 801ce9c:	6832      	ldr	r2, [r6, #0]
 801ce9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cea2:	4415      	add	r5, r2
 801cea4:	6822      	ldr	r2, [r4, #0]
 801cea6:	9202      	str	r2, [sp, #8]
 801cea8:	6862      	ldr	r2, [r4, #4]
 801ceaa:	3204      	adds	r2, #4
 801ceac:	9203      	str	r2, [sp, #12]
 801ceae:	9a01      	ldr	r2, [sp, #4]
 801ceb0:	2a00      	cmp	r2, #0
 801ceb2:	dc03      	bgt.n	801cebc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801ceb4:	9a04      	ldr	r2, [sp, #16]
 801ceb6:	2a00      	cmp	r2, #0
 801ceb8:	f340 8124 	ble.w	801d104 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801cebc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cebe:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801cec2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cec4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801cec8:	2b00      	cmp	r3, #0
 801ceca:	dd0e      	ble.n	801ceea <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801cecc:	1422      	asrs	r2, r4, #16
 801cece:	d405      	bmi.n	801cedc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801ced0:	4572      	cmp	r2, lr
 801ced2:	da03      	bge.n	801cedc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801ced4:	1402      	asrs	r2, r0, #16
 801ced6:	d401      	bmi.n	801cedc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801ced8:	4542      	cmp	r2, r8
 801ceda:	db07      	blt.n	801ceec <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801cedc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cede:	3b01      	subs	r3, #1
 801cee0:	3503      	adds	r5, #3
 801cee2:	4414      	add	r4, r2
 801cee4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cee6:	4410      	add	r0, r2
 801cee8:	e7ee      	b.n	801cec8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801ceea:	d010      	beq.n	801cf0e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801ceec:	1e5a      	subs	r2, r3, #1
 801ceee:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801cef0:	fb06 4602 	mla	r6, r6, r2, r4
 801cef4:	1436      	asrs	r6, r6, #16
 801cef6:	d546      	bpl.n	801cf86 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801cef8:	4699      	mov	r9, r3
 801cefa:	462f      	mov	r7, r5
 801cefc:	f1b9 0f00 	cmp.w	r9, #0
 801cf00:	f300 80a5 	bgt.w	801d04e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801cf04:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cf08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cf0c:	441d      	add	r5, r3
 801cf0e:	9b01      	ldr	r3, [sp, #4]
 801cf10:	2b00      	cmp	r3, #0
 801cf12:	f340 80f7 	ble.w	801d104 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801cf16:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cf1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cf1c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cf20:	eeb0 6a62 	vmov.f32	s12, s5
 801cf24:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cf28:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cf2c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cf30:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801cf34:	eeb0 6a43 	vmov.f32	s12, s6
 801cf38:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cf3c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801cf40:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cf44:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cf48:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cf4c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cf50:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cf54:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cf58:	ee12 2a90 	vmov	r2, s5
 801cf5c:	eef0 2a47 	vmov.f32	s5, s14
 801cf60:	fb92 f3f3 	sdiv	r3, r2, r3
 801cf64:	ee13 2a10 	vmov	r2, s6
 801cf68:	9313      	str	r3, [sp, #76]	; 0x4c
 801cf6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cf6c:	eeb0 3a67 	vmov.f32	s6, s15
 801cf70:	fb92 f3f3 	sdiv	r3, r2, r3
 801cf74:	9314      	str	r3, [sp, #80]	; 0x50
 801cf76:	9b01      	ldr	r3, [sp, #4]
 801cf78:	9a04      	ldr	r2, [sp, #16]
 801cf7a:	3b01      	subs	r3, #1
 801cf7c:	9301      	str	r3, [sp, #4]
 801cf7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cf80:	bf08      	it	eq
 801cf82:	4613      	moveq	r3, r2
 801cf84:	e793      	b.n	801ceae <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801cf86:	4576      	cmp	r6, lr
 801cf88:	dab6      	bge.n	801cef8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801cf8a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801cf8c:	fb06 0202 	mla	r2, r6, r2, r0
 801cf90:	1412      	asrs	r2, r2, #16
 801cf92:	d4b1      	bmi.n	801cef8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801cf94:	4542      	cmp	r2, r8
 801cf96:	daaf      	bge.n	801cef8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801cf98:	1cef      	adds	r7, r5, #3
 801cf9a:	4699      	mov	r9, r3
 801cf9c:	f1b9 0f00 	cmp.w	r9, #0
 801cfa0:	ddb0      	ble.n	801cf04 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801cfa2:	9902      	ldr	r1, [sp, #8]
 801cfa4:	1402      	asrs	r2, r0, #16
 801cfa6:	1426      	asrs	r6, r4, #16
 801cfa8:	fb0e 1202 	mla	r2, lr, r2, r1
 801cfac:	9903      	ldr	r1, [sp, #12]
 801cfae:	5d92      	ldrb	r2, [r2, r6]
 801cfb0:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801cfb4:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801cfb8:	d041      	beq.n	801d03e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801cfba:	9a05      	ldr	r2, [sp, #20]
 801cfbc:	fa5f fb86 	uxtb.w	fp, r6
 801cfc0:	fb02 fc0c 	mul.w	ip, r2, ip
 801cfc4:	f10c 0201 	add.w	r2, ip, #1
 801cfc8:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801cfcc:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801cfd0:	1212      	asrs	r2, r2, #8
 801cfd2:	fa1f fa82 	uxth.w	sl, r2
 801cfd6:	43d2      	mvns	r2, r2
 801cfd8:	fb1b fb0a 	smulbb	fp, fp, sl
 801cfdc:	b2d2      	uxtb	r2, r2
 801cfde:	fb0c bc02 	mla	ip, ip, r2, fp
 801cfe2:	fa1f fc8c 	uxth.w	ip, ip
 801cfe6:	f10c 0b01 	add.w	fp, ip, #1
 801cfea:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801cfee:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801cff2:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801cff6:	fb1b fb0a 	smulbb	fp, fp, sl
 801cffa:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801cffe:	fb16 fa0a 	smulbb	sl, r6, sl
 801d002:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801d006:	f807 cc03 	strb.w	ip, [r7, #-3]
 801d00a:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801d00e:	fb06 aa02 	mla	sl, r6, r2, sl
 801d012:	fb0c bc02 	mla	ip, ip, r2, fp
 801d016:	fa1f fa8a 	uxth.w	sl, sl
 801d01a:	fa1f fc8c 	uxth.w	ip, ip
 801d01e:	f10a 0601 	add.w	r6, sl, #1
 801d022:	f10c 0b01 	add.w	fp, ip, #1
 801d026:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801d02a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d02e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d032:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d036:	f807 ac01 	strb.w	sl, [r7, #-1]
 801d03a:	f807 cc02 	strb.w	ip, [r7, #-2]
 801d03e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d040:	3703      	adds	r7, #3
 801d042:	f109 39ff 	add.w	r9, r9, #4294967295
 801d046:	4414      	add	r4, r2
 801d048:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d04a:	4410      	add	r0, r2
 801d04c:	e7a6      	b.n	801cf9c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801d04e:	1426      	asrs	r6, r4, #16
 801d050:	d450      	bmi.n	801d0f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801d052:	4576      	cmp	r6, lr
 801d054:	da4e      	bge.n	801d0f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801d056:	1402      	asrs	r2, r0, #16
 801d058:	d44c      	bmi.n	801d0f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801d05a:	4542      	cmp	r2, r8
 801d05c:	da4a      	bge.n	801d0f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801d05e:	9902      	ldr	r1, [sp, #8]
 801d060:	fb0e 1202 	mla	r2, lr, r2, r1
 801d064:	9903      	ldr	r1, [sp, #12]
 801d066:	5d92      	ldrb	r2, [r2, r6]
 801d068:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801d06c:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801d070:	d040      	beq.n	801d0f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801d072:	9a05      	ldr	r2, [sp, #20]
 801d074:	fa5f fb86 	uxtb.w	fp, r6
 801d078:	fb02 fc0c 	mul.w	ip, r2, ip
 801d07c:	f10c 0201 	add.w	r2, ip, #1
 801d080:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801d084:	f897 c000 	ldrb.w	ip, [r7]
 801d088:	1212      	asrs	r2, r2, #8
 801d08a:	fa1f fa82 	uxth.w	sl, r2
 801d08e:	43d2      	mvns	r2, r2
 801d090:	fb1b fb0a 	smulbb	fp, fp, sl
 801d094:	b2d2      	uxtb	r2, r2
 801d096:	fb0c bc02 	mla	ip, ip, r2, fp
 801d09a:	fa1f fc8c 	uxth.w	ip, ip
 801d09e:	f10c 0b01 	add.w	fp, ip, #1
 801d0a2:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d0a6:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801d0aa:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801d0ae:	fb1b fb0a 	smulbb	fp, fp, sl
 801d0b2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d0b6:	fb16 fa0a 	smulbb	sl, r6, sl
 801d0ba:	78be      	ldrb	r6, [r7, #2]
 801d0bc:	f887 c000 	strb.w	ip, [r7]
 801d0c0:	f897 c001 	ldrb.w	ip, [r7, #1]
 801d0c4:	fb06 aa02 	mla	sl, r6, r2, sl
 801d0c8:	fb0c bc02 	mla	ip, ip, r2, fp
 801d0cc:	fa1f fa8a 	uxth.w	sl, sl
 801d0d0:	fa1f fc8c 	uxth.w	ip, ip
 801d0d4:	f10a 0601 	add.w	r6, sl, #1
 801d0d8:	f10c 0b01 	add.w	fp, ip, #1
 801d0dc:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801d0e0:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d0e4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d0e8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d0ec:	f887 a002 	strb.w	sl, [r7, #2]
 801d0f0:	f887 c001 	strb.w	ip, [r7, #1]
 801d0f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d0f6:	3703      	adds	r7, #3
 801d0f8:	f109 39ff 	add.w	r9, r9, #4294967295
 801d0fc:	4414      	add	r4, r2
 801d0fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d100:	4410      	add	r0, r2
 801d102:	e6fb      	b.n	801cefc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801d104:	b007      	add	sp, #28
 801d106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d10a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d10a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d10e:	b085      	sub	sp, #20
 801d110:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d114:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801d116:	9203      	str	r2, [sp, #12]
 801d118:	6870      	ldr	r0, [r6, #4]
 801d11a:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801d11c:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801d120:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801d124:	9100      	str	r1, [sp, #0]
 801d126:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801d12a:	fb00 2404 	mla	r4, r0, r4, r2
 801d12e:	6832      	ldr	r2, [r6, #0]
 801d130:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d134:	4414      	add	r4, r2
 801d136:	682a      	ldr	r2, [r5, #0]
 801d138:	9201      	str	r2, [sp, #4]
 801d13a:	686a      	ldr	r2, [r5, #4]
 801d13c:	3204      	adds	r2, #4
 801d13e:	9202      	str	r2, [sp, #8]
 801d140:	9a00      	ldr	r2, [sp, #0]
 801d142:	2a00      	cmp	r2, #0
 801d144:	dc03      	bgt.n	801d14e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 801d146:	9a03      	ldr	r2, [sp, #12]
 801d148:	2a00      	cmp	r2, #0
 801d14a:	f340 8131 	ble.w	801d3b0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801d14e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d150:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d154:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d156:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d15a:	2b00      	cmp	r3, #0
 801d15c:	dd0e      	ble.n	801d17c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801d15e:	1405      	asrs	r5, r0, #16
 801d160:	d405      	bmi.n	801d16e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801d162:	4575      	cmp	r5, lr
 801d164:	da03      	bge.n	801d16e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801d166:	1415      	asrs	r5, r2, #16
 801d168:	d401      	bmi.n	801d16e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801d16a:	4545      	cmp	r5, r8
 801d16c:	db07      	blt.n	801d17e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801d16e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801d170:	3b01      	subs	r3, #1
 801d172:	3403      	adds	r4, #3
 801d174:	4428      	add	r0, r5
 801d176:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d178:	442a      	add	r2, r5
 801d17a:	e7ee      	b.n	801d15a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 801d17c:	d06f      	beq.n	801d25e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801d17e:	1e5d      	subs	r5, r3, #1
 801d180:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801d182:	fb06 0605 	mla	r6, r6, r5, r0
 801d186:	1436      	asrs	r6, r6, #16
 801d188:	d460      	bmi.n	801d24c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801d18a:	4576      	cmp	r6, lr
 801d18c:	da5e      	bge.n	801d24c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801d18e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801d190:	fb06 2505 	mla	r5, r6, r5, r2
 801d194:	142d      	asrs	r5, r5, #16
 801d196:	d459      	bmi.n	801d24c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801d198:	4545      	cmp	r5, r8
 801d19a:	da57      	bge.n	801d24c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801d19c:	1ce5      	adds	r5, r4, #3
 801d19e:	469a      	mov	sl, r3
 801d1a0:	f1ba 0f00 	cmp.w	sl, #0
 801d1a4:	dd56      	ble.n	801d254 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 801d1a6:	9901      	ldr	r1, [sp, #4]
 801d1a8:	1416      	asrs	r6, r2, #16
 801d1aa:	1407      	asrs	r7, r0, #16
 801d1ac:	fb0e 1606 	mla	r6, lr, r6, r1
 801d1b0:	9902      	ldr	r1, [sp, #8]
 801d1b2:	5df6      	ldrb	r6, [r6, r7]
 801d1b4:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801d1b8:	0e37      	lsrs	r7, r6, #24
 801d1ba:	2fff      	cmp	r7, #255	; 0xff
 801d1bc:	f000 80ef 	beq.w	801d39e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 801d1c0:	fa5f fc87 	uxtb.w	ip, r7
 801d1c4:	b3d7      	cbz	r7, 801d23c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801d1c6:	fa1f f78c 	uxth.w	r7, ip
 801d1ca:	ea6f 0c0c 	mvn.w	ip, ip
 801d1ce:	fa5f fb86 	uxtb.w	fp, r6
 801d1d2:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801d1d6:	fa5f fc8c 	uxtb.w	ip, ip
 801d1da:	fb1b fb07 	smulbb	fp, fp, r7
 801d1de:	fb09 b90c 	mla	r9, r9, ip, fp
 801d1e2:	fa1f f989 	uxth.w	r9, r9
 801d1e6:	f109 0b01 	add.w	fp, r9, #1
 801d1ea:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d1ee:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801d1f2:	fb1b fb0c 	smulbb	fp, fp, ip
 801d1f6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d1fa:	f805 9c03 	strb.w	r9, [r5, #-3]
 801d1fe:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801d202:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801d206:	fb09 b907 	mla	r9, r9, r7, fp
 801d20a:	fa1f f989 	uxth.w	r9, r9
 801d20e:	f109 0b01 	add.w	fp, r9, #1
 801d212:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d216:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d21a:	f805 9c02 	strb.w	r9, [r5, #-2]
 801d21e:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801d222:	fb19 fc0c 	smulbb	ip, r9, ip
 801d226:	fb06 c607 	mla	r6, r6, r7, ip
 801d22a:	b2b6      	uxth	r6, r6
 801d22c:	f106 0c01 	add.w	ip, r6, #1
 801d230:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 801d234:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d238:	f805 cc01 	strb.w	ip, [r5, #-1]
 801d23c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d23e:	3503      	adds	r5, #3
 801d240:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d244:	4408      	add	r0, r1
 801d246:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d248:	440a      	add	r2, r1
 801d24a:	e7a9      	b.n	801d1a0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801d24c:	2600      	movs	r6, #0
 801d24e:	1b9d      	subs	r5, r3, r6
 801d250:	2d00      	cmp	r5, #0
 801d252:	dc40      	bgt.n	801d2d6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801d254:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d258:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d25c:	441c      	add	r4, r3
 801d25e:	9b00      	ldr	r3, [sp, #0]
 801d260:	2b00      	cmp	r3, #0
 801d262:	f340 80a5 	ble.w	801d3b0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801d266:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d26a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d26c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d270:	eeb0 6a62 	vmov.f32	s12, s5
 801d274:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d278:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d27c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d280:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d284:	eeb0 6a43 	vmov.f32	s12, s6
 801d288:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d28c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d290:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d294:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d298:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d29c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d2a0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d2a4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d2a8:	ee12 2a90 	vmov	r2, s5
 801d2ac:	eef0 2a47 	vmov.f32	s5, s14
 801d2b0:	fb92 f3f3 	sdiv	r3, r2, r3
 801d2b4:	ee13 2a10 	vmov	r2, s6
 801d2b8:	9311      	str	r3, [sp, #68]	; 0x44
 801d2ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d2bc:	eeb0 3a67 	vmov.f32	s6, s15
 801d2c0:	fb92 f3f3 	sdiv	r3, r2, r3
 801d2c4:	9312      	str	r3, [sp, #72]	; 0x48
 801d2c6:	9b00      	ldr	r3, [sp, #0]
 801d2c8:	9a03      	ldr	r2, [sp, #12]
 801d2ca:	3b01      	subs	r3, #1
 801d2cc:	9300      	str	r3, [sp, #0]
 801d2ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d2d0:	bf08      	it	eq
 801d2d2:	4613      	moveq	r3, r2
 801d2d4:	e734      	b.n	801d140 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801d2d6:	1407      	asrs	r7, r0, #16
 801d2d8:	d450      	bmi.n	801d37c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801d2da:	4577      	cmp	r7, lr
 801d2dc:	da4e      	bge.n	801d37c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801d2de:	1415      	asrs	r5, r2, #16
 801d2e0:	d44c      	bmi.n	801d37c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801d2e2:	4545      	cmp	r5, r8
 801d2e4:	da4a      	bge.n	801d37c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801d2e6:	9901      	ldr	r1, [sp, #4]
 801d2e8:	fb0e 1505 	mla	r5, lr, r5, r1
 801d2ec:	9902      	ldr	r1, [sp, #8]
 801d2ee:	5ded      	ldrb	r5, [r5, r7]
 801d2f0:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 801d2f4:	0e2f      	lsrs	r7, r5, #24
 801d2f6:	2fff      	cmp	r7, #255	; 0xff
 801d2f8:	d046      	beq.n	801d388 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 801d2fa:	fa5f f987 	uxtb.w	r9, r7
 801d2fe:	b3ef      	cbz	r7, 801d37c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801d300:	fa1f fc89 	uxth.w	ip, r9
 801d304:	ea6f 0909 	mvn.w	r9, r9
 801d308:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801d30c:	fa5f fb85 	uxtb.w	fp, r5
 801d310:	f814 a007 	ldrb.w	sl, [r4, r7]
 801d314:	fa5f f989 	uxtb.w	r9, r9
 801d318:	fb1b fb0c 	smulbb	fp, fp, ip
 801d31c:	fb0a ba09 	mla	sl, sl, r9, fp
 801d320:	fa1f fa8a 	uxth.w	sl, sl
 801d324:	f10a 0b01 	add.w	fp, sl, #1
 801d328:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801d32c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d330:	f804 a007 	strb.w	sl, [r4, r7]
 801d334:	4427      	add	r7, r4
 801d336:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801d33a:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801d33e:	f897 b001 	ldrb.w	fp, [r7, #1]
 801d342:	fb1b fb09 	smulbb	fp, fp, r9
 801d346:	fb0a ba0c 	mla	sl, sl, ip, fp
 801d34a:	fa1f fa8a 	uxth.w	sl, sl
 801d34e:	f10a 0b01 	add.w	fp, sl, #1
 801d352:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801d356:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d35a:	f887 a001 	strb.w	sl, [r7, #1]
 801d35e:	f897 a002 	ldrb.w	sl, [r7, #2]
 801d362:	fb1a f909 	smulbb	r9, sl, r9
 801d366:	fb05 950c 	mla	r5, r5, ip, r9
 801d36a:	b2ad      	uxth	r5, r5
 801d36c:	f105 0901 	add.w	r9, r5, #1
 801d370:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801d374:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d378:	f887 9002 	strb.w	r9, [r7, #2]
 801d37c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d37e:	3601      	adds	r6, #1
 801d380:	4408      	add	r0, r1
 801d382:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d384:	440a      	add	r2, r1
 801d386:	e762      	b.n	801d24e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801d388:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801d38c:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 801d390:	55e5      	strb	r5, [r4, r7]
 801d392:	4427      	add	r7, r4
 801d394:	0c2d      	lsrs	r5, r5, #16
 801d396:	f887 c001 	strb.w	ip, [r7, #1]
 801d39a:	70bd      	strb	r5, [r7, #2]
 801d39c:	e7ee      	b.n	801d37c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801d39e:	0a37      	lsrs	r7, r6, #8
 801d3a0:	f805 6c03 	strb.w	r6, [r5, #-3]
 801d3a4:	0c36      	lsrs	r6, r6, #16
 801d3a6:	f805 7c02 	strb.w	r7, [r5, #-2]
 801d3aa:	f805 6c01 	strb.w	r6, [r5, #-1]
 801d3ae:	e745      	b.n	801d23c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801d3b0:	b005      	add	sp, #20
 801d3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d3b6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d3b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3ba:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801d3bc:	9201      	str	r2, [sp, #4]
 801d3be:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801d3c2:	6870      	ldr	r0, [r6, #4]
 801d3c4:	9200      	str	r2, [sp, #0]
 801d3c6:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801d3ca:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 801d3ce:	fa1f fc85 	uxth.w	ip, r5
 801d3d2:	43ed      	mvns	r5, r5
 801d3d4:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801d3d8:	b2ed      	uxtb	r5, r5
 801d3da:	fb00 2404 	mla	r4, r0, r4, r2
 801d3de:	6832      	ldr	r2, [r6, #0]
 801d3e0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d3e4:	4414      	add	r4, r2
 801d3e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801d3e8:	f8d2 8000 	ldr.w	r8, [r2]
 801d3ec:	2900      	cmp	r1, #0
 801d3ee:	dc03      	bgt.n	801d3f8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 801d3f0:	9a01      	ldr	r2, [sp, #4]
 801d3f2:	2a00      	cmp	r2, #0
 801d3f4:	f340 8104 	ble.w	801d600 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801d3f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d3fa:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d3fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d400:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d404:	2b00      	cmp	r3, #0
 801d406:	dd0f      	ble.n	801d428 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801d408:	1406      	asrs	r6, r0, #16
 801d40a:	d406      	bmi.n	801d41a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801d40c:	4576      	cmp	r6, lr
 801d40e:	da04      	bge.n	801d41a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801d410:	1416      	asrs	r6, r2, #16
 801d412:	d402      	bmi.n	801d41a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801d414:	9f00      	ldr	r7, [sp, #0]
 801d416:	42be      	cmp	r6, r7
 801d418:	db07      	blt.n	801d42a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801d41a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801d41c:	3b01      	subs	r3, #1
 801d41e:	3403      	adds	r4, #3
 801d420:	4430      	add	r0, r6
 801d422:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801d424:	4432      	add	r2, r6
 801d426:	e7ed      	b.n	801d404 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801d428:	d05f      	beq.n	801d4ea <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 801d42a:	1e5e      	subs	r6, r3, #1
 801d42c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801d42e:	fb07 0706 	mla	r7, r7, r6, r0
 801d432:	143f      	asrs	r7, r7, #16
 801d434:	d450      	bmi.n	801d4d8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801d436:	4577      	cmp	r7, lr
 801d438:	da4e      	bge.n	801d4d8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801d43a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801d43c:	fb07 2606 	mla	r6, r7, r6, r2
 801d440:	1436      	asrs	r6, r6, #16
 801d442:	d449      	bmi.n	801d4d8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801d444:	9f00      	ldr	r7, [sp, #0]
 801d446:	42be      	cmp	r6, r7
 801d448:	da46      	bge.n	801d4d8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801d44a:	1ce6      	adds	r6, r4, #3
 801d44c:	4699      	mov	r9, r3
 801d44e:	f1b9 0f00 	cmp.w	r9, #0
 801d452:	f106 0603 	add.w	r6, r6, #3
 801d456:	dd43      	ble.n	801d4e0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801d458:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801d45c:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801d460:	1417      	asrs	r7, r2, #16
 801d462:	f109 39ff 	add.w	r9, r9, #4294967295
 801d466:	fb1b fb05 	smulbb	fp, fp, r5
 801d46a:	fb0e a707 	mla	r7, lr, r7, sl
 801d46e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d472:	eb08 0a07 	add.w	sl, r8, r7
 801d476:	f818 7007 	ldrb.w	r7, [r8, r7]
 801d47a:	fb07 b70c 	mla	r7, r7, ip, fp
 801d47e:	b2bf      	uxth	r7, r7
 801d480:	f107 0b01 	add.w	fp, r7, #1
 801d484:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801d488:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801d48c:	fb1b fb05 	smulbb	fp, fp, r5
 801d490:	123f      	asrs	r7, r7, #8
 801d492:	f806 7c06 	strb.w	r7, [r6, #-6]
 801d496:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801d49a:	fb07 b70c 	mla	r7, r7, ip, fp
 801d49e:	b2bf      	uxth	r7, r7
 801d4a0:	f107 0b01 	add.w	fp, r7, #1
 801d4a4:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801d4a8:	123f      	asrs	r7, r7, #8
 801d4aa:	f806 7c05 	strb.w	r7, [r6, #-5]
 801d4ae:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801d4b2:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801d4b6:	fb1a fa05 	smulbb	sl, sl, r5
 801d4ba:	fb07 a70c 	mla	r7, r7, ip, sl
 801d4be:	b2bf      	uxth	r7, r7
 801d4c0:	f107 0a01 	add.w	sl, r7, #1
 801d4c4:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801d4c8:	123f      	asrs	r7, r7, #8
 801d4ca:	f806 7c04 	strb.w	r7, [r6, #-4]
 801d4ce:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801d4d0:	4438      	add	r0, r7
 801d4d2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801d4d4:	443a      	add	r2, r7
 801d4d6:	e7ba      	b.n	801d44e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801d4d8:	2700      	movs	r7, #0
 801d4da:	1bde      	subs	r6, r3, r7
 801d4dc:	2e00      	cmp	r6, #0
 801d4de:	dc3f      	bgt.n	801d560 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801d4e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d4e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d4e8:	441c      	add	r4, r3
 801d4ea:	2900      	cmp	r1, #0
 801d4ec:	f340 8088 	ble.w	801d600 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801d4f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d4f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d4f6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d4fa:	3901      	subs	r1, #1
 801d4fc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d500:	eef0 6a62 	vmov.f32	s13, s5
 801d504:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d508:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d50c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d510:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801d514:	eef0 6a43 	vmov.f32	s13, s6
 801d518:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d51c:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801d520:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d524:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d528:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d52c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d530:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d534:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d538:	ee12 2a90 	vmov	r2, s5
 801d53c:	eef0 2a47 	vmov.f32	s5, s14
 801d540:	fb92 f3f3 	sdiv	r3, r2, r3
 801d544:	ee13 2a10 	vmov	r2, s6
 801d548:	930f      	str	r3, [sp, #60]	; 0x3c
 801d54a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d54c:	eeb0 3a67 	vmov.f32	s6, s15
 801d550:	fb92 f3f3 	sdiv	r3, r2, r3
 801d554:	9a01      	ldr	r2, [sp, #4]
 801d556:	9310      	str	r3, [sp, #64]	; 0x40
 801d558:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d55a:	bf08      	it	eq
 801d55c:	4613      	moveq	r3, r2
 801d55e:	e745      	b.n	801d3ec <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801d560:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801d564:	d446      	bmi.n	801d5f4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801d566:	45f2      	cmp	sl, lr
 801d568:	da44      	bge.n	801d5f4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801d56a:	ea5f 4922 	movs.w	r9, r2, asr #16
 801d56e:	d441      	bmi.n	801d5f4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801d570:	9e00      	ldr	r6, [sp, #0]
 801d572:	45b1      	cmp	r9, r6
 801d574:	da3e      	bge.n	801d5f4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801d576:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801d57a:	fb0e a909 	mla	r9, lr, r9, sl
 801d57e:	f814 b006 	ldrb.w	fp, [r4, r6]
 801d582:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801d586:	fb1b fb05 	smulbb	fp, fp, r5
 801d58a:	eb08 0a09 	add.w	sl, r8, r9
 801d58e:	f818 9009 	ldrb.w	r9, [r8, r9]
 801d592:	fb09 b90c 	mla	r9, r9, ip, fp
 801d596:	fa1f f989 	uxth.w	r9, r9
 801d59a:	f109 0b01 	add.w	fp, r9, #1
 801d59e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d5a2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d5a6:	f804 9006 	strb.w	r9, [r4, r6]
 801d5aa:	4426      	add	r6, r4
 801d5ac:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801d5b0:	f896 b001 	ldrb.w	fp, [r6, #1]
 801d5b4:	fb1b fb05 	smulbb	fp, fp, r5
 801d5b8:	fb09 b90c 	mla	r9, r9, ip, fp
 801d5bc:	fa1f f989 	uxth.w	r9, r9
 801d5c0:	f109 0b01 	add.w	fp, r9, #1
 801d5c4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d5c8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d5cc:	f886 9001 	strb.w	r9, [r6, #1]
 801d5d0:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801d5d4:	f896 a002 	ldrb.w	sl, [r6, #2]
 801d5d8:	fb1a fa05 	smulbb	sl, sl, r5
 801d5dc:	fb09 a90c 	mla	r9, r9, ip, sl
 801d5e0:	fa1f f989 	uxth.w	r9, r9
 801d5e4:	f109 0a01 	add.w	sl, r9, #1
 801d5e8:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801d5ec:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d5f0:	f886 9002 	strb.w	r9, [r6, #2]
 801d5f4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801d5f6:	3701      	adds	r7, #1
 801d5f8:	4430      	add	r0, r6
 801d5fa:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801d5fc:	4432      	add	r2, r6
 801d5fe:	e76c      	b.n	801d4da <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 801d600:	b003      	add	sp, #12
 801d602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d606 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d606:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d60a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801d60c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d610:	9201      	str	r2, [sp, #4]
 801d612:	6868      	ldr	r0, [r5, #4]
 801d614:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 801d618:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 801d61c:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801d620:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 801d624:	fb00 2404 	mla	r4, r0, r4, r2
 801d628:	682a      	ldr	r2, [r5, #0]
 801d62a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d62e:	4414      	add	r4, r2
 801d630:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801d632:	f8d2 9000 	ldr.w	r9, [r2]
 801d636:	2900      	cmp	r1, #0
 801d638:	dc03      	bgt.n	801d642 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801d63a:	9a01      	ldr	r2, [sp, #4]
 801d63c:	2a00      	cmp	r2, #0
 801d63e:	f340 80a8 	ble.w	801d792 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801d642:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d644:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d648:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d64a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d64e:	2b00      	cmp	r3, #0
 801d650:	dd0c      	ble.n	801d66c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801d652:	1405      	asrs	r5, r0, #16
 801d654:	d405      	bmi.n	801d662 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801d656:	4565      	cmp	r5, ip
 801d658:	da03      	bge.n	801d662 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801d65a:	1415      	asrs	r5, r2, #16
 801d65c:	d401      	bmi.n	801d662 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801d65e:	4575      	cmp	r5, lr
 801d660:	db05      	blt.n	801d66e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801d662:	4438      	add	r0, r7
 801d664:	4432      	add	r2, r6
 801d666:	3b01      	subs	r3, #1
 801d668:	3403      	adds	r4, #3
 801d66a:	e7f0      	b.n	801d64e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801d66c:	d03a      	beq.n	801d6e4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801d66e:	1e5d      	subs	r5, r3, #1
 801d670:	fb07 0805 	mla	r8, r7, r5, r0
 801d674:	ea5f 4828 	movs.w	r8, r8, asr #16
 801d678:	d429      	bmi.n	801d6ce <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801d67a:	45e0      	cmp	r8, ip
 801d67c:	da27      	bge.n	801d6ce <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801d67e:	fb06 2505 	mla	r5, r6, r5, r2
 801d682:	142d      	asrs	r5, r5, #16
 801d684:	d423      	bmi.n	801d6ce <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801d686:	4575      	cmp	r5, lr
 801d688:	da21      	bge.n	801d6ce <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801d68a:	f104 0803 	add.w	r8, r4, #3
 801d68e:	469a      	mov	sl, r3
 801d690:	f1ba 0f00 	cmp.w	sl, #0
 801d694:	f108 0803 	add.w	r8, r8, #3
 801d698:	dd1f      	ble.n	801d6da <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801d69a:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801d69e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d6a2:	1415      	asrs	r5, r2, #16
 801d6a4:	4438      	add	r0, r7
 801d6a6:	4432      	add	r2, r6
 801d6a8:	fb0c b505 	mla	r5, ip, r5, fp
 801d6ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d6b0:	eb09 0b05 	add.w	fp, r9, r5
 801d6b4:	f819 5005 	ldrb.w	r5, [r9, r5]
 801d6b8:	f808 5c06 	strb.w	r5, [r8, #-6]
 801d6bc:	f89b 5001 	ldrb.w	r5, [fp, #1]
 801d6c0:	f808 5c05 	strb.w	r5, [r8, #-5]
 801d6c4:	f89b 5002 	ldrb.w	r5, [fp, #2]
 801d6c8:	f808 5c04 	strb.w	r5, [r8, #-4]
 801d6cc:	e7e0      	b.n	801d690 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801d6ce:	2500      	movs	r5, #0
 801d6d0:	eba3 0805 	sub.w	r8, r3, r5
 801d6d4:	f1b8 0f00 	cmp.w	r8, #0
 801d6d8:	dc38      	bgt.n	801d74c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 801d6da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d6de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d6e2:	441c      	add	r4, r3
 801d6e4:	2900      	cmp	r1, #0
 801d6e6:	dd54      	ble.n	801d792 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801d6e8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d6ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d6ee:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d6f2:	3901      	subs	r1, #1
 801d6f4:	eeb0 6a62 	vmov.f32	s12, s5
 801d6f8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d6fc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d700:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d704:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801d708:	eeb0 6a43 	vmov.f32	s12, s6
 801d70c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d710:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801d714:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d718:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d71c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d720:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d724:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d728:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d72c:	ee12 2a90 	vmov	r2, s5
 801d730:	eef0 2a47 	vmov.f32	s5, s14
 801d734:	fb92 f7f3 	sdiv	r7, r2, r3
 801d738:	ee13 2a10 	vmov	r2, s6
 801d73c:	eeb0 3a67 	vmov.f32	s6, s15
 801d740:	fb92 f6f3 	sdiv	r6, r2, r3
 801d744:	9a01      	ldr	r2, [sp, #4]
 801d746:	bf08      	it	eq
 801d748:	4613      	moveq	r3, r2
 801d74a:	e774      	b.n	801d636 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801d74c:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801d750:	d41b      	bmi.n	801d78a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801d752:	45e2      	cmp	sl, ip
 801d754:	da19      	bge.n	801d78a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801d756:	ea5f 4822 	movs.w	r8, r2, asr #16
 801d75a:	d416      	bmi.n	801d78a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801d75c:	45f0      	cmp	r8, lr
 801d75e:	da14      	bge.n	801d78a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801d760:	fb0c a808 	mla	r8, ip, r8, sl
 801d764:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d768:	f819 b008 	ldrb.w	fp, [r9, r8]
 801d76c:	eb09 0a08 	add.w	sl, r9, r8
 801d770:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 801d774:	f804 b008 	strb.w	fp, [r4, r8]
 801d778:	44a0      	add	r8, r4
 801d77a:	f89a b001 	ldrb.w	fp, [sl, #1]
 801d77e:	f888 b001 	strb.w	fp, [r8, #1]
 801d782:	f89a a002 	ldrb.w	sl, [sl, #2]
 801d786:	f888 a002 	strb.w	sl, [r8, #2]
 801d78a:	4438      	add	r0, r7
 801d78c:	4432      	add	r2, r6
 801d78e:	3501      	adds	r5, #1
 801d790:	e79e      	b.n	801d6d0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 801d792:	b003      	add	sp, #12
 801d794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d798 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d79c:	b085      	sub	sp, #20
 801d79e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d7a2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d7a4:	9202      	str	r2, [sp, #8]
 801d7a6:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801d7aa:	6860      	ldr	r0, [r4, #4]
 801d7ac:	9203      	str	r2, [sp, #12]
 801d7ae:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801d7b2:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801d7b6:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801d7ba:	fb00 2505 	mla	r5, r0, r5, r2
 801d7be:	6822      	ldr	r2, [r4, #0]
 801d7c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d7c4:	4415      	add	r5, r2
 801d7c6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801d7c8:	6812      	ldr	r2, [r2, #0]
 801d7ca:	9201      	str	r2, [sp, #4]
 801d7cc:	2900      	cmp	r1, #0
 801d7ce:	dc03      	bgt.n	801d7d8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801d7d0:	9a02      	ldr	r2, [sp, #8]
 801d7d2:	2a00      	cmp	r2, #0
 801d7d4:	f340 811c 	ble.w	801da10 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801d7d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d7da:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d7de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d7e0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d7e4:	2b00      	cmp	r3, #0
 801d7e6:	dd0e      	ble.n	801d806 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801d7e8:	1422      	asrs	r2, r4, #16
 801d7ea:	d405      	bmi.n	801d7f8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801d7ec:	4572      	cmp	r2, lr
 801d7ee:	da03      	bge.n	801d7f8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801d7f0:	1402      	asrs	r2, r0, #16
 801d7f2:	d401      	bmi.n	801d7f8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801d7f4:	4542      	cmp	r2, r8
 801d7f6:	db07      	blt.n	801d808 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801d7f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d7fa:	3b01      	subs	r3, #1
 801d7fc:	3503      	adds	r5, #3
 801d7fe:	4414      	add	r4, r2
 801d800:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d802:	4410      	add	r0, r2
 801d804:	e7ee      	b.n	801d7e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801d806:	d072      	beq.n	801d8ee <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 801d808:	1e5a      	subs	r2, r3, #1
 801d80a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801d80c:	fb06 4602 	mla	r6, r6, r2, r4
 801d810:	1436      	asrs	r6, r6, #16
 801d812:	d461      	bmi.n	801d8d8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801d814:	4576      	cmp	r6, lr
 801d816:	da5f      	bge.n	801d8d8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801d818:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801d81a:	fb06 0202 	mla	r2, r6, r2, r0
 801d81e:	1412      	asrs	r2, r2, #16
 801d820:	d45a      	bmi.n	801d8d8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801d822:	4542      	cmp	r2, r8
 801d824:	da58      	bge.n	801d8d8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801d826:	1cef      	adds	r7, r5, #3
 801d828:	4699      	mov	r9, r3
 801d82a:	f1b9 0f00 	cmp.w	r9, #0
 801d82e:	dd59      	ble.n	801d8e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801d830:	1426      	asrs	r6, r4, #16
 801d832:	1402      	asrs	r2, r0, #16
 801d834:	fb0e 6202 	mla	r2, lr, r2, r6
 801d838:	9e01      	ldr	r6, [sp, #4]
 801d83a:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801d83e:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801d842:	d041      	beq.n	801d8c8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 801d844:	9a03      	ldr	r2, [sp, #12]
 801d846:	fa5f fb86 	uxtb.w	fp, r6
 801d84a:	fb02 fc0c 	mul.w	ip, r2, ip
 801d84e:	f10c 0201 	add.w	r2, ip, #1
 801d852:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801d856:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801d85a:	1212      	asrs	r2, r2, #8
 801d85c:	fa1f fa82 	uxth.w	sl, r2
 801d860:	43d2      	mvns	r2, r2
 801d862:	fb1b fb0a 	smulbb	fp, fp, sl
 801d866:	b2d2      	uxtb	r2, r2
 801d868:	fb0c bc02 	mla	ip, ip, r2, fp
 801d86c:	fa1f fc8c 	uxth.w	ip, ip
 801d870:	f10c 0b01 	add.w	fp, ip, #1
 801d874:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d878:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801d87c:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801d880:	fb1b fb0a 	smulbb	fp, fp, sl
 801d884:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d888:	fb16 fa0a 	smulbb	sl, r6, sl
 801d88c:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801d890:	f807 cc03 	strb.w	ip, [r7, #-3]
 801d894:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801d898:	fb06 aa02 	mla	sl, r6, r2, sl
 801d89c:	fb0c bc02 	mla	ip, ip, r2, fp
 801d8a0:	fa1f fa8a 	uxth.w	sl, sl
 801d8a4:	fa1f fc8c 	uxth.w	ip, ip
 801d8a8:	f10a 0601 	add.w	r6, sl, #1
 801d8ac:	f10c 0b01 	add.w	fp, ip, #1
 801d8b0:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801d8b4:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d8b8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d8bc:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d8c0:	f807 ac01 	strb.w	sl, [r7, #-1]
 801d8c4:	f807 cc02 	strb.w	ip, [r7, #-2]
 801d8c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d8ca:	3703      	adds	r7, #3
 801d8cc:	f109 39ff 	add.w	r9, r9, #4294967295
 801d8d0:	4414      	add	r4, r2
 801d8d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d8d4:	4410      	add	r0, r2
 801d8d6:	e7a8      	b.n	801d82a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801d8d8:	f04f 0c00 	mov.w	ip, #0
 801d8dc:	eba3 020c 	sub.w	r2, r3, ip
 801d8e0:	2a00      	cmp	r2, #0
 801d8e2:	dc3d      	bgt.n	801d960 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 801d8e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d8e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d8ec:	441d      	add	r5, r3
 801d8ee:	2900      	cmp	r1, #0
 801d8f0:	f340 808e 	ble.w	801da10 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801d8f4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d8f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d8fa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d8fe:	3901      	subs	r1, #1
 801d900:	eeb0 6a62 	vmov.f32	s12, s5
 801d904:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d908:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d90c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d910:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d914:	eeb0 6a43 	vmov.f32	s12, s6
 801d918:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d91c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d920:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d924:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d928:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d92c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d930:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d934:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d938:	ee12 2a90 	vmov	r2, s5
 801d93c:	eef0 2a47 	vmov.f32	s5, s14
 801d940:	fb92 f3f3 	sdiv	r3, r2, r3
 801d944:	ee13 2a10 	vmov	r2, s6
 801d948:	9311      	str	r3, [sp, #68]	; 0x44
 801d94a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d94c:	eeb0 3a67 	vmov.f32	s6, s15
 801d950:	fb92 f3f3 	sdiv	r3, r2, r3
 801d954:	9a02      	ldr	r2, [sp, #8]
 801d956:	9312      	str	r3, [sp, #72]	; 0x48
 801d958:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d95a:	bf08      	it	eq
 801d95c:	4613      	moveq	r3, r2
 801d95e:	e735      	b.n	801d7cc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 801d960:	1426      	asrs	r6, r4, #16
 801d962:	d44e      	bmi.n	801da02 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801d964:	4576      	cmp	r6, lr
 801d966:	da4c      	bge.n	801da02 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801d968:	1402      	asrs	r2, r0, #16
 801d96a:	d44a      	bmi.n	801da02 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801d96c:	4542      	cmp	r2, r8
 801d96e:	da48      	bge.n	801da02 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801d970:	fb0e 6202 	mla	r2, lr, r2, r6
 801d974:	9e01      	ldr	r6, [sp, #4]
 801d976:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801d97a:	0e3a      	lsrs	r2, r7, #24
 801d97c:	d041      	beq.n	801da02 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801d97e:	9e03      	ldr	r6, [sp, #12]
 801d980:	fa5f fb87 	uxtb.w	fp, r7
 801d984:	4372      	muls	r2, r6
 801d986:	1c56      	adds	r6, r2, #1
 801d988:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801d98c:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 801d990:	1212      	asrs	r2, r2, #8
 801d992:	f815 9006 	ldrb.w	r9, [r5, r6]
 801d996:	fa1f fa82 	uxth.w	sl, r2
 801d99a:	43d2      	mvns	r2, r2
 801d99c:	fb1b fb0a 	smulbb	fp, fp, sl
 801d9a0:	b2d2      	uxtb	r2, r2
 801d9a2:	fb09 b902 	mla	r9, r9, r2, fp
 801d9a6:	fa1f f989 	uxth.w	r9, r9
 801d9aa:	f109 0b01 	add.w	fp, r9, #1
 801d9ae:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d9b2:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801d9b6:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801d9ba:	fb1b fb0a 	smulbb	fp, fp, sl
 801d9be:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d9c2:	fb17 fa0a 	smulbb	sl, r7, sl
 801d9c6:	f805 9006 	strb.w	r9, [r5, r6]
 801d9ca:	442e      	add	r6, r5
 801d9cc:	78b7      	ldrb	r7, [r6, #2]
 801d9ce:	f896 9001 	ldrb.w	r9, [r6, #1]
 801d9d2:	fb07 aa02 	mla	sl, r7, r2, sl
 801d9d6:	fb09 b902 	mla	r9, r9, r2, fp
 801d9da:	fa1f fa8a 	uxth.w	sl, sl
 801d9de:	fa1f f989 	uxth.w	r9, r9
 801d9e2:	f10a 0701 	add.w	r7, sl, #1
 801d9e6:	f109 0b01 	add.w	fp, r9, #1
 801d9ea:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d9ee:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d9f2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d9f6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d9fa:	f886 a002 	strb.w	sl, [r6, #2]
 801d9fe:	f886 9001 	strb.w	r9, [r6, #1]
 801da02:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801da04:	f10c 0c01 	add.w	ip, ip, #1
 801da08:	4414      	add	r4, r2
 801da0a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801da0c:	4410      	add	r0, r2
 801da0e:	e765      	b.n	801d8dc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801da10:	b005      	add	sp, #20
 801da12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801da16 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801da16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da1a:	b085      	sub	sp, #20
 801da1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801da20:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801da22:	9203      	str	r2, [sp, #12]
 801da24:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801da28:	6860      	ldr	r0, [r4, #4]
 801da2a:	9201      	str	r2, [sp, #4]
 801da2c:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801da30:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801da34:	fb00 2505 	mla	r5, r0, r5, r2
 801da38:	6822      	ldr	r2, [r4, #0]
 801da3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801da3e:	4415      	add	r5, r2
 801da40:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801da42:	6812      	ldr	r2, [r2, #0]
 801da44:	9202      	str	r2, [sp, #8]
 801da46:	2900      	cmp	r1, #0
 801da48:	dc03      	bgt.n	801da52 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801da4a:	9a03      	ldr	r2, [sp, #12]
 801da4c:	2a00      	cmp	r2, #0
 801da4e:	f340 8122 	ble.w	801dc96 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801da52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801da54:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801da58:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801da5a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801da5e:	2b00      	cmp	r3, #0
 801da60:	dd0f      	ble.n	801da82 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801da62:	1422      	asrs	r2, r4, #16
 801da64:	d406      	bmi.n	801da74 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801da66:	4572      	cmp	r2, lr
 801da68:	da04      	bge.n	801da74 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801da6a:	1402      	asrs	r2, r0, #16
 801da6c:	d402      	bmi.n	801da74 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801da6e:	9e01      	ldr	r6, [sp, #4]
 801da70:	42b2      	cmp	r2, r6
 801da72:	db07      	blt.n	801da84 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801da74:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801da76:	3b01      	subs	r3, #1
 801da78:	3503      	adds	r5, #3
 801da7a:	4414      	add	r4, r2
 801da7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801da7e:	4410      	add	r0, r2
 801da80:	e7ed      	b.n	801da5e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801da82:	d06e      	beq.n	801db62 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801da84:	1e5a      	subs	r2, r3, #1
 801da86:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801da88:	fb06 4602 	mla	r6, r6, r2, r4
 801da8c:	1436      	asrs	r6, r6, #16
 801da8e:	d45d      	bmi.n	801db4c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801da90:	4576      	cmp	r6, lr
 801da92:	da5b      	bge.n	801db4c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801da94:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801da96:	fb06 0202 	mla	r2, r6, r2, r0
 801da9a:	1412      	asrs	r2, r2, #16
 801da9c:	d456      	bmi.n	801db4c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801da9e:	9e01      	ldr	r6, [sp, #4]
 801daa0:	42b2      	cmp	r2, r6
 801daa2:	da53      	bge.n	801db4c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801daa4:	1cee      	adds	r6, r5, #3
 801daa6:	469a      	mov	sl, r3
 801daa8:	f1ba 0f00 	cmp.w	sl, #0
 801daac:	dd54      	ble.n	801db58 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801daae:	1427      	asrs	r7, r4, #16
 801dab0:	1402      	asrs	r2, r0, #16
 801dab2:	fb0e 7202 	mla	r2, lr, r2, r7
 801dab6:	9f02      	ldr	r7, [sp, #8]
 801dab8:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801dabc:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 801dac0:	d03c      	beq.n	801db3c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801dac2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801dac6:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801daca:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801dace:	fa5f f28c 	uxtb.w	r2, ip
 801dad2:	b2ff      	uxtb	r7, r7
 801dad4:	f000 80d8 	beq.w	801dc88 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801dad8:	fa1f f882 	uxth.w	r8, r2
 801dadc:	43d2      	mvns	r2, r2
 801dade:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801dae2:	fb17 f708 	smulbb	r7, r7, r8
 801dae6:	b2d2      	uxtb	r2, r2
 801dae8:	fb19 f908 	smulbb	r9, r9, r8
 801daec:	fb0c 7702 	mla	r7, ip, r2, r7
 801daf0:	fb1b f808 	smulbb	r8, fp, r8
 801daf4:	b2bf      	uxth	r7, r7
 801daf6:	f107 0c01 	add.w	ip, r7, #1
 801dafa:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801dafe:	123f      	asrs	r7, r7, #8
 801db00:	f806 7c03 	strb.w	r7, [r6, #-3]
 801db04:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801db08:	fb07 9902 	mla	r9, r7, r2, r9
 801db0c:	fa1f f989 	uxth.w	r9, r9
 801db10:	f109 0701 	add.w	r7, r9, #1
 801db14:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801db18:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801db1c:	fb07 8802 	mla	r8, r7, r2, r8
 801db20:	ea4f 2929 	mov.w	r9, r9, asr #8
 801db24:	fa1f f888 	uxth.w	r8, r8
 801db28:	f806 9c02 	strb.w	r9, [r6, #-2]
 801db2c:	f108 0201 	add.w	r2, r8, #1
 801db30:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801db34:	ea4f 2828 	mov.w	r8, r8, asr #8
 801db38:	f806 8c01 	strb.w	r8, [r6, #-1]
 801db3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801db3e:	3603      	adds	r6, #3
 801db40:	f10a 3aff 	add.w	sl, sl, #4294967295
 801db44:	4414      	add	r4, r2
 801db46:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801db48:	4410      	add	r0, r2
 801db4a:	e7ad      	b.n	801daa8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801db4c:	f04f 0c00 	mov.w	ip, #0
 801db50:	eba3 020c 	sub.w	r2, r3, ip
 801db54:	2a00      	cmp	r2, #0
 801db56:	dc3d      	bgt.n	801dbd4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 801db58:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801db5c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801db60:	441d      	add	r5, r3
 801db62:	2900      	cmp	r1, #0
 801db64:	f340 8097 	ble.w	801dc96 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801db68:	ee30 0a04 	vadd.f32	s0, s0, s8
 801db6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801db6e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801db72:	3901      	subs	r1, #1
 801db74:	eeb0 6a62 	vmov.f32	s12, s5
 801db78:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801db7c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801db80:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801db84:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801db88:	eeb0 6a43 	vmov.f32	s12, s6
 801db8c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801db90:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801db94:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801db98:	ee61 7a27 	vmul.f32	s15, s2, s15
 801db9c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dba0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dba4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dba8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dbac:	ee12 2a90 	vmov	r2, s5
 801dbb0:	eef0 2a47 	vmov.f32	s5, s14
 801dbb4:	fb92 f3f3 	sdiv	r3, r2, r3
 801dbb8:	ee13 2a10 	vmov	r2, s6
 801dbbc:	9311      	str	r3, [sp, #68]	; 0x44
 801dbbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dbc0:	eeb0 3a67 	vmov.f32	s6, s15
 801dbc4:	fb92 f3f3 	sdiv	r3, r2, r3
 801dbc8:	9a03      	ldr	r2, [sp, #12]
 801dbca:	9312      	str	r3, [sp, #72]	; 0x48
 801dbcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dbce:	bf08      	it	eq
 801dbd0:	4613      	moveq	r3, r2
 801dbd2:	e738      	b.n	801da46 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801dbd4:	1426      	asrs	r6, r4, #16
 801dbd6:	d448      	bmi.n	801dc6a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801dbd8:	4576      	cmp	r6, lr
 801dbda:	da46      	bge.n	801dc6a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801dbdc:	1402      	asrs	r2, r0, #16
 801dbde:	d444      	bmi.n	801dc6a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801dbe0:	9f01      	ldr	r7, [sp, #4]
 801dbe2:	42ba      	cmp	r2, r7
 801dbe4:	da41      	bge.n	801dc6a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801dbe6:	fb0e 6202 	mla	r2, lr, r2, r6
 801dbea:	9e02      	ldr	r6, [sp, #8]
 801dbec:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801dbf0:	0e3a      	lsrs	r2, r7, #24
 801dbf2:	d03a      	beq.n	801dc6a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801dbf4:	2aff      	cmp	r2, #255	; 0xff
 801dbf6:	b2d6      	uxtb	r6, r2
 801dbf8:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801dbfc:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801dc00:	ea4f 024c 	mov.w	r2, ip, lsl #1
 801dc04:	b2ff      	uxtb	r7, r7
 801dc06:	d037      	beq.n	801dc78 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 801dc08:	fa1f f986 	uxth.w	r9, r6
 801dc0c:	4462      	add	r2, ip
 801dc0e:	43f6      	mvns	r6, r6
 801dc10:	f815 8002 	ldrb.w	r8, [r5, r2]
 801dc14:	fb17 f709 	smulbb	r7, r7, r9
 801dc18:	fb1a fa09 	smulbb	sl, sl, r9
 801dc1c:	b2f6      	uxtb	r6, r6
 801dc1e:	fb1b f909 	smulbb	r9, fp, r9
 801dc22:	fb08 7706 	mla	r7, r8, r6, r7
 801dc26:	b2bf      	uxth	r7, r7
 801dc28:	f107 0801 	add.w	r8, r7, #1
 801dc2c:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801dc30:	123f      	asrs	r7, r7, #8
 801dc32:	54af      	strb	r7, [r5, r2]
 801dc34:	442a      	add	r2, r5
 801dc36:	7857      	ldrb	r7, [r2, #1]
 801dc38:	fb07 aa06 	mla	sl, r7, r6, sl
 801dc3c:	fa1f fa8a 	uxth.w	sl, sl
 801dc40:	f10a 0701 	add.w	r7, sl, #1
 801dc44:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801dc48:	7897      	ldrb	r7, [r2, #2]
 801dc4a:	fb07 9906 	mla	r9, r7, r6, r9
 801dc4e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801dc52:	fa1f f989 	uxth.w	r9, r9
 801dc56:	f882 a001 	strb.w	sl, [r2, #1]
 801dc5a:	f109 0601 	add.w	r6, r9, #1
 801dc5e:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801dc62:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dc66:	f882 9002 	strb.w	r9, [r2, #2]
 801dc6a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801dc6c:	f10c 0c01 	add.w	ip, ip, #1
 801dc70:	4414      	add	r4, r2
 801dc72:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801dc74:	4410      	add	r0, r2
 801dc76:	e76b      	b.n	801db50 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 801dc78:	4462      	add	r2, ip
 801dc7a:	54af      	strb	r7, [r5, r2]
 801dc7c:	442a      	add	r2, r5
 801dc7e:	f882 a001 	strb.w	sl, [r2, #1]
 801dc82:	f882 b002 	strb.w	fp, [r2, #2]
 801dc86:	e7f0      	b.n	801dc6a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801dc88:	f806 7c03 	strb.w	r7, [r6, #-3]
 801dc8c:	f806 9c02 	strb.w	r9, [r6, #-2]
 801dc90:	f806 bc01 	strb.w	fp, [r6, #-1]
 801dc94:	e752      	b.n	801db3c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801dc96:	b005      	add	sp, #20
 801dc98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dc9c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801dc9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dca0:	b087      	sub	sp, #28
 801dca2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dca6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801dca8:	9204      	str	r2, [sp, #16]
 801dcaa:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801dcae:	6860      	ldr	r0, [r4, #4]
 801dcb0:	9205      	str	r2, [sp, #20]
 801dcb2:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801dcb6:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801dcba:	9101      	str	r1, [sp, #4]
 801dcbc:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801dcc0:	fb00 2505 	mla	r5, r0, r5, r2
 801dcc4:	6822      	ldr	r2, [r4, #0]
 801dcc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801dcca:	4415      	add	r5, r2
 801dccc:	f10e 0201 	add.w	r2, lr, #1
 801dcd0:	f022 0201 	bic.w	r2, r2, #1
 801dcd4:	9202      	str	r2, [sp, #8]
 801dcd6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801dcd8:	6812      	ldr	r2, [r2, #0]
 801dcda:	9203      	str	r2, [sp, #12]
 801dcdc:	9a01      	ldr	r2, [sp, #4]
 801dcde:	2a00      	cmp	r2, #0
 801dce0:	dc03      	bgt.n	801dcea <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801dce2:	9a04      	ldr	r2, [sp, #16]
 801dce4:	2a00      	cmp	r2, #0
 801dce6:	f340 8132 	ble.w	801df4e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801dcea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801dcec:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801dcf0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801dcf2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801dcf6:	2b00      	cmp	r3, #0
 801dcf8:	dd0e      	ble.n	801dd18 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801dcfa:	1422      	asrs	r2, r4, #16
 801dcfc:	d405      	bmi.n	801dd0a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801dcfe:	4596      	cmp	lr, r2
 801dd00:	dd03      	ble.n	801dd0a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801dd02:	1402      	asrs	r2, r0, #16
 801dd04:	d401      	bmi.n	801dd0a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801dd06:	4542      	cmp	r2, r8
 801dd08:	db07      	blt.n	801dd1a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801dd0a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801dd0c:	3b01      	subs	r3, #1
 801dd0e:	3503      	adds	r5, #3
 801dd10:	4414      	add	r4, r2
 801dd12:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801dd14:	4410      	add	r0, r2
 801dd16:	e7ee      	b.n	801dcf6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 801dd18:	d010      	beq.n	801dd3c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801dd1a:	1e5a      	subs	r2, r3, #1
 801dd1c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801dd1e:	fb06 4602 	mla	r6, r6, r2, r4
 801dd22:	1436      	asrs	r6, r6, #16
 801dd24:	d546      	bpl.n	801ddb4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801dd26:	4699      	mov	r9, r3
 801dd28:	462e      	mov	r6, r5
 801dd2a:	f1b9 0f00 	cmp.w	r9, #0
 801dd2e:	f300 80ac 	bgt.w	801de8a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 801dd32:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dd36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dd3a:	441d      	add	r5, r3
 801dd3c:	9b01      	ldr	r3, [sp, #4]
 801dd3e:	2b00      	cmp	r3, #0
 801dd40:	f340 8105 	ble.w	801df4e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801dd44:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dd48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dd4a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dd4e:	eeb0 6a62 	vmov.f32	s12, s5
 801dd52:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801dd56:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dd5a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dd5e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801dd62:	eeb0 6a43 	vmov.f32	s12, s6
 801dd66:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dd6a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801dd6e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dd72:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dd76:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dd7a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dd7e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dd82:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dd86:	ee12 2a90 	vmov	r2, s5
 801dd8a:	eef0 2a47 	vmov.f32	s5, s14
 801dd8e:	fb92 f3f3 	sdiv	r3, r2, r3
 801dd92:	ee13 2a10 	vmov	r2, s6
 801dd96:	9313      	str	r3, [sp, #76]	; 0x4c
 801dd98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dd9a:	eeb0 3a67 	vmov.f32	s6, s15
 801dd9e:	fb92 f3f3 	sdiv	r3, r2, r3
 801dda2:	9314      	str	r3, [sp, #80]	; 0x50
 801dda4:	9b01      	ldr	r3, [sp, #4]
 801dda6:	9a04      	ldr	r2, [sp, #16]
 801dda8:	3b01      	subs	r3, #1
 801ddaa:	9301      	str	r3, [sp, #4]
 801ddac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ddae:	bf08      	it	eq
 801ddb0:	4613      	moveq	r3, r2
 801ddb2:	e793      	b.n	801dcdc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801ddb4:	45b6      	cmp	lr, r6
 801ddb6:	ddb6      	ble.n	801dd26 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801ddb8:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801ddba:	fb06 0202 	mla	r2, r6, r2, r0
 801ddbe:	1412      	asrs	r2, r2, #16
 801ddc0:	d4b1      	bmi.n	801dd26 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801ddc2:	4542      	cmp	r2, r8
 801ddc4:	daaf      	bge.n	801dd26 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801ddc6:	1cee      	adds	r6, r5, #3
 801ddc8:	4699      	mov	r9, r3
 801ddca:	f1b9 0f00 	cmp.w	r9, #0
 801ddce:	ddb0      	ble.n	801dd32 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801ddd0:	1422      	asrs	r2, r4, #16
 801ddd2:	9902      	ldr	r1, [sp, #8]
 801ddd4:	1407      	asrs	r7, r0, #16
 801ddd6:	fb01 2707 	mla	r7, r1, r7, r2
 801ddda:	9903      	ldr	r1, [sp, #12]
 801dddc:	087a      	lsrs	r2, r7, #1
 801ddde:	5c8a      	ldrb	r2, [r1, r2]
 801dde0:	07f9      	lsls	r1, r7, #31
 801dde2:	bf54      	ite	pl
 801dde4:	f002 020f 	andpl.w	r2, r2, #15
 801dde8:	1112      	asrmi	r2, r2, #4
 801ddea:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ddee:	b2d2      	uxtb	r2, r2
 801ddf0:	2a00      	cmp	r2, #0
 801ddf2:	d042      	beq.n	801de7a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 801ddf4:	4957      	ldr	r1, [pc, #348]	; (801df54 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801ddf6:	680f      	ldr	r7, [r1, #0]
 801ddf8:	9905      	ldr	r1, [sp, #20]
 801ddfa:	fa5f fb87 	uxtb.w	fp, r7
 801ddfe:	434a      	muls	r2, r1
 801de00:	f102 0c01 	add.w	ip, r2, #1
 801de04:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801de08:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801de0c:	1212      	asrs	r2, r2, #8
 801de0e:	fa1f fa82 	uxth.w	sl, r2
 801de12:	43d2      	mvns	r2, r2
 801de14:	fb1b fb0a 	smulbb	fp, fp, sl
 801de18:	b2d2      	uxtb	r2, r2
 801de1a:	fb0c bc02 	mla	ip, ip, r2, fp
 801de1e:	fa1f fc8c 	uxth.w	ip, ip
 801de22:	f10c 0b01 	add.w	fp, ip, #1
 801de26:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801de2a:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801de2e:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801de32:	fb1b fb0a 	smulbb	fp, fp, sl
 801de36:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801de3a:	fb17 fa0a 	smulbb	sl, r7, sl
 801de3e:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801de42:	f806 cc03 	strb.w	ip, [r6, #-3]
 801de46:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 801de4a:	fb07 aa02 	mla	sl, r7, r2, sl
 801de4e:	fb0c bc02 	mla	ip, ip, r2, fp
 801de52:	fa1f fa8a 	uxth.w	sl, sl
 801de56:	fa1f fc8c 	uxth.w	ip, ip
 801de5a:	f10a 0701 	add.w	r7, sl, #1
 801de5e:	f10c 0b01 	add.w	fp, ip, #1
 801de62:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801de66:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801de6a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801de6e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801de72:	f806 ac01 	strb.w	sl, [r6, #-1]
 801de76:	f806 cc02 	strb.w	ip, [r6, #-2]
 801de7a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801de7c:	3603      	adds	r6, #3
 801de7e:	f109 39ff 	add.w	r9, r9, #4294967295
 801de82:	4414      	add	r4, r2
 801de84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801de86:	4410      	add	r0, r2
 801de88:	e79f      	b.n	801ddca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 801de8a:	1422      	asrs	r2, r4, #16
 801de8c:	d457      	bmi.n	801df3e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801de8e:	4596      	cmp	lr, r2
 801de90:	dd55      	ble.n	801df3e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801de92:	1407      	asrs	r7, r0, #16
 801de94:	d453      	bmi.n	801df3e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801de96:	4547      	cmp	r7, r8
 801de98:	da51      	bge.n	801df3e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801de9a:	9902      	ldr	r1, [sp, #8]
 801de9c:	fb07 2701 	mla	r7, r7, r1, r2
 801dea0:	9903      	ldr	r1, [sp, #12]
 801dea2:	087a      	lsrs	r2, r7, #1
 801dea4:	07ff      	lsls	r7, r7, #31
 801dea6:	5c8a      	ldrb	r2, [r1, r2]
 801dea8:	bf54      	ite	pl
 801deaa:	f002 020f 	andpl.w	r2, r2, #15
 801deae:	1112      	asrmi	r2, r2, #4
 801deb0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801deb4:	b2d2      	uxtb	r2, r2
 801deb6:	2a00      	cmp	r2, #0
 801deb8:	d041      	beq.n	801df3e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801deba:	4926      	ldr	r1, [pc, #152]	; (801df54 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801debc:	680f      	ldr	r7, [r1, #0]
 801debe:	9905      	ldr	r1, [sp, #20]
 801dec0:	fa5f fb87 	uxtb.w	fp, r7
 801dec4:	434a      	muls	r2, r1
 801dec6:	f102 0c01 	add.w	ip, r2, #1
 801deca:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801dece:	f896 c000 	ldrb.w	ip, [r6]
 801ded2:	1212      	asrs	r2, r2, #8
 801ded4:	fa1f fa82 	uxth.w	sl, r2
 801ded8:	43d2      	mvns	r2, r2
 801deda:	fb1b fb0a 	smulbb	fp, fp, sl
 801dede:	b2d2      	uxtb	r2, r2
 801dee0:	fb0c bc02 	mla	ip, ip, r2, fp
 801dee4:	fa1f fc8c 	uxth.w	ip, ip
 801dee8:	f10c 0b01 	add.w	fp, ip, #1
 801deec:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801def0:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801def4:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801def8:	fb1b fb0a 	smulbb	fp, fp, sl
 801defc:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801df00:	fb17 fa0a 	smulbb	sl, r7, sl
 801df04:	78b7      	ldrb	r7, [r6, #2]
 801df06:	f886 c000 	strb.w	ip, [r6]
 801df0a:	f896 c001 	ldrb.w	ip, [r6, #1]
 801df0e:	fb07 aa02 	mla	sl, r7, r2, sl
 801df12:	fb0c bc02 	mla	ip, ip, r2, fp
 801df16:	fa1f fa8a 	uxth.w	sl, sl
 801df1a:	fa1f fc8c 	uxth.w	ip, ip
 801df1e:	f10a 0701 	add.w	r7, sl, #1
 801df22:	f10c 0b01 	add.w	fp, ip, #1
 801df26:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801df2a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801df2e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801df32:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801df36:	f886 a002 	strb.w	sl, [r6, #2]
 801df3a:	f886 c001 	strb.w	ip, [r6, #1]
 801df3e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801df40:	3603      	adds	r6, #3
 801df42:	f109 39ff 	add.w	r9, r9, #4294967295
 801df46:	4414      	add	r4, r2
 801df48:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801df4a:	4410      	add	r0, r2
 801df4c:	e6ed      	b.n	801dd2a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 801df4e:	b007      	add	sp, #28
 801df50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df54:	2000c5dc 	.word	0x2000c5dc

0801df58 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801df58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df5c:	b087      	sub	sp, #28
 801df5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801df62:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801df64:	9205      	str	r2, [sp, #20]
 801df66:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801df6a:	6860      	ldr	r0, [r4, #4]
 801df6c:	9202      	str	r2, [sp, #8]
 801df6e:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 801df72:	9101      	str	r1, [sp, #4]
 801df74:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 801df78:	fb00 2606 	mla	r6, r0, r6, r2
 801df7c:	6822      	ldr	r2, [r4, #0]
 801df7e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801df82:	4416      	add	r6, r2
 801df84:	f108 0201 	add.w	r2, r8, #1
 801df88:	f022 0201 	bic.w	r2, r2, #1
 801df8c:	9203      	str	r2, [sp, #12]
 801df8e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801df90:	6812      	ldr	r2, [r2, #0]
 801df92:	9204      	str	r2, [sp, #16]
 801df94:	9a01      	ldr	r2, [sp, #4]
 801df96:	2a00      	cmp	r2, #0
 801df98:	dc03      	bgt.n	801dfa2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801df9a:	9a05      	ldr	r2, [sp, #20]
 801df9c:	2a00      	cmp	r2, #0
 801df9e:	f340 813a 	ble.w	801e216 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801dfa2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801dfa4:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801dfa8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801dfaa:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801dfae:	2b00      	cmp	r3, #0
 801dfb0:	dd0f      	ble.n	801dfd2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801dfb2:	142a      	asrs	r2, r5, #16
 801dfb4:	d406      	bmi.n	801dfc4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801dfb6:	4590      	cmp	r8, r2
 801dfb8:	dd04      	ble.n	801dfc4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801dfba:	1422      	asrs	r2, r4, #16
 801dfbc:	d402      	bmi.n	801dfc4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801dfbe:	9802      	ldr	r0, [sp, #8]
 801dfc0:	4282      	cmp	r2, r0
 801dfc2:	db07      	blt.n	801dfd4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801dfc4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801dfc6:	3b01      	subs	r3, #1
 801dfc8:	3603      	adds	r6, #3
 801dfca:	4415      	add	r5, r2
 801dfcc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801dfce:	4414      	add	r4, r2
 801dfd0:	e7ed      	b.n	801dfae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801dfd2:	d073      	beq.n	801e0bc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 801dfd4:	1e5a      	subs	r2, r3, #1
 801dfd6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801dfd8:	fb00 5002 	mla	r0, r0, r2, r5
 801dfdc:	1400      	asrs	r0, r0, #16
 801dfde:	d464      	bmi.n	801e0aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801dfe0:	4580      	cmp	r8, r0
 801dfe2:	dd62      	ble.n	801e0aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801dfe4:	9814      	ldr	r0, [sp, #80]	; 0x50
 801dfe6:	fb00 4202 	mla	r2, r0, r2, r4
 801dfea:	1412      	asrs	r2, r2, #16
 801dfec:	d45d      	bmi.n	801e0aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801dfee:	9802      	ldr	r0, [sp, #8]
 801dff0:	4282      	cmp	r2, r0
 801dff2:	da5a      	bge.n	801e0aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801dff4:	1cf0      	adds	r0, r6, #3
 801dff6:	469a      	mov	sl, r3
 801dff8:	f1ba 0f00 	cmp.w	sl, #0
 801dffc:	dd59      	ble.n	801e0b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801dffe:	142a      	asrs	r2, r5, #16
 801e000:	9903      	ldr	r1, [sp, #12]
 801e002:	1427      	asrs	r7, r4, #16
 801e004:	fb01 2707 	mla	r7, r1, r7, r2
 801e008:	9904      	ldr	r1, [sp, #16]
 801e00a:	087a      	lsrs	r2, r7, #1
 801e00c:	5c8a      	ldrb	r2, [r1, r2]
 801e00e:	07f9      	lsls	r1, r7, #31
 801e010:	bf54      	ite	pl
 801e012:	f002 020f 	andpl.w	r2, r2, #15
 801e016:	1112      	asrmi	r2, r2, #4
 801e018:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e01c:	b2d2      	uxtb	r2, r2
 801e01e:	2a00      	cmp	r2, #0
 801e020:	d03b      	beq.n	801e09a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801e022:	497e      	ldr	r1, [pc, #504]	; (801e21c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801e024:	2aff      	cmp	r2, #255	; 0xff
 801e026:	680f      	ldr	r7, [r1, #0]
 801e028:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801e02c:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801e030:	b2ff      	uxtb	r7, r7
 801e032:	f000 80e9 	beq.w	801e208 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801e036:	fa1f fe82 	uxth.w	lr, r2
 801e03a:	43d2      	mvns	r2, r2
 801e03c:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 801e040:	fb17 f70e 	smulbb	r7, r7, lr
 801e044:	b2d2      	uxtb	r2, r2
 801e046:	fb19 f90e 	smulbb	r9, r9, lr
 801e04a:	fb0c 7702 	mla	r7, ip, r2, r7
 801e04e:	fb1b fe0e 	smulbb	lr, fp, lr
 801e052:	b2bf      	uxth	r7, r7
 801e054:	f107 0c01 	add.w	ip, r7, #1
 801e058:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801e05c:	123f      	asrs	r7, r7, #8
 801e05e:	f800 7c03 	strb.w	r7, [r0, #-3]
 801e062:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801e066:	fb07 9902 	mla	r9, r7, r2, r9
 801e06a:	fa1f f989 	uxth.w	r9, r9
 801e06e:	f109 0701 	add.w	r7, r9, #1
 801e072:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801e076:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801e07a:	fb07 ee02 	mla	lr, r7, r2, lr
 801e07e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e082:	fa1f fe8e 	uxth.w	lr, lr
 801e086:	f800 9c02 	strb.w	r9, [r0, #-2]
 801e08a:	f10e 0201 	add.w	r2, lr, #1
 801e08e:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801e092:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e096:	f800 ec01 	strb.w	lr, [r0, #-1]
 801e09a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e09c:	3003      	adds	r0, #3
 801e09e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e0a2:	4415      	add	r5, r2
 801e0a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e0a6:	4414      	add	r4, r2
 801e0a8:	e7a6      	b.n	801dff8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801e0aa:	2700      	movs	r7, #0
 801e0ac:	1bda      	subs	r2, r3, r7
 801e0ae:	2a00      	cmp	r2, #0
 801e0b0:	dc40      	bgt.n	801e134 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801e0b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e0b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e0ba:	441e      	add	r6, r3
 801e0bc:	9b01      	ldr	r3, [sp, #4]
 801e0be:	2b00      	cmp	r3, #0
 801e0c0:	f340 80a9 	ble.w	801e216 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801e0c4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e0c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e0ca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e0ce:	eeb0 6a62 	vmov.f32	s12, s5
 801e0d2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e0d6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e0da:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e0de:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801e0e2:	eeb0 6a43 	vmov.f32	s12, s6
 801e0e6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e0ea:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801e0ee:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e0f2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e0f6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e0fa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e0fe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e102:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e106:	ee12 2a90 	vmov	r2, s5
 801e10a:	eef0 2a47 	vmov.f32	s5, s14
 801e10e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e112:	ee13 2a10 	vmov	r2, s6
 801e116:	9313      	str	r3, [sp, #76]	; 0x4c
 801e118:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e11a:	eeb0 3a67 	vmov.f32	s6, s15
 801e11e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e122:	9314      	str	r3, [sp, #80]	; 0x50
 801e124:	9b01      	ldr	r3, [sp, #4]
 801e126:	9a05      	ldr	r2, [sp, #20]
 801e128:	3b01      	subs	r3, #1
 801e12a:	9301      	str	r3, [sp, #4]
 801e12c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e12e:	bf08      	it	eq
 801e130:	4613      	moveq	r3, r2
 801e132:	e72f      	b.n	801df94 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801e134:	142a      	asrs	r2, r5, #16
 801e136:	d458      	bmi.n	801e1ea <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801e138:	4590      	cmp	r8, r2
 801e13a:	dd56      	ble.n	801e1ea <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801e13c:	1420      	asrs	r0, r4, #16
 801e13e:	d454      	bmi.n	801e1ea <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801e140:	9902      	ldr	r1, [sp, #8]
 801e142:	4288      	cmp	r0, r1
 801e144:	da51      	bge.n	801e1ea <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801e146:	9903      	ldr	r1, [sp, #12]
 801e148:	fb00 2001 	mla	r0, r0, r1, r2
 801e14c:	9904      	ldr	r1, [sp, #16]
 801e14e:	0842      	lsrs	r2, r0, #1
 801e150:	07c0      	lsls	r0, r0, #31
 801e152:	5c8a      	ldrb	r2, [r1, r2]
 801e154:	bf54      	ite	pl
 801e156:	f002 020f 	andpl.w	r2, r2, #15
 801e15a:	1112      	asrmi	r2, r2, #4
 801e15c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e160:	b2d2      	uxtb	r2, r2
 801e162:	2a00      	cmp	r2, #0
 801e164:	d041      	beq.n	801e1ea <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801e166:	492d      	ldr	r1, [pc, #180]	; (801e21c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801e168:	2aff      	cmp	r2, #255	; 0xff
 801e16a:	6808      	ldr	r0, [r1, #0]
 801e16c:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801e170:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801e174:	fa5f fc80 	uxtb.w	ip, r0
 801e178:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801e17c:	d03b      	beq.n	801e1f6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 801e17e:	fa1f f982 	uxth.w	r9, r2
 801e182:	4438      	add	r0, r7
 801e184:	43d2      	mvns	r2, r2
 801e186:	f816 e000 	ldrb.w	lr, [r6, r0]
 801e18a:	fb1c fc09 	smulbb	ip, ip, r9
 801e18e:	fb1a fa09 	smulbb	sl, sl, r9
 801e192:	b2d2      	uxtb	r2, r2
 801e194:	fb1b f909 	smulbb	r9, fp, r9
 801e198:	fb0e cc02 	mla	ip, lr, r2, ip
 801e19c:	fa1f fc8c 	uxth.w	ip, ip
 801e1a0:	f10c 0e01 	add.w	lr, ip, #1
 801e1a4:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801e1a8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e1ac:	f806 c000 	strb.w	ip, [r6, r0]
 801e1b0:	4430      	add	r0, r6
 801e1b2:	f890 c001 	ldrb.w	ip, [r0, #1]
 801e1b6:	fb0c aa02 	mla	sl, ip, r2, sl
 801e1ba:	fa1f fa8a 	uxth.w	sl, sl
 801e1be:	f10a 0c01 	add.w	ip, sl, #1
 801e1c2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e1c6:	f890 c002 	ldrb.w	ip, [r0, #2]
 801e1ca:	fb0c 9902 	mla	r9, ip, r2, r9
 801e1ce:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e1d2:	fa1f f989 	uxth.w	r9, r9
 801e1d6:	f880 a001 	strb.w	sl, [r0, #1]
 801e1da:	f109 0201 	add.w	r2, r9, #1
 801e1de:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801e1e2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e1e6:	f880 9002 	strb.w	r9, [r0, #2]
 801e1ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e1ec:	3701      	adds	r7, #1
 801e1ee:	4415      	add	r5, r2
 801e1f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e1f2:	4414      	add	r4, r2
 801e1f4:	e75a      	b.n	801e0ac <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801e1f6:	4438      	add	r0, r7
 801e1f8:	f806 c000 	strb.w	ip, [r6, r0]
 801e1fc:	4430      	add	r0, r6
 801e1fe:	f880 a001 	strb.w	sl, [r0, #1]
 801e202:	f880 b002 	strb.w	fp, [r0, #2]
 801e206:	e7f0      	b.n	801e1ea <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801e208:	f800 7c03 	strb.w	r7, [r0, #-3]
 801e20c:	f800 9c02 	strb.w	r9, [r0, #-2]
 801e210:	f800 bc01 	strb.w	fp, [r0, #-1]
 801e214:	e741      	b.n	801e09a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801e216:	b007      	add	sp, #28
 801e218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e21c:	2000c5dc 	.word	0x2000c5dc

0801e220 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801e220:	4770      	bx	lr

0801e222 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801e222:	4770      	bx	lr

0801e224 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801e224:	4770      	bx	lr

0801e226 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801e226:	4770      	bx	lr

0801e228 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801e228:	4770      	bx	lr

0801e22a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801e22a:	4770      	bx	lr

0801e22c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801e22c:	4770      	bx	lr

0801e22e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801e22e:	4770      	bx	lr

0801e230 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801e230:	4770      	bx	lr

0801e232 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801e232:	4770      	bx	lr

0801e234 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801e234:	4770      	bx	lr

0801e236 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801e236:	4770      	bx	lr

0801e238 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801e238:	4770      	bx	lr

0801e23a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801e23a:	4770      	bx	lr

0801e23c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801e23c:	4770      	bx	lr

0801e23e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801e23e:	4770      	bx	lr

0801e240 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801e240:	4770      	bx	lr

0801e242 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801e242:	4770      	bx	lr

0801e244 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801e244:	4770      	bx	lr

0801e246 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801e246:	4770      	bx	lr

0801e248 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801e248:	2bff      	cmp	r3, #255	; 0xff
 801e24a:	b508      	push	{r3, lr}
 801e24c:	d04f      	beq.n	801e2ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801e24e:	2a2c      	cmp	r2, #44	; 0x2c
 801e250:	d032      	beq.n	801e2b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801e252:	d80f      	bhi.n	801e274 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801e254:	2a08      	cmp	r2, #8
 801e256:	d046      	beq.n	801e2e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801e258:	d805      	bhi.n	801e266 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801e25a:	2a04      	cmp	r2, #4
 801e25c:	d041      	beq.n	801e2e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801e25e:	2a05      	cmp	r2, #5
 801e260:	d03d      	beq.n	801e2de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801e262:	2000      	movs	r0, #0
 801e264:	e027      	b.n	801e2b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e266:	2a0a      	cmp	r2, #10
 801e268:	d03d      	beq.n	801e2e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801e26a:	d301      	bcc.n	801e270 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801e26c:	2a0b      	cmp	r2, #11
 801e26e:	d1f8      	bne.n	801e262 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e270:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801e272:	e020      	b.n	801e2b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e274:	2a30      	cmp	r2, #48	; 0x30
 801e276:	d038      	beq.n	801e2ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801e278:	d808      	bhi.n	801e28c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801e27a:	2a2e      	cmp	r2, #46	; 0x2e
 801e27c:	684b      	ldr	r3, [r1, #4]
 801e27e:	d029      	beq.n	801e2d4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801e280:	d90b      	bls.n	801e29a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801e282:	781b      	ldrb	r3, [r3, #0]
 801e284:	2b00      	cmp	r3, #0
 801e286:	d1ec      	bne.n	801e262 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e288:	6a00      	ldr	r0, [r0, #32]
 801e28a:	e014      	b.n	801e2b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e28c:	2a32      	cmp	r2, #50	; 0x32
 801e28e:	d02c      	beq.n	801e2ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801e290:	d301      	bcc.n	801e296 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801e292:	2a33      	cmp	r2, #51	; 0x33
 801e294:	d1e5      	bne.n	801e262 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e296:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801e298:	e00d      	b.n	801e2b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e29a:	781b      	ldrb	r3, [r3, #0]
 801e29c:	2b01      	cmp	r3, #1
 801e29e:	d009      	beq.n	801e2b4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801e2a0:	d3f2      	bcc.n	801e288 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801e2a2:	2b02      	cmp	r3, #2
 801e2a4:	d1dd      	bne.n	801e262 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e2a6:	4b39      	ldr	r3, [pc, #228]	; (801e38c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801e2a8:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 801e2ac:	4a38      	ldr	r2, [pc, #224]	; (801e390 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801e2ae:	4839      	ldr	r0, [pc, #228]	; (801e394 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801e2b0:	f007 ff3e 	bl	8026130 <__assert_func>
 801e2b4:	6900      	ldr	r0, [r0, #16]
 801e2b6:	bd08      	pop	{r3, pc}
 801e2b8:	684b      	ldr	r3, [r1, #4]
 801e2ba:	781b      	ldrb	r3, [r3, #0]
 801e2bc:	2b01      	cmp	r3, #1
 801e2be:	d007      	beq.n	801e2d0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801e2c0:	d30b      	bcc.n	801e2da <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801e2c2:	2b02      	cmp	r3, #2
 801e2c4:	d1cd      	bne.n	801e262 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e2c6:	4b31      	ldr	r3, [pc, #196]	; (801e38c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801e2c8:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 801e2cc:	4a30      	ldr	r2, [pc, #192]	; (801e390 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801e2ce:	e7ee      	b.n	801e2ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e2d0:	6880      	ldr	r0, [r0, #8]
 801e2d2:	e7f0      	b.n	801e2b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e2d4:	781b      	ldrb	r3, [r3, #0]
 801e2d6:	2b00      	cmp	r3, #0
 801e2d8:	d1c3      	bne.n	801e262 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e2da:	6980      	ldr	r0, [r0, #24]
 801e2dc:	e7eb      	b.n	801e2b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e2de:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801e2e0:	e7e9      	b.n	801e2b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e2e2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801e2e4:	e7e7      	b.n	801e2b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e2e6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801e2e8:	e7e5      	b.n	801e2b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e2ea:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801e2ec:	e7e3      	b.n	801e2b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e2ee:	2a2c      	cmp	r2, #44	; 0x2c
 801e2f0:	d030      	beq.n	801e354 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801e2f2:	d80f      	bhi.n	801e314 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801e2f4:	2a08      	cmp	r2, #8
 801e2f6:	d044      	beq.n	801e382 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801e2f8:	d805      	bhi.n	801e306 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801e2fa:	2a04      	cmp	r2, #4
 801e2fc:	d03f      	beq.n	801e37e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801e2fe:	2a05      	cmp	r2, #5
 801e300:	d1af      	bne.n	801e262 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e302:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801e304:	e7d7      	b.n	801e2b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e306:	2a0a      	cmp	r2, #10
 801e308:	d03b      	beq.n	801e382 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801e30a:	d301      	bcc.n	801e310 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801e30c:	2a0b      	cmp	r2, #11
 801e30e:	d1a8      	bne.n	801e262 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e310:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801e312:	e7d0      	b.n	801e2b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e314:	2a30      	cmp	r2, #48	; 0x30
 801e316:	d036      	beq.n	801e386 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801e318:	d808      	bhi.n	801e32c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801e31a:	2a2e      	cmp	r2, #46	; 0x2e
 801e31c:	684b      	ldr	r3, [r1, #4]
 801e31e:	d028      	beq.n	801e372 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801e320:	d90b      	bls.n	801e33a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801e322:	781b      	ldrb	r3, [r3, #0]
 801e324:	2b00      	cmp	r3, #0
 801e326:	d19c      	bne.n	801e262 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e328:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801e32a:	e7c4      	b.n	801e2b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e32c:	2a32      	cmp	r2, #50	; 0x32
 801e32e:	d02a      	beq.n	801e386 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801e330:	d301      	bcc.n	801e336 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801e332:	2a33      	cmp	r2, #51	; 0x33
 801e334:	d195      	bne.n	801e262 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e336:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801e338:	e7bd      	b.n	801e2b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e33a:	781b      	ldrb	r3, [r3, #0]
 801e33c:	2b01      	cmp	r3, #1
 801e33e:	d007      	beq.n	801e350 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801e340:	d3f2      	bcc.n	801e328 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801e342:	2b02      	cmp	r3, #2
 801e344:	d18d      	bne.n	801e262 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e346:	4b11      	ldr	r3, [pc, #68]	; (801e38c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801e348:	f240 31e1 	movw	r1, #993	; 0x3e1
 801e34c:	4a10      	ldr	r2, [pc, #64]	; (801e390 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801e34e:	e7ae      	b.n	801e2ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e350:	6940      	ldr	r0, [r0, #20]
 801e352:	e7b0      	b.n	801e2b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e354:	684b      	ldr	r3, [r1, #4]
 801e356:	781b      	ldrb	r3, [r3, #0]
 801e358:	2b01      	cmp	r3, #1
 801e35a:	d008      	beq.n	801e36e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801e35c:	d30d      	bcc.n	801e37a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801e35e:	2b02      	cmp	r3, #2
 801e360:	f47f af7f 	bne.w	801e262 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e364:	4b09      	ldr	r3, [pc, #36]	; (801e38c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801e366:	f240 31ed 	movw	r1, #1005	; 0x3ed
 801e36a:	4a09      	ldr	r2, [pc, #36]	; (801e390 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801e36c:	e79f      	b.n	801e2ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e36e:	68c0      	ldr	r0, [r0, #12]
 801e370:	e7a1      	b.n	801e2b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e372:	781b      	ldrb	r3, [r3, #0]
 801e374:	2b00      	cmp	r3, #0
 801e376:	f47f af74 	bne.w	801e262 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e37a:	69c0      	ldr	r0, [r0, #28]
 801e37c:	e79b      	b.n	801e2b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e37e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801e380:	e799      	b.n	801e2b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e382:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801e384:	e797      	b.n	801e2b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e386:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801e388:	e795      	b.n	801e2b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e38a:	bf00      	nop
 801e38c:	0802a9e7 	.word	0x0802a9e7
 801e390:	0802b19b 	.word	0x0802b19b
 801e394:	0802aa33 	.word	0x0802aa33

0801e398 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801e398:	b508      	push	{r3, lr}
 801e39a:	4b06      	ldr	r3, [pc, #24]	; (801e3b4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801e39c:	8818      	ldrh	r0, [r3, #0]
 801e39e:	b928      	cbnz	r0, 801e3ac <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801e3a0:	4b05      	ldr	r3, [pc, #20]	; (801e3b8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801e3a2:	21d7      	movs	r1, #215	; 0xd7
 801e3a4:	4a05      	ldr	r2, [pc, #20]	; (801e3bc <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801e3a6:	4806      	ldr	r0, [pc, #24]	; (801e3c0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801e3a8:	f007 fec2 	bl	8026130 <__assert_func>
 801e3ac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e3b0:	b280      	uxth	r0, r0
 801e3b2:	bd08      	pop	{r3, pc}
 801e3b4:	2000c5ae 	.word	0x2000c5ae
 801e3b8:	0802ac82 	.word	0x0802ac82
 801e3bc:	0802b160 	.word	0x0802b160
 801e3c0:	0802acc4 	.word	0x0802acc4

0801e3c4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801e3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3c8:	4616      	mov	r6, r2
 801e3ca:	b087      	sub	sp, #28
 801e3cc:	461f      	mov	r7, r3
 801e3ce:	b33b      	cbz	r3, 801e420 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801e3d0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801e3d4:	b323      	cbz	r3, 801e420 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801e3d6:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801e3da:	b30b      	cbz	r3, 801e420 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801e3dc:	6808      	ldr	r0, [r1, #0]
 801e3de:	ab04      	add	r3, sp, #16
 801e3e0:	6849      	ldr	r1, [r1, #4]
 801e3e2:	4c5a      	ldr	r4, [pc, #360]	; (801e54c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801e3e4:	c303      	stmia	r3!, {r0, r1}
 801e3e6:	a804      	add	r0, sp, #16
 801e3e8:	f7fb fd6e 	bl	8019ec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e3ec:	6820      	ldr	r0, [r4, #0]
 801e3ee:	6803      	ldr	r3, [r0, #0]
 801e3f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e3f2:	4798      	blx	r3
 801e3f4:	2fff      	cmp	r7, #255	; 0xff
 801e3f6:	4623      	mov	r3, r4
 801e3f8:	d015      	beq.n	801e426 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801e3fa:	f010 0f08 	tst.w	r0, #8
 801e3fe:	d015      	beq.n	801e42c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 801e400:	6818      	ldr	r0, [r3, #0]
 801e402:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801e406:	6801      	ldr	r1, [r0, #0]
 801e408:	9401      	str	r4, [sp, #4]
 801e40a:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801e40e:	9702      	str	r7, [sp, #8]
 801e410:	9400      	str	r4, [sp, #0]
 801e412:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801e416:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 801e418:	4631      	mov	r1, r6
 801e41a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801e41e:	47a0      	blx	r4
 801e420:	b007      	add	sp, #28
 801e422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e426:	f010 0f02 	tst.w	r0, #2
 801e42a:	e7e8      	b.n	801e3fe <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3a>
 801e42c:	6818      	ldr	r0, [r3, #0]
 801e42e:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801e432:	6803      	ldr	r3, [r0, #0]
 801e434:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801e438:	6a1b      	ldr	r3, [r3, #32]
 801e43a:	4798      	blx	r3
 801e43c:	4944      	ldr	r1, [pc, #272]	; (801e550 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801e43e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801e442:	2fff      	cmp	r7, #255	; 0xff
 801e444:	f8b1 c000 	ldrh.w	ip, [r1]
 801e448:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 801e44c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801e450:	4688      	mov	r8, r1
 801e452:	fb0c 2303 	mla	r3, ip, r3, r2
 801e456:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 801e45a:	b2f2      	uxtb	r2, r6
 801e45c:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 801e460:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e464:	4418      	add	r0, r3
 801e466:	d112      	bne.n	801e48e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xca>
 801e468:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e46c:	2100      	movs	r1, #0
 801e46e:	42a9      	cmp	r1, r5
 801e470:	da66      	bge.n	801e540 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801e472:	4603      	mov	r3, r0
 801e474:	2700      	movs	r7, #0
 801e476:	42a7      	cmp	r7, r4
 801e478:	f103 0303 	add.w	r3, r3, #3
 801e47c:	da57      	bge.n	801e52e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16a>
 801e47e:	f803 2c03 	strb.w	r2, [r3, #-3]
 801e482:	3701      	adds	r7, #1
 801e484:	f803 ec02 	strb.w	lr, [r3, #-2]
 801e488:	f803 cc01 	strb.w	ip, [r3, #-1]
 801e48c:	e7f3      	b.n	801e476 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb2>
 801e48e:	b2bb      	uxth	r3, r7
 801e490:	f04f 0800 	mov.w	r8, #0
 801e494:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e498:	fb0c fc03 	mul.w	ip, ip, r3
 801e49c:	fb0e fe03 	mul.w	lr, lr, r3
 801e4a0:	435a      	muls	r2, r3
 801e4a2:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 801e4a6:	460f      	mov	r7, r1
 801e4a8:	b29b      	uxth	r3, r3
 801e4aa:	45a8      	cmp	r8, r5
 801e4ac:	da48      	bge.n	801e540 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801e4ae:	4601      	mov	r1, r0
 801e4b0:	f04f 0a00 	mov.w	sl, #0
 801e4b4:	45a2      	cmp	sl, r4
 801e4b6:	f101 0103 	add.w	r1, r1, #3
 801e4ba:	da2f      	bge.n	801e51c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x158>
 801e4bc:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 801e4c0:	f10a 0a01 	add.w	sl, sl, #1
 801e4c4:	fb19 f903 	smulbb	r9, r9, r3
 801e4c8:	4491      	add	r9, r2
 801e4ca:	fa1f f989 	uxth.w	r9, r9
 801e4ce:	f109 0b01 	add.w	fp, r9, #1
 801e4d2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e4d6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e4da:	f801 9c03 	strb.w	r9, [r1, #-3]
 801e4de:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 801e4e2:	fb19 f903 	smulbb	r9, r9, r3
 801e4e6:	44f1      	add	r9, lr
 801e4e8:	fa1f f989 	uxth.w	r9, r9
 801e4ec:	f109 0b01 	add.w	fp, r9, #1
 801e4f0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e4f4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e4f8:	f801 9c02 	strb.w	r9, [r1, #-2]
 801e4fc:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 801e500:	fb19 f903 	smulbb	r9, r9, r3
 801e504:	44e1      	add	r9, ip
 801e506:	fa1f f989 	uxth.w	r9, r9
 801e50a:	f109 0b01 	add.w	fp, r9, #1
 801e50e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e512:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e516:	f801 9c01 	strb.w	r9, [r1, #-1]
 801e51a:	e7cb      	b.n	801e4b4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf0>
 801e51c:	8839      	ldrh	r1, [r7, #0]
 801e51e:	f108 0801 	add.w	r8, r8, #1
 801e522:	1b09      	subs	r1, r1, r4
 801e524:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e528:	4431      	add	r1, r6
 801e52a:	4408      	add	r0, r1
 801e52c:	e7bd      	b.n	801e4aa <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe6>
 801e52e:	f8b8 3000 	ldrh.w	r3, [r8]
 801e532:	3101      	adds	r1, #1
 801e534:	1b1b      	subs	r3, r3, r4
 801e536:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e53a:	4433      	add	r3, r6
 801e53c:	4418      	add	r0, r3
 801e53e:	e796      	b.n	801e46e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 801e540:	4b02      	ldr	r3, [pc, #8]	; (801e54c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801e542:	6818      	ldr	r0, [r3, #0]
 801e544:	6803      	ldr	r3, [r0, #0]
 801e546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e548:	4798      	blx	r3
 801e54a:	e769      	b.n	801e420 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801e54c:	2000c5b4 	.word	0x2000c5b4
 801e550:	2000c5ae 	.word	0x2000c5ae

0801e554 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801e554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e558:	b08d      	sub	sp, #52	; 0x34
 801e55a:	460c      	mov	r4, r1
 801e55c:	4617      	mov	r7, r2
 801e55e:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 801e562:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 801e566:	2e00      	cmp	r6, #0
 801e568:	d04a      	beq.n	801e600 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801e56a:	6810      	ldr	r0, [r2, #0]
 801e56c:	ad08      	add	r5, sp, #32
 801e56e:	6851      	ldr	r1, [r2, #4]
 801e570:	c503      	stmia	r5!, {r0, r1}
 801e572:	6818      	ldr	r0, [r3, #0]
 801e574:	ad0a      	add	r5, sp, #40	; 0x28
 801e576:	6859      	ldr	r1, [r3, #4]
 801e578:	c503      	stmia	r5!, {r0, r1}
 801e57a:	a808      	add	r0, sp, #32
 801e57c:	f7fb fca4 	bl	8019ec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e580:	4639      	mov	r1, r7
 801e582:	a80a      	add	r0, sp, #40	; 0x28
 801e584:	4f59      	ldr	r7, [pc, #356]	; (801e6ec <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 801e586:	f7fb fc87 	bl	8019e98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e58a:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801e58e:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801e592:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801e596:	6838      	ldr	r0, [r7, #0]
 801e598:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e59c:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 801e5a0:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 801e5a4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e5a8:	440c      	add	r4, r1
 801e5aa:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801e5ae:	440a      	add	r2, r1
 801e5b0:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801e5b4:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801e5b8:	4413      	add	r3, r2
 801e5ba:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801e5be:	6803      	ldr	r3, [r0, #0]
 801e5c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e5c2:	4798      	blx	r3
 801e5c4:	2eff      	cmp	r6, #255	; 0xff
 801e5c6:	f000 8089 	beq.w	801e6dc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 801e5ca:	0743      	lsls	r3, r0, #29
 801e5cc:	d405      	bmi.n	801e5da <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 801e5ce:	f1b9 0f00 	cmp.w	r9, #0
 801e5d2:	d018      	beq.n	801e606 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801e5d4:	f010 0f10 	tst.w	r0, #16
 801e5d8:	d015      	beq.n	801e606 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801e5da:	6838      	ldr	r0, [r7, #0]
 801e5dc:	b2ad      	uxth	r5, r5
 801e5de:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801e5e2:	6801      	ldr	r1, [r0, #0]
 801e5e4:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801e5e8:	9500      	str	r5, [sp, #0]
 801e5ea:	e9cd 6903 	strd	r6, r9, [sp, #12]
 801e5ee:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801e5f2:	9602      	str	r6, [sp, #8]
 801e5f4:	fa1f f688 	uxth.w	r6, r8
 801e5f8:	9601      	str	r6, [sp, #4]
 801e5fa:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 801e5fc:	4621      	mov	r1, r4
 801e5fe:	47a8      	blx	r5
 801e600:	b00d      	add	sp, #52	; 0x34
 801e602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e606:	6838      	ldr	r0, [r7, #0]
 801e608:	6803      	ldr	r3, [r0, #0]
 801e60a:	6a1b      	ldr	r3, [r3, #32]
 801e60c:	4798      	blx	r3
 801e60e:	4a38      	ldr	r2, [pc, #224]	; (801e6f0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 801e610:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801e614:	2eff      	cmp	r6, #255	; 0xff
 801e616:	8813      	ldrh	r3, [r2, #0]
 801e618:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 801e61c:	fb0c 1303 	mla	r3, ip, r3, r1
 801e620:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801e624:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e628:	4418      	add	r0, r3
 801e62a:	d032      	beq.n	801e692 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801e62c:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 801e630:	f04f 0c00 	mov.w	ip, #0
 801e634:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 801e638:	9306      	str	r3, [sp, #24]
 801e63a:	45c4      	cmp	ip, r8
 801e63c:	da49      	bge.n	801e6d2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801e63e:	4686      	mov	lr, r0
 801e640:	46a1      	mov	r9, r4
 801e642:	eba9 0304 	sub.w	r3, r9, r4
 801e646:	428b      	cmp	r3, r1
 801e648:	da13      	bge.n	801e672 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 801e64a:	f819 3b01 	ldrb.w	r3, [r9], #1
 801e64e:	f89e b000 	ldrb.w	fp, [lr]
 801e652:	9307      	str	r3, [sp, #28]
 801e654:	9b06      	ldr	r3, [sp, #24]
 801e656:	fb1b fb03 	smulbb	fp, fp, r3
 801e65a:	9b07      	ldr	r3, [sp, #28]
 801e65c:	fb03 b306 	mla	r3, r3, r6, fp
 801e660:	b29b      	uxth	r3, r3
 801e662:	f103 0b01 	add.w	fp, r3, #1
 801e666:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 801e66a:	121b      	asrs	r3, r3, #8
 801e66c:	f80e 3b01 	strb.w	r3, [lr], #1
 801e670:	e7e7      	b.n	801e642 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 801e672:	8813      	ldrh	r3, [r2, #0]
 801e674:	f10c 0c01 	add.w	ip, ip, #1
 801e678:	1b5b      	subs	r3, r3, r5
 801e67a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e67e:	4453      	add	r3, sl
 801e680:	4418      	add	r0, r3
 801e682:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801e686:	1b5b      	subs	r3, r3, r5
 801e688:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e68c:	4453      	add	r3, sl
 801e68e:	441c      	add	r4, r3
 801e690:	e7d3      	b.n	801e63a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 801e692:	2600      	movs	r6, #0
 801e694:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 801e698:	4546      	cmp	r6, r8
 801e69a:	da1a      	bge.n	801e6d2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801e69c:	f100 3eff 	add.w	lr, r0, #4294967295
 801e6a0:	4623      	mov	r3, r4
 801e6a2:	eba3 0904 	sub.w	r9, r3, r4
 801e6a6:	4589      	cmp	r9, r1
 801e6a8:	da04      	bge.n	801e6b4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 801e6aa:	f813 9b01 	ldrb.w	r9, [r3], #1
 801e6ae:	f80e 9f01 	strb.w	r9, [lr, #1]!
 801e6b2:	e7f6      	b.n	801e6a2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 801e6b4:	8813      	ldrh	r3, [r2, #0]
 801e6b6:	3601      	adds	r6, #1
 801e6b8:	1b5b      	subs	r3, r3, r5
 801e6ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e6be:	4463      	add	r3, ip
 801e6c0:	4418      	add	r0, r3
 801e6c2:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801e6c6:	1b5b      	subs	r3, r3, r5
 801e6c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e6cc:	4463      	add	r3, ip
 801e6ce:	441c      	add	r4, r3
 801e6d0:	e7e2      	b.n	801e698 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 801e6d2:	6838      	ldr	r0, [r7, #0]
 801e6d4:	6803      	ldr	r3, [r0, #0]
 801e6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e6d8:	4798      	blx	r3
 801e6da:	e791      	b.n	801e600 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801e6dc:	f1b9 0f00 	cmp.w	r9, #0
 801e6e0:	f47f af78 	bne.w	801e5d4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 801e6e4:	f010 0f01 	tst.w	r0, #1
 801e6e8:	e776      	b.n	801e5d8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 801e6ea:	bf00      	nop
 801e6ec:	2000c5b4 	.word	0x2000c5b4
 801e6f0:	2000c5ae 	.word	0x2000c5ae

0801e6f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801e6f4:	b510      	push	{r4, lr}
 801e6f6:	4604      	mov	r4, r0
 801e6f8:	2104      	movs	r1, #4
 801e6fa:	f007 fceb 	bl	80260d4 <_ZdlPvj>
 801e6fe:	4620      	mov	r0, r4
 801e700:	bd10      	pop	{r4, pc}

0801e702 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801e702:	b510      	push	{r4, lr}
 801e704:	4604      	mov	r4, r0
 801e706:	2104      	movs	r1, #4
 801e708:	f007 fce4 	bl	80260d4 <_ZdlPvj>
 801e70c:	4620      	mov	r0, r4
 801e70e:	bd10      	pop	{r4, pc}

0801e710 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801e710:	b510      	push	{r4, lr}
 801e712:	4604      	mov	r4, r0
 801e714:	2104      	movs	r1, #4
 801e716:	f007 fcdd 	bl	80260d4 <_ZdlPvj>
 801e71a:	4620      	mov	r0, r4
 801e71c:	bd10      	pop	{r4, pc}

0801e71e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801e71e:	b510      	push	{r4, lr}
 801e720:	4604      	mov	r4, r0
 801e722:	2104      	movs	r1, #4
 801e724:	f007 fcd6 	bl	80260d4 <_ZdlPvj>
 801e728:	4620      	mov	r0, r4
 801e72a:	bd10      	pop	{r4, pc}

0801e72c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801e72c:	b510      	push	{r4, lr}
 801e72e:	4604      	mov	r4, r0
 801e730:	2104      	movs	r1, #4
 801e732:	f007 fccf 	bl	80260d4 <_ZdlPvj>
 801e736:	4620      	mov	r0, r4
 801e738:	bd10      	pop	{r4, pc}

0801e73a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801e73a:	b510      	push	{r4, lr}
 801e73c:	4604      	mov	r4, r0
 801e73e:	2104      	movs	r1, #4
 801e740:	f007 fcc8 	bl	80260d4 <_ZdlPvj>
 801e744:	4620      	mov	r0, r4
 801e746:	bd10      	pop	{r4, pc}

0801e748 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801e748:	b510      	push	{r4, lr}
 801e74a:	4604      	mov	r4, r0
 801e74c:	2104      	movs	r1, #4
 801e74e:	f007 fcc1 	bl	80260d4 <_ZdlPvj>
 801e752:	4620      	mov	r0, r4
 801e754:	bd10      	pop	{r4, pc}

0801e756 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801e756:	b510      	push	{r4, lr}
 801e758:	4604      	mov	r4, r0
 801e75a:	2104      	movs	r1, #4
 801e75c:	f007 fcba 	bl	80260d4 <_ZdlPvj>
 801e760:	4620      	mov	r0, r4
 801e762:	bd10      	pop	{r4, pc}

0801e764 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801e764:	b510      	push	{r4, lr}
 801e766:	4604      	mov	r4, r0
 801e768:	2104      	movs	r1, #4
 801e76a:	f007 fcb3 	bl	80260d4 <_ZdlPvj>
 801e76e:	4620      	mov	r0, r4
 801e770:	bd10      	pop	{r4, pc}

0801e772 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801e772:	b510      	push	{r4, lr}
 801e774:	4604      	mov	r4, r0
 801e776:	2104      	movs	r1, #4
 801e778:	f007 fcac 	bl	80260d4 <_ZdlPvj>
 801e77c:	4620      	mov	r0, r4
 801e77e:	bd10      	pop	{r4, pc}

0801e780 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801e780:	b510      	push	{r4, lr}
 801e782:	4604      	mov	r4, r0
 801e784:	2104      	movs	r1, #4
 801e786:	f007 fca5 	bl	80260d4 <_ZdlPvj>
 801e78a:	4620      	mov	r0, r4
 801e78c:	bd10      	pop	{r4, pc}

0801e78e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801e78e:	b510      	push	{r4, lr}
 801e790:	4604      	mov	r4, r0
 801e792:	2104      	movs	r1, #4
 801e794:	f007 fc9e 	bl	80260d4 <_ZdlPvj>
 801e798:	4620      	mov	r0, r4
 801e79a:	bd10      	pop	{r4, pc}

0801e79c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801e79c:	b510      	push	{r4, lr}
 801e79e:	4604      	mov	r4, r0
 801e7a0:	2104      	movs	r1, #4
 801e7a2:	f007 fc97 	bl	80260d4 <_ZdlPvj>
 801e7a6:	4620      	mov	r0, r4
 801e7a8:	bd10      	pop	{r4, pc}

0801e7aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801e7aa:	b510      	push	{r4, lr}
 801e7ac:	4604      	mov	r4, r0
 801e7ae:	2104      	movs	r1, #4
 801e7b0:	f007 fc90 	bl	80260d4 <_ZdlPvj>
 801e7b4:	4620      	mov	r0, r4
 801e7b6:	bd10      	pop	{r4, pc}

0801e7b8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801e7b8:	b510      	push	{r4, lr}
 801e7ba:	4604      	mov	r4, r0
 801e7bc:	2104      	movs	r1, #4
 801e7be:	f007 fc89 	bl	80260d4 <_ZdlPvj>
 801e7c2:	4620      	mov	r0, r4
 801e7c4:	bd10      	pop	{r4, pc}

0801e7c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801e7c6:	b510      	push	{r4, lr}
 801e7c8:	4604      	mov	r4, r0
 801e7ca:	2104      	movs	r1, #4
 801e7cc:	f007 fc82 	bl	80260d4 <_ZdlPvj>
 801e7d0:	4620      	mov	r0, r4
 801e7d2:	bd10      	pop	{r4, pc}

0801e7d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801e7d4:	b510      	push	{r4, lr}
 801e7d6:	4604      	mov	r4, r0
 801e7d8:	2104      	movs	r1, #4
 801e7da:	f007 fc7b 	bl	80260d4 <_ZdlPvj>
 801e7de:	4620      	mov	r0, r4
 801e7e0:	bd10      	pop	{r4, pc}

0801e7e2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801e7e2:	b510      	push	{r4, lr}
 801e7e4:	4604      	mov	r4, r0
 801e7e6:	2104      	movs	r1, #4
 801e7e8:	f007 fc74 	bl	80260d4 <_ZdlPvj>
 801e7ec:	4620      	mov	r0, r4
 801e7ee:	bd10      	pop	{r4, pc}

0801e7f0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801e7f0:	b510      	push	{r4, lr}
 801e7f2:	4604      	mov	r4, r0
 801e7f4:	2104      	movs	r1, #4
 801e7f6:	f007 fc6d 	bl	80260d4 <_ZdlPvj>
 801e7fa:	4620      	mov	r0, r4
 801e7fc:	bd10      	pop	{r4, pc}

0801e7fe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801e7fe:	b510      	push	{r4, lr}
 801e800:	4604      	mov	r4, r0
 801e802:	2104      	movs	r1, #4
 801e804:	f007 fc66 	bl	80260d4 <_ZdlPvj>
 801e808:	4620      	mov	r0, r4
 801e80a:	bd10      	pop	{r4, pc}

0801e80c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801e80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e810:	4d9e      	ldr	r5, [pc, #632]	; (801ea8c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801e812:	4690      	mov	r8, r2
 801e814:	b08f      	sub	sp, #60	; 0x3c
 801e816:	4604      	mov	r4, r0
 801e818:	682a      	ldr	r2, [r5, #0]
 801e81a:	4689      	mov	r9, r1
 801e81c:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801e820:	2a02      	cmp	r2, #2
 801e822:	d106      	bne.n	801e832 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801e824:	4b9a      	ldr	r3, [pc, #616]	; (801ea90 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801e826:	f44f 71cc 	mov.w	r1, #408	; 0x198
 801e82a:	4a9a      	ldr	r2, [pc, #616]	; (801ea94 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801e82c:	489a      	ldr	r0, [pc, #616]	; (801ea98 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 801e82e:	f007 fc7f 	bl	8026130 <__assert_func>
 801e832:	ae0e      	add	r6, sp, #56	; 0x38
 801e834:	f826 3d24 	strh.w	r3, [r6, #-36]!
 801e838:	4630      	mov	r0, r6
 801e83a:	f7fe f8b3 	bl	801c9a4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e83e:	6823      	ldr	r3, [r4, #0]
 801e840:	4607      	mov	r7, r0
 801e842:	4620      	mov	r0, r4
 801e844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e846:	4798      	blx	r3
 801e848:	4287      	cmp	r7, r0
 801e84a:	d004      	beq.n	801e856 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801e84c:	4b93      	ldr	r3, [pc, #588]	; (801ea9c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801e84e:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 801e852:	4a90      	ldr	r2, [pc, #576]	; (801ea94 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801e854:	e7ea      	b.n	801e82c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801e856:	4630      	mov	r0, r6
 801e858:	f7fe f820 	bl	801c89c <_ZNK8touchgfx6Bitmap7getDataEv>
 801e85c:	4607      	mov	r7, r0
 801e85e:	b920      	cbnz	r0, 801e86a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801e860:	4b8f      	ldr	r3, [pc, #572]	; (801eaa0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801e862:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 801e866:	4a8b      	ldr	r2, [pc, #556]	; (801ea94 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801e868:	e7e0      	b.n	801e82c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801e86a:	f8d8 0000 	ldr.w	r0, [r8]
 801e86e:	ab06      	add	r3, sp, #24
 801e870:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801e874:	f9b8 a000 	ldrsh.w	sl, [r8]
 801e878:	c303      	stmia	r3!, {r0, r1}
 801e87a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801e87e:	ab08      	add	r3, sp, #32
 801e880:	f8d9 0000 	ldr.w	r0, [r9]
 801e884:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801e888:	c303      	stmia	r3!, {r0, r1}
 801e88a:	4630      	mov	r0, r6
 801e88c:	f7fd fefe 	bl	801c68c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801e890:	4680      	mov	r8, r0
 801e892:	4630      	mov	r0, r6
 801e894:	4e83      	ldr	r6, [pc, #524]	; (801eaa4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 801e896:	f7fd ff33 	bl	801c700 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801e89a:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801e89e:	f10d 0920 	add.w	r9, sp, #32
 801e8a2:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801e8a6:	a806      	add	r0, sp, #24
 801e8a8:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801e8ac:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801e8b0:	f7fb fb0a 	bl	8019ec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e8b4:	4648      	mov	r0, r9
 801e8b6:	f7fb fb07 	bl	8019ec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e8ba:	a80a      	add	r0, sp, #40	; 0x28
 801e8bc:	f7fb fb04 	bl	8019ec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e8c0:	4b79      	ldr	r3, [pc, #484]	; (801eaa8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801e8c2:	2100      	movs	r1, #0
 801e8c4:	f9b6 2000 	ldrsh.w	r2, [r6]
 801e8c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e8cc:	4648      	mov	r0, r9
 801e8ce:	910c      	str	r1, [sp, #48]	; 0x30
 801e8d0:	a90c      	add	r1, sp, #48	; 0x30
 801e8d2:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801e8d6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801e8da:	f7f8 fac9 	bl	8016e70 <_ZN8touchgfx4RectaNERKS0_>
 801e8de:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801e8e2:	9602      	str	r6, [sp, #8]
 801e8e4:	f1bc 0f00 	cmp.w	ip, #0
 801e8e8:	f000 80a4 	beq.w	801ea34 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801e8ec:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801e8f0:	2e00      	cmp	r6, #0
 801e8f2:	f000 809f 	beq.w	801ea34 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801e8f6:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801e8fa:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801e8fe:	4288      	cmp	r0, r1
 801e900:	db36      	blt.n	801e970 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801e902:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801e906:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801e90a:	429a      	cmp	r2, r3
 801e90c:	db30      	blt.n	801e970 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801e90e:	4460      	add	r0, ip
 801e910:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801e914:	4461      	add	r1, ip
 801e916:	b200      	sxth	r0, r0
 801e918:	b209      	sxth	r1, r1
 801e91a:	4288      	cmp	r0, r1
 801e91c:	dc28      	bgt.n	801e970 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801e91e:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801e922:	4432      	add	r2, r6
 801e924:	440b      	add	r3, r1
 801e926:	b212      	sxth	r2, r2
 801e928:	b21b      	sxth	r3, r3
 801e92a:	429a      	cmp	r2, r3
 801e92c:	dc20      	bgt.n	801e970 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801e92e:	6823      	ldr	r3, [r4, #0]
 801e930:	4620      	mov	r0, r4
 801e932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e934:	4798      	blx	r3
 801e936:	4682      	mov	sl, r0
 801e938:	6828      	ldr	r0, [r5, #0]
 801e93a:	6803      	ldr	r3, [r0, #0]
 801e93c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e93e:	4798      	blx	r3
 801e940:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801e944:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801e948:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801e94c:	9303      	str	r3, [sp, #12]
 801e94e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801e952:	1a9b      	subs	r3, r3, r2
 801e954:	b29b      	uxth	r3, r3
 801e956:	b21c      	sxth	r4, r3
 801e958:	2c00      	cmp	r4, #0
 801e95a:	dc0e      	bgt.n	801e97a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 801e95c:	b134      	cbz	r4, 801e96c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 801e95e:	f8ad 2020 	strh.w	r2, [sp, #32]
 801e962:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801e966:	4413      	add	r3, r2
 801e968:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801e96c:	463c      	mov	r4, r7
 801e96e:	e00b      	b.n	801e988 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 801e970:	4b4e      	ldr	r3, [pc, #312]	; (801eaac <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 801e972:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801e976:	4a47      	ldr	r2, [pc, #284]	; (801ea94 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801e978:	e758      	b.n	801e82c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801e97a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e97e:	ebab 0303 	sub.w	r3, fp, r3
 801e982:	443c      	add	r4, r7
 801e984:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801e988:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801e98c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801e990:	1a9b      	subs	r3, r3, r2
 801e992:	b29b      	uxth	r3, r3
 801e994:	b219      	sxth	r1, r3
 801e996:	2900      	cmp	r1, #0
 801e998:	dd50      	ble.n	801ea3c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 801e99a:	9a03      	ldr	r2, [sp, #12]
 801e99c:	fb02 4401 	mla	r4, r2, r1, r4
 801e9a0:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801e9a4:	1ad3      	subs	r3, r2, r3
 801e9a6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801e9aa:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801e9ae:	f1bc 0f00 	cmp.w	ip, #0
 801e9b2:	dd3f      	ble.n	801ea34 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801e9b4:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801e9b8:	2e00      	cmp	r6, #0
 801e9ba:	dd3b      	ble.n	801ea34 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801e9bc:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801e9c0:	2203      	movs	r2, #3
 801e9c2:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801e9c6:	fb0a f801 	mul.w	r8, sl, r1
 801e9ca:	fb13 8802 	smlabb	r8, r3, r2, r8
 801e9ce:	9a02      	ldr	r2, [sp, #8]
 801e9d0:	4480      	add	r8, r0
 801e9d2:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801e9d6:	8812      	ldrh	r2, [r2, #0]
 801e9d8:	4584      	cmp	ip, r0
 801e9da:	eba2 0303 	sub.w	r3, r2, r3
 801e9de:	bfa8      	it	ge
 801e9e0:	4684      	movge	ip, r0
 801e9e2:	459c      	cmp	ip, r3
 801e9e4:	bfa8      	it	ge
 801e9e6:	469c      	movge	ip, r3
 801e9e8:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801e9ec:	429e      	cmp	r6, r3
 801e9ee:	bfa8      	it	ge
 801e9f0:	461e      	movge	r6, r3
 801e9f2:	4b2d      	ldr	r3, [pc, #180]	; (801eaa8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801e9f4:	881b      	ldrh	r3, [r3, #0]
 801e9f6:	1a59      	subs	r1, r3, r1
 801e9f8:	4633      	mov	r3, r6
 801e9fa:	428e      	cmp	r6, r1
 801e9fc:	bfa8      	it	ge
 801e9fe:	460b      	movge	r3, r1
 801ea00:	4562      	cmp	r2, ip
 801ea02:	9302      	str	r3, [sp, #8]
 801ea04:	d12d      	bne.n	801ea62 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801ea06:	455a      	cmp	r2, fp
 801ea08:	d12b      	bne.n	801ea62 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801ea0a:	6828      	ldr	r0, [r5, #0]
 801ea0c:	6803      	ldr	r3, [r0, #0]
 801ea0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ea10:	4798      	blx	r3
 801ea12:	07c3      	lsls	r3, r0, #31
 801ea14:	d51b      	bpl.n	801ea4e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 801ea16:	6828      	ldr	r0, [r5, #0]
 801ea18:	9b02      	ldr	r3, [sp, #8]
 801ea1a:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801ea1e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801ea22:	6803      	ldr	r3, [r0, #0]
 801ea24:	f8cd b000 	str.w	fp, [sp]
 801ea28:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801ea2a:	4623      	mov	r3, r4
 801ea2c:	e899 0006 	ldmia.w	r9, {r1, r2}
 801ea30:	47a8      	blx	r5
 801ea32:	4607      	mov	r7, r0
 801ea34:	4638      	mov	r0, r7
 801ea36:	b00f      	add	sp, #60	; 0x3c
 801ea38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea3c:	bf1f      	itttt	ne
 801ea3e:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801ea42:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801ea46:	189b      	addne	r3, r3, r2
 801ea48:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801ea4c:	e7ad      	b.n	801e9aa <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 801ea4e:	6828      	ldr	r0, [r5, #0]
 801ea50:	4642      	mov	r2, r8
 801ea52:	4621      	mov	r1, r4
 801ea54:	6803      	ldr	r3, [r0, #0]
 801ea56:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801ea58:	9b02      	ldr	r3, [sp, #8]
 801ea5a:	fb03 f30a 	mul.w	r3, r3, sl
 801ea5e:	47a8      	blx	r5
 801ea60:	e7e8      	b.n	801ea34 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801ea62:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 801ea66:	f04f 0900 	mov.w	r9, #0
 801ea6a:	9b02      	ldr	r3, [sp, #8]
 801ea6c:	454b      	cmp	r3, r9
 801ea6e:	dde1      	ble.n	801ea34 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801ea70:	6828      	ldr	r0, [r5, #0]
 801ea72:	4642      	mov	r2, r8
 801ea74:	4621      	mov	r1, r4
 801ea76:	44d0      	add	r8, sl
 801ea78:	6803      	ldr	r3, [r0, #0]
 801ea7a:	f109 0901 	add.w	r9, r9, #1
 801ea7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ea80:	461e      	mov	r6, r3
 801ea82:	465b      	mov	r3, fp
 801ea84:	47b0      	blx	r6
 801ea86:	9b03      	ldr	r3, [sp, #12]
 801ea88:	441c      	add	r4, r3
 801ea8a:	e7ee      	b.n	801ea6a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 801ea8c:	2000c5b4 	.word	0x2000c5b4
 801ea90:	0802aa65 	.word	0x0802aa65
 801ea94:	0802b245 	.word	0x0802b245
 801ea98:	0802aa33 	.word	0x0802aa33
 801ea9c:	0802ab19 	.word	0x0802ab19
 801eaa0:	0802ab6e 	.word	0x0802ab6e
 801eaa4:	2000c5ae 	.word	0x2000c5ae
 801eaa8:	2000c5b0 	.word	0x2000c5b0
 801eaac:	0802abac 	.word	0x0802abac

0801eab0 <_ZN8touchgfx8LCD24bppC1Ev>:
 801eab0:	4a0b      	ldr	r2, [pc, #44]	; (801eae0 <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 801eab2:	6002      	str	r2, [r0, #0]
 801eab4:	2200      	movs	r2, #0
 801eab6:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801eaba:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801eabe:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801eac2:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801eac6:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801eaca:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801eace:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801ead2:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801ead6:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801eada:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801eade:	4770      	bx	lr
 801eae0:	0802ae90 	.word	0x0802ae90

0801eae4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801eae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eae8:	b093      	sub	sp, #76	; 0x4c
 801eaea:	880c      	ldrh	r4, [r1, #0]
 801eaec:	4605      	mov	r5, r0
 801eaee:	460f      	mov	r7, r1
 801eaf0:	4691      	mov	r9, r2
 801eaf2:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 801eaf6:	b12c      	cbz	r4, 801eb04 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801eaf8:	4b71      	ldr	r3, [pc, #452]	; (801ecc0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801eafa:	2167      	movs	r1, #103	; 0x67
 801eafc:	4a71      	ldr	r2, [pc, #452]	; (801ecc4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801eafe:	4872      	ldr	r0, [pc, #456]	; (801ecc8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801eb00:	f007 fb16 	bl	8026130 <__assert_func>
 801eb04:	6810      	ldr	r0, [r2, #0]
 801eb06:	ae0e      	add	r6, sp, #56	; 0x38
 801eb08:	6851      	ldr	r1, [r2, #4]
 801eb0a:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 801ecd0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 801eb0e:	c603      	stmia	r6!, {r0, r1}
 801eb10:	6818      	ldr	r0, [r3, #0]
 801eb12:	ae10      	add	r6, sp, #64	; 0x40
 801eb14:	6859      	ldr	r1, [r3, #4]
 801eb16:	c603      	stmia	r6!, {r0, r1}
 801eb18:	a80e      	add	r0, sp, #56	; 0x38
 801eb1a:	f7fb f9d5 	bl	8019ec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801eb1e:	4649      	mov	r1, r9
 801eb20:	a810      	add	r0, sp, #64	; 0x40
 801eb22:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 801eccc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801eb26:	f7fb f9b7 	bl	8019e98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801eb2a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801eb2e:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801eb32:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801eb36:	f8d9 0000 	ldr.w	r0, [r9]
 801eb3a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801eb3e:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 801eb42:	440d      	add	r5, r1
 801eb44:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801eb48:	440a      	add	r2, r1
 801eb4a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801eb4e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801eb52:	4413      	add	r3, r2
 801eb54:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801eb58:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 801eb5c:	930b      	str	r3, [sp, #44]	; 0x2c
 801eb5e:	6803      	ldr	r3, [r0, #0]
 801eb60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801eb64:	4798      	blx	r3
 801eb66:	2801      	cmp	r0, #1
 801eb68:	d11e      	bne.n	801eba8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 801eb6a:	220b      	movs	r2, #11
 801eb6c:	9008      	str	r0, [sp, #32]
 801eb6e:	b2b6      	uxth	r6, r6
 801eb70:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801eb74:	9207      	str	r2, [sp, #28]
 801eb76:	4629      	mov	r1, r5
 801eb78:	f8ba 2000 	ldrh.w	r2, [sl]
 801eb7c:	f8cd 8010 	str.w	r8, [sp, #16]
 801eb80:	9601      	str	r6, [sp, #4]
 801eb82:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801eb86:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801eb8a:	9203      	str	r2, [sp, #12]
 801eb8c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801eb90:	9202      	str	r2, [sp, #8]
 801eb92:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801eb96:	9200      	str	r2, [sp, #0]
 801eb98:	463a      	mov	r2, r7
 801eb9a:	f8d9 0000 	ldr.w	r0, [r9]
 801eb9e:	f7f8 fdb5 	bl	801770c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801eba2:	b013      	add	sp, #76	; 0x4c
 801eba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eba8:	f8d9 0000 	ldr.w	r0, [r9]
 801ebac:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 801ebb0:	6803      	ldr	r3, [r0, #0]
 801ebb2:	6a1b      	ldr	r3, [r3, #32]
 801ebb4:	4798      	blx	r3
 801ebb6:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801ebba:	f8ba 3000 	ldrh.w	r3, [sl]
 801ebbe:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801ebc2:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801ebc6:	fb01 2303 	mla	r3, r1, r3, r2
 801ebca:	4621      	mov	r1, r4
 801ebcc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ebd0:	4418      	add	r0, r3
 801ebd2:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 801ebd6:	930c      	str	r3, [sp, #48]	; 0x30
 801ebd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ebda:	4299      	cmp	r1, r3
 801ebdc:	da6a      	bge.n	801ecb4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801ebde:	1cc2      	adds	r2, r0, #3
 801ebe0:	46aa      	mov	sl, r5
 801ebe2:	ebaa 0305 	sub.w	r3, sl, r5
 801ebe6:	429e      	cmp	r6, r3
 801ebe8:	dd55      	ble.n	801ec96 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 801ebea:	2404      	movs	r4, #4
 801ebec:	f81a 3b01 	ldrb.w	r3, [sl], #1
 801ebf0:	fb14 4303 	smlabb	r3, r4, r3, r4
 801ebf4:	eb07 0e03 	add.w	lr, r7, r3
 801ebf8:	f89e 4003 	ldrb.w	r4, [lr, #3]
 801ebfc:	b184      	cbz	r4, 801ec20 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801ebfe:	2cff      	cmp	r4, #255	; 0xff
 801ec00:	f817 b003 	ldrb.w	fp, [r7, r3]
 801ec04:	d10e      	bne.n	801ec24 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801ec06:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801ec0a:	d10b      	bne.n	801ec24 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801ec0c:	f802 bc03 	strb.w	fp, [r2, #-3]
 801ec10:	f89e 3001 	ldrb.w	r3, [lr, #1]
 801ec14:	f802 3c02 	strb.w	r3, [r2, #-2]
 801ec18:	f89e 3002 	ldrb.w	r3, [lr, #2]
 801ec1c:	f802 3c01 	strb.w	r3, [r2, #-1]
 801ec20:	3203      	adds	r2, #3
 801ec22:	e7de      	b.n	801ebe2 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 801ec24:	fb08 f404 	mul.w	r4, r8, r4
 801ec28:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 801ec2c:	1c63      	adds	r3, r4, #1
 801ec2e:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801ec32:	121b      	asrs	r3, r3, #8
 801ec34:	b29c      	uxth	r4, r3
 801ec36:	43db      	mvns	r3, r3
 801ec38:	fb1b fb04 	smulbb	fp, fp, r4
 801ec3c:	b2db      	uxtb	r3, r3
 801ec3e:	fb0c bc03 	mla	ip, ip, r3, fp
 801ec42:	fa1f fc8c 	uxth.w	ip, ip
 801ec46:	f10c 0b01 	add.w	fp, ip, #1
 801ec4a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801ec4e:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 801ec52:	fb1b fb03 	smulbb	fp, fp, r3
 801ec56:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ec5a:	f802 cc03 	strb.w	ip, [r2, #-3]
 801ec5e:	f89e c001 	ldrb.w	ip, [lr, #1]
 801ec62:	fb0c bc04 	mla	ip, ip, r4, fp
 801ec66:	fa1f fc8c 	uxth.w	ip, ip
 801ec6a:	f10c 0b01 	add.w	fp, ip, #1
 801ec6e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801ec72:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ec76:	f802 cc02 	strb.w	ip, [r2, #-2]
 801ec7a:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 801ec7e:	f89e e002 	ldrb.w	lr, [lr, #2]
 801ec82:	fb1c f303 	smulbb	r3, ip, r3
 801ec86:	fb0e 3304 	mla	r3, lr, r4, r3
 801ec8a:	b29b      	uxth	r3, r3
 801ec8c:	1c5c      	adds	r4, r3, #1
 801ec8e:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801ec92:	121b      	asrs	r3, r3, #8
 801ec94:	e7c2      	b.n	801ec1c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801ec96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ec98:	3101      	adds	r1, #1
 801ec9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ec9c:	881b      	ldrh	r3, [r3, #0]
 801ec9e:	1b9b      	subs	r3, r3, r6
 801eca0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eca4:	4413      	add	r3, r2
 801eca6:	4418      	add	r0, r3
 801eca8:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801ecac:	1b9b      	subs	r3, r3, r6
 801ecae:	444b      	add	r3, r9
 801ecb0:	441d      	add	r5, r3
 801ecb2:	e791      	b.n	801ebd8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801ecb4:	4b05      	ldr	r3, [pc, #20]	; (801eccc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 801ecb6:	6818      	ldr	r0, [r3, #0]
 801ecb8:	6803      	ldr	r3, [r0, #0]
 801ecba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ecbc:	4798      	blx	r3
 801ecbe:	e770      	b.n	801eba2 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801ecc0:	0802a997 	.word	0x0802a997
 801ecc4:	0802b067 	.word	0x0802b067
 801ecc8:	0802aa33 	.word	0x0802aa33
 801eccc:	2000c5b4 	.word	0x2000c5b4
 801ecd0:	2000c5ae 	.word	0x2000c5ae

0801ecd4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801ecd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ecd8:	4614      	mov	r4, r2
 801ecda:	880a      	ldrh	r2, [r1, #0]
 801ecdc:	b091      	sub	sp, #68	; 0x44
 801ecde:	4680      	mov	r8, r0
 801ece0:	2a01      	cmp	r2, #1
 801ece2:	460e      	mov	r6, r1
 801ece4:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801ece8:	d005      	beq.n	801ecf6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 801ecea:	4b6d      	ldr	r3, [pc, #436]	; (801eea0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 801ecec:	21b5      	movs	r1, #181	; 0xb5
 801ecee:	4a6d      	ldr	r2, [pc, #436]	; (801eea4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 801ecf0:	486d      	ldr	r0, [pc, #436]	; (801eea8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801ecf2:	f007 fa1d 	bl	8026130 <__assert_func>
 801ecf6:	6820      	ldr	r0, [r4, #0]
 801ecf8:	ad0c      	add	r5, sp, #48	; 0x30
 801ecfa:	6861      	ldr	r1, [r4, #4]
 801ecfc:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 801eeac <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 801ed00:	c503      	stmia	r5!, {r0, r1}
 801ed02:	6818      	ldr	r0, [r3, #0]
 801ed04:	ad0e      	add	r5, sp, #56	; 0x38
 801ed06:	6859      	ldr	r1, [r3, #4]
 801ed08:	c503      	stmia	r5!, {r0, r1}
 801ed0a:	a80c      	add	r0, sp, #48	; 0x30
 801ed0c:	f7fb f8dc 	bl	8019ec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ed10:	4621      	mov	r1, r4
 801ed12:	a80e      	add	r0, sp, #56	; 0x38
 801ed14:	f7fb f8c0 	bl	8019e98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ed18:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801ed1c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801ed20:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801ed24:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 801ed28:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ed2c:	eb08 0401 	add.w	r4, r8, r1
 801ed30:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801ed34:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801eeb0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 801ed38:	440a      	add	r2, r1
 801ed3a:	f8d8 0000 	ldr.w	r0, [r8]
 801ed3e:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801ed42:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801ed46:	4413      	add	r3, r2
 801ed48:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801ed4c:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801ed50:	930a      	str	r3, [sp, #40]	; 0x28
 801ed52:	6803      	ldr	r3, [r0, #0]
 801ed54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ed58:	4798      	blx	r3
 801ed5a:	2801      	cmp	r0, #1
 801ed5c:	d11e      	bne.n	801ed9c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 801ed5e:	220b      	movs	r2, #11
 801ed60:	9008      	str	r0, [sp, #32]
 801ed62:	b2ad      	uxth	r5, r5
 801ed64:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801ed68:	9207      	str	r2, [sp, #28]
 801ed6a:	4621      	mov	r1, r4
 801ed6c:	f8b9 2000 	ldrh.w	r2, [r9]
 801ed70:	9501      	str	r5, [sp, #4]
 801ed72:	9206      	str	r2, [sp, #24]
 801ed74:	2200      	movs	r2, #0
 801ed76:	e9cd 7204 	strd	r7, r2, [sp, #16]
 801ed7a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801ed7e:	9203      	str	r2, [sp, #12]
 801ed80:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801ed84:	9202      	str	r2, [sp, #8]
 801ed86:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801ed8a:	9200      	str	r2, [sp, #0]
 801ed8c:	4632      	mov	r2, r6
 801ed8e:	f8d8 0000 	ldr.w	r0, [r8]
 801ed92:	f7f8 fcbb 	bl	801770c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801ed96:	b011      	add	sp, #68	; 0x44
 801ed98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed9c:	f8d8 0000 	ldr.w	r0, [r8]
 801eda0:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 801eda4:	6803      	ldr	r3, [r0, #0]
 801eda6:	6a1b      	ldr	r3, [r3, #32]
 801eda8:	4798      	blx	r3
 801edaa:	f8b9 3000 	ldrh.w	r3, [r9]
 801edae:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801edb2:	f04f 0e00 	mov.w	lr, #0
 801edb6:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801edba:	fa1f f987 	uxth.w	r9, r7
 801edbe:	fb01 2303 	mla	r3, r1, r3, r2
 801edc2:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 801edc6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801edca:	b289      	uxth	r1, r1
 801edcc:	4418      	add	r0, r3
 801edce:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801edd2:	930b      	str	r3, [sp, #44]	; 0x2c
 801edd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801edd6:	459e      	cmp	lr, r3
 801edd8:	da5c      	bge.n	801ee94 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 801edda:	1cc3      	adds	r3, r0, #3
 801eddc:	46a2      	mov	sl, r4
 801edde:	ebaa 0204 	sub.w	r2, sl, r4
 801ede2:	4295      	cmp	r5, r2
 801ede4:	dd46      	ble.n	801ee74 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 801ede6:	f04f 0c03 	mov.w	ip, #3
 801edea:	f04f 0b04 	mov.w	fp, #4
 801edee:	f81a 2b01 	ldrb.w	r2, [sl], #1
 801edf2:	2fff      	cmp	r7, #255	; 0xff
 801edf4:	fb1c b202 	smlabb	r2, ip, r2, fp
 801edf8:	eb06 0c02 	add.w	ip, r6, r2
 801edfc:	f816 b002 	ldrb.w	fp, [r6, r2]
 801ee00:	d02f      	beq.n	801ee62 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 801ee02:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801ee06:	fb12 f201 	smulbb	r2, r2, r1
 801ee0a:	fb0b 2209 	mla	r2, fp, r9, r2
 801ee0e:	b292      	uxth	r2, r2
 801ee10:	f102 0b01 	add.w	fp, r2, #1
 801ee14:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801ee18:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 801ee1c:	fb1b fb01 	smulbb	fp, fp, r1
 801ee20:	1212      	asrs	r2, r2, #8
 801ee22:	f803 2c03 	strb.w	r2, [r3, #-3]
 801ee26:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801ee2a:	fb02 b209 	mla	r2, r2, r9, fp
 801ee2e:	b292      	uxth	r2, r2
 801ee30:	f102 0b01 	add.w	fp, r2, #1
 801ee34:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801ee38:	1212      	asrs	r2, r2, #8
 801ee3a:	f803 2c02 	strb.w	r2, [r3, #-2]
 801ee3e:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801ee42:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 801ee46:	fb1c fc01 	smulbb	ip, ip, r1
 801ee4a:	fb02 c209 	mla	r2, r2, r9, ip
 801ee4e:	b292      	uxth	r2, r2
 801ee50:	f102 0c01 	add.w	ip, r2, #1
 801ee54:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801ee58:	1212      	asrs	r2, r2, #8
 801ee5a:	f803 2c01 	strb.w	r2, [r3, #-1]
 801ee5e:	3303      	adds	r3, #3
 801ee60:	e7bd      	b.n	801edde <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 801ee62:	f803 bc03 	strb.w	fp, [r3, #-3]
 801ee66:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801ee6a:	f803 2c02 	strb.w	r2, [r3, #-2]
 801ee6e:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801ee72:	e7f2      	b.n	801ee5a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 801ee74:	4b0d      	ldr	r3, [pc, #52]	; (801eeac <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801ee76:	f10e 0e01 	add.w	lr, lr, #1
 801ee7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ee7c:	881b      	ldrh	r3, [r3, #0]
 801ee7e:	1b5b      	subs	r3, r3, r5
 801ee80:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ee84:	4413      	add	r3, r2
 801ee86:	4418      	add	r0, r3
 801ee88:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801ee8c:	1b5b      	subs	r3, r3, r5
 801ee8e:	4443      	add	r3, r8
 801ee90:	441c      	add	r4, r3
 801ee92:	e79f      	b.n	801edd4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 801ee94:	4b06      	ldr	r3, [pc, #24]	; (801eeb0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801ee96:	6818      	ldr	r0, [r3, #0]
 801ee98:	6803      	ldr	r3, [r0, #0]
 801ee9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ee9c:	4798      	blx	r3
 801ee9e:	e77a      	b.n	801ed96 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 801eea0:	0802a8a3 	.word	0x0802a8a3
 801eea4:	0802af5a 	.word	0x0802af5a
 801eea8:	0802aa33 	.word	0x0802aa33
 801eeac:	2000c5ae 	.word	0x2000c5ae
 801eeb0:	2000c5b4 	.word	0x2000c5b4

0801eeb4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801eeb4:	b570      	push	{r4, r5, r6, lr}
 801eeb6:	780d      	ldrb	r5, [r1, #0]
 801eeb8:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801eebc:	2d01      	cmp	r5, #1
 801eebe:	d00d      	beq.n	801eedc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 801eec0:	d307      	bcc.n	801eed2 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 801eec2:	2d02      	cmp	r5, #2
 801eec4:	d10f      	bne.n	801eee6 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801eec6:	4b08      	ldr	r3, [pc, #32]	; (801eee8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801eec8:	215a      	movs	r1, #90	; 0x5a
 801eeca:	4a08      	ldr	r2, [pc, #32]	; (801eeec <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801eecc:	4808      	ldr	r0, [pc, #32]	; (801eef0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801eece:	f007 f92f 	bl	8026130 <__assert_func>
 801eed2:	9404      	str	r4, [sp, #16]
 801eed4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801eed8:	f7ff be04 	b.w	801eae4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801eedc:	9404      	str	r4, [sp, #16]
 801eede:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801eee2:	f7ff bef7 	b.w	801ecd4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801eee6:	bd70      	pop	{r4, r5, r6, pc}
 801eee8:	0802a858 	.word	0x0802a858
 801eeec:	0802aed8 	.word	0x0802aed8
 801eef0:	0802aa33 	.word	0x0802aa33

0801eef4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801eef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eef8:	b08b      	sub	sp, #44	; 0x2c
 801eefa:	460c      	mov	r4, r1
 801eefc:	4680      	mov	r8, r0
 801eefe:	469a      	mov	sl, r3
 801ef00:	6808      	ldr	r0, [r1, #0]
 801ef02:	ab06      	add	r3, sp, #24
 801ef04:	6849      	ldr	r1, [r1, #4]
 801ef06:	c303      	stmia	r3!, {r0, r1}
 801ef08:	6810      	ldr	r0, [r2, #0]
 801ef0a:	ab08      	add	r3, sp, #32
 801ef0c:	6851      	ldr	r1, [r2, #4]
 801ef0e:	c303      	stmia	r3!, {r0, r1}
 801ef10:	a806      	add	r0, sp, #24
 801ef12:	f7fa ffd9 	bl	8019ec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ef16:	4621      	mov	r1, r4
 801ef18:	a808      	add	r0, sp, #32
 801ef1a:	4c61      	ldr	r4, [pc, #388]	; (801f0a0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801ef1c:	f7fa ffbc 	bl	8019e98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ef20:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801ef24:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801ef28:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801ef2c:	6820      	ldr	r0, [r4, #0]
 801ef2e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ef32:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 801ef36:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 801ef3a:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 801ef3e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801ef42:	440a      	add	r2, r1
 801ef44:	f8ad 2020 	strh.w	r2, [sp, #32]
 801ef48:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801ef4c:	4413      	add	r3, r2
 801ef4e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801ef52:	6803      	ldr	r3, [r0, #0]
 801ef54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ef56:	4798      	blx	r3
 801ef58:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801ef5c:	d118      	bne.n	801ef90 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801ef5e:	f010 0f20 	tst.w	r0, #32
 801ef62:	6820      	ldr	r0, [r4, #0]
 801ef64:	d017      	beq.n	801ef96 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801ef66:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801ef6a:	b2bf      	uxth	r7, r7
 801ef6c:	6801      	ldr	r1, [r0, #0]
 801ef6e:	9402      	str	r4, [sp, #8]
 801ef70:	fa1f f489 	uxth.w	r4, r9
 801ef74:	f8cd a00c 	str.w	sl, [sp, #12]
 801ef78:	9401      	str	r4, [sp, #4]
 801ef7a:	9700      	str	r7, [sp, #0]
 801ef7c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801ef80:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801ef82:	4641      	mov	r1, r8
 801ef84:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801ef88:	47a0      	blx	r4
 801ef8a:	b00b      	add	sp, #44	; 0x2c
 801ef8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef90:	f010 0f40 	tst.w	r0, #64	; 0x40
 801ef94:	e7e5      	b.n	801ef62 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801ef96:	6803      	ldr	r3, [r0, #0]
 801ef98:	6a1b      	ldr	r3, [r3, #32]
 801ef9a:	4798      	blx	r3
 801ef9c:	4b41      	ldr	r3, [pc, #260]	; (801f0a4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 801ef9e:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801efa2:	f04f 0c00 	mov.w	ip, #0
 801efa6:	881a      	ldrh	r2, [r3, #0]
 801efa8:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801efac:	fb04 1202 	mla	r2, r4, r2, r1
 801efb0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801efb4:	4410      	add	r0, r2
 801efb6:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 801efba:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801efbe:	0092      	lsls	r2, r2, #2
 801efc0:	9105      	str	r1, [sp, #20]
 801efc2:	9204      	str	r2, [sp, #16]
 801efc4:	45cc      	cmp	ip, r9
 801efc6:	da65      	bge.n	801f094 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 801efc8:	1cc4      	adds	r4, r0, #3
 801efca:	f108 0504 	add.w	r5, r8, #4
 801efce:	f04f 0e00 	mov.w	lr, #0
 801efd2:	45be      	cmp	lr, r7
 801efd4:	da4d      	bge.n	801f072 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 801efd6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801efda:	b181      	cbz	r1, 801effe <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801efdc:	29ff      	cmp	r1, #255	; 0xff
 801efde:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 801efe2:	d111      	bne.n	801f008 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801efe4:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801efe8:	d10e      	bne.n	801f008 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801efea:	f804 bc03 	strb.w	fp, [r4, #-3]
 801efee:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 801eff2:	f804 2c02 	strb.w	r2, [r4, #-2]
 801eff6:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 801effa:	f804 2c01 	strb.w	r2, [r4, #-1]
 801effe:	f10e 0e01 	add.w	lr, lr, #1
 801f002:	3403      	adds	r4, #3
 801f004:	3504      	adds	r5, #4
 801f006:	e7e4      	b.n	801efd2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801f008:	fb0a f101 	mul.w	r1, sl, r1
 801f00c:	1c4a      	adds	r2, r1, #1
 801f00e:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801f012:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801f016:	1212      	asrs	r2, r2, #8
 801f018:	b296      	uxth	r6, r2
 801f01a:	43d2      	mvns	r2, r2
 801f01c:	fb1b fb06 	smulbb	fp, fp, r6
 801f020:	b2d2      	uxtb	r2, r2
 801f022:	fb01 b102 	mla	r1, r1, r2, fp
 801f026:	b289      	uxth	r1, r1
 801f028:	f101 0b01 	add.w	fp, r1, #1
 801f02c:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801f030:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 801f034:	fb1b fb02 	smulbb	fp, fp, r2
 801f038:	1209      	asrs	r1, r1, #8
 801f03a:	f804 1c03 	strb.w	r1, [r4, #-3]
 801f03e:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 801f042:	fb01 b106 	mla	r1, r1, r6, fp
 801f046:	b289      	uxth	r1, r1
 801f048:	f101 0b01 	add.w	fp, r1, #1
 801f04c:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801f050:	1209      	asrs	r1, r1, #8
 801f052:	f804 1c02 	strb.w	r1, [r4, #-2]
 801f056:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801f05a:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801f05e:	fb11 f202 	smulbb	r2, r1, r2
 801f062:	fb0b 2206 	mla	r2, fp, r6, r2
 801f066:	b292      	uxth	r2, r2
 801f068:	1c56      	adds	r6, r2, #1
 801f06a:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801f06e:	1212      	asrs	r2, r2, #8
 801f070:	e7c3      	b.n	801effa <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801f072:	881a      	ldrh	r2, [r3, #0]
 801f074:	f10c 0c01 	add.w	ip, ip, #1
 801f078:	9905      	ldr	r1, [sp, #20]
 801f07a:	1bd2      	subs	r2, r2, r7
 801f07c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f080:	440a      	add	r2, r1
 801f082:	9904      	ldr	r1, [sp, #16]
 801f084:	4410      	add	r0, r2
 801f086:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801f08a:	1bd2      	subs	r2, r2, r7
 801f08c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801f090:	4490      	add	r8, r2
 801f092:	e797      	b.n	801efc4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 801f094:	4b02      	ldr	r3, [pc, #8]	; (801f0a0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801f096:	6818      	ldr	r0, [r3, #0]
 801f098:	6803      	ldr	r3, [r0, #0]
 801f09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f09c:	4798      	blx	r3
 801f09e:	e774      	b.n	801ef8a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801f0a0:	2000c5b4 	.word	0x2000c5b4
 801f0a4:	2000c5ae 	.word	0x2000c5ae

0801f0a8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801f0a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f0ac:	b085      	sub	sp, #20
 801f0ae:	4606      	mov	r6, r0
 801f0b0:	460c      	mov	r4, r1
 801f0b2:	4691      	mov	r9, r2
 801f0b4:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801f0b8:	4698      	mov	r8, r3
 801f0ba:	b385      	cbz	r5, 801f11e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801f0bc:	4608      	mov	r0, r1
 801f0be:	f7fd fae5 	bl	801c68c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801f0c2:	4607      	mov	r7, r0
 801f0c4:	4620      	mov	r0, r4
 801f0c6:	f7fd fb1b 	bl	801c700 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801f0ca:	f8ad 000e 	strh.w	r0, [sp, #14]
 801f0ce:	4620      	mov	r0, r4
 801f0d0:	f8ad 9008 	strh.w	r9, [sp, #8]
 801f0d4:	f8ad 800a 	strh.w	r8, [sp, #10]
 801f0d8:	f8ad 700c 	strh.w	r7, [sp, #12]
 801f0dc:	f7fd fc62 	bl	801c9a4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f0e0:	2801      	cmp	r0, #1
 801f0e2:	d00f      	beq.n	801f104 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801f0e4:	4620      	mov	r0, r4
 801f0e6:	f7fd fc5d 	bl	801c9a4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f0ea:	2802      	cmp	r0, #2
 801f0ec:	d00a      	beq.n	801f104 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801f0ee:	4620      	mov	r0, r4
 801f0f0:	f7fd fc58 	bl	801c9a4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f0f4:	280b      	cmp	r0, #11
 801f0f6:	d005      	beq.n	801f104 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801f0f8:	4b1b      	ldr	r3, [pc, #108]	; (801f168 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 801f0fa:	2142      	movs	r1, #66	; 0x42
 801f0fc:	4a1b      	ldr	r2, [pc, #108]	; (801f16c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 801f0fe:	481c      	ldr	r0, [pc, #112]	; (801f170 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc8>)
 801f100:	f007 f816 	bl	8026130 <__assert_func>
 801f104:	4620      	mov	r0, r4
 801f106:	f7fd fc4d 	bl	801c9a4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f10a:	2802      	cmp	r0, #2
 801f10c:	4620      	mov	r0, r4
 801f10e:	d109      	bne.n	801f124 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7c>
 801f110:	f7fd fbc4 	bl	801c89c <_ZNK8touchgfx6Bitmap7getDataEv>
 801f114:	462b      	mov	r3, r5
 801f116:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f118:	a902      	add	r1, sp, #8
 801f11a:	f7ff feeb 	bl	801eef4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801f11e:	b005      	add	sp, #20
 801f120:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f124:	f7fd fc3e 	bl	801c9a4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f128:	280b      	cmp	r0, #11
 801f12a:	d10e      	bne.n	801f14a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 801f12c:	4620      	mov	r0, r4
 801f12e:	f7fd fbb5 	bl	801c89c <_ZNK8touchgfx6Bitmap7getDataEv>
 801f132:	4606      	mov	r6, r0
 801f134:	4620      	mov	r0, r4
 801f136:	f7fd fbe3 	bl	801c900 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801f13a:	9500      	str	r5, [sp, #0]
 801f13c:	4601      	mov	r1, r0
 801f13e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f140:	aa02      	add	r2, sp, #8
 801f142:	4630      	mov	r0, r6
 801f144:	f7ff feb6 	bl	801eeb4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801f148:	e7e9      	b.n	801f11e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801f14a:	6833      	ldr	r3, [r6, #0]
 801f14c:	4620      	mov	r0, r4
 801f14e:	691f      	ldr	r7, [r3, #16]
 801f150:	f7fd fba4 	bl	801c89c <_ZNK8touchgfx6Bitmap7getDataEv>
 801f154:	2300      	movs	r3, #0
 801f156:	4601      	mov	r1, r0
 801f158:	aa02      	add	r2, sp, #8
 801f15a:	4630      	mov	r0, r6
 801f15c:	e9cd 5300 	strd	r5, r3, [sp]
 801f160:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f162:	47b8      	blx	r7
 801f164:	e7db      	b.n	801f11e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801f166:	bf00      	nop
 801f168:	0802a8f1 	.word	0x0802a8f1
 801f16c:	0802afe3 	.word	0x0802afe3
 801f170:	0802aa33 	.word	0x0802aa33

0801f174 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801f174:	b570      	push	{r4, r5, r6, lr}
 801f176:	9d04      	ldr	r5, [sp, #16]
 801f178:	460c      	mov	r4, r1
 801f17a:	4619      	mov	r1, r3
 801f17c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801f180:	2a0c      	cmp	r2, #12
 801f182:	d826      	bhi.n	801f1d2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 801f184:	e8df f002 	tbb	[pc, r2]
 801f188:	200e1407 	.word	0x200e1407
 801f18c:	20202020 	.word	0x20202020
 801f190:	20202020 	.word	0x20202020
 801f194:	20          	.byte	0x20
 801f195:	00          	.byte	0x00
 801f196:	4b0f      	ldr	r3, [pc, #60]	; (801f1d4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801f198:	f240 117f 	movw	r1, #383	; 0x17f
 801f19c:	4a0e      	ldr	r2, [pc, #56]	; (801f1d8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801f19e:	480f      	ldr	r0, [pc, #60]	; (801f1dc <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801f1a0:	f006 ffc6 	bl	8026130 <__assert_func>
 801f1a4:	462a      	mov	r2, r5
 801f1a6:	4620      	mov	r0, r4
 801f1a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f1ac:	f7ff bea2 	b.w	801eef4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801f1b0:	6802      	ldr	r2, [r0, #0]
 801f1b2:	2600      	movs	r6, #0
 801f1b4:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801f1b8:	6916      	ldr	r6, [r2, #16]
 801f1ba:	462b      	mov	r3, r5
 801f1bc:	460a      	mov	r2, r1
 801f1be:	4621      	mov	r1, r4
 801f1c0:	46b4      	mov	ip, r6
 801f1c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f1c6:	4760      	bx	ip
 801f1c8:	4b05      	ldr	r3, [pc, #20]	; (801f1e0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801f1ca:	f240 1191 	movw	r1, #401	; 0x191
 801f1ce:	4a02      	ldr	r2, [pc, #8]	; (801f1d8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801f1d0:	e7e5      	b.n	801f19e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 801f1d2:	bd70      	pop	{r4, r5, r6, pc}
 801f1d4:	0802ac0c 	.word	0x0802ac0c
 801f1d8:	0802b2cb 	.word	0x0802b2cb
 801f1dc:	0802aa33 	.word	0x0802aa33
 801f1e0:	0802ac4d 	.word	0x0802ac4d

0801f1e4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801f1e4:	b158      	cbz	r0, 801f1fe <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801f1e6:	2902      	cmp	r1, #2
 801f1e8:	d00f      	beq.n	801f20a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801f1ea:	2903      	cmp	r1, #3
 801f1ec:	d010      	beq.n	801f210 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801f1ee:	2901      	cmp	r1, #1
 801f1f0:	d101      	bne.n	801f1f6 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801f1f2:	2001      	movs	r0, #1
 801f1f4:	4770      	bx	lr
 801f1f6:	4b08      	ldr	r3, [pc, #32]	; (801f218 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801f1f8:	8819      	ldrh	r1, [r3, #0]
 801f1fa:	4248      	negs	r0, r1
 801f1fc:	4770      	bx	lr
 801f1fe:	2902      	cmp	r1, #2
 801f200:	d006      	beq.n	801f210 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801f202:	2903      	cmp	r1, #3
 801f204:	d0f7      	beq.n	801f1f6 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801f206:	2901      	cmp	r1, #1
 801f208:	d1f3      	bne.n	801f1f2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801f20a:	4b03      	ldr	r3, [pc, #12]	; (801f218 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801f20c:	8818      	ldrh	r0, [r3, #0]
 801f20e:	4770      	bx	lr
 801f210:	f04f 30ff 	mov.w	r0, #4294967295
 801f214:	4770      	bx	lr
 801f216:	bf00      	nop
 801f218:	2000c5ae 	.word	0x2000c5ae

0801f21c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801f21c:	b170      	cbz	r0, 801f23c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801f21e:	2902      	cmp	r1, #2
 801f220:	d012      	beq.n	801f248 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 801f222:	2903      	cmp	r1, #3
 801f224:	d006      	beq.n	801f234 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801f226:	2901      	cmp	r1, #1
 801f228:	d001      	beq.n	801f22e <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801f22a:	2001      	movs	r0, #1
 801f22c:	4770      	bx	lr
 801f22e:	4b08      	ldr	r3, [pc, #32]	; (801f250 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801f230:	8818      	ldrh	r0, [r3, #0]
 801f232:	4770      	bx	lr
 801f234:	4b06      	ldr	r3, [pc, #24]	; (801f250 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801f236:	8818      	ldrh	r0, [r3, #0]
 801f238:	4240      	negs	r0, r0
 801f23a:	4770      	bx	lr
 801f23c:	2902      	cmp	r1, #2
 801f23e:	d0f9      	beq.n	801f234 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801f240:	2903      	cmp	r1, #3
 801f242:	d0f2      	beq.n	801f22a <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 801f244:	2901      	cmp	r1, #1
 801f246:	d1f2      	bne.n	801f22e <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801f248:	f04f 30ff 	mov.w	r0, #4294967295
 801f24c:	4770      	bx	lr
 801f24e:	bf00      	nop
 801f250:	2000c5ae 	.word	0x2000c5ae

0801f254 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801f254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f258:	b095      	sub	sp, #84	; 0x54
 801f25a:	9109      	str	r1, [sp, #36]	; 0x24
 801f25c:	a910      	add	r1, sp, #64	; 0x40
 801f25e:	f9bd 5078 	ldrsh.w	r5, [sp, #120]	; 0x78
 801f262:	f8bd 6080 	ldrh.w	r6, [sp, #128]	; 0x80
 801f266:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 801f26a:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 801f26e:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 801f272:	e881 000c 	stmia.w	r1, {r2, r3}
 801f276:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 801f27a:	9306      	str	r3, [sp, #24]
 801f27c:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801f280:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 801f284:	930e      	str	r3, [sp, #56]	; 0x38
 801f286:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 801f28a:	798f      	ldrb	r7, [r1, #6]
 801f28c:	930a      	str	r3, [sp, #40]	; 0x28
 801f28e:	7b4b      	ldrb	r3, [r1, #13]
 801f290:	0158      	lsls	r0, r3, #5
 801f292:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801f296:	4338      	orrs	r0, r7
 801f298:	9008      	str	r0, [sp, #32]
 801f29a:	f000 8174 	beq.w	801f586 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801f29e:	011b      	lsls	r3, r3, #4
 801f2a0:	79c8      	ldrb	r0, [r1, #7]
 801f2a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f2a6:	4303      	orrs	r3, r0
 801f2a8:	9307      	str	r3, [sp, #28]
 801f2aa:	f000 816c 	beq.w	801f586 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801f2ae:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801f2b2:	b29b      	uxth	r3, r3
 801f2b4:	2e00      	cmp	r6, #0
 801f2b6:	f000 8112 	beq.w	801f4de <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x28a>
 801f2ba:	1af6      	subs	r6, r6, r3
 801f2bc:	b2b6      	uxth	r6, r6
 801f2be:	0433      	lsls	r3, r6, #16
 801f2c0:	d502      	bpl.n	801f2c8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801f2c2:	1bad      	subs	r5, r5, r6
 801f2c4:	2600      	movs	r6, #0
 801f2c6:	b22d      	sxth	r5, r5
 801f2c8:	f9b2 1000 	ldrsh.w	r1, [r2]
 801f2cc:	a810      	add	r0, sp, #64	; 0x40
 801f2ce:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801f2d2:	428d      	cmp	r5, r1
 801f2d4:	b28b      	uxth	r3, r1
 801f2d6:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 801f2da:	bfbf      	itttt	lt
 801f2dc:	18f6      	addlt	r6, r6, r3
 801f2de:	1b75      	sublt	r5, r6, r5
 801f2e0:	b2ae      	uxthlt	r6, r5
 801f2e2:	460d      	movlt	r5, r1
 801f2e4:	8891      	ldrh	r1, [r2, #4]
 801f2e6:	440b      	add	r3, r1
 801f2e8:	4629      	mov	r1, r5
 801f2ea:	b21b      	sxth	r3, r3
 801f2ec:	930d      	str	r3, [sp, #52]	; 0x34
 801f2ee:	88d3      	ldrh	r3, [r2, #6]
 801f2f0:	9a06      	ldr	r2, [sp, #24]
 801f2f2:	449a      	add	sl, r3
 801f2f4:	fa0f f38a 	sxth.w	r3, sl
 801f2f8:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 801f2fc:	930c      	str	r3, [sp, #48]	; 0x30
 801f2fe:	4bb8      	ldr	r3, [pc, #736]	; (801f5e0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 801f300:	f893 b000 	ldrb.w	fp, [r3]
 801f304:	f10b 3cff 	add.w	ip, fp, #4294967295
 801f308:	f1dc 0300 	rsbs	r3, ip, #0
 801f30c:	eb43 030c 	adc.w	r3, r3, ip
 801f310:	930b      	str	r3, [sp, #44]	; 0x2c
 801f312:	464b      	mov	r3, r9
 801f314:	f7fa fcb2 	bl	8019c7c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801f318:	4629      	mov	r1, r5
 801f31a:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 801f31e:	464b      	mov	r3, r9
 801f320:	9a06      	ldr	r2, [sp, #24]
 801f322:	a810      	add	r0, sp, #64	; 0x40
 801f324:	f7fa fcc2 	bl	8019cac <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801f328:	a914      	add	r1, sp, #80	; 0x50
 801f32a:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801f32e:	a813      	add	r0, sp, #76	; 0x4c
 801f330:	f7fa fd9c 	bl	8019e6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801f334:	f1b9 0f00 	cmp.w	r9, #0
 801f338:	f040 80d4 	bne.w	801f4e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x290>
 801f33c:	f1bb 0f01 	cmp.w	fp, #1
 801f340:	f040 80d8 	bne.w	801f4f4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 801f344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f346:	2b00      	cmp	r3, #0
 801f348:	f040 8122 	bne.w	801f590 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33c>
 801f34c:	4ba5      	ldr	r3, [pc, #660]	; (801f5e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801f34e:	6818      	ldr	r0, [r3, #0]
 801f350:	6803      	ldr	r3, [r0, #0]
 801f352:	6a1b      	ldr	r3, [r3, #32]
 801f354:	4798      	blx	r3
 801f356:	4aa4      	ldr	r2, [pc, #656]	; (801f5e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 801f358:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801f35c:	8811      	ldrh	r1, [r2, #0]
 801f35e:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801f362:	fb01 2303 	mla	r3, r1, r3, r2
 801f366:	2201      	movs	r2, #1
 801f368:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f36c:	4590      	cmp	r8, r2
 801f36e:	4403      	add	r3, r0
 801f370:	9307      	str	r3, [sp, #28]
 801f372:	fa02 f308 	lsl.w	r3, r2, r8
 801f376:	f103 33ff 	add.w	r3, r3, #4294967295
 801f37a:	b2db      	uxtb	r3, r3
 801f37c:	930f      	str	r3, [sp, #60]	; 0x3c
 801f37e:	f000 8109 	beq.w	801f594 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x340>
 801f382:	f1b8 0f02 	cmp.w	r8, #2
 801f386:	f000 813e 	beq.w	801f606 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b2>
 801f38a:	f1b8 0f04 	cmp.w	r8, #4
 801f38e:	f000 8132 	beq.w	801f5f6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 801f392:	b906      	cbnz	r6, 801f396 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x142>
 801f394:	b174      	cbz	r4, 801f3b4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 801f396:	fb17 6304 	smlabb	r3, r7, r4, r6
 801f39a:	9924      	ldr	r1, [sp, #144]	; 0x90
 801f39c:	ebaa 0a04 	sub.w	sl, sl, r4
 801f3a0:	fb13 f308 	smulbb	r3, r3, r8
 801f3a4:	fa1f fa8a 	uxth.w	sl, sl
 801f3a8:	b29b      	uxth	r3, r3
 801f3aa:	eb01 01d3 	add.w	r1, r1, r3, lsr #3
 801f3ae:	f003 0407 	and.w	r4, r3, #7
 801f3b2:	9124      	str	r1, [sp, #144]	; 0x90
 801f3b4:	4649      	mov	r1, r9
 801f3b6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f3b8:	f7ff ff14 	bl	801f1e4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801f3bc:	4649      	mov	r1, r9
 801f3be:	4683      	mov	fp, r0
 801f3c0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f3c2:	f7ff ff2b 	bl	801f21c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801f3c6:	9906      	ldr	r1, [sp, #24]
 801f3c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f3ca:	1bad      	subs	r5, r5, r6
 801f3cc:	1a5b      	subs	r3, r3, r1
 801f3ce:	459a      	cmp	sl, r3
 801f3d0:	bfa8      	it	ge
 801f3d2:	469a      	movge	sl, r3
 801f3d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f3d6:	1b5d      	subs	r5, r3, r5
 801f3d8:	9b08      	ldr	r3, [sp, #32]
 801f3da:	429d      	cmp	r5, r3
 801f3dc:	bfd4      	ite	le
 801f3de:	ebc6 0605 	rsble	r6, r6, r5
 801f3e2:	ebc6 0603 	rsbgt	r6, r6, r3
 801f3e6:	1bbf      	subs	r7, r7, r6
 801f3e8:	fb0b 0016 	mls	r0, fp, r6, r0
 801f3ec:	fb08 f307 	mul.w	r3, r8, r7
 801f3f0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f3f4:	9308      	str	r3, [sp, #32]
 801f3f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f3f8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801f3fc:	930b      	str	r3, [sp, #44]	; 0x2c
 801f3fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f400:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f404:	930c      	str	r3, [sp, #48]	; 0x30
 801f406:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f408:	b2db      	uxtb	r3, r3
 801f40a:	930d      	str	r3, [sp, #52]	; 0x34
 801f40c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f40e:	7819      	ldrb	r1, [r3, #0]
 801f410:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801f414:	ea26 7be6 	bic.w	fp, r6, r6, asr #31
 801f418:	4121      	asrs	r1, r4
 801f41a:	9306      	str	r3, [sp, #24]
 801f41c:	fb03 0b0b 	mla	fp, r3, fp, r0
 801f420:	b2c9      	uxtb	r1, r1
 801f422:	f1ba 0f00 	cmp.w	sl, #0
 801f426:	f340 80d1 	ble.w	801f5cc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801f42a:	46b6      	mov	lr, r6
 801f42c:	9807      	ldr	r0, [sp, #28]
 801f42e:	f1be 0f00 	cmp.w	lr, #0
 801f432:	f340 80b8 	ble.w	801f5a6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801f436:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f438:	400b      	ands	r3, r1
 801f43a:	d03e      	beq.n	801f4ba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801f43c:	fb13 f302 	smulbb	r3, r3, r2
 801f440:	2bfe      	cmp	r3, #254	; 0xfe
 801f442:	dd03      	ble.n	801f44c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f8>
 801f444:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801f446:	2dff      	cmp	r5, #255	; 0xff
 801f448:	f000 80a6 	beq.w	801f598 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801f44c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801f44e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801f450:	fb15 f303 	smulbb	r3, r5, r3
 801f454:	b29b      	uxth	r3, r3
 801f456:	1c5d      	adds	r5, r3, #1
 801f458:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801f45c:	7805      	ldrb	r5, [r0, #0]
 801f45e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f462:	fa1f fc83 	uxth.w	ip, r3
 801f466:	43db      	mvns	r3, r3
 801f468:	fb17 f90c 	smulbb	r9, r7, ip
 801f46c:	b2db      	uxtb	r3, r3
 801f46e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801f470:	fb05 9503 	mla	r5, r5, r3, r9
 801f474:	b2ad      	uxth	r5, r5
 801f476:	f105 0901 	add.w	r9, r5, #1
 801f47a:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801f47e:	fb17 f90c 	smulbb	r9, r7, ip
 801f482:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801f484:	122d      	asrs	r5, r5, #8
 801f486:	fb17 fc0c 	smulbb	ip, r7, ip
 801f48a:	7005      	strb	r5, [r0, #0]
 801f48c:	7845      	ldrb	r5, [r0, #1]
 801f48e:	fb05 9503 	mla	r5, r5, r3, r9
 801f492:	b2ad      	uxth	r5, r5
 801f494:	f105 0901 	add.w	r9, r5, #1
 801f498:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801f49c:	122d      	asrs	r5, r5, #8
 801f49e:	7045      	strb	r5, [r0, #1]
 801f4a0:	7885      	ldrb	r5, [r0, #2]
 801f4a2:	fb05 cc03 	mla	ip, r5, r3, ip
 801f4a6:	fa1f fc8c 	uxth.w	ip, ip
 801f4aa:	f10c 0301 	add.w	r3, ip, #1
 801f4ae:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801f4b2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f4b6:	f880 c002 	strb.w	ip, [r0, #2]
 801f4ba:	4444      	add	r4, r8
 801f4bc:	f10e 3eff 	add.w	lr, lr, #4294967295
 801f4c0:	b2a4      	uxth	r4, r4
 801f4c2:	2c07      	cmp	r4, #7
 801f4c4:	bf89      	itett	hi
 801f4c6:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 801f4c8:	fa41 f108 	asrls.w	r1, r1, r8
 801f4cc:	2400      	movhi	r4, #0
 801f4ce:	7859      	ldrbhi	r1, [r3, #1]
 801f4d0:	bf8a      	itet	hi
 801f4d2:	3301      	addhi	r3, #1
 801f4d4:	b2c9      	uxtbls	r1, r1
 801f4d6:	9324      	strhi	r3, [sp, #144]	; 0x90
 801f4d8:	9b06      	ldr	r3, [sp, #24]
 801f4da:	4418      	add	r0, r3
 801f4dc:	e7a7      	b.n	801f42e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1da>
 801f4de:	441d      	add	r5, r3
 801f4e0:	b22d      	sxth	r5, r5
 801f4e2:	e6f1      	b.n	801f2c8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801f4e4:	f1b9 0f01 	cmp.w	r9, #1
 801f4e8:	f47f af2c 	bne.w	801f344 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801f4ec:	f1bb 0f01 	cmp.w	fp, #1
 801f4f0:	f47f af28 	bne.w	801f344 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801f4f4:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 801f5e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801f4f8:	f8db 0000 	ldr.w	r0, [fp]
 801f4fc:	6803      	ldr	r3, [r0, #0]
 801f4fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f500:	4798      	blx	r3
 801f502:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801f506:	465a      	mov	r2, fp
 801f508:	d006      	beq.n	801f518 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801f50a:	f1b8 0f04 	cmp.w	r8, #4
 801f50e:	d13d      	bne.n	801f58c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x338>
 801f510:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f512:	3300      	adds	r3, #0
 801f514:	bf18      	it	ne
 801f516:	2301      	movne	r3, #1
 801f518:	05c0      	lsls	r0, r0, #23
 801f51a:	d567      	bpl.n	801f5ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801f51c:	f1b8 0f08 	cmp.w	r8, #8
 801f520:	d164      	bne.n	801f5ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801f522:	2b00      	cmp	r3, #0
 801f524:	bf0c      	ite	eq
 801f526:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801f52a:	2180      	movne	r1, #128	; 0x80
 801f52c:	2e00      	cmp	r6, #0
 801f52e:	f47f af09 	bne.w	801f344 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801f532:	2c00      	cmp	r4, #0
 801f534:	f47f af06 	bne.w	801f344 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801f538:	9b08      	ldr	r3, [sp, #32]
 801f53a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801f53c:	442b      	add	r3, r5
 801f53e:	4283      	cmp	r3, r0
 801f540:	f73f af00 	bgt.w	801f344 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801f544:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 801f548:	4403      	add	r3, r0
 801f54a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f54c:	4283      	cmp	r3, r0
 801f54e:	f73f aef9 	bgt.w	801f344 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801f552:	f1b8 0f08 	cmp.w	r8, #8
 801f556:	6810      	ldr	r0, [r2, #0]
 801f558:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801f55c:	bf18      	it	ne
 801f55e:	3701      	addne	r7, #1
 801f560:	6804      	ldr	r4, [r0, #0]
 801f562:	9105      	str	r1, [sp, #20]
 801f564:	bf18      	it	ne
 801f566:	f027 0701 	bicne.w	r7, r7, #1
 801f56a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801f56c:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 801f570:	bf18      	it	ne
 801f572:	b2bf      	uxthne	r7, r7
 801f574:	9104      	str	r1, [sp, #16]
 801f576:	9926      	ldr	r1, [sp, #152]	; 0x98
 801f578:	e9cd 7a00 	strd	r7, sl, [sp]
 801f57c:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801f580:	9924      	ldr	r1, [sp, #144]	; 0x90
 801f582:	6c24      	ldr	r4, [r4, #64]	; 0x40
 801f584:	47a0      	blx	r4
 801f586:	b015      	add	sp, #84	; 0x54
 801f588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f58c:	2300      	movs	r3, #0
 801f58e:	e7c3      	b.n	801f518 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801f590:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f592:	e6e0      	b.n	801f356 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801f594:	22ff      	movs	r2, #255	; 0xff
 801f596:	e6fc      	b.n	801f392 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801f598:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f59a:	7003      	strb	r3, [r0, #0]
 801f59c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f59e:	7043      	strb	r3, [r0, #1]
 801f5a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f5a2:	7083      	strb	r3, [r0, #2]
 801f5a4:	e789      	b.n	801f4ba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801f5a6:	9b08      	ldr	r3, [sp, #32]
 801f5a8:	b153      	cbz	r3, 801f5c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36c>
 801f5aa:	441c      	add	r4, r3
 801f5ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f5ae:	b2a4      	uxth	r4, r4
 801f5b0:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801f5b4:	f004 0407 	and.w	r4, r4, #7
 801f5b8:	7819      	ldrb	r1, [r3, #0]
 801f5ba:	9324      	str	r3, [sp, #144]	; 0x90
 801f5bc:	4121      	asrs	r1, r4
 801f5be:	b2c9      	uxtb	r1, r1
 801f5c0:	9b07      	ldr	r3, [sp, #28]
 801f5c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f5c6:	445b      	add	r3, fp
 801f5c8:	9307      	str	r3, [sp, #28]
 801f5ca:	e72a      	b.n	801f422 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ce>
 801f5cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f5ce:	2b00      	cmp	r3, #0
 801f5d0:	d1d9      	bne.n	801f586 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801f5d2:	4b04      	ldr	r3, [pc, #16]	; (801f5e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801f5d4:	6818      	ldr	r0, [r3, #0]
 801f5d6:	6803      	ldr	r3, [r0, #0]
 801f5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f5da:	4798      	blx	r3
 801f5dc:	e7d3      	b.n	801f586 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801f5de:	bf00      	nop
 801f5e0:	2000c5ac 	.word	0x2000c5ac
 801f5e4:	2000c5b4 	.word	0x2000c5b4
 801f5e8:	2000c5ae 	.word	0x2000c5ae
 801f5ec:	2b00      	cmp	r3, #0
 801f5ee:	f43f aea9 	beq.w	801f344 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801f5f2:	2180      	movs	r1, #128	; 0x80
 801f5f4:	e79a      	b.n	801f52c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 801f5f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f5f8:	b11b      	cbz	r3, 801f602 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801f5fa:	07fb      	lsls	r3, r7, #31
 801f5fc:	d501      	bpl.n	801f602 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801f5fe:	3701      	adds	r7, #1
 801f600:	b2bf      	uxth	r7, r7
 801f602:	2211      	movs	r2, #17
 801f604:	e6c5      	b.n	801f392 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801f606:	2255      	movs	r2, #85	; 0x55
 801f608:	e6c3      	b.n	801f392 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801f60a:	bf00      	nop

0801f60c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801f60c:	b538      	push	{r3, r4, r5, lr}
 801f60e:	4c15      	ldr	r4, [pc, #84]	; (801f664 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801f610:	4605      	mov	r5, r0
 801f612:	7823      	ldrb	r3, [r4, #0]
 801f614:	f3bf 8f5b 	dmb	ish
 801f618:	07da      	lsls	r2, r3, #31
 801f61a:	d40b      	bmi.n	801f634 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801f61c:	4620      	mov	r0, r4
 801f61e:	f006 fd5b 	bl	80260d8 <__cxa_guard_acquire>
 801f622:	b138      	cbz	r0, 801f634 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801f624:	4620      	mov	r0, r4
 801f626:	f006 fd63 	bl	80260f0 <__cxa_guard_release>
 801f62a:	4a0f      	ldr	r2, [pc, #60]	; (801f668 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801f62c:	490f      	ldr	r1, [pc, #60]	; (801f66c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801f62e:	4810      	ldr	r0, [pc, #64]	; (801f670 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801f630:	f006 fd4b 	bl	80260ca <__aeabi_atexit>
 801f634:	4c0f      	ldr	r4, [pc, #60]	; (801f674 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801f636:	7823      	ldrb	r3, [r4, #0]
 801f638:	f3bf 8f5b 	dmb	ish
 801f63c:	07db      	lsls	r3, r3, #31
 801f63e:	d40b      	bmi.n	801f658 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801f640:	4620      	mov	r0, r4
 801f642:	f006 fd49 	bl	80260d8 <__cxa_guard_acquire>
 801f646:	b138      	cbz	r0, 801f658 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801f648:	4620      	mov	r0, r4
 801f64a:	f006 fd51 	bl	80260f0 <__cxa_guard_release>
 801f64e:	4a06      	ldr	r2, [pc, #24]	; (801f668 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801f650:	4909      	ldr	r1, [pc, #36]	; (801f678 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801f652:	480a      	ldr	r0, [pc, #40]	; (801f67c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801f654:	f006 fd39 	bl	80260ca <__aeabi_atexit>
 801f658:	4b05      	ldr	r3, [pc, #20]	; (801f670 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801f65a:	612b      	str	r3, [r5, #16]
 801f65c:	4b07      	ldr	r3, [pc, #28]	; (801f67c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801f65e:	616b      	str	r3, [r5, #20]
 801f660:	bd38      	pop	{r3, r4, r5, pc}
 801f662:	bf00      	nop
 801f664:	2000c6c0 	.word	0x2000c6c0
 801f668:	20000000 	.word	0x20000000
 801f66c:	0801e243 	.word	0x0801e243
 801f670:	2000009c 	.word	0x2000009c
 801f674:	2000c6c4 	.word	0x2000c6c4
 801f678:	0801e241 	.word	0x0801e241
 801f67c:	200000a0 	.word	0x200000a0

0801f680 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801f680:	b538      	push	{r3, r4, r5, lr}
 801f682:	4c15      	ldr	r4, [pc, #84]	; (801f6d8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801f684:	4605      	mov	r5, r0
 801f686:	7823      	ldrb	r3, [r4, #0]
 801f688:	f3bf 8f5b 	dmb	ish
 801f68c:	07da      	lsls	r2, r3, #31
 801f68e:	d40b      	bmi.n	801f6a8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801f690:	4620      	mov	r0, r4
 801f692:	f006 fd21 	bl	80260d8 <__cxa_guard_acquire>
 801f696:	b138      	cbz	r0, 801f6a8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801f698:	4620      	mov	r0, r4
 801f69a:	f006 fd29 	bl	80260f0 <__cxa_guard_release>
 801f69e:	4a0f      	ldr	r2, [pc, #60]	; (801f6dc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801f6a0:	490f      	ldr	r1, [pc, #60]	; (801f6e0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801f6a2:	4810      	ldr	r0, [pc, #64]	; (801f6e4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801f6a4:	f006 fd11 	bl	80260ca <__aeabi_atexit>
 801f6a8:	4c0f      	ldr	r4, [pc, #60]	; (801f6e8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801f6aa:	7823      	ldrb	r3, [r4, #0]
 801f6ac:	f3bf 8f5b 	dmb	ish
 801f6b0:	07db      	lsls	r3, r3, #31
 801f6b2:	d40b      	bmi.n	801f6cc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801f6b4:	4620      	mov	r0, r4
 801f6b6:	f006 fd0f 	bl	80260d8 <__cxa_guard_acquire>
 801f6ba:	b138      	cbz	r0, 801f6cc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801f6bc:	4620      	mov	r0, r4
 801f6be:	f006 fd17 	bl	80260f0 <__cxa_guard_release>
 801f6c2:	4a06      	ldr	r2, [pc, #24]	; (801f6dc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801f6c4:	4909      	ldr	r1, [pc, #36]	; (801f6ec <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801f6c6:	480a      	ldr	r0, [pc, #40]	; (801f6f0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801f6c8:	f006 fcff 	bl	80260ca <__aeabi_atexit>
 801f6cc:	4b05      	ldr	r3, [pc, #20]	; (801f6e4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801f6ce:	60ab      	str	r3, [r5, #8]
 801f6d0:	4b07      	ldr	r3, [pc, #28]	; (801f6f0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801f6d2:	60eb      	str	r3, [r5, #12]
 801f6d4:	bd38      	pop	{r3, r4, r5, pc}
 801f6d6:	bf00      	nop
 801f6d8:	2000c6a0 	.word	0x2000c6a0
 801f6dc:	20000000 	.word	0x20000000
 801f6e0:	0801e247 	.word	0x0801e247
 801f6e4:	2000007c 	.word	0x2000007c
 801f6e8:	2000c6a4 	.word	0x2000c6a4
 801f6ec:	0801e245 	.word	0x0801e245
 801f6f0:	20000080 	.word	0x20000080

0801f6f4 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801f6f4:	b510      	push	{r4, lr}
 801f6f6:	4604      	mov	r4, r0
 801f6f8:	f7ff ff88 	bl	801f60c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801f6fc:	4620      	mov	r0, r4
 801f6fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f702:	f7ff bfbd 	b.w	801f680 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801f708 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801f708:	b538      	push	{r3, r4, r5, lr}
 801f70a:	4c15      	ldr	r4, [pc, #84]	; (801f760 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801f70c:	4605      	mov	r5, r0
 801f70e:	7823      	ldrb	r3, [r4, #0]
 801f710:	f3bf 8f5b 	dmb	ish
 801f714:	07da      	lsls	r2, r3, #31
 801f716:	d40b      	bmi.n	801f730 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801f718:	4620      	mov	r0, r4
 801f71a:	f006 fcdd 	bl	80260d8 <__cxa_guard_acquire>
 801f71e:	b138      	cbz	r0, 801f730 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801f720:	4620      	mov	r0, r4
 801f722:	f006 fce5 	bl	80260f0 <__cxa_guard_release>
 801f726:	4a0f      	ldr	r2, [pc, #60]	; (801f764 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801f728:	490f      	ldr	r1, [pc, #60]	; (801f768 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801f72a:	4810      	ldr	r0, [pc, #64]	; (801f76c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801f72c:	f006 fccd 	bl	80260ca <__aeabi_atexit>
 801f730:	4c0f      	ldr	r4, [pc, #60]	; (801f770 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801f732:	7823      	ldrb	r3, [r4, #0]
 801f734:	f3bf 8f5b 	dmb	ish
 801f738:	07db      	lsls	r3, r3, #31
 801f73a:	d40b      	bmi.n	801f754 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801f73c:	4620      	mov	r0, r4
 801f73e:	f006 fccb 	bl	80260d8 <__cxa_guard_acquire>
 801f742:	b138      	cbz	r0, 801f754 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801f744:	4620      	mov	r0, r4
 801f746:	f006 fcd3 	bl	80260f0 <__cxa_guard_release>
 801f74a:	4a06      	ldr	r2, [pc, #24]	; (801f764 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801f74c:	4909      	ldr	r1, [pc, #36]	; (801f774 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801f74e:	480a      	ldr	r0, [pc, #40]	; (801f778 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801f750:	f006 fcbb 	bl	80260ca <__aeabi_atexit>
 801f754:	4b05      	ldr	r3, [pc, #20]	; (801f76c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801f756:	622b      	str	r3, [r5, #32]
 801f758:	4b07      	ldr	r3, [pc, #28]	; (801f778 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801f75a:	626b      	str	r3, [r5, #36]	; 0x24
 801f75c:	bd38      	pop	{r3, r4, r5, pc}
 801f75e:	bf00      	nop
 801f760:	2000c6c8 	.word	0x2000c6c8
 801f764:	20000000 	.word	0x20000000
 801f768:	0801e23b 	.word	0x0801e23b
 801f76c:	200000a4 	.word	0x200000a4
 801f770:	2000c6cc 	.word	0x2000c6cc
 801f774:	0801e239 	.word	0x0801e239
 801f778:	200000a8 	.word	0x200000a8

0801f77c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801f77c:	b538      	push	{r3, r4, r5, lr}
 801f77e:	4c15      	ldr	r4, [pc, #84]	; (801f7d4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801f780:	4605      	mov	r5, r0
 801f782:	7823      	ldrb	r3, [r4, #0]
 801f784:	f3bf 8f5b 	dmb	ish
 801f788:	07da      	lsls	r2, r3, #31
 801f78a:	d40b      	bmi.n	801f7a4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801f78c:	4620      	mov	r0, r4
 801f78e:	f006 fca3 	bl	80260d8 <__cxa_guard_acquire>
 801f792:	b138      	cbz	r0, 801f7a4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801f794:	4620      	mov	r0, r4
 801f796:	f006 fcab 	bl	80260f0 <__cxa_guard_release>
 801f79a:	4a0f      	ldr	r2, [pc, #60]	; (801f7d8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801f79c:	490f      	ldr	r1, [pc, #60]	; (801f7dc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801f79e:	4810      	ldr	r0, [pc, #64]	; (801f7e0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801f7a0:	f006 fc93 	bl	80260ca <__aeabi_atexit>
 801f7a4:	4c0f      	ldr	r4, [pc, #60]	; (801f7e4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801f7a6:	7823      	ldrb	r3, [r4, #0]
 801f7a8:	f3bf 8f5b 	dmb	ish
 801f7ac:	07db      	lsls	r3, r3, #31
 801f7ae:	d40b      	bmi.n	801f7c8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801f7b0:	4620      	mov	r0, r4
 801f7b2:	f006 fc91 	bl	80260d8 <__cxa_guard_acquire>
 801f7b6:	b138      	cbz	r0, 801f7c8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801f7b8:	4620      	mov	r0, r4
 801f7ba:	f006 fc99 	bl	80260f0 <__cxa_guard_release>
 801f7be:	4a06      	ldr	r2, [pc, #24]	; (801f7d8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801f7c0:	4909      	ldr	r1, [pc, #36]	; (801f7e8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801f7c2:	480a      	ldr	r0, [pc, #40]	; (801f7ec <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801f7c4:	f006 fc81 	bl	80260ca <__aeabi_atexit>
 801f7c8:	4b05      	ldr	r3, [pc, #20]	; (801f7e0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801f7ca:	61ab      	str	r3, [r5, #24]
 801f7cc:	4b07      	ldr	r3, [pc, #28]	; (801f7ec <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801f7ce:	61eb      	str	r3, [r5, #28]
 801f7d0:	bd38      	pop	{r3, r4, r5, pc}
 801f7d2:	bf00      	nop
 801f7d4:	2000c6a8 	.word	0x2000c6a8
 801f7d8:	20000000 	.word	0x20000000
 801f7dc:	0801e23f 	.word	0x0801e23f
 801f7e0:	20000084 	.word	0x20000084
 801f7e4:	2000c6ac 	.word	0x2000c6ac
 801f7e8:	0801e23d 	.word	0x0801e23d
 801f7ec:	20000088 	.word	0x20000088

0801f7f0 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801f7f0:	b510      	push	{r4, lr}
 801f7f2:	4604      	mov	r4, r0
 801f7f4:	f7ff ff88 	bl	801f708 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801f7f8:	4620      	mov	r0, r4
 801f7fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f7fe:	f7ff bfbd 	b.w	801f77c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801f804 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801f804:	b538      	push	{r3, r4, r5, lr}
 801f806:	4c15      	ldr	r4, [pc, #84]	; (801f85c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801f808:	4605      	mov	r5, r0
 801f80a:	7823      	ldrb	r3, [r4, #0]
 801f80c:	f3bf 8f5b 	dmb	ish
 801f810:	07da      	lsls	r2, r3, #31
 801f812:	d40b      	bmi.n	801f82c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801f814:	4620      	mov	r0, r4
 801f816:	f006 fc5f 	bl	80260d8 <__cxa_guard_acquire>
 801f81a:	b138      	cbz	r0, 801f82c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801f81c:	4620      	mov	r0, r4
 801f81e:	f006 fc67 	bl	80260f0 <__cxa_guard_release>
 801f822:	4a0f      	ldr	r2, [pc, #60]	; (801f860 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801f824:	490f      	ldr	r1, [pc, #60]	; (801f864 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801f826:	4810      	ldr	r0, [pc, #64]	; (801f868 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801f828:	f006 fc4f 	bl	80260ca <__aeabi_atexit>
 801f82c:	4c0f      	ldr	r4, [pc, #60]	; (801f86c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801f82e:	7823      	ldrb	r3, [r4, #0]
 801f830:	f3bf 8f5b 	dmb	ish
 801f834:	07db      	lsls	r3, r3, #31
 801f836:	d40b      	bmi.n	801f850 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801f838:	4620      	mov	r0, r4
 801f83a:	f006 fc4d 	bl	80260d8 <__cxa_guard_acquire>
 801f83e:	b138      	cbz	r0, 801f850 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801f840:	4620      	mov	r0, r4
 801f842:	f006 fc55 	bl	80260f0 <__cxa_guard_release>
 801f846:	4a06      	ldr	r2, [pc, #24]	; (801f860 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801f848:	4909      	ldr	r1, [pc, #36]	; (801f870 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801f84a:	480a      	ldr	r0, [pc, #40]	; (801f874 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801f84c:	f006 fc3d 	bl	80260ca <__aeabi_atexit>
 801f850:	4b05      	ldr	r3, [pc, #20]	; (801f868 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801f852:	632b      	str	r3, [r5, #48]	; 0x30
 801f854:	4b07      	ldr	r3, [pc, #28]	; (801f874 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801f856:	636b      	str	r3, [r5, #52]	; 0x34
 801f858:	bd38      	pop	{r3, r4, r5, pc}
 801f85a:	bf00      	nop
 801f85c:	2000c6b0 	.word	0x2000c6b0
 801f860:	20000000 	.word	0x20000000
 801f864:	0801e233 	.word	0x0801e233
 801f868:	2000008c 	.word	0x2000008c
 801f86c:	2000c6b4 	.word	0x2000c6b4
 801f870:	0801e231 	.word	0x0801e231
 801f874:	20000090 	.word	0x20000090

0801f878 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801f878:	b538      	push	{r3, r4, r5, lr}
 801f87a:	4c15      	ldr	r4, [pc, #84]	; (801f8d0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801f87c:	4605      	mov	r5, r0
 801f87e:	7823      	ldrb	r3, [r4, #0]
 801f880:	f3bf 8f5b 	dmb	ish
 801f884:	07da      	lsls	r2, r3, #31
 801f886:	d40b      	bmi.n	801f8a0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801f888:	4620      	mov	r0, r4
 801f88a:	f006 fc25 	bl	80260d8 <__cxa_guard_acquire>
 801f88e:	b138      	cbz	r0, 801f8a0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801f890:	4620      	mov	r0, r4
 801f892:	f006 fc2d 	bl	80260f0 <__cxa_guard_release>
 801f896:	4a0f      	ldr	r2, [pc, #60]	; (801f8d4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801f898:	490f      	ldr	r1, [pc, #60]	; (801f8d8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801f89a:	4810      	ldr	r0, [pc, #64]	; (801f8dc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801f89c:	f006 fc15 	bl	80260ca <__aeabi_atexit>
 801f8a0:	4c0f      	ldr	r4, [pc, #60]	; (801f8e0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801f8a2:	7823      	ldrb	r3, [r4, #0]
 801f8a4:	f3bf 8f5b 	dmb	ish
 801f8a8:	07db      	lsls	r3, r3, #31
 801f8aa:	d40b      	bmi.n	801f8c4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801f8ac:	4620      	mov	r0, r4
 801f8ae:	f006 fc13 	bl	80260d8 <__cxa_guard_acquire>
 801f8b2:	b138      	cbz	r0, 801f8c4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801f8b4:	4620      	mov	r0, r4
 801f8b6:	f006 fc1b 	bl	80260f0 <__cxa_guard_release>
 801f8ba:	4a06      	ldr	r2, [pc, #24]	; (801f8d4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801f8bc:	4909      	ldr	r1, [pc, #36]	; (801f8e4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801f8be:	480a      	ldr	r0, [pc, #40]	; (801f8e8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801f8c0:	f006 fc03 	bl	80260ca <__aeabi_atexit>
 801f8c4:	4b05      	ldr	r3, [pc, #20]	; (801f8dc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801f8c6:	62ab      	str	r3, [r5, #40]	; 0x28
 801f8c8:	4b07      	ldr	r3, [pc, #28]	; (801f8e8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801f8ca:	62eb      	str	r3, [r5, #44]	; 0x2c
 801f8cc:	bd38      	pop	{r3, r4, r5, pc}
 801f8ce:	bf00      	nop
 801f8d0:	2000c688 	.word	0x2000c688
 801f8d4:	20000000 	.word	0x20000000
 801f8d8:	0801e237 	.word	0x0801e237
 801f8dc:	20000064 	.word	0x20000064
 801f8e0:	2000c68c 	.word	0x2000c68c
 801f8e4:	0801e235 	.word	0x0801e235
 801f8e8:	20000068 	.word	0x20000068

0801f8ec <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801f8ec:	b510      	push	{r4, lr}
 801f8ee:	4604      	mov	r4, r0
 801f8f0:	f7ff ff88 	bl	801f804 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801f8f4:	4620      	mov	r0, r4
 801f8f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f8fa:	f7ff bfbd 	b.w	801f878 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801f900 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801f900:	b538      	push	{r3, r4, r5, lr}
 801f902:	4c15      	ldr	r4, [pc, #84]	; (801f958 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801f904:	4605      	mov	r5, r0
 801f906:	7823      	ldrb	r3, [r4, #0]
 801f908:	f3bf 8f5b 	dmb	ish
 801f90c:	07da      	lsls	r2, r3, #31
 801f90e:	d40b      	bmi.n	801f928 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801f910:	4620      	mov	r0, r4
 801f912:	f006 fbe1 	bl	80260d8 <__cxa_guard_acquire>
 801f916:	b138      	cbz	r0, 801f928 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801f918:	4620      	mov	r0, r4
 801f91a:	f006 fbe9 	bl	80260f0 <__cxa_guard_release>
 801f91e:	4a0f      	ldr	r2, [pc, #60]	; (801f95c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801f920:	490f      	ldr	r1, [pc, #60]	; (801f960 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801f922:	4810      	ldr	r0, [pc, #64]	; (801f964 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801f924:	f006 fbd1 	bl	80260ca <__aeabi_atexit>
 801f928:	4c0f      	ldr	r4, [pc, #60]	; (801f968 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801f92a:	7823      	ldrb	r3, [r4, #0]
 801f92c:	f3bf 8f5b 	dmb	ish
 801f930:	07db      	lsls	r3, r3, #31
 801f932:	d40b      	bmi.n	801f94c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801f934:	4620      	mov	r0, r4
 801f936:	f006 fbcf 	bl	80260d8 <__cxa_guard_acquire>
 801f93a:	b138      	cbz	r0, 801f94c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801f93c:	4620      	mov	r0, r4
 801f93e:	f006 fbd7 	bl	80260f0 <__cxa_guard_release>
 801f942:	4a06      	ldr	r2, [pc, #24]	; (801f95c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801f944:	4909      	ldr	r1, [pc, #36]	; (801f96c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801f946:	480a      	ldr	r0, [pc, #40]	; (801f970 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801f948:	f006 fbbf 	bl	80260ca <__aeabi_atexit>
 801f94c:	4b05      	ldr	r3, [pc, #20]	; (801f964 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801f94e:	642b      	str	r3, [r5, #64]	; 0x40
 801f950:	4b07      	ldr	r3, [pc, #28]	; (801f970 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801f952:	646b      	str	r3, [r5, #68]	; 0x44
 801f954:	bd38      	pop	{r3, r4, r5, pc}
 801f956:	bf00      	nop
 801f958:	2000c6b8 	.word	0x2000c6b8
 801f95c:	20000000 	.word	0x20000000
 801f960:	0801e22b 	.word	0x0801e22b
 801f964:	20000094 	.word	0x20000094
 801f968:	2000c6bc 	.word	0x2000c6bc
 801f96c:	0801e229 	.word	0x0801e229
 801f970:	20000098 	.word	0x20000098

0801f974 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801f974:	b538      	push	{r3, r4, r5, lr}
 801f976:	4c15      	ldr	r4, [pc, #84]	; (801f9cc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801f978:	4605      	mov	r5, r0
 801f97a:	7823      	ldrb	r3, [r4, #0]
 801f97c:	f3bf 8f5b 	dmb	ish
 801f980:	07da      	lsls	r2, r3, #31
 801f982:	d40b      	bmi.n	801f99c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801f984:	4620      	mov	r0, r4
 801f986:	f006 fba7 	bl	80260d8 <__cxa_guard_acquire>
 801f98a:	b138      	cbz	r0, 801f99c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801f98c:	4620      	mov	r0, r4
 801f98e:	f006 fbaf 	bl	80260f0 <__cxa_guard_release>
 801f992:	4a0f      	ldr	r2, [pc, #60]	; (801f9d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801f994:	490f      	ldr	r1, [pc, #60]	; (801f9d4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801f996:	4810      	ldr	r0, [pc, #64]	; (801f9d8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801f998:	f006 fb97 	bl	80260ca <__aeabi_atexit>
 801f99c:	4c0f      	ldr	r4, [pc, #60]	; (801f9dc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801f99e:	7823      	ldrb	r3, [r4, #0]
 801f9a0:	f3bf 8f5b 	dmb	ish
 801f9a4:	07db      	lsls	r3, r3, #31
 801f9a6:	d40b      	bmi.n	801f9c0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801f9a8:	4620      	mov	r0, r4
 801f9aa:	f006 fb95 	bl	80260d8 <__cxa_guard_acquire>
 801f9ae:	b138      	cbz	r0, 801f9c0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801f9b0:	4620      	mov	r0, r4
 801f9b2:	f006 fb9d 	bl	80260f0 <__cxa_guard_release>
 801f9b6:	4a06      	ldr	r2, [pc, #24]	; (801f9d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801f9b8:	4909      	ldr	r1, [pc, #36]	; (801f9e0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801f9ba:	480a      	ldr	r0, [pc, #40]	; (801f9e4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801f9bc:	f006 fb85 	bl	80260ca <__aeabi_atexit>
 801f9c0:	4b05      	ldr	r3, [pc, #20]	; (801f9d8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801f9c2:	63ab      	str	r3, [r5, #56]	; 0x38
 801f9c4:	4b07      	ldr	r3, [pc, #28]	; (801f9e4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801f9c6:	63eb      	str	r3, [r5, #60]	; 0x3c
 801f9c8:	bd38      	pop	{r3, r4, r5, pc}
 801f9ca:	bf00      	nop
 801f9cc:	2000c698 	.word	0x2000c698
 801f9d0:	20000000 	.word	0x20000000
 801f9d4:	0801e22f 	.word	0x0801e22f
 801f9d8:	20000074 	.word	0x20000074
 801f9dc:	2000c69c 	.word	0x2000c69c
 801f9e0:	0801e22d 	.word	0x0801e22d
 801f9e4:	20000078 	.word	0x20000078

0801f9e8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801f9e8:	b510      	push	{r4, lr}
 801f9ea:	4604      	mov	r4, r0
 801f9ec:	f7ff ff88 	bl	801f900 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801f9f0:	4620      	mov	r0, r4
 801f9f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f9f6:	f7ff bfbd 	b.w	801f974 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801f9fc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801f9fc:	b538      	push	{r3, r4, r5, lr}
 801f9fe:	4c15      	ldr	r4, [pc, #84]	; (801fa54 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801fa00:	4605      	mov	r5, r0
 801fa02:	7823      	ldrb	r3, [r4, #0]
 801fa04:	f3bf 8f5b 	dmb	ish
 801fa08:	07da      	lsls	r2, r3, #31
 801fa0a:	d40b      	bmi.n	801fa24 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801fa0c:	4620      	mov	r0, r4
 801fa0e:	f006 fb63 	bl	80260d8 <__cxa_guard_acquire>
 801fa12:	b138      	cbz	r0, 801fa24 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801fa14:	4620      	mov	r0, r4
 801fa16:	f006 fb6b 	bl	80260f0 <__cxa_guard_release>
 801fa1a:	4a0f      	ldr	r2, [pc, #60]	; (801fa58 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801fa1c:	490f      	ldr	r1, [pc, #60]	; (801fa5c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801fa1e:	4810      	ldr	r0, [pc, #64]	; (801fa60 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801fa20:	f006 fb53 	bl	80260ca <__aeabi_atexit>
 801fa24:	4c0f      	ldr	r4, [pc, #60]	; (801fa64 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801fa26:	7823      	ldrb	r3, [r4, #0]
 801fa28:	f3bf 8f5b 	dmb	ish
 801fa2c:	07db      	lsls	r3, r3, #31
 801fa2e:	d40b      	bmi.n	801fa48 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801fa30:	4620      	mov	r0, r4
 801fa32:	f006 fb51 	bl	80260d8 <__cxa_guard_acquire>
 801fa36:	b138      	cbz	r0, 801fa48 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801fa38:	4620      	mov	r0, r4
 801fa3a:	f006 fb59 	bl	80260f0 <__cxa_guard_release>
 801fa3e:	4a06      	ldr	r2, [pc, #24]	; (801fa58 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801fa40:	4909      	ldr	r1, [pc, #36]	; (801fa68 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801fa42:	480a      	ldr	r0, [pc, #40]	; (801fa6c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801fa44:	f006 fb41 	bl	80260ca <__aeabi_atexit>
 801fa48:	4b05      	ldr	r3, [pc, #20]	; (801fa60 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801fa4a:	652b      	str	r3, [r5, #80]	; 0x50
 801fa4c:	4b07      	ldr	r3, [pc, #28]	; (801fa6c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801fa4e:	656b      	str	r3, [r5, #84]	; 0x54
 801fa50:	bd38      	pop	{r3, r4, r5, pc}
 801fa52:	bf00      	nop
 801fa54:	2000c690 	.word	0x2000c690
 801fa58:	20000000 	.word	0x20000000
 801fa5c:	0801e223 	.word	0x0801e223
 801fa60:	2000006c 	.word	0x2000006c
 801fa64:	2000c694 	.word	0x2000c694
 801fa68:	0801e221 	.word	0x0801e221
 801fa6c:	20000070 	.word	0x20000070

0801fa70 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801fa70:	b538      	push	{r3, r4, r5, lr}
 801fa72:	4c15      	ldr	r4, [pc, #84]	; (801fac8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801fa74:	4605      	mov	r5, r0
 801fa76:	7823      	ldrb	r3, [r4, #0]
 801fa78:	f3bf 8f5b 	dmb	ish
 801fa7c:	07da      	lsls	r2, r3, #31
 801fa7e:	d40b      	bmi.n	801fa98 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801fa80:	4620      	mov	r0, r4
 801fa82:	f006 fb29 	bl	80260d8 <__cxa_guard_acquire>
 801fa86:	b138      	cbz	r0, 801fa98 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801fa88:	4620      	mov	r0, r4
 801fa8a:	f006 fb31 	bl	80260f0 <__cxa_guard_release>
 801fa8e:	4a0f      	ldr	r2, [pc, #60]	; (801facc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801fa90:	490f      	ldr	r1, [pc, #60]	; (801fad0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801fa92:	4810      	ldr	r0, [pc, #64]	; (801fad4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801fa94:	f006 fb19 	bl	80260ca <__aeabi_atexit>
 801fa98:	4c0f      	ldr	r4, [pc, #60]	; (801fad8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801fa9a:	7823      	ldrb	r3, [r4, #0]
 801fa9c:	f3bf 8f5b 	dmb	ish
 801faa0:	07db      	lsls	r3, r3, #31
 801faa2:	d40b      	bmi.n	801fabc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801faa4:	4620      	mov	r0, r4
 801faa6:	f006 fb17 	bl	80260d8 <__cxa_guard_acquire>
 801faaa:	b138      	cbz	r0, 801fabc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801faac:	4620      	mov	r0, r4
 801faae:	f006 fb1f 	bl	80260f0 <__cxa_guard_release>
 801fab2:	4a06      	ldr	r2, [pc, #24]	; (801facc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801fab4:	4909      	ldr	r1, [pc, #36]	; (801fadc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801fab6:	480a      	ldr	r0, [pc, #40]	; (801fae0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801fab8:	f006 fb07 	bl	80260ca <__aeabi_atexit>
 801fabc:	4b05      	ldr	r3, [pc, #20]	; (801fad4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801fabe:	64ab      	str	r3, [r5, #72]	; 0x48
 801fac0:	4b07      	ldr	r3, [pc, #28]	; (801fae0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801fac2:	64eb      	str	r3, [r5, #76]	; 0x4c
 801fac4:	bd38      	pop	{r3, r4, r5, pc}
 801fac6:	bf00      	nop
 801fac8:	2000c680 	.word	0x2000c680
 801facc:	20000000 	.word	0x20000000
 801fad0:	0801e227 	.word	0x0801e227
 801fad4:	2000005c 	.word	0x2000005c
 801fad8:	2000c684 	.word	0x2000c684
 801fadc:	0801e225 	.word	0x0801e225
 801fae0:	20000060 	.word	0x20000060

0801fae4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801fae4:	b510      	push	{r4, lr}
 801fae6:	4604      	mov	r4, r0
 801fae8:	f7ff ff88 	bl	801f9fc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801faec:	4620      	mov	r0, r4
 801faee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801faf2:	f7ff bfbd 	b.w	801fa70 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801faf6 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801faf6:	b510      	push	{r4, lr}
 801faf8:	4604      	mov	r4, r0
 801fafa:	f7ff fff3 	bl	801fae4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801fafe:	4620      	mov	r0, r4
 801fb00:	f7ff ff72 	bl	801f9e8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801fb04:	4620      	mov	r0, r4
 801fb06:	f7ff fe73 	bl	801f7f0 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801fb0a:	4620      	mov	r0, r4
 801fb0c:	f7ff fdf2 	bl	801f6f4 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801fb10:	4620      	mov	r0, r4
 801fb12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fb16:	f7ff bee9 	b.w	801f8ec <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801fb1c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801fb1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb20:	b087      	sub	sp, #28
 801fb22:	7888      	ldrb	r0, [r1, #2]
 801fb24:	4616      	mov	r6, r2
 801fb26:	9001      	str	r0, [sp, #4]
 801fb28:	7848      	ldrb	r0, [r1, #1]
 801fb2a:	9100      	str	r1, [sp, #0]
 801fb2c:	9002      	str	r0, [sp, #8]
 801fb2e:	7808      	ldrb	r0, [r1, #0]
 801fb30:	9901      	ldr	r1, [sp, #4]
 801fb32:	9003      	str	r0, [sp, #12]
 801fb34:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801fb38:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 801fb3c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801fb40:	9902      	ldr	r1, [sp, #8]
 801fb42:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 801fb46:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801fb4a:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801fb4e:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801fb52:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801fb56:	9005      	str	r0, [sp, #20]
 801fb58:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 801fb5c:	fb05 ca0e 	mla	sl, r5, lr, ip
 801fb60:	2d00      	cmp	r5, #0
 801fb62:	eb06 080a 	add.w	r8, r6, sl
 801fb66:	db4a      	blt.n	801fbfe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801fb68:	45a9      	cmp	r9, r5
 801fb6a:	dd48      	ble.n	801fbfe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801fb6c:	f1bc 0f00 	cmp.w	ip, #0
 801fb70:	db43      	blt.n	801fbfa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801fb72:	45e6      	cmp	lr, ip
 801fb74:	dd41      	ble.n	801fbfa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801fb76:	f816 600a 	ldrb.w	r6, [r6, sl]
 801fb7a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fb7e:	441e      	add	r6, r3
 801fb80:	f11c 0001 	adds.w	r0, ip, #1
 801fb84:	d43e      	bmi.n	801fc04 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801fb86:	4586      	cmp	lr, r0
 801fb88:	dd3c      	ble.n	801fc04 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801fb8a:	2a00      	cmp	r2, #0
 801fb8c:	d03a      	beq.n	801fc04 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801fb8e:	f898 0001 	ldrb.w	r0, [r8, #1]
 801fb92:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fb96:	4418      	add	r0, r3
 801fb98:	3501      	adds	r5, #1
 801fb9a:	d437      	bmi.n	801fc0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801fb9c:	45a9      	cmp	r9, r5
 801fb9e:	dd35      	ble.n	801fc0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801fba0:	b3a4      	cbz	r4, 801fc0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801fba2:	f1bc 0f00 	cmp.w	ip, #0
 801fba6:	db2f      	blt.n	801fc08 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801fba8:	45e6      	cmp	lr, ip
 801fbaa:	dd2d      	ble.n	801fc08 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801fbac:	f818 500e 	ldrb.w	r5, [r8, lr]
 801fbb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fbb4:	441d      	add	r5, r3
 801fbb6:	f11c 0c01 	adds.w	ip, ip, #1
 801fbba:	d42a      	bmi.n	801fc12 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801fbbc:	45e6      	cmp	lr, ip
 801fbbe:	dd28      	ble.n	801fc12 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801fbc0:	b33a      	cbz	r2, 801fc12 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801fbc2:	44c6      	add	lr, r8
 801fbc4:	f89e c001 	ldrb.w	ip, [lr, #1]
 801fbc8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801fbcc:	4463      	add	r3, ip
 801fbce:	ea6f 0c07 	mvn.w	ip, r7
 801fbd2:	2a0f      	cmp	r2, #15
 801fbd4:	f896 a000 	ldrb.w	sl, [r6]
 801fbd8:	fa5f fc8c 	uxtb.w	ip, ip
 801fbdc:	f890 b000 	ldrb.w	fp, [r0]
 801fbe0:	f895 9000 	ldrb.w	r9, [r5]
 801fbe4:	7819      	ldrb	r1, [r3, #0]
 801fbe6:	d801      	bhi.n	801fbec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 801fbe8:	2c0f      	cmp	r4, #15
 801fbea:	d914      	bls.n	801fc16 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 801fbec:	4b40      	ldr	r3, [pc, #256]	; (801fcf0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 801fbee:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801fbf2:	4a40      	ldr	r2, [pc, #256]	; (801fcf4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 801fbf4:	4840      	ldr	r0, [pc, #256]	; (801fcf8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 801fbf6:	f006 fa9b 	bl	8026130 <__assert_func>
 801fbfa:	ae05      	add	r6, sp, #20
 801fbfc:	e7c0      	b.n	801fb80 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 801fbfe:	a805      	add	r0, sp, #20
 801fc00:	4606      	mov	r6, r0
 801fc02:	e7c9      	b.n	801fb98 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801fc04:	a805      	add	r0, sp, #20
 801fc06:	e7c7      	b.n	801fb98 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801fc08:	ad05      	add	r5, sp, #20
 801fc0a:	e7d4      	b.n	801fbb6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 801fc0c:	ab05      	add	r3, sp, #20
 801fc0e:	461d      	mov	r5, r3
 801fc10:	e7dd      	b.n	801fbce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801fc12:	ab05      	add	r3, sp, #20
 801fc14:	e7db      	b.n	801fbce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801fc16:	b292      	uxth	r2, r2
 801fc18:	b2a4      	uxth	r4, r4
 801fc1a:	fa1f fc8c 	uxth.w	ip, ip
 801fc1e:	fb02 f804 	mul.w	r8, r2, r4
 801fc22:	0112      	lsls	r2, r2, #4
 801fc24:	b2bf      	uxth	r7, r7
 801fc26:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 801fc2a:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801fc2e:	eba2 0208 	sub.w	r2, r2, r8
 801fc32:	b2a4      	uxth	r4, r4
 801fc34:	b292      	uxth	r2, r2
 801fc36:	ebae 0e04 	sub.w	lr, lr, r4
 801fc3a:	fb02 fb0b 	mul.w	fp, r2, fp
 801fc3e:	fa1f fe8e 	uxth.w	lr, lr
 801fc42:	fb0e ba0a 	mla	sl, lr, sl, fp
 801fc46:	fb04 aa09 	mla	sl, r4, r9, sl
 801fc4a:	fb08 aa01 	mla	sl, r8, r1, sl
 801fc4e:	9903      	ldr	r1, [sp, #12]
 801fc50:	fb11 f90c 	smulbb	r9, r1, ip
 801fc54:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801fc58:	9900      	ldr	r1, [sp, #0]
 801fc5a:	fb0a 9a07 	mla	sl, sl, r7, r9
 801fc5e:	fa1f fa8a 	uxth.w	sl, sl
 801fc62:	f10a 0901 	add.w	r9, sl, #1
 801fc66:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 801fc6a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801fc6e:	f881 a000 	strb.w	sl, [r1]
 801fc72:	f890 a001 	ldrb.w	sl, [r0, #1]
 801fc76:	f896 9001 	ldrb.w	r9, [r6, #1]
 801fc7a:	fb02 fa0a 	mul.w	sl, r2, sl
 801fc7e:	9902      	ldr	r1, [sp, #8]
 801fc80:	fb0e aa09 	mla	sl, lr, r9, sl
 801fc84:	f895 9001 	ldrb.w	r9, [r5, #1]
 801fc88:	fb04 aa09 	mla	sl, r4, r9, sl
 801fc8c:	f893 9001 	ldrb.w	r9, [r3, #1]
 801fc90:	fb08 a909 	mla	r9, r8, r9, sl
 801fc94:	fb11 fa0c 	smulbb	sl, r1, ip
 801fc98:	9900      	ldr	r1, [sp, #0]
 801fc9a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801fc9e:	fb09 a907 	mla	r9, r9, r7, sl
 801fca2:	fa1f f989 	uxth.w	r9, r9
 801fca6:	f109 0a01 	add.w	sl, r9, #1
 801fcaa:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801fcae:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fcb2:	f881 9001 	strb.w	r9, [r1, #1]
 801fcb6:	7880      	ldrb	r0, [r0, #2]
 801fcb8:	78b6      	ldrb	r6, [r6, #2]
 801fcba:	4342      	muls	r2, r0
 801fcbc:	78a8      	ldrb	r0, [r5, #2]
 801fcbe:	789b      	ldrb	r3, [r3, #2]
 801fcc0:	fb0e 2206 	mla	r2, lr, r6, r2
 801fcc4:	fb04 2400 	mla	r4, r4, r0, r2
 801fcc8:	fb08 4803 	mla	r8, r8, r3, r4
 801fccc:	9b01      	ldr	r3, [sp, #4]
 801fcce:	fb13 fc0c 	smulbb	ip, r3, ip
 801fcd2:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801fcd6:	fb08 c707 	mla	r7, r8, r7, ip
 801fcda:	b2bf      	uxth	r7, r7
 801fcdc:	f107 0c01 	add.w	ip, r7, #1
 801fce0:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801fce4:	123f      	asrs	r7, r7, #8
 801fce6:	708f      	strb	r7, [r1, #2]
 801fce8:	b007      	add	sp, #28
 801fcea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fcee:	bf00      	nop
 801fcf0:	0802abfb 	.word	0x0802abfb
 801fcf4:	0802b0f2 	.word	0x0802b0f2
 801fcf8:	0802acc4 	.word	0x0802acc4

0801fcfc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801fcfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd00:	ed2d 8b08 	vpush	{d8-d11}
 801fd04:	b095      	sub	sp, #84	; 0x54
 801fd06:	eeb0 aa40 	vmov.f32	s20, s0
 801fd0a:	eef0 9a60 	vmov.f32	s19, s1
 801fd0e:	930a      	str	r3, [sp, #40]	; 0x28
 801fd10:	eeb0 9a41 	vmov.f32	s18, s2
 801fd14:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801fd18:	eeb0 8a62 	vmov.f32	s16, s5
 801fd1c:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 801fd1e:	eef0 8a43 	vmov.f32	s17, s6
 801fd22:	930c      	str	r3, [sp, #48]	; 0x30
 801fd24:	eef0 ba44 	vmov.f32	s23, s8
 801fd28:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801fd2c:	eeb0 ba64 	vmov.f32	s22, s9
 801fd30:	9013      	str	r0, [sp, #76]	; 0x4c
 801fd32:	eef0 aa45 	vmov.f32	s21, s10
 801fd36:	9310      	str	r3, [sp, #64]	; 0x40
 801fd38:	6860      	ldr	r0, [r4, #4]
 801fd3a:	910f      	str	r1, [sp, #60]	; 0x3c
 801fd3c:	9212      	str	r2, [sp, #72]	; 0x48
 801fd3e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801fd40:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 801fd44:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801fd48:	fb00 1303 	mla	r3, r0, r3, r1
 801fd4c:	6821      	ldr	r1, [r4, #0]
 801fd4e:	6854      	ldr	r4, [r2, #4]
 801fd50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fd54:	18cb      	adds	r3, r1, r3
 801fd56:	930b      	str	r3, [sp, #44]	; 0x2c
 801fd58:	6813      	ldr	r3, [r2, #0]
 801fd5a:	930e      	str	r3, [sp, #56]	; 0x38
 801fd5c:	1d23      	adds	r3, r4, #4
 801fd5e:	9309      	str	r3, [sp, #36]	; 0x24
 801fd60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fd62:	43db      	mvns	r3, r3
 801fd64:	b2db      	uxtb	r3, r3
 801fd66:	930d      	str	r3, [sp, #52]	; 0x34
 801fd68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fd6a:	2b00      	cmp	r3, #0
 801fd6c:	dc03      	bgt.n	801fd76 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801fd6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fd70:	2b00      	cmp	r3, #0
 801fd72:	f340 823c 	ble.w	80201ee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801fd76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fd78:	2b00      	cmp	r3, #0
 801fd7a:	f340 8115 	ble.w	801ffa8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 801fd7e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801fd80:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fd82:	1412      	asrs	r2, r2, #16
 801fd84:	ea4f 4323 	mov.w	r3, r3, asr #16
 801fd88:	d431      	bmi.n	801fdee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801fd8a:	1c51      	adds	r1, r2, #1
 801fd8c:	428d      	cmp	r5, r1
 801fd8e:	dd31      	ble.n	801fdf4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801fd90:	2b00      	cmp	r3, #0
 801fd92:	db2f      	blt.n	801fdf4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801fd94:	1c59      	adds	r1, r3, #1
 801fd96:	980c      	ldr	r0, [sp, #48]	; 0x30
 801fd98:	4288      	cmp	r0, r1
 801fd9a:	dd2b      	ble.n	801fdf4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801fd9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fd9e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801fda0:	3b01      	subs	r3, #1
 801fda2:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801fda4:	fb02 1203 	mla	r2, r2, r3, r1
 801fda8:	1412      	asrs	r2, r2, #16
 801fdaa:	d42d      	bmi.n	801fe08 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801fdac:	3201      	adds	r2, #1
 801fdae:	4295      	cmp	r5, r2
 801fdb0:	dd2a      	ble.n	801fe08 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801fdb2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801fdb4:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801fdb6:	fb02 1303 	mla	r3, r2, r3, r1
 801fdba:	141b      	asrs	r3, r3, #16
 801fdbc:	d424      	bmi.n	801fe08 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801fdbe:	3301      	adds	r3, #1
 801fdc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fdc2:	429a      	cmp	r2, r3
 801fdc4:	dd20      	ble.n	801fe08 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801fdc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fdc8:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 801fdcc:	f103 0c03 	add.w	ip, r3, #3
 801fdd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fdd2:	9311      	str	r3, [sp, #68]	; 0x44
 801fdd4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fdd6:	2b00      	cmp	r3, #0
 801fdd8:	f300 814f 	bgt.w	802007a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 801fddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fdde:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801fde0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fde4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fde8:	441a      	add	r2, r3
 801fdea:	920b      	str	r2, [sp, #44]	; 0x2c
 801fdec:	e0de      	b.n	801ffac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801fdee:	1c51      	adds	r1, r2, #1
 801fdf0:	f040 80cb 	bne.w	801ff8a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801fdf4:	42aa      	cmp	r2, r5
 801fdf6:	f280 80c8 	bge.w	801ff8a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801fdfa:	1c5f      	adds	r7, r3, #1
 801fdfc:	f2c0 80c5 	blt.w	801ff8a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801fe00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fe02:	4293      	cmp	r3, r2
 801fe04:	f280 80c1 	bge.w	801ff8a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801fe08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fe0a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801fe0c:	9311      	str	r3, [sp, #68]	; 0x44
 801fe0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fe10:	2b00      	cmp	r3, #0
 801fe12:	dde3      	ble.n	801fddc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 801fe14:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fe16:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801fe18:	141a      	asrs	r2, r3, #16
 801fe1a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801fe1c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801fe1e:	1400      	asrs	r0, r0, #16
 801fe20:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801fe24:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801fe28:	f100 810e 	bmi.w	8020048 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801fe2c:	1c46      	adds	r6, r0, #1
 801fe2e:	42b5      	cmp	r5, r6
 801fe30:	f340 810c 	ble.w	802004c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801fe34:	2a00      	cmp	r2, #0
 801fe36:	f2c0 8109 	blt.w	802004c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801fe3a:	1c56      	adds	r6, r2, #1
 801fe3c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801fe3e:	42b4      	cmp	r4, r6
 801fe40:	f340 8104 	ble.w	802004c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801fe44:	fb02 0005 	mla	r0, r2, r5, r0
 801fe48:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801fe4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fe4c:	f814 e000 	ldrb.w	lr, [r4, r0]
 801fe50:	4402      	add	r2, r0
 801fe52:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fe54:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801fe58:	eb00 080e 	add.w	r8, r0, lr
 801fe5c:	2b00      	cmp	r3, #0
 801fe5e:	f000 80e4 	beq.w	802002a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 801fe62:	f892 c001 	ldrb.w	ip, [r2, #1]
 801fe66:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801fe6a:	4484      	add	ip, r0
 801fe6c:	2900      	cmp	r1, #0
 801fe6e:	f000 80e5 	beq.w	802003c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 801fe72:	1950      	adds	r0, r2, r5
 801fe74:	5d52      	ldrb	r2, [r2, r5]
 801fe76:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801fe78:	7840      	ldrb	r0, [r0, #1]
 801fe7a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fe7e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fe82:	4422      	add	r2, r4
 801fe84:	4420      	add	r0, r4
 801fe86:	b29b      	uxth	r3, r3
 801fe88:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801fe8a:	b289      	uxth	r1, r1
 801fe8c:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 801fe90:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801fe94:	fb03 fa01 	mul.w	sl, r3, r1
 801fe98:	011b      	lsls	r3, r3, #4
 801fe9a:	f89c e000 	ldrb.w	lr, [ip]
 801fe9e:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801fea2:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801fea6:	eba3 030a 	sub.w	r3, r3, sl
 801feaa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801feac:	b289      	uxth	r1, r1
 801feae:	b29b      	uxth	r3, r3
 801feb0:	eba9 0901 	sub.w	r9, r9, r1
 801feb4:	fb03 fe0e 	mul.w	lr, r3, lr
 801feb8:	fa1f f989 	uxth.w	r9, r9
 801febc:	fb09 ee0b 	mla	lr, r9, fp, lr
 801fec0:	f892 b000 	ldrb.w	fp, [r2]
 801fec4:	fb01 ee0b 	mla	lr, r1, fp, lr
 801fec8:	f890 b000 	ldrb.w	fp, [r0]
 801fecc:	fb0a ee0b 	mla	lr, sl, fp, lr
 801fed0:	f897 b000 	ldrb.w	fp, [r7]
 801fed4:	fb1b fb04 	smulbb	fp, fp, r4
 801fed8:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801fedc:	fb0e be06 	mla	lr, lr, r6, fp
 801fee0:	fa1f fe8e 	uxth.w	lr, lr
 801fee4:	f10e 0b01 	add.w	fp, lr, #1
 801fee8:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 801feec:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 801fef0:	f887 b000 	strb.w	fp, [r7]
 801fef4:	f89c e001 	ldrb.w	lr, [ip, #1]
 801fef8:	f898 b001 	ldrb.w	fp, [r8, #1]
 801fefc:	fb03 fe0e 	mul.w	lr, r3, lr
 801ff00:	fb09 ee0b 	mla	lr, r9, fp, lr
 801ff04:	f892 b001 	ldrb.w	fp, [r2, #1]
 801ff08:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ff0c:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ff10:	fb0a ee0b 	mla	lr, sl, fp, lr
 801ff14:	f897 b001 	ldrb.w	fp, [r7, #1]
 801ff18:	fb1b fb04 	smulbb	fp, fp, r4
 801ff1c:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801ff20:	fb0e be06 	mla	lr, lr, r6, fp
 801ff24:	fa1f fe8e 	uxth.w	lr, lr
 801ff28:	f10e 0b01 	add.w	fp, lr, #1
 801ff2c:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801ff30:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ff34:	f887 e001 	strb.w	lr, [r7, #1]
 801ff38:	f89c c002 	ldrb.w	ip, [ip, #2]
 801ff3c:	f898 e002 	ldrb.w	lr, [r8, #2]
 801ff40:	fb03 f30c 	mul.w	r3, r3, ip
 801ff44:	fb09 330e 	mla	r3, r9, lr, r3
 801ff48:	f892 e002 	ldrb.w	lr, [r2, #2]
 801ff4c:	7882      	ldrb	r2, [r0, #2]
 801ff4e:	fb01 310e 	mla	r1, r1, lr, r3
 801ff52:	fb0a 1a02 	mla	sl, sl, r2, r1
 801ff56:	78b9      	ldrb	r1, [r7, #2]
 801ff58:	fb11 f104 	smulbb	r1, r1, r4
 801ff5c:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801ff60:	fb0a 1606 	mla	r6, sl, r6, r1
 801ff64:	b2b6      	uxth	r6, r6
 801ff66:	1c73      	adds	r3, r6, #1
 801ff68:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801ff6c:	1236      	asrs	r6, r6, #8
 801ff6e:	70be      	strb	r6, [r7, #2]
 801ff70:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ff72:	3703      	adds	r7, #3
 801ff74:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ff76:	4413      	add	r3, r2
 801ff78:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801ff7a:	9327      	str	r3, [sp, #156]	; 0x9c
 801ff7c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ff7e:	4413      	add	r3, r2
 801ff80:	9328      	str	r3, [sp, #160]	; 0xa0
 801ff82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ff84:	3b01      	subs	r3, #1
 801ff86:	9311      	str	r3, [sp, #68]	; 0x44
 801ff88:	e741      	b.n	801fe0e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 801ff8a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ff8c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ff8e:	4413      	add	r3, r2
 801ff90:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801ff92:	9327      	str	r3, [sp, #156]	; 0x9c
 801ff94:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ff96:	4413      	add	r3, r2
 801ff98:	9328      	str	r3, [sp, #160]	; 0xa0
 801ff9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ff9c:	3b01      	subs	r3, #1
 801ff9e:	930a      	str	r3, [sp, #40]	; 0x28
 801ffa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ffa2:	3303      	adds	r3, #3
 801ffa4:	930b      	str	r3, [sp, #44]	; 0x2c
 801ffa6:	e6e6      	b.n	801fd76 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801ffa8:	f47f aef8 	bne.w	801fd9c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801ffac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ffae:	2b00      	cmp	r3, #0
 801ffb0:	f340 811d 	ble.w	80201ee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801ffb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ffb8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ffba:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801ffbe:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801ffc2:	eef0 6a48 	vmov.f32	s13, s16
 801ffc6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801ffca:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801ffce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ffd2:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 801ffd6:	eef0 6a68 	vmov.f32	s13, s17
 801ffda:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ffde:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 801ffe2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801ffe6:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ffea:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ffee:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801fff2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801fff6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801fffa:	ee18 2a10 	vmov	r2, s16
 801fffe:	eeb0 8a47 	vmov.f32	s16, s14
 8020002:	fb92 f3f3 	sdiv	r3, r2, r3
 8020006:	ee18 2a90 	vmov	r2, s17
 802000a:	9329      	str	r3, [sp, #164]	; 0xa4
 802000c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802000e:	eef0 8a67 	vmov.f32	s17, s15
 8020012:	fb92 f3f3 	sdiv	r3, r2, r3
 8020016:	932a      	str	r3, [sp, #168]	; 0xa8
 8020018:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802001a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802001c:	3b01      	subs	r3, #1
 802001e:	930f      	str	r3, [sp, #60]	; 0x3c
 8020020:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020022:	bf08      	it	eq
 8020024:	4613      	moveq	r3, r2
 8020026:	930a      	str	r3, [sp, #40]	; 0x28
 8020028:	e69e      	b.n	801fd68 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 802002a:	b151      	cbz	r1, 8020042 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 802002c:	5d52      	ldrb	r2, [r2, r5]
 802002e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020030:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020034:	4402      	add	r2, r0
 8020036:	4640      	mov	r0, r8
 8020038:	46c4      	mov	ip, r8
 802003a:	e724      	b.n	801fe86 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 802003c:	4640      	mov	r0, r8
 802003e:	4642      	mov	r2, r8
 8020040:	e721      	b.n	801fe86 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 8020042:	4640      	mov	r0, r8
 8020044:	4642      	mov	r2, r8
 8020046:	e7f7      	b.n	8020038 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 8020048:	1c46      	adds	r6, r0, #1
 802004a:	d191      	bne.n	801ff70 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 802004c:	4285      	cmp	r5, r0
 802004e:	dd8f      	ble.n	801ff70 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8020050:	1c54      	adds	r4, r2, #1
 8020052:	db8d      	blt.n	801ff70 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8020054:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020056:	4294      	cmp	r4, r2
 8020058:	dd8a      	ble.n	801ff70 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 802005a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802005c:	9002      	str	r0, [sp, #8]
 802005e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020060:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8020064:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020066:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020068:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802006c:	e9cd 5300 	strd	r5, r3, [sp]
 8020070:	4639      	mov	r1, r7
 8020072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020074:	f7ff fd52 	bl	801fb1c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8020078:	e77a      	b.n	801ff70 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 802007a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 802007c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802007e:	1410      	asrs	r0, r2, #16
 8020080:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020084:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8020086:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020088:	1412      	asrs	r2, r2, #16
 802008a:	f3c3 3303 	ubfx	r3, r3, #12, #4
 802008e:	fb05 2000 	mla	r0, r5, r0, r2
 8020092:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020094:	f814 8000 	ldrb.w	r8, [r4, r0]
 8020098:	4402      	add	r2, r0
 802009a:	9809      	ldr	r0, [sp, #36]	; 0x24
 802009c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80200a0:	eb00 0708 	add.w	r7, r0, r8
 80200a4:	2b00      	cmp	r3, #0
 80200a6:	f000 8093 	beq.w	80201d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 80200aa:	7856      	ldrb	r6, [r2, #1]
 80200ac:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80200b0:	4406      	add	r6, r0
 80200b2:	2900      	cmp	r1, #0
 80200b4:	f000 8095 	beq.w	80201e2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 80200b8:	1950      	adds	r0, r2, r5
 80200ba:	5d52      	ldrb	r2, [r2, r5]
 80200bc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80200be:	7840      	ldrb	r0, [r0, #1]
 80200c0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80200c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80200c8:	4422      	add	r2, r4
 80200ca:	4420      	add	r0, r4
 80200cc:	b29b      	uxth	r3, r3
 80200ce:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80200d0:	b289      	uxth	r1, r1
 80200d2:	f10c 0c03 	add.w	ip, ip, #3
 80200d6:	f814 b008 	ldrb.w	fp, [r4, r8]
 80200da:	fb03 f901 	mul.w	r9, r3, r1
 80200de:	011b      	lsls	r3, r3, #4
 80200e0:	f896 8000 	ldrb.w	r8, [r6]
 80200e4:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80200e8:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80200ec:	eba3 0309 	sub.w	r3, r3, r9
 80200f0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80200f2:	b289      	uxth	r1, r1
 80200f4:	b29b      	uxth	r3, r3
 80200f6:	ebae 0e01 	sub.w	lr, lr, r1
 80200fa:	fb03 f808 	mul.w	r8, r3, r8
 80200fe:	fa1f fe8e 	uxth.w	lr, lr
 8020102:	fb0e 880b 	mla	r8, lr, fp, r8
 8020106:	f892 b000 	ldrb.w	fp, [r2]
 802010a:	fb01 880b 	mla	r8, r1, fp, r8
 802010e:	f890 b000 	ldrb.w	fp, [r0]
 8020112:	fb09 880b 	mla	r8, r9, fp, r8
 8020116:	f81c bc06 	ldrb.w	fp, [ip, #-6]
 802011a:	fb1b fb04 	smulbb	fp, fp, r4
 802011e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8020122:	fb08 b80a 	mla	r8, r8, sl, fp
 8020126:	fa1f f888 	uxth.w	r8, r8
 802012a:	f108 0b01 	add.w	fp, r8, #1
 802012e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8020132:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020136:	f80c 8c06 	strb.w	r8, [ip, #-6]
 802013a:	f896 8001 	ldrb.w	r8, [r6, #1]
 802013e:	f897 b001 	ldrb.w	fp, [r7, #1]
 8020142:	fb03 f808 	mul.w	r8, r3, r8
 8020146:	fb0e 880b 	mla	r8, lr, fp, r8
 802014a:	f892 b001 	ldrb.w	fp, [r2, #1]
 802014e:	fb01 880b 	mla	r8, r1, fp, r8
 8020152:	f890 b001 	ldrb.w	fp, [r0, #1]
 8020156:	fb09 880b 	mla	r8, r9, fp, r8
 802015a:	f81c bc05 	ldrb.w	fp, [ip, #-5]
 802015e:	fb1b fb04 	smulbb	fp, fp, r4
 8020162:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8020166:	fb08 b80a 	mla	r8, r8, sl, fp
 802016a:	fa1f f888 	uxth.w	r8, r8
 802016e:	f108 0b01 	add.w	fp, r8, #1
 8020172:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8020176:	ea4f 2828 	mov.w	r8, r8, asr #8
 802017a:	f80c 8c05 	strb.w	r8, [ip, #-5]
 802017e:	78b6      	ldrb	r6, [r6, #2]
 8020180:	78bf      	ldrb	r7, [r7, #2]
 8020182:	4373      	muls	r3, r6
 8020184:	7896      	ldrb	r6, [r2, #2]
 8020186:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020188:	fb0e 3307 	mla	r3, lr, r7, r3
 802018c:	fb01 3306 	mla	r3, r1, r6, r3
 8020190:	7886      	ldrb	r6, [r0, #2]
 8020192:	fb09 3906 	mla	r9, r9, r6, r3
 8020196:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 802019a:	fb13 f304 	smulbb	r3, r3, r4
 802019e:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80201a2:	fb09 390a 	mla	r9, r9, sl, r3
 80201a6:	fa1f f989 	uxth.w	r9, r9
 80201aa:	f109 0301 	add.w	r3, r9, #1
 80201ae:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 80201b2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80201b4:	4413      	add	r3, r2
 80201b6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80201b8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80201bc:	9327      	str	r3, [sp, #156]	; 0x9c
 80201be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80201c0:	f80c 9c04 	strb.w	r9, [ip, #-4]
 80201c4:	4413      	add	r3, r2
 80201c6:	9328      	str	r3, [sp, #160]	; 0xa0
 80201c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80201ca:	3b01      	subs	r3, #1
 80201cc:	9311      	str	r3, [sp, #68]	; 0x44
 80201ce:	e601      	b.n	801fdd4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80201d0:	b151      	cbz	r1, 80201e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 80201d2:	5d52      	ldrb	r2, [r2, r5]
 80201d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80201d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80201da:	4402      	add	r2, r0
 80201dc:	4638      	mov	r0, r7
 80201de:	463e      	mov	r6, r7
 80201e0:	e774      	b.n	80200cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 80201e2:	4638      	mov	r0, r7
 80201e4:	463a      	mov	r2, r7
 80201e6:	e771      	b.n	80200cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 80201e8:	4638      	mov	r0, r7
 80201ea:	463a      	mov	r2, r7
 80201ec:	e7f7      	b.n	80201de <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 80201ee:	b015      	add	sp, #84	; 0x54
 80201f0:	ecbd 8b08 	vpop	{d8-d11}
 80201f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080201f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 80201f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201fc:	780d      	ldrb	r5, [r1, #0]
 80201fe:	f891 9002 	ldrb.w	r9, [r1, #2]
 8020202:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 8020206:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 802020a:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 802020e:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8020212:	f891 9001 	ldrb.w	r9, [r1, #1]
 8020216:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 802021a:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 802021e:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8020222:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 8020226:	9501      	str	r5, [sp, #4]
 8020228:	fb06 470c 	mla	r7, r6, ip, r4
 802022c:	2e00      	cmp	r6, #0
 802022e:	eb02 0e07 	add.w	lr, r2, r7
 8020232:	db46      	blt.n	80202c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 8020234:	45b0      	cmp	r8, r6
 8020236:	dd44      	ble.n	80202c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 8020238:	2c00      	cmp	r4, #0
 802023a:	db40      	blt.n	80202be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 802023c:	45a4      	cmp	ip, r4
 802023e:	dd3e      	ble.n	80202be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 8020240:	5dd7      	ldrb	r7, [r2, r7]
 8020242:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020246:	441f      	add	r7, r3
 8020248:	1c62      	adds	r2, r4, #1
 802024a:	d43d      	bmi.n	80202c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 802024c:	4594      	cmp	ip, r2
 802024e:	dd3b      	ble.n	80202c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 8020250:	f1ba 0f00 	cmp.w	sl, #0
 8020254:	d038      	beq.n	80202c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 8020256:	f89e 5001 	ldrb.w	r5, [lr, #1]
 802025a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802025e:	441d      	add	r5, r3
 8020260:	3601      	adds	r6, #1
 8020262:	d435      	bmi.n	80202d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 8020264:	45b0      	cmp	r8, r6
 8020266:	dd33      	ble.n	80202d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 8020268:	b390      	cbz	r0, 80202d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 802026a:	2c00      	cmp	r4, #0
 802026c:	db2e      	blt.n	80202cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 802026e:	45a4      	cmp	ip, r4
 8020270:	dd2c      	ble.n	80202cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 8020272:	f81e 600c 	ldrb.w	r6, [lr, ip]
 8020276:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802027a:	441e      	add	r6, r3
 802027c:	1c62      	adds	r2, r4, #1
 802027e:	d42a      	bmi.n	80202d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 8020280:	4594      	cmp	ip, r2
 8020282:	dd28      	ble.n	80202d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 8020284:	f1ba 0f00 	cmp.w	sl, #0
 8020288:	d025      	beq.n	80202d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 802028a:	44f4      	add	ip, lr
 802028c:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8020290:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020294:	4413      	add	r3, r2
 8020296:	f1ba 0f0f 	cmp.w	sl, #15
 802029a:	f897 8000 	ldrb.w	r8, [r7]
 802029e:	f895 9000 	ldrb.w	r9, [r5]
 80202a2:	f896 e000 	ldrb.w	lr, [r6]
 80202a6:	f893 c000 	ldrb.w	ip, [r3]
 80202aa:	d801      	bhi.n	80202b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 80202ac:	280f      	cmp	r0, #15
 80202ae:	d914      	bls.n	80202da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 80202b0:	4b29      	ldr	r3, [pc, #164]	; (8020358 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 80202b2:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80202b6:	4a29      	ldr	r2, [pc, #164]	; (802035c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 80202b8:	4829      	ldr	r0, [pc, #164]	; (8020360 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 80202ba:	f005 ff39 	bl	8026130 <__assert_func>
 80202be:	af01      	add	r7, sp, #4
 80202c0:	e7c2      	b.n	8020248 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 80202c2:	ad01      	add	r5, sp, #4
 80202c4:	462f      	mov	r7, r5
 80202c6:	e7cb      	b.n	8020260 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 80202c8:	ad01      	add	r5, sp, #4
 80202ca:	e7c9      	b.n	8020260 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 80202cc:	ae01      	add	r6, sp, #4
 80202ce:	e7d5      	b.n	802027c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 80202d0:	ab01      	add	r3, sp, #4
 80202d2:	461e      	mov	r6, r3
 80202d4:	e7df      	b.n	8020296 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 80202d6:	ab01      	add	r3, sp, #4
 80202d8:	e7dd      	b.n	8020296 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 80202da:	fa1f f48a 	uxth.w	r4, sl
 80202de:	b280      	uxth	r0, r0
 80202e0:	fb04 fa00 	mul.w	sl, r4, r0
 80202e4:	0124      	lsls	r4, r4, #4
 80202e6:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80202ea:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 80202ee:	b282      	uxth	r2, r0
 80202f0:	eba4 000a 	sub.w	r0, r4, sl
 80202f4:	ebab 0b02 	sub.w	fp, fp, r2
 80202f8:	b280      	uxth	r0, r0
 80202fa:	fa1f fb8b 	uxth.w	fp, fp
 80202fe:	fb00 f909 	mul.w	r9, r0, r9
 8020302:	fb0b 9808 	mla	r8, fp, r8, r9
 8020306:	fb02 8e0e 	mla	lr, r2, lr, r8
 802030a:	fb0a ec0c 	mla	ip, sl, ip, lr
 802030e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020312:	f881 c000 	strb.w	ip, [r1]
 8020316:	786c      	ldrb	r4, [r5, #1]
 8020318:	f897 c001 	ldrb.w	ip, [r7, #1]
 802031c:	4344      	muls	r4, r0
 802031e:	fb0b 4c0c 	mla	ip, fp, ip, r4
 8020322:	7874      	ldrb	r4, [r6, #1]
 8020324:	fb02 cc04 	mla	ip, r2, r4, ip
 8020328:	785c      	ldrb	r4, [r3, #1]
 802032a:	fb0a c404 	mla	r4, sl, r4, ip
 802032e:	1224      	asrs	r4, r4, #8
 8020330:	704c      	strb	r4, [r1, #1]
 8020332:	78ad      	ldrb	r5, [r5, #2]
 8020334:	78bc      	ldrb	r4, [r7, #2]
 8020336:	4368      	muls	r0, r5
 8020338:	fb0b 0b04 	mla	fp, fp, r4, r0
 802033c:	78b0      	ldrb	r0, [r6, #2]
 802033e:	fb02 b000 	mla	r0, r2, r0, fp
 8020342:	789a      	ldrb	r2, [r3, #2]
 8020344:	fb0a 0a02 	mla	sl, sl, r2, r0
 8020348:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802034c:	f881 a002 	strb.w	sl, [r1, #2]
 8020350:	b003      	add	sp, #12
 8020352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020356:	bf00      	nop
 8020358:	0802abfb 	.word	0x0802abfb
 802035c:	0802b0f2 	.word	0x0802b0f2
 8020360:	0802acc4 	.word	0x0802acc4

08020364 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8020364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020368:	ed2d 8b0a 	vpush	{d8-d12}
 802036c:	b08f      	sub	sp, #60	; 0x3c
 802036e:	eeb0 aa40 	vmov.f32	s20, s0
 8020372:	eef0 9a60 	vmov.f32	s19, s1
 8020376:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8020378:	eeb0 9a41 	vmov.f32	s18, s2
 802037c:	9307      	str	r3, [sp, #28]
 802037e:	eeb0 8a62 	vmov.f32	s16, s5
 8020382:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 8020386:	eef0 8a43 	vmov.f32	s17, s6
 802038a:	900d      	str	r0, [sp, #52]	; 0x34
 802038c:	eeb0 ca44 	vmov.f32	s24, s8
 8020390:	6860      	ldr	r0, [r4, #4]
 8020392:	eef0 ba64 	vmov.f32	s23, s9
 8020396:	9309      	str	r3, [sp, #36]	; 0x24
 8020398:	eeb0 ba45 	vmov.f32	s22, s10
 802039c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80203a0:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 80203a4:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 80203a8:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 80203ac:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80203ae:	fb00 1303 	mla	r3, r0, r3, r1
 80203b2:	6821      	ldr	r1, [r4, #0]
 80203b4:	6854      	ldr	r4, [r2, #4]
 80203b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80203ba:	3404      	adds	r4, #4
 80203bc:	18cb      	adds	r3, r1, r3
 80203be:	9308      	str	r3, [sp, #32]
 80203c0:	6813      	ldr	r3, [r2, #0]
 80203c2:	930a      	str	r3, [sp, #40]	; 0x28
 80203c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80203c6:	2b00      	cmp	r3, #0
 80203c8:	dc03      	bgt.n	80203d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80203ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80203cc:	2b00      	cmp	r3, #0
 80203ce:	f340 81d2 	ble.w	8020776 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 80203d2:	9b07      	ldr	r3, [sp, #28]
 80203d4:	2b00      	cmp	r3, #0
 80203d6:	f340 80e3 	ble.w	80205a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 80203da:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80203dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80203de:	1412      	asrs	r2, r2, #16
 80203e0:	ea4f 4323 	mov.w	r3, r3, asr #16
 80203e4:	d42f      	bmi.n	8020446 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 80203e6:	1c51      	adds	r1, r2, #1
 80203e8:	428d      	cmp	r5, r1
 80203ea:	dd2f      	ble.n	802044c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 80203ec:	2b00      	cmp	r3, #0
 80203ee:	db2d      	blt.n	802044c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 80203f0:	1c59      	adds	r1, r3, #1
 80203f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80203f4:	4288      	cmp	r0, r1
 80203f6:	dd29      	ble.n	802044c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 80203f8:	9b07      	ldr	r3, [sp, #28]
 80203fa:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80203fc:	3b01      	subs	r3, #1
 80203fe:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8020400:	fb02 1203 	mla	r2, r2, r3, r1
 8020404:	1412      	asrs	r2, r2, #16
 8020406:	d42b      	bmi.n	8020460 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8020408:	3201      	adds	r2, #1
 802040a:	4295      	cmp	r5, r2
 802040c:	dd28      	ble.n	8020460 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802040e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8020410:	9924      	ldr	r1, [sp, #144]	; 0x90
 8020412:	fb02 1303 	mla	r3, r2, r3, r1
 8020416:	141b      	asrs	r3, r3, #16
 8020418:	d422      	bmi.n	8020460 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802041a:	3301      	adds	r3, #1
 802041c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802041e:	429a      	cmp	r2, r3
 8020420:	dd1e      	ble.n	8020460 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8020422:	9b08      	ldr	r3, [sp, #32]
 8020424:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8020428:	f103 0803 	add.w	r8, r3, #3
 802042c:	f1ba 0f00 	cmp.w	sl, #0
 8020430:	f300 8119 	bgt.w	8020666 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 8020434:	9b07      	ldr	r3, [sp, #28]
 8020436:	9a08      	ldr	r2, [sp, #32]
 8020438:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802043c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020440:	441a      	add	r2, r3
 8020442:	9208      	str	r2, [sp, #32]
 8020444:	e0ae      	b.n	80205a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 8020446:	1c51      	adds	r1, r2, #1
 8020448:	f040 809b 	bne.w	8020582 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 802044c:	42aa      	cmp	r2, r5
 802044e:	f280 8098 	bge.w	8020582 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8020452:	1c5a      	adds	r2, r3, #1
 8020454:	f2c0 8095 	blt.w	8020582 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8020458:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802045a:	4293      	cmp	r3, r2
 802045c:	f280 8091 	bge.w	8020582 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8020460:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 8020464:	f1bb 0f00 	cmp.w	fp, #0
 8020468:	dde4      	ble.n	8020434 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 802046a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802046c:	9823      	ldr	r0, [sp, #140]	; 0x8c
 802046e:	141a      	asrs	r2, r3, #16
 8020470:	9924      	ldr	r1, [sp, #144]	; 0x90
 8020472:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020474:	1400      	asrs	r0, r0, #16
 8020476:	f3c1 3103 	ubfx	r1, r1, #12, #4
 802047a:	f3c3 3303 	ubfx	r3, r3, #12, #4
 802047e:	f100 80dc 	bmi.w	802063a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 8020482:	1c47      	adds	r7, r0, #1
 8020484:	42bd      	cmp	r5, r7
 8020486:	f340 80da 	ble.w	802063e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 802048a:	2a00      	cmp	r2, #0
 802048c:	f2c0 80d7 	blt.w	802063e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8020490:	f102 0c01 	add.w	ip, r2, #1
 8020494:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020496:	4567      	cmp	r7, ip
 8020498:	f340 80d1 	ble.w	802063e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 802049c:	fb02 0005 	mla	r0, r2, r5, r0
 80204a0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80204a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80204a4:	f817 8000 	ldrb.w	r8, [r7, r0]
 80204a8:	4402      	add	r2, r0
 80204aa:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80204ae:	eb04 0c08 	add.w	ip, r4, r8
 80204b2:	2b00      	cmp	r3, #0
 80204b4:	f000 80b3 	beq.w	802061e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 80204b8:	7857      	ldrb	r7, [r2, #1]
 80204ba:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80204be:	4427      	add	r7, r4
 80204c0:	2900      	cmp	r1, #0
 80204c2:	f000 80b4 	beq.w	802062e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 80204c6:	1950      	adds	r0, r2, r5
 80204c8:	5d52      	ldrb	r2, [r2, r5]
 80204ca:	7840      	ldrb	r0, [r0, #1]
 80204cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80204d0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80204d4:	4422      	add	r2, r4
 80204d6:	4420      	add	r0, r4
 80204d8:	b29b      	uxth	r3, r3
 80204da:	f814 a008 	ldrb.w	sl, [r4, r8]
 80204de:	b289      	uxth	r1, r1
 80204e0:	f897 8000 	ldrb.w	r8, [r7]
 80204e4:	fb03 f901 	mul.w	r9, r3, r1
 80204e8:	011b      	lsls	r3, r3, #4
 80204ea:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80204ee:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80204f2:	eba3 0309 	sub.w	r3, r3, r9
 80204f6:	b289      	uxth	r1, r1
 80204f8:	b29b      	uxth	r3, r3
 80204fa:	ebae 0e01 	sub.w	lr, lr, r1
 80204fe:	fb03 f808 	mul.w	r8, r3, r8
 8020502:	fa1f fe8e 	uxth.w	lr, lr
 8020506:	fb0e 880a 	mla	r8, lr, sl, r8
 802050a:	f892 a000 	ldrb.w	sl, [r2]
 802050e:	fb01 880a 	mla	r8, r1, sl, r8
 8020512:	f890 a000 	ldrb.w	sl, [r0]
 8020516:	fb09 880a 	mla	r8, r9, sl, r8
 802051a:	ea4f 2828 	mov.w	r8, r8, asr #8
 802051e:	f886 8000 	strb.w	r8, [r6]
 8020522:	f897 8001 	ldrb.w	r8, [r7, #1]
 8020526:	f89c a001 	ldrb.w	sl, [ip, #1]
 802052a:	fb03 f808 	mul.w	r8, r3, r8
 802052e:	fb0e 880a 	mla	r8, lr, sl, r8
 8020532:	f892 a001 	ldrb.w	sl, [r2, #1]
 8020536:	fb01 880a 	mla	r8, r1, sl, r8
 802053a:	f890 a001 	ldrb.w	sl, [r0, #1]
 802053e:	fb09 880a 	mla	r8, r9, sl, r8
 8020542:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020546:	f886 8001 	strb.w	r8, [r6, #1]
 802054a:	78bf      	ldrb	r7, [r7, #2]
 802054c:	f89c c002 	ldrb.w	ip, [ip, #2]
 8020550:	437b      	muls	r3, r7
 8020552:	7892      	ldrb	r2, [r2, #2]
 8020554:	fb0e 330c 	mla	r3, lr, ip, r3
 8020558:	fb01 3102 	mla	r1, r1, r2, r3
 802055c:	7882      	ldrb	r2, [r0, #2]
 802055e:	fb09 1902 	mla	r9, r9, r2, r1
 8020562:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020566:	f886 9002 	strb.w	r9, [r6, #2]
 802056a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802056c:	3603      	adds	r6, #3
 802056e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8020570:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020574:	4413      	add	r3, r2
 8020576:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8020578:	9323      	str	r3, [sp, #140]	; 0x8c
 802057a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802057c:	4413      	add	r3, r2
 802057e:	9324      	str	r3, [sp, #144]	; 0x90
 8020580:	e770      	b.n	8020464 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 8020582:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020584:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8020586:	4413      	add	r3, r2
 8020588:	9a26      	ldr	r2, [sp, #152]	; 0x98
 802058a:	9323      	str	r3, [sp, #140]	; 0x8c
 802058c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802058e:	4413      	add	r3, r2
 8020590:	9324      	str	r3, [sp, #144]	; 0x90
 8020592:	9b07      	ldr	r3, [sp, #28]
 8020594:	3b01      	subs	r3, #1
 8020596:	9307      	str	r3, [sp, #28]
 8020598:	9b08      	ldr	r3, [sp, #32]
 802059a:	3303      	adds	r3, #3
 802059c:	9308      	str	r3, [sp, #32]
 802059e:	e718      	b.n	80203d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80205a0:	f47f af2a 	bne.w	80203f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 80205a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80205a6:	2b00      	cmp	r3, #0
 80205a8:	f340 80e5 	ble.w	8020776 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 80205ac:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80205b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80205b2:	ee79 9aab 	vadd.f32	s19, s19, s23
 80205b6:	eef0 6a48 	vmov.f32	s13, s16
 80205ba:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80205be:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80205c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80205c6:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80205ca:	eef0 6a68 	vmov.f32	s13, s17
 80205ce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80205d2:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 80205d6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80205da:	ee69 7a27 	vmul.f32	s15, s18, s15
 80205de:	ee37 8a48 	vsub.f32	s16, s14, s16
 80205e2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80205e6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80205ea:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80205ee:	ee18 2a10 	vmov	r2, s16
 80205f2:	eeb0 8a47 	vmov.f32	s16, s14
 80205f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80205fa:	ee18 2a90 	vmov	r2, s17
 80205fe:	9325      	str	r3, [sp, #148]	; 0x94
 8020600:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020602:	eef0 8a67 	vmov.f32	s17, s15
 8020606:	fb92 f3f3 	sdiv	r3, r2, r3
 802060a:	9326      	str	r3, [sp, #152]	; 0x98
 802060c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802060e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020610:	3b01      	subs	r3, #1
 8020612:	930b      	str	r3, [sp, #44]	; 0x2c
 8020614:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020616:	bf08      	it	eq
 8020618:	4613      	moveq	r3, r2
 802061a:	9307      	str	r3, [sp, #28]
 802061c:	e6d2      	b.n	80203c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 802061e:	b149      	cbz	r1, 8020634 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8020620:	5d52      	ldrb	r2, [r2, r5]
 8020622:	4660      	mov	r0, ip
 8020624:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020628:	4422      	add	r2, r4
 802062a:	4667      	mov	r7, ip
 802062c:	e754      	b.n	80204d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 802062e:	4660      	mov	r0, ip
 8020630:	4662      	mov	r2, ip
 8020632:	e751      	b.n	80204d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 8020634:	4660      	mov	r0, ip
 8020636:	4662      	mov	r2, ip
 8020638:	e7f7      	b.n	802062a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 802063a:	1c47      	adds	r7, r0, #1
 802063c:	d195      	bne.n	802056a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 802063e:	4285      	cmp	r5, r0
 8020640:	dd93      	ble.n	802056a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8020642:	1c57      	adds	r7, r2, #1
 8020644:	db91      	blt.n	802056a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8020646:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020648:	4297      	cmp	r7, r2
 802064a:	dd8e      	ble.n	802056a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 802064c:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8020650:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8020654:	e9cd 5700 	strd	r5, r7, [sp]
 8020658:	4623      	mov	r3, r4
 802065a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802065c:	4631      	mov	r1, r6
 802065e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020660:	f7ff fdca 	bl	80201f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8020664:	e781      	b.n	802056a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8020666:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8020668:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 802066a:	1410      	asrs	r0, r2, #16
 802066c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020670:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8020672:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020674:	1412      	asrs	r2, r2, #16
 8020676:	f3c3 3303 	ubfx	r3, r3, #12, #4
 802067a:	fb05 2000 	mla	r0, r5, r0, r2
 802067e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020680:	f816 e000 	ldrb.w	lr, [r6, r0]
 8020684:	4402      	add	r2, r0
 8020686:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 802068a:	eb04 070e 	add.w	r7, r4, lr
 802068e:	2b00      	cmp	r3, #0
 8020690:	d063      	beq.n	802075a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 8020692:	7856      	ldrb	r6, [r2, #1]
 8020694:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020698:	4426      	add	r6, r4
 802069a:	2900      	cmp	r1, #0
 802069c:	d065      	beq.n	802076a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 802069e:	1950      	adds	r0, r2, r5
 80206a0:	5d52      	ldrb	r2, [r2, r5]
 80206a2:	7840      	ldrb	r0, [r0, #1]
 80206a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80206a8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80206ac:	4422      	add	r2, r4
 80206ae:	4420      	add	r0, r4
 80206b0:	b29b      	uxth	r3, r3
 80206b2:	f814 b00e 	ldrb.w	fp, [r4, lr]
 80206b6:	b289      	uxth	r1, r1
 80206b8:	f896 e000 	ldrb.w	lr, [r6]
 80206bc:	f108 0803 	add.w	r8, r8, #3
 80206c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80206c4:	fb03 f901 	mul.w	r9, r3, r1
 80206c8:	011b      	lsls	r3, r3, #4
 80206ca:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80206ce:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 80206d2:	eba3 0309 	sub.w	r3, r3, r9
 80206d6:	b289      	uxth	r1, r1
 80206d8:	b29b      	uxth	r3, r3
 80206da:	ebac 0c01 	sub.w	ip, ip, r1
 80206de:	fb03 fe0e 	mul.w	lr, r3, lr
 80206e2:	fa1f fc8c 	uxth.w	ip, ip
 80206e6:	fb0c ee0b 	mla	lr, ip, fp, lr
 80206ea:	f892 b000 	ldrb.w	fp, [r2]
 80206ee:	fb01 ee0b 	mla	lr, r1, fp, lr
 80206f2:	f890 b000 	ldrb.w	fp, [r0]
 80206f6:	fb09 ee0b 	mla	lr, r9, fp, lr
 80206fa:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80206fe:	f808 ec06 	strb.w	lr, [r8, #-6]
 8020702:	f896 e001 	ldrb.w	lr, [r6, #1]
 8020706:	f897 b001 	ldrb.w	fp, [r7, #1]
 802070a:	fb03 fe0e 	mul.w	lr, r3, lr
 802070e:	fb0c ee0b 	mla	lr, ip, fp, lr
 8020712:	f892 b001 	ldrb.w	fp, [r2, #1]
 8020716:	fb01 ee0b 	mla	lr, r1, fp, lr
 802071a:	f890 b001 	ldrb.w	fp, [r0, #1]
 802071e:	fb09 ee0b 	mla	lr, r9, fp, lr
 8020722:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020726:	f808 ec05 	strb.w	lr, [r8, #-5]
 802072a:	78b6      	ldrb	r6, [r6, #2]
 802072c:	78bf      	ldrb	r7, [r7, #2]
 802072e:	4373      	muls	r3, r6
 8020730:	7896      	ldrb	r6, [r2, #2]
 8020732:	7882      	ldrb	r2, [r0, #2]
 8020734:	fb0c 3307 	mla	r3, ip, r7, r3
 8020738:	fb01 3306 	mla	r3, r1, r6, r3
 802073c:	fb09 3902 	mla	r9, r9, r2, r3
 8020740:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020742:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8020744:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020748:	4413      	add	r3, r2
 802074a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 802074c:	f808 9c04 	strb.w	r9, [r8, #-4]
 8020750:	9323      	str	r3, [sp, #140]	; 0x8c
 8020752:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020754:	4413      	add	r3, r2
 8020756:	9324      	str	r3, [sp, #144]	; 0x90
 8020758:	e668      	b.n	802042c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 802075a:	b149      	cbz	r1, 8020770 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 802075c:	5d52      	ldrb	r2, [r2, r5]
 802075e:	4638      	mov	r0, r7
 8020760:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020764:	4422      	add	r2, r4
 8020766:	463e      	mov	r6, r7
 8020768:	e7a2      	b.n	80206b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 802076a:	4638      	mov	r0, r7
 802076c:	463a      	mov	r2, r7
 802076e:	e79f      	b.n	80206b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 8020770:	4638      	mov	r0, r7
 8020772:	463a      	mov	r2, r7
 8020774:	e7f7      	b.n	8020766 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 8020776:	b00f      	add	sp, #60	; 0x3c
 8020778:	ecbd 8b0a 	vpop	{d8-d12}
 802077c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020780 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8020780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020784:	b087      	sub	sp, #28
 8020786:	7888      	ldrb	r0, [r1, #2]
 8020788:	9002      	str	r0, [sp, #8]
 802078a:	7848      	ldrb	r0, [r1, #1]
 802078c:	9e02      	ldr	r6, [sp, #8]
 802078e:	9003      	str	r0, [sp, #12]
 8020790:	7808      	ldrb	r0, [r1, #0]
 8020792:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8020796:	9004      	str	r0, [sp, #16]
 8020798:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 802079c:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 80207a0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80207a4:	9e03      	ldr	r6, [sp, #12]
 80207a6:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 80207aa:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 80207ae:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 80207b2:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 80207b6:	fb04 7508 	mla	r5, r4, r8, r7
 80207ba:	2c00      	cmp	r4, #0
 80207bc:	eb02 0905 	add.w	r9, r2, r5
 80207c0:	db45      	blt.n	802084e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 80207c2:	45a2      	cmp	sl, r4
 80207c4:	dd43      	ble.n	802084e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 80207c6:	2f00      	cmp	r7, #0
 80207c8:	db3f      	blt.n	802084a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 80207ca:	45b8      	cmp	r8, r7
 80207cc:	dd3d      	ble.n	802084a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 80207ce:	5d52      	ldrb	r2, [r2, r5]
 80207d0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80207d4:	1c7a      	adds	r2, r7, #1
 80207d6:	d43d      	bmi.n	8020854 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 80207d8:	4590      	cmp	r8, r2
 80207da:	dd3b      	ble.n	8020854 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 80207dc:	f1bc 0f00 	cmp.w	ip, #0
 80207e0:	d038      	beq.n	8020854 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 80207e2:	f899 2001 	ldrb.w	r2, [r9, #1]
 80207e6:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80207ea:	3401      	adds	r4, #1
 80207ec:	d436      	bmi.n	802085c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 80207ee:	45a2      	cmp	sl, r4
 80207f0:	dd34      	ble.n	802085c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 80207f2:	f1be 0f00 	cmp.w	lr, #0
 80207f6:	d031      	beq.n	802085c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 80207f8:	2f00      	cmp	r7, #0
 80207fa:	db2d      	blt.n	8020858 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 80207fc:	45b8      	cmp	r8, r7
 80207fe:	dd2b      	ble.n	8020858 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 8020800:	f819 2008 	ldrb.w	r2, [r9, r8]
 8020804:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8020808:	3701      	adds	r7, #1
 802080a:	d409      	bmi.n	8020820 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 802080c:	45b8      	cmp	r8, r7
 802080e:	dd07      	ble.n	8020820 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8020810:	f1bc 0f00 	cmp.w	ip, #0
 8020814:	d004      	beq.n	8020820 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8020816:	44c8      	add	r8, r9
 8020818:	f898 2001 	ldrb.w	r2, [r8, #1]
 802081c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8020820:	f1bc 0f0f 	cmp.w	ip, #15
 8020824:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8020828:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 802082c:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8020830:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8020834:	d802      	bhi.n	802083c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 8020836:	f1be 0f0f 	cmp.w	lr, #15
 802083a:	d911      	bls.n	8020860 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 802083c:	4b77      	ldr	r3, [pc, #476]	; (8020a1c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 802083e:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8020842:	4a77      	ldr	r2, [pc, #476]	; (8020a20 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 8020844:	4877      	ldr	r0, [pc, #476]	; (8020a24 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 8020846:	f005 fc73 	bl	8026130 <__assert_func>
 802084a:	4606      	mov	r6, r0
 802084c:	e7c2      	b.n	80207d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 802084e:	4605      	mov	r5, r0
 8020850:	4606      	mov	r6, r0
 8020852:	e7ca      	b.n	80207ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 8020854:	4605      	mov	r5, r0
 8020856:	e7c8      	b.n	80207ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 8020858:	4604      	mov	r4, r0
 802085a:	e7d5      	b.n	8020808 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 802085c:	4604      	mov	r4, r0
 802085e:	e7df      	b.n	8020820 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8020860:	fa1f fc8c 	uxth.w	ip, ip
 8020864:	fa1f f28e 	uxth.w	r2, lr
 8020868:	fb02 fe0c 	mul.w	lr, r2, ip
 802086c:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8020870:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 8020874:	ebac 070e 	sub.w	r7, ip, lr
 8020878:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 802087c:	b292      	uxth	r2, r2
 802087e:	b2bf      	uxth	r7, r7
 8020880:	1a9b      	subs	r3, r3, r2
 8020882:	fb07 fc0a 	mul.w	ip, r7, sl
 8020886:	b29b      	uxth	r3, r3
 8020888:	fb03 cc0b 	mla	ip, r3, fp, ip
 802088c:	9301      	str	r3, [sp, #4]
 802088e:	fb02 cc09 	mla	ip, r2, r9, ip
 8020892:	fb0e cc08 	mla	ip, lr, r8, ip
 8020896:	f3cc 2307 	ubfx	r3, ip, #8, #8
 802089a:	9305      	str	r3, [sp, #20]
 802089c:	2b00      	cmp	r3, #0
 802089e:	f000 80b9 	beq.w	8020a14 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 80208a2:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80208a6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80208aa:	fb0b fc0c 	mul.w	ip, fp, ip
 80208ae:	fb0b f606 	mul.w	r6, fp, r6
 80208b2:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80208b6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80208ba:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80208be:	44dc      	add	ip, fp
 80208c0:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80208c4:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80208c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80208cc:	fb0a fb0b 	mul.w	fp, sl, fp
 80208d0:	fb0a fa05 	mul.w	sl, sl, r5
 80208d4:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 80208d8:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80208dc:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 80208e0:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80208e4:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80208e8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80208ec:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 80208f0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80208f4:	0a36      	lsrs	r6, r6, #8
 80208f6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80208fa:	44dc      	add	ip, fp
 80208fc:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020900:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020904:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020908:	fb09 fb0b 	mul.w	fp, r9, fp
 802090c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020910:	fb09 f904 	mul.w	r9, r9, r4
 8020914:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020918:	ea4f 251b 	mov.w	r5, fp, lsr #8
 802091c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020920:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8020924:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020928:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802092c:	fb0c fc07 	mul.w	ip, ip, r7
 8020930:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8020934:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 8020938:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802093c:	445d      	add	r5, fp
 802093e:	fb08 f404 	mul.w	r4, r8, r4
 8020942:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020946:	fb08 f800 	mul.w	r8, r8, r0
 802094a:	0a2d      	lsrs	r5, r5, #8
 802094c:	0a20      	lsrs	r0, r4, #8
 802094e:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8020952:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020956:	fb07 f70a 	mul.w	r7, r7, sl
 802095a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802095e:	4404      	add	r4, r0
 8020960:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8020964:	0a24      	lsrs	r4, r4, #8
 8020966:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 802096a:	9801      	ldr	r0, [sp, #4]
 802096c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020970:	fb03 cc00 	mla	ip, r3, r0, ip
 8020974:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020978:	fb00 7606 	mla	r6, r0, r6, r7
 802097c:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 8020980:	fb04 cc0e 	mla	ip, r4, lr, ip
 8020984:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8020988:	b280      	uxth	r0, r0
 802098a:	9c04      	ldr	r4, [sp, #16]
 802098c:	fb05 cc02 	mla	ip, r5, r2, ip
 8020990:	fb0e 6e08 	mla	lr, lr, r8, r6
 8020994:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020998:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 802099c:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 80209a0:	fb02 ec0c 	mla	ip, r2, ip, lr
 80209a4:	9a05      	ldr	r2, [sp, #20]
 80209a6:	4342      	muls	r2, r0
 80209a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80209ac:	1c53      	adds	r3, r2, #1
 80209ae:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80209b2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80209b6:	ea45 0c0c 	orr.w	ip, r5, ip
 80209ba:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80209be:	fa5f f28c 	uxtb.w	r2, ip
 80209c2:	b2db      	uxtb	r3, r3
 80209c4:	fb14 f403 	smulbb	r4, r4, r3
 80209c8:	fb02 4200 	mla	r2, r2, r0, r4
 80209cc:	b292      	uxth	r2, r2
 80209ce:	1c54      	adds	r4, r2, #1
 80209d0:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 80209d4:	9c03      	ldr	r4, [sp, #12]
 80209d6:	fb14 f403 	smulbb	r4, r4, r3
 80209da:	1212      	asrs	r2, r2, #8
 80209dc:	700a      	strb	r2, [r1, #0]
 80209de:	f3cc 2207 	ubfx	r2, ip, #8, #8
 80209e2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80209e6:	fb02 4200 	mla	r2, r2, r0, r4
 80209ea:	b292      	uxth	r2, r2
 80209ec:	1c54      	adds	r4, r2, #1
 80209ee:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 80209f2:	1212      	asrs	r2, r2, #8
 80209f4:	704a      	strb	r2, [r1, #1]
 80209f6:	9a02      	ldr	r2, [sp, #8]
 80209f8:	fb12 f303 	smulbb	r3, r2, r3
 80209fc:	fb0c 3c00 	mla	ip, ip, r0, r3
 8020a00:	fa1f fc8c 	uxth.w	ip, ip
 8020a04:	f10c 0301 	add.w	r3, ip, #1
 8020a08:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8020a0c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020a10:	f881 c002 	strb.w	ip, [r1, #2]
 8020a14:	b007      	add	sp, #28
 8020a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a1a:	bf00      	nop
 8020a1c:	0802abfb 	.word	0x0802abfb
 8020a20:	0802b0f2 	.word	0x0802b0f2
 8020a24:	0802acc4 	.word	0x0802acc4

08020a28 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8020a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a2c:	ed2d 8b08 	vpush	{d8-d11}
 8020a30:	b09b      	sub	sp, #108	; 0x6c
 8020a32:	eeb0 aa40 	vmov.f32	s20, s0
 8020a36:	eef0 9a60 	vmov.f32	s19, s1
 8020a3a:	930a      	str	r3, [sp, #40]	; 0x28
 8020a3c:	eeb0 9a41 	vmov.f32	s18, s2
 8020a40:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 8020a44:	eeb0 8a62 	vmov.f32	s16, s5
 8020a48:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 8020a4a:	eef0 8a43 	vmov.f32	s17, s6
 8020a4e:	9312      	str	r3, [sp, #72]	; 0x48
 8020a50:	eef0 ba44 	vmov.f32	s23, s8
 8020a54:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8020a58:	eeb0 ba64 	vmov.f32	s22, s9
 8020a5c:	9019      	str	r0, [sp, #100]	; 0x64
 8020a5e:	eef0 aa45 	vmov.f32	s21, s10
 8020a62:	9114      	str	r1, [sp, #80]	; 0x50
 8020a64:	9317      	str	r3, [sp, #92]	; 0x5c
 8020a66:	6868      	ldr	r0, [r5, #4]
 8020a68:	9218      	str	r2, [sp, #96]	; 0x60
 8020a6a:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8020a6c:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 8020a70:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8020a74:	fb00 1303 	mla	r3, r0, r3, r1
 8020a78:	6829      	ldr	r1, [r5, #0]
 8020a7a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020a7e:	18cb      	adds	r3, r1, r3
 8020a80:	930d      	str	r3, [sp, #52]	; 0x34
 8020a82:	6813      	ldr	r3, [r2, #0]
 8020a84:	9313      	str	r3, [sp, #76]	; 0x4c
 8020a86:	6853      	ldr	r3, [r2, #4]
 8020a88:	3304      	adds	r3, #4
 8020a8a:	9309      	str	r3, [sp, #36]	; 0x24
 8020a8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020a8e:	2b00      	cmp	r3, #0
 8020a90:	dc03      	bgt.n	8020a9a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8020a92:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020a94:	2b00      	cmp	r3, #0
 8020a96:	f340 8352 	ble.w	802113e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 8020a9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020a9c:	2b00      	cmp	r3, #0
 8020a9e:	f340 81a2 	ble.w	8020de6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3be>
 8020aa2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8020aa4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020aa6:	1412      	asrs	r2, r2, #16
 8020aa8:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020aac:	d431      	bmi.n	8020b12 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8020aae:	1c51      	adds	r1, r2, #1
 8020ab0:	428c      	cmp	r4, r1
 8020ab2:	dd31      	ble.n	8020b18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8020ab4:	2b00      	cmp	r3, #0
 8020ab6:	db2f      	blt.n	8020b18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8020ab8:	1c59      	adds	r1, r3, #1
 8020aba:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020abc:	4288      	cmp	r0, r1
 8020abe:	dd2b      	ble.n	8020b18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8020ac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020ac2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8020ac4:	3b01      	subs	r3, #1
 8020ac6:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8020ac8:	fb02 1203 	mla	r2, r2, r3, r1
 8020acc:	1412      	asrs	r2, r2, #16
 8020ace:	d42d      	bmi.n	8020b2c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8020ad0:	3201      	adds	r2, #1
 8020ad2:	4294      	cmp	r4, r2
 8020ad4:	dd2a      	ble.n	8020b2c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8020ad6:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8020ad8:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8020ada:	fb02 1303 	mla	r3, r2, r3, r1
 8020ade:	141b      	asrs	r3, r3, #16
 8020ae0:	d424      	bmi.n	8020b2c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8020ae2:	3301      	adds	r3, #1
 8020ae4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020ae6:	429a      	cmp	r2, r3
 8020ae8:	dd20      	ble.n	8020b2c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8020aea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020aec:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 8020af0:	f103 0e03 	add.w	lr, r3, #3
 8020af4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020af6:	9315      	str	r3, [sp, #84]	; 0x54
 8020af8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020afa:	2b00      	cmp	r3, #0
 8020afc:	f300 81de 	bgt.w	8020ebc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 8020b00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020b02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020b04:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020b08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020b0c:	441a      	add	r2, r3
 8020b0e:	920d      	str	r2, [sp, #52]	; 0x34
 8020b10:	e16b      	b.n	8020dea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c2>
 8020b12:	1c51      	adds	r1, r2, #1
 8020b14:	f040 8158 	bne.w	8020dc8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8020b18:	42a2      	cmp	r2, r4
 8020b1a:	f280 8155 	bge.w	8020dc8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8020b1e:	1c5a      	adds	r2, r3, #1
 8020b20:	f2c0 8152 	blt.w	8020dc8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8020b24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020b26:	4293      	cmp	r3, r2
 8020b28:	f280 814e 	bge.w	8020dc8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8020b2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020b2e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8020b30:	9316      	str	r3, [sp, #88]	; 0x58
 8020b32:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 8020b36:	9315      	str	r3, [sp, #84]	; 0x54
 8020b38:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020b3a:	2b00      	cmp	r3, #0
 8020b3c:	dde0      	ble.n	8020b00 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8020b3e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8020b40:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020b42:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8020b46:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8020b48:	141b      	asrs	r3, r3, #16
 8020b4a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020b4e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8020b50:	1412      	asrs	r2, r2, #16
 8020b52:	f100 819a 	bmi.w	8020e8a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 8020b56:	1c55      	adds	r5, r2, #1
 8020b58:	42ac      	cmp	r4, r5
 8020b5a:	f340 8198 	ble.w	8020e8e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8020b5e:	2b00      	cmp	r3, #0
 8020b60:	f2c0 8195 	blt.w	8020e8e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8020b64:	1c5d      	adds	r5, r3, #1
 8020b66:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8020b68:	42af      	cmp	r7, r5
 8020b6a:	f340 8190 	ble.w	8020e8e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8020b6e:	fb03 2304 	mla	r3, r3, r4, r2
 8020b72:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020b74:	18d5      	adds	r5, r2, r3
 8020b76:	5cd3      	ldrb	r3, [r2, r3]
 8020b78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020b7e:	0e1f      	lsrs	r7, r3, #24
 8020b80:	2800      	cmp	r0, #0
 8020b82:	f000 8171 	beq.w	8020e68 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 8020b86:	f895 c001 	ldrb.w	ip, [r5, #1]
 8020b8a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8020b8e:	920e      	str	r2, [sp, #56]	; 0x38
 8020b90:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8020b94:	2900      	cmp	r1, #0
 8020b96:	f000 8172 	beq.w	8020e7e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 8020b9a:	eb05 0c04 	add.w	ip, r5, r4
 8020b9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020ba0:	5d2d      	ldrb	r5, [r5, r4]
 8020ba2:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 8020ba6:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8020baa:	950b      	str	r5, [sp, #44]	; 0x2c
 8020bac:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8020bb0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8020bb2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020bb6:	0e15      	lsrs	r5, r2, #24
 8020bb8:	920f      	str	r2, [sp, #60]	; 0x3c
 8020bba:	b280      	uxth	r0, r0
 8020bbc:	b289      	uxth	r1, r1
 8020bbe:	fb00 fa01 	mul.w	sl, r0, r1
 8020bc2:	0100      	lsls	r0, r0, #4
 8020bc4:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8020bc8:	eba0 080a 	sub.w	r8, r0, sl
 8020bcc:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8020bd0:	b289      	uxth	r1, r1
 8020bd2:	fa1f f888 	uxth.w	r8, r8
 8020bd6:	1a52      	subs	r2, r2, r1
 8020bd8:	fb08 f00e 	mul.w	r0, r8, lr
 8020bdc:	b292      	uxth	r2, r2
 8020bde:	fb02 0007 	mla	r0, r2, r7, r0
 8020be2:	fb01 0009 	mla	r0, r1, r9, r0
 8020be6:	fb0a 0005 	mla	r0, sl, r5, r0
 8020bea:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020bee:	2800      	cmp	r0, #0
 8020bf0:	f000 80dd 	beq.w	8020dae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8020bf4:	2fff      	cmp	r7, #255	; 0xff
 8020bf6:	d01a      	beq.n	8020c2e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8020bf8:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020bfc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020c00:	fb07 fc0c 	mul.w	ip, r7, ip
 8020c04:	435f      	muls	r7, r3
 8020c06:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8020c0a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020c0e:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 8020c12:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020c16:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8020c1a:	4463      	add	r3, ip
 8020c1c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8020c20:	0a1b      	lsrs	r3, r3, #8
 8020c22:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8020c26:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020c2a:	ea43 030b 	orr.w	r3, r3, fp
 8020c2e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020c32:	d01e      	beq.n	8020c72 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 8020c34:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8020c36:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 8020c3a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020c3e:	fb0e fb0b 	mul.w	fp, lr, fp
 8020c42:	fb0e fe07 	mul.w	lr, lr, r7
 8020c46:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8020c4a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020c4e:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8020c52:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020c56:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8020c5a:	44dc      	add	ip, fp
 8020c5c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020c60:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020c64:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020c68:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020c6c:	ea4c 070e 	orr.w	r7, ip, lr
 8020c70:	970e      	str	r7, [sp, #56]	; 0x38
 8020c72:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020c76:	d01e      	beq.n	8020cb6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8020c78:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8020c7a:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8020c7e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020c82:	fb09 fe0e 	mul.w	lr, r9, lr
 8020c86:	fb09 f907 	mul.w	r9, r9, r7
 8020c8a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8020c8e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8020c92:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8020c96:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020c9a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8020c9e:	44f4      	add	ip, lr
 8020ca0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020ca4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020ca8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020cac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020cb0:	ea4c 0709 	orr.w	r7, ip, r9
 8020cb4:	970b      	str	r7, [sp, #44]	; 0x2c
 8020cb6:	2dff      	cmp	r5, #255	; 0xff
 8020cb8:	d01c      	beq.n	8020cf4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 8020cba:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8020cbc:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8020cc0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020cc4:	fb05 fe0e 	mul.w	lr, r5, lr
 8020cc8:	437d      	muls	r5, r7
 8020cca:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8020cce:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8020cd2:	f505 7780 	add.w	r7, r5, #256	; 0x100
 8020cd6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020cda:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8020cde:	44f4      	add	ip, lr
 8020ce0:	0a2d      	lsrs	r5, r5, #8
 8020ce2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020ce6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8020cea:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020cee:	ea4c 0505 	orr.w	r5, ip, r5
 8020cf2:	950f      	str	r5, [sp, #60]	; 0x3c
 8020cf4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8020cf6:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8020cfa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020cfe:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020d02:	fb08 f505 	mul.w	r5, r8, r5
 8020d06:	fb02 5507 	mla	r5, r2, r7, r5
 8020d0a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8020d0c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020d10:	fb01 5507 	mla	r5, r1, r7, r5
 8020d14:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8020d16:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020d1a:	fb0a 5507 	mla	r5, sl, r7, r5
 8020d1e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8020d20:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020d24:	0a2d      	lsrs	r5, r5, #8
 8020d26:	fb08 f807 	mul.w	r8, r8, r7
 8020d2a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020d2e:	fb02 8303 	mla	r3, r2, r3, r8
 8020d32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020d34:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020d38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020d3a:	fb01 330c 	mla	r3, r1, ip, r3
 8020d3e:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8020d42:	fb0a 3a01 	mla	sl, sl, r1, r3
 8020d46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020d48:	9915      	ldr	r1, [sp, #84]	; 0x54
 8020d4a:	4343      	muls	r3, r0
 8020d4c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020d50:	1c58      	adds	r0, r3, #1
 8020d52:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020d56:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8020d5a:	ea45 050a 	orr.w	r5, r5, sl
 8020d5e:	7833      	ldrb	r3, [r6, #0]
 8020d60:	b2ea      	uxtb	r2, r5
 8020d62:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8020d66:	fb12 f201 	smulbb	r2, r2, r1
 8020d6a:	b2c0      	uxtb	r0, r0
 8020d6c:	fb03 2300 	mla	r3, r3, r0, r2
 8020d70:	b29b      	uxth	r3, r3
 8020d72:	1c5a      	adds	r2, r3, #1
 8020d74:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020d78:	7872      	ldrb	r2, [r6, #1]
 8020d7a:	fb12 f200 	smulbb	r2, r2, r0
 8020d7e:	121b      	asrs	r3, r3, #8
 8020d80:	7033      	strb	r3, [r6, #0]
 8020d82:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8020d86:	0c2d      	lsrs	r5, r5, #16
 8020d88:	fb03 2301 	mla	r3, r3, r1, r2
 8020d8c:	b29b      	uxth	r3, r3
 8020d8e:	1c5a      	adds	r2, r3, #1
 8020d90:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020d94:	121b      	asrs	r3, r3, #8
 8020d96:	7073      	strb	r3, [r6, #1]
 8020d98:	78b3      	ldrb	r3, [r6, #2]
 8020d9a:	fb13 f000 	smulbb	r0, r3, r0
 8020d9e:	fb05 0501 	mla	r5, r5, r1, r0
 8020da2:	b2ad      	uxth	r5, r5
 8020da4:	1c6b      	adds	r3, r5, #1
 8020da6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8020daa:	122d      	asrs	r5, r5, #8
 8020dac:	70b5      	strb	r5, [r6, #2]
 8020dae:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8020db0:	3603      	adds	r6, #3
 8020db2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8020db4:	4413      	add	r3, r2
 8020db6:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8020db8:	932d      	str	r3, [sp, #180]	; 0xb4
 8020dba:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020dbc:	4413      	add	r3, r2
 8020dbe:	932e      	str	r3, [sp, #184]	; 0xb8
 8020dc0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020dc2:	3b01      	subs	r3, #1
 8020dc4:	9316      	str	r3, [sp, #88]	; 0x58
 8020dc6:	e6b7      	b.n	8020b38 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8020dc8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8020dca:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8020dcc:	4413      	add	r3, r2
 8020dce:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8020dd0:	932d      	str	r3, [sp, #180]	; 0xb4
 8020dd2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020dd4:	4413      	add	r3, r2
 8020dd6:	932e      	str	r3, [sp, #184]	; 0xb8
 8020dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020dda:	3b01      	subs	r3, #1
 8020ddc:	930a      	str	r3, [sp, #40]	; 0x28
 8020dde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020de0:	3303      	adds	r3, #3
 8020de2:	930d      	str	r3, [sp, #52]	; 0x34
 8020de4:	e659      	b.n	8020a9a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8020de6:	f47f ae6b 	bne.w	8020ac0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8020dea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020dec:	2b00      	cmp	r3, #0
 8020dee:	f340 81a6 	ble.w	802113e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 8020df2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020df6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020df8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020dfc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020e00:	eef0 6a48 	vmov.f32	s13, s16
 8020e04:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020e08:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020e0c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020e10:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8020e14:	eef0 6a68 	vmov.f32	s13, s17
 8020e18:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020e1c:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 8020e20:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020e24:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020e28:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020e2c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020e30:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020e34:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020e38:	ee18 2a10 	vmov	r2, s16
 8020e3c:	eeb0 8a47 	vmov.f32	s16, s14
 8020e40:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e44:	ee18 2a90 	vmov	r2, s17
 8020e48:	932f      	str	r3, [sp, #188]	; 0xbc
 8020e4a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020e4c:	eef0 8a67 	vmov.f32	s17, s15
 8020e50:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e54:	9330      	str	r3, [sp, #192]	; 0xc0
 8020e56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020e58:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8020e5a:	3b01      	subs	r3, #1
 8020e5c:	9314      	str	r3, [sp, #80]	; 0x50
 8020e5e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020e60:	bf08      	it	eq
 8020e62:	4613      	moveq	r3, r2
 8020e64:	930a      	str	r3, [sp, #40]	; 0x28
 8020e66:	e611      	b.n	8020a8c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8020e68:	b161      	cbz	r1, 8020e84 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 8020e6a:	5d2a      	ldrb	r2, [r5, r4]
 8020e6c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8020e6e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020e72:	25ff      	movs	r5, #255	; 0xff
 8020e74:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8020e78:	920b      	str	r2, [sp, #44]	; 0x2c
 8020e7a:	46ae      	mov	lr, r5
 8020e7c:	e69d      	b.n	8020bba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 8020e7e:	25ff      	movs	r5, #255	; 0xff
 8020e80:	46a9      	mov	r9, r5
 8020e82:	e69a      	b.n	8020bba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 8020e84:	25ff      	movs	r5, #255	; 0xff
 8020e86:	46a9      	mov	r9, r5
 8020e88:	e7f7      	b.n	8020e7a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x452>
 8020e8a:	1c57      	adds	r7, r2, #1
 8020e8c:	d18f      	bne.n	8020dae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8020e8e:	4294      	cmp	r4, r2
 8020e90:	dd8d      	ble.n	8020dae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8020e92:	1c5d      	adds	r5, r3, #1
 8020e94:	db8b      	blt.n	8020dae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8020e96:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020e98:	429d      	cmp	r5, r3
 8020e9a:	dd88      	ble.n	8020dae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8020e9c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8020e9e:	9202      	str	r2, [sp, #8]
 8020ea0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020ea2:	e9cd 3003 	strd	r3, r0, [sp, #12]
 8020ea6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020ea8:	9819      	ldr	r0, [sp, #100]	; 0x64
 8020eaa:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8020eae:	e9cd 4300 	strd	r4, r3, [sp]
 8020eb2:	4631      	mov	r1, r6
 8020eb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020eb6:	f7ff fc63 	bl	8020780 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8020eba:	e778      	b.n	8020dae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8020ebc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8020ebe:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8020ec0:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8020ec4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020ec6:	1412      	asrs	r2, r2, #16
 8020ec8:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8020ecc:	141b      	asrs	r3, r3, #16
 8020ece:	fb04 2303 	mla	r3, r4, r3, r2
 8020ed2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020ed4:	18d5      	adds	r5, r2, r3
 8020ed6:	5cd3      	ldrb	r3, [r2, r3]
 8020ed8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020ede:	0e1e      	lsrs	r6, r3, #24
 8020ee0:	2900      	cmp	r1, #0
 8020ee2:	f000 811b 	beq.w	802111c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f4>
 8020ee6:	786a      	ldrb	r2, [r5, #1]
 8020ee8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020eea:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8020eee:	9210      	str	r2, [sp, #64]	; 0x40
 8020ef0:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8020ef4:	2800      	cmp	r0, #0
 8020ef6:	f000 811c 	beq.w	8021132 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70a>
 8020efa:	192a      	adds	r2, r5, r4
 8020efc:	5d2d      	ldrb	r5, [r5, r4]
 8020efe:	7852      	ldrb	r2, [r2, #1]
 8020f00:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8020f04:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8020f08:	950c      	str	r5, [sp, #48]	; 0x30
 8020f0a:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8020f0e:	0e15      	lsrs	r5, r2, #24
 8020f10:	9211      	str	r2, [sp, #68]	; 0x44
 8020f12:	b289      	uxth	r1, r1
 8020f14:	b280      	uxth	r0, r0
 8020f16:	fb01 fa00 	mul.w	sl, r1, r0
 8020f1a:	0109      	lsls	r1, r1, #4
 8020f1c:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8020f20:	eba1 080a 	sub.w	r8, r1, sl
 8020f24:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8020f28:	b280      	uxth	r0, r0
 8020f2a:	fa1f f888 	uxth.w	r8, r8
 8020f2e:	1a12      	subs	r2, r2, r0
 8020f30:	fb08 f10c 	mul.w	r1, r8, ip
 8020f34:	b292      	uxth	r2, r2
 8020f36:	fb02 1106 	mla	r1, r2, r6, r1
 8020f3a:	fb00 1109 	mla	r1, r0, r9, r1
 8020f3e:	fb0a 1105 	mla	r1, sl, r5, r1
 8020f42:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020f46:	2900      	cmp	r1, #0
 8020f48:	f000 80da 	beq.w	8021100 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d8>
 8020f4c:	2eff      	cmp	r6, #255	; 0xff
 8020f4e:	d016      	beq.n	8020f7e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 8020f50:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8020f54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020f58:	4377      	muls	r7, r6
 8020f5a:	435e      	muls	r6, r3
 8020f5c:	0a3b      	lsrs	r3, r7, #8
 8020f5e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020f62:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020f66:	443b      	add	r3, r7
 8020f68:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8020f6c:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8020f70:	0a1b      	lsrs	r3, r3, #8
 8020f72:	0a3f      	lsrs	r7, r7, #8
 8020f74:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020f78:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020f7c:	433b      	orrs	r3, r7
 8020f7e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020f82:	d01d      	beq.n	8020fc0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x598>
 8020f84:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8020f86:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8020f88:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020f8c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020f90:	fb0c f606 	mul.w	r6, ip, r6
 8020f94:	fb0c fc07 	mul.w	ip, ip, r7
 8020f98:	0a37      	lsrs	r7, r6, #8
 8020f9a:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8020f9e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020fa2:	4437      	add	r7, r6
 8020fa4:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8020fa8:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8020fac:	0a3f      	lsrs	r7, r7, #8
 8020fae:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020fb2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020fb6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020fba:	ea47 060c 	orr.w	r6, r7, ip
 8020fbe:	9610      	str	r6, [sp, #64]	; 0x40
 8020fc0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020fc4:	d01d      	beq.n	8021002 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 8020fc6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8020fc8:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8020fcc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020fd0:	fb09 fc0c 	mul.w	ip, r9, ip
 8020fd4:	fb09 f906 	mul.w	r9, r9, r6
 8020fd8:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8020fdc:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020fe0:	f509 7680 	add.w	r6, r9, #256	; 0x100
 8020fe4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020fe8:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8020fec:	4467      	add	r7, ip
 8020fee:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020ff2:	0a3f      	lsrs	r7, r7, #8
 8020ff4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020ff8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020ffc:	ea47 0609 	orr.w	r6, r7, r9
 8021000:	960c      	str	r6, [sp, #48]	; 0x30
 8021002:	2dff      	cmp	r5, #255	; 0xff
 8021004:	d01a      	beq.n	802103c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x614>
 8021006:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8021008:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802100c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021010:	fb05 fc0c 	mul.w	ip, r5, ip
 8021014:	4375      	muls	r5, r6
 8021016:	ea4f 271c 	mov.w	r7, ip, lsr #8
 802101a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802101e:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8021022:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021026:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 802102a:	4467      	add	r7, ip
 802102c:	0a2d      	lsrs	r5, r5, #8
 802102e:	0a3f      	lsrs	r7, r7, #8
 8021030:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8021034:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021038:	433d      	orrs	r5, r7
 802103a:	9511      	str	r5, [sp, #68]	; 0x44
 802103c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802103e:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8021042:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021046:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802104a:	fb08 f505 	mul.w	r5, r8, r5
 802104e:	fb02 5506 	mla	r5, r2, r6, r5
 8021052:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8021054:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021058:	fb00 5506 	mla	r5, r0, r6, r5
 802105c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 802105e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021062:	fb0a 5506 	mla	r5, sl, r6, r5
 8021066:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8021068:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802106c:	0a2d      	lsrs	r5, r5, #8
 802106e:	fb08 f806 	mul.w	r8, r8, r6
 8021072:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021076:	fb02 8303 	mla	r3, r2, r3, r8
 802107a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802107c:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8021080:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021082:	fb00 3307 	mla	r3, r0, r7, r3
 8021086:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802108a:	fb0a 3c0c 	mla	ip, sl, ip, r3
 802108e:	fb01 f30b 	mul.w	r3, r1, fp
 8021092:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021096:	1c59      	adds	r1, r3, #1
 8021098:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802109c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80210a0:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80210a4:	ea45 050c 	orr.w	r5, r5, ip
 80210a8:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80210ac:	b2ea      	uxtb	r2, r5
 80210ae:	b2c9      	uxtb	r1, r1
 80210b0:	fb12 f20b 	smulbb	r2, r2, fp
 80210b4:	fb03 2301 	mla	r3, r3, r1, r2
 80210b8:	b29b      	uxth	r3, r3
 80210ba:	1c5a      	adds	r2, r3, #1
 80210bc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80210c0:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 80210c4:	fb12 f201 	smulbb	r2, r2, r1
 80210c8:	121b      	asrs	r3, r3, #8
 80210ca:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80210ce:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80210d2:	0c2d      	lsrs	r5, r5, #16
 80210d4:	fb03 230b 	mla	r3, r3, fp, r2
 80210d8:	b29b      	uxth	r3, r3
 80210da:	1c5a      	adds	r2, r3, #1
 80210dc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80210e0:	121b      	asrs	r3, r3, #8
 80210e2:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80210e6:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80210ea:	fb13 f101 	smulbb	r1, r3, r1
 80210ee:	fb05 150b 	mla	r5, r5, fp, r1
 80210f2:	b2ad      	uxth	r5, r5
 80210f4:	1c69      	adds	r1, r5, #1
 80210f6:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80210fa:	122d      	asrs	r5, r5, #8
 80210fc:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8021100:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8021102:	f10e 0e03 	add.w	lr, lr, #3
 8021106:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8021108:	4413      	add	r3, r2
 802110a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 802110c:	932d      	str	r3, [sp, #180]	; 0xb4
 802110e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021110:	4413      	add	r3, r2
 8021112:	932e      	str	r3, [sp, #184]	; 0xb8
 8021114:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021116:	3b01      	subs	r3, #1
 8021118:	9315      	str	r3, [sp, #84]	; 0x54
 802111a:	e4ed      	b.n	8020af8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 802111c:	b160      	cbz	r0, 8021138 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x710>
 802111e:	5d2a      	ldrb	r2, [r5, r4]
 8021120:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8021122:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8021126:	25ff      	movs	r5, #255	; 0xff
 8021128:	ea4f 6912 	mov.w	r9, r2, lsr #24
 802112c:	920c      	str	r2, [sp, #48]	; 0x30
 802112e:	46ac      	mov	ip, r5
 8021130:	e6ef      	b.n	8020f12 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 8021132:	25ff      	movs	r5, #255	; 0xff
 8021134:	46a9      	mov	r9, r5
 8021136:	e6ec      	b.n	8020f12 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 8021138:	25ff      	movs	r5, #255	; 0xff
 802113a:	46a9      	mov	r9, r5
 802113c:	e7f7      	b.n	802112e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x706>
 802113e:	b01b      	add	sp, #108	; 0x6c
 8021140:	ecbd 8b08 	vpop	{d8-d11}
 8021144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021148 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8021148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802114c:	b085      	sub	sp, #20
 802114e:	7888      	ldrb	r0, [r1, #2]
 8021150:	4692      	mov	sl, r2
 8021152:	4698      	mov	r8, r3
 8021154:	9000      	str	r0, [sp, #0]
 8021156:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 802115a:	7848      	ldrb	r0, [r1, #1]
 802115c:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8021160:	9001      	str	r0, [sp, #4]
 8021162:	7808      	ldrb	r0, [r1, #0]
 8021164:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8021168:	9002      	str	r0, [sp, #8]
 802116a:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 802116e:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8021172:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8021176:	fb04 560c 	mla	r6, r4, ip, r5
 802117a:	2c00      	cmp	r4, #0
 802117c:	eb02 0e06 	add.w	lr, r2, r6
 8021180:	9a00      	ldr	r2, [sp, #0]
 8021182:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8021186:	9a01      	ldr	r2, [sp, #4]
 8021188:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 802118c:	db3e      	blt.n	802120c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 802118e:	45a1      	cmp	r9, r4
 8021190:	dd3c      	ble.n	802120c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 8021192:	2d00      	cmp	r5, #0
 8021194:	db38      	blt.n	8021208 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 8021196:	45ac      	cmp	ip, r5
 8021198:	dd36      	ble.n	8021208 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 802119a:	f81a 2006 	ldrb.w	r2, [sl, r6]
 802119e:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 80211a2:	1c6e      	adds	r6, r5, #1
 80211a4:	d435      	bmi.n	8021212 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 80211a6:	45b4      	cmp	ip, r6
 80211a8:	dd33      	ble.n	8021212 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 80211aa:	b393      	cbz	r3, 8021212 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 80211ac:	f89e 6001 	ldrb.w	r6, [lr, #1]
 80211b0:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 80211b4:	3401      	adds	r4, #1
 80211b6:	d430      	bmi.n	802121a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 80211b8:	45a1      	cmp	r9, r4
 80211ba:	dd2e      	ble.n	802121a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 80211bc:	b36f      	cbz	r7, 802121a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 80211be:	2d00      	cmp	r5, #0
 80211c0:	db29      	blt.n	8021216 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 80211c2:	45ac      	cmp	ip, r5
 80211c4:	dd27      	ble.n	8021216 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 80211c6:	f81e 400c 	ldrb.w	r4, [lr, ip]
 80211ca:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80211ce:	3501      	adds	r5, #1
 80211d0:	d407      	bmi.n	80211e2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 80211d2:	45ac      	cmp	ip, r5
 80211d4:	dd05      	ble.n	80211e2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 80211d6:	b123      	cbz	r3, 80211e2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 80211d8:	44f4      	add	ip, lr
 80211da:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80211de:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 80211e2:	2b0f      	cmp	r3, #15
 80211e4:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80211e8:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80211ec:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80211f0:	ea4f 6810 	mov.w	r8, r0, lsr #24
 80211f4:	d801      	bhi.n	80211fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 80211f6:	2f0f      	cmp	r7, #15
 80211f8:	d911      	bls.n	802121e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 80211fa:	4b76      	ldr	r3, [pc, #472]	; (80213d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 80211fc:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8021200:	4a75      	ldr	r2, [pc, #468]	; (80213d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 8021202:	4876      	ldr	r0, [pc, #472]	; (80213dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 8021204:	f004 ff94 	bl	8026130 <__assert_func>
 8021208:	4602      	mov	r2, r0
 802120a:	e7ca      	b.n	80211a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 802120c:	4606      	mov	r6, r0
 802120e:	4602      	mov	r2, r0
 8021210:	e7d0      	b.n	80211b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 8021212:	4606      	mov	r6, r0
 8021214:	e7ce      	b.n	80211b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 8021216:	4604      	mov	r4, r0
 8021218:	e7d9      	b.n	80211ce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 802121a:	4604      	mov	r4, r0
 802121c:	e7e1      	b.n	80211e2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 802121e:	b29b      	uxth	r3, r3
 8021220:	b2bf      	uxth	r7, r7
 8021222:	fb07 fe03 	mul.w	lr, r7, r3
 8021226:	011b      	lsls	r3, r3, #4
 8021228:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 802122c:	eba3 0c0e 	sub.w	ip, r3, lr
 8021230:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8021234:	b2bf      	uxth	r7, r7
 8021236:	fa1f fc8c 	uxth.w	ip, ip
 802123a:	1bed      	subs	r5, r5, r7
 802123c:	fb0c f30a 	mul.w	r3, ip, sl
 8021240:	b2ad      	uxth	r5, r5
 8021242:	fb05 330b 	mla	r3, r5, fp, r3
 8021246:	fb07 3309 	mla	r3, r7, r9, r3
 802124a:	fb0e 3308 	mla	r3, lr, r8, r3
 802124e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021252:	9303      	str	r3, [sp, #12]
 8021254:	2b00      	cmp	r3, #0
 8021256:	f000 80b9 	beq.w	80213cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 802125a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802125e:	d018      	beq.n	8021292 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 8021260:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021264:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021268:	fb0b f303 	mul.w	r3, fp, r3
 802126c:	fb0b fb02 	mul.w	fp, fp, r2
 8021270:	0a1a      	lsrs	r2, r3, #8
 8021272:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8021276:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802127a:	441a      	add	r2, r3
 802127c:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8021280:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8021284:	0a12      	lsrs	r2, r2, #8
 8021286:	0a1b      	lsrs	r3, r3, #8
 8021288:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802128c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021290:	431a      	orrs	r2, r3
 8021292:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021296:	d019      	beq.n	80212cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 8021298:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 802129c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80212a0:	fb0a fb0b 	mul.w	fp, sl, fp
 80212a4:	fb0a fa06 	mul.w	sl, sl, r6
 80212a8:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80212ac:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80212b0:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 80212b4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80212b8:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80212bc:	445e      	add	r6, fp
 80212be:	0a1b      	lsrs	r3, r3, #8
 80212c0:	0a36      	lsrs	r6, r6, #8
 80212c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80212c6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80212ca:	431e      	orrs	r6, r3
 80212cc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80212d0:	d019      	beq.n	8021306 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 80212d2:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80212d6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80212da:	fb09 fa0a 	mul.w	sl, r9, sl
 80212de:	fb09 f904 	mul.w	r9, r9, r4
 80212e2:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80212e6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80212ea:	f509 7380 	add.w	r3, r9, #256	; 0x100
 80212ee:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80212f2:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 80212f6:	4454      	add	r4, sl
 80212f8:	0a1b      	lsrs	r3, r3, #8
 80212fa:	0a24      	lsrs	r4, r4, #8
 80212fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021300:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021304:	431c      	orrs	r4, r3
 8021306:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802130a:	d019      	beq.n	8021340 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 802130c:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8021310:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021314:	fb08 f909 	mul.w	r9, r8, r9
 8021318:	fb08 f800 	mul.w	r8, r8, r0
 802131c:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8021320:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8021324:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8021328:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802132c:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8021330:	4448      	add	r0, r9
 8021332:	0a1b      	lsrs	r3, r3, #8
 8021334:	0a00      	lsrs	r0, r0, #8
 8021336:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802133a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802133e:	4318      	orrs	r0, r3
 8021340:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8021344:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021348:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802134c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021350:	fb0c f808 	mul.w	r8, ip, r8
 8021354:	fb0c f606 	mul.w	r6, ip, r6
 8021358:	fb05 8803 	mla	r8, r5, r3, r8
 802135c:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8021360:	fb05 6202 	mla	r2, r5, r2, r6
 8021364:	fb07 8803 	mla	r8, r7, r3, r8
 8021368:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 802136c:	fb0e 8303 	mla	r3, lr, r3, r8
 8021370:	0a1b      	lsrs	r3, r3, #8
 8021372:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8021376:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 802137a:	9c02      	ldr	r4, [sp, #8]
 802137c:	fb07 2703 	mla	r7, r7, r3, r2
 8021380:	9a03      	ldr	r2, [sp, #12]
 8021382:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8021386:	43d2      	mvns	r2, r2
 8021388:	fb0e 7303 	mla	r3, lr, r3, r7
 802138c:	b2d2      	uxtb	r2, r2
 802138e:	0a1b      	lsrs	r3, r3, #8
 8021390:	4354      	muls	r4, r2
 8021392:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021396:	1c60      	adds	r0, r4, #1
 8021398:	ea48 0303 	orr.w	r3, r8, r3
 802139c:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 80213a0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80213a4:	7008      	strb	r0, [r1, #0]
 80213a6:	9801      	ldr	r0, [sp, #4]
 80213a8:	4350      	muls	r0, r2
 80213aa:	1c44      	adds	r4, r0, #1
 80213ac:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 80213b0:	0a18      	lsrs	r0, r3, #8
 80213b2:	0c1b      	lsrs	r3, r3, #16
 80213b4:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 80213b8:	7048      	strb	r0, [r1, #1]
 80213ba:	9800      	ldr	r0, [sp, #0]
 80213bc:	4350      	muls	r0, r2
 80213be:	4602      	mov	r2, r0
 80213c0:	3001      	adds	r0, #1
 80213c2:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80213c6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80213ca:	708b      	strb	r3, [r1, #2]
 80213cc:	b005      	add	sp, #20
 80213ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80213d2:	bf00      	nop
 80213d4:	0802abfb 	.word	0x0802abfb
 80213d8:	0802b0f2 	.word	0x0802b0f2
 80213dc:	0802acc4 	.word	0x0802acc4

080213e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80213e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80213e4:	ed2d 8b08 	vpush	{d8-d11}
 80213e8:	b097      	sub	sp, #92	; 0x5c
 80213ea:	eeb0 aa40 	vmov.f32	s20, s0
 80213ee:	eef0 9a60 	vmov.f32	s19, s1
 80213f2:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 80213f4:	eeb0 9a41 	vmov.f32	s18, s2
 80213f8:	9308      	str	r3, [sp, #32]
 80213fa:	eeb0 8a62 	vmov.f32	s16, s5
 80213fe:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8021402:	eef0 8a43 	vmov.f32	s17, s6
 8021406:	9015      	str	r0, [sp, #84]	; 0x54
 8021408:	eef0 ba44 	vmov.f32	s23, s8
 802140c:	6868      	ldr	r0, [r5, #4]
 802140e:	eeb0 ba64 	vmov.f32	s22, s9
 8021412:	9112      	str	r1, [sp, #72]	; 0x48
 8021414:	eef0 aa45 	vmov.f32	s21, s10
 8021418:	9310      	str	r3, [sp, #64]	; 0x40
 802141a:	9214      	str	r2, [sp, #80]	; 0x50
 802141c:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 802141e:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8021422:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8021426:	fb00 1303 	mla	r3, r0, r3, r1
 802142a:	6829      	ldr	r1, [r5, #0]
 802142c:	6855      	ldr	r5, [r2, #4]
 802142e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021432:	3504      	adds	r5, #4
 8021434:	18cb      	adds	r3, r1, r3
 8021436:	930b      	str	r3, [sp, #44]	; 0x2c
 8021438:	6813      	ldr	r3, [r2, #0]
 802143a:	9311      	str	r3, [sp, #68]	; 0x44
 802143c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802143e:	2b00      	cmp	r3, #0
 8021440:	dc03      	bgt.n	802144a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8021442:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021444:	2b00      	cmp	r3, #0
 8021446:	f340 8333 	ble.w	8021ab0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 802144a:	9b08      	ldr	r3, [sp, #32]
 802144c:	2b00      	cmp	r3, #0
 802144e:	f340 8190 	ble.w	8021772 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8021452:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021454:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021456:	1412      	asrs	r2, r2, #16
 8021458:	ea4f 4323 	mov.w	r3, r3, asr #16
 802145c:	d42f      	bmi.n	80214be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 802145e:	1c51      	adds	r1, r2, #1
 8021460:	428c      	cmp	r4, r1
 8021462:	dd2f      	ble.n	80214c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8021464:	2b00      	cmp	r3, #0
 8021466:	db2d      	blt.n	80214c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8021468:	1c59      	adds	r1, r3, #1
 802146a:	9810      	ldr	r0, [sp, #64]	; 0x40
 802146c:	4288      	cmp	r0, r1
 802146e:	dd29      	ble.n	80214c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8021470:	9b08      	ldr	r3, [sp, #32]
 8021472:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021474:	3b01      	subs	r3, #1
 8021476:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8021478:	fb02 1203 	mla	r2, r2, r3, r1
 802147c:	1412      	asrs	r2, r2, #16
 802147e:	d42b      	bmi.n	80214d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8021480:	3201      	adds	r2, #1
 8021482:	4294      	cmp	r4, r2
 8021484:	dd28      	ble.n	80214d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8021486:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8021488:	992a      	ldr	r1, [sp, #168]	; 0xa8
 802148a:	fb02 1303 	mla	r3, r2, r3, r1
 802148e:	141b      	asrs	r3, r3, #16
 8021490:	d422      	bmi.n	80214d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8021492:	3301      	adds	r3, #1
 8021494:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021496:	429a      	cmp	r2, r3
 8021498:	dd1e      	ble.n	80214d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 802149a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802149c:	f103 0803 	add.w	r8, r3, #3
 80214a0:	9b08      	ldr	r3, [sp, #32]
 80214a2:	9307      	str	r3, [sp, #28]
 80214a4:	9b07      	ldr	r3, [sp, #28]
 80214a6:	2b00      	cmp	r3, #0
 80214a8:	f300 81ca 	bgt.w	8021840 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 80214ac:	9b08      	ldr	r3, [sp, #32]
 80214ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80214b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80214b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80214b8:	441a      	add	r2, r3
 80214ba:	920b      	str	r2, [sp, #44]	; 0x2c
 80214bc:	e15b      	b.n	8021776 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 80214be:	1c51      	adds	r1, r2, #1
 80214c0:	f040 8148 	bne.w	8021754 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 80214c4:	42a2      	cmp	r2, r4
 80214c6:	f280 8145 	bge.w	8021754 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 80214ca:	1c5a      	adds	r2, r3, #1
 80214cc:	f2c0 8142 	blt.w	8021754 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 80214d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80214d2:	4293      	cmp	r3, r2
 80214d4:	f280 813e 	bge.w	8021754 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 80214d8:	9b08      	ldr	r3, [sp, #32]
 80214da:	9313      	str	r3, [sp, #76]	; 0x4c
 80214dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80214de:	9307      	str	r3, [sp, #28]
 80214e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80214e2:	2b00      	cmp	r3, #0
 80214e4:	dde2      	ble.n	80214ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 80214e6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80214e8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80214ea:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80214ee:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80214f0:	141b      	asrs	r3, r3, #16
 80214f2:	f3c2 3003 	ubfx	r0, r2, #12, #4
 80214f6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80214f8:	1412      	asrs	r2, r2, #16
 80214fa:	f100 818b 	bmi.w	8021814 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x434>
 80214fe:	1c56      	adds	r6, r2, #1
 8021500:	42b4      	cmp	r4, r6
 8021502:	f340 8189 	ble.w	8021818 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8021506:	2b00      	cmp	r3, #0
 8021508:	f2c0 8186 	blt.w	8021818 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 802150c:	1c5e      	adds	r6, r3, #1
 802150e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8021510:	42b7      	cmp	r7, r6
 8021512:	f340 8181 	ble.w	8021818 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8021516:	fb03 2304 	mla	r3, r3, r4, r2
 802151a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802151c:	18d6      	adds	r6, r2, r3
 802151e:	5cd3      	ldrb	r3, [r2, r3]
 8021520:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8021524:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021528:	2900      	cmp	r1, #0
 802152a:	f000 8163 	beq.w	80217f4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 802152e:	7872      	ldrb	r2, [r6, #1]
 8021530:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8021534:	920c      	str	r2, [sp, #48]	; 0x30
 8021536:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802153a:	2800      	cmp	r0, #0
 802153c:	f000 8164 	beq.w	8021808 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x428>
 8021540:	1932      	adds	r2, r6, r4
 8021542:	5d36      	ldrb	r6, [r6, r4]
 8021544:	7852      	ldrb	r2, [r2, #1]
 8021546:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 802154a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802154e:	9609      	str	r6, [sp, #36]	; 0x24
 8021550:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021554:	0e16      	lsrs	r6, r2, #24
 8021556:	920d      	str	r2, [sp, #52]	; 0x34
 8021558:	b289      	uxth	r1, r1
 802155a:	b280      	uxth	r0, r0
 802155c:	fb01 fb00 	mul.w	fp, r1, r0
 8021560:	0109      	lsls	r1, r1, #4
 8021562:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8021566:	eba1 090b 	sub.w	r9, r1, fp
 802156a:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 802156e:	b280      	uxth	r0, r0
 8021570:	fa1f f989 	uxth.w	r9, r9
 8021574:	1a12      	subs	r2, r2, r0
 8021576:	fb09 f108 	mul.w	r1, r9, r8
 802157a:	b292      	uxth	r2, r2
 802157c:	fb02 110c 	mla	r1, r2, ip, r1
 8021580:	fb00 110a 	mla	r1, r0, sl, r1
 8021584:	fb0b 1106 	mla	r1, fp, r6, r1
 8021588:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802158c:	2900      	cmp	r1, #0
 802158e:	f000 80d2 	beq.w	8021736 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8021592:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021596:	d01b      	beq.n	80215d0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f0>
 8021598:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802159c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80215a0:	fb0c fe0e 	mul.w	lr, ip, lr
 80215a4:	fb0c fc03 	mul.w	ip, ip, r3
 80215a8:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80215ac:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80215b0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80215b4:	4473      	add	r3, lr
 80215b6:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 80215ba:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 80215be:	0a1b      	lsrs	r3, r3, #8
 80215c0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80215c4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80215c8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80215cc:	ea43 030e 	orr.w	r3, r3, lr
 80215d0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80215d4:	d01e      	beq.n	8021614 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x234>
 80215d6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80215d8:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80215dc:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 80215e0:	fb08 fc0c 	mul.w	ip, r8, ip
 80215e4:	fb08 f80e 	mul.w	r8, r8, lr
 80215e8:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80215ec:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80215f0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80215f4:	44e6      	add	lr, ip
 80215f6:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 80215fa:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 80215fe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021602:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8021606:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802160a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802160e:	ea4e 0708 	orr.w	r7, lr, r8
 8021612:	970c      	str	r7, [sp, #48]	; 0x30
 8021614:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021618:	d01e      	beq.n	8021658 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 802161a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802161c:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8021620:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8021624:	fb0a f808 	mul.w	r8, sl, r8
 8021628:	fb0a fa0c 	mul.w	sl, sl, ip
 802162c:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8021630:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8021634:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021638:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802163c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021640:	44c6      	add	lr, r8
 8021642:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021646:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802164a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802164e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021652:	ea4e 070a 	orr.w	r7, lr, sl
 8021656:	9709      	str	r7, [sp, #36]	; 0x24
 8021658:	2eff      	cmp	r6, #255	; 0xff
 802165a:	d01d      	beq.n	8021698 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 802165c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802165e:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8021662:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8021666:	fb06 f808 	mul.w	r8, r6, r8
 802166a:	fb06 f60c 	mul.w	r6, r6, ip
 802166e:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8021672:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8021676:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 802167a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802167e:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8021682:	44c6      	add	lr, r8
 8021684:	0a36      	lsrs	r6, r6, #8
 8021686:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802168a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802168e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021692:	ea4e 0606 	orr.w	r6, lr, r6
 8021696:	960d      	str	r6, [sp, #52]	; 0x34
 8021698:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802169a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802169e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80216a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80216a4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80216a8:	43c9      	mvns	r1, r1
 80216aa:	fb09 f606 	mul.w	r6, r9, r6
 80216ae:	b2c9      	uxtb	r1, r1
 80216b0:	fb02 660c 	mla	r6, r2, ip, r6
 80216b4:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80216b8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80216ba:	fb00 660c 	mla	r6, r0, ip, r6
 80216be:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80216c2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80216c4:	fb0b 660c 	mla	r6, fp, ip, r6
 80216c8:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80216cc:	fb09 f90c 	mul.w	r9, r9, ip
 80216d0:	0a36      	lsrs	r6, r6, #8
 80216d2:	fb02 9303 	mla	r3, r2, r3, r9
 80216d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80216d8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80216dc:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 80216e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80216e2:	fb00 330e 	mla	r3, r0, lr, r3
 80216e6:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 80216ea:	fb0b 3b00 	mla	fp, fp, r0, r3
 80216ee:	9b07      	ldr	r3, [sp, #28]
 80216f0:	781b      	ldrb	r3, [r3, #0]
 80216f2:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80216f6:	fb03 f201 	mul.w	r2, r3, r1
 80216fa:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80216fe:	1c53      	adds	r3, r2, #1
 8021700:	ea46 060b 	orr.w	r6, r6, fp
 8021704:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021708:	9a07      	ldr	r2, [sp, #28]
 802170a:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 802170e:	7013      	strb	r3, [r2, #0]
 8021710:	7853      	ldrb	r3, [r2, #1]
 8021712:	434b      	muls	r3, r1
 8021714:	1c5a      	adds	r2, r3, #1
 8021716:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802171a:	0a33      	lsrs	r3, r6, #8
 802171c:	0c36      	lsrs	r6, r6, #16
 802171e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021722:	9a07      	ldr	r2, [sp, #28]
 8021724:	7053      	strb	r3, [r2, #1]
 8021726:	7893      	ldrb	r3, [r2, #2]
 8021728:	4359      	muls	r1, r3
 802172a:	1c4b      	adds	r3, r1, #1
 802172c:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8021730:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 8021734:	7096      	strb	r6, [r2, #2]
 8021736:	9b07      	ldr	r3, [sp, #28]
 8021738:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802173a:	3303      	adds	r3, #3
 802173c:	9307      	str	r3, [sp, #28]
 802173e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021740:	4413      	add	r3, r2
 8021742:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8021744:	9329      	str	r3, [sp, #164]	; 0xa4
 8021746:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021748:	4413      	add	r3, r2
 802174a:	932a      	str	r3, [sp, #168]	; 0xa8
 802174c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802174e:	3b01      	subs	r3, #1
 8021750:	9313      	str	r3, [sp, #76]	; 0x4c
 8021752:	e6c5      	b.n	80214e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 8021754:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021756:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021758:	4413      	add	r3, r2
 802175a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802175c:	9329      	str	r3, [sp, #164]	; 0xa4
 802175e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021760:	4413      	add	r3, r2
 8021762:	932a      	str	r3, [sp, #168]	; 0xa8
 8021764:	9b08      	ldr	r3, [sp, #32]
 8021766:	3b01      	subs	r3, #1
 8021768:	9308      	str	r3, [sp, #32]
 802176a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802176c:	3303      	adds	r3, #3
 802176e:	930b      	str	r3, [sp, #44]	; 0x2c
 8021770:	e66b      	b.n	802144a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8021772:	f47f ae7d 	bne.w	8021470 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8021776:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021778:	2b00      	cmp	r3, #0
 802177a:	f340 8199 	ble.w	8021ab0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 802177e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021782:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021784:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021788:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802178c:	eef0 6a48 	vmov.f32	s13, s16
 8021790:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021794:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021798:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802179c:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 80217a0:	eef0 6a68 	vmov.f32	s13, s17
 80217a4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80217a8:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 80217ac:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80217b0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80217b4:	ee37 8a48 	vsub.f32	s16, s14, s16
 80217b8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80217bc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80217c0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80217c4:	ee18 2a10 	vmov	r2, s16
 80217c8:	eeb0 8a47 	vmov.f32	s16, s14
 80217cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80217d0:	ee18 2a90 	vmov	r2, s17
 80217d4:	932b      	str	r3, [sp, #172]	; 0xac
 80217d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80217d8:	eef0 8a67 	vmov.f32	s17, s15
 80217dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80217e0:	932c      	str	r3, [sp, #176]	; 0xb0
 80217e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80217e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80217e6:	3b01      	subs	r3, #1
 80217e8:	9312      	str	r3, [sp, #72]	; 0x48
 80217ea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80217ec:	bf08      	it	eq
 80217ee:	4613      	moveq	r3, r2
 80217f0:	9308      	str	r3, [sp, #32]
 80217f2:	e623      	b.n	802143c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 80217f4:	b158      	cbz	r0, 802180e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80217f6:	5d32      	ldrb	r2, [r6, r4]
 80217f8:	26ff      	movs	r6, #255	; 0xff
 80217fa:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80217fe:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8021802:	9209      	str	r2, [sp, #36]	; 0x24
 8021804:	46b0      	mov	r8, r6
 8021806:	e6a7      	b.n	8021558 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8021808:	26ff      	movs	r6, #255	; 0xff
 802180a:	46b2      	mov	sl, r6
 802180c:	e6a4      	b.n	8021558 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 802180e:	26ff      	movs	r6, #255	; 0xff
 8021810:	46b2      	mov	sl, r6
 8021812:	e7f7      	b.n	8021804 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8021814:	1c57      	adds	r7, r2, #1
 8021816:	d18e      	bne.n	8021736 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8021818:	4294      	cmp	r4, r2
 802181a:	dd8c      	ble.n	8021736 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 802181c:	1c5e      	adds	r6, r3, #1
 802181e:	db8a      	blt.n	8021736 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8021820:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8021822:	429e      	cmp	r6, r3
 8021824:	dd87      	ble.n	8021736 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8021826:	e9cd 1004 	strd	r1, r0, [sp, #16]
 802182a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802182e:	e9cd 4600 	strd	r4, r6, [sp]
 8021832:	462b      	mov	r3, r5
 8021834:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021836:	9907      	ldr	r1, [sp, #28]
 8021838:	9815      	ldr	r0, [sp, #84]	; 0x54
 802183a:	f7ff fc85 	bl	8021148 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 802183e:	e77a      	b.n	8021736 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8021840:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021842:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8021844:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021848:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802184a:	1409      	asrs	r1, r1, #16
 802184c:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8021850:	141b      	asrs	r3, r3, #16
 8021852:	fb04 1303 	mla	r3, r4, r3, r1
 8021856:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021858:	18ce      	adds	r6, r1, r3
 802185a:	5ccb      	ldrb	r3, [r1, r3]
 802185c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8021860:	0e1f      	lsrs	r7, r3, #24
 8021862:	2a00      	cmp	r2, #0
 8021864:	f000 8114 	beq.w	8021a90 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b0>
 8021868:	7871      	ldrb	r1, [r6, #1]
 802186a:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 802186e:	910e      	str	r1, [sp, #56]	; 0x38
 8021870:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8021874:	2800      	cmp	r0, #0
 8021876:	f000 8115 	beq.w	8021aa4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c4>
 802187a:	1931      	adds	r1, r6, r4
 802187c:	5d36      	ldrb	r6, [r6, r4]
 802187e:	7849      	ldrb	r1, [r1, #1]
 8021880:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8021884:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8021888:	960a      	str	r6, [sp, #40]	; 0x28
 802188a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802188e:	0e0e      	lsrs	r6, r1, #24
 8021890:	910f      	str	r1, [sp, #60]	; 0x3c
 8021892:	b292      	uxth	r2, r2
 8021894:	b280      	uxth	r0, r0
 8021896:	fb02 fb00 	mul.w	fp, r2, r0
 802189a:	0112      	lsls	r2, r2, #4
 802189c:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 80218a0:	eba2 090b 	sub.w	r9, r2, fp
 80218a4:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80218a8:	b280      	uxth	r0, r0
 80218aa:	fa1f f989 	uxth.w	r9, r9
 80218ae:	1a09      	subs	r1, r1, r0
 80218b0:	fb09 f20e 	mul.w	r2, r9, lr
 80218b4:	b289      	uxth	r1, r1
 80218b6:	fb01 2207 	mla	r2, r1, r7, r2
 80218ba:	fb00 220a 	mla	r2, r0, sl, r2
 80218be:	fb0b 2206 	mla	r2, fp, r6, r2
 80218c2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80218c6:	9213      	str	r2, [sp, #76]	; 0x4c
 80218c8:	2a00      	cmp	r2, #0
 80218ca:	f000 80d4 	beq.w	8021a76 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x696>
 80218ce:	2fff      	cmp	r7, #255	; 0xff
 80218d0:	d01a      	beq.n	8021908 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 80218d2:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80218d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80218da:	fb07 fc0c 	mul.w	ip, r7, ip
 80218de:	435f      	muls	r7, r3
 80218e0:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80218e4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80218e8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80218ec:	4463      	add	r3, ip
 80218ee:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 80218f2:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 80218f6:	0a1b      	lsrs	r3, r3, #8
 80218f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80218fc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021900:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021904:	ea43 030c 	orr.w	r3, r3, ip
 8021908:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802190c:	d01f      	beq.n	802194e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56e>
 802190e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8021910:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021912:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021916:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802191a:	fb0e f707 	mul.w	r7, lr, r7
 802191e:	fb0e fe0c 	mul.w	lr, lr, ip
 8021922:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021926:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802192a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802192e:	44bc      	add	ip, r7
 8021930:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8021934:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8021938:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802193c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021940:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021944:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021948:	ea4c 020e 	orr.w	r2, ip, lr
 802194c:	920e      	str	r2, [sp, #56]	; 0x38
 802194e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021952:	d01e      	beq.n	8021992 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b2>
 8021954:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021956:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802195a:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 802195e:	fb0a fe0e 	mul.w	lr, sl, lr
 8021962:	fb0a fa07 	mul.w	sl, sl, r7
 8021966:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802196a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802196e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021972:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021976:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802197a:	44f4      	add	ip, lr
 802197c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021980:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021984:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021988:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802198c:	ea4c 020a 	orr.w	r2, ip, sl
 8021990:	920a      	str	r2, [sp, #40]	; 0x28
 8021992:	2eff      	cmp	r6, #255	; 0xff
 8021994:	d01c      	beq.n	80219d0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f0>
 8021996:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021998:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802199c:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80219a0:	fb06 fe0e 	mul.w	lr, r6, lr
 80219a4:	437e      	muls	r6, r7
 80219a6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80219aa:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80219ae:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80219b2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80219b6:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 80219ba:	44f4      	add	ip, lr
 80219bc:	0a36      	lsrs	r6, r6, #8
 80219be:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80219c2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80219c6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80219ca:	ea4c 0206 	orr.w	r2, ip, r6
 80219ce:	920f      	str	r2, [sp, #60]	; 0x3c
 80219d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80219d2:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80219d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80219da:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 80219de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80219e0:	fb09 f606 	mul.w	r6, r9, r6
 80219e4:	fb01 6607 	mla	r6, r1, r7, r6
 80219e8:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 80219ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80219ee:	fb00 6607 	mla	r6, r0, r7, r6
 80219f2:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 80219f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80219f8:	fb0b 6607 	mla	r6, fp, r7, r6
 80219fc:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8021a00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021a02:	fb09 f907 	mul.w	r9, r9, r7
 8021a06:	0a36      	lsrs	r6, r6, #8
 8021a08:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8021a0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021a0e:	fb01 9303 	mla	r3, r1, r3, r9
 8021a12:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021a16:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8021a1a:	fb00 330c 	mla	r3, r0, ip, r3
 8021a1e:	fb0b 3e0e 	mla	lr, fp, lr, r3
 8021a22:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021a24:	43da      	mvns	r2, r3
 8021a26:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 8021a2a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021a2e:	b2d2      	uxtb	r2, r2
 8021a30:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021a34:	fb03 f102 	mul.w	r1, r3, r2
 8021a38:	ea46 060e 	orr.w	r6, r6, lr
 8021a3c:	1c4b      	adds	r3, r1, #1
 8021a3e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021a42:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8021a46:	f808 3c03 	strb.w	r3, [r8, #-3]
 8021a4a:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 8021a4e:	4353      	muls	r3, r2
 8021a50:	1c59      	adds	r1, r3, #1
 8021a52:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021a56:	0a33      	lsrs	r3, r6, #8
 8021a58:	0c36      	lsrs	r6, r6, #16
 8021a5a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021a5e:	f808 3c02 	strb.w	r3, [r8, #-2]
 8021a62:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8021a66:	435a      	muls	r2, r3
 8021a68:	1c53      	adds	r3, r2, #1
 8021a6a:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8021a6e:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8021a72:	f808 6c01 	strb.w	r6, [r8, #-1]
 8021a76:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021a78:	f108 0803 	add.w	r8, r8, #3
 8021a7c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021a7e:	4413      	add	r3, r2
 8021a80:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8021a82:	9329      	str	r3, [sp, #164]	; 0xa4
 8021a84:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021a86:	4413      	add	r3, r2
 8021a88:	932a      	str	r3, [sp, #168]	; 0xa8
 8021a8a:	9b07      	ldr	r3, [sp, #28]
 8021a8c:	3b01      	subs	r3, #1
 8021a8e:	e508      	b.n	80214a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 8021a90:	b158      	cbz	r0, 8021aaa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ca>
 8021a92:	5d31      	ldrb	r1, [r6, r4]
 8021a94:	26ff      	movs	r6, #255	; 0xff
 8021a96:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8021a9a:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8021a9e:	910a      	str	r1, [sp, #40]	; 0x28
 8021aa0:	46b6      	mov	lr, r6
 8021aa2:	e6f6      	b.n	8021892 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8021aa4:	26ff      	movs	r6, #255	; 0xff
 8021aa6:	46b2      	mov	sl, r6
 8021aa8:	e6f3      	b.n	8021892 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8021aaa:	26ff      	movs	r6, #255	; 0xff
 8021aac:	46b2      	mov	sl, r6
 8021aae:	e7f7      	b.n	8021aa0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c0>
 8021ab0:	b017      	add	sp, #92	; 0x5c
 8021ab2:	ecbd 8b08 	vpop	{d8-d11}
 8021ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021abc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8021abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ac0:	b08d      	sub	sp, #52	; 0x34
 8021ac2:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 8021ac6:	9103      	str	r1, [sp, #12]
 8021ac8:	fb07 5803 	mla	r8, r7, r3, r5
 8021acc:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8021ad0:	9803      	ldr	r0, [sp, #12]
 8021ad2:	2f00      	cmp	r7, #0
 8021ad4:	910b      	str	r1, [sp, #44]	; 0x2c
 8021ad6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8021ada:	9903      	ldr	r1, [sp, #12]
 8021adc:	9c03      	ldr	r4, [sp, #12]
 8021ade:	eb02 0608 	add.w	r6, r2, r8
 8021ae2:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8021ae6:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 8021aea:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8021aee:	7809      	ldrb	r1, [r1, #0]
 8021af0:	7840      	ldrb	r0, [r0, #1]
 8021af2:	78a4      	ldrb	r4, [r4, #2]
 8021af4:	db51      	blt.n	8021b9a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8021af6:	45be      	cmp	lr, r7
 8021af8:	dd4f      	ble.n	8021b9a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8021afa:	2d00      	cmp	r5, #0
 8021afc:	db49      	blt.n	8021b92 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8021afe:	42ab      	cmp	r3, r5
 8021b00:	dd47      	ble.n	8021b92 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8021b02:	f812 2008 	ldrb.w	r2, [r2, r8]
 8021b06:	9204      	str	r2, [sp, #16]
 8021b08:	7872      	ldrb	r2, [r6, #1]
 8021b0a:	9205      	str	r2, [sp, #20]
 8021b0c:	78b2      	ldrb	r2, [r6, #2]
 8021b0e:	9206      	str	r2, [sp, #24]
 8021b10:	1c6a      	adds	r2, r5, #1
 8021b12:	d449      	bmi.n	8021ba8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8021b14:	4293      	cmp	r3, r2
 8021b16:	dd47      	ble.n	8021ba8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8021b18:	f1bc 0f00 	cmp.w	ip, #0
 8021b1c:	d044      	beq.n	8021ba8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8021b1e:	7972      	ldrb	r2, [r6, #5]
 8021b20:	f896 b003 	ldrb.w	fp, [r6, #3]
 8021b24:	f896 a004 	ldrb.w	sl, [r6, #4]
 8021b28:	9201      	str	r2, [sp, #4]
 8021b2a:	3701      	adds	r7, #1
 8021b2c:	d444      	bmi.n	8021bb8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8021b2e:	45be      	cmp	lr, r7
 8021b30:	dd42      	ble.n	8021bb8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8021b32:	f1b9 0f00 	cmp.w	r9, #0
 8021b36:	f000 80c1 	beq.w	8021cbc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 8021b3a:	2d00      	cmp	r5, #0
 8021b3c:	db38      	blt.n	8021bb0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8021b3e:	42ab      	cmp	r3, r5
 8021b40:	dd36      	ble.n	8021bb0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8021b42:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8021b46:	f816 8002 	ldrb.w	r8, [r6, r2]
 8021b4a:	2203      	movs	r2, #3
 8021b4c:	fb03 6702 	mla	r7, r3, r2, r6
 8021b50:	fb03 6202 	mla	r2, r3, r2, r6
 8021b54:	787f      	ldrb	r7, [r7, #1]
 8021b56:	f892 e002 	ldrb.w	lr, [r2, #2]
 8021b5a:	9702      	str	r7, [sp, #8]
 8021b5c:	3501      	adds	r5, #1
 8021b5e:	d432      	bmi.n	8021bc6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8021b60:	42ab      	cmp	r3, r5
 8021b62:	dd30      	ble.n	8021bc6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8021b64:	f1bc 0f00 	cmp.w	ip, #0
 8021b68:	d031      	beq.n	8021bce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 8021b6a:	2703      	movs	r7, #3
 8021b6c:	fb13 7207 	smlabb	r2, r3, r7, r7
 8021b70:	5cb5      	ldrb	r5, [r6, r2]
 8021b72:	fb03 6207 	mla	r2, r3, r7, r6
 8021b76:	fb03 6307 	mla	r3, r3, r7, r6
 8021b7a:	7912      	ldrb	r2, [r2, #4]
 8021b7c:	795e      	ldrb	r6, [r3, #5]
 8021b7e:	f1bc 0f0f 	cmp.w	ip, #15
 8021b82:	d927      	bls.n	8021bd4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 8021b84:	4b53      	ldr	r3, [pc, #332]	; (8021cd4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 8021b86:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8021b8a:	4a53      	ldr	r2, [pc, #332]	; (8021cd8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8021b8c:	4853      	ldr	r0, [pc, #332]	; (8021cdc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 8021b8e:	f004 facf 	bl	8026130 <__assert_func>
 8021b92:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8021b96:	9104      	str	r1, [sp, #16]
 8021b98:	e7ba      	b.n	8021b10 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 8021b9a:	9401      	str	r4, [sp, #4]
 8021b9c:	4682      	mov	sl, r0
 8021b9e:	468b      	mov	fp, r1
 8021ba0:	9104      	str	r1, [sp, #16]
 8021ba2:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8021ba6:	e7c0      	b.n	8021b2a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8021ba8:	9401      	str	r4, [sp, #4]
 8021baa:	4682      	mov	sl, r0
 8021bac:	468b      	mov	fp, r1
 8021bae:	e7bc      	b.n	8021b2a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8021bb0:	46a6      	mov	lr, r4
 8021bb2:	9002      	str	r0, [sp, #8]
 8021bb4:	4688      	mov	r8, r1
 8021bb6:	e7d1      	b.n	8021b5c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 8021bb8:	4626      	mov	r6, r4
 8021bba:	4602      	mov	r2, r0
 8021bbc:	460d      	mov	r5, r1
 8021bbe:	46a6      	mov	lr, r4
 8021bc0:	9002      	str	r0, [sp, #8]
 8021bc2:	4688      	mov	r8, r1
 8021bc4:	e7db      	b.n	8021b7e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8021bc6:	4626      	mov	r6, r4
 8021bc8:	4602      	mov	r2, r0
 8021bca:	460d      	mov	r5, r1
 8021bcc:	e7d7      	b.n	8021b7e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8021bce:	4626      	mov	r6, r4
 8021bd0:	4602      	mov	r2, r0
 8021bd2:	460d      	mov	r5, r1
 8021bd4:	f1b9 0f0f 	cmp.w	r9, #15
 8021bd8:	d8d4      	bhi.n	8021b84 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8021bda:	fa1f f38c 	uxth.w	r3, ip
 8021bde:	fa1f fc89 	uxth.w	ip, r9
 8021be2:	fb03 f70c 	mul.w	r7, r3, ip
 8021be6:	011b      	lsls	r3, r3, #4
 8021be8:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8021bec:	9707      	str	r7, [sp, #28]
 8021bee:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8021bf2:	fa1f fc8c 	uxth.w	ip, ip
 8021bf6:	eba7 070c 	sub.w	r7, r7, ip
 8021bfa:	b2bf      	uxth	r7, r7
 8021bfc:	9709      	str	r7, [sp, #36]	; 0x24
 8021bfe:	9f07      	ldr	r7, [sp, #28]
 8021c00:	1bdb      	subs	r3, r3, r7
 8021c02:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 8021c06:	b29b      	uxth	r3, r3
 8021c08:	9708      	str	r7, [sp, #32]
 8021c0a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8021c0c:	930a      	str	r3, [sp, #40]	; 0x28
 8021c0e:	ea6f 0907 	mvn.w	r9, r7
 8021c12:	fb03 fb0b 	mul.w	fp, r3, fp
 8021c16:	9f04      	ldr	r7, [sp, #16]
 8021c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021c1a:	fa5f f989 	uxtb.w	r9, r9
 8021c1e:	fb03 bb07 	mla	fp, r3, r7, fp
 8021c22:	9f07      	ldr	r7, [sp, #28]
 8021c24:	fb11 f109 	smulbb	r1, r1, r9
 8021c28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021c2a:	fb0c b808 	mla	r8, ip, r8, fp
 8021c2e:	fb10 f009 	smulbb	r0, r0, r9
 8021c32:	fb14 f409 	smulbb	r4, r4, r9
 8021c36:	fb07 8805 	mla	r8, r7, r5, r8
 8021c3a:	9d08      	ldr	r5, [sp, #32]
 8021c3c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021c3e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8021c42:	fb08 1805 	mla	r8, r8, r5, r1
 8021c46:	9d05      	ldr	r5, [sp, #20]
 8021c48:	fa1f f888 	uxth.w	r8, r8
 8021c4c:	f108 0101 	add.w	r1, r8, #1
 8021c50:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8021c54:	9903      	ldr	r1, [sp, #12]
 8021c56:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021c5a:	f881 8000 	strb.w	r8, [r1]
 8021c5e:	fb03 f10a 	mul.w	r1, r3, sl
 8021c62:	fb07 1105 	mla	r1, r7, r5, r1
 8021c66:	9d02      	ldr	r5, [sp, #8]
 8021c68:	fb0c 1105 	mla	r1, ip, r5, r1
 8021c6c:	9d07      	ldr	r5, [sp, #28]
 8021c6e:	fb05 1102 	mla	r1, r5, r2, r1
 8021c72:	9a08      	ldr	r2, [sp, #32]
 8021c74:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021c78:	fb01 0102 	mla	r1, r1, r2, r0
 8021c7c:	9a03      	ldr	r2, [sp, #12]
 8021c7e:	b289      	uxth	r1, r1
 8021c80:	1c48      	adds	r0, r1, #1
 8021c82:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8021c86:	1209      	asrs	r1, r1, #8
 8021c88:	7051      	strb	r1, [r2, #1]
 8021c8a:	9a01      	ldr	r2, [sp, #4]
 8021c8c:	4353      	muls	r3, r2
 8021c8e:	9a06      	ldr	r2, [sp, #24]
 8021c90:	fb07 3702 	mla	r7, r7, r2, r3
 8021c94:	9b08      	ldr	r3, [sp, #32]
 8021c96:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8021c9a:	fb05 c606 	mla	r6, r5, r6, ip
 8021c9e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8021ca2:	fb06 4603 	mla	r6, r6, r3, r4
 8021ca6:	9b03      	ldr	r3, [sp, #12]
 8021ca8:	b2b6      	uxth	r6, r6
 8021caa:	f106 0e01 	add.w	lr, r6, #1
 8021cae:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8021cb2:	1236      	asrs	r6, r6, #8
 8021cb4:	709e      	strb	r6, [r3, #2]
 8021cb6:	b00d      	add	sp, #52	; 0x34
 8021cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021cbc:	f1bc 0f0f 	cmp.w	ip, #15
 8021cc0:	f63f af60 	bhi.w	8021b84 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8021cc4:	4626      	mov	r6, r4
 8021cc6:	4602      	mov	r2, r0
 8021cc8:	460d      	mov	r5, r1
 8021cca:	46a6      	mov	lr, r4
 8021ccc:	9002      	str	r0, [sp, #8]
 8021cce:	4688      	mov	r8, r1
 8021cd0:	e783      	b.n	8021bda <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 8021cd2:	bf00      	nop
 8021cd4:	0802abfb 	.word	0x0802abfb
 8021cd8:	0802b0f2 	.word	0x0802b0f2
 8021cdc:	0802acc4 	.word	0x0802acc4

08021ce0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ce4:	ed2d 8b08 	vpush	{d8-d11}
 8021ce8:	b0a1      	sub	sp, #132	; 0x84
 8021cea:	eeb0 aa40 	vmov.f32	s20, s0
 8021cee:	eef0 9a60 	vmov.f32	s19, s1
 8021cf2:	9307      	str	r3, [sp, #28]
 8021cf4:	eeb0 9a41 	vmov.f32	s18, s2
 8021cf8:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 8021cfc:	eeb0 8a62 	vmov.f32	s16, s5
 8021d00:	9210      	str	r2, [sp, #64]	; 0x40
 8021d02:	eef0 8a43 	vmov.f32	s17, s6
 8021d06:	9308      	str	r3, [sp, #32]
 8021d08:	eef0 ba44 	vmov.f32	s23, s8
 8021d0c:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 8021d10:	eeb0 ba64 	vmov.f32	s22, s9
 8021d14:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8021d16:	eef0 aa45 	vmov.f32	s21, s10
 8021d1a:	930a      	str	r3, [sp, #40]	; 0x28
 8021d1c:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 8021d20:	901f      	str	r0, [sp, #124]	; 0x7c
 8021d22:	930f      	str	r3, [sp, #60]	; 0x3c
 8021d24:	6850      	ldr	r0, [r2, #4]
 8021d26:	910e      	str	r1, [sp, #56]	; 0x38
 8021d28:	6812      	ldr	r2, [r2, #0]
 8021d2a:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 8021d2e:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 8021d32:	fb00 1303 	mla	r3, r0, r3, r1
 8021d36:	9908      	ldr	r1, [sp, #32]
 8021d38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021d3c:	18d3      	adds	r3, r2, r3
 8021d3e:	2203      	movs	r2, #3
 8021d40:	9309      	str	r3, [sp, #36]	; 0x24
 8021d42:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8021d44:	681b      	ldr	r3, [r3, #0]
 8021d46:	930c      	str	r3, [sp, #48]	; 0x30
 8021d48:	f06f 0304 	mvn.w	r3, #4
 8021d4c:	fb11 3302 	smlabb	r3, r1, r2, r3
 8021d50:	930d      	str	r3, [sp, #52]	; 0x34
 8021d52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021d54:	43db      	mvns	r3, r3
 8021d56:	b2db      	uxtb	r3, r3
 8021d58:	930b      	str	r3, [sp, #44]	; 0x2c
 8021d5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021d5c:	2b00      	cmp	r3, #0
 8021d5e:	dc03      	bgt.n	8021d68 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8021d60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021d62:	2b00      	cmp	r3, #0
 8021d64:	f340 81df 	ble.w	8022126 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8021d68:	9b07      	ldr	r3, [sp, #28]
 8021d6a:	2b00      	cmp	r3, #0
 8021d6c:	f340 80f2 	ble.w	8021f54 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8021d70:	ea5f 4228 	movs.w	r2, r8, asr #16
 8021d74:	ea4f 432b 	mov.w	r3, fp, asr #16
 8021d78:	d430      	bmi.n	8021ddc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021d7a:	1c51      	adds	r1, r2, #1
 8021d7c:	9808      	ldr	r0, [sp, #32]
 8021d7e:	4281      	cmp	r1, r0
 8021d80:	da2f      	bge.n	8021de2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8021d82:	2b00      	cmp	r3, #0
 8021d84:	db2d      	blt.n	8021de2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8021d86:	1c59      	adds	r1, r3, #1
 8021d88:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021d8a:	4288      	cmp	r0, r1
 8021d8c:	dd29      	ble.n	8021de2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8021d8e:	9b07      	ldr	r3, [sp, #28]
 8021d90:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8021d92:	3b01      	subs	r3, #1
 8021d94:	fb02 8203 	mla	r2, r2, r3, r8
 8021d98:	1412      	asrs	r2, r2, #16
 8021d9a:	d42d      	bmi.n	8021df8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8021d9c:	3201      	adds	r2, #1
 8021d9e:	9908      	ldr	r1, [sp, #32]
 8021da0:	4291      	cmp	r1, r2
 8021da2:	dd29      	ble.n	8021df8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8021da4:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8021da6:	fb02 b303 	mla	r3, r2, r3, fp
 8021daa:	141b      	asrs	r3, r3, #16
 8021dac:	d424      	bmi.n	8021df8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8021dae:	3301      	adds	r3, #1
 8021db0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021db2:	429a      	cmp	r2, r3
 8021db4:	dd20      	ble.n	8021df8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8021db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021db8:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8021dbc:	1cde      	adds	r6, r3, #3
 8021dbe:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 8021dc2:	f1bc 0f00 	cmp.w	ip, #0
 8021dc6:	f300 811f 	bgt.w	8022008 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 8021dca:	9b07      	ldr	r3, [sp, #28]
 8021dcc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021dd2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021dd6:	4423      	add	r3, r4
 8021dd8:	9309      	str	r3, [sp, #36]	; 0x24
 8021dda:	e0bd      	b.n	8021f58 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8021ddc:	1c57      	adds	r7, r2, #1
 8021dde:	f040 80ae 	bne.w	8021f3e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8021de2:	9908      	ldr	r1, [sp, #32]
 8021de4:	428a      	cmp	r2, r1
 8021de6:	f280 80aa 	bge.w	8021f3e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8021dea:	1c5e      	adds	r6, r3, #1
 8021dec:	f2c0 80a7 	blt.w	8021f3e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8021df0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021df2:	4293      	cmp	r3, r2
 8021df4:	f280 80a3 	bge.w	8021f3e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8021df8:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8021dfc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8021dfe:	f1ba 0f00 	cmp.w	sl, #0
 8021e02:	dde2      	ble.n	8021dca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8021e04:	ea5f 4028 	movs.w	r0, r8, asr #16
 8021e08:	f3c8 3303 	ubfx	r3, r8, #12, #4
 8021e0c:	ea4f 412b 	mov.w	r1, fp, asr #16
 8021e10:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8021e14:	f100 80df 	bmi.w	8021fd6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 8021e18:	1c45      	adds	r5, r0, #1
 8021e1a:	9f08      	ldr	r7, [sp, #32]
 8021e1c:	42af      	cmp	r7, r5
 8021e1e:	f340 80dc 	ble.w	8021fda <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8021e22:	2900      	cmp	r1, #0
 8021e24:	f2c0 80d9 	blt.w	8021fda <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8021e28:	1c4d      	adds	r5, r1, #1
 8021e2a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8021e2c:	42af      	cmp	r7, r5
 8021e2e:	f340 80d4 	ble.w	8021fda <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8021e32:	9d08      	ldr	r5, [sp, #32]
 8021e34:	fb05 0101 	mla	r1, r5, r1, r0
 8021e38:	980c      	ldr	r0, [sp, #48]	; 0x30
 8021e3a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021e3e:	1845      	adds	r5, r0, r1
 8021e40:	5c40      	ldrb	r0, [r0, r1]
 8021e42:	792f      	ldrb	r7, [r5, #4]
 8021e44:	7869      	ldrb	r1, [r5, #1]
 8021e46:	9711      	str	r7, [sp, #68]	; 0x44
 8021e48:	796f      	ldrb	r7, [r5, #5]
 8021e4a:	f895 e002 	ldrb.w	lr, [r5, #2]
 8021e4e:	f895 9003 	ldrb.w	r9, [r5, #3]
 8021e52:	9712      	str	r7, [sp, #72]	; 0x48
 8021e54:	b17a      	cbz	r2, 8021e76 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 8021e56:	3505      	adds	r5, #5
 8021e58:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8021e5a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021e5c:	19ef      	adds	r7, r5, r7
 8021e5e:	5d2d      	ldrb	r5, [r5, r4]
 8021e60:	787c      	ldrb	r4, [r7, #1]
 8021e62:	9513      	str	r5, [sp, #76]	; 0x4c
 8021e64:	9415      	str	r4, [sp, #84]	; 0x54
 8021e66:	78bc      	ldrb	r4, [r7, #2]
 8021e68:	9417      	str	r4, [sp, #92]	; 0x5c
 8021e6a:	78fc      	ldrb	r4, [r7, #3]
 8021e6c:	9414      	str	r4, [sp, #80]	; 0x50
 8021e6e:	793c      	ldrb	r4, [r7, #4]
 8021e70:	9416      	str	r4, [sp, #88]	; 0x58
 8021e72:	797c      	ldrb	r4, [r7, #5]
 8021e74:	9418      	str	r4, [sp, #96]	; 0x60
 8021e76:	b29b      	uxth	r3, r3
 8021e78:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021e7a:	b292      	uxth	r2, r2
 8021e7c:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8021e80:	fb03 f702 	mul.w	r7, r3, r2
 8021e84:	011b      	lsls	r3, r3, #4
 8021e86:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 8021e8a:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8021e8e:	1bdb      	subs	r3, r3, r7
 8021e90:	b292      	uxth	r2, r2
 8021e92:	b29b      	uxth	r3, r3
 8021e94:	ebac 0c02 	sub.w	ip, ip, r2
 8021e98:	fb03 f909 	mul.w	r9, r3, r9
 8021e9c:	fa1f fc8c 	uxth.w	ip, ip
 8021ea0:	fb0c 9000 	mla	r0, ip, r0, r9
 8021ea4:	f896 9000 	ldrb.w	r9, [r6]
 8021ea8:	fb02 0004 	mla	r0, r2, r4, r0
 8021eac:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021eae:	fb07 0004 	mla	r0, r7, r4, r0
 8021eb2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021eb4:	fb19 f904 	smulbb	r9, r9, r4
 8021eb8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021ebc:	fb00 9005 	mla	r0, r0, r5, r9
 8021ec0:	b280      	uxth	r0, r0
 8021ec2:	f100 0901 	add.w	r9, r0, #1
 8021ec6:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8021eca:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021ecc:	4358      	muls	r0, r3
 8021ece:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021ed2:	fb0c 0101 	mla	r1, ip, r1, r0
 8021ed6:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021ed8:	f886 9000 	strb.w	r9, [r6]
 8021edc:	fb02 1100 	mla	r1, r2, r0, r1
 8021ee0:	9816      	ldr	r0, [sp, #88]	; 0x58
 8021ee2:	fb07 1100 	mla	r1, r7, r0, r1
 8021ee6:	7870      	ldrb	r0, [r6, #1]
 8021ee8:	fb10 f004 	smulbb	r0, r0, r4
 8021eec:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021ef0:	fb01 0105 	mla	r1, r1, r5, r0
 8021ef4:	b289      	uxth	r1, r1
 8021ef6:	1c48      	adds	r0, r1, #1
 8021ef8:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8021efc:	1209      	asrs	r1, r1, #8
 8021efe:	7071      	strb	r1, [r6, #1]
 8021f00:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021f02:	434b      	muls	r3, r1
 8021f04:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8021f06:	fb0c 330e 	mla	r3, ip, lr, r3
 8021f0a:	fb02 3201 	mla	r2, r2, r1, r3
 8021f0e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021f10:	fb07 2703 	mla	r7, r7, r3, r2
 8021f14:	78b2      	ldrb	r2, [r6, #2]
 8021f16:	fb12 f204 	smulbb	r2, r2, r4
 8021f1a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8021f1e:	fb07 2505 	mla	r5, r7, r5, r2
 8021f22:	b2ad      	uxth	r5, r5
 8021f24:	1c6f      	adds	r7, r5, #1
 8021f26:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8021f2a:	122d      	asrs	r5, r5, #8
 8021f2c:	70b5      	strb	r5, [r6, #2]
 8021f2e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8021f30:	3603      	adds	r6, #3
 8021f32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021f36:	4498      	add	r8, r3
 8021f38:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8021f3a:	449b      	add	fp, r3
 8021f3c:	e75f      	b.n	8021dfe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 8021f3e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8021f40:	4498      	add	r8, r3
 8021f42:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8021f44:	449b      	add	fp, r3
 8021f46:	9b07      	ldr	r3, [sp, #28]
 8021f48:	3b01      	subs	r3, #1
 8021f4a:	9307      	str	r3, [sp, #28]
 8021f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021f4e:	3303      	adds	r3, #3
 8021f50:	9309      	str	r3, [sp, #36]	; 0x24
 8021f52:	e709      	b.n	8021d68 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8021f54:	f47f af1b 	bne.w	8021d8e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 8021f58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021f5a:	2b00      	cmp	r3, #0
 8021f5c:	f340 80e3 	ble.w	8022126 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8021f60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021f64:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021f66:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021f6a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021f6e:	eef0 6a48 	vmov.f32	s13, s16
 8021f72:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021f76:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021f7a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021f7e:	ee16 8a90 	vmov	r8, s13
 8021f82:	eef0 6a68 	vmov.f32	s13, s17
 8021f86:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021f8a:	ee16 ba90 	vmov	fp, s13
 8021f8e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021f92:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021f96:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021f9a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021f9e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021fa2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021fa6:	ee18 2a10 	vmov	r2, s16
 8021faa:	eeb0 8a47 	vmov.f32	s16, s14
 8021fae:	fb92 f3f3 	sdiv	r3, r2, r3
 8021fb2:	ee18 2a90 	vmov	r2, s17
 8021fb6:	9335      	str	r3, [sp, #212]	; 0xd4
 8021fb8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021fba:	eef0 8a67 	vmov.f32	s17, s15
 8021fbe:	fb92 f3f3 	sdiv	r3, r2, r3
 8021fc2:	9336      	str	r3, [sp, #216]	; 0xd8
 8021fc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021fc6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021fc8:	3b01      	subs	r3, #1
 8021fca:	930e      	str	r3, [sp, #56]	; 0x38
 8021fcc:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021fce:	bf08      	it	eq
 8021fd0:	4613      	moveq	r3, r2
 8021fd2:	9307      	str	r3, [sp, #28]
 8021fd4:	e6c1      	b.n	8021d5a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8021fd6:	1c45      	adds	r5, r0, #1
 8021fd8:	d1a9      	bne.n	8021f2e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8021fda:	9c08      	ldr	r4, [sp, #32]
 8021fdc:	42a0      	cmp	r0, r4
 8021fde:	daa6      	bge.n	8021f2e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8021fe0:	1c4c      	adds	r4, r1, #1
 8021fe2:	dba4      	blt.n	8021f2e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8021fe4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021fe6:	428c      	cmp	r4, r1
 8021fe8:	dda1      	ble.n	8021f2e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8021fea:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021fec:	9001      	str	r0, [sp, #4]
 8021fee:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8021ff0:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8021ff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021ff6:	4631      	mov	r1, r6
 8021ff8:	e9cd 2404 	strd	r2, r4, [sp, #16]
 8021ffc:	9300      	str	r3, [sp, #0]
 8021ffe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022000:	9b08      	ldr	r3, [sp, #32]
 8022002:	f7ff fd5b 	bl	8021abc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8022006:	e792      	b.n	8021f2e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8022008:	ea4f 4228 	mov.w	r2, r8, asr #16
 802200c:	9c08      	ldr	r4, [sp, #32]
 802200e:	ea4f 402b 	mov.w	r0, fp, asr #16
 8022012:	f3cb 3103 	ubfx	r1, fp, #12, #4
 8022016:	f3c8 3303 	ubfx	r3, r8, #12, #4
 802201a:	fb04 2000 	mla	r0, r4, r0, r2
 802201e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022020:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022022:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022026:	4402      	add	r2, r0
 8022028:	5c25      	ldrb	r5, [r4, r0]
 802202a:	7894      	ldrb	r4, [r2, #2]
 802202c:	7850      	ldrb	r0, [r2, #1]
 802202e:	9411      	str	r4, [sp, #68]	; 0x44
 8022030:	7954      	ldrb	r4, [r2, #5]
 8022032:	f892 a003 	ldrb.w	sl, [r2, #3]
 8022036:	f892 9004 	ldrb.w	r9, [r2, #4]
 802203a:	9412      	str	r4, [sp, #72]	; 0x48
 802203c:	b171      	cbz	r1, 802205c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802203e:	3205      	adds	r2, #5
 8022040:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022042:	1917      	adds	r7, r2, r4
 8022044:	5d12      	ldrb	r2, [r2, r4]
 8022046:	9219      	str	r2, [sp, #100]	; 0x64
 8022048:	787a      	ldrb	r2, [r7, #1]
 802204a:	921b      	str	r2, [sp, #108]	; 0x6c
 802204c:	78ba      	ldrb	r2, [r7, #2]
 802204e:	921d      	str	r2, [sp, #116]	; 0x74
 8022050:	78fa      	ldrb	r2, [r7, #3]
 8022052:	921a      	str	r2, [sp, #104]	; 0x68
 8022054:	793a      	ldrb	r2, [r7, #4]
 8022056:	921c      	str	r2, [sp, #112]	; 0x70
 8022058:	797a      	ldrb	r2, [r7, #5]
 802205a:	921e      	str	r2, [sp, #120]	; 0x78
 802205c:	b29b      	uxth	r3, r3
 802205e:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8022060:	b289      	uxth	r1, r1
 8022062:	3603      	adds	r6, #3
 8022064:	f10c 3cff 	add.w	ip, ip, #4294967295
 8022068:	fb03 f201 	mul.w	r2, r3, r1
 802206c:	011b      	lsls	r3, r3, #4
 802206e:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 8022072:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8022076:	1a9b      	subs	r3, r3, r2
 8022078:	b289      	uxth	r1, r1
 802207a:	b29b      	uxth	r3, r3
 802207c:	1a7f      	subs	r7, r7, r1
 802207e:	fb03 fa0a 	mul.w	sl, r3, sl
 8022082:	b2bf      	uxth	r7, r7
 8022084:	fb03 f909 	mul.w	r9, r3, r9
 8022088:	fb07 a505 	mla	r5, r7, r5, sl
 802208c:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 8022090:	fb07 9000 	mla	r0, r7, r0, r9
 8022094:	fb01 5504 	mla	r5, r1, r4, r5
 8022098:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 802209a:	fb02 5504 	mla	r5, r2, r4, r5
 802209e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80220a0:	fb1a fa04 	smulbb	sl, sl, r4
 80220a4:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80220a8:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 80220aa:	fb05 a50e 	mla	r5, r5, lr, sl
 80220ae:	fb01 0004 	mla	r0, r1, r4, r0
 80220b2:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80220b4:	b2ad      	uxth	r5, r5
 80220b6:	fb02 0004 	mla	r0, r2, r4, r0
 80220ba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80220bc:	f105 0a01 	add.w	sl, r5, #1
 80220c0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80220c4:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 80220c8:	122d      	asrs	r5, r5, #8
 80220ca:	f806 5c06 	strb.w	r5, [r6, #-6]
 80220ce:	f816 5c05 	ldrb.w	r5, [r6, #-5]
 80220d2:	fb15 f504 	smulbb	r5, r5, r4
 80220d6:	fb00 500e 	mla	r0, r0, lr, r5
 80220da:	b280      	uxth	r0, r0
 80220dc:	1c45      	adds	r5, r0, #1
 80220de:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80220e2:	1200      	asrs	r0, r0, #8
 80220e4:	f806 0c05 	strb.w	r0, [r6, #-5]
 80220e8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80220ea:	4343      	muls	r3, r0
 80220ec:	9811      	ldr	r0, [sp, #68]	; 0x44
 80220ee:	fb07 3300 	mla	r3, r7, r0, r3
 80220f2:	981d      	ldr	r0, [sp, #116]	; 0x74
 80220f4:	fb01 3100 	mla	r1, r1, r0, r3
 80220f8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80220fa:	fb02 1203 	mla	r2, r2, r3, r1
 80220fe:	f816 1c04 	ldrb.w	r1, [r6, #-4]
 8022102:	fb11 f104 	smulbb	r1, r1, r4
 8022106:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802210a:	fb02 120e 	mla	r2, r2, lr, r1
 802210e:	b292      	uxth	r2, r2
 8022110:	1c53      	adds	r3, r2, #1
 8022112:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8022116:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8022118:	1212      	asrs	r2, r2, #8
 802211a:	4498      	add	r8, r3
 802211c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 802211e:	f806 2c04 	strb.w	r2, [r6, #-4]
 8022122:	449b      	add	fp, r3
 8022124:	e64d      	b.n	8021dc2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8022126:	b021      	add	sp, #132	; 0x84
 8022128:	ecbd 8b08 	vpop	{d8-d11}
 802212c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022130 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8022130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022134:	b085      	sub	sp, #20
 8022136:	784d      	ldrb	r5, [r1, #1]
 8022138:	788e      	ldrb	r6, [r1, #2]
 802213a:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 802213e:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 8022142:	9403      	str	r4, [sp, #12]
 8022144:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8022148:	780c      	ldrb	r4, [r1, #0]
 802214a:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 802214e:	fb07 ce03 	mla	lr, r7, r3, ip
 8022152:	2f00      	cmp	r7, #0
 8022154:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8022158:	eb02 0b0e 	add.w	fp, r2, lr
 802215c:	db56      	blt.n	802220c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 802215e:	45b9      	cmp	r9, r7
 8022160:	dd54      	ble.n	802220c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8022162:	f1bc 0f00 	cmp.w	ip, #0
 8022166:	db4d      	blt.n	8022204 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8022168:	4563      	cmp	r3, ip
 802216a:	dd4b      	ble.n	8022204 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 802216c:	f812 200e 	ldrb.w	r2, [r2, lr]
 8022170:	9200      	str	r2, [sp, #0]
 8022172:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8022176:	9201      	str	r2, [sp, #4]
 8022178:	f89b 2002 	ldrb.w	r2, [fp, #2]
 802217c:	9202      	str	r2, [sp, #8]
 802217e:	f11c 0201 	adds.w	r2, ip, #1
 8022182:	d44a      	bmi.n	802221a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8022184:	4293      	cmp	r3, r2
 8022186:	dd48      	ble.n	802221a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8022188:	2800      	cmp	r0, #0
 802218a:	d046      	beq.n	802221a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 802218c:	f89b e003 	ldrb.w	lr, [fp, #3]
 8022190:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8022194:	f89b a005 	ldrb.w	sl, [fp, #5]
 8022198:	3701      	adds	r7, #1
 802219a:	d446      	bmi.n	802222a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 802219c:	45b9      	cmp	r9, r7
 802219e:	dd44      	ble.n	802222a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 80221a0:	9a03      	ldr	r2, [sp, #12]
 80221a2:	2a00      	cmp	r2, #0
 80221a4:	d045      	beq.n	8022232 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 80221a6:	f1bc 0f00 	cmp.w	ip, #0
 80221aa:	db3a      	blt.n	8022222 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 80221ac:	4563      	cmp	r3, ip
 80221ae:	dd38      	ble.n	8022222 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 80221b0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80221b4:	f04f 0903 	mov.w	r9, #3
 80221b8:	f81b 7002 	ldrb.w	r7, [fp, r2]
 80221bc:	fb03 b209 	mla	r2, r3, r9, fp
 80221c0:	fb03 b909 	mla	r9, r3, r9, fp
 80221c4:	7852      	ldrb	r2, [r2, #1]
 80221c6:	f899 9002 	ldrb.w	r9, [r9, #2]
 80221ca:	f11c 0c01 	adds.w	ip, ip, #1
 80221ce:	d40d      	bmi.n	80221ec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80221d0:	4563      	cmp	r3, ip
 80221d2:	dd0b      	ble.n	80221ec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80221d4:	b160      	cbz	r0, 80221f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 80221d6:	2603      	movs	r6, #3
 80221d8:	fb13 6406 	smlabb	r4, r3, r6, r6
 80221dc:	fb03 b506 	mla	r5, r3, r6, fp
 80221e0:	fb03 b306 	mla	r3, r3, r6, fp
 80221e4:	f81b 4004 	ldrb.w	r4, [fp, r4]
 80221e8:	792d      	ldrb	r5, [r5, #4]
 80221ea:	795e      	ldrb	r6, [r3, #5]
 80221ec:	280f      	cmp	r0, #15
 80221ee:	d802      	bhi.n	80221f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 80221f0:	9b03      	ldr	r3, [sp, #12]
 80221f2:	2b0f      	cmp	r3, #15
 80221f4:	d922      	bls.n	802223c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 80221f6:	4b2f      	ldr	r3, [pc, #188]	; (80222b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 80221f8:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80221fc:	4a2e      	ldr	r2, [pc, #184]	; (80222b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 80221fe:	482f      	ldr	r0, [pc, #188]	; (80222bc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 8022200:	f003 ff96 	bl	8026130 <__assert_func>
 8022204:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8022208:	9400      	str	r4, [sp, #0]
 802220a:	e7b8      	b.n	802217e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 802220c:	46b2      	mov	sl, r6
 802220e:	46a8      	mov	r8, r5
 8022210:	46a6      	mov	lr, r4
 8022212:	9400      	str	r4, [sp, #0]
 8022214:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8022218:	e7be      	b.n	8022198 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 802221a:	46b2      	mov	sl, r6
 802221c:	46a8      	mov	r8, r5
 802221e:	46a6      	mov	lr, r4
 8022220:	e7ba      	b.n	8022198 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8022222:	46b1      	mov	r9, r6
 8022224:	462a      	mov	r2, r5
 8022226:	4627      	mov	r7, r4
 8022228:	e7cf      	b.n	80221ca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 802222a:	46b1      	mov	r9, r6
 802222c:	462a      	mov	r2, r5
 802222e:	4627      	mov	r7, r4
 8022230:	e7dc      	b.n	80221ec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8022232:	280f      	cmp	r0, #15
 8022234:	d8df      	bhi.n	80221f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8022236:	46b1      	mov	r9, r6
 8022238:	462a      	mov	r2, r5
 802223a:	4627      	mov	r7, r4
 802223c:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8022240:	b280      	uxth	r0, r0
 8022242:	fb00 f30b 	mul.w	r3, r0, fp
 8022246:	0100      	lsls	r0, r0, #4
 8022248:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 802224c:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 8022250:	1ac0      	subs	r0, r0, r3
 8022252:	fa1f fb8b 	uxth.w	fp, fp
 8022256:	b280      	uxth	r0, r0
 8022258:	ebac 0c0b 	sub.w	ip, ip, fp
 802225c:	9003      	str	r0, [sp, #12]
 802225e:	fa1f fc8c 	uxth.w	ip, ip
 8022262:	fb00 fe0e 	mul.w	lr, r0, lr
 8022266:	9800      	ldr	r0, [sp, #0]
 8022268:	fb0c ee00 	mla	lr, ip, r0, lr
 802226c:	9803      	ldr	r0, [sp, #12]
 802226e:	fb00 f808 	mul.w	r8, r0, r8
 8022272:	9801      	ldr	r0, [sp, #4]
 8022274:	fb0b ee07 	mla	lr, fp, r7, lr
 8022278:	fb0c 8800 	mla	r8, ip, r0, r8
 802227c:	fb03 ee04 	mla	lr, r3, r4, lr
 8022280:	fb0b 8202 	mla	r2, fp, r2, r8
 8022284:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022288:	fb03 2505 	mla	r5, r3, r5, r2
 802228c:	9a03      	ldr	r2, [sp, #12]
 802228e:	f881 e000 	strb.w	lr, [r1]
 8022292:	fb02 f00a 	mul.w	r0, r2, sl
 8022296:	9a02      	ldr	r2, [sp, #8]
 8022298:	122d      	asrs	r5, r5, #8
 802229a:	fb0c 0c02 	mla	ip, ip, r2, r0
 802229e:	704d      	strb	r5, [r1, #1]
 80222a0:	fb0b c909 	mla	r9, fp, r9, ip
 80222a4:	fb03 9606 	mla	r6, r3, r6, r9
 80222a8:	1236      	asrs	r6, r6, #8
 80222aa:	708e      	strb	r6, [r1, #2]
 80222ac:	b005      	add	sp, #20
 80222ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80222b2:	bf00      	nop
 80222b4:	0802abfb 	.word	0x0802abfb
 80222b8:	0802b0f2 	.word	0x0802b0f2
 80222bc:	0802acc4 	.word	0x0802acc4

080222c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80222c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80222c4:	ed2d 8b0a 	vpush	{d8-d12}
 80222c8:	b09d      	sub	sp, #116	; 0x74
 80222ca:	eeb0 aa40 	vmov.f32	s20, s0
 80222ce:	eef0 9a60 	vmov.f32	s19, s1
 80222d2:	9306      	str	r3, [sp, #24]
 80222d4:	eeb0 9a41 	vmov.f32	s18, s2
 80222d8:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 80222dc:	eeb0 8a62 	vmov.f32	s16, s5
 80222e0:	901b      	str	r0, [sp, #108]	; 0x6c
 80222e2:	eef0 8a43 	vmov.f32	s17, s6
 80222e6:	9307      	str	r3, [sp, #28]
 80222e8:	eeb0 ca44 	vmov.f32	s24, s8
 80222ec:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 80222f0:	eef0 ba64 	vmov.f32	s23, s9
 80222f4:	eeb0 ba45 	vmov.f32	s22, s10
 80222f8:	9309      	str	r3, [sp, #36]	; 0x24
 80222fa:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80222fe:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 8022302:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8022304:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8022308:	6850      	ldr	r0, [r2, #4]
 802230a:	6812      	ldr	r2, [r2, #0]
 802230c:	fb00 1303 	mla	r3, r0, r3, r1
 8022310:	9907      	ldr	r1, [sp, #28]
 8022312:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022316:	18d3      	adds	r3, r2, r3
 8022318:	2203      	movs	r2, #3
 802231a:	9308      	str	r3, [sp, #32]
 802231c:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 802231e:	681b      	ldr	r3, [r3, #0]
 8022320:	930a      	str	r3, [sp, #40]	; 0x28
 8022322:	f06f 0304 	mvn.w	r3, #4
 8022326:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 802232a:	fb11 3302 	smlabb	r3, r1, r2, r3
 802232e:	930b      	str	r3, [sp, #44]	; 0x2c
 8022330:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022332:	2b00      	cmp	r3, #0
 8022334:	dc03      	bgt.n	802233e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8022336:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022338:	2b00      	cmp	r3, #0
 802233a:	f340 8193 	ble.w	8022664 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 802233e:	9b06      	ldr	r3, [sp, #24]
 8022340:	2b00      	cmp	r3, #0
 8022342:	f340 80d0 	ble.w	80224e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 8022346:	1432      	asrs	r2, r6, #16
 8022348:	ea4f 4325 	mov.w	r3, r5, asr #16
 802234c:	d42f      	bmi.n	80223ae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 802234e:	1c51      	adds	r1, r2, #1
 8022350:	9807      	ldr	r0, [sp, #28]
 8022352:	4281      	cmp	r1, r0
 8022354:	da2e      	bge.n	80223b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8022356:	2b00      	cmp	r3, #0
 8022358:	db2c      	blt.n	80223b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802235a:	1c59      	adds	r1, r3, #1
 802235c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802235e:	4288      	cmp	r0, r1
 8022360:	dd28      	ble.n	80223b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8022362:	9b06      	ldr	r3, [sp, #24]
 8022364:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8022366:	3b01      	subs	r3, #1
 8022368:	fb02 6203 	mla	r2, r2, r3, r6
 802236c:	1412      	asrs	r2, r2, #16
 802236e:	d42c      	bmi.n	80223ca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8022370:	3201      	adds	r2, #1
 8022372:	9907      	ldr	r1, [sp, #28]
 8022374:	4291      	cmp	r1, r2
 8022376:	dd28      	ble.n	80223ca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8022378:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 802237a:	fb02 5303 	mla	r3, r2, r3, r5
 802237e:	141b      	asrs	r3, r3, #16
 8022380:	d423      	bmi.n	80223ca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8022382:	3301      	adds	r3, #1
 8022384:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022386:	429a      	cmp	r2, r3
 8022388:	dd1f      	ble.n	80223ca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 802238a:	9b08      	ldr	r3, [sp, #32]
 802238c:	f8dd e018 	ldr.w	lr, [sp, #24]
 8022390:	f103 0c03 	add.w	ip, r3, #3
 8022394:	f1be 0f00 	cmp.w	lr, #0
 8022398:	f300 80fa 	bgt.w	8022590 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 802239c:	9b06      	ldr	r3, [sp, #24]
 802239e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80223a2:	9b08      	ldr	r3, [sp, #32]
 80223a4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80223a8:	4423      	add	r3, r4
 80223aa:	9308      	str	r3, [sp, #32]
 80223ac:	e09d      	b.n	80224ea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 80223ae:	1c51      	adds	r1, r2, #1
 80223b0:	f040 808e 	bne.w	80224d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 80223b4:	9907      	ldr	r1, [sp, #28]
 80223b6:	428a      	cmp	r2, r1
 80223b8:	f280 808a 	bge.w	80224d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 80223bc:	1c5f      	adds	r7, r3, #1
 80223be:	f2c0 8087 	blt.w	80224d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 80223c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80223c4:	4293      	cmp	r3, r2
 80223c6:	f280 8083 	bge.w	80224d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 80223ca:	9f06      	ldr	r7, [sp, #24]
 80223cc:	f8dd a020 	ldr.w	sl, [sp, #32]
 80223d0:	2f00      	cmp	r7, #0
 80223d2:	dde3      	ble.n	802239c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 80223d4:	1432      	asrs	r2, r6, #16
 80223d6:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80223da:	ea4f 4325 	mov.w	r3, r5, asr #16
 80223de:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 80223e2:	f100 80bf 	bmi.w	8022564 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 80223e6:	1c50      	adds	r0, r2, #1
 80223e8:	9c07      	ldr	r4, [sp, #28]
 80223ea:	4284      	cmp	r4, r0
 80223ec:	f340 80bc 	ble.w	8022568 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 80223f0:	2b00      	cmp	r3, #0
 80223f2:	f2c0 80b9 	blt.w	8022568 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 80223f6:	1c58      	adds	r0, r3, #1
 80223f8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80223fa:	4284      	cmp	r4, r0
 80223fc:	f340 80b4 	ble.w	8022568 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8022400:	9807      	ldr	r0, [sp, #28]
 8022402:	fb00 2303 	mla	r3, r0, r3, r2
 8022406:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022408:	980a      	ldr	r0, [sp, #40]	; 0x28
 802240a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802240e:	441a      	add	r2, r3
 8022410:	f810 c003 	ldrb.w	ip, [r0, r3]
 8022414:	7953      	ldrb	r3, [r2, #5]
 8022416:	7850      	ldrb	r0, [r2, #1]
 8022418:	f892 e002 	ldrb.w	lr, [r2, #2]
 802241c:	f892 9003 	ldrb.w	r9, [r2, #3]
 8022420:	f892 8004 	ldrb.w	r8, [r2, #4]
 8022424:	930e      	str	r3, [sp, #56]	; 0x38
 8022426:	f1bb 0f00 	cmp.w	fp, #0
 802242a:	d00f      	beq.n	802244c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 802242c:	3205      	adds	r2, #5
 802242e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022430:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022432:	18d3      	adds	r3, r2, r3
 8022434:	5d12      	ldrb	r2, [r2, r4]
 8022436:	920f      	str	r2, [sp, #60]	; 0x3c
 8022438:	785a      	ldrb	r2, [r3, #1]
 802243a:	9211      	str	r2, [sp, #68]	; 0x44
 802243c:	789a      	ldrb	r2, [r3, #2]
 802243e:	9213      	str	r2, [sp, #76]	; 0x4c
 8022440:	78da      	ldrb	r2, [r3, #3]
 8022442:	9210      	str	r2, [sp, #64]	; 0x40
 8022444:	791a      	ldrb	r2, [r3, #4]
 8022446:	795b      	ldrb	r3, [r3, #5]
 8022448:	9212      	str	r2, [sp, #72]	; 0x48
 802244a:	9314      	str	r3, [sp, #80]	; 0x50
 802244c:	b28b      	uxth	r3, r1
 802244e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022450:	fa1f f28b 	uxth.w	r2, fp
 8022454:	fb03 fb02 	mul.w	fp, r3, r2
 8022458:	011b      	lsls	r3, r3, #4
 802245a:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 802245e:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8022462:	eba3 030b 	sub.w	r3, r3, fp
 8022466:	b292      	uxth	r2, r2
 8022468:	b29b      	uxth	r3, r3
 802246a:	1a89      	subs	r1, r1, r2
 802246c:	fb03 f808 	mul.w	r8, r3, r8
 8022470:	b289      	uxth	r1, r1
 8022472:	fb03 f909 	mul.w	r9, r3, r9
 8022476:	fb01 8800 	mla	r8, r1, r0, r8
 802247a:	9811      	ldr	r0, [sp, #68]	; 0x44
 802247c:	fb01 990c 	mla	r9, r1, ip, r9
 8022480:	fb02 8800 	mla	r8, r2, r0, r8
 8022484:	9812      	ldr	r0, [sp, #72]	; 0x48
 8022486:	fb02 9904 	mla	r9, r2, r4, r9
 802248a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802248c:	fb0b 8800 	mla	r8, fp, r0, r8
 8022490:	980e      	ldr	r0, [sp, #56]	; 0x38
 8022492:	fb0b 9904 	mla	r9, fp, r4, r9
 8022496:	4343      	muls	r3, r0
 8022498:	ea4f 2828 	mov.w	r8, r8, asr #8
 802249c:	ea4f 2929 	mov.w	r9, r9, asr #8
 80224a0:	fb01 330e 	mla	r3, r1, lr, r3
 80224a4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80224a6:	f88a 9000 	strb.w	r9, [sl]
 80224aa:	fb02 3201 	mla	r2, r2, r1, r3
 80224ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80224b0:	f88a 8001 	strb.w	r8, [sl, #1]
 80224b4:	fb0b 2b03 	mla	fp, fp, r3, r2
 80224b8:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 80224bc:	f88a b002 	strb.w	fp, [sl, #2]
 80224c0:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80224c2:	f10a 0a03 	add.w	sl, sl, #3
 80224c6:	3f01      	subs	r7, #1
 80224c8:	441e      	add	r6, r3
 80224ca:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80224cc:	441d      	add	r5, r3
 80224ce:	e77f      	b.n	80223d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 80224d0:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80224d2:	441e      	add	r6, r3
 80224d4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80224d6:	441d      	add	r5, r3
 80224d8:	9b06      	ldr	r3, [sp, #24]
 80224da:	3b01      	subs	r3, #1
 80224dc:	9306      	str	r3, [sp, #24]
 80224de:	9b08      	ldr	r3, [sp, #32]
 80224e0:	3303      	adds	r3, #3
 80224e2:	9308      	str	r3, [sp, #32]
 80224e4:	e72b      	b.n	802233e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 80224e6:	f47f af3c 	bne.w	8022362 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 80224ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80224ec:	2b00      	cmp	r3, #0
 80224ee:	f340 80b9 	ble.w	8022664 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 80224f2:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80224f6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80224f8:	ee79 9aab 	vadd.f32	s19, s19, s23
 80224fc:	eef0 6a48 	vmov.f32	s13, s16
 8022500:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8022504:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8022508:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802250c:	ee16 6a90 	vmov	r6, s13
 8022510:	eef0 6a68 	vmov.f32	s13, s17
 8022514:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022518:	ee16 5a90 	vmov	r5, s13
 802251c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022520:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022524:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022528:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802252c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022530:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022534:	ee18 2a10 	vmov	r2, s16
 8022538:	eeb0 8a47 	vmov.f32	s16, s14
 802253c:	fb92 f3f3 	sdiv	r3, r2, r3
 8022540:	ee18 2a90 	vmov	r2, s17
 8022544:	9333      	str	r3, [sp, #204]	; 0xcc
 8022546:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022548:	eef0 8a67 	vmov.f32	s17, s15
 802254c:	fb92 f3f3 	sdiv	r3, r2, r3
 8022550:	9334      	str	r3, [sp, #208]	; 0xd0
 8022552:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022554:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022556:	3b01      	subs	r3, #1
 8022558:	930c      	str	r3, [sp, #48]	; 0x30
 802255a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802255c:	bf08      	it	eq
 802255e:	4613      	moveq	r3, r2
 8022560:	9306      	str	r3, [sp, #24]
 8022562:	e6e5      	b.n	8022330 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8022564:	1c54      	adds	r4, r2, #1
 8022566:	d1ab      	bne.n	80224c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8022568:	9807      	ldr	r0, [sp, #28]
 802256a:	4282      	cmp	r2, r0
 802256c:	daa8      	bge.n	80224c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 802256e:	1c58      	adds	r0, r3, #1
 8022570:	dba6      	blt.n	80224c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8022572:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022574:	4298      	cmp	r0, r3
 8022576:	dda3      	ble.n	80224c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8022578:	9000      	str	r0, [sp, #0]
 802257a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 802257c:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8022580:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 8022584:	9b07      	ldr	r3, [sp, #28]
 8022586:	4651      	mov	r1, sl
 8022588:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802258a:	f7ff fdd1 	bl	8022130 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 802258e:	e797      	b.n	80224c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8022590:	1431      	asrs	r1, r6, #16
 8022592:	9c07      	ldr	r4, [sp, #28]
 8022594:	1428      	asrs	r0, r5, #16
 8022596:	f3c5 3203 	ubfx	r2, r5, #12, #4
 802259a:	f3c6 3303 	ubfx	r3, r6, #12, #4
 802259e:	fb04 1000 	mla	r0, r4, r0, r1
 80225a2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80225a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80225a6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80225aa:	4401      	add	r1, r0
 80225ac:	5c20      	ldrb	r0, [r4, r0]
 80225ae:	f891 8002 	ldrb.w	r8, [r1, #2]
 80225b2:	900e      	str	r0, [sp, #56]	; 0x38
 80225b4:	f891 a003 	ldrb.w	sl, [r1, #3]
 80225b8:	7848      	ldrb	r0, [r1, #1]
 80225ba:	f891 9004 	ldrb.w	r9, [r1, #4]
 80225be:	f891 b005 	ldrb.w	fp, [r1, #5]
 80225c2:	b172      	cbz	r2, 80225e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 80225c4:	3105      	adds	r1, #5
 80225c6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80225c8:	190f      	adds	r7, r1, r4
 80225ca:	5d09      	ldrb	r1, [r1, r4]
 80225cc:	9115      	str	r1, [sp, #84]	; 0x54
 80225ce:	7879      	ldrb	r1, [r7, #1]
 80225d0:	9117      	str	r1, [sp, #92]	; 0x5c
 80225d2:	78b9      	ldrb	r1, [r7, #2]
 80225d4:	9119      	str	r1, [sp, #100]	; 0x64
 80225d6:	78f9      	ldrb	r1, [r7, #3]
 80225d8:	9116      	str	r1, [sp, #88]	; 0x58
 80225da:	7939      	ldrb	r1, [r7, #4]
 80225dc:	9118      	str	r1, [sp, #96]	; 0x60
 80225de:	7979      	ldrb	r1, [r7, #5]
 80225e0:	911a      	str	r1, [sp, #104]	; 0x68
 80225e2:	b29b      	uxth	r3, r3
 80225e4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80225e6:	b292      	uxth	r2, r2
 80225e8:	f10c 0c03 	add.w	ip, ip, #3
 80225ec:	f10e 3eff 	add.w	lr, lr, #4294967295
 80225f0:	fb03 f102 	mul.w	r1, r3, r2
 80225f4:	011b      	lsls	r3, r3, #4
 80225f6:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 80225fa:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80225fe:	1a5b      	subs	r3, r3, r1
 8022600:	b292      	uxth	r2, r2
 8022602:	b29b      	uxth	r3, r3
 8022604:	1abf      	subs	r7, r7, r2
 8022606:	fb03 f909 	mul.w	r9, r3, r9
 802260a:	b2bf      	uxth	r7, r7
 802260c:	fb03 fa0a 	mul.w	sl, r3, sl
 8022610:	fb03 f30b 	mul.w	r3, r3, fp
 8022614:	fb07 9900 	mla	r9, r7, r0, r9
 8022618:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802261a:	fb07 aa04 	mla	sl, r7, r4, sl
 802261e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022620:	fb02 9900 	mla	r9, r2, r0, r9
 8022624:	9818      	ldr	r0, [sp, #96]	; 0x60
 8022626:	fb07 3308 	mla	r3, r7, r8, r3
 802262a:	fb01 9900 	mla	r9, r1, r0, r9
 802262e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8022630:	fb02 aa04 	mla	sl, r2, r4, sl
 8022634:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8022636:	fb02 3200 	mla	r2, r2, r0, r3
 802263a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802263c:	fb01 aa04 	mla	sl, r1, r4, sl
 8022640:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022644:	fb01 2103 	mla	r1, r1, r3, r2
 8022648:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 802264a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802264e:	f80c 9c05 	strb.w	r9, [ip, #-5]
 8022652:	1209      	asrs	r1, r1, #8
 8022654:	441e      	add	r6, r3
 8022656:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8022658:	f80c ac06 	strb.w	sl, [ip, #-6]
 802265c:	f80c 1c04 	strb.w	r1, [ip, #-4]
 8022660:	441d      	add	r5, r3
 8022662:	e697      	b.n	8022394 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 8022664:	b01d      	add	sp, #116	; 0x74
 8022666:	ecbd 8b0a 	vpop	{d8-d12}
 802266a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08022670 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8022670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022674:	b085      	sub	sp, #20
 8022676:	7888      	ldrb	r0, [r1, #2]
 8022678:	4691      	mov	r9, r2
 802267a:	9000      	str	r0, [sp, #0]
 802267c:	7848      	ldrb	r0, [r1, #1]
 802267e:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8022682:	9001      	str	r0, [sp, #4]
 8022684:	7808      	ldrb	r0, [r1, #0]
 8022686:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 802268a:	9002      	str	r0, [sp, #8]
 802268c:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8022690:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8022694:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8022698:	fb04 c603 	mla	r6, r4, r3, ip
 802269c:	2c00      	cmp	r4, #0
 802269e:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 80226a2:	9a00      	ldr	r2, [sp, #0]
 80226a4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80226a8:	9a01      	ldr	r2, [sp, #4]
 80226aa:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80226ae:	db3a      	blt.n	8022726 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 80226b0:	45a0      	cmp	r8, r4
 80226b2:	dd38      	ble.n	8022726 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 80226b4:	f1bc 0f00 	cmp.w	ip, #0
 80226b8:	db33      	blt.n	8022722 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 80226ba:	4563      	cmp	r3, ip
 80226bc:	dd31      	ble.n	8022722 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 80226be:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 80226c2:	f11c 0601 	adds.w	r6, ip, #1
 80226c6:	d431      	bmi.n	802272c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 80226c8:	42b3      	cmp	r3, r6
 80226ca:	dd2f      	ble.n	802272c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 80226cc:	b375      	cbz	r5, 802272c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 80226ce:	f8de 6004 	ldr.w	r6, [lr, #4]
 80226d2:	3401      	adds	r4, #1
 80226d4:	d42e      	bmi.n	8022734 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 80226d6:	45a0      	cmp	r8, r4
 80226d8:	dd2c      	ble.n	8022734 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 80226da:	b35f      	cbz	r7, 8022734 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 80226dc:	f1bc 0f00 	cmp.w	ip, #0
 80226e0:	db26      	blt.n	8022730 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 80226e2:	4563      	cmp	r3, ip
 80226e4:	dd24      	ble.n	8022730 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 80226e6:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 80226ea:	f11c 0c01 	adds.w	ip, ip, #1
 80226ee:	d405      	bmi.n	80226fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80226f0:	4563      	cmp	r3, ip
 80226f2:	dd03      	ble.n	80226fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80226f4:	b115      	cbz	r5, 80226fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80226f6:	3301      	adds	r3, #1
 80226f8:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 80226fc:	2d0f      	cmp	r5, #15
 80226fe:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8022702:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8022706:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802270a:	ea4f 6810 	mov.w	r8, r0, lsr #24
 802270e:	d801      	bhi.n	8022714 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 8022710:	2f0f      	cmp	r7, #15
 8022712:	d911      	bls.n	8022738 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 8022714:	4b80      	ldr	r3, [pc, #512]	; (8022918 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 8022716:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 802271a:	4a80      	ldr	r2, [pc, #512]	; (802291c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 802271c:	4880      	ldr	r0, [pc, #512]	; (8022920 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2b0>)
 802271e:	f003 fd07 	bl	8026130 <__assert_func>
 8022722:	4602      	mov	r2, r0
 8022724:	e7cd      	b.n	80226c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 8022726:	4606      	mov	r6, r0
 8022728:	4602      	mov	r2, r0
 802272a:	e7d2      	b.n	80226d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 802272c:	4606      	mov	r6, r0
 802272e:	e7d0      	b.n	80226d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8022730:	4604      	mov	r4, r0
 8022732:	e7da      	b.n	80226ea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 8022734:	4604      	mov	r4, r0
 8022736:	e7e1      	b.n	80226fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8022738:	b2ab      	uxth	r3, r5
 802273a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802273e:	b2bf      	uxth	r7, r7
 8022740:	fb03 fe07 	mul.w	lr, r3, r7
 8022744:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8022748:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 802274c:	eba3 0c0e 	sub.w	ip, r3, lr
 8022750:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8022754:	b2bf      	uxth	r7, r7
 8022756:	fa1f fc8c 	uxth.w	ip, ip
 802275a:	eba5 0507 	sub.w	r5, r5, r7
 802275e:	fb0c f30a 	mul.w	r3, ip, sl
 8022762:	b2ad      	uxth	r5, r5
 8022764:	fb05 330b 	mla	r3, r5, fp, r3
 8022768:	fb07 3309 	mla	r3, r7, r9, r3
 802276c:	fb0e 3308 	mla	r3, lr, r8, r3
 8022770:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022774:	9303      	str	r3, [sp, #12]
 8022776:	d018      	beq.n	80227aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x13a>
 8022778:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802277c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022780:	fb0b f303 	mul.w	r3, fp, r3
 8022784:	fb0b fb02 	mul.w	fp, fp, r2
 8022788:	0a1a      	lsrs	r2, r3, #8
 802278a:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 802278e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022792:	441a      	add	r2, r3
 8022794:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8022798:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 802279c:	0a12      	lsrs	r2, r2, #8
 802279e:	0a1b      	lsrs	r3, r3, #8
 80227a0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80227a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80227a8:	431a      	orrs	r2, r3
 80227aa:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80227ae:	d019      	beq.n	80227e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x174>
 80227b0:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80227b4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80227b8:	fb0a fb0b 	mul.w	fp, sl, fp
 80227bc:	fb0a fa06 	mul.w	sl, sl, r6
 80227c0:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80227c4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80227c8:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 80227cc:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80227d0:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80227d4:	445e      	add	r6, fp
 80227d6:	0a1b      	lsrs	r3, r3, #8
 80227d8:	0a36      	lsrs	r6, r6, #8
 80227da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80227de:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80227e2:	431e      	orrs	r6, r3
 80227e4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80227e8:	d019      	beq.n	802281e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1ae>
 80227ea:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80227ee:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80227f2:	fb09 fa0a 	mul.w	sl, r9, sl
 80227f6:	fb09 f904 	mul.w	r9, r9, r4
 80227fa:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80227fe:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022802:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8022806:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802280a:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 802280e:	4454      	add	r4, sl
 8022810:	0a1b      	lsrs	r3, r3, #8
 8022812:	0a24      	lsrs	r4, r4, #8
 8022814:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022818:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802281c:	431c      	orrs	r4, r3
 802281e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022822:	d019      	beq.n	8022858 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e8>
 8022824:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8022828:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802282c:	fb08 f909 	mul.w	r9, r8, r9
 8022830:	fb08 f800 	mul.w	r8, r8, r0
 8022834:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8022838:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 802283c:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8022840:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022844:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8022848:	4448      	add	r0, r9
 802284a:	0a1b      	lsrs	r3, r3, #8
 802284c:	0a00      	lsrs	r0, r0, #8
 802284e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022852:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022856:	4318      	orrs	r0, r3
 8022858:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 802285c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022860:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8022864:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022868:	fb0c f808 	mul.w	r8, ip, r8
 802286c:	fb0c f606 	mul.w	r6, ip, r6
 8022870:	fb05 8803 	mla	r8, r5, r3, r8
 8022874:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8022878:	fb05 6202 	mla	r2, r5, r2, r6
 802287c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022880:	fb07 8803 	mla	r8, r7, r3, r8
 8022884:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8022888:	fb07 2704 	mla	r7, r7, r4, r2
 802288c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022890:	fb0e 8303 	mla	r3, lr, r3, r8
 8022894:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8022898:	fb0e 7e00 	mla	lr, lr, r0, r7
 802289c:	9803      	ldr	r0, [sp, #12]
 802289e:	b292      	uxth	r2, r2
 80228a0:	9c02      	ldr	r4, [sp, #8]
 80228a2:	0a1b      	lsrs	r3, r3, #8
 80228a4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80228a8:	4350      	muls	r0, r2
 80228aa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80228ae:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80228b2:	ea43 0e0e 	orr.w	lr, r3, lr
 80228b6:	1c43      	adds	r3, r0, #1
 80228b8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80228bc:	fa5f f08e 	uxtb.w	r0, lr
 80228c0:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80228c4:	b2db      	uxtb	r3, r3
 80228c6:	fb14 f403 	smulbb	r4, r4, r3
 80228ca:	fb00 4002 	mla	r0, r0, r2, r4
 80228ce:	b280      	uxth	r0, r0
 80228d0:	1c44      	adds	r4, r0, #1
 80228d2:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 80228d6:	9c01      	ldr	r4, [sp, #4]
 80228d8:	fb14 f403 	smulbb	r4, r4, r3
 80228dc:	1200      	asrs	r0, r0, #8
 80228de:	7008      	strb	r0, [r1, #0]
 80228e0:	f3ce 2007 	ubfx	r0, lr, #8, #8
 80228e4:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80228e8:	fb00 4002 	mla	r0, r0, r2, r4
 80228ec:	b280      	uxth	r0, r0
 80228ee:	1c44      	adds	r4, r0, #1
 80228f0:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 80228f4:	1200      	asrs	r0, r0, #8
 80228f6:	7048      	strb	r0, [r1, #1]
 80228f8:	9800      	ldr	r0, [sp, #0]
 80228fa:	fb10 f303 	smulbb	r3, r0, r3
 80228fe:	fb0e 3202 	mla	r2, lr, r2, r3
 8022902:	b292      	uxth	r2, r2
 8022904:	f102 0e01 	add.w	lr, r2, #1
 8022908:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 802290c:	1212      	asrs	r2, r2, #8
 802290e:	708a      	strb	r2, [r1, #2]
 8022910:	b005      	add	sp, #20
 8022912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022916:	bf00      	nop
 8022918:	0802abfb 	.word	0x0802abfb
 802291c:	0802b0f2 	.word	0x0802b0f2
 8022920:	0802acc4 	.word	0x0802acc4

08022924 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022928:	ed2d 8b08 	vpush	{d8-d11}
 802292c:	b099      	sub	sp, #100	; 0x64
 802292e:	eeb0 aa40 	vmov.f32	s20, s0
 8022932:	eef0 9a60 	vmov.f32	s19, s1
 8022936:	9306      	str	r3, [sp, #24]
 8022938:	eeb0 9a41 	vmov.f32	s18, s2
 802293c:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 8022940:	eeb0 8a62 	vmov.f32	s16, s5
 8022944:	9216      	str	r2, [sp, #88]	; 0x58
 8022946:	eef0 8a43 	vmov.f32	s17, s6
 802294a:	9307      	str	r3, [sp, #28]
 802294c:	eef0 ba44 	vmov.f32	s23, s8
 8022950:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 8022954:	eeb0 ba64 	vmov.f32	s22, s9
 8022958:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 802295a:	eef0 aa45 	vmov.f32	s21, s10
 802295e:	9310      	str	r3, [sp, #64]	; 0x40
 8022960:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 8022964:	9017      	str	r0, [sp, #92]	; 0x5c
 8022966:	9112      	str	r1, [sp, #72]	; 0x48
 8022968:	6850      	ldr	r0, [r2, #4]
 802296a:	9315      	str	r3, [sp, #84]	; 0x54
 802296c:	6812      	ldr	r2, [r2, #0]
 802296e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8022970:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8022974:	fb00 1303 	mla	r3, r0, r3, r1
 8022978:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802297c:	18d3      	adds	r3, r2, r3
 802297e:	930a      	str	r3, [sp, #40]	; 0x28
 8022980:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8022982:	681b      	ldr	r3, [r3, #0]
 8022984:	9311      	str	r3, [sp, #68]	; 0x44
 8022986:	9b07      	ldr	r3, [sp, #28]
 8022988:	009b      	lsls	r3, r3, #2
 802298a:	930e      	str	r3, [sp, #56]	; 0x38
 802298c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802298e:	2b00      	cmp	r3, #0
 8022990:	dc03      	bgt.n	802299a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8022992:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022994:	2b00      	cmp	r3, #0
 8022996:	f340 833b 	ble.w	8023010 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 802299a:	9b06      	ldr	r3, [sp, #24]
 802299c:	2b00      	cmp	r3, #0
 802299e:	f340 8197 	ble.w	8022cd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 80229a2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80229a4:	1423      	asrs	r3, r4, #16
 80229a6:	1412      	asrs	r2, r2, #16
 80229a8:	d432      	bmi.n	8022a10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 80229aa:	1c51      	adds	r1, r2, #1
 80229ac:	9807      	ldr	r0, [sp, #28]
 80229ae:	4288      	cmp	r0, r1
 80229b0:	dd31      	ble.n	8022a16 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 80229b2:	2b00      	cmp	r3, #0
 80229b4:	db2f      	blt.n	8022a16 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 80229b6:	1c59      	adds	r1, r3, #1
 80229b8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80229ba:	4288      	cmp	r0, r1
 80229bc:	dd2b      	ble.n	8022a16 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 80229be:	9b06      	ldr	r3, [sp, #24]
 80229c0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80229c2:	3b01      	subs	r3, #1
 80229c4:	992b      	ldr	r1, [sp, #172]	; 0xac
 80229c6:	fb02 1203 	mla	r2, r2, r3, r1
 80229ca:	1412      	asrs	r2, r2, #16
 80229cc:	d42e      	bmi.n	8022a2c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 80229ce:	3201      	adds	r2, #1
 80229d0:	9907      	ldr	r1, [sp, #28]
 80229d2:	4291      	cmp	r1, r2
 80229d4:	dd2a      	ble.n	8022a2c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 80229d6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80229d8:	fb02 4303 	mla	r3, r2, r3, r4
 80229dc:	141b      	asrs	r3, r3, #16
 80229de:	d425      	bmi.n	8022a2c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 80229e0:	3301      	adds	r3, #1
 80229e2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80229e4:	429a      	cmp	r2, r3
 80229e6:	dd21      	ble.n	8022a2c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 80229e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80229ea:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 80229ee:	f103 0e03 	add.w	lr, r3, #3
 80229f2:	9b06      	ldr	r3, [sp, #24]
 80229f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80229f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80229f8:	2b00      	cmp	r3, #0
 80229fa:	f300 81d2 	bgt.w	8022da2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47e>
 80229fe:	9b06      	ldr	r3, [sp, #24]
 8022a00:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022a04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022a06:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022a0a:	4423      	add	r3, r4
 8022a0c:	930a      	str	r3, [sp, #40]	; 0x28
 8022a0e:	e161      	b.n	8022cd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 8022a10:	1c51      	adds	r1, r2, #1
 8022a12:	f040 8150 	bne.w	8022cb6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8022a16:	9907      	ldr	r1, [sp, #28]
 8022a18:	428a      	cmp	r2, r1
 8022a1a:	f280 814c 	bge.w	8022cb6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8022a1e:	1c5a      	adds	r2, r3, #1
 8022a20:	f2c0 8149 	blt.w	8022cb6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8022a24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022a26:	4293      	cmp	r3, r2
 8022a28:	f280 8145 	bge.w	8022cb6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8022a2c:	9b06      	ldr	r3, [sp, #24]
 8022a2e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8022a30:	9314      	str	r3, [sp, #80]	; 0x50
 8022a32:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8022a36:	9313      	str	r3, [sp, #76]	; 0x4c
 8022a38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022a3a:	2b00      	cmp	r3, #0
 8022a3c:	dddf      	ble.n	80229fe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 8022a3e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022a40:	1423      	asrs	r3, r4, #16
 8022a42:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8022a46:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8022a4a:	1412      	asrs	r2, r2, #16
 8022a4c:	f100 8190 	bmi.w	8022d70 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 8022a50:	1c55      	adds	r5, r2, #1
 8022a52:	9f07      	ldr	r7, [sp, #28]
 8022a54:	42af      	cmp	r7, r5
 8022a56:	f340 818d 	ble.w	8022d74 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8022a5a:	2b00      	cmp	r3, #0
 8022a5c:	f2c0 818a 	blt.w	8022d74 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8022a60:	1c5d      	adds	r5, r3, #1
 8022a62:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8022a64:	42af      	cmp	r7, r5
 8022a66:	f340 8185 	ble.w	8022d74 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8022a6a:	9d07      	ldr	r5, [sp, #28]
 8022a6c:	fb03 2305 	mla	r3, r3, r5, r2
 8022a70:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022a72:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8022a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022a7a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8022a7e:	2800      	cmp	r0, #0
 8022a80:	f000 8167 	beq.w	8022d52 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8022a84:	686a      	ldr	r2, [r5, #4]
 8022a86:	920b      	str	r2, [sp, #44]	; 0x2c
 8022a88:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8022a8c:	2900      	cmp	r1, #0
 8022a8e:	f000 8169 	beq.w	8022d64 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 8022a92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022a94:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8022a96:	18aa      	adds	r2, r5, r2
 8022a98:	59ed      	ldr	r5, [r5, r7]
 8022a9a:	6852      	ldr	r2, [r2, #4]
 8022a9c:	9508      	str	r5, [sp, #32]
 8022a9e:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8022aa2:	0e15      	lsrs	r5, r2, #24
 8022aa4:	920c      	str	r2, [sp, #48]	; 0x30
 8022aa6:	b280      	uxth	r0, r0
 8022aa8:	b289      	uxth	r1, r1
 8022aaa:	fb00 fb01 	mul.w	fp, r0, r1
 8022aae:	0100      	lsls	r0, r0, #4
 8022ab0:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 8022ab4:	eba0 090b 	sub.w	r9, r0, fp
 8022ab8:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8022abc:	b289      	uxth	r1, r1
 8022abe:	fa1f f989 	uxth.w	r9, r9
 8022ac2:	1a52      	subs	r2, r2, r1
 8022ac4:	fb09 f008 	mul.w	r0, r9, r8
 8022ac8:	b292      	uxth	r2, r2
 8022aca:	fb02 000c 	mla	r0, r2, ip, r0
 8022ace:	fb01 000a 	mla	r0, r1, sl, r0
 8022ad2:	fb0b 0005 	mla	r0, fp, r5, r0
 8022ad6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022ada:	2800      	cmp	r0, #0
 8022adc:	f000 80e0 	beq.w	8022ca0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8022ae0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8022ae4:	d01b      	beq.n	8022b1e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fa>
 8022ae6:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8022aea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022aee:	fb0c fe0e 	mul.w	lr, ip, lr
 8022af2:	fb0c fc03 	mul.w	ip, ip, r3
 8022af6:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8022afa:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022afe:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022b02:	4473      	add	r3, lr
 8022b04:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8022b08:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8022b0c:	0a1b      	lsrs	r3, r3, #8
 8022b0e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022b12:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022b16:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022b1a:	ea43 030e 	orr.w	r3, r3, lr
 8022b1e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022b22:	d01e      	beq.n	8022b62 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 8022b24:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022b26:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8022b2a:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8022b2e:	fb08 fc0c 	mul.w	ip, r8, ip
 8022b32:	fb08 f80e 	mul.w	r8, r8, lr
 8022b36:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022b3a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022b3e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022b42:	44e6      	add	lr, ip
 8022b44:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8022b48:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8022b4c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022b50:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8022b54:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022b58:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8022b5c:	ea4e 0708 	orr.w	r7, lr, r8
 8022b60:	970b      	str	r7, [sp, #44]	; 0x2c
 8022b62:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022b66:	d01e      	beq.n	8022ba6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8022b68:	9f08      	ldr	r7, [sp, #32]
 8022b6a:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8022b6e:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8022b72:	fb0a f808 	mul.w	r8, sl, r8
 8022b76:	fb0a fa0c 	mul.w	sl, sl, ip
 8022b7a:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8022b7e:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8022b82:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022b86:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022b8a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022b8e:	44c6      	add	lr, r8
 8022b90:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022b94:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022b98:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022b9c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022ba0:	ea4e 070a 	orr.w	r7, lr, sl
 8022ba4:	9708      	str	r7, [sp, #32]
 8022ba6:	2dff      	cmp	r5, #255	; 0xff
 8022ba8:	d01d      	beq.n	8022be6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 8022baa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022bac:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8022bb0:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8022bb4:	fb05 f808 	mul.w	r8, r5, r8
 8022bb8:	fb05 f50c 	mul.w	r5, r5, ip
 8022bbc:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8022bc0:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8022bc4:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8022bc8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022bcc:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8022bd0:	44c6      	add	lr, r8
 8022bd2:	0a2d      	lsrs	r5, r5, #8
 8022bd4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022bd8:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8022bdc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022be0:	ea4e 0505 	orr.w	r5, lr, r5
 8022be4:	950c      	str	r5, [sp, #48]	; 0x30
 8022be6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8022be8:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022bec:	9f08      	ldr	r7, [sp, #32]
 8022bee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022bf2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022bf6:	fb09 f505 	mul.w	r5, r9, r5
 8022bfa:	fb02 550c 	mla	r5, r2, ip, r5
 8022bfe:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8022c02:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022c04:	fb01 550c 	mla	r5, r1, ip, r5
 8022c08:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8022c0c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022c0e:	fb0b 550c 	mla	r5, fp, ip, r5
 8022c12:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8022c16:	fb09 f90c 	mul.w	r9, r9, ip
 8022c1a:	0a2d      	lsrs	r5, r5, #8
 8022c1c:	fb02 9303 	mla	r3, r2, r3, r9
 8022c20:	9a08      	ldr	r2, [sp, #32]
 8022c22:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022c26:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8022c2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022c2c:	fb01 330e 	mla	r3, r1, lr, r3
 8022c30:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8022c34:	fb0b 3b01 	mla	fp, fp, r1, r3
 8022c38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022c3a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8022c3c:	4343      	muls	r3, r0
 8022c3e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8022c42:	1c58      	adds	r0, r3, #1
 8022c44:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8022c48:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8022c4c:	ea45 050b 	orr.w	r5, r5, fp
 8022c50:	7833      	ldrb	r3, [r6, #0]
 8022c52:	b2ea      	uxtb	r2, r5
 8022c54:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8022c58:	fb12 f201 	smulbb	r2, r2, r1
 8022c5c:	b2c0      	uxtb	r0, r0
 8022c5e:	fb03 2300 	mla	r3, r3, r0, r2
 8022c62:	b29b      	uxth	r3, r3
 8022c64:	1c5a      	adds	r2, r3, #1
 8022c66:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022c6a:	7872      	ldrb	r2, [r6, #1]
 8022c6c:	fb12 f200 	smulbb	r2, r2, r0
 8022c70:	121b      	asrs	r3, r3, #8
 8022c72:	7033      	strb	r3, [r6, #0]
 8022c74:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8022c78:	0c2d      	lsrs	r5, r5, #16
 8022c7a:	fb03 2301 	mla	r3, r3, r1, r2
 8022c7e:	b29b      	uxth	r3, r3
 8022c80:	1c5a      	adds	r2, r3, #1
 8022c82:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022c86:	121b      	asrs	r3, r3, #8
 8022c88:	7073      	strb	r3, [r6, #1]
 8022c8a:	78b3      	ldrb	r3, [r6, #2]
 8022c8c:	fb13 f000 	smulbb	r0, r3, r0
 8022c90:	fb05 0501 	mla	r5, r5, r1, r0
 8022c94:	b2ad      	uxth	r5, r5
 8022c96:	1c6b      	adds	r3, r5, #1
 8022c98:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8022c9c:	122d      	asrs	r5, r5, #8
 8022c9e:	70b5      	strb	r5, [r6, #2]
 8022ca0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022ca2:	3603      	adds	r6, #3
 8022ca4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022ca6:	4413      	add	r3, r2
 8022ca8:	932b      	str	r3, [sp, #172]	; 0xac
 8022caa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022cac:	441c      	add	r4, r3
 8022cae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022cb0:	3b01      	subs	r3, #1
 8022cb2:	9314      	str	r3, [sp, #80]	; 0x50
 8022cb4:	e6c0      	b.n	8022a38 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 8022cb6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022cb8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022cba:	4413      	add	r3, r2
 8022cbc:	932b      	str	r3, [sp, #172]	; 0xac
 8022cbe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022cc0:	441c      	add	r4, r3
 8022cc2:	9b06      	ldr	r3, [sp, #24]
 8022cc4:	3b01      	subs	r3, #1
 8022cc6:	9306      	str	r3, [sp, #24]
 8022cc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022cca:	3303      	adds	r3, #3
 8022ccc:	930a      	str	r3, [sp, #40]	; 0x28
 8022cce:	e664      	b.n	802299a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8022cd0:	f47f ae75 	bne.w	80229be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8022cd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022cd6:	2b00      	cmp	r3, #0
 8022cd8:	f340 819a 	ble.w	8023010 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8022cdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022ce0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022ce2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022ce6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022cea:	eef0 6a48 	vmov.f32	s13, s16
 8022cee:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022cf2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022cf6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022cfa:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 8022cfe:	eef0 6a68 	vmov.f32	s13, s17
 8022d02:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022d06:	ee16 4a90 	vmov	r4, s13
 8022d0a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022d0e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022d12:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022d16:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022d1a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022d1e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022d22:	ee18 2a10 	vmov	r2, s16
 8022d26:	eeb0 8a47 	vmov.f32	s16, s14
 8022d2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8022d2e:	ee18 2a90 	vmov	r2, s17
 8022d32:	932d      	str	r3, [sp, #180]	; 0xb4
 8022d34:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022d36:	eef0 8a67 	vmov.f32	s17, s15
 8022d3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8022d3e:	932e      	str	r3, [sp, #184]	; 0xb8
 8022d40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022d42:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8022d44:	3b01      	subs	r3, #1
 8022d46:	9312      	str	r3, [sp, #72]	; 0x48
 8022d48:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022d4a:	bf08      	it	eq
 8022d4c:	4613      	moveq	r3, r2
 8022d4e:	9306      	str	r3, [sp, #24]
 8022d50:	e61c      	b.n	802298c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8022d52:	b151      	cbz	r1, 8022d6a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8022d54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022d56:	58aa      	ldr	r2, [r5, r2]
 8022d58:	25ff      	movs	r5, #255	; 0xff
 8022d5a:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8022d5e:	9208      	str	r2, [sp, #32]
 8022d60:	46a8      	mov	r8, r5
 8022d62:	e6a0      	b.n	8022aa6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8022d64:	25ff      	movs	r5, #255	; 0xff
 8022d66:	46aa      	mov	sl, r5
 8022d68:	e69d      	b.n	8022aa6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8022d6a:	25ff      	movs	r5, #255	; 0xff
 8022d6c:	46aa      	mov	sl, r5
 8022d6e:	e7f7      	b.n	8022d60 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 8022d70:	1c57      	adds	r7, r2, #1
 8022d72:	d195      	bne.n	8022ca0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8022d74:	9d07      	ldr	r5, [sp, #28]
 8022d76:	4295      	cmp	r5, r2
 8022d78:	dd92      	ble.n	8022ca0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8022d7a:	1c5d      	adds	r5, r3, #1
 8022d7c:	db90      	blt.n	8022ca0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8022d7e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8022d80:	429d      	cmp	r5, r3
 8022d82:	dd8d      	ble.n	8022ca0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8022d84:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8022d86:	9201      	str	r2, [sp, #4]
 8022d88:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022d8a:	e9cd 3002 	strd	r3, r0, [sp, #8]
 8022d8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022d90:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8022d92:	9300      	str	r3, [sp, #0]
 8022d94:	9b07      	ldr	r3, [sp, #28]
 8022d96:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8022d9a:	4631      	mov	r1, r6
 8022d9c:	f7ff fc68 	bl	8022670 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8022da0:	e77e      	b.n	8022ca0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8022da2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022da4:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8022da8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022daa:	9d07      	ldr	r5, [sp, #28]
 8022dac:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8022db0:	1412      	asrs	r2, r2, #16
 8022db2:	1423      	asrs	r3, r4, #16
 8022db4:	fb05 2303 	mla	r3, r5, r3, r2
 8022db8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022dba:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8022dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022dc2:	0e1e      	lsrs	r6, r3, #24
 8022dc4:	2900      	cmp	r1, #0
 8022dc6:	f000 8114 	beq.w	8022ff2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ce>
 8022dca:	686a      	ldr	r2, [r5, #4]
 8022dcc:	920d      	str	r2, [sp, #52]	; 0x34
 8022dce:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8022dd2:	2800      	cmp	r0, #0
 8022dd4:	f000 8116 	beq.w	8023004 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 8022dd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022dda:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8022ddc:	18aa      	adds	r2, r5, r2
 8022dde:	59ed      	ldr	r5, [r5, r7]
 8022de0:	6852      	ldr	r2, [r2, #4]
 8022de2:	9509      	str	r5, [sp, #36]	; 0x24
 8022de4:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8022de8:	0e15      	lsrs	r5, r2, #24
 8022dea:	920f      	str	r2, [sp, #60]	; 0x3c
 8022dec:	b289      	uxth	r1, r1
 8022dee:	b280      	uxth	r0, r0
 8022df0:	fb01 fa00 	mul.w	sl, r1, r0
 8022df4:	0109      	lsls	r1, r1, #4
 8022df6:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8022dfa:	eba1 080a 	sub.w	r8, r1, sl
 8022dfe:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8022e02:	b280      	uxth	r0, r0
 8022e04:	fa1f f888 	uxth.w	r8, r8
 8022e08:	1a12      	subs	r2, r2, r0
 8022e0a:	fb08 f10c 	mul.w	r1, r8, ip
 8022e0e:	b292      	uxth	r2, r2
 8022e10:	fb02 1106 	mla	r1, r2, r6, r1
 8022e14:	fb00 1109 	mla	r1, r0, r9, r1
 8022e18:	fb0a 1105 	mla	r1, sl, r5, r1
 8022e1c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8022e20:	2900      	cmp	r1, #0
 8022e22:	f000 80da 	beq.w	8022fda <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8022e26:	2eff      	cmp	r6, #255	; 0xff
 8022e28:	d016      	beq.n	8022e58 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x534>
 8022e2a:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8022e2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022e32:	4377      	muls	r7, r6
 8022e34:	435e      	muls	r6, r3
 8022e36:	0a3b      	lsrs	r3, r7, #8
 8022e38:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022e3c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022e40:	443b      	add	r3, r7
 8022e42:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8022e46:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8022e4a:	0a1b      	lsrs	r3, r3, #8
 8022e4c:	0a3f      	lsrs	r7, r7, #8
 8022e4e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022e52:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022e56:	433b      	orrs	r3, r7
 8022e58:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8022e5c:	d01d      	beq.n	8022e9a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x576>
 8022e5e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8022e60:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022e62:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022e66:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022e6a:	fb0c f606 	mul.w	r6, ip, r6
 8022e6e:	fb0c fc07 	mul.w	ip, ip, r7
 8022e72:	0a37      	lsrs	r7, r6, #8
 8022e74:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8022e78:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022e7c:	4437      	add	r7, r6
 8022e7e:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8022e82:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8022e86:	0a3f      	lsrs	r7, r7, #8
 8022e88:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022e8c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022e90:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022e94:	ea47 060c 	orr.w	r6, r7, ip
 8022e98:	960d      	str	r6, [sp, #52]	; 0x34
 8022e9a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022e9e:	d01d      	beq.n	8022edc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b8>
 8022ea0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8022ea2:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8022ea6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022eaa:	fb09 fc0c 	mul.w	ip, r9, ip
 8022eae:	fb09 f906 	mul.w	r9, r9, r6
 8022eb2:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8022eb6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022eba:	f509 7680 	add.w	r6, r9, #256	; 0x100
 8022ebe:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022ec2:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8022ec6:	4467      	add	r7, ip
 8022ec8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022ecc:	0a3f      	lsrs	r7, r7, #8
 8022ece:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022ed2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022ed6:	ea47 0609 	orr.w	r6, r7, r9
 8022eda:	9609      	str	r6, [sp, #36]	; 0x24
 8022edc:	2dff      	cmp	r5, #255	; 0xff
 8022ede:	d01a      	beq.n	8022f16 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 8022ee0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8022ee2:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8022ee6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022eea:	fb05 fc0c 	mul.w	ip, r5, ip
 8022eee:	4375      	muls	r5, r6
 8022ef0:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8022ef4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022ef8:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8022efc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022f00:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8022f04:	4467      	add	r7, ip
 8022f06:	0a2d      	lsrs	r5, r5, #8
 8022f08:	0a3f      	lsrs	r7, r7, #8
 8022f0a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8022f0e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022f12:	433d      	orrs	r5, r7
 8022f14:	950f      	str	r5, [sp, #60]	; 0x3c
 8022f16:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022f18:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8022f1c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022f20:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022f24:	fb08 f505 	mul.w	r5, r8, r5
 8022f28:	fb02 5506 	mla	r5, r2, r6, r5
 8022f2c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8022f2e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022f32:	fb00 5506 	mla	r5, r0, r6, r5
 8022f36:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8022f38:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022f3c:	fb0a 5506 	mla	r5, sl, r6, r5
 8022f40:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8022f42:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022f46:	0a2d      	lsrs	r5, r5, #8
 8022f48:	fb08 f806 	mul.w	r8, r8, r6
 8022f4c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022f50:	fb02 8303 	mla	r3, r2, r3, r8
 8022f54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022f56:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8022f5a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022f5c:	fb00 3307 	mla	r3, r0, r7, r3
 8022f60:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8022f64:	fb0a 3c0c 	mla	ip, sl, ip, r3
 8022f68:	fb01 f30b 	mul.w	r3, r1, fp
 8022f6c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022f70:	1c59      	adds	r1, r3, #1
 8022f72:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022f76:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022f7a:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8022f7e:	ea45 050c 	orr.w	r5, r5, ip
 8022f82:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8022f86:	b2ea      	uxtb	r2, r5
 8022f88:	b2c9      	uxtb	r1, r1
 8022f8a:	fb12 f20b 	smulbb	r2, r2, fp
 8022f8e:	fb03 2301 	mla	r3, r3, r1, r2
 8022f92:	b29b      	uxth	r3, r3
 8022f94:	1c5a      	adds	r2, r3, #1
 8022f96:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022f9a:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8022f9e:	fb12 f201 	smulbb	r2, r2, r1
 8022fa2:	121b      	asrs	r3, r3, #8
 8022fa4:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8022fa8:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8022fac:	0c2d      	lsrs	r5, r5, #16
 8022fae:	fb03 230b 	mla	r3, r3, fp, r2
 8022fb2:	b29b      	uxth	r3, r3
 8022fb4:	1c5a      	adds	r2, r3, #1
 8022fb6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022fba:	121b      	asrs	r3, r3, #8
 8022fbc:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8022fc0:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8022fc4:	fb13 f101 	smulbb	r1, r3, r1
 8022fc8:	fb05 150b 	mla	r5, r5, fp, r1
 8022fcc:	b2ad      	uxth	r5, r5
 8022fce:	1c69      	adds	r1, r5, #1
 8022fd0:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8022fd4:	122d      	asrs	r5, r5, #8
 8022fd6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8022fda:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022fdc:	f10e 0e03 	add.w	lr, lr, #3
 8022fe0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022fe2:	4413      	add	r3, r2
 8022fe4:	932b      	str	r3, [sp, #172]	; 0xac
 8022fe6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022fe8:	441c      	add	r4, r3
 8022fea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022fec:	3b01      	subs	r3, #1
 8022fee:	9313      	str	r3, [sp, #76]	; 0x4c
 8022ff0:	e501      	b.n	80229f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 8022ff2:	b150      	cbz	r0, 802300a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e6>
 8022ff4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022ff6:	58aa      	ldr	r2, [r5, r2]
 8022ff8:	25ff      	movs	r5, #255	; 0xff
 8022ffa:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8022ffe:	9209      	str	r2, [sp, #36]	; 0x24
 8023000:	46ac      	mov	ip, r5
 8023002:	e6f3      	b.n	8022dec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 8023004:	25ff      	movs	r5, #255	; 0xff
 8023006:	46a9      	mov	r9, r5
 8023008:	e6f0      	b.n	8022dec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 802300a:	25ff      	movs	r5, #255	; 0xff
 802300c:	46a9      	mov	r9, r5
 802300e:	e7f7      	b.n	8023000 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6dc>
 8023010:	b019      	add	sp, #100	; 0x64
 8023012:	ecbd 8b08 	vpop	{d8-d11}
 8023016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802301c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 802301c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023020:	b085      	sub	sp, #20
 8023022:	7888      	ldrb	r0, [r1, #2]
 8023024:	4691      	mov	r9, r2
 8023026:	9000      	str	r0, [sp, #0]
 8023028:	7848      	ldrb	r0, [r1, #1]
 802302a:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 802302e:	9001      	str	r0, [sp, #4]
 8023030:	7808      	ldrb	r0, [r1, #0]
 8023032:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8023036:	9002      	str	r0, [sp, #8]
 8023038:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 802303c:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8023040:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8023044:	fb04 c603 	mla	r6, r4, r3, ip
 8023048:	2c00      	cmp	r4, #0
 802304a:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 802304e:	9a00      	ldr	r2, [sp, #0]
 8023050:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8023054:	9a01      	ldr	r2, [sp, #4]
 8023056:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 802305a:	db3a      	blt.n	80230d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 802305c:	45a0      	cmp	r8, r4
 802305e:	dd38      	ble.n	80230d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8023060:	f1bc 0f00 	cmp.w	ip, #0
 8023064:	db33      	blt.n	80230ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8023066:	4563      	cmp	r3, ip
 8023068:	dd31      	ble.n	80230ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 802306a:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 802306e:	f11c 0601 	adds.w	r6, ip, #1
 8023072:	d431      	bmi.n	80230d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8023074:	42b3      	cmp	r3, r6
 8023076:	dd2f      	ble.n	80230d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8023078:	b375      	cbz	r5, 80230d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 802307a:	f8de 6004 	ldr.w	r6, [lr, #4]
 802307e:	3401      	adds	r4, #1
 8023080:	d42e      	bmi.n	80230e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8023082:	45a0      	cmp	r8, r4
 8023084:	dd2c      	ble.n	80230e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8023086:	b35f      	cbz	r7, 80230e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8023088:	f1bc 0f00 	cmp.w	ip, #0
 802308c:	db26      	blt.n	80230dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 802308e:	4563      	cmp	r3, ip
 8023090:	dd24      	ble.n	80230dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 8023092:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8023096:	f11c 0c01 	adds.w	ip, ip, #1
 802309a:	d405      	bmi.n	80230a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802309c:	4563      	cmp	r3, ip
 802309e:	dd03      	ble.n	80230a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80230a0:	b115      	cbz	r5, 80230a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80230a2:	3301      	adds	r3, #1
 80230a4:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 80230a8:	2d0f      	cmp	r5, #15
 80230aa:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80230ae:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80230b2:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80230b6:	ea4f 6810 	mov.w	r8, r0, lsr #24
 80230ba:	d801      	bhi.n	80230c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 80230bc:	2f0f      	cmp	r7, #15
 80230be:	d911      	bls.n	80230e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 80230c0:	4b77      	ldr	r3, [pc, #476]	; (80232a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 80230c2:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80230c6:	4a77      	ldr	r2, [pc, #476]	; (80232a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 80230c8:	4877      	ldr	r0, [pc, #476]	; (80232a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x28c>)
 80230ca:	f003 f831 	bl	8026130 <__assert_func>
 80230ce:	4602      	mov	r2, r0
 80230d0:	e7cd      	b.n	802306e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 80230d2:	4606      	mov	r6, r0
 80230d4:	4602      	mov	r2, r0
 80230d6:	e7d2      	b.n	802307e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 80230d8:	4606      	mov	r6, r0
 80230da:	e7d0      	b.n	802307e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 80230dc:	4604      	mov	r4, r0
 80230de:	e7da      	b.n	8023096 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 80230e0:	4604      	mov	r4, r0
 80230e2:	e7e1      	b.n	80230a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80230e4:	b2ab      	uxth	r3, r5
 80230e6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80230ea:	b2bf      	uxth	r7, r7
 80230ec:	fb03 fe07 	mul.w	lr, r3, r7
 80230f0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80230f4:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80230f8:	eba3 0c0e 	sub.w	ip, r3, lr
 80230fc:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8023100:	b2bf      	uxth	r7, r7
 8023102:	fa1f fc8c 	uxth.w	ip, ip
 8023106:	eba5 0507 	sub.w	r5, r5, r7
 802310a:	fb0c f30a 	mul.w	r3, ip, sl
 802310e:	b2ad      	uxth	r5, r5
 8023110:	fb05 330b 	mla	r3, r5, fp, r3
 8023114:	fb07 3309 	mla	r3, r7, r9, r3
 8023118:	fb0e 3308 	mla	r3, lr, r8, r3
 802311c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023120:	9303      	str	r3, [sp, #12]
 8023122:	d018      	beq.n	8023156 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x13a>
 8023124:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8023128:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802312c:	fb0b f303 	mul.w	r3, fp, r3
 8023130:	fb0b fb02 	mul.w	fp, fp, r2
 8023134:	0a1a      	lsrs	r2, r3, #8
 8023136:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 802313a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802313e:	441a      	add	r2, r3
 8023140:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8023144:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8023148:	0a12      	lsrs	r2, r2, #8
 802314a:	0a1b      	lsrs	r3, r3, #8
 802314c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023150:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023154:	431a      	orrs	r2, r3
 8023156:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802315a:	d019      	beq.n	8023190 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x174>
 802315c:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8023160:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023164:	fb0a fb0b 	mul.w	fp, sl, fp
 8023168:	fb0a fa06 	mul.w	sl, sl, r6
 802316c:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8023170:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023174:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8023178:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802317c:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8023180:	445e      	add	r6, fp
 8023182:	0a1b      	lsrs	r3, r3, #8
 8023184:	0a36      	lsrs	r6, r6, #8
 8023186:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802318a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802318e:	431e      	orrs	r6, r3
 8023190:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023194:	d019      	beq.n	80231ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1ae>
 8023196:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802319a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802319e:	fb09 fa0a 	mul.w	sl, r9, sl
 80231a2:	fb09 f904 	mul.w	r9, r9, r4
 80231a6:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80231aa:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80231ae:	f509 7380 	add.w	r3, r9, #256	; 0x100
 80231b2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80231b6:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 80231ba:	4454      	add	r4, sl
 80231bc:	0a1b      	lsrs	r3, r3, #8
 80231be:	0a24      	lsrs	r4, r4, #8
 80231c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80231c4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80231c8:	431c      	orrs	r4, r3
 80231ca:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80231ce:	d019      	beq.n	8023204 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e8>
 80231d0:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 80231d4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80231d8:	fb08 f909 	mul.w	r9, r8, r9
 80231dc:	fb08 f800 	mul.w	r8, r8, r0
 80231e0:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80231e4:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80231e8:	f508 7380 	add.w	r3, r8, #256	; 0x100
 80231ec:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80231f0:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 80231f4:	4448      	add	r0, r9
 80231f6:	0a1b      	lsrs	r3, r3, #8
 80231f8:	0a00      	lsrs	r0, r0, #8
 80231fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80231fe:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8023202:	4318      	orrs	r0, r3
 8023204:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8023208:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802320c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8023210:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023214:	fb0c f808 	mul.w	r8, ip, r8
 8023218:	fb0c f606 	mul.w	r6, ip, r6
 802321c:	fb05 8803 	mla	r8, r5, r3, r8
 8023220:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8023224:	fb05 6202 	mla	r2, r5, r2, r6
 8023228:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802322c:	fb07 8803 	mla	r8, r7, r3, r8
 8023230:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8023234:	fb07 2704 	mla	r7, r7, r4, r2
 8023238:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802323c:	fb0e 8303 	mla	r3, lr, r3, r8
 8023240:	fb0e 7e00 	mla	lr, lr, r0, r7
 8023244:	9802      	ldr	r0, [sp, #8]
 8023246:	0a1b      	lsrs	r3, r3, #8
 8023248:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802324c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023250:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023254:	ea43 0e0e 	orr.w	lr, r3, lr
 8023258:	9b03      	ldr	r3, [sp, #12]
 802325a:	43db      	mvns	r3, r3
 802325c:	b2db      	uxtb	r3, r3
 802325e:	4358      	muls	r0, r3
 8023260:	1c42      	adds	r2, r0, #1
 8023262:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8023266:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 802326a:	700a      	strb	r2, [r1, #0]
 802326c:	9a01      	ldr	r2, [sp, #4]
 802326e:	435a      	muls	r2, r3
 8023270:	1c50      	adds	r0, r2, #1
 8023272:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8023276:	ea4f 221e 	mov.w	r2, lr, lsr #8
 802327a:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 802327e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8023282:	704a      	strb	r2, [r1, #1]
 8023284:	9a00      	ldr	r2, [sp, #0]
 8023286:	435a      	muls	r2, r3
 8023288:	4613      	mov	r3, r2
 802328a:	3201      	adds	r2, #1
 802328c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023290:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8023294:	f881 e002 	strb.w	lr, [r1, #2]
 8023298:	b005      	add	sp, #20
 802329a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802329e:	bf00      	nop
 80232a0:	0802abfb 	.word	0x0802abfb
 80232a4:	0802b0f2 	.word	0x0802b0f2
 80232a8:	0802acc4 	.word	0x0802acc4

080232ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80232ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232b0:	ed2d 8b08 	vpush	{d8-d11}
 80232b4:	b097      	sub	sp, #92	; 0x5c
 80232b6:	eeb0 aa40 	vmov.f32	s20, s0
 80232ba:	eef0 9a60 	vmov.f32	s19, s1
 80232be:	9306      	str	r3, [sp, #24]
 80232c0:	eeb0 9a41 	vmov.f32	s18, s2
 80232c4:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 80232c8:	eeb0 8a62 	vmov.f32	s16, s5
 80232cc:	9214      	str	r2, [sp, #80]	; 0x50
 80232ce:	eef0 8a43 	vmov.f32	s17, s6
 80232d2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80232d4:	eef0 ba44 	vmov.f32	s23, s8
 80232d8:	9307      	str	r3, [sp, #28]
 80232da:	eeb0 ba64 	vmov.f32	s22, s9
 80232de:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 80232e2:	eef0 aa45 	vmov.f32	s21, s10
 80232e6:	9015      	str	r0, [sp, #84]	; 0x54
 80232e8:	9112      	str	r1, [sp, #72]	; 0x48
 80232ea:	6850      	ldr	r0, [r2, #4]
 80232ec:	9310      	str	r3, [sp, #64]	; 0x40
 80232ee:	6812      	ldr	r2, [r2, #0]
 80232f0:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80232f2:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80232f6:	fb00 1303 	mla	r3, r0, r3, r1
 80232fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80232fe:	18d3      	adds	r3, r2, r3
 8023300:	930a      	str	r3, [sp, #40]	; 0x28
 8023302:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023304:	681b      	ldr	r3, [r3, #0]
 8023306:	9311      	str	r3, [sp, #68]	; 0x44
 8023308:	9b07      	ldr	r3, [sp, #28]
 802330a:	009b      	lsls	r3, r3, #2
 802330c:	930e      	str	r3, [sp, #56]	; 0x38
 802330e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023310:	2b00      	cmp	r3, #0
 8023312:	dc03      	bgt.n	802331c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8023314:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8023316:	2b00      	cmp	r3, #0
 8023318:	f340 832e 	ble.w	8023978 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 802331c:	9b06      	ldr	r3, [sp, #24]
 802331e:	2b00      	cmp	r3, #0
 8023320:	f340 8186 	ble.w	8023630 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x384>
 8023324:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023326:	1423      	asrs	r3, r4, #16
 8023328:	1412      	asrs	r2, r2, #16
 802332a:	d42f      	bmi.n	802338c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 802332c:	1c51      	adds	r1, r2, #1
 802332e:	9807      	ldr	r0, [sp, #28]
 8023330:	4288      	cmp	r0, r1
 8023332:	dd2e      	ble.n	8023392 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8023334:	2b00      	cmp	r3, #0
 8023336:	db2c      	blt.n	8023392 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8023338:	1c59      	adds	r1, r3, #1
 802333a:	9810      	ldr	r0, [sp, #64]	; 0x40
 802333c:	4288      	cmp	r0, r1
 802333e:	dd28      	ble.n	8023392 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8023340:	9b06      	ldr	r3, [sp, #24]
 8023342:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023344:	3b01      	subs	r3, #1
 8023346:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8023348:	fb02 1203 	mla	r2, r2, r3, r1
 802334c:	1412      	asrs	r2, r2, #16
 802334e:	d42b      	bmi.n	80233a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8023350:	3201      	adds	r2, #1
 8023352:	9907      	ldr	r1, [sp, #28]
 8023354:	4291      	cmp	r1, r2
 8023356:	dd27      	ble.n	80233a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8023358:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802335a:	fb02 4303 	mla	r3, r2, r3, r4
 802335e:	141b      	asrs	r3, r3, #16
 8023360:	d422      	bmi.n	80233a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8023362:	3301      	adds	r3, #1
 8023364:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023366:	429a      	cmp	r2, r3
 8023368:	dd1e      	ble.n	80233a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802336a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802336c:	f8dd b018 	ldr.w	fp, [sp, #24]
 8023370:	1cdd      	adds	r5, r3, #3
 8023372:	f1bb 0f00 	cmp.w	fp, #0
 8023376:	f300 81c4 	bgt.w	8023702 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 802337a:	9b06      	ldr	r3, [sp, #24]
 802337c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023382:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023386:	4423      	add	r3, r4
 8023388:	930a      	str	r3, [sp, #40]	; 0x28
 802338a:	e153      	b.n	8023634 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 802338c:	1c51      	adds	r1, r2, #1
 802338e:	f040 8142 	bne.w	8023616 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8023392:	9907      	ldr	r1, [sp, #28]
 8023394:	428a      	cmp	r2, r1
 8023396:	f280 813e 	bge.w	8023616 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 802339a:	1c5a      	adds	r2, r3, #1
 802339c:	f2c0 813b 	blt.w	8023616 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 80233a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80233a2:	4293      	cmp	r3, r2
 80233a4:	f280 8137 	bge.w	8023616 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 80233a8:	9b06      	ldr	r3, [sp, #24]
 80233aa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80233ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80233ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80233b0:	2b00      	cmp	r3, #0
 80233b2:	dde2      	ble.n	802337a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 80233b4:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80233b6:	1423      	asrs	r3, r4, #16
 80233b8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80233ba:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80233be:	1409      	asrs	r1, r1, #16
 80233c0:	f3c2 3203 	ubfx	r2, r2, #12, #4
 80233c4:	f100 8187 	bmi.w	80236d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 80233c8:	1c4e      	adds	r6, r1, #1
 80233ca:	9f07      	ldr	r7, [sp, #28]
 80233cc:	42b7      	cmp	r7, r6
 80233ce:	f340 8184 	ble.w	80236da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80233d2:	2b00      	cmp	r3, #0
 80233d4:	f2c0 8181 	blt.w	80236da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80233d8:	1c5e      	adds	r6, r3, #1
 80233da:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80233dc:	42b7      	cmp	r7, r6
 80233de:	f340 817c 	ble.w	80236da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80233e2:	9e07      	ldr	r6, [sp, #28]
 80233e4:	fb03 1306 	mla	r3, r3, r6, r1
 80233e8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80233ea:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 80233ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80233f2:	0e1f      	lsrs	r7, r3, #24
 80233f4:	2a00      	cmp	r2, #0
 80233f6:	f000 815c 	beq.w	80236b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 80233fa:	6871      	ldr	r1, [r6, #4]
 80233fc:	910b      	str	r1, [sp, #44]	; 0x2c
 80233fe:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8023402:	2800      	cmp	r0, #0
 8023404:	f000 815e 	beq.w	80236c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x418>
 8023408:	990e      	ldr	r1, [sp, #56]	; 0x38
 802340a:	eb06 0c01 	add.w	ip, r6, r1
 802340e:	5876      	ldr	r6, [r6, r1]
 8023410:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8023414:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8023418:	9608      	str	r6, [sp, #32]
 802341a:	0e0e      	lsrs	r6, r1, #24
 802341c:	910c      	str	r1, [sp, #48]	; 0x30
 802341e:	b292      	uxth	r2, r2
 8023420:	b280      	uxth	r0, r0
 8023422:	fb02 fa00 	mul.w	sl, r2, r0
 8023426:	0112      	lsls	r2, r2, #4
 8023428:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 802342c:	eba2 080a 	sub.w	r8, r2, sl
 8023430:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8023434:	b280      	uxth	r0, r0
 8023436:	fa1f f888 	uxth.w	r8, r8
 802343a:	1a09      	subs	r1, r1, r0
 802343c:	fb08 f20e 	mul.w	r2, r8, lr
 8023440:	b289      	uxth	r1, r1
 8023442:	fb01 2207 	mla	r2, r1, r7, r2
 8023446:	fb00 2209 	mla	r2, r0, r9, r2
 802344a:	fb0a 2206 	mla	r2, sl, r6, r2
 802344e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023452:	2a00      	cmp	r2, #0
 8023454:	f000 80d4 	beq.w	8023600 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8023458:	2fff      	cmp	r7, #255	; 0xff
 802345a:	d01a      	beq.n	8023492 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e6>
 802345c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8023460:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023464:	fb07 fc0c 	mul.w	ip, r7, ip
 8023468:	435f      	muls	r7, r3
 802346a:	ea4f 231c 	mov.w	r3, ip, lsr #8
 802346e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023472:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 8023476:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802347a:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 802347e:	4463      	add	r3, ip
 8023480:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8023484:	0a1b      	lsrs	r3, r3, #8
 8023486:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802348a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802348e:	ea43 030b 	orr.w	r3, r3, fp
 8023492:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023496:	d01e      	beq.n	80234d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8023498:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802349a:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 802349e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80234a2:	fb0e fb0b 	mul.w	fp, lr, fp
 80234a6:	fb0e fe07 	mul.w	lr, lr, r7
 80234aa:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80234ae:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80234b2:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 80234b6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80234ba:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 80234be:	44dc      	add	ip, fp
 80234c0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80234c4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80234c8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80234cc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80234d0:	ea4c 070e 	orr.w	r7, ip, lr
 80234d4:	970b      	str	r7, [sp, #44]	; 0x2c
 80234d6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80234da:	d01e      	beq.n	802351a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80234dc:	9f08      	ldr	r7, [sp, #32]
 80234de:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 80234e2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80234e6:	fb09 fe0e 	mul.w	lr, r9, lr
 80234ea:	fb09 f907 	mul.w	r9, r9, r7
 80234ee:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80234f2:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80234f6:	f509 7780 	add.w	r7, r9, #256	; 0x100
 80234fa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80234fe:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8023502:	44f4      	add	ip, lr
 8023504:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023508:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802350c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023510:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023514:	ea4c 0709 	orr.w	r7, ip, r9
 8023518:	9708      	str	r7, [sp, #32]
 802351a:	2eff      	cmp	r6, #255	; 0xff
 802351c:	d01c      	beq.n	8023558 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 802351e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8023520:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8023524:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023528:	fb06 fe0e 	mul.w	lr, r6, lr
 802352c:	437e      	muls	r6, r7
 802352e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8023532:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8023536:	f506 7780 	add.w	r7, r6, #256	; 0x100
 802353a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802353e:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8023542:	44f4      	add	ip, lr
 8023544:	0a36      	lsrs	r6, r6, #8
 8023546:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802354a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802354e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023552:	ea4c 0606 	orr.w	r6, ip, r6
 8023556:	960c      	str	r6, [sp, #48]	; 0x30
 8023558:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 802355a:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 802355e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023562:	2aff      	cmp	r2, #255	; 0xff
 8023564:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023568:	fb08 f606 	mul.w	r6, r8, r6
 802356c:	fb01 6607 	mla	r6, r1, r7, r6
 8023570:	9f08      	ldr	r7, [sp, #32]
 8023572:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023576:	fb00 6607 	mla	r6, r0, r7, r6
 802357a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 802357c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023580:	fb0a 6607 	mla	r6, sl, r7, r6
 8023584:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8023586:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802358a:	ea4f 2616 	mov.w	r6, r6, lsr #8
 802358e:	fb08 f807 	mul.w	r8, r8, r7
 8023592:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023596:	fb01 8303 	mla	r3, r1, r3, r8
 802359a:	9908      	ldr	r1, [sp, #32]
 802359c:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80235a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80235a2:	fb00 330c 	mla	r3, r0, ip, r3
 80235a6:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80235aa:	fb0a 3a00 	mla	sl, sl, r0, r3
 80235ae:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80235b2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80235b6:	ea46 060a 	orr.w	r6, r6, sl
 80235ba:	b2f0      	uxtb	r0, r6
 80235bc:	f3c6 2107 	ubfx	r1, r6, #8, #8
 80235c0:	ea4f 4616 	mov.w	r6, r6, lsr #16
 80235c4:	f000 8084 	beq.w	80236d0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 80235c8:	43d2      	mvns	r2, r2
 80235ca:	782b      	ldrb	r3, [r5, #0]
 80235cc:	b2d2      	uxtb	r2, r2
 80235ce:	fb03 f702 	mul.w	r7, r3, r2
 80235d2:	1c7b      	adds	r3, r7, #1
 80235d4:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 80235d8:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80235dc:	702b      	strb	r3, [r5, #0]
 80235de:	786b      	ldrb	r3, [r5, #1]
 80235e0:	fb03 f002 	mul.w	r0, r3, r2
 80235e4:	1c43      	adds	r3, r0, #1
 80235e6:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80235ea:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80235ee:	706b      	strb	r3, [r5, #1]
 80235f0:	78ab      	ldrb	r3, [r5, #2]
 80235f2:	4353      	muls	r3, r2
 80235f4:	1c5a      	adds	r2, r3, #1
 80235f6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80235fa:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 80235fe:	70ae      	strb	r6, [r5, #2]
 8023600:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023602:	3503      	adds	r5, #3
 8023604:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023606:	4413      	add	r3, r2
 8023608:	9329      	str	r3, [sp, #164]	; 0xa4
 802360a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802360c:	441c      	add	r4, r3
 802360e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023610:	3b01      	subs	r3, #1
 8023612:	9313      	str	r3, [sp, #76]	; 0x4c
 8023614:	e6cb      	b.n	80233ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8023616:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023618:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802361a:	4413      	add	r3, r2
 802361c:	9329      	str	r3, [sp, #164]	; 0xa4
 802361e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023620:	441c      	add	r4, r3
 8023622:	9b06      	ldr	r3, [sp, #24]
 8023624:	3b01      	subs	r3, #1
 8023626:	9306      	str	r3, [sp, #24]
 8023628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802362a:	3303      	adds	r3, #3
 802362c:	930a      	str	r3, [sp, #40]	; 0x28
 802362e:	e675      	b.n	802331c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8023630:	f47f ae86 	bne.w	8023340 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8023634:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023636:	2b00      	cmp	r3, #0
 8023638:	f340 819e 	ble.w	8023978 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 802363c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023640:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023642:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023646:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802364a:	eef0 6a48 	vmov.f32	s13, s16
 802364e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023652:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023656:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802365a:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 802365e:	eef0 6a68 	vmov.f32	s13, s17
 8023662:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023666:	ee16 4a90 	vmov	r4, s13
 802366a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802366e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023672:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023676:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802367a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802367e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023682:	ee18 2a10 	vmov	r2, s16
 8023686:	eeb0 8a47 	vmov.f32	s16, s14
 802368a:	fb92 f3f3 	sdiv	r3, r2, r3
 802368e:	ee18 2a90 	vmov	r2, s17
 8023692:	932b      	str	r3, [sp, #172]	; 0xac
 8023694:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023696:	eef0 8a67 	vmov.f32	s17, s15
 802369a:	fb92 f3f3 	sdiv	r3, r2, r3
 802369e:	932c      	str	r3, [sp, #176]	; 0xb0
 80236a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80236a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80236a4:	3b01      	subs	r3, #1
 80236a6:	9312      	str	r3, [sp, #72]	; 0x48
 80236a8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80236aa:	bf08      	it	eq
 80236ac:	4613      	moveq	r3, r2
 80236ae:	9306      	str	r3, [sp, #24]
 80236b0:	e62d      	b.n	802330e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 80236b2:	b150      	cbz	r0, 80236ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41e>
 80236b4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80236b6:	5871      	ldr	r1, [r6, r1]
 80236b8:	26ff      	movs	r6, #255	; 0xff
 80236ba:	ea4f 6911 	mov.w	r9, r1, lsr #24
 80236be:	9108      	str	r1, [sp, #32]
 80236c0:	46b6      	mov	lr, r6
 80236c2:	e6ac      	b.n	802341e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 80236c4:	26ff      	movs	r6, #255	; 0xff
 80236c6:	46b1      	mov	r9, r6
 80236c8:	e6a9      	b.n	802341e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 80236ca:	26ff      	movs	r6, #255	; 0xff
 80236cc:	46b1      	mov	r9, r6
 80236ce:	e7f7      	b.n	80236c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 80236d0:	7028      	strb	r0, [r5, #0]
 80236d2:	7069      	strb	r1, [r5, #1]
 80236d4:	e793      	b.n	80235fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 80236d6:	1c4f      	adds	r7, r1, #1
 80236d8:	d192      	bne.n	8023600 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80236da:	9e07      	ldr	r6, [sp, #28]
 80236dc:	428e      	cmp	r6, r1
 80236de:	dd8f      	ble.n	8023600 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80236e0:	1c5e      	adds	r6, r3, #1
 80236e2:	db8d      	blt.n	8023600 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80236e4:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80236e6:	429e      	cmp	r6, r3
 80236e8:	dd8a      	ble.n	8023600 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80236ea:	9600      	str	r6, [sp, #0]
 80236ec:	e9cd 2003 	strd	r2, r0, [sp, #12]
 80236f0:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80236f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80236f6:	4629      	mov	r1, r5
 80236f8:	9b07      	ldr	r3, [sp, #28]
 80236fa:	9815      	ldr	r0, [sp, #84]	; 0x54
 80236fc:	f7ff fc8e 	bl	802301c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8023700:	e77e      	b.n	8023600 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8023702:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023704:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8023708:	9929      	ldr	r1, [sp, #164]	; 0xa4
 802370a:	9e07      	ldr	r6, [sp, #28]
 802370c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023710:	1409      	asrs	r1, r1, #16
 8023712:	1423      	asrs	r3, r4, #16
 8023714:	fb06 1303 	mla	r3, r6, r3, r1
 8023718:	9911      	ldr	r1, [sp, #68]	; 0x44
 802371a:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 802371e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8023722:	0e1f      	lsrs	r7, r3, #24
 8023724:	2a00      	cmp	r2, #0
 8023726:	f000 8113 	beq.w	8023950 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 802372a:	6871      	ldr	r1, [r6, #4]
 802372c:	910d      	str	r1, [sp, #52]	; 0x34
 802372e:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8023732:	2800      	cmp	r0, #0
 8023734:	f000 8115 	beq.w	8023962 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8023738:	990e      	ldr	r1, [sp, #56]	; 0x38
 802373a:	eb06 0c01 	add.w	ip, r6, r1
 802373e:	5876      	ldr	r6, [r6, r1]
 8023740:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8023744:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8023748:	9609      	str	r6, [sp, #36]	; 0x24
 802374a:	0e0e      	lsrs	r6, r1, #24
 802374c:	910f      	str	r1, [sp, #60]	; 0x3c
 802374e:	b292      	uxth	r2, r2
 8023750:	b280      	uxth	r0, r0
 8023752:	fb02 fa00 	mul.w	sl, r2, r0
 8023756:	0112      	lsls	r2, r2, #4
 8023758:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 802375c:	eba2 080a 	sub.w	r8, r2, sl
 8023760:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8023764:	b280      	uxth	r0, r0
 8023766:	fa1f f888 	uxth.w	r8, r8
 802376a:	1a09      	subs	r1, r1, r0
 802376c:	fb08 f20e 	mul.w	r2, r8, lr
 8023770:	b289      	uxth	r1, r1
 8023772:	fb01 2207 	mla	r2, r1, r7, r2
 8023776:	fb00 2209 	mla	r2, r0, r9, r2
 802377a:	fb0a 2206 	mla	r2, sl, r6, r2
 802377e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023782:	2a00      	cmp	r2, #0
 8023784:	f000 80da 	beq.w	802393c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 8023788:	2fff      	cmp	r7, #255	; 0xff
 802378a:	d01a      	beq.n	80237c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 802378c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8023790:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023794:	fb07 fc0c 	mul.w	ip, r7, ip
 8023798:	435f      	muls	r7, r3
 802379a:	ea4f 231c 	mov.w	r3, ip, lsr #8
 802379e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80237a2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80237a6:	4463      	add	r3, ip
 80237a8:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 80237ac:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 80237b0:	0a1b      	lsrs	r3, r3, #8
 80237b2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80237b6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80237ba:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80237be:	ea43 030c 	orr.w	r3, r3, ip
 80237c2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80237c6:	d021      	beq.n	802380c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x560>
 80237c8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80237ca:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80237ce:	fb0e f707 	mul.w	r7, lr, r7
 80237d2:	9713      	str	r7, [sp, #76]	; 0x4c
 80237d4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80237d6:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80237da:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80237dc:	fb0e fe0c 	mul.w	lr, lr, ip
 80237e0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80237e4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80237e8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80237ec:	44bc      	add	ip, r7
 80237ee:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 80237f2:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 80237f6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80237fa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80237fe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023802:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023806:	ea4c 070e 	orr.w	r7, ip, lr
 802380a:	970d      	str	r7, [sp, #52]	; 0x34
 802380c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023810:	d01e      	beq.n	8023850 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a4>
 8023812:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8023814:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8023818:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802381c:	fb09 fe0e 	mul.w	lr, r9, lr
 8023820:	fb09 f907 	mul.w	r9, r9, r7
 8023824:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8023828:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802382c:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8023830:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023834:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8023838:	44f4      	add	ip, lr
 802383a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802383e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023842:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023846:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802384a:	ea4c 0709 	orr.w	r7, ip, r9
 802384e:	9709      	str	r7, [sp, #36]	; 0x24
 8023850:	2eff      	cmp	r6, #255	; 0xff
 8023852:	d01c      	beq.n	802388e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e2>
 8023854:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8023856:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 802385a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802385e:	fb06 fe0e 	mul.w	lr, r6, lr
 8023862:	437e      	muls	r6, r7
 8023864:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8023868:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802386c:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8023870:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023874:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8023878:	44f4      	add	ip, lr
 802387a:	0a36      	lsrs	r6, r6, #8
 802387c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023880:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023884:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023888:	ea4c 0606 	orr.w	r6, ip, r6
 802388c:	960f      	str	r6, [sp, #60]	; 0x3c
 802388e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8023890:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8023894:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023898:	2aff      	cmp	r2, #255	; 0xff
 802389a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802389e:	fb08 f606 	mul.w	r6, r8, r6
 80238a2:	fb01 6607 	mla	r6, r1, r7, r6
 80238a6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80238a8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80238ac:	fb00 6607 	mla	r6, r0, r7, r6
 80238b0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80238b2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80238b6:	fb0a 6607 	mla	r6, sl, r7, r6
 80238ba:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80238bc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80238c0:	ea4f 2616 	mov.w	r6, r6, lsr #8
 80238c4:	fb08 f807 	mul.w	r8, r8, r7
 80238c8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80238cc:	fb01 8303 	mla	r3, r1, r3, r8
 80238d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80238d2:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80238d6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80238d8:	fb00 330c 	mla	r3, r0, ip, r3
 80238dc:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 80238e0:	fb0a 3e0e 	mla	lr, sl, lr, r3
 80238e4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80238e8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80238ec:	ea46 060e 	orr.w	r6, r6, lr
 80238f0:	b2f0      	uxtb	r0, r6
 80238f2:	f3c6 2107 	ubfx	r1, r6, #8, #8
 80238f6:	ea4f 4616 	mov.w	r6, r6, lsr #16
 80238fa:	d038      	beq.n	802396e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 80238fc:	43d2      	mvns	r2, r2
 80238fe:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8023902:	b2d2      	uxtb	r2, r2
 8023904:	4357      	muls	r7, r2
 8023906:	1c7b      	adds	r3, r7, #1
 8023908:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 802390c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8023910:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 8023914:	4350      	muls	r0, r2
 8023916:	f805 3c03 	strb.w	r3, [r5, #-3]
 802391a:	1c43      	adds	r3, r0, #1
 802391c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8023920:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023924:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8023928:	4353      	muls	r3, r2
 802392a:	f805 1c02 	strb.w	r1, [r5, #-2]
 802392e:	1c5a      	adds	r2, r3, #1
 8023930:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023934:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8023938:	f805 6c01 	strb.w	r6, [r5, #-1]
 802393c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802393e:	3503      	adds	r5, #3
 8023940:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023942:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023946:	4413      	add	r3, r2
 8023948:	9329      	str	r3, [sp, #164]	; 0xa4
 802394a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802394c:	441c      	add	r4, r3
 802394e:	e510      	b.n	8023372 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 8023950:	b150      	cbz	r0, 8023968 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 8023952:	990e      	ldr	r1, [sp, #56]	; 0x38
 8023954:	5871      	ldr	r1, [r6, r1]
 8023956:	26ff      	movs	r6, #255	; 0xff
 8023958:	ea4f 6911 	mov.w	r9, r1, lsr #24
 802395c:	9109      	str	r1, [sp, #36]	; 0x24
 802395e:	46b6      	mov	lr, r6
 8023960:	e6f5      	b.n	802374e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8023962:	26ff      	movs	r6, #255	; 0xff
 8023964:	46b1      	mov	r9, r6
 8023966:	e6f2      	b.n	802374e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8023968:	26ff      	movs	r6, #255	; 0xff
 802396a:	46b1      	mov	r9, r6
 802396c:	e7f7      	b.n	802395e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 802396e:	f805 0c03 	strb.w	r0, [r5, #-3]
 8023972:	f805 1c02 	strb.w	r1, [r5, #-2]
 8023976:	e7df      	b.n	8023938 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 8023978:	b017      	add	sp, #92	; 0x5c
 802397a:	ecbd 8b08 	vpop	{d8-d11}
 802397e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08023984 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8023984:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023988:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 802398c:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8023990:	2800      	cmp	r0, #0
 8023992:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8023996:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 802399a:	fb0c 0e03 	mla	lr, ip, r3, r0
 802399e:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80239a2:	db6b      	blt.n	8023a7c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 80239a4:	4580      	cmp	r8, r0
 80239a6:	dd69      	ble.n	8023a7c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 80239a8:	f1bc 0f00 	cmp.w	ip, #0
 80239ac:	db66      	blt.n	8023a7c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 80239ae:	45e1      	cmp	r9, ip
 80239b0:	dd64      	ble.n	8023a7c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 80239b2:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80239b6:	f01e 0f01 	tst.w	lr, #1
 80239ba:	5d16      	ldrb	r6, [r2, r4]
 80239bc:	bf0c      	ite	eq
 80239be:	f006 060f 	andeq.w	r6, r6, #15
 80239c2:	1136      	asrne	r6, r6, #4
 80239c4:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80239c8:	b2f6      	uxtb	r6, r6
 80239ca:	f110 0a01 	adds.w	sl, r0, #1
 80239ce:	d457      	bmi.n	8023a80 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80239d0:	45d0      	cmp	r8, sl
 80239d2:	dd55      	ble.n	8023a80 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80239d4:	f1bc 0f00 	cmp.w	ip, #0
 80239d8:	db52      	blt.n	8023a80 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80239da:	45e1      	cmp	r9, ip
 80239dc:	dd50      	ble.n	8023a80 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80239de:	2f00      	cmp	r7, #0
 80239e0:	f000 80ac 	beq.w	8023b3c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 80239e4:	f10e 0b01 	add.w	fp, lr, #1
 80239e8:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80239ec:	f01b 0f01 	tst.w	fp, #1
 80239f0:	5d14      	ldrb	r4, [r2, r4]
 80239f2:	bf0c      	ite	eq
 80239f4:	f004 040f 	andeq.w	r4, r4, #15
 80239f8:	1124      	asrne	r4, r4, #4
 80239fa:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80239fe:	b2e4      	uxtb	r4, r4
 8023a00:	2d00      	cmp	r5, #0
 8023a02:	f000 8096 	beq.w	8023b32 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 8023a06:	2800      	cmp	r0, #0
 8023a08:	f10c 0c01 	add.w	ip, ip, #1
 8023a0c:	db3c      	blt.n	8023a88 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8023a0e:	4580      	cmp	r8, r0
 8023a10:	dd3a      	ble.n	8023a88 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8023a12:	f1bc 0f00 	cmp.w	ip, #0
 8023a16:	db37      	blt.n	8023a88 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8023a18:	45e1      	cmp	r9, ip
 8023a1a:	dd35      	ble.n	8023a88 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8023a1c:	eb03 0b0e 	add.w	fp, r3, lr
 8023a20:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8023a24:	f01b 0f01 	tst.w	fp, #1
 8023a28:	5c10      	ldrb	r0, [r2, r0]
 8023a2a:	bf0c      	ite	eq
 8023a2c:	f000 000f 	andeq.w	r0, r0, #15
 8023a30:	1100      	asrne	r0, r0, #4
 8023a32:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023a36:	b2c0      	uxtb	r0, r0
 8023a38:	f1ba 0f00 	cmp.w	sl, #0
 8023a3c:	db26      	blt.n	8023a8c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8023a3e:	45d0      	cmp	r8, sl
 8023a40:	dd24      	ble.n	8023a8c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8023a42:	f1bc 0f00 	cmp.w	ip, #0
 8023a46:	db21      	blt.n	8023a8c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8023a48:	45e1      	cmp	r9, ip
 8023a4a:	dd1f      	ble.n	8023a8c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8023a4c:	b307      	cbz	r7, 8023a90 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 8023a4e:	3301      	adds	r3, #1
 8023a50:	449e      	add	lr, r3
 8023a52:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8023a56:	f01e 0f01 	tst.w	lr, #1
 8023a5a:	5cd3      	ldrb	r3, [r2, r3]
 8023a5c:	bf0c      	ite	eq
 8023a5e:	f003 030f 	andeq.w	r3, r3, #15
 8023a62:	111b      	asrne	r3, r3, #4
 8023a64:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023a68:	b2db      	uxtb	r3, r3
 8023a6a:	2f0f      	cmp	r7, #15
 8023a6c:	d911      	bls.n	8023a92 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 8023a6e:	4b35      	ldr	r3, [pc, #212]	; (8023b44 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 8023a70:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8023a74:	4a34      	ldr	r2, [pc, #208]	; (8023b48 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 8023a76:	4835      	ldr	r0, [pc, #212]	; (8023b4c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8023a78:	f002 fb5a 	bl	8026130 <__assert_func>
 8023a7c:	2600      	movs	r6, #0
 8023a7e:	e7a4      	b.n	80239ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 8023a80:	2400      	movs	r4, #0
 8023a82:	e7bd      	b.n	8023a00 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 8023a84:	463c      	mov	r4, r7
 8023a86:	e7be      	b.n	8023a06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8023a88:	2000      	movs	r0, #0
 8023a8a:	e7d5      	b.n	8023a38 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8023a8c:	2300      	movs	r3, #0
 8023a8e:	e7ec      	b.n	8023a6a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 8023a90:	463b      	mov	r3, r7
 8023a92:	2d0f      	cmp	r5, #15
 8023a94:	d8eb      	bhi.n	8023a6e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8023a96:	b2bf      	uxth	r7, r7
 8023a98:	b2ad      	uxth	r5, r5
 8023a9a:	fb07 f205 	mul.w	r2, r7, r5
 8023a9e:	013f      	lsls	r7, r7, #4
 8023aa0:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8023aa4:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8023aa8:	1abf      	subs	r7, r7, r2
 8023aaa:	b2ad      	uxth	r5, r5
 8023aac:	b2bf      	uxth	r7, r7
 8023aae:	ebac 0c05 	sub.w	ip, ip, r5
 8023ab2:	437c      	muls	r4, r7
 8023ab4:	fa1f fc8c 	uxth.w	ip, ip
 8023ab8:	fb06 440c 	mla	r4, r6, ip, r4
 8023abc:	fb05 4400 	mla	r4, r5, r0, r4
 8023ac0:	fb02 4203 	mla	r2, r2, r3, r4
 8023ac4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023ac8:	b38a      	cbz	r2, 8023b2e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 8023aca:	4b21      	ldr	r3, [pc, #132]	; (8023b50 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8023acc:	681c      	ldr	r4, [r3, #0]
 8023ace:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8023ad2:	b2e5      	uxtb	r5, r4
 8023ad4:	4353      	muls	r3, r2
 8023ad6:	1c5a      	adds	r2, r3, #1
 8023ad8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023adc:	1212      	asrs	r2, r2, #8
 8023ade:	b290      	uxth	r0, r2
 8023ae0:	43d2      	mvns	r2, r2
 8023ae2:	fb15 f500 	smulbb	r5, r5, r0
 8023ae6:	b2d3      	uxtb	r3, r2
 8023ae8:	780a      	ldrb	r2, [r1, #0]
 8023aea:	fb02 5203 	mla	r2, r2, r3, r5
 8023aee:	b292      	uxth	r2, r2
 8023af0:	1c55      	adds	r5, r2, #1
 8023af2:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8023af6:	784d      	ldrb	r5, [r1, #1]
 8023af8:	fb15 f503 	smulbb	r5, r5, r3
 8023afc:	1212      	asrs	r2, r2, #8
 8023afe:	700a      	strb	r2, [r1, #0]
 8023b00:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8023b04:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8023b08:	fb02 5200 	mla	r2, r2, r0, r5
 8023b0c:	b292      	uxth	r2, r2
 8023b0e:	1c55      	adds	r5, r2, #1
 8023b10:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8023b14:	1212      	asrs	r2, r2, #8
 8023b16:	704a      	strb	r2, [r1, #1]
 8023b18:	788a      	ldrb	r2, [r1, #2]
 8023b1a:	fb12 f303 	smulbb	r3, r2, r3
 8023b1e:	fb04 3300 	mla	r3, r4, r0, r3
 8023b22:	b29b      	uxth	r3, r3
 8023b24:	1c5a      	adds	r2, r3, #1
 8023b26:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023b2a:	121b      	asrs	r3, r3, #8
 8023b2c:	708b      	strb	r3, [r1, #2]
 8023b2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023b32:	2f0f      	cmp	r7, #15
 8023b34:	d89b      	bhi.n	8023a6e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8023b36:	462b      	mov	r3, r5
 8023b38:	4628      	mov	r0, r5
 8023b3a:	e7ac      	b.n	8023a96 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 8023b3c:	2d00      	cmp	r5, #0
 8023b3e:	d1a1      	bne.n	8023a84 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 8023b40:	462c      	mov	r4, r5
 8023b42:	e7f8      	b.n	8023b36 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 8023b44:	0802abfb 	.word	0x0802abfb
 8023b48:	0802b0f2 	.word	0x0802b0f2
 8023b4c:	0802acc4 	.word	0x0802acc4
 8023b50:	2000c5dc 	.word	0x2000c5dc

08023b54 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8023b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b58:	ed2d 8b08 	vpush	{d8-d11}
 8023b5c:	b097      	sub	sp, #92	; 0x5c
 8023b5e:	eeb0 aa40 	vmov.f32	s20, s0
 8023b62:	eef0 9a60 	vmov.f32	s19, s1
 8023b66:	9308      	str	r3, [sp, #32]
 8023b68:	eeb0 9a41 	vmov.f32	s18, s2
 8023b6c:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8023b70:	eeb0 8a62 	vmov.f32	s16, s5
 8023b74:	9214      	str	r2, [sp, #80]	; 0x50
 8023b76:	eef0 8a43 	vmov.f32	s17, s6
 8023b7a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8023b7c:	eef0 ba44 	vmov.f32	s23, s8
 8023b80:	9309      	str	r3, [sp, #36]	; 0x24
 8023b82:	eeb0 ba64 	vmov.f32	s22, s9
 8023b86:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8023b8a:	eef0 aa45 	vmov.f32	s21, s10
 8023b8e:	9015      	str	r0, [sp, #84]	; 0x54
 8023b90:	910c      	str	r1, [sp, #48]	; 0x30
 8023b92:	930e      	str	r3, [sp, #56]	; 0x38
 8023b94:	6850      	ldr	r0, [r2, #4]
 8023b96:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 8023b9a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8023b9e:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 8023ba2:	fb00 1803 	mla	r8, r0, r3, r1
 8023ba6:	6813      	ldr	r3, [r2, #0]
 8023ba8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8023bac:	4498      	add	r8, r3
 8023bae:	f10b 0301 	add.w	r3, fp, #1
 8023bb2:	f023 0301 	bic.w	r3, r3, #1
 8023bb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8023bb8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023bba:	681f      	ldr	r7, [r3, #0]
 8023bbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023bbe:	2b00      	cmp	r3, #0
 8023bc0:	dc03      	bgt.n	8023bca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8023bc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8023bc4:	2b00      	cmp	r3, #0
 8023bc6:	f340 8238 	ble.w	802403a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8023bca:	9b08      	ldr	r3, [sp, #32]
 8023bcc:	2b00      	cmp	r3, #0
 8023bce:	f340 810c 	ble.w	8023dea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 8023bd2:	142a      	asrs	r2, r5, #16
 8023bd4:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023bd8:	d42c      	bmi.n	8023c34 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8023bda:	1c51      	adds	r1, r2, #1
 8023bdc:	458b      	cmp	fp, r1
 8023bde:	dd2c      	ble.n	8023c3a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8023be0:	2b00      	cmp	r3, #0
 8023be2:	db2a      	blt.n	8023c3a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8023be4:	1c59      	adds	r1, r3, #1
 8023be6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023be8:	4288      	cmp	r0, r1
 8023bea:	dd26      	ble.n	8023c3a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8023bec:	9b08      	ldr	r3, [sp, #32]
 8023bee:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023bf0:	3b01      	subs	r3, #1
 8023bf2:	fb02 5203 	mla	r2, r2, r3, r5
 8023bf6:	1412      	asrs	r2, r2, #16
 8023bf8:	d429      	bmi.n	8023c4e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8023bfa:	3201      	adds	r2, #1
 8023bfc:	4593      	cmp	fp, r2
 8023bfe:	dd26      	ble.n	8023c4e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8023c00:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8023c02:	fb02 6303 	mla	r3, r2, r3, r6
 8023c06:	141b      	asrs	r3, r3, #16
 8023c08:	d421      	bmi.n	8023c4e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8023c0a:	3301      	adds	r3, #1
 8023c0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023c0e:	429a      	cmp	r2, r3
 8023c10:	dd1d      	ble.n	8023c4e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8023c12:	f108 0e03 	add.w	lr, r8, #3
 8023c16:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8023c1a:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8023c1e:	f1b9 0f00 	cmp.w	r9, #0
 8023c22:	f300 814f 	bgt.w	8023ec4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x370>
 8023c26:	9b08      	ldr	r3, [sp, #32]
 8023c28:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023c2c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023c30:	44a0      	add	r8, r4
 8023c32:	e0dc      	b.n	8023dee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 8023c34:	1c51      	adds	r1, r2, #1
 8023c36:	f040 80ce 	bne.w	8023dd6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8023c3a:	4593      	cmp	fp, r2
 8023c3c:	f340 80cb 	ble.w	8023dd6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8023c40:	1c5a      	adds	r2, r3, #1
 8023c42:	f2c0 80c8 	blt.w	8023dd6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8023c46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023c48:	4293      	cmp	r3, r2
 8023c4a:	f280 80c4 	bge.w	8023dd6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8023c4e:	9b08      	ldr	r3, [sp, #32]
 8023c50:	46c1      	mov	r9, r8
 8023c52:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8023c56:	930d      	str	r3, [sp, #52]	; 0x34
 8023c58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023c5a:	2b00      	cmp	r3, #0
 8023c5c:	dde3      	ble.n	8023c26 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 8023c5e:	1428      	asrs	r0, r5, #16
 8023c60:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8023c64:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023c68:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023c6c:	f100 8111 	bmi.w	8023e92 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 8023c70:	f100 0c01 	add.w	ip, r0, #1
 8023c74:	45e3      	cmp	fp, ip
 8023c76:	f340 810e 	ble.w	8023e96 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8023c7a:	2b00      	cmp	r3, #0
 8023c7c:	f2c0 810b 	blt.w	8023e96 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8023c80:	f103 0c01 	add.w	ip, r3, #1
 8023c84:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023c86:	4564      	cmp	r4, ip
 8023c88:	f340 8105 	ble.w	8023e96 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8023c8c:	fb03 030a 	mla	r3, r3, sl, r0
 8023c90:	0858      	lsrs	r0, r3, #1
 8023c92:	07dc      	lsls	r4, r3, #31
 8023c94:	5c38      	ldrb	r0, [r7, r0]
 8023c96:	bf54      	ite	pl
 8023c98:	f000 000f 	andpl.w	r0, r0, #15
 8023c9c:	1100      	asrmi	r0, r0, #4
 8023c9e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023ca2:	b2c0      	uxtb	r0, r0
 8023ca4:	2a00      	cmp	r2, #0
 8023ca6:	f000 80e1 	beq.w	8023e6c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x318>
 8023caa:	f103 0e01 	add.w	lr, r3, #1
 8023cae:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8023cb2:	f01e 0f01 	tst.w	lr, #1
 8023cb6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023cba:	bf0c      	ite	eq
 8023cbc:	f00c 0c0f 	andeq.w	ip, ip, #15
 8023cc0:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8023cc4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023cc8:	fa5f f48c 	uxtb.w	r4, ip
 8023ccc:	9410      	str	r4, [sp, #64]	; 0x40
 8023cce:	b1f9      	cbz	r1, 8023d10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8023cd0:	4453      	add	r3, sl
 8023cd2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023cd6:	07dc      	lsls	r4, r3, #31
 8023cd8:	f103 0301 	add.w	r3, r3, #1
 8023cdc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023ce0:	bf54      	ite	pl
 8023ce2:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023ce6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023cea:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023cee:	fa5f f48c 	uxtb.w	r4, ip
 8023cf2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023cf6:	940a      	str	r4, [sp, #40]	; 0x28
 8023cf8:	07dc      	lsls	r4, r3, #31
 8023cfa:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023cfe:	bf54      	ite	pl
 8023d00:	f00c 030f 	andpl.w	r3, ip, #15
 8023d04:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8023d08:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023d0c:	b2db      	uxtb	r3, r3
 8023d0e:	9311      	str	r3, [sp, #68]	; 0x44
 8023d10:	b292      	uxth	r2, r2
 8023d12:	b289      	uxth	r1, r1
 8023d14:	0113      	lsls	r3, r2, #4
 8023d16:	fb02 fc01 	mul.w	ip, r2, r1
 8023d1a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023d1c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8023d20:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 8023d24:	eba3 030c 	sub.w	r3, r3, ip
 8023d28:	b289      	uxth	r1, r1
 8023d2a:	b29b      	uxth	r3, r3
 8023d2c:	ebae 0e01 	sub.w	lr, lr, r1
 8023d30:	4353      	muls	r3, r2
 8023d32:	fa1f fe8e 	uxth.w	lr, lr
 8023d36:	fb00 320e 	mla	r2, r0, lr, r3
 8023d3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023d3c:	fb01 2203 	mla	r2, r1, r3, r2
 8023d40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023d42:	fb0c 2203 	mla	r2, ip, r3, r2
 8023d46:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023d4a:	2a00      	cmp	r2, #0
 8023d4c:	d039      	beq.n	8023dc2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8023d4e:	4bbd      	ldr	r3, [pc, #756]	; (8024044 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8023d50:	6819      	ldr	r1, [r3, #0]
 8023d52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023d54:	fa5f fc81 	uxtb.w	ip, r1
 8023d58:	435a      	muls	r2, r3
 8023d5a:	1c53      	adds	r3, r2, #1
 8023d5c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8023d60:	1212      	asrs	r2, r2, #8
 8023d62:	b290      	uxth	r0, r2
 8023d64:	43d2      	mvns	r2, r2
 8023d66:	fb1c fc00 	smulbb	ip, ip, r0
 8023d6a:	b2d3      	uxtb	r3, r2
 8023d6c:	f899 2000 	ldrb.w	r2, [r9]
 8023d70:	fb02 c203 	mla	r2, r2, r3, ip
 8023d74:	b292      	uxth	r2, r2
 8023d76:	f102 0c01 	add.w	ip, r2, #1
 8023d7a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8023d7e:	f899 c001 	ldrb.w	ip, [r9, #1]
 8023d82:	fb1c fc03 	smulbb	ip, ip, r3
 8023d86:	1212      	asrs	r2, r2, #8
 8023d88:	f889 2000 	strb.w	r2, [r9]
 8023d8c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8023d90:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8023d94:	fb02 c200 	mla	r2, r2, r0, ip
 8023d98:	b292      	uxth	r2, r2
 8023d9a:	f102 0c01 	add.w	ip, r2, #1
 8023d9e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8023da2:	1212      	asrs	r2, r2, #8
 8023da4:	f889 2001 	strb.w	r2, [r9, #1]
 8023da8:	f899 2002 	ldrb.w	r2, [r9, #2]
 8023dac:	fb12 f303 	smulbb	r3, r2, r3
 8023db0:	fb01 3300 	mla	r3, r1, r0, r3
 8023db4:	b29b      	uxth	r3, r3
 8023db6:	1c5a      	adds	r2, r3, #1
 8023db8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023dbc:	121b      	asrs	r3, r3, #8
 8023dbe:	f889 3002 	strb.w	r3, [r9, #2]
 8023dc2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023dc4:	f109 0903 	add.w	r9, r9, #3
 8023dc8:	441d      	add	r5, r3
 8023dca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023dcc:	441e      	add	r6, r3
 8023dce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023dd0:	3b01      	subs	r3, #1
 8023dd2:	930d      	str	r3, [sp, #52]	; 0x34
 8023dd4:	e740      	b.n	8023c58 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8023dd6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023dd8:	f108 0803 	add.w	r8, r8, #3
 8023ddc:	441d      	add	r5, r3
 8023dde:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023de0:	441e      	add	r6, r3
 8023de2:	9b08      	ldr	r3, [sp, #32]
 8023de4:	3b01      	subs	r3, #1
 8023de6:	9308      	str	r3, [sp, #32]
 8023de8:	e6ef      	b.n	8023bca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8023dea:	f47f aeff 	bne.w	8023bec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8023dee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023df0:	2b00      	cmp	r3, #0
 8023df2:	f340 8122 	ble.w	802403a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8023df6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023dfa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023dfc:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023e00:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023e04:	eef0 6a48 	vmov.f32	s13, s16
 8023e08:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023e0c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023e10:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023e14:	ee16 5a90 	vmov	r5, s13
 8023e18:	eef0 6a68 	vmov.f32	s13, s17
 8023e1c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023e20:	ee16 6a90 	vmov	r6, s13
 8023e24:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023e28:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023e2c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023e30:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023e34:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023e38:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023e3c:	ee18 2a10 	vmov	r2, s16
 8023e40:	eeb0 8a47 	vmov.f32	s16, s14
 8023e44:	fb92 f3f3 	sdiv	r3, r2, r3
 8023e48:	ee18 2a90 	vmov	r2, s17
 8023e4c:	932b      	str	r3, [sp, #172]	; 0xac
 8023e4e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023e50:	eef0 8a67 	vmov.f32	s17, s15
 8023e54:	fb92 f3f3 	sdiv	r3, r2, r3
 8023e58:	932c      	str	r3, [sp, #176]	; 0xb0
 8023e5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023e5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023e5e:	3b01      	subs	r3, #1
 8023e60:	930c      	str	r3, [sp, #48]	; 0x30
 8023e62:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023e64:	bf08      	it	eq
 8023e66:	4613      	moveq	r3, r2
 8023e68:	9308      	str	r3, [sp, #32]
 8023e6a:	e6a7      	b.n	8023bbc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8023e6c:	2900      	cmp	r1, #0
 8023e6e:	f43f af4f 	beq.w	8023d10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8023e72:	4453      	add	r3, sl
 8023e74:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023e78:	07db      	lsls	r3, r3, #31
 8023e7a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023e7e:	bf54      	ite	pl
 8023e80:	f00c 030f 	andpl.w	r3, ip, #15
 8023e84:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8023e88:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023e8c:	b2db      	uxtb	r3, r3
 8023e8e:	930a      	str	r3, [sp, #40]	; 0x28
 8023e90:	e73e      	b.n	8023d10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8023e92:	1c44      	adds	r4, r0, #1
 8023e94:	d195      	bne.n	8023dc2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8023e96:	4583      	cmp	fp, r0
 8023e98:	dd93      	ble.n	8023dc2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8023e9a:	1c5c      	adds	r4, r3, #1
 8023e9c:	db91      	blt.n	8023dc2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8023e9e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023ea0:	429c      	cmp	r4, r3
 8023ea2:	dd8e      	ble.n	8023dc2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8023ea4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023ea6:	9002      	str	r0, [sp, #8]
 8023ea8:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023eaa:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8023eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023eb0:	463a      	mov	r2, r7
 8023eb2:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8023eb6:	e9cd b300 	strd	fp, r3, [sp]
 8023eba:	4649      	mov	r1, r9
 8023ebc:	4653      	mov	r3, sl
 8023ebe:	f7ff fd61 	bl	8023984 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8023ec2:	e77e      	b.n	8023dc2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8023ec4:	142a      	asrs	r2, r5, #16
 8023ec6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023eca:	1433      	asrs	r3, r6, #16
 8023ecc:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023ed0:	fb0a 2303 	mla	r3, sl, r3, r2
 8023ed4:	085a      	lsrs	r2, r3, #1
 8023ed6:	07dc      	lsls	r4, r3, #31
 8023ed8:	5cba      	ldrb	r2, [r7, r2]
 8023eda:	bf54      	ite	pl
 8023edc:	f002 020f 	andpl.w	r2, r2, #15
 8023ee0:	1112      	asrmi	r2, r2, #4
 8023ee2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023ee6:	b2d2      	uxtb	r2, r2
 8023ee8:	2900      	cmp	r1, #0
 8023eea:	f000 8093 	beq.w	8024014 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c0>
 8023eee:	1c5c      	adds	r4, r3, #1
 8023ef0:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8023ef4:	07e4      	lsls	r4, r4, #31
 8023ef6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023efa:	bf54      	ite	pl
 8023efc:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023f00:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023f04:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023f08:	fa5f f48c 	uxtb.w	r4, ip
 8023f0c:	9412      	str	r4, [sp, #72]	; 0x48
 8023f0e:	b300      	cbz	r0, 8023f52 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8023f10:	4453      	add	r3, sl
 8023f12:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023f16:	07dc      	lsls	r4, r3, #31
 8023f18:	f103 0301 	add.w	r3, r3, #1
 8023f1c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023f20:	bf54      	ite	pl
 8023f22:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023f26:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023f2a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023f2e:	fa5f f48c 	uxtb.w	r4, ip
 8023f32:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023f36:	940b      	str	r4, [sp, #44]	; 0x2c
 8023f38:	07dc      	lsls	r4, r3, #31
 8023f3a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023f3e:	bf54      	ite	pl
 8023f40:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023f44:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023f48:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023f4c:	fa5f f38c 	uxtb.w	r3, ip
 8023f50:	9313      	str	r3, [sp, #76]	; 0x4c
 8023f52:	b289      	uxth	r1, r1
 8023f54:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023f56:	b280      	uxth	r0, r0
 8023f58:	fb01 f300 	mul.w	r3, r1, r0
 8023f5c:	0109      	lsls	r1, r1, #4
 8023f5e:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8023f62:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8023f66:	1ac9      	subs	r1, r1, r3
 8023f68:	b280      	uxth	r0, r0
 8023f6a:	b289      	uxth	r1, r1
 8023f6c:	ebac 0c00 	sub.w	ip, ip, r0
 8023f70:	4361      	muls	r1, r4
 8023f72:	fa1f fc8c 	uxth.w	ip, ip
 8023f76:	fb02 120c 	mla	r2, r2, ip, r1
 8023f7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8023f7c:	fb00 2001 	mla	r0, r0, r1, r2
 8023f80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023f82:	fb03 0302 	mla	r3, r3, r2, r0
 8023f86:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023f8a:	2b00      	cmp	r3, #0
 8023f8c:	d039      	beq.n	8024002 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 8023f8e:	4a2d      	ldr	r2, [pc, #180]	; (8024044 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8023f90:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8023f94:	6810      	ldr	r0, [r2, #0]
 8023f96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023f98:	fa5f fc80 	uxtb.w	ip, r0
 8023f9c:	4353      	muls	r3, r2
 8023f9e:	1c5a      	adds	r2, r3, #1
 8023fa0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023fa4:	121b      	asrs	r3, r3, #8
 8023fa6:	b29a      	uxth	r2, r3
 8023fa8:	43db      	mvns	r3, r3
 8023faa:	fb1c fc02 	smulbb	ip, ip, r2
 8023fae:	b2db      	uxtb	r3, r3
 8023fb0:	fb01 c103 	mla	r1, r1, r3, ip
 8023fb4:	b289      	uxth	r1, r1
 8023fb6:	f101 0c01 	add.w	ip, r1, #1
 8023fba:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8023fbe:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8023fc2:	fb1c fc03 	smulbb	ip, ip, r3
 8023fc6:	1209      	asrs	r1, r1, #8
 8023fc8:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8023fcc:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8023fd0:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8023fd4:	fb01 c102 	mla	r1, r1, r2, ip
 8023fd8:	b289      	uxth	r1, r1
 8023fda:	f101 0c01 	add.w	ip, r1, #1
 8023fde:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8023fe2:	1209      	asrs	r1, r1, #8
 8023fe4:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8023fe8:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8023fec:	fb11 f303 	smulbb	r3, r1, r3
 8023ff0:	fb00 3002 	mla	r0, r0, r2, r3
 8023ff4:	b280      	uxth	r0, r0
 8023ff6:	1c42      	adds	r2, r0, #1
 8023ff8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023ffc:	1200      	asrs	r0, r0, #8
 8023ffe:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8024002:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024004:	f10e 0e03 	add.w	lr, lr, #3
 8024008:	f109 39ff 	add.w	r9, r9, #4294967295
 802400c:	441d      	add	r5, r3
 802400e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024010:	441e      	add	r6, r3
 8024012:	e604      	b.n	8023c1e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 8024014:	2800      	cmp	r0, #0
 8024016:	d09c      	beq.n	8023f52 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8024018:	4453      	add	r3, sl
 802401a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802401e:	07db      	lsls	r3, r3, #31
 8024020:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024024:	bf54      	ite	pl
 8024026:	f00c 0c0f 	andpl.w	ip, ip, #15
 802402a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802402e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024032:	fa5f f38c 	uxtb.w	r3, ip
 8024036:	930b      	str	r3, [sp, #44]	; 0x2c
 8024038:	e78b      	b.n	8023f52 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 802403a:	b017      	add	sp, #92	; 0x5c
 802403c:	ecbd 8b08 	vpop	{d8-d11}
 8024040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024044:	2000c5dc 	.word	0x2000c5dc

08024048 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8024048:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802404c:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8024050:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8024054:	2800      	cmp	r0, #0
 8024056:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 802405a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 802405e:	fb0c 0e03 	mla	lr, ip, r3, r0
 8024062:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8024066:	db6b      	blt.n	8024140 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8024068:	4580      	cmp	r8, r0
 802406a:	dd69      	ble.n	8024140 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 802406c:	f1bc 0f00 	cmp.w	ip, #0
 8024070:	db66      	blt.n	8024140 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8024072:	45e1      	cmp	r9, ip
 8024074:	dd64      	ble.n	8024140 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8024076:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802407a:	f01e 0f01 	tst.w	lr, #1
 802407e:	5d16      	ldrb	r6, [r2, r4]
 8024080:	bf0c      	ite	eq
 8024082:	f006 060f 	andeq.w	r6, r6, #15
 8024086:	1136      	asrne	r6, r6, #4
 8024088:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802408c:	b2f6      	uxtb	r6, r6
 802408e:	f110 0a01 	adds.w	sl, r0, #1
 8024092:	d457      	bmi.n	8024144 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8024094:	45d0      	cmp	r8, sl
 8024096:	dd55      	ble.n	8024144 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8024098:	f1bc 0f00 	cmp.w	ip, #0
 802409c:	db52      	blt.n	8024144 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 802409e:	45e1      	cmp	r9, ip
 80240a0:	dd50      	ble.n	8024144 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80240a2:	2f00      	cmp	r7, #0
 80240a4:	f000 80a5 	beq.w	80241f2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 80240a8:	f10e 0b01 	add.w	fp, lr, #1
 80240ac:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80240b0:	f01b 0f01 	tst.w	fp, #1
 80240b4:	5d14      	ldrb	r4, [r2, r4]
 80240b6:	bf0c      	ite	eq
 80240b8:	f004 040f 	andeq.w	r4, r4, #15
 80240bc:	1124      	asrne	r4, r4, #4
 80240be:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80240c2:	b2e4      	uxtb	r4, r4
 80240c4:	2d00      	cmp	r5, #0
 80240c6:	f000 808f 	beq.w	80241e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 80240ca:	2800      	cmp	r0, #0
 80240cc:	f10c 0c01 	add.w	ip, ip, #1
 80240d0:	db3c      	blt.n	802414c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80240d2:	4580      	cmp	r8, r0
 80240d4:	dd3a      	ble.n	802414c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80240d6:	f1bc 0f00 	cmp.w	ip, #0
 80240da:	db37      	blt.n	802414c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80240dc:	45e1      	cmp	r9, ip
 80240de:	dd35      	ble.n	802414c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80240e0:	eb03 0b0e 	add.w	fp, r3, lr
 80240e4:	ea4f 005b 	mov.w	r0, fp, lsr #1
 80240e8:	f01b 0f01 	tst.w	fp, #1
 80240ec:	5c10      	ldrb	r0, [r2, r0]
 80240ee:	bf0c      	ite	eq
 80240f0:	f000 000f 	andeq.w	r0, r0, #15
 80240f4:	1100      	asrne	r0, r0, #4
 80240f6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80240fa:	b2c0      	uxtb	r0, r0
 80240fc:	f1ba 0f00 	cmp.w	sl, #0
 8024100:	db26      	blt.n	8024150 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8024102:	45d0      	cmp	r8, sl
 8024104:	dd24      	ble.n	8024150 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8024106:	f1bc 0f00 	cmp.w	ip, #0
 802410a:	db21      	blt.n	8024150 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 802410c:	45e1      	cmp	r9, ip
 802410e:	dd1f      	ble.n	8024150 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8024110:	b307      	cbz	r7, 8024154 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 8024112:	3301      	adds	r3, #1
 8024114:	449e      	add	lr, r3
 8024116:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802411a:	f01e 0f01 	tst.w	lr, #1
 802411e:	5cd3      	ldrb	r3, [r2, r3]
 8024120:	bf0c      	ite	eq
 8024122:	f003 030f 	andeq.w	r3, r3, #15
 8024126:	111b      	asrne	r3, r3, #4
 8024128:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802412c:	b2db      	uxtb	r3, r3
 802412e:	2f0f      	cmp	r7, #15
 8024130:	d911      	bls.n	8024156 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 8024132:	4b32      	ldr	r3, [pc, #200]	; (80241fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 8024134:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8024138:	4a31      	ldr	r2, [pc, #196]	; (8024200 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 802413a:	4832      	ldr	r0, [pc, #200]	; (8024204 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 802413c:	f001 fff8 	bl	8026130 <__assert_func>
 8024140:	2600      	movs	r6, #0
 8024142:	e7a4      	b.n	802408e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 8024144:	2400      	movs	r4, #0
 8024146:	e7bd      	b.n	80240c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 8024148:	463c      	mov	r4, r7
 802414a:	e7be      	b.n	80240ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 802414c:	2000      	movs	r0, #0
 802414e:	e7d5      	b.n	80240fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 8024150:	2300      	movs	r3, #0
 8024152:	e7ec      	b.n	802412e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 8024154:	463b      	mov	r3, r7
 8024156:	2d0f      	cmp	r5, #15
 8024158:	d8eb      	bhi.n	8024132 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 802415a:	b2bf      	uxth	r7, r7
 802415c:	b2ad      	uxth	r5, r5
 802415e:	fb07 f205 	mul.w	r2, r7, r5
 8024162:	013f      	lsls	r7, r7, #4
 8024164:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8024168:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 802416c:	1abf      	subs	r7, r7, r2
 802416e:	b2ad      	uxth	r5, r5
 8024170:	b2bf      	uxth	r7, r7
 8024172:	ebac 0c05 	sub.w	ip, ip, r5
 8024176:	437c      	muls	r4, r7
 8024178:	fa1f fc8c 	uxth.w	ip, ip
 802417c:	fb06 440c 	mla	r4, r6, ip, r4
 8024180:	fb05 4400 	mla	r4, r5, r0, r4
 8024184:	fb02 4303 	mla	r3, r2, r3, r4
 8024188:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802418c:	b353      	cbz	r3, 80241e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 802418e:	4a1e      	ldr	r2, [pc, #120]	; (8024208 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 8024190:	7808      	ldrb	r0, [r1, #0]
 8024192:	6814      	ldr	r4, [r2, #0]
 8024194:	b29a      	uxth	r2, r3
 8024196:	43db      	mvns	r3, r3
 8024198:	b2e5      	uxtb	r5, r4
 802419a:	b2db      	uxtb	r3, r3
 802419c:	fb15 f502 	smulbb	r5, r5, r2
 80241a0:	fb00 5003 	mla	r0, r0, r3, r5
 80241a4:	b280      	uxth	r0, r0
 80241a6:	1c45      	adds	r5, r0, #1
 80241a8:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80241ac:	784d      	ldrb	r5, [r1, #1]
 80241ae:	fb15 f503 	smulbb	r5, r5, r3
 80241b2:	1200      	asrs	r0, r0, #8
 80241b4:	7008      	strb	r0, [r1, #0]
 80241b6:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80241ba:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80241be:	fb00 5002 	mla	r0, r0, r2, r5
 80241c2:	b280      	uxth	r0, r0
 80241c4:	1c45      	adds	r5, r0, #1
 80241c6:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80241ca:	1200      	asrs	r0, r0, #8
 80241cc:	7048      	strb	r0, [r1, #1]
 80241ce:	7888      	ldrb	r0, [r1, #2]
 80241d0:	fb10 f303 	smulbb	r3, r0, r3
 80241d4:	fb04 3202 	mla	r2, r4, r2, r3
 80241d8:	b292      	uxth	r2, r2
 80241da:	1c53      	adds	r3, r2, #1
 80241dc:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80241e0:	1212      	asrs	r2, r2, #8
 80241e2:	708a      	strb	r2, [r1, #2]
 80241e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80241e8:	2f0f      	cmp	r7, #15
 80241ea:	d8a2      	bhi.n	8024132 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 80241ec:	462b      	mov	r3, r5
 80241ee:	4628      	mov	r0, r5
 80241f0:	e7b3      	b.n	802415a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 80241f2:	2d00      	cmp	r5, #0
 80241f4:	d1a8      	bne.n	8024148 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 80241f6:	462c      	mov	r4, r5
 80241f8:	e7f8      	b.n	80241ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 80241fa:	bf00      	nop
 80241fc:	0802abfb 	.word	0x0802abfb
 8024200:	0802b0f2 	.word	0x0802b0f2
 8024204:	0802acc4 	.word	0x0802acc4
 8024208:	2000c5dc 	.word	0x2000c5dc

0802420c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802420c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024210:	ed2d 8b08 	vpush	{d8-d11}
 8024214:	b095      	sub	sp, #84	; 0x54
 8024216:	461c      	mov	r4, r3
 8024218:	eeb0 aa40 	vmov.f32	s20, s0
 802421c:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 8024220:	eef0 9a60 	vmov.f32	s19, s1
 8024224:	920e      	str	r2, [sp, #56]	; 0x38
 8024226:	eeb0 9a41 	vmov.f32	s18, s2
 802422a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802422c:	eeb0 8a62 	vmov.f32	s16, s5
 8024230:	9307      	str	r3, [sp, #28]
 8024232:	eef0 8a43 	vmov.f32	s17, s6
 8024236:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 802423a:	eef0 ba44 	vmov.f32	s23, s8
 802423e:	9013      	str	r0, [sp, #76]	; 0x4c
 8024240:	eeb0 ba64 	vmov.f32	s22, s9
 8024244:	9109      	str	r1, [sp, #36]	; 0x24
 8024246:	eef0 aa45 	vmov.f32	s21, s10
 802424a:	9308      	str	r3, [sp, #32]
 802424c:	6850      	ldr	r0, [r2, #4]
 802424e:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8024252:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 8024256:	fb00 1803 	mla	r8, r0, r3, r1
 802425a:	6813      	ldr	r3, [r2, #0]
 802425c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8024260:	4498      	add	r8, r3
 8024262:	9b07      	ldr	r3, [sp, #28]
 8024264:	3301      	adds	r3, #1
 8024266:	f023 0301 	bic.w	r3, r3, #1
 802426a:	930b      	str	r3, [sp, #44]	; 0x2c
 802426c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802426e:	681f      	ldr	r7, [r3, #0]
 8024270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024272:	2b00      	cmp	r3, #0
 8024274:	dc03      	bgt.n	802427e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8024276:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024278:	2b00      	cmp	r3, #0
 802427a:	f340 8238 	ble.w	80246ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 802427e:	2c00      	cmp	r4, #0
 8024280:	f340 8109 	ble.w	8024496 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 8024284:	142a      	asrs	r2, r5, #16
 8024286:	ea4f 4326 	mov.w	r3, r6, asr #16
 802428a:	d42b      	bmi.n	80242e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 802428c:	1c51      	adds	r1, r2, #1
 802428e:	9807      	ldr	r0, [sp, #28]
 8024290:	4288      	cmp	r0, r1
 8024292:	dd2a      	ble.n	80242ea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8024294:	2b00      	cmp	r3, #0
 8024296:	db28      	blt.n	80242ea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8024298:	1c59      	adds	r1, r3, #1
 802429a:	9808      	ldr	r0, [sp, #32]
 802429c:	4288      	cmp	r0, r1
 802429e:	dd24      	ble.n	80242ea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 80242a0:	1e63      	subs	r3, r4, #1
 80242a2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80242a4:	fb02 5203 	mla	r2, r2, r3, r5
 80242a8:	1412      	asrs	r2, r2, #16
 80242aa:	d429      	bmi.n	8024300 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80242ac:	3201      	adds	r2, #1
 80242ae:	9907      	ldr	r1, [sp, #28]
 80242b0:	4291      	cmp	r1, r2
 80242b2:	dd25      	ble.n	8024300 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80242b4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80242b6:	fb02 6303 	mla	r3, r2, r3, r6
 80242ba:	141b      	asrs	r3, r3, #16
 80242bc:	d420      	bmi.n	8024300 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80242be:	3301      	adds	r3, #1
 80242c0:	9a08      	ldr	r2, [sp, #32]
 80242c2:	429a      	cmp	r2, r3
 80242c4:	dd1c      	ble.n	8024300 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80242c6:	f108 0e03 	add.w	lr, r8, #3
 80242ca:	46a1      	mov	r9, r4
 80242cc:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 80242d0:	f1b9 0f00 	cmp.w	r9, #0
 80242d4:	f300 8155 	bgt.w	8024582 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 80242d8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80242dc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80242e0:	44a0      	add	r8, r4
 80242e2:	e0da      	b.n	802449a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80242e4:	1c50      	adds	r0, r2, #1
 80242e6:	f040 80ce 	bne.w	8024486 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80242ea:	9907      	ldr	r1, [sp, #28]
 80242ec:	4291      	cmp	r1, r2
 80242ee:	f340 80ca 	ble.w	8024486 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80242f2:	1c59      	adds	r1, r3, #1
 80242f4:	f2c0 80c7 	blt.w	8024486 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80242f8:	9a08      	ldr	r2, [sp, #32]
 80242fa:	4293      	cmp	r3, r2
 80242fc:	f280 80c3 	bge.w	8024486 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8024300:	46a3      	mov	fp, r4
 8024302:	46c1      	mov	r9, r8
 8024304:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8024308:	f1bb 0f00 	cmp.w	fp, #0
 802430c:	dde4      	ble.n	80242d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 802430e:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8024312:	1428      	asrs	r0, r5, #16
 8024314:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024318:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802431c:	920a      	str	r2, [sp, #40]	; 0x28
 802431e:	f100 8116 	bmi.w	802454e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8024322:	f100 0c01 	add.w	ip, r0, #1
 8024326:	9a07      	ldr	r2, [sp, #28]
 8024328:	4562      	cmp	r2, ip
 802432a:	f340 8112 	ble.w	8024552 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 802432e:	2b00      	cmp	r3, #0
 8024330:	f2c0 810f 	blt.w	8024552 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8024334:	f103 0c01 	add.w	ip, r3, #1
 8024338:	9a08      	ldr	r2, [sp, #32]
 802433a:	4562      	cmp	r2, ip
 802433c:	f340 8109 	ble.w	8024552 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8024340:	fb03 030a 	mla	r3, r3, sl, r0
 8024344:	0858      	lsrs	r0, r3, #1
 8024346:	07da      	lsls	r2, r3, #31
 8024348:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802434a:	5c38      	ldrb	r0, [r7, r0]
 802434c:	bf54      	ite	pl
 802434e:	f000 000f 	andpl.w	r0, r0, #15
 8024352:	1100      	asrmi	r0, r0, #4
 8024354:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024358:	b2c0      	uxtb	r0, r0
 802435a:	2a00      	cmp	r2, #0
 802435c:	f000 80dd 	beq.w	802451a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30e>
 8024360:	f103 0e01 	add.w	lr, r3, #1
 8024364:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8024368:	f01e 0f01 	tst.w	lr, #1
 802436c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024370:	bf0c      	ite	eq
 8024372:	f00c 0c0f 	andeq.w	ip, ip, #15
 8024376:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802437a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802437e:	fa5f fc8c 	uxtb.w	ip, ip
 8024382:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8024386:	b301      	cbz	r1, 80243ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8024388:	4453      	add	r3, sl
 802438a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802438e:	07da      	lsls	r2, r3, #31
 8024390:	f103 0301 	add.w	r3, r3, #1
 8024394:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024398:	bf54      	ite	pl
 802439a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802439e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80243a2:	07da      	lsls	r2, r3, #31
 80243a4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80243a8:	fa5f fc8c 	uxtb.w	ip, ip
 80243ac:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 80243b0:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80243b4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80243b8:	bf54      	ite	pl
 80243ba:	f00c 030f 	andpl.w	r3, ip, #15
 80243be:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80243c2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80243c6:	b2db      	uxtb	r3, r3
 80243c8:	9310      	str	r3, [sp, #64]	; 0x40
 80243ca:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80243ce:	b289      	uxth	r1, r1
 80243d0:	fb02 f301 	mul.w	r3, r2, r1
 80243d4:	0112      	lsls	r2, r2, #4
 80243d6:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80243da:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 80243de:	1ad2      	subs	r2, r2, r3
 80243e0:	fa1f fe81 	uxth.w	lr, r1
 80243e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80243e6:	b292      	uxth	r2, r2
 80243e8:	ebac 0c0e 	sub.w	ip, ip, lr
 80243ec:	434a      	muls	r2, r1
 80243ee:	fa1f fc8c 	uxth.w	ip, ip
 80243f2:	fb00 200c 	mla	r0, r0, ip, r2
 80243f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80243f8:	fb0e 0002 	mla	r0, lr, r2, r0
 80243fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80243fe:	fb03 0002 	mla	r0, r3, r2, r0
 8024402:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024406:	b3a8      	cbz	r0, 8024474 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8024408:	4bbb      	ldr	r3, [pc, #748]	; (80246f8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 802440a:	28ff      	cmp	r0, #255	; 0xff
 802440c:	681b      	ldr	r3, [r3, #0]
 802440e:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 8024412:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8024416:	b2db      	uxtb	r3, r3
 8024418:	f000 8092 	beq.w	8024540 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x334>
 802441c:	b282      	uxth	r2, r0
 802441e:	43c0      	mvns	r0, r0
 8024420:	f899 e000 	ldrb.w	lr, [r9]
 8024424:	fb13 f302 	smulbb	r3, r3, r2
 8024428:	b2c0      	uxtb	r0, r0
 802442a:	fb11 f102 	smulbb	r1, r1, r2
 802442e:	fb0e 3300 	mla	r3, lr, r0, r3
 8024432:	fb1c f202 	smulbb	r2, ip, r2
 8024436:	b29b      	uxth	r3, r3
 8024438:	f103 0e01 	add.w	lr, r3, #1
 802443c:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8024440:	121b      	asrs	r3, r3, #8
 8024442:	f889 3000 	strb.w	r3, [r9]
 8024446:	f899 3001 	ldrb.w	r3, [r9, #1]
 802444a:	fb03 1100 	mla	r1, r3, r0, r1
 802444e:	b289      	uxth	r1, r1
 8024450:	1c4b      	adds	r3, r1, #1
 8024452:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8024456:	f899 3002 	ldrb.w	r3, [r9, #2]
 802445a:	fb03 2000 	mla	r0, r3, r0, r2
 802445e:	1209      	asrs	r1, r1, #8
 8024460:	b280      	uxth	r0, r0
 8024462:	f889 1001 	strb.w	r1, [r9, #1]
 8024466:	f100 0c01 	add.w	ip, r0, #1
 802446a:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 802446e:	1200      	asrs	r0, r0, #8
 8024470:	f889 0002 	strb.w	r0, [r9, #2]
 8024474:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024476:	f109 0903 	add.w	r9, r9, #3
 802447a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802447e:	441d      	add	r5, r3
 8024480:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024482:	441e      	add	r6, r3
 8024484:	e740      	b.n	8024308 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8024486:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024488:	3c01      	subs	r4, #1
 802448a:	f108 0803 	add.w	r8, r8, #3
 802448e:	441d      	add	r5, r3
 8024490:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024492:	441e      	add	r6, r3
 8024494:	e6f3      	b.n	802427e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8024496:	f47f af03 	bne.w	80242a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 802449a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802449c:	2b00      	cmp	r3, #0
 802449e:	f340 8126 	ble.w	80246ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 80244a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80244a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80244a8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80244ac:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80244b0:	eef0 6a48 	vmov.f32	s13, s16
 80244b4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80244b8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80244bc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80244c0:	ee16 5a90 	vmov	r5, s13
 80244c4:	eef0 6a68 	vmov.f32	s13, s17
 80244c8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80244cc:	ee16 6a90 	vmov	r6, s13
 80244d0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80244d4:	ee69 7a27 	vmul.f32	s15, s18, s15
 80244d8:	ee37 8a48 	vsub.f32	s16, s14, s16
 80244dc:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80244e0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80244e4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80244e8:	ee18 2a10 	vmov	r2, s16
 80244ec:	eeb0 8a47 	vmov.f32	s16, s14
 80244f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80244f4:	ee18 2a90 	vmov	r2, s17
 80244f8:	9329      	str	r3, [sp, #164]	; 0xa4
 80244fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80244fc:	eef0 8a67 	vmov.f32	s17, s15
 8024500:	fb92 f3f3 	sdiv	r3, r2, r3
 8024504:	932a      	str	r3, [sp, #168]	; 0xa8
 8024506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024508:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802450a:	3b01      	subs	r3, #1
 802450c:	9309      	str	r3, [sp, #36]	; 0x24
 802450e:	bf08      	it	eq
 8024510:	4614      	moveq	r4, r2
 8024512:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024514:	bf18      	it	ne
 8024516:	461c      	movne	r4, r3
 8024518:	e6aa      	b.n	8024270 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 802451a:	2900      	cmp	r1, #0
 802451c:	f43f af55 	beq.w	80243ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8024520:	4453      	add	r3, sl
 8024522:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024526:	07db      	lsls	r3, r3, #31
 8024528:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802452c:	bf54      	ite	pl
 802452e:	f00c 030f 	andpl.w	r3, ip, #15
 8024532:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8024536:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802453a:	b2db      	uxtb	r3, r3
 802453c:	930c      	str	r3, [sp, #48]	; 0x30
 802453e:	e744      	b.n	80243ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8024540:	f889 3000 	strb.w	r3, [r9]
 8024544:	f889 1001 	strb.w	r1, [r9, #1]
 8024548:	f889 c002 	strb.w	ip, [r9, #2]
 802454c:	e792      	b.n	8024474 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802454e:	1c42      	adds	r2, r0, #1
 8024550:	d190      	bne.n	8024474 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8024552:	9a07      	ldr	r2, [sp, #28]
 8024554:	4282      	cmp	r2, r0
 8024556:	dd8d      	ble.n	8024474 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8024558:	1c5a      	adds	r2, r3, #1
 802455a:	db8b      	blt.n	8024474 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802455c:	9a08      	ldr	r2, [sp, #32]
 802455e:	429a      	cmp	r2, r3
 8024560:	dd88      	ble.n	8024474 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8024562:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024564:	9105      	str	r1, [sp, #20]
 8024566:	4649      	mov	r1, r9
 8024568:	9002      	str	r0, [sp, #8]
 802456a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802456c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8024570:	9b08      	ldr	r3, [sp, #32]
 8024572:	463a      	mov	r2, r7
 8024574:	9301      	str	r3, [sp, #4]
 8024576:	9b07      	ldr	r3, [sp, #28]
 8024578:	9300      	str	r3, [sp, #0]
 802457a:	4653      	mov	r3, sl
 802457c:	f7ff fd64 	bl	8024048 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8024580:	e778      	b.n	8024474 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8024582:	142a      	asrs	r2, r5, #16
 8024584:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024588:	1433      	asrs	r3, r6, #16
 802458a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802458e:	fb0a 2303 	mla	r3, sl, r3, r2
 8024592:	085a      	lsrs	r2, r3, #1
 8024594:	07d9      	lsls	r1, r3, #31
 8024596:	5cba      	ldrb	r2, [r7, r2]
 8024598:	bf54      	ite	pl
 802459a:	f002 020f 	andpl.w	r2, r2, #15
 802459e:	1112      	asrmi	r2, r2, #4
 80245a0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80245a4:	b2d2      	uxtb	r2, r2
 80245a6:	2800      	cmp	r0, #0
 80245a8:	f000 808a 	beq.w	80246c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 80245ac:	f103 0b01 	add.w	fp, r3, #1
 80245b0:	ea4f 015b 	mov.w	r1, fp, lsr #1
 80245b4:	f01b 0f01 	tst.w	fp, #1
 80245b8:	5c79      	ldrb	r1, [r7, r1]
 80245ba:	bf0c      	ite	eq
 80245bc:	f001 010f 	andeq.w	r1, r1, #15
 80245c0:	1109      	asrne	r1, r1, #4
 80245c2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80245c6:	b2c9      	uxtb	r1, r1
 80245c8:	9111      	str	r1, [sp, #68]	; 0x44
 80245ca:	f1bc 0f00 	cmp.w	ip, #0
 80245ce:	d019      	beq.n	8024604 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 80245d0:	4453      	add	r3, sl
 80245d2:	0859      	lsrs	r1, r3, #1
 80245d4:	f013 0f01 	tst.w	r3, #1
 80245d8:	f103 0301 	add.w	r3, r3, #1
 80245dc:	5c79      	ldrb	r1, [r7, r1]
 80245de:	bf0c      	ite	eq
 80245e0:	f001 010f 	andeq.w	r1, r1, #15
 80245e4:	1109      	asrne	r1, r1, #4
 80245e6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80245ea:	b2c9      	uxtb	r1, r1
 80245ec:	910d      	str	r1, [sp, #52]	; 0x34
 80245ee:	0859      	lsrs	r1, r3, #1
 80245f0:	07db      	lsls	r3, r3, #31
 80245f2:	5c79      	ldrb	r1, [r7, r1]
 80245f4:	bf54      	ite	pl
 80245f6:	f001 010f 	andpl.w	r1, r1, #15
 80245fa:	1109      	asrmi	r1, r1, #4
 80245fc:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024600:	b2c9      	uxtb	r1, r1
 8024602:	9112      	str	r1, [sp, #72]	; 0x48
 8024604:	b280      	uxth	r0, r0
 8024606:	fa1f fc8c 	uxth.w	ip, ip
 802460a:	fb00 f30c 	mul.w	r3, r0, ip
 802460e:	0100      	lsls	r0, r0, #4
 8024610:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8024614:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8024618:	1ac0      	subs	r0, r0, r3
 802461a:	fa1f fc8c 	uxth.w	ip, ip
 802461e:	b280      	uxth	r0, r0
 8024620:	eba1 010c 	sub.w	r1, r1, ip
 8024624:	fa1f fb81 	uxth.w	fp, r1
 8024628:	9911      	ldr	r1, [sp, #68]	; 0x44
 802462a:	4348      	muls	r0, r1
 802462c:	990d      	ldr	r1, [sp, #52]	; 0x34
 802462e:	fb02 020b 	mla	r2, r2, fp, r0
 8024632:	fb0c 2c01 	mla	ip, ip, r1, r2
 8024636:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8024638:	fb03 c302 	mla	r3, r3, r2, ip
 802463c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024640:	b3ab      	cbz	r3, 80246ae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8024642:	4a2d      	ldr	r2, [pc, #180]	; (80246f8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8024644:	2bff      	cmp	r3, #255	; 0xff
 8024646:	6811      	ldr	r1, [r2, #0]
 8024648:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 802464c:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 8024650:	b2c9      	uxtb	r1, r1
 8024652:	d045      	beq.n	80246e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 8024654:	b298      	uxth	r0, r3
 8024656:	43db      	mvns	r3, r3
 8024658:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 802465c:	fb11 f100 	smulbb	r1, r1, r0
 8024660:	b2db      	uxtb	r3, r3
 8024662:	fb1c fc00 	smulbb	ip, ip, r0
 8024666:	fb02 1103 	mla	r1, r2, r3, r1
 802466a:	fb1b f000 	smulbb	r0, fp, r0
 802466e:	b289      	uxth	r1, r1
 8024670:	1c4a      	adds	r2, r1, #1
 8024672:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024676:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 802467a:	fb02 cc03 	mla	ip, r2, r3, ip
 802467e:	1209      	asrs	r1, r1, #8
 8024680:	fa1f fc8c 	uxth.w	ip, ip
 8024684:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8024688:	f10c 0201 	add.w	r2, ip, #1
 802468c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8024690:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 8024694:	fb02 0303 	mla	r3, r2, r3, r0
 8024698:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802469c:	b29b      	uxth	r3, r3
 802469e:	f80e cc02 	strb.w	ip, [lr, #-2]
 80246a2:	1c5a      	adds	r2, r3, #1
 80246a4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80246a8:	121b      	asrs	r3, r3, #8
 80246aa:	f80e 3c01 	strb.w	r3, [lr, #-1]
 80246ae:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80246b0:	f10e 0e03 	add.w	lr, lr, #3
 80246b4:	f109 39ff 	add.w	r9, r9, #4294967295
 80246b8:	441d      	add	r5, r3
 80246ba:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80246bc:	441e      	add	r6, r3
 80246be:	e607      	b.n	80242d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 80246c0:	f1bc 0f00 	cmp.w	ip, #0
 80246c4:	d09e      	beq.n	8024604 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 80246c6:	4453      	add	r3, sl
 80246c8:	0859      	lsrs	r1, r3, #1
 80246ca:	07db      	lsls	r3, r3, #31
 80246cc:	5c79      	ldrb	r1, [r7, r1]
 80246ce:	bf54      	ite	pl
 80246d0:	f001 010f 	andpl.w	r1, r1, #15
 80246d4:	1109      	asrmi	r1, r1, #4
 80246d6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80246da:	b2c9      	uxtb	r1, r1
 80246dc:	910d      	str	r1, [sp, #52]	; 0x34
 80246de:	e791      	b.n	8024604 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 80246e0:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80246e4:	f80e cc02 	strb.w	ip, [lr, #-2]
 80246e8:	f80e bc01 	strb.w	fp, [lr, #-1]
 80246ec:	e7df      	b.n	80246ae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 80246ee:	b015      	add	sp, #84	; 0x54
 80246f0:	ecbd 8b08 	vpop	{d8-d11}
 80246f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80246f8:	2000c5dc 	.word	0x2000c5dc

080246fc <CRC_Lock>:
 80246fc:	4a1d      	ldr	r2, [pc, #116]	; (8024774 <CRC_Lock+0x78>)
 80246fe:	b530      	push	{r4, r5, lr}
 8024700:	6813      	ldr	r3, [r2, #0]
 8024702:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8024706:	f24c 2540 	movw	r5, #49728	; 0xc240
 802470a:	f023 0301 	bic.w	r3, r3, #1
 802470e:	6013      	str	r3, [r2, #0]
 8024710:	4b19      	ldr	r3, [pc, #100]	; (8024778 <CRC_Lock+0x7c>)
 8024712:	681a      	ldr	r2, [r3, #0]
 8024714:	4022      	ands	r2, r4
 8024716:	42aa      	cmp	r2, r5
 8024718:	d005      	beq.n	8024726 <CRC_Lock+0x2a>
 802471a:	681b      	ldr	r3, [r3, #0]
 802471c:	f24c 2270 	movw	r2, #49776	; 0xc270
 8024720:	4023      	ands	r3, r4
 8024722:	4293      	cmp	r3, r2
 8024724:	d11d      	bne.n	8024762 <CRC_Lock+0x66>
 8024726:	4b15      	ldr	r3, [pc, #84]	; (802477c <CRC_Lock+0x80>)
 8024728:	681b      	ldr	r3, [r3, #0]
 802472a:	b9d3      	cbnz	r3, 8024762 <CRC_Lock+0x66>
 802472c:	4a14      	ldr	r2, [pc, #80]	; (8024780 <CRC_Lock+0x84>)
 802472e:	6813      	ldr	r3, [r2, #0]
 8024730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024734:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8024738:	d006      	beq.n	8024748 <CRC_Lock+0x4c>
 802473a:	6813      	ldr	r3, [r2, #0]
 802473c:	f240 4283 	movw	r2, #1155	; 0x483
 8024740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024744:	4293      	cmp	r3, r2
 8024746:	d10c      	bne.n	8024762 <CRC_Lock+0x66>
 8024748:	4b0e      	ldr	r3, [pc, #56]	; (8024784 <CRC_Lock+0x88>)
 802474a:	2201      	movs	r2, #1
 802474c:	601a      	str	r2, [r3, #0]
 802474e:	681a      	ldr	r2, [r3, #0]
 8024750:	2a00      	cmp	r2, #0
 8024752:	d1fc      	bne.n	802474e <CRC_Lock+0x52>
 8024754:	4b0c      	ldr	r3, [pc, #48]	; (8024788 <CRC_Lock+0x8c>)
 8024756:	6018      	str	r0, [r3, #0]
 8024758:	6818      	ldr	r0, [r3, #0]
 802475a:	1a43      	subs	r3, r0, r1
 802475c:	4258      	negs	r0, r3
 802475e:	4158      	adcs	r0, r3
 8024760:	bd30      	pop	{r4, r5, pc}
 8024762:	4b0a      	ldr	r3, [pc, #40]	; (802478c <CRC_Lock+0x90>)
 8024764:	2201      	movs	r2, #1
 8024766:	601a      	str	r2, [r3, #0]
 8024768:	681a      	ldr	r2, [r3, #0]
 802476a:	2a00      	cmp	r2, #0
 802476c:	d1fc      	bne.n	8024768 <CRC_Lock+0x6c>
 802476e:	4b08      	ldr	r3, [pc, #32]	; (8024790 <CRC_Lock+0x94>)
 8024770:	e7f1      	b.n	8024756 <CRC_Lock+0x5a>
 8024772:	bf00      	nop
 8024774:	e0002000 	.word	0xe0002000
 8024778:	e000ed00 	.word	0xe000ed00
 802477c:	e0042000 	.word	0xe0042000
 8024780:	5c001000 	.word	0x5c001000
 8024784:	58024c08 	.word	0x58024c08
 8024788:	58024c00 	.word	0x58024c00
 802478c:	40023008 	.word	0x40023008
 8024790:	40023000 	.word	0x40023000

08024794 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8024794:	6101      	str	r1, [r0, #16]
 8024796:	4770      	bx	lr

08024798 <_ZN8touchgfx8Gestures4tickEv>:
 8024798:	7b83      	ldrb	r3, [r0, #14]
 802479a:	b14b      	cbz	r3, 80247b0 <_ZN8touchgfx8Gestures4tickEv+0x18>
 802479c:	8903      	ldrh	r3, [r0, #8]
 802479e:	3301      	adds	r3, #1
 80247a0:	b29b      	uxth	r3, r3
 80247a2:	2b07      	cmp	r3, #7
 80247a4:	8103      	strh	r3, [r0, #8]
 80247a6:	bf81      	itttt	hi
 80247a8:	2300      	movhi	r3, #0
 80247aa:	8143      	strhhi	r3, [r0, #10]
 80247ac:	8183      	strhhi	r3, [r0, #12]
 80247ae:	7383      	strbhi	r3, [r0, #14]
 80247b0:	4770      	bx	lr
	...

080247b4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80247b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80247b8:	4604      	mov	r4, r0
 80247ba:	4698      	mov	r8, r3
 80247bc:	8880      	ldrh	r0, [r0, #4]
 80247be:	4617      	mov	r7, r2
 80247c0:	4b1d      	ldr	r3, [pc, #116]	; (8024838 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 80247c2:	460e      	mov	r6, r1
 80247c4:	f8ad 0006 	strh.w	r0, [sp, #6]
 80247c8:	eba8 0000 	sub.w	r0, r8, r0
 80247cc:	9300      	str	r3, [sp, #0]
 80247ce:	2300      	movs	r3, #0
 80247d0:	b280      	uxth	r0, r0
 80247d2:	8aa2      	ldrh	r2, [r4, #20]
 80247d4:	f88d 3004 	strb.w	r3, [sp, #4]
 80247d8:	b203      	sxth	r3, r0
 80247da:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 80247de:	88e1      	ldrh	r1, [r4, #6]
 80247e0:	2b00      	cmp	r3, #0
 80247e2:	f8ad 800a 	strh.w	r8, [sp, #10]
 80247e6:	f8ad 1008 	strh.w	r1, [sp, #8]
 80247ea:	bfb8      	it	lt
 80247ec:	4240      	neglt	r0, r0
 80247ee:	f8ad 500c 	strh.w	r5, [sp, #12]
 80247f2:	bfb8      	it	lt
 80247f4:	b203      	sxthlt	r3, r0
 80247f6:	4293      	cmp	r3, r2
 80247f8:	dc08      	bgt.n	802480c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 80247fa:	1a69      	subs	r1, r5, r1
 80247fc:	b289      	uxth	r1, r1
 80247fe:	b20b      	sxth	r3, r1
 8024800:	2b00      	cmp	r3, #0
 8024802:	bfbc      	itt	lt
 8024804:	4249      	neglt	r1, r1
 8024806:	b20b      	sxthlt	r3, r1
 8024808:	429a      	cmp	r2, r3
 802480a:	da13      	bge.n	8024834 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 802480c:	6920      	ldr	r0, [r4, #16]
 802480e:	4669      	mov	r1, sp
 8024810:	eba8 0606 	sub.w	r6, r8, r6
 8024814:	1bef      	subs	r7, r5, r7
 8024816:	6803      	ldr	r3, [r0, #0]
 8024818:	685b      	ldr	r3, [r3, #4]
 802481a:	4798      	blx	r3
 802481c:	2300      	movs	r3, #0
 802481e:	2001      	movs	r0, #1
 8024820:	8166      	strh	r6, [r4, #10]
 8024822:	8123      	strh	r3, [r4, #8]
 8024824:	81a7      	strh	r7, [r4, #12]
 8024826:	f8a4 8004 	strh.w	r8, [r4, #4]
 802482a:	80e5      	strh	r5, [r4, #6]
 802482c:	73a0      	strb	r0, [r4, #14]
 802482e:	b004      	add	sp, #16
 8024830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024834:	2000      	movs	r0, #0
 8024836:	e7fa      	b.n	802482e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8024838:	08029d98 	.word	0x08029d98

0802483c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802483c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802483e:	461e      	mov	r6, r3
 8024840:	1e4b      	subs	r3, r1, #1
 8024842:	b085      	sub	sp, #20
 8024844:	4604      	mov	r4, r0
 8024846:	2b01      	cmp	r3, #1
 8024848:	460d      	mov	r5, r1
 802484a:	4617      	mov	r7, r2
 802484c:	d84b      	bhi.n	80248e6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802484e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8024852:	1cd3      	adds	r3, r2, #3
 8024854:	b29b      	uxth	r3, r3
 8024856:	2b06      	cmp	r3, #6
 8024858:	d916      	bls.n	8024888 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802485a:	f8df c098 	ldr.w	ip, [pc, #152]	; 80248f4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 802485e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8024862:	f8cd c004 	str.w	ip, [sp, #4]
 8024866:	f04f 0c00 	mov.w	ip, #0
 802486a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802486e:	6900      	ldr	r0, [r0, #16]
 8024870:	f8ad 100c 	strh.w	r1, [sp, #12]
 8024874:	a901      	add	r1, sp, #4
 8024876:	f88d c008 	strb.w	ip, [sp, #8]
 802487a:	f8ad 200a 	strh.w	r2, [sp, #10]
 802487e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024882:	6803      	ldr	r3, [r0, #0]
 8024884:	689b      	ldr	r3, [r3, #8]
 8024886:	4798      	blx	r3
 8024888:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802488c:	1cd3      	adds	r3, r2, #3
 802488e:	b29b      	uxth	r3, r3
 8024890:	2b06      	cmp	r3, #6
 8024892:	d916      	bls.n	80248c2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024894:	f8df c05c 	ldr.w	ip, [pc, #92]	; 80248f4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8024898:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802489c:	f8cd c004 	str.w	ip, [sp, #4]
 80248a0:	f04f 0c01 	mov.w	ip, #1
 80248a4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80248a8:	6920      	ldr	r0, [r4, #16]
 80248aa:	f8ad 100c 	strh.w	r1, [sp, #12]
 80248ae:	a901      	add	r1, sp, #4
 80248b0:	f88d c008 	strb.w	ip, [sp, #8]
 80248b4:	f8ad 200a 	strh.w	r2, [sp, #10]
 80248b8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80248bc:	6803      	ldr	r3, [r0, #0]
 80248be:	689b      	ldr	r3, [r3, #8]
 80248c0:	4798      	blx	r3
 80248c2:	4b0b      	ldr	r3, [pc, #44]	; (80248f0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 80248c4:	a901      	add	r1, sp, #4
 80248c6:	6920      	ldr	r0, [r4, #16]
 80248c8:	9301      	str	r3, [sp, #4]
 80248ca:	2300      	movs	r3, #0
 80248cc:	f88d 5008 	strb.w	r5, [sp, #8]
 80248d0:	f8ad 700a 	strh.w	r7, [sp, #10]
 80248d4:	f8ad 600c 	strh.w	r6, [sp, #12]
 80248d8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80248dc:	6803      	ldr	r3, [r0, #0]
 80248de:	681b      	ldr	r3, [r3, #0]
 80248e0:	4798      	blx	r3
 80248e2:	b005      	add	sp, #20
 80248e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80248e6:	2900      	cmp	r1, #0
 80248e8:	d1eb      	bne.n	80248c2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80248ea:	80a2      	strh	r2, [r4, #4]
 80248ec:	80c6      	strh	r6, [r0, #6]
 80248ee:	e7e8      	b.n	80248c2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80248f0:	08029d84 	.word	0x08029d84
 80248f4:	08029dac 	.word	0x08029dac

080248f8 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>:
 80248f8:	10c9      	asrs	r1, r1, #3
 80248fa:	2900      	cmp	r1, #0
 80248fc:	bfb8      	it	lt
 80248fe:	4249      	neglt	r1, r1
 8024900:	2801      	cmp	r0, #1
 8024902:	d108      	bne.n	8024916 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8024904:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8024908:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 802490c:	4601      	mov	r1, r0
 802490e:	dd02      	ble.n	8024916 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8024910:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8024914:	4770      	bx	lr
 8024916:	29ff      	cmp	r1, #255	; 0xff
 8024918:	bfa8      	it	ge
 802491a:	21ff      	movge	r1, #255	; 0xff
 802491c:	4608      	mov	r0, r1
 802491e:	4770      	bx	lr

08024920 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8024920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024924:	688c      	ldr	r4, [r1, #8]
 8024926:	b087      	sub	sp, #28
 8024928:	4607      	mov	r7, r0
 802492a:	2c00      	cmp	r4, #0
 802492c:	db2b      	blt.n	8024986 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 802492e:	6803      	ldr	r3, [r0, #0]
 8024930:	68da      	ldr	r2, [r3, #12]
 8024932:	42a2      	cmp	r2, r4
 8024934:	dd27      	ble.n	8024986 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8024936:	681a      	ldr	r2, [r3, #0]
 8024938:	691e      	ldr	r6, [r3, #16]
 802493a:	68cd      	ldr	r5, [r1, #12]
 802493c:	fb06 2604 	mla	r6, r6, r4, r2
 8024940:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8024944:	698a      	ldr	r2, [r1, #24]
 8024946:	f893 a004 	ldrb.w	sl, [r3, #4]
 802494a:	f8d1 8020 	ldr.w	r8, [r1, #32]
 802494e:	9205      	str	r2, [sp, #20]
 8024950:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 8024954:	9b05      	ldr	r3, [sp, #20]
 8024956:	6839      	ldr	r1, [r7, #0]
 8024958:	eb03 0c02 	add.w	ip, r3, r2
 802495c:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8024960:	6889      	ldr	r1, [r1, #8]
 8024962:	1898      	adds	r0, r3, r2
 8024964:	4288      	cmp	r0, r1
 8024966:	db02      	blt.n	802496e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 8024968:	1a8b      	subs	r3, r1, r2
 802496a:	2b00      	cmp	r3, #0
 802496c:	dd09      	ble.n	8024982 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 802496e:	6878      	ldr	r0, [r7, #4]
 8024970:	6801      	ldr	r1, [r0, #0]
 8024972:	9400      	str	r4, [sp, #0]
 8024974:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8024978:	4653      	mov	r3, sl
 802497a:	f8d1 b008 	ldr.w	fp, [r1, #8]
 802497e:	4631      	mov	r1, r6
 8024980:	47d8      	blx	fp
 8024982:	3d01      	subs	r5, #1
 8024984:	d1e4      	bne.n	8024950 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 8024986:	b007      	add	sp, #28
 8024988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802498c <_ZN8touchgfx10Rasterizer6lineToEii>:
 802498c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8024990:	b90b      	cbnz	r3, 8024996 <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 8024992:	f001 b974 	b.w	8025c7e <_ZN8touchgfx7Outline6lineToEii>
 8024996:	4770      	bx	lr

08024998 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8024998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802499c:	4604      	mov	r4, r0
 802499e:	2600      	movs	r6, #0
 80249a0:	4b8e      	ldr	r3, [pc, #568]	; (8024bdc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x244>)
 80249a2:	f100 0518 	add.w	r5, r0, #24
 80249a6:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 80249aa:	b086      	sub	sp, #24
 80249ac:	4690      	mov	r8, r2
 80249ae:	e9c0 3100 	strd	r3, r1, [r0]
 80249b2:	e9c0 6602 	strd	r6, r6, [r0, #8]
 80249b6:	e9c0 6604 	strd	r6, r6, [r0, #16]
 80249ba:	4628      	mov	r0, r5
 80249bc:	f001 fb75 	bl	80260aa <_ZN8touchgfx15RenderingBufferC1Ev>
 80249c0:	4638      	mov	r0, r7
 80249c2:	f000 fb45 	bl	8025050 <_ZN8touchgfx7OutlineC1Ev>
 80249c6:	f104 0074 	add.w	r0, r4, #116	; 0x74
 80249ca:	f001 fb23 	bl	8026014 <_ZN8touchgfx8ScanlineC1Ev>
 80249ce:	2301      	movs	r3, #1
 80249d0:	f884 6098 	strb.w	r6, [r4, #152]	; 0x98
 80249d4:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
 80249d8:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 80249dc:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
 80249e0:	f8a4 60ac 	strh.w	r6, [r4, #172]	; 0xac
 80249e4:	e9c4 6629 	strd	r6, r6, [r4, #164]	; 0xa4
 80249e8:	e9c4 662c 	strd	r6, r6, [r4, #176]	; 0xb0
 80249ec:	f7f4 fbe6 	bl	80191bc <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 80249f0:	b928      	cbnz	r0, 80249fe <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x66>
 80249f2:	4b7b      	ldr	r3, [pc, #492]	; (8024be0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 80249f4:	2118      	movs	r1, #24
 80249f6:	4a7b      	ldr	r2, [pc, #492]	; (8024be4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 80249f8:	487b      	ldr	r0, [pc, #492]	; (8024be8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 80249fa:	f001 fb99 	bl	8026130 <__assert_func>
 80249fe:	f9b8 2000 	ldrsh.w	r2, [r8]
 8024a02:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8024a06:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8024a0a:	4410      	add	r0, r2
 8024a0c:	9602      	str	r6, [sp, #8]
 8024a0e:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 8024a12:	b280      	uxth	r0, r0
 8024a14:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8024a18:	fa0f fa80 	sxth.w	sl, r0
 8024a1c:	f1ba 0f00 	cmp.w	sl, #0
 8024a20:	dd70      	ble.n	8024b04 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8024a22:	4591      	cmp	r9, r2
 8024a24:	dd6e      	ble.n	8024b04 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8024a26:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8024a2a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8024a2e:	440b      	add	r3, r1
 8024a30:	b29b      	uxth	r3, r3
 8024a32:	b21e      	sxth	r6, r3
 8024a34:	2e00      	cmp	r6, #0
 8024a36:	dd65      	ble.n	8024b04 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8024a38:	458e      	cmp	lr, r1
 8024a3a:	dd63      	ble.n	8024b04 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8024a3c:	45d1      	cmp	r9, sl
 8024a3e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8024a42:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8024a46:	bfb8      	it	lt
 8024a48:	fa1f f089 	uxthlt.w	r0, r9
 8024a4c:	45b6      	cmp	lr, r6
 8024a4e:	f8ad 2008 	strh.w	r2, [sp, #8]
 8024a52:	bfb8      	it	lt
 8024a54:	fa1f f38e 	uxthlt.w	r3, lr
 8024a58:	1a80      	subs	r0, r0, r2
 8024a5a:	f8ad 100a 	strh.w	r1, [sp, #10]
 8024a5e:	1a5b      	subs	r3, r3, r1
 8024a60:	f8ad 000c 	strh.w	r0, [sp, #12]
 8024a64:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024a68:	f10d 0808 	add.w	r8, sp, #8
 8024a6c:	ae04      	add	r6, sp, #16
 8024a6e:	e898 0003 	ldmia.w	r8, {r0, r1}
 8024a72:	e886 0003 	stmia.w	r6, {r0, r1}
 8024a76:	f8dc 3000 	ldr.w	r3, [ip]
 8024a7a:	4660      	mov	r0, ip
 8024a7c:	4631      	mov	r1, r6
 8024a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024a80:	4798      	blx	r3
 8024a82:	6861      	ldr	r1, [r4, #4]
 8024a84:	4640      	mov	r0, r8
 8024a86:	3104      	adds	r1, #4
 8024a88:	f7f5 fa06 	bl	8019e98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024a8c:	4630      	mov	r0, r6
 8024a8e:	f7f5 fa1b 	bl	8019ec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024a92:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8024a96:	f7f4 fb21 	bl	80190dc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 8024a9a:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
 8024a9e:	4638      	mov	r0, r7
 8024aa0:	f000 fab2 	bl	8025008 <_ZN8touchgfx7Outline5resetEv>
 8024aa4:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8024aa8:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8024aac:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8024ab0:	015b      	lsls	r3, r3, #5
 8024ab2:	f8a4 209c 	strh.w	r2, [r4, #156]	; 0x9c
 8024ab6:	0152      	lsls	r2, r2, #5
 8024ab8:	60e3      	str	r3, [r4, #12]
 8024aba:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8024abe:	60a2      	str	r2, [r4, #8]
 8024ac0:	015b      	lsls	r3, r3, #5
 8024ac2:	6123      	str	r3, [r4, #16]
 8024ac4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8024ac8:	015b      	lsls	r3, r3, #5
 8024aca:	6163      	str	r3, [r4, #20]
 8024acc:	4b47      	ldr	r3, [pc, #284]	; (8024bec <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 8024ace:	6818      	ldr	r0, [r3, #0]
 8024ad0:	6803      	ldr	r3, [r0, #0]
 8024ad2:	6a1b      	ldr	r3, [r3, #32]
 8024ad4:	4798      	blx	r3
 8024ad6:	4606      	mov	r6, r0
 8024ad8:	f7eb f96e 	bl	800fdb8 <_ZN8touchgfx3HAL3lcdEv>
 8024adc:	6803      	ldr	r3, [r0, #0]
 8024ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024ae0:	4798      	blx	r3
 8024ae2:	4607      	mov	r7, r0
 8024ae4:	f7eb f968 	bl	800fdb8 <_ZN8touchgfx3HAL3lcdEv>
 8024ae8:	6803      	ldr	r3, [r0, #0]
 8024aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024aec:	4798      	blx	r3
 8024aee:	280c      	cmp	r0, #12
 8024af0:	d854      	bhi.n	8024b9c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 8024af2:	e8df f000 	tbb	[pc, r0]
 8024af6:	554b      	.short	0x554b
 8024af8:	2b6e0a66 	.word	0x2b6e0a66
 8024afc:	5f5f5f3b 	.word	0x5f5f5f3b
 8024b00:	5f5f      	.short	0x5f5f
 8024b02:	6e          	.byte	0x6e
 8024b03:	00          	.byte	0x00
 8024b04:	2300      	movs	r3, #0
 8024b06:	9303      	str	r3, [sp, #12]
 8024b08:	e7ae      	b.n	8024a68 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd0>
 8024b0a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8024b0e:	2108      	movs	r1, #8
 8024b10:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024b14:	fb92 f1f1 	sdiv	r1, r2, r1
 8024b18:	fb07 1303 	mla	r3, r7, r3, r1
 8024b1c:	441e      	add	r6, r3
 8024b1e:	4253      	negs	r3, r2
 8024b20:	f002 0207 	and.w	r2, r2, #7
 8024b24:	f003 0307 	and.w	r3, r3, #7
 8024b28:	bf58      	it	pl
 8024b2a:	425a      	negpl	r2, r3
 8024b2c:	b2d2      	uxtb	r2, r2
 8024b2e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8024b32:	4628      	mov	r0, r5
 8024b34:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8024b38:	66e1      	str	r1, [r4, #108]	; 0x6c
 8024b3a:	e9cd 1700 	strd	r1, r7, [sp]
 8024b3e:	4631      	mov	r1, r6
 8024b40:	f001 fabb 	bl	80260ba <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 8024b44:	4620      	mov	r0, r4
 8024b46:	b006      	add	sp, #24
 8024b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024b4c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8024b50:	2104      	movs	r1, #4
 8024b52:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024b56:	fb92 f1f1 	sdiv	r1, r2, r1
 8024b5a:	fb07 1303 	mla	r3, r7, r3, r1
 8024b5e:	441e      	add	r6, r3
 8024b60:	4253      	negs	r3, r2
 8024b62:	f002 0203 	and.w	r2, r2, #3
 8024b66:	f003 0303 	and.w	r3, r3, #3
 8024b6a:	e7dd      	b.n	8024b28 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x190>
 8024b6c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8024b70:	2102      	movs	r1, #2
 8024b72:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024b76:	2a00      	cmp	r2, #0
 8024b78:	fb92 f1f1 	sdiv	r1, r2, r1
 8024b7c:	f002 0201 	and.w	r2, r2, #1
 8024b80:	fb07 1303 	mla	r3, r7, r3, r1
 8024b84:	bfb8      	it	lt
 8024b86:	4252      	neglt	r2, r2
 8024b88:	441e      	add	r6, r3
 8024b8a:	e7cf      	b.n	8024b2c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 8024b8c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024b90:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8024b94:	437b      	muls	r3, r7
 8024b96:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8024b9a:	441e      	add	r6, r3
 8024b9c:	2200      	movs	r2, #0
 8024b9e:	e7c6      	b.n	8024b2e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x196>
 8024ba0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024ba4:	2103      	movs	r1, #3
 8024ba6:	fb07 f203 	mul.w	r2, r7, r3
 8024baa:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8024bae:	fb13 2301 	smlabb	r3, r3, r1, r2
 8024bb2:	e7f2      	b.n	8024b9a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8024bb4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024bb8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8024bbc:	fb07 2303 	mla	r3, r7, r3, r2
 8024bc0:	e7eb      	b.n	8024b9a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8024bc2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024bc6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8024bca:	437b      	muls	r3, r7
 8024bcc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8024bd0:	e7e3      	b.n	8024b9a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8024bd2:	4b07      	ldr	r3, [pc, #28]	; (8024bf0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 8024bd4:	2156      	movs	r1, #86	; 0x56
 8024bd6:	4a03      	ldr	r2, [pc, #12]	; (8024be4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8024bd8:	e70e      	b.n	80249f8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x60>
 8024bda:	bf00      	nop
 8024bdc:	0802b418 	.word	0x0802b418
 8024be0:	0802b362 	.word	0x0802b362
 8024be4:	0802b420 	.word	0x0802b420
 8024be8:	0802b3be 	.word	0x0802b3be
 8024bec:	2000c5b4 	.word	0x2000c5b4
 8024bf0:	0802b3f2 	.word	0x0802b3f2

08024bf4 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 8024bf4:	6812      	ldr	r2, [r2, #0]
 8024bf6:	2a00      	cmp	r2, #0
 8024bf8:	db0b      	blt.n	8024c12 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 8024bfa:	9800      	ldr	r0, [sp, #0]
 8024bfc:	6800      	ldr	r0, [r0, #0]
 8024bfe:	4290      	cmp	r0, r2
 8024c00:	bfd4      	ite	le
 8024c02:	2002      	movle	r0, #2
 8024c04:	2000      	movgt	r0, #0
 8024c06:	680a      	ldr	r2, [r1, #0]
 8024c08:	2a00      	cmp	r2, #0
 8024c0a:	da04      	bge.n	8024c16 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 8024c0c:	f040 0004 	orr.w	r0, r0, #4
 8024c10:	4770      	bx	lr
 8024c12:	2001      	movs	r0, #1
 8024c14:	e7f7      	b.n	8024c06 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 8024c16:	681b      	ldr	r3, [r3, #0]
 8024c18:	4293      	cmp	r3, r2
 8024c1a:	bfd8      	it	le
 8024c1c:	f040 0008 	orrle.w	r0, r0, #8
 8024c20:	4770      	bx	lr
	...

08024c24 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8024c24:	4b07      	ldr	r3, [pc, #28]	; (8024c44 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 8024c26:	b510      	push	{r4, lr}
 8024c28:	781b      	ldrb	r3, [r3, #0]
 8024c2a:	2b01      	cmp	r3, #1
 8024c2c:	d108      	bne.n	8024c40 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 8024c2e:	6843      	ldr	r3, [r0, #4]
 8024c30:	6814      	ldr	r4, [r2, #0]
 8024c32:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8024c36:	680b      	ldr	r3, [r1, #0]
 8024c38:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8024c3c:	6013      	str	r3, [r2, #0]
 8024c3e:	600c      	str	r4, [r1, #0]
 8024c40:	bd10      	pop	{r4, pc}
 8024c42:	bf00      	nop
 8024c44:	2000c5ac 	.word	0x2000c5ac

08024c48 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8024c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024c4a:	b085      	sub	sp, #20
 8024c4c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8024c50:	4604      	mov	r4, r0
 8024c52:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8024c56:	b33b      	cbz	r3, 8024ca8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 8024c58:	aa02      	add	r2, sp, #8
 8024c5a:	a903      	add	r1, sp, #12
 8024c5c:	f7ff ffe2 	bl	8024c24 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8024c60:	68a3      	ldr	r3, [r4, #8]
 8024c62:	9e03      	ldr	r6, [sp, #12]
 8024c64:	aa02      	add	r2, sp, #8
 8024c66:	9f02      	ldr	r7, [sp, #8]
 8024c68:	a903      	add	r1, sp, #12
 8024c6a:	1af6      	subs	r6, r6, r3
 8024c6c:	68e3      	ldr	r3, [r4, #12]
 8024c6e:	4620      	mov	r0, r4
 8024c70:	1aff      	subs	r7, r7, r3
 8024c72:	f104 0314 	add.w	r3, r4, #20
 8024c76:	9603      	str	r6, [sp, #12]
 8024c78:	9300      	str	r3, [sp, #0]
 8024c7a:	f104 0310 	add.w	r3, r4, #16
 8024c7e:	9702      	str	r7, [sp, #8]
 8024c80:	f7ff ffb8 	bl	8024bf4 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8024c84:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 8024c88:	4605      	mov	r5, r0
 8024c8a:	b97b      	cbnz	r3, 8024cac <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 8024c8c:	463a      	mov	r2, r7
 8024c8e:	4631      	mov	r1, r6
 8024c90:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8024c94:	f7ff fe7a 	bl	802498c <_ZN8touchgfx10Rasterizer6lineToEii>
 8024c98:	9b03      	ldr	r3, [sp, #12]
 8024c9a:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 8024c9e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 8024ca2:	9b02      	ldr	r3, [sp, #8]
 8024ca4:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8024ca8:	b005      	add	sp, #20
 8024caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024cac:	b110      	cbz	r0, 8024cb4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 8024cae:	ea13 0200 	ands.w	r2, r3, r0
 8024cb2:	d11c      	bne.n	8024cee <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8024cb4:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
 8024cb8:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 8024cbc:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
 8024cc0:	b188      	cbz	r0, 8024ce6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 8024cc2:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 8024cc6:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8024cca:	b913      	cbnz	r3, 8024cd2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 8024ccc:	4630      	mov	r0, r6
 8024cce:	f001 f806 	bl	8025cde <_ZN8touchgfx7Outline6moveToEii>
 8024cd2:	2300      	movs	r3, #0
 8024cd4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8024cd8:	2301      	movs	r3, #1
 8024cda:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8024cde:	4630      	mov	r0, r6
 8024ce0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8024ce4:	e7d6      	b.n	8024c94 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 8024ce6:	4630      	mov	r0, r6
 8024ce8:	f7ff fe50 	bl	802498c <_ZN8touchgfx10Rasterizer6lineToEii>
 8024cec:	e7f7      	b.n	8024cde <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 8024cee:	4615      	mov	r5, r2
 8024cf0:	e7d2      	b.n	8024c98 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

08024cf2 <_ZN8touchgfx6Canvas5closeEv>:
 8024cf2:	b538      	push	{r3, r4, r5, lr}
 8024cf4:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8024cf8:	4604      	mov	r4, r0
 8024cfa:	b993      	cbnz	r3, 8024d22 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8024cfc:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 8024d00:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 8024d04:	4213      	tst	r3, r2
 8024d06:	d10c      	bne.n	8024d22 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8024d08:	f100 052c 	add.w	r5, r0, #44	; 0x2c
 8024d0c:	b123      	cbz	r3, 8024d18 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8024d0e:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
 8024d12:	4628      	mov	r0, r5
 8024d14:	f7ff fe3a 	bl	802498c <_ZN8touchgfx10Rasterizer6lineToEii>
 8024d18:	4628      	mov	r0, r5
 8024d1a:	e9d4 122c 	ldrd	r1, r2, [r4, #176]	; 0xb0
 8024d1e:	f7ff fe35 	bl	802498c <_ZN8touchgfx10Rasterizer6lineToEii>
 8024d22:	2300      	movs	r3, #0
 8024d24:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8024d28:	bd38      	pop	{r3, r4, r5, pc}

08024d2a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8024d2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024d2c:	b085      	sub	sp, #20
 8024d2e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8024d32:	4604      	mov	r4, r0
 8024d34:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8024d38:	b353      	cbz	r3, 8024d90 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 8024d3a:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8024d3e:	b90b      	cbnz	r3, 8024d44 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 8024d40:	f7ff ffd7 	bl	8024cf2 <_ZN8touchgfx6Canvas5closeEv>
 8024d44:	aa02      	add	r2, sp, #8
 8024d46:	a903      	add	r1, sp, #12
 8024d48:	4620      	mov	r0, r4
 8024d4a:	f7ff ff6b 	bl	8024c24 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8024d4e:	68a3      	ldr	r3, [r4, #8]
 8024d50:	9d03      	ldr	r5, [sp, #12]
 8024d52:	aa02      	add	r2, sp, #8
 8024d54:	9e02      	ldr	r6, [sp, #8]
 8024d56:	a903      	add	r1, sp, #12
 8024d58:	1aed      	subs	r5, r5, r3
 8024d5a:	68e3      	ldr	r3, [r4, #12]
 8024d5c:	4620      	mov	r0, r4
 8024d5e:	1af6      	subs	r6, r6, r3
 8024d60:	f104 0314 	add.w	r3, r4, #20
 8024d64:	9503      	str	r5, [sp, #12]
 8024d66:	9300      	str	r3, [sp, #0]
 8024d68:	f104 0310 	add.w	r3, r4, #16
 8024d6c:	9602      	str	r6, [sp, #8]
 8024d6e:	f7ff ff41 	bl	8024bf4 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8024d72:	4607      	mov	r7, r0
 8024d74:	b170      	cbz	r0, 8024d94 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 8024d76:	2301      	movs	r3, #1
 8024d78:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8024d7c:	9a03      	ldr	r2, [sp, #12]
 8024d7e:	9b02      	ldr	r3, [sp, #8]
 8024d80:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 8024d84:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 8024d88:	f884 70ac 	strb.w	r7, [r4, #172]	; 0xac
 8024d8c:	e9c4 2329 	strd	r2, r3, [r4, #164]	; 0xa4
 8024d90:	b005      	add	sp, #20
 8024d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024d94:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8024d98:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
 8024d9c:	b92b      	cbnz	r3, 8024daa <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 8024d9e:	4632      	mov	r2, r6
 8024da0:	4629      	mov	r1, r5
 8024da2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8024da6:	f000 ff9a 	bl	8025cde <_ZN8touchgfx7Outline6moveToEii>
 8024daa:	2300      	movs	r3, #0
 8024dac:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8024db0:	2301      	movs	r3, #1
 8024db2:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8024db6:	e7e1      	b.n	8024d7c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

08024db8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 8024db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024dbc:	4604      	mov	r4, r0
 8024dbe:	b087      	sub	sp, #28
 8024dc0:	9105      	str	r1, [sp, #20]
 8024dc2:	f001 f8d0 	bl	8025f66 <_ZN8touchgfx7Outline8getCellsEv>
 8024dc6:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8024dca:	4605      	mov	r5, r0
 8024dcc:	f1b9 0f00 	cmp.w	r9, #0
 8024dd0:	d103      	bne.n	8024dda <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 8024dd2:	2001      	movs	r0, #1
 8024dd4:	b007      	add	sp, #28
 8024dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024dda:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8024dde:	2e00      	cmp	r6, #0
 8024de0:	d139      	bne.n	8024e56 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 8024de2:	f104 0848 	add.w	r8, r4, #72	; 0x48
 8024de6:	f105 0708 	add.w	r7, r5, #8
 8024dea:	4640      	mov	r0, r8
 8024dec:	f001 f8fd 	bl	8025fea <_ZN8touchgfx8Scanline5resetEv>
 8024df0:	f109 33ff 	add.w	r3, r9, #4294967295
 8024df4:	9303      	str	r3, [sp, #12]
 8024df6:	f9b5 b000 	ldrsh.w	fp, [r5]
 8024dfa:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 8024dfe:	46da      	mov	sl, fp
 8024e00:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8024e04:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 8024e08:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8024e0c:	9b03      	ldr	r3, [sp, #12]
 8024e0e:	4416      	add	r6, r2
 8024e10:	9504      	str	r5, [sp, #16]
 8024e12:	463d      	mov	r5, r7
 8024e14:	3b01      	subs	r3, #1
 8024e16:	9303      	str	r3, [sp, #12]
 8024e18:	3301      	adds	r3, #1
 8024e1a:	d01e      	beq.n	8024e5a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 8024e1c:	3708      	adds	r7, #8
 8024e1e:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 8024e22:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 8024e26:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 8024e2a:	4290      	cmp	r0, r2
 8024e2c:	d11e      	bne.n	8024e6c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 8024e2e:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 8024e32:	4411      	add	r1, r2
 8024e34:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 8024e38:	e7e8      	b.n	8024e0c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 8024e3a:	1c91      	adds	r1, r2, #2
 8024e3c:	f04f 0301 	mov.w	r3, #1
 8024e40:	65e1      	str	r1, [r4, #92]	; 0x5c
 8024e42:	8053      	strh	r3, [r2, #2]
 8024e44:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8024e46:	1c91      	adds	r1, r2, #2
 8024e48:	65a1      	str	r1, [r4, #88]	; 0x58
 8024e4a:	f8a2 b002 	strh.w	fp, [r2, #2]
 8024e4e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8024e50:	3201      	adds	r2, #1
 8024e52:	6562      	str	r2, [r4, #84]	; 0x54
 8024e54:	e03a      	b.n	8024ecc <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 8024e56:	2000      	movs	r0, #0
 8024e58:	e7bc      	b.n	8024dd4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 8024e5a:	b951      	cbnz	r1, 8024e72 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 8024e5c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8024e5e:	2b00      	cmp	r3, #0
 8024e60:	d0b7      	beq.n	8024dd2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8024e62:	4641      	mov	r1, r8
 8024e64:	9805      	ldr	r0, [sp, #20]
 8024e66:	f7ff fd5b 	bl	8024920 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8024e6a:	e7b2      	b.n	8024dd2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8024e6c:	2900      	cmp	r1, #0
 8024e6e:	d035      	beq.n	8024edc <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 8024e70:	9504      	str	r5, [sp, #16]
 8024e72:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 8024e76:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8024e7a:	f7ff fd3d 	bl	80248f8 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 8024e7e:	4605      	mov	r5, r0
 8024e80:	b330      	cbz	r0, 8024ed0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8024e82:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8024e84:	b182      	cbz	r2, 8024ea8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8024e86:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8024e88:	454a      	cmp	r2, r9
 8024e8a:	d00d      	beq.n	8024ea8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8024e8c:	4641      	mov	r1, r8
 8024e8e:	9805      	ldr	r0, [sp, #20]
 8024e90:	f7ff fd46 	bl	8024920 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8024e94:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8024e98:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8024e9a:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8024e9e:	65e2      	str	r2, [r4, #92]	; 0x5c
 8024ea0:	2300      	movs	r3, #0
 8024ea2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8024ea4:	6563      	str	r3, [r4, #84]	; 0x54
 8024ea6:	65a2      	str	r2, [r4, #88]	; 0x58
 8024ea8:	f1bb 0f00 	cmp.w	fp, #0
 8024eac:	db10      	blt.n	8024ed0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8024eae:	f7f4 f993 	bl	80191d8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8024eb2:	4583      	cmp	fp, r0
 8024eb4:	d20c      	bcs.n	8024ed0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8024eb6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8024eb8:	f802 500b 	strb.w	r5, [r2, fp]
 8024ebc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8024ebe:	3201      	adds	r2, #1
 8024ec0:	455a      	cmp	r2, fp
 8024ec2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8024ec4:	d1b9      	bne.n	8024e3a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 8024ec6:	8811      	ldrh	r1, [r2, #0]
 8024ec8:	3101      	adds	r1, #1
 8024eca:	8011      	strh	r1, [r2, #0]
 8024ecc:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 8024ed0:	9b03      	ldr	r3, [sp, #12]
 8024ed2:	3301      	adds	r3, #1
 8024ed4:	d0c2      	beq.n	8024e5c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 8024ed6:	f10b 0a01 	add.w	sl, fp, #1
 8024eda:	9d04      	ldr	r5, [sp, #16]
 8024edc:	f9b5 3000 	ldrsh.w	r3, [r5]
 8024ee0:	4553      	cmp	r3, sl
 8024ee2:	dd88      	ble.n	8024df6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8024ee4:	01b1      	lsls	r1, r6, #6
 8024ee6:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8024eea:	f7ff fd05 	bl	80248f8 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 8024eee:	4683      	mov	fp, r0
 8024ef0:	2800      	cmp	r0, #0
 8024ef2:	d080      	beq.n	8024df6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8024ef4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8024ef6:	b183      	cbz	r3, 8024f1a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8024ef8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8024efa:	454b      	cmp	r3, r9
 8024efc:	d00d      	beq.n	8024f1a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8024efe:	4641      	mov	r1, r8
 8024f00:	9805      	ldr	r0, [sp, #20]
 8024f02:	f7ff fd0d 	bl	8024920 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8024f06:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8024f0a:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8024f0e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8024f10:	65e3      	str	r3, [r4, #92]	; 0x5c
 8024f12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8024f14:	65a3      	str	r3, [r4, #88]	; 0x58
 8024f16:	2300      	movs	r3, #0
 8024f18:	6563      	str	r3, [r4, #84]	; 0x54
 8024f1a:	f9b5 3000 	ldrsh.w	r3, [r5]
 8024f1e:	464a      	mov	r2, r9
 8024f20:	f8cd b000 	str.w	fp, [sp]
 8024f24:	4651      	mov	r1, sl
 8024f26:	eba3 030a 	sub.w	r3, r3, sl
 8024f2a:	4640      	mov	r0, r8
 8024f2c:	f001 f884 	bl	8026038 <_ZN8touchgfx8Scanline7addSpanEiijj>
 8024f30:	e761      	b.n	8024df6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

08024f32 <_ZN8touchgfx6Canvas6renderEv>:
 8024f32:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8024f34:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8024f38:	4604      	mov	r4, r0
 8024f3a:	b913      	cbnz	r3, 8024f42 <_ZN8touchgfx6Canvas6renderEv+0x10>
 8024f3c:	2001      	movs	r0, #1
 8024f3e:	b003      	add	sp, #12
 8024f40:	bd30      	pop	{r4, r5, pc}
 8024f42:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8024f46:	2b00      	cmp	r3, #0
 8024f48:	d131      	bne.n	8024fae <_ZN8touchgfx6Canvas6renderEv+0x7c>
 8024f4a:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
 8024f4e:	2b00      	cmp	r3, #0
 8024f50:	d0f4      	beq.n	8024f3c <_ZN8touchgfx6Canvas6renderEv+0xa>
 8024f52:	6840      	ldr	r0, [r0, #4]
 8024f54:	6803      	ldr	r3, [r0, #0]
 8024f56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8024f58:	4798      	blx	r3
 8024f5a:	2800      	cmp	r0, #0
 8024f5c:	d0ee      	beq.n	8024f3c <_ZN8touchgfx6Canvas6renderEv+0xa>
 8024f5e:	4620      	mov	r0, r4
 8024f60:	f7ff fec7 	bl	8024cf2 <_ZN8touchgfx6Canvas5closeEv>
 8024f64:	6860      	ldr	r0, [r4, #4]
 8024f66:	6803      	ldr	r3, [r0, #0]
 8024f68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8024f6a:	4798      	blx	r3
 8024f6c:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 8024f70:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 8024f74:	f7f3 f8c9 	bl	801810a <_ZN8touchgfx15AbstractPainter9setOffsetEtt>
 8024f78:	6860      	ldr	r0, [r4, #4]
 8024f7a:	6803      	ldr	r3, [r0, #0]
 8024f7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8024f7e:	4798      	blx	r3
 8024f80:	4605      	mov	r5, r0
 8024f82:	6860      	ldr	r0, [r4, #4]
 8024f84:	6803      	ldr	r3, [r0, #0]
 8024f86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8024f88:	4798      	blx	r3
 8024f8a:	4601      	mov	r1, r0
 8024f8c:	4628      	mov	r0, r5
 8024f8e:	f7f3 f8bf 	bl	8018110 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>
 8024f92:	6860      	ldr	r0, [r4, #4]
 8024f94:	6803      	ldr	r3, [r0, #0]
 8024f96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8024f98:	4798      	blx	r3
 8024f9a:	f104 0318 	add.w	r3, r4, #24
 8024f9e:	4669      	mov	r1, sp
 8024fa0:	e9cd 3000 	strd	r3, r0, [sp]
 8024fa4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8024fa8:	f7ff ff06 	bl	8024db8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 8024fac:	e7c7      	b.n	8024f3e <_ZN8touchgfx6Canvas6renderEv+0xc>
 8024fae:	2000      	movs	r0, #0
 8024fb0:	e7c5      	b.n	8024f3e <_ZN8touchgfx6Canvas6renderEv+0xc>
	...

08024fb4 <_ZN8touchgfx6CanvasD1Ev>:
 8024fb4:	b538      	push	{r3, r4, r5, lr}
 8024fb6:	4605      	mov	r5, r0
 8024fb8:	4b08      	ldr	r3, [pc, #32]	; (8024fdc <_ZN8touchgfx6CanvasD1Ev+0x28>)
 8024fba:	4604      	mov	r4, r0
 8024fbc:	f845 3b2c 	str.w	r3, [r5], #44
 8024fc0:	4b07      	ldr	r3, [pc, #28]	; (8024fe0 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 8024fc2:	6818      	ldr	r0, [r3, #0]
 8024fc4:	6803      	ldr	r3, [r0, #0]
 8024fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024fc8:	4798      	blx	r3
 8024fca:	4628      	mov	r0, r5
 8024fcc:	f000 f814 	bl	8024ff8 <_ZN8touchgfx7OutlineD1Ev>
 8024fd0:	f104 0018 	add.w	r0, r4, #24
 8024fd4:	f001 f870 	bl	80260b8 <_ZN8touchgfx15RenderingBufferD1Ev>
 8024fd8:	4620      	mov	r0, r4
 8024fda:	bd38      	pop	{r3, r4, r5, pc}
 8024fdc:	0802b418 	.word	0x0802b418
 8024fe0:	2000c5b4 	.word	0x2000c5b4

08024fe4 <_ZN8touchgfx6CanvasD0Ev>:
 8024fe4:	b510      	push	{r4, lr}
 8024fe6:	4604      	mov	r4, r0
 8024fe8:	f7ff ffe4 	bl	8024fb4 <_ZN8touchgfx6CanvasD1Ev>
 8024fec:	21b8      	movs	r1, #184	; 0xb8
 8024fee:	4620      	mov	r0, r4
 8024ff0:	f001 f870 	bl	80260d4 <_ZdlPvj>
 8024ff4:	4620      	mov	r0, r4
 8024ff6:	bd10      	pop	{r4, pc}

08024ff8 <_ZN8touchgfx7OutlineD1Ev>:
 8024ff8:	4770      	bx	lr

08024ffa <_ZN8touchgfx7OutlineD0Ev>:
 8024ffa:	b510      	push	{r4, lr}
 8024ffc:	4604      	mov	r4, r0
 8024ffe:	2148      	movs	r1, #72	; 0x48
 8025000:	f001 f868 	bl	80260d4 <_ZdlPvj>
 8025004:	4620      	mov	r0, r4
 8025006:	bd10      	pop	{r4, pc}

08025008 <_ZN8touchgfx7Outline5resetEv>:
 8025008:	b510      	push	{r4, lr}
 802500a:	4604      	mov	r4, r0
 802500c:	f7f4 f8fc 	bl	8019208 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8025010:	60e0      	str	r0, [r4, #12]
 8025012:	f7f4 f8ff 	bl	8019214 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8025016:	68e3      	ldr	r3, [r4, #12]
 8025018:	2200      	movs	r2, #0
 802501a:	08c0      	lsrs	r0, r0, #3
 802501c:	6123      	str	r3, [r4, #16]
 802501e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8025022:	6060      	str	r0, [r4, #4]
 8025024:	82a3      	strh	r3, [r4, #20]
 8025026:	82e3      	strh	r3, [r4, #22]
 8025028:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802502a:	60a2      	str	r2, [r4, #8]
 802502c:	f023 0301 	bic.w	r3, r3, #1
 8025030:	8322      	strh	r2, [r4, #24]
 8025032:	8362      	strh	r2, [r4, #26]
 8025034:	f043 0302 	orr.w	r3, r3, #2
 8025038:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802503c:	63e3      	str	r3, [r4, #60]	; 0x3c
 802503e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8025042:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8025046:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802504a:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 802504e:	bd10      	pop	{r4, pc}

08025050 <_ZN8touchgfx7OutlineC1Ev>:
 8025050:	4b0f      	ldr	r3, [pc, #60]	; (8025090 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 8025052:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8025056:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 802505a:	b510      	push	{r4, lr}
 802505c:	6003      	str	r3, [r0, #0]
 802505e:	2300      	movs	r3, #0
 8025060:	4604      	mov	r4, r0
 8025062:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8025066:	e9c0 3301 	strd	r3, r3, [r0, #4]
 802506a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802506e:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8025072:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8025076:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 802507a:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 802507e:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 8025082:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 8025086:	f7ff ffbf 	bl	8025008 <_ZN8touchgfx7Outline5resetEv>
 802508a:	4620      	mov	r0, r4
 802508c:	bd10      	pop	{r4, pc}
 802508e:	bf00      	nop
 8025090:	0802b478 	.word	0x0802b478

08025094 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8025094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025098:	b093      	sub	sp, #76	; 0x4c
 802509a:	4604      	mov	r4, r0
 802509c:	1156      	asrs	r6, r2, #5
 802509e:	f002 0e1f 	and.w	lr, r2, #31
 80250a2:	981c      	ldr	r0, [sp, #112]	; 0x70
 80250a4:	9305      	str	r3, [sp, #20]
 80250a6:	1143      	asrs	r3, r0, #5
 80250a8:	1145      	asrs	r5, r0, #5
 80250aa:	930c      	str	r3, [sp, #48]	; 0x30
 80250ac:	f000 031f 	and.w	r3, r0, #31
 80250b0:	9303      	str	r3, [sp, #12]
 80250b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80250b4:	42b3      	cmp	r3, r6
 80250b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80250b8:	bfc8      	it	gt
 80250ba:	6326      	strgt	r6, [r4, #48]	; 0x30
 80250bc:	42b3      	cmp	r3, r6
 80250be:	bfdc      	itt	le
 80250c0:	1c73      	addle	r3, r6, #1
 80250c2:	63a3      	strle	r3, [r4, #56]	; 0x38
 80250c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80250c6:	42ab      	cmp	r3, r5
 80250c8:	bfc8      	it	gt
 80250ca:	462b      	movgt	r3, r5
 80250cc:	ea4f 1560 	mov.w	r5, r0, asr #5
 80250d0:	bfc8      	it	gt
 80250d2:	6323      	strgt	r3, [r4, #48]	; 0x30
 80250d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80250d6:	42ab      	cmp	r3, r5
 80250d8:	bfd8      	it	le
 80250da:	462b      	movle	r3, r5
 80250dc:	ea4f 1561 	mov.w	r5, r1, asr #5
 80250e0:	bfdc      	itt	le
 80250e2:	3301      	addle	r3, #1
 80250e4:	63a3      	strle	r3, [r4, #56]	; 0x38
 80250e6:	9b05      	ldr	r3, [sp, #20]
 80250e8:	eba3 0a01 	sub.w	sl, r3, r1
 80250ec:	1143      	asrs	r3, r0, #5
 80250ee:	429e      	cmp	r6, r3
 80250f0:	f040 8119 	bne.w	8025326 <_ZN8touchgfx7Outline10renderLineEiiii+0x292>
 80250f4:	9b05      	ldr	r3, [sp, #20]
 80250f6:	ea4f 1c63 	mov.w	ip, r3, asr #5
 80250fa:	9b03      	ldr	r3, [sp, #12]
 80250fc:	459e      	cmp	lr, r3
 80250fe:	d12c      	bne.n	802515a <_ZN8touchgfx7Outline10renderLineEiiii+0xc6>
 8025100:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8025104:	eb0c 4106 	add.w	r1, ip, r6, lsl #16
 8025108:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 802510c:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8025110:	4291      	cmp	r1, r2
 8025112:	d037      	beq.n	8025184 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8025114:	8b61      	ldrh	r1, [r4, #26]
 8025116:	8b22      	ldrh	r2, [r4, #24]
 8025118:	430a      	orrs	r2, r1
 802511a:	d00b      	beq.n	8025134 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 802511c:	2b00      	cmp	r3, #0
 802511e:	db09      	blt.n	8025134 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8025120:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8025122:	429a      	cmp	r2, r3
 8025124:	dd06      	ble.n	8025134 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8025126:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 802512a:	429a      	cmp	r2, r3
 802512c:	d308      	bcc.n	8025140 <_ZN8touchgfx7Outline10renderLineEiiii+0xac>
 802512e:	2301      	movs	r3, #1
 8025130:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025134:	f8a4 c014 	strh.w	ip, [r4, #20]
 8025138:	82e6      	strh	r6, [r4, #22]
 802513a:	2300      	movs	r3, #0
 802513c:	8323      	strh	r3, [r4, #24]
 802513e:	e0c6      	b.n	80252ce <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8025140:	f104 0314 	add.w	r3, r4, #20
 8025144:	6922      	ldr	r2, [r4, #16]
 8025146:	cb03      	ldmia	r3!, {r0, r1}
 8025148:	6010      	str	r0, [r2, #0]
 802514a:	6051      	str	r1, [r2, #4]
 802514c:	6923      	ldr	r3, [r4, #16]
 802514e:	3308      	adds	r3, #8
 8025150:	6123      	str	r3, [r4, #16]
 8025152:	68a3      	ldr	r3, [r4, #8]
 8025154:	3301      	adds	r3, #1
 8025156:	60a3      	str	r3, [r4, #8]
 8025158:	e7ec      	b.n	8025134 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 802515a:	9b05      	ldr	r3, [sp, #20]
 802515c:	45ac      	cmp	ip, r5
 802515e:	f001 011f 	and.w	r1, r1, #31
 8025162:	8b20      	ldrh	r0, [r4, #24]
 8025164:	f003 031f 	and.w	r3, r3, #31
 8025168:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 802516c:	9304      	str	r3, [sp, #16]
 802516e:	9b03      	ldr	r3, [sp, #12]
 8025170:	eba3 020e 	sub.w	r2, r3, lr
 8025174:	d109      	bne.n	802518a <_ZN8touchgfx7Outline10renderLineEiiii+0xf6>
 8025176:	9b04      	ldr	r3, [sp, #16]
 8025178:	4410      	add	r0, r2
 802517a:	4419      	add	r1, r3
 802517c:	8320      	strh	r0, [r4, #24]
 802517e:	fb02 8201 	mla	r2, r2, r1, r8
 8025182:	8362      	strh	r2, [r4, #26]
 8025184:	b013      	add	sp, #76	; 0x4c
 8025186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802518a:	f1ba 0f00 	cmp.w	sl, #0
 802518e:	f2c0 80a0 	blt.w	80252d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 8025192:	f1c1 0320 	rsb	r3, r1, #32
 8025196:	f04f 0b20 	mov.w	fp, #32
 802519a:	435a      	muls	r2, r3
 802519c:	2301      	movs	r3, #1
 802519e:	9302      	str	r3, [sp, #8]
 80251a0:	4459      	add	r1, fp
 80251a2:	fb92 f7fa 	sdiv	r7, r2, sl
 80251a6:	fb0a 2217 	mls	r2, sl, r7, r2
 80251aa:	2a00      	cmp	r2, #0
 80251ac:	bfbc      	itt	lt
 80251ae:	f107 37ff 	addlt.w	r7, r7, #4294967295
 80251b2:	4452      	addlt	r2, sl
 80251b4:	fb07 8101 	mla	r1, r7, r1, r8
 80251b8:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 80251bc:	4438      	add	r0, r7
 80251be:	b20b      	sxth	r3, r1
 80251c0:	9902      	ldr	r1, [sp, #8]
 80251c2:	b200      	sxth	r0, r0
 80251c4:	9301      	str	r3, [sp, #4]
 80251c6:	8363      	strh	r3, [r4, #26]
 80251c8:	186b      	adds	r3, r5, r1
 80251ca:	0435      	lsls	r5, r6, #16
 80251cc:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 80251d0:	8320      	strh	r0, [r4, #24]
 80251d2:	eb03 0905 	add.w	r9, r3, r5
 80251d6:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 80251da:	9300      	str	r3, [sp, #0]
 80251dc:	45c1      	cmp	r9, r8
 80251de:	9505      	str	r5, [sp, #20]
 80251e0:	d014      	beq.n	802520c <_ZN8touchgfx7Outline10renderLineEiiii+0x178>
 80251e2:	9b01      	ldr	r3, [sp, #4]
 80251e4:	4303      	orrs	r3, r0
 80251e6:	d00b      	beq.n	8025200 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80251e8:	2900      	cmp	r1, #0
 80251ea:	db09      	blt.n	8025200 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80251ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80251ee:	428b      	cmp	r3, r1
 80251f0:	dd06      	ble.n	8025200 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80251f2:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80251f6:	4299      	cmp	r1, r3
 80251f8:	d374      	bcc.n	80252e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 80251fa:	2301      	movs	r3, #1
 80251fc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025200:	9b00      	ldr	r3, [sp, #0]
 8025202:	82e6      	strh	r6, [r4, #22]
 8025204:	82a3      	strh	r3, [r4, #20]
 8025206:	2300      	movs	r3, #0
 8025208:	8323      	strh	r3, [r4, #24]
 802520a:	8363      	strh	r3, [r4, #26]
 802520c:	9900      	ldr	r1, [sp, #0]
 802520e:	eb0e 0307 	add.w	r3, lr, r7
 8025212:	458c      	cmp	ip, r1
 8025214:	d04e      	beq.n	80252b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 8025216:	9903      	ldr	r1, [sp, #12]
 8025218:	eba2 020a 	sub.w	r2, r2, sl
 802521c:	1ac9      	subs	r1, r1, r3
 802521e:	9201      	str	r2, [sp, #4]
 8025220:	440f      	add	r7, r1
 8025222:	017f      	lsls	r7, r7, #5
 8025224:	fb97 fefa 	sdiv	lr, r7, sl
 8025228:	fb0a 771e 	mls	r7, sl, lr, r7
 802522c:	2f00      	cmp	r7, #0
 802522e:	bfbc      	itt	lt
 8025230:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8025234:	4457      	addlt	r7, sl
 8025236:	f10e 0101 	add.w	r1, lr, #1
 802523a:	9106      	str	r1, [sp, #24]
 802523c:	9a01      	ldr	r2, [sp, #4]
 802523e:	8b20      	ldrh	r0, [r4, #24]
 8025240:	19d2      	adds	r2, r2, r7
 8025242:	8b61      	ldrh	r1, [r4, #26]
 8025244:	9d02      	ldr	r5, [sp, #8]
 8025246:	9201      	str	r2, [sp, #4]
 8025248:	bf5b      	ittet	pl
 802524a:	eba2 020a 	subpl.w	r2, r2, sl
 802524e:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 8025252:	46f0      	movmi	r8, lr
 8025254:	9201      	strpl	r2, [sp, #4]
 8025256:	9a00      	ldr	r2, [sp, #0]
 8025258:	4440      	add	r0, r8
 802525a:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 802525e:	4443      	add	r3, r8
 8025260:	442a      	add	r2, r5
 8025262:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8025266:	9d05      	ldr	r5, [sp, #20]
 8025268:	b200      	sxth	r0, r0
 802526a:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 802526e:	b209      	sxth	r1, r1
 8025270:	4415      	add	r5, r2
 8025272:	8320      	strh	r0, [r4, #24]
 8025274:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8025278:	8361      	strh	r1, [r4, #26]
 802527a:	9200      	str	r2, [sp, #0]
 802527c:	454d      	cmp	r5, r9
 802527e:	d016      	beq.n	80252ae <_ZN8touchgfx7Outline10renderLineEiiii+0x21a>
 8025280:	4301      	orrs	r1, r0
 8025282:	d00d      	beq.n	80252a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8025284:	f1b8 0f00 	cmp.w	r8, #0
 8025288:	db0a      	blt.n	80252a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 802528a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802528c:	4541      	cmp	r1, r8
 802528e:	dd07      	ble.n	80252a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8025290:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025294:	4288      	cmp	r0, r1
 8025296:	d335      	bcc.n	8025304 <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 8025298:	f04f 0101 	mov.w	r1, #1
 802529c:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 80252a0:	9900      	ldr	r1, [sp, #0]
 80252a2:	82e6      	strh	r6, [r4, #22]
 80252a4:	82a1      	strh	r1, [r4, #20]
 80252a6:	f04f 0100 	mov.w	r1, #0
 80252aa:	8321      	strh	r1, [r4, #24]
 80252ac:	8361      	strh	r1, [r4, #26]
 80252ae:	9a00      	ldr	r2, [sp, #0]
 80252b0:	4594      	cmp	ip, r2
 80252b2:	d1c3      	bne.n	802523c <_ZN8touchgfx7Outline10renderLineEiiii+0x1a8>
 80252b4:	9a03      	ldr	r2, [sp, #12]
 80252b6:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 80252ba:	1ad3      	subs	r3, r2, r3
 80252bc:	8b22      	ldrh	r2, [r4, #24]
 80252be:	441a      	add	r2, r3
 80252c0:	8322      	strh	r2, [r4, #24]
 80252c2:	9a04      	ldr	r2, [sp, #16]
 80252c4:	3220      	adds	r2, #32
 80252c6:	eba2 020b 	sub.w	r2, r2, fp
 80252ca:	fb03 c302 	mla	r3, r3, r2, ip
 80252ce:	8363      	strh	r3, [r4, #26]
 80252d0:	e758      	b.n	8025184 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80252d2:	f04f 33ff 	mov.w	r3, #4294967295
 80252d6:	434a      	muls	r2, r1
 80252d8:	f1ca 0a00 	rsb	sl, sl, #0
 80252dc:	f04f 0b00 	mov.w	fp, #0
 80252e0:	9302      	str	r3, [sp, #8]
 80252e2:	e75d      	b.n	80251a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x10c>
 80252e4:	f104 0314 	add.w	r3, r4, #20
 80252e8:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80252ec:	cb03      	ldmia	r3!, {r0, r1}
 80252ee:	f8c8 0000 	str.w	r0, [r8]
 80252f2:	f8c8 1004 	str.w	r1, [r8, #4]
 80252f6:	6923      	ldr	r3, [r4, #16]
 80252f8:	3308      	adds	r3, #8
 80252fa:	6123      	str	r3, [r4, #16]
 80252fc:	68a3      	ldr	r3, [r4, #8]
 80252fe:	3301      	adds	r3, #1
 8025300:	60a3      	str	r3, [r4, #8]
 8025302:	e77d      	b.n	8025200 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8025304:	f104 0814 	add.w	r8, r4, #20
 8025308:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802530c:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8025310:	f8c9 0000 	str.w	r0, [r9]
 8025314:	f8c9 1004 	str.w	r1, [r9, #4]
 8025318:	6921      	ldr	r1, [r4, #16]
 802531a:	3108      	adds	r1, #8
 802531c:	6121      	str	r1, [r4, #16]
 802531e:	68a1      	ldr	r1, [r4, #8]
 8025320:	3101      	adds	r1, #1
 8025322:	60a1      	str	r1, [r4, #8]
 8025324:	e7bc      	b.n	80252a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8025326:	1a83      	subs	r3, r0, r2
 8025328:	9301      	str	r3, [sp, #4]
 802532a:	f1ba 0f00 	cmp.w	sl, #0
 802532e:	f040 8094 	bne.w	802545a <_ZN8touchgfx7Outline10renderLineEiiii+0x3c6>
 8025332:	9a01      	ldr	r2, [sp, #4]
 8025334:	0049      	lsls	r1, r1, #1
 8025336:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 802533a:	2a00      	cmp	r2, #0
 802533c:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 8025340:	8b62      	ldrh	r2, [r4, #26]
 8025342:	bfaa      	itet	ge
 8025344:	f04f 0a20 	movge.w	sl, #32
 8025348:	f04f 38ff 	movlt.w	r8, #4294967295
 802534c:	f04f 0801 	movge.w	r8, #1
 8025350:	8b21      	ldrh	r1, [r4, #24]
 8025352:	ebaa 0e0e 	sub.w	lr, sl, lr
 8025356:	4471      	add	r1, lr
 8025358:	fb0e 2e03 	mla	lr, lr, r3, r2
 802535c:	eb08 0206 	add.w	r2, r8, r6
 8025360:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8025364:	b209      	sxth	r1, r1
 8025366:	eb05 4702 	add.w	r7, r5, r2, lsl #16
 802536a:	eb06 4600 	add.w	r6, r6, r0, lsl #16
 802536e:	8321      	strh	r1, [r4, #24]
 8025370:	fa0f fe8e 	sxth.w	lr, lr
 8025374:	42b7      	cmp	r7, r6
 8025376:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802537a:	d013      	beq.n	80253a4 <_ZN8touchgfx7Outline10renderLineEiiii+0x310>
 802537c:	ea51 010e 	orrs.w	r1, r1, lr
 8025380:	d00b      	beq.n	802539a <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8025382:	2800      	cmp	r0, #0
 8025384:	db09      	blt.n	802539a <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8025386:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025388:	4281      	cmp	r1, r0
 802538a:	dd06      	ble.n	802539a <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 802538c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025390:	4288      	cmp	r0, r1
 8025392:	d339      	bcc.n	8025408 <_ZN8touchgfx7Outline10renderLineEiiii+0x374>
 8025394:	2101      	movs	r1, #1
 8025396:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802539a:	2100      	movs	r1, #0
 802539c:	82a5      	strh	r5, [r4, #20]
 802539e:	82e2      	strh	r2, [r4, #22]
 80253a0:	8321      	strh	r1, [r4, #24]
 80253a2:	8361      	strh	r1, [r4, #26]
 80253a4:	f1aa 0610 	sub.w	r6, sl, #16
 80253a8:	f04f 0e00 	mov.w	lr, #0
 80253ac:	f04f 0b01 	mov.w	fp, #1
 80253b0:	0076      	lsls	r6, r6, #1
 80253b2:	fb06 f703 	mul.w	r7, r6, r3
 80253b6:	b236      	sxth	r6, r6
 80253b8:	b23f      	sxth	r7, r7
 80253ba:	ea46 0107 	orr.w	r1, r6, r7
 80253be:	9100      	str	r1, [sp, #0]
 80253c0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80253c2:	428a      	cmp	r2, r1
 80253c4:	d03e      	beq.n	8025444 <_ZN8touchgfx7Outline10renderLineEiiii+0x3b0>
 80253c6:	4442      	add	r2, r8
 80253c8:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 80253cc:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 80253d0:	eb05 4c02 	add.w	ip, r5, r2, lsl #16
 80253d4:	8326      	strh	r6, [r4, #24]
 80253d6:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 80253da:	8367      	strh	r7, [r4, #26]
 80253dc:	4584      	cmp	ip, r0
 80253de:	d0ef      	beq.n	80253c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 80253e0:	9800      	ldr	r0, [sp, #0]
 80253e2:	b150      	cbz	r0, 80253fa <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 80253e4:	2900      	cmp	r1, #0
 80253e6:	db08      	blt.n	80253fa <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 80253e8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80253ea:	4288      	cmp	r0, r1
 80253ec:	dd05      	ble.n	80253fa <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 80253ee:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80253f2:	4288      	cmp	r0, r1
 80253f4:	d315      	bcc.n	8025422 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 80253f6:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 80253fa:	82a5      	strh	r5, [r4, #20]
 80253fc:	82e2      	strh	r2, [r4, #22]
 80253fe:	f8a4 e018 	strh.w	lr, [r4, #24]
 8025402:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8025406:	e7db      	b.n	80253c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8025408:	f104 0614 	add.w	r6, r4, #20
 802540c:	6927      	ldr	r7, [r4, #16]
 802540e:	ce03      	ldmia	r6!, {r0, r1}
 8025410:	6038      	str	r0, [r7, #0]
 8025412:	6079      	str	r1, [r7, #4]
 8025414:	6921      	ldr	r1, [r4, #16]
 8025416:	3108      	adds	r1, #8
 8025418:	6121      	str	r1, [r4, #16]
 802541a:	68a1      	ldr	r1, [r4, #8]
 802541c:	3101      	adds	r1, #1
 802541e:	60a1      	str	r1, [r4, #8]
 8025420:	e7bb      	b.n	802539a <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8025422:	f104 0c14 	add.w	ip, r4, #20
 8025426:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802542a:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 802542e:	f8c9 0000 	str.w	r0, [r9]
 8025432:	f8c9 1004 	str.w	r1, [r9, #4]
 8025436:	6921      	ldr	r1, [r4, #16]
 8025438:	3108      	adds	r1, #8
 802543a:	6121      	str	r1, [r4, #16]
 802543c:	68a1      	ldr	r1, [r4, #8]
 802543e:	3101      	adds	r1, #1
 8025440:	60a1      	str	r1, [r4, #8]
 8025442:	e7da      	b.n	80253fa <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8025444:	9a03      	ldr	r2, [sp, #12]
 8025446:	8b61      	ldrh	r1, [r4, #26]
 8025448:	f1a2 0c20 	sub.w	ip, r2, #32
 802544c:	8b22      	ldrh	r2, [r4, #24]
 802544e:	44d4      	add	ip, sl
 8025450:	4462      	add	r2, ip
 8025452:	fb0c 1303 	mla	r3, ip, r3, r1
 8025456:	8322      	strh	r2, [r4, #24]
 8025458:	e739      	b.n	80252ce <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 802545a:	9b01      	ldr	r3, [sp, #4]
 802545c:	2b00      	cmp	r3, #0
 802545e:	db3f      	blt.n	80254e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x44c>
 8025460:	2201      	movs	r2, #1
 8025462:	f1ce 0320 	rsb	r3, lr, #32
 8025466:	920b      	str	r2, [sp, #44]	; 0x2c
 8025468:	2220      	movs	r2, #32
 802546a:	fb0a f303 	mul.w	r3, sl, r3
 802546e:	9202      	str	r2, [sp, #8]
 8025470:	9a01      	ldr	r2, [sp, #4]
 8025472:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8025476:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 802547a:	fb93 f7f2 	sdiv	r7, r3, r2
 802547e:	fb02 3317 	mls	r3, r2, r7, r3
 8025482:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8025486:	2b00      	cmp	r3, #0
 8025488:	9308      	str	r3, [sp, #32]
 802548a:	bfbc      	itt	lt
 802548c:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8025490:	189b      	addlt	r3, r3, r2
 8025492:	eb07 0b01 	add.w	fp, r7, r1
 8025496:	bfb8      	it	lt
 8025498:	9308      	strlt	r3, [sp, #32]
 802549a:	ea4f 136b 	mov.w	r3, fp, asr #5
 802549e:	9304      	str	r3, [sp, #16]
 80254a0:	9b02      	ldr	r3, [sp, #8]
 80254a2:	4573      	cmp	r3, lr
 80254a4:	d133      	bne.n	802550e <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 80254a6:	9b04      	ldr	r3, [sp, #16]
 80254a8:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 80254ac:	454b      	cmp	r3, r9
 80254ae:	d045      	beq.n	802553c <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 80254b0:	8b62      	ldrh	r2, [r4, #26]
 80254b2:	8b23      	ldrh	r3, [r4, #24]
 80254b4:	4313      	orrs	r3, r2
 80254b6:	d00c      	beq.n	80254d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 80254b8:	f1b8 0f00 	cmp.w	r8, #0
 80254bc:	db09      	blt.n	80254d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 80254be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80254c0:	4543      	cmp	r3, r8
 80254c2:	dd06      	ble.n	80254d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 80254c4:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80254c8:	429a      	cmp	r2, r3
 80254ca:	d313      	bcc.n	80254f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x460>
 80254cc:	2301      	movs	r3, #1
 80254ce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80254d2:	9b04      	ldr	r3, [sp, #16]
 80254d4:	82e6      	strh	r6, [r4, #22]
 80254d6:	82a3      	strh	r3, [r4, #20]
 80254d8:	2300      	movs	r3, #0
 80254da:	8323      	strh	r3, [r4, #24]
 80254dc:	8363      	strh	r3, [r4, #26]
 80254de:	e02d      	b.n	802553c <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 80254e0:	9a01      	ldr	r2, [sp, #4]
 80254e2:	fb0a f30e 	mul.w	r3, sl, lr
 80254e6:	4252      	negs	r2, r2
 80254e8:	9201      	str	r2, [sp, #4]
 80254ea:	f04f 32ff 	mov.w	r2, #4294967295
 80254ee:	920b      	str	r2, [sp, #44]	; 0x2c
 80254f0:	2200      	movs	r2, #0
 80254f2:	e7bc      	b.n	802546e <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 80254f4:	f104 0314 	add.w	r3, r4, #20
 80254f8:	6922      	ldr	r2, [r4, #16]
 80254fa:	cb03      	ldmia	r3!, {r0, r1}
 80254fc:	6010      	str	r0, [r2, #0]
 80254fe:	6051      	str	r1, [r2, #4]
 8025500:	6923      	ldr	r3, [r4, #16]
 8025502:	3308      	adds	r3, #8
 8025504:	6123      	str	r3, [r4, #16]
 8025506:	68a3      	ldr	r3, [r4, #8]
 8025508:	3301      	adds	r3, #1
 802550a:	60a3      	str	r3, [r4, #8]
 802550c:	e7e1      	b.n	80254d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 802550e:	f00b 031f 	and.w	r3, fp, #31
 8025512:	f001 011f 	and.w	r1, r1, #31
 8025516:	8b20      	ldrh	r0, [r4, #24]
 8025518:	9309      	str	r3, [sp, #36]	; 0x24
 802551a:	9b02      	ldr	r3, [sp, #8]
 802551c:	eba3 020e 	sub.w	r2, r3, lr
 8025520:	8b63      	ldrh	r3, [r4, #26]
 8025522:	9300      	str	r3, [sp, #0]
 8025524:	9b04      	ldr	r3, [sp, #16]
 8025526:	42ab      	cmp	r3, r5
 8025528:	f040 80ef 	bne.w	802570a <_ZN8touchgfx7Outline10renderLineEiiii+0x676>
 802552c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802552e:	4410      	add	r0, r2
 8025530:	4419      	add	r1, r3
 8025532:	9b00      	ldr	r3, [sp, #0]
 8025534:	8320      	strh	r0, [r4, #24]
 8025536:	fb02 3101 	mla	r1, r2, r1, r3
 802553a:	8361      	strh	r1, [r4, #26]
 802553c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802553e:	9904      	ldr	r1, [sp, #16]
 8025540:	4433      	add	r3, r6
 8025542:	9300      	str	r3, [sp, #0]
 8025544:	9a00      	ldr	r2, [sp, #0]
 8025546:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802554a:	eb01 4002 	add.w	r0, r1, r2, lsl #16
 802554e:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8025552:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8025556:	4288      	cmp	r0, r1
 8025558:	d018      	beq.n	802558c <_ZN8touchgfx7Outline10renderLineEiiii+0x4f8>
 802555a:	8b60      	ldrh	r0, [r4, #26]
 802555c:	8b21      	ldrh	r1, [r4, #24]
 802555e:	ea50 0201 	orrs.w	r2, r0, r1
 8025562:	d00c      	beq.n	802557e <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8025564:	2b00      	cmp	r3, #0
 8025566:	db0a      	blt.n	802557e <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8025568:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802556a:	4299      	cmp	r1, r3
 802556c:	dd07      	ble.n	802557e <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 802556e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8025572:	4299      	cmp	r1, r3
 8025574:	f0c0 818b 	bcc.w	802588e <_ZN8touchgfx7Outline10renderLineEiiii+0x7fa>
 8025578:	2301      	movs	r3, #1
 802557a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802557e:	9b04      	ldr	r3, [sp, #16]
 8025580:	82a3      	strh	r3, [r4, #20]
 8025582:	9b00      	ldr	r3, [sp, #0]
 8025584:	82e3      	strh	r3, [r4, #22]
 8025586:	2300      	movs	r3, #0
 8025588:	8323      	strh	r3, [r4, #24]
 802558a:	8363      	strh	r3, [r4, #26]
 802558c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802558e:	9a00      	ldr	r2, [sp, #0]
 8025590:	4293      	cmp	r3, r2
 8025592:	f000 808d 	beq.w	80256b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x61c>
 8025596:	ea4f 134a 	mov.w	r3, sl, lsl #5
 802559a:	9901      	ldr	r1, [sp, #4]
 802559c:	9801      	ldr	r0, [sp, #4]
 802559e:	fb93 f1f1 	sdiv	r1, r3, r1
 80255a2:	fb00 3311 	mls	r3, r0, r1, r3
 80255a6:	9106      	str	r1, [sp, #24]
 80255a8:	2b00      	cmp	r3, #0
 80255aa:	9307      	str	r3, [sp, #28]
 80255ac:	da04      	bge.n	80255b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x524>
 80255ae:	1e4b      	subs	r3, r1, #1
 80255b0:	9306      	str	r3, [sp, #24]
 80255b2:	9b07      	ldr	r3, [sp, #28]
 80255b4:	4403      	add	r3, r0
 80255b6:	9307      	str	r3, [sp, #28]
 80255b8:	9b08      	ldr	r3, [sp, #32]
 80255ba:	f04f 0c00 	mov.w	ip, #0
 80255be:	9901      	ldr	r1, [sp, #4]
 80255c0:	1a5b      	subs	r3, r3, r1
 80255c2:	4659      	mov	r1, fp
 80255c4:	9308      	str	r3, [sp, #32]
 80255c6:	9b02      	ldr	r3, [sp, #8]
 80255c8:	f1c3 0320 	rsb	r3, r3, #32
 80255cc:	930a      	str	r3, [sp, #40]	; 0x28
 80255ce:	980a      	ldr	r0, [sp, #40]	; 0x28
 80255d0:	9b02      	ldr	r3, [sp, #8]
 80255d2:	1a1b      	subs	r3, r3, r0
 80255d4:	9309      	str	r3, [sp, #36]	; 0x24
 80255d6:	f9b4 e016 	ldrsh.w	lr, [r4, #22]
 80255da:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 80255de:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 80255e2:	eb08 480e 	add.w	r8, r8, lr, lsl #16
 80255e6:	181b      	adds	r3, r3, r0
 80255e8:	bf58      	it	pl
 80255ea:	9801      	ldrpl	r0, [sp, #4]
 80255ec:	9308      	str	r3, [sp, #32]
 80255ee:	bf54      	ite	pl
 80255f0:	1a1b      	subpl	r3, r3, r0
 80255f2:	9d06      	ldrmi	r5, [sp, #24]
 80255f4:	9802      	ldr	r0, [sp, #8]
 80255f6:	bf5e      	ittt	pl
 80255f8:	9308      	strpl	r3, [sp, #32]
 80255fa:	9b06      	ldrpl	r3, [sp, #24]
 80255fc:	1c5d      	addpl	r5, r3, #1
 80255fe:	44ab      	add	fp, r5
 8025600:	ea4f 136b 	mov.w	r3, fp, asr #5
 8025604:	9304      	str	r3, [sp, #16]
 8025606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025608:	4283      	cmp	r3, r0
 802560a:	f040 815a 	bne.w	80258c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x82e>
 802560e:	9b04      	ldr	r3, [sp, #16]
 8025610:	9a00      	ldr	r2, [sp, #0]
 8025612:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8025616:	4543      	cmp	r3, r8
 8025618:	d01a      	beq.n	8025650 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 802561a:	8b61      	ldrh	r1, [r4, #26]
 802561c:	8b23      	ldrh	r3, [r4, #24]
 802561e:	430b      	orrs	r3, r1
 8025620:	d00e      	beq.n	8025640 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8025622:	f1be 0f00 	cmp.w	lr, #0
 8025626:	db0b      	blt.n	8025640 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8025628:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802562a:	4573      	cmp	r3, lr
 802562c:	dd08      	ble.n	8025640 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 802562e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8025632:	4299      	cmp	r1, r3
 8025634:	f0c0 8138 	bcc.w	80258a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x814>
 8025638:	f04f 0301 	mov.w	r3, #1
 802563c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025640:	9b04      	ldr	r3, [sp, #16]
 8025642:	f8a4 c018 	strh.w	ip, [r4, #24]
 8025646:	82a3      	strh	r3, [r4, #20]
 8025648:	9b00      	ldr	r3, [sp, #0]
 802564a:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802564e:	82e3      	strh	r3, [r4, #22]
 8025650:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025652:	9a00      	ldr	r2, [sp, #0]
 8025654:	441a      	add	r2, r3
 8025656:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802565a:	9200      	str	r2, [sp, #0]
 802565c:	9900      	ldr	r1, [sp, #0]
 802565e:	9a04      	ldr	r2, [sp, #16]
 8025660:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 8025664:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8025668:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802566c:	4288      	cmp	r0, r1
 802566e:	d01a      	beq.n	80256a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x612>
 8025670:	8b60      	ldrh	r0, [r4, #26]
 8025672:	8b21      	ldrh	r1, [r4, #24]
 8025674:	ea50 0201 	orrs.w	r2, r0, r1
 8025678:	d00d      	beq.n	8025696 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 802567a:	2b00      	cmp	r3, #0
 802567c:	db0b      	blt.n	8025696 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 802567e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025680:	4299      	cmp	r1, r3
 8025682:	dd08      	ble.n	8025696 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8025684:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8025688:	4299      	cmp	r1, r3
 802568a:	f0c0 81f9 	bcc.w	8025a80 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 802568e:	f04f 0301 	mov.w	r3, #1
 8025692:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025696:	9b04      	ldr	r3, [sp, #16]
 8025698:	f8a4 c018 	strh.w	ip, [r4, #24]
 802569c:	82a3      	strh	r3, [r4, #20]
 802569e:	9b00      	ldr	r3, [sp, #0]
 80256a0:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80256a4:	82e3      	strh	r3, [r4, #22]
 80256a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80256a8:	4659      	mov	r1, fp
 80256aa:	9a00      	ldr	r2, [sp, #0]
 80256ac:	4293      	cmp	r3, r2
 80256ae:	d192      	bne.n	80255d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 80256b0:	9b02      	ldr	r3, [sp, #8]
 80256b2:	f1c3 0c20 	rsb	ip, r3, #32
 80256b6:	9b05      	ldr	r3, [sp, #20]
 80256b8:	ea4f 1e63 	mov.w	lr, r3, asr #5
 80256bc:	9b03      	ldr	r3, [sp, #12]
 80256be:	459c      	cmp	ip, r3
 80256c0:	f040 81f8 	bne.w	8025ab4 <_ZN8touchgfx7Outline10renderLineEiiii+0xa20>
 80256c4:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80256c8:	9a00      	ldr	r2, [sp, #0]
 80256ca:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 80256ce:	eb0e 4002 	add.w	r0, lr, r2, lsl #16
 80256d2:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80256d6:	4288      	cmp	r0, r1
 80256d8:	f43f ad54 	beq.w	8025184 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80256dc:	8b60      	ldrh	r0, [r4, #26]
 80256de:	8b21      	ldrh	r1, [r4, #24]
 80256e0:	ea50 0201 	orrs.w	r2, r0, r1
 80256e4:	d00c      	beq.n	8025700 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 80256e6:	2b00      	cmp	r3, #0
 80256e8:	db0a      	blt.n	8025700 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 80256ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80256ec:	4299      	cmp	r1, r3
 80256ee:	dd07      	ble.n	8025700 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 80256f0:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80256f4:	4299      	cmp	r1, r3
 80256f6:	f0c0 81d0 	bcc.w	8025a9a <_ZN8touchgfx7Outline10renderLineEiiii+0xa06>
 80256fa:	2301      	movs	r3, #1
 80256fc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025700:	9b00      	ldr	r3, [sp, #0]
 8025702:	f8a4 e014 	strh.w	lr, [r4, #20]
 8025706:	82e3      	strh	r3, [r4, #22]
 8025708:	e517      	b.n	802513a <_ZN8touchgfx7Outline10renderLineEiiii+0xa6>
 802570a:	2f00      	cmp	r7, #0
 802570c:	f2c0 8097 	blt.w	802583e <_ZN8touchgfx7Outline10renderLineEiiii+0x7aa>
 8025710:	2301      	movs	r3, #1
 8025712:	f1c1 0c20 	rsb	ip, r1, #32
 8025716:	9307      	str	r3, [sp, #28]
 8025718:	2320      	movs	r3, #32
 802571a:	fb02 f20c 	mul.w	r2, r2, ip
 802571e:	9306      	str	r3, [sp, #24]
 8025720:	9b06      	ldr	r3, [sp, #24]
 8025722:	fb92 fcf7 	sdiv	ip, r2, r7
 8025726:	fb07 221c 	mls	r2, r7, ip, r2
 802572a:	4419      	add	r1, r3
 802572c:	9b00      	ldr	r3, [sp, #0]
 802572e:	2a00      	cmp	r2, #0
 8025730:	bfbc      	itt	lt
 8025732:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8025736:	19d2      	addlt	r2, r2, r7
 8025738:	fb0c 3101 	mla	r1, ip, r1, r3
 802573c:	9b07      	ldr	r3, [sp, #28]
 802573e:	4460      	add	r0, ip
 8025740:	441d      	add	r5, r3
 8025742:	0433      	lsls	r3, r6, #16
 8025744:	b200      	sxth	r0, r0
 8025746:	930a      	str	r3, [sp, #40]	; 0x28
 8025748:	18eb      	adds	r3, r5, r3
 802574a:	b209      	sxth	r1, r1
 802574c:	8320      	strh	r0, [r4, #24]
 802574e:	454b      	cmp	r3, r9
 8025750:	8361      	strh	r1, [r4, #26]
 8025752:	d014      	beq.n	802577e <_ZN8touchgfx7Outline10renderLineEiiii+0x6ea>
 8025754:	ea50 0301 	orrs.w	r3, r0, r1
 8025758:	d00c      	beq.n	8025774 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 802575a:	f1b8 0f00 	cmp.w	r8, #0
 802575e:	db09      	blt.n	8025774 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8025760:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025762:	4543      	cmp	r3, r8
 8025764:	dd06      	ble.n	8025774 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8025766:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802576a:	4299      	cmp	r1, r3
 802576c:	d36e      	bcc.n	802584c <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 802576e:	2301      	movs	r3, #1
 8025770:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025774:	2300      	movs	r3, #0
 8025776:	82a5      	strh	r5, [r4, #20]
 8025778:	82e6      	strh	r6, [r4, #22]
 802577a:	8323      	strh	r3, [r4, #24]
 802577c:	8363      	strh	r3, [r4, #26]
 802577e:	9904      	ldr	r1, [sp, #16]
 8025780:	eb0e 030c 	add.w	r3, lr, ip
 8025784:	42a9      	cmp	r1, r5
 8025786:	d04d      	beq.n	8025824 <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 8025788:	9902      	ldr	r1, [sp, #8]
 802578a:	1bd2      	subs	r2, r2, r7
 802578c:	1ac9      	subs	r1, r1, r3
 802578e:	9200      	str	r2, [sp, #0]
 8025790:	448c      	add	ip, r1
 8025792:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8025796:	fb9c fef7 	sdiv	lr, ip, r7
 802579a:	fb07 cc1e 	mls	ip, r7, lr, ip
 802579e:	f1bc 0f00 	cmp.w	ip, #0
 80257a2:	bfbc      	itt	lt
 80257a4:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 80257a8:	44bc      	addlt	ip, r7
 80257aa:	f10e 0101 	add.w	r1, lr, #1
 80257ae:	910d      	str	r1, [sp, #52]	; 0x34
 80257b0:	9a00      	ldr	r2, [sp, #0]
 80257b2:	8b20      	ldrh	r0, [r4, #24]
 80257b4:	eb12 020c 	adds.w	r2, r2, ip
 80257b8:	8b61      	ldrh	r1, [r4, #26]
 80257ba:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80257be:	9200      	str	r2, [sp, #0]
 80257c0:	bf5b      	ittet	pl
 80257c2:	1bd2      	subpl	r2, r2, r7
 80257c4:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 80257c8:	46f0      	movmi	r8, lr
 80257ca:	9200      	strpl	r2, [sp, #0]
 80257cc:	9a07      	ldr	r2, [sp, #28]
 80257ce:	4440      	add	r0, r8
 80257d0:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 80257d4:	4443      	add	r3, r8
 80257d6:	4415      	add	r5, r2
 80257d8:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80257dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80257de:	b200      	sxth	r0, r0
 80257e0:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 80257e4:	442a      	add	r2, r5
 80257e6:	b209      	sxth	r1, r1
 80257e8:	8320      	strh	r0, [r4, #24]
 80257ea:	454a      	cmp	r2, r9
 80257ec:	8361      	strh	r1, [r4, #26]
 80257ee:	d016      	beq.n	802581e <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 80257f0:	ea50 0201 	orrs.w	r2, r0, r1
 80257f4:	d00d      	beq.n	8025812 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 80257f6:	f1b8 0f00 	cmp.w	r8, #0
 80257fa:	db0a      	blt.n	8025812 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 80257fc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80257fe:	4541      	cmp	r1, r8
 8025800:	dd07      	ble.n	8025812 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8025802:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025806:	4288      	cmp	r0, r1
 8025808:	d330      	bcc.n	802586c <_ZN8touchgfx7Outline10renderLineEiiii+0x7d8>
 802580a:	f04f 0201 	mov.w	r2, #1
 802580e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8025812:	f04f 0200 	mov.w	r2, #0
 8025816:	82a5      	strh	r5, [r4, #20]
 8025818:	82e6      	strh	r6, [r4, #22]
 802581a:	8322      	strh	r2, [r4, #24]
 802581c:	8362      	strh	r2, [r4, #26]
 802581e:	9904      	ldr	r1, [sp, #16]
 8025820:	42a9      	cmp	r1, r5
 8025822:	d1c5      	bne.n	80257b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x71c>
 8025824:	9a02      	ldr	r2, [sp, #8]
 8025826:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025828:	1ad3      	subs	r3, r2, r3
 802582a:	8b22      	ldrh	r2, [r4, #24]
 802582c:	3120      	adds	r1, #32
 802582e:	441a      	add	r2, r3
 8025830:	8322      	strh	r2, [r4, #24]
 8025832:	9a06      	ldr	r2, [sp, #24]
 8025834:	1a89      	subs	r1, r1, r2
 8025836:	8b62      	ldrh	r2, [r4, #26]
 8025838:	fb03 2301 	mla	r3, r3, r1, r2
 802583c:	e64e      	b.n	80254dc <_ZN8touchgfx7Outline10renderLineEiiii+0x448>
 802583e:	f04f 33ff 	mov.w	r3, #4294967295
 8025842:	434a      	muls	r2, r1
 8025844:	427f      	negs	r7, r7
 8025846:	9307      	str	r3, [sp, #28]
 8025848:	2300      	movs	r3, #0
 802584a:	e768      	b.n	802571e <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 802584c:	f104 0314 	add.w	r3, r4, #20
 8025850:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8025854:	cb03      	ldmia	r3!, {r0, r1}
 8025856:	f8c8 0000 	str.w	r0, [r8]
 802585a:	f8c8 1004 	str.w	r1, [r8, #4]
 802585e:	6923      	ldr	r3, [r4, #16]
 8025860:	3308      	adds	r3, #8
 8025862:	6123      	str	r3, [r4, #16]
 8025864:	68a3      	ldr	r3, [r4, #8]
 8025866:	3301      	adds	r3, #1
 8025868:	60a3      	str	r3, [r4, #8]
 802586a:	e783      	b.n	8025774 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 802586c:	f104 0814 	add.w	r8, r4, #20
 8025870:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8025874:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8025878:	f8c9 0000 	str.w	r0, [r9]
 802587c:	f8c9 1004 	str.w	r1, [r9, #4]
 8025880:	6921      	ldr	r1, [r4, #16]
 8025882:	3108      	adds	r1, #8
 8025884:	6121      	str	r1, [r4, #16]
 8025886:	68a1      	ldr	r1, [r4, #8]
 8025888:	3101      	adds	r1, #1
 802588a:	60a1      	str	r1, [r4, #8]
 802588c:	e7c1      	b.n	8025812 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 802588e:	f104 0314 	add.w	r3, r4, #20
 8025892:	6925      	ldr	r5, [r4, #16]
 8025894:	cb03      	ldmia	r3!, {r0, r1}
 8025896:	6028      	str	r0, [r5, #0]
 8025898:	6069      	str	r1, [r5, #4]
 802589a:	6923      	ldr	r3, [r4, #16]
 802589c:	3308      	adds	r3, #8
 802589e:	6123      	str	r3, [r4, #16]
 80258a0:	68a3      	ldr	r3, [r4, #8]
 80258a2:	3301      	adds	r3, #1
 80258a4:	60a3      	str	r3, [r4, #8]
 80258a6:	e66a      	b.n	802557e <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 80258a8:	f104 0314 	add.w	r3, r4, #20
 80258ac:	6925      	ldr	r5, [r4, #16]
 80258ae:	cb03      	ldmia	r3!, {r0, r1}
 80258b0:	6028      	str	r0, [r5, #0]
 80258b2:	6069      	str	r1, [r5, #4]
 80258b4:	6923      	ldr	r3, [r4, #16]
 80258b6:	3308      	adds	r3, #8
 80258b8:	6123      	str	r3, [r4, #16]
 80258ba:	68a3      	ldr	r3, [r4, #8]
 80258bc:	3301      	adds	r3, #1
 80258be:	60a3      	str	r3, [r4, #8]
 80258c0:	e6be      	b.n	8025640 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 80258c2:	f00b 031f 	and.w	r3, fp, #31
 80258c6:	114f      	asrs	r7, r1, #5
 80258c8:	8b20      	ldrh	r0, [r4, #24]
 80258ca:	f001 011f 	and.w	r1, r1, #31
 80258ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80258d0:	9b04      	ldr	r3, [sp, #16]
 80258d2:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 80258d6:	429f      	cmp	r7, r3
 80258d8:	d10a      	bne.n	80258f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 80258da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80258dc:	4418      	add	r0, r3
 80258de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80258e0:	4419      	add	r1, r3
 80258e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80258e4:	8320      	strh	r0, [r4, #24]
 80258e6:	fb03 9901 	mla	r9, r3, r1, r9
 80258ea:	f8a4 901a 	strh.w	r9, [r4, #26]
 80258ee:	e6af      	b.n	8025650 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 80258f0:	2d00      	cmp	r5, #0
 80258f2:	f2c0 809b 	blt.w	8025a2c <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 80258f6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80258f8:	f1c1 0320 	rsb	r3, r1, #32
 80258fc:	4373      	muls	r3, r6
 80258fe:	2601      	movs	r6, #1
 8025900:	960e      	str	r6, [sp, #56]	; 0x38
 8025902:	2620      	movs	r6, #32
 8025904:	960d      	str	r6, [sp, #52]	; 0x34
 8025906:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8025908:	fb93 f6f5 	sdiv	r6, r3, r5
 802590c:	4411      	add	r1, r2
 802590e:	fb05 3316 	mls	r3, r5, r6, r3
 8025912:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025914:	2b00      	cmp	r3, #0
 8025916:	4417      	add	r7, r2
 8025918:	9a00      	ldr	r2, [sp, #0]
 802591a:	bfbc      	itt	lt
 802591c:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8025920:	195b      	addlt	r3, r3, r5
 8025922:	0412      	lsls	r2, r2, #16
 8025924:	fb06 9101 	mla	r1, r6, r1, r9
 8025928:	4430      	add	r0, r6
 802592a:	eb07 0902 	add.w	r9, r7, r2
 802592e:	9210      	str	r2, [sp, #64]	; 0x40
 8025930:	b200      	sxth	r0, r0
 8025932:	b209      	sxth	r1, r1
 8025934:	45c1      	cmp	r9, r8
 8025936:	8320      	strh	r0, [r4, #24]
 8025938:	8361      	strh	r1, [r4, #26]
 802593a:	d017      	beq.n	802596c <_ZN8touchgfx7Outline10renderLineEiiii+0x8d8>
 802593c:	ea50 0201 	orrs.w	r2, r0, r1
 8025940:	d00d      	beq.n	802595e <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8025942:	f1be 0f00 	cmp.w	lr, #0
 8025946:	db0a      	blt.n	802595e <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8025948:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802594a:	4571      	cmp	r1, lr
 802594c:	dd07      	ble.n	802595e <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 802594e:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025952:	4288      	cmp	r0, r1
 8025954:	d372      	bcc.n	8025a3c <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 8025956:	f04f 0201 	mov.w	r2, #1
 802595a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802595e:	9a00      	ldr	r2, [sp, #0]
 8025960:	82a7      	strh	r7, [r4, #20]
 8025962:	82e2      	strh	r2, [r4, #22]
 8025964:	f8a4 c018 	strh.w	ip, [r4, #24]
 8025968:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802596c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802596e:	eb02 0e06 	add.w	lr, r2, r6
 8025972:	9a04      	ldr	r2, [sp, #16]
 8025974:	42ba      	cmp	r2, r7
 8025976:	d049      	beq.n	8025a0c <_ZN8touchgfx7Outline10renderLineEiiii+0x978>
 8025978:	9a02      	ldr	r2, [sp, #8]
 802597a:	1b5b      	subs	r3, r3, r5
 802597c:	eba2 010e 	sub.w	r1, r2, lr
 8025980:	440e      	add	r6, r1
 8025982:	0176      	lsls	r6, r6, #5
 8025984:	fb96 f8f5 	sdiv	r8, r6, r5
 8025988:	fb05 6618 	mls	r6, r5, r8, r6
 802598c:	2e00      	cmp	r6, #0
 802598e:	bfbc      	itt	lt
 8025990:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8025994:	1976      	addlt	r6, r6, r5
 8025996:	f108 0201 	add.w	r2, r8, #1
 802599a:	9211      	str	r2, [sp, #68]	; 0x44
 802599c:	199b      	adds	r3, r3, r6
 802599e:	8b20      	ldrh	r0, [r4, #24]
 80259a0:	8b61      	ldrh	r1, [r4, #26]
 80259a2:	bf54      	ite	pl
 80259a4:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 80259a8:	46c1      	movmi	r9, r8
 80259aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80259ac:	bf58      	it	pl
 80259ae:	1b5b      	subpl	r3, r3, r5
 80259b0:	4448      	add	r0, r9
 80259b2:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 80259b6:	4417      	add	r7, r2
 80259b8:	44ce      	add	lr, r9
 80259ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80259bc:	b200      	sxth	r0, r0
 80259be:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 80259c2:	b209      	sxth	r1, r1
 80259c4:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 80259c8:	443a      	add	r2, r7
 80259ca:	8320      	strh	r0, [r4, #24]
 80259cc:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 80259d0:	8361      	strh	r1, [r4, #26]
 80259d2:	4552      	cmp	r2, sl
 80259d4:	d017      	beq.n	8025a06 <_ZN8touchgfx7Outline10renderLineEiiii+0x972>
 80259d6:	ea50 0201 	orrs.w	r2, r0, r1
 80259da:	d00d      	beq.n	80259f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 80259dc:	f1b9 0f00 	cmp.w	r9, #0
 80259e0:	db0a      	blt.n	80259f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 80259e2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80259e4:	4549      	cmp	r1, r9
 80259e6:	dd07      	ble.n	80259f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 80259e8:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80259ec:	4288      	cmp	r0, r1
 80259ee:	d336      	bcc.n	8025a5e <_ZN8touchgfx7Outline10renderLineEiiii+0x9ca>
 80259f0:	f04f 0201 	mov.w	r2, #1
 80259f4:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80259f8:	9a00      	ldr	r2, [sp, #0]
 80259fa:	82a7      	strh	r7, [r4, #20]
 80259fc:	82e2      	strh	r2, [r4, #22]
 80259fe:	f8a4 c018 	strh.w	ip, [r4, #24]
 8025a02:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8025a06:	9a04      	ldr	r2, [sp, #16]
 8025a08:	42ba      	cmp	r2, r7
 8025a0a:	d1c7      	bne.n	802599c <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8025a0c:	9b02      	ldr	r3, [sp, #8]
 8025a0e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8025a10:	eba3 0e0e 	sub.w	lr, r3, lr
 8025a14:	8b23      	ldrh	r3, [r4, #24]
 8025a16:	3120      	adds	r1, #32
 8025a18:	4473      	add	r3, lr
 8025a1a:	8323      	strh	r3, [r4, #24]
 8025a1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025a1e:	1ac9      	subs	r1, r1, r3
 8025a20:	8b63      	ldrh	r3, [r4, #26]
 8025a22:	fb0e 3e01 	mla	lr, lr, r1, r3
 8025a26:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8025a2a:	e611      	b.n	8025650 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8025a2c:	f04f 36ff 	mov.w	r6, #4294967295
 8025a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025a32:	426d      	negs	r5, r5
 8025a34:	960e      	str	r6, [sp, #56]	; 0x38
 8025a36:	2600      	movs	r6, #0
 8025a38:	434b      	muls	r3, r1
 8025a3a:	e763      	b.n	8025904 <_ZN8touchgfx7Outline10renderLineEiiii+0x870>
 8025a3c:	f104 0e14 	add.w	lr, r4, #20
 8025a40:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8025a44:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8025a48:	f8c8 0000 	str.w	r0, [r8]
 8025a4c:	f8c8 1004 	str.w	r1, [r8, #4]
 8025a50:	6921      	ldr	r1, [r4, #16]
 8025a52:	3108      	adds	r1, #8
 8025a54:	6121      	str	r1, [r4, #16]
 8025a56:	68a1      	ldr	r1, [r4, #8]
 8025a58:	3101      	adds	r1, #1
 8025a5a:	60a1      	str	r1, [r4, #8]
 8025a5c:	e77f      	b.n	802595e <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8025a5e:	f104 0914 	add.w	r9, r4, #20
 8025a62:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8025a66:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8025a6a:	f8ca 0000 	str.w	r0, [sl]
 8025a6e:	f8ca 1004 	str.w	r1, [sl, #4]
 8025a72:	6921      	ldr	r1, [r4, #16]
 8025a74:	3108      	adds	r1, #8
 8025a76:	6121      	str	r1, [r4, #16]
 8025a78:	68a1      	ldr	r1, [r4, #8]
 8025a7a:	3101      	adds	r1, #1
 8025a7c:	60a1      	str	r1, [r4, #8]
 8025a7e:	e7bb      	b.n	80259f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8025a80:	f104 0314 	add.w	r3, r4, #20
 8025a84:	6925      	ldr	r5, [r4, #16]
 8025a86:	cb03      	ldmia	r3!, {r0, r1}
 8025a88:	6028      	str	r0, [r5, #0]
 8025a8a:	6069      	str	r1, [r5, #4]
 8025a8c:	6923      	ldr	r3, [r4, #16]
 8025a8e:	3308      	adds	r3, #8
 8025a90:	6123      	str	r3, [r4, #16]
 8025a92:	68a3      	ldr	r3, [r4, #8]
 8025a94:	3301      	adds	r3, #1
 8025a96:	60a3      	str	r3, [r4, #8]
 8025a98:	e5fd      	b.n	8025696 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8025a9a:	f104 0314 	add.w	r3, r4, #20
 8025a9e:	6925      	ldr	r5, [r4, #16]
 8025aa0:	cb03      	ldmia	r3!, {r0, r1}
 8025aa2:	6028      	str	r0, [r5, #0]
 8025aa4:	6069      	str	r1, [r5, #4]
 8025aa6:	6923      	ldr	r3, [r4, #16]
 8025aa8:	3308      	adds	r3, #8
 8025aaa:	6123      	str	r3, [r4, #16]
 8025aac:	68a3      	ldr	r3, [r4, #8]
 8025aae:	3301      	adds	r3, #1
 8025ab0:	60a3      	str	r3, [r4, #8]
 8025ab2:	e625      	b.n	8025700 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8025ab4:	9b05      	ldr	r3, [sp, #20]
 8025ab6:	ea4f 176b 	mov.w	r7, fp, asr #5
 8025aba:	f00b 081f 	and.w	r8, fp, #31
 8025abe:	8b20      	ldrh	r0, [r4, #24]
 8025ac0:	f003 031f 	and.w	r3, r3, #31
 8025ac4:	4577      	cmp	r7, lr
 8025ac6:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8025aca:	9302      	str	r3, [sp, #8]
 8025acc:	9b03      	ldr	r3, [sp, #12]
 8025ace:	eba3 050c 	sub.w	r5, r3, ip
 8025ad2:	d108      	bne.n	8025ae6 <_ZN8touchgfx7Outline10renderLineEiiii+0xa52>
 8025ad4:	9b02      	ldr	r3, [sp, #8]
 8025ad6:	4428      	add	r0, r5
 8025ad8:	4498      	add	r8, r3
 8025ada:	8320      	strh	r0, [r4, #24]
 8025adc:	fb05 9508 	mla	r5, r5, r8, r9
 8025ae0:	8365      	strh	r5, [r4, #26]
 8025ae2:	f7ff bb4f 	b.w	8025184 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8025ae6:	9b05      	ldr	r3, [sp, #20]
 8025ae8:	ebb3 030b 	subs.w	r3, r3, fp
 8025aec:	f100 809c 	bmi.w	8025c28 <_ZN8touchgfx7Outline10renderLineEiiii+0xb94>
 8025af0:	f1c8 0120 	rsb	r1, r8, #32
 8025af4:	2201      	movs	r2, #1
 8025af6:	f04f 0b20 	mov.w	fp, #32
 8025afa:	434d      	muls	r5, r1
 8025afc:	9201      	str	r2, [sp, #4]
 8025afe:	9a01      	ldr	r2, [sp, #4]
 8025b00:	44d8      	add	r8, fp
 8025b02:	fb95 f6f3 	sdiv	r6, r5, r3
 8025b06:	fb03 5516 	mls	r5, r3, r6, r5
 8025b0a:	4417      	add	r7, r2
 8025b0c:	9a00      	ldr	r2, [sp, #0]
 8025b0e:	2d00      	cmp	r5, #0
 8025b10:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8025b14:	bfbc      	itt	lt
 8025b16:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8025b1a:	18ed      	addlt	r5, r5, r3
 8025b1c:	eb07 0a02 	add.w	sl, r7, r2
 8025b20:	9204      	str	r2, [sp, #16]
 8025b22:	fb06 9808 	mla	r8, r6, r8, r9
 8025b26:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8025b2a:	4430      	add	r0, r6
 8025b2c:	fa0f f188 	sxth.w	r1, r8
 8025b30:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8025b34:	b200      	sxth	r0, r0
 8025b36:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8025b3a:	8361      	strh	r1, [r4, #26]
 8025b3c:	8320      	strh	r0, [r4, #24]
 8025b3e:	45ca      	cmp	sl, r9
 8025b40:	d015      	beq.n	8025b6e <_ZN8touchgfx7Outline10renderLineEiiii+0xada>
 8025b42:	ea50 0201 	orrs.w	r2, r0, r1
 8025b46:	d00c      	beq.n	8025b62 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8025b48:	f1b8 0f00 	cmp.w	r8, #0
 8025b4c:	db09      	blt.n	8025b62 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8025b4e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025b50:	4541      	cmp	r1, r8
 8025b52:	dd06      	ble.n	8025b62 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8025b54:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025b58:	4288      	cmp	r0, r1
 8025b5a:	d36e      	bcc.n	8025c3a <_ZN8touchgfx7Outline10renderLineEiiii+0xba6>
 8025b5c:	2101      	movs	r1, #1
 8025b5e:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8025b62:	2100      	movs	r1, #0
 8025b64:	9a00      	ldr	r2, [sp, #0]
 8025b66:	82a7      	strh	r7, [r4, #20]
 8025b68:	82e2      	strh	r2, [r4, #22]
 8025b6a:	8321      	strh	r1, [r4, #24]
 8025b6c:	8361      	strh	r1, [r4, #26]
 8025b6e:	45be      	cmp	lr, r7
 8025b70:	44b4      	add	ip, r6
 8025b72:	d048      	beq.n	8025c06 <_ZN8touchgfx7Outline10renderLineEiiii+0xb72>
 8025b74:	9a03      	ldr	r2, [sp, #12]
 8025b76:	1aed      	subs	r5, r5, r3
 8025b78:	eba2 010c 	sub.w	r1, r2, ip
 8025b7c:	440e      	add	r6, r1
 8025b7e:	0176      	lsls	r6, r6, #5
 8025b80:	fb96 f8f3 	sdiv	r8, r6, r3
 8025b84:	fb03 6618 	mls	r6, r3, r8, r6
 8025b88:	2e00      	cmp	r6, #0
 8025b8a:	bfbc      	itt	lt
 8025b8c:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8025b90:	18f6      	addlt	r6, r6, r3
 8025b92:	f108 0201 	add.w	r2, r8, #1
 8025b96:	9205      	str	r2, [sp, #20]
 8025b98:	19ad      	adds	r5, r5, r6
 8025b9a:	8b20      	ldrh	r0, [r4, #24]
 8025b9c:	8b61      	ldrh	r1, [r4, #26]
 8025b9e:	bf54      	ite	pl
 8025ba0:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 8025ba4:	46c1      	movmi	r9, r8
 8025ba6:	9a01      	ldr	r2, [sp, #4]
 8025ba8:	bf58      	it	pl
 8025baa:	1aed      	subpl	r5, r5, r3
 8025bac:	4448      	add	r0, r9
 8025bae:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8025bb2:	4417      	add	r7, r2
 8025bb4:	44cc      	add	ip, r9
 8025bb6:	9a04      	ldr	r2, [sp, #16]
 8025bb8:	b200      	sxth	r0, r0
 8025bba:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8025bbe:	b209      	sxth	r1, r1
 8025bc0:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8025bc4:	443a      	add	r2, r7
 8025bc6:	8320      	strh	r0, [r4, #24]
 8025bc8:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8025bcc:	8361      	strh	r1, [r4, #26]
 8025bce:	4552      	cmp	r2, sl
 8025bd0:	d017      	beq.n	8025c02 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6e>
 8025bd2:	ea50 0201 	orrs.w	r2, r0, r1
 8025bd6:	d00d      	beq.n	8025bf4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8025bd8:	f1b9 0f00 	cmp.w	r9, #0
 8025bdc:	db0a      	blt.n	8025bf4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8025bde:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025be0:	4549      	cmp	r1, r9
 8025be2:	dd07      	ble.n	8025bf4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8025be4:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025be8:	4288      	cmp	r0, r1
 8025bea:	d337      	bcc.n	8025c5c <_ZN8touchgfx7Outline10renderLineEiiii+0xbc8>
 8025bec:	f04f 0201 	mov.w	r2, #1
 8025bf0:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8025bf4:	9a00      	ldr	r2, [sp, #0]
 8025bf6:	82a7      	strh	r7, [r4, #20]
 8025bf8:	82e2      	strh	r2, [r4, #22]
 8025bfa:	f04f 0200 	mov.w	r2, #0
 8025bfe:	8322      	strh	r2, [r4, #24]
 8025c00:	8362      	strh	r2, [r4, #26]
 8025c02:	45be      	cmp	lr, r7
 8025c04:	d1c8      	bne.n	8025b98 <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 8025c06:	9b03      	ldr	r3, [sp, #12]
 8025c08:	8b62      	ldrh	r2, [r4, #26]
 8025c0a:	eba3 0c0c 	sub.w	ip, r3, ip
 8025c0e:	8b23      	ldrh	r3, [r4, #24]
 8025c10:	4463      	add	r3, ip
 8025c12:	8323      	strh	r3, [r4, #24]
 8025c14:	9b02      	ldr	r3, [sp, #8]
 8025c16:	3320      	adds	r3, #32
 8025c18:	eba3 030b 	sub.w	r3, r3, fp
 8025c1c:	fb0c 2c03 	mla	ip, ip, r3, r2
 8025c20:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8025c24:	f7ff baae 	b.w	8025184 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8025c28:	f04f 32ff 	mov.w	r2, #4294967295
 8025c2c:	fb05 f508 	mul.w	r5, r5, r8
 8025c30:	425b      	negs	r3, r3
 8025c32:	f04f 0b00 	mov.w	fp, #0
 8025c36:	9201      	str	r2, [sp, #4]
 8025c38:	e761      	b.n	8025afe <_ZN8touchgfx7Outline10renderLineEiiii+0xa6a>
 8025c3a:	f104 0814 	add.w	r8, r4, #20
 8025c3e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8025c42:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8025c46:	f8c9 0000 	str.w	r0, [r9]
 8025c4a:	f8c9 1004 	str.w	r1, [r9, #4]
 8025c4e:	6921      	ldr	r1, [r4, #16]
 8025c50:	3108      	adds	r1, #8
 8025c52:	6121      	str	r1, [r4, #16]
 8025c54:	68a1      	ldr	r1, [r4, #8]
 8025c56:	3101      	adds	r1, #1
 8025c58:	60a1      	str	r1, [r4, #8]
 8025c5a:	e782      	b.n	8025b62 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8025c5c:	f104 0914 	add.w	r9, r4, #20
 8025c60:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8025c64:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8025c68:	f8ca 0000 	str.w	r0, [sl]
 8025c6c:	f8ca 1004 	str.w	r1, [sl, #4]
 8025c70:	6921      	ldr	r1, [r4, #16]
 8025c72:	3108      	adds	r1, #8
 8025c74:	6121      	str	r1, [r4, #16]
 8025c76:	68a1      	ldr	r1, [r4, #8]
 8025c78:	3101      	adds	r1, #1
 8025c7a:	60a1      	str	r1, [r4, #8]
 8025c7c:	e7ba      	b.n	8025bf4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>

08025c7e <_ZN8touchgfx7Outline6lineToEii>:
 8025c7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025c80:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8025c82:	4604      	mov	r4, r0
 8025c84:	460d      	mov	r5, r1
 8025c86:	4616      	mov	r6, r2
 8025c88:	079b      	lsls	r3, r3, #30
 8025c8a:	d526      	bpl.n	8025cda <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8025c8c:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8025c90:	ea85 0001 	eor.w	r0, r5, r1
 8025c94:	ea86 0302 	eor.w	r3, r6, r2
 8025c98:	4303      	orrs	r3, r0
 8025c9a:	d01e      	beq.n	8025cda <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8025c9c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8025c9e:	114b      	asrs	r3, r1, #5
 8025ca0:	9600      	str	r6, [sp, #0]
 8025ca2:	4283      	cmp	r3, r0
 8025ca4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8025ca6:	bfb8      	it	lt
 8025ca8:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8025caa:	3301      	adds	r3, #1
 8025cac:	4283      	cmp	r3, r0
 8025cae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8025cb0:	bfc8      	it	gt
 8025cb2:	6363      	strgt	r3, [r4, #52]	; 0x34
 8025cb4:	116b      	asrs	r3, r5, #5
 8025cb6:	4283      	cmp	r3, r0
 8025cb8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8025cba:	bfb8      	it	lt
 8025cbc:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8025cbe:	3301      	adds	r3, #1
 8025cc0:	4283      	cmp	r3, r0
 8025cc2:	4620      	mov	r0, r4
 8025cc4:	bfc8      	it	gt
 8025cc6:	6363      	strgt	r3, [r4, #52]	; 0x34
 8025cc8:	462b      	mov	r3, r5
 8025cca:	f7ff f9e3 	bl	8025094 <_ZN8touchgfx7Outline10renderLineEiiii>
 8025cce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8025cd0:	f043 0301 	orr.w	r3, r3, #1
 8025cd4:	e9c4 5607 	strd	r5, r6, [r4, #28]
 8025cd8:	63e3      	str	r3, [r4, #60]	; 0x3c
 8025cda:	b002      	add	sp, #8
 8025cdc:	bd70      	pop	{r4, r5, r6, pc}

08025cde <_ZN8touchgfx7Outline6moveToEii>:
 8025cde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025ce0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8025ce2:	4615      	mov	r5, r2
 8025ce4:	4604      	mov	r4, r0
 8025ce6:	460e      	mov	r6, r1
 8025ce8:	079a      	lsls	r2, r3, #30
 8025cea:	d401      	bmi.n	8025cf0 <_ZN8touchgfx7Outline6moveToEii+0x12>
 8025cec:	f7ff f98c 	bl	8025008 <_ZN8touchgfx7Outline5resetEv>
 8025cf0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8025cf2:	07db      	lsls	r3, r3, #31
 8025cf4:	d504      	bpl.n	8025d00 <_ZN8touchgfx7Outline6moveToEii+0x22>
 8025cf6:	4620      	mov	r0, r4
 8025cf8:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 8025cfc:	f7ff ffbf 	bl	8025c7e <_ZN8touchgfx7Outline6lineToEii>
 8025d00:	ea4f 1c66 	mov.w	ip, r6, asr #5
 8025d04:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8025d08:	116f      	asrs	r7, r5, #5
 8025d0a:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8025d0e:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 8025d12:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8025d16:	4291      	cmp	r1, r2
 8025d18:	d015      	beq.n	8025d46 <_ZN8touchgfx7Outline6moveToEii+0x68>
 8025d1a:	8b61      	ldrh	r1, [r4, #26]
 8025d1c:	8b22      	ldrh	r2, [r4, #24]
 8025d1e:	430a      	orrs	r2, r1
 8025d20:	d00b      	beq.n	8025d3a <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8025d22:	2b00      	cmp	r3, #0
 8025d24:	db09      	blt.n	8025d3a <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8025d26:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8025d28:	429a      	cmp	r2, r3
 8025d2a:	dd06      	ble.n	8025d3a <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8025d2c:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8025d30:	429a      	cmp	r2, r3
 8025d32:	d30d      	bcc.n	8025d50 <_ZN8touchgfx7Outline6moveToEii+0x72>
 8025d34:	2301      	movs	r3, #1
 8025d36:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025d3a:	2300      	movs	r3, #0
 8025d3c:	f8a4 c014 	strh.w	ip, [r4, #20]
 8025d40:	82e7      	strh	r7, [r4, #22]
 8025d42:	8323      	strh	r3, [r4, #24]
 8025d44:	8363      	strh	r3, [r4, #26]
 8025d46:	61e6      	str	r6, [r4, #28]
 8025d48:	62a5      	str	r5, [r4, #40]	; 0x28
 8025d4a:	e9c4 5608 	strd	r5, r6, [r4, #32]
 8025d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025d50:	f104 0314 	add.w	r3, r4, #20
 8025d54:	6922      	ldr	r2, [r4, #16]
 8025d56:	cb03      	ldmia	r3!, {r0, r1}
 8025d58:	6010      	str	r0, [r2, #0]
 8025d5a:	6051      	str	r1, [r2, #4]
 8025d5c:	6923      	ldr	r3, [r4, #16]
 8025d5e:	3308      	adds	r3, #8
 8025d60:	6123      	str	r3, [r4, #16]
 8025d62:	68a3      	ldr	r3, [r4, #8]
 8025d64:	3301      	adds	r3, #1
 8025d66:	60a3      	str	r3, [r4, #8]
 8025d68:	e7e7      	b.n	8025d3a <_ZN8touchgfx7Outline6moveToEii+0x5c>

08025d6a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8025d6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025d6e:	b0d1      	sub	sp, #324	; 0x144
 8025d70:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8025d74:	466c      	mov	r4, sp
 8025d76:	1a0d      	subs	r5, r1, r0
 8025d78:	f100 0208 	add.w	r2, r0, #8
 8025d7c:	2d48      	cmp	r5, #72	; 0x48
 8025d7e:	f340 80ba 	ble.w	8025ef6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8025d82:	112d      	asrs	r5, r5, #4
 8025d84:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 8025d88:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 8025d8c:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 8025d90:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8025d94:	f9b0 8000 	ldrsh.w	r8, [r0]
 8025d98:	681e      	ldr	r6, [r3, #0]
 8025d9a:	6006      	str	r6, [r0, #0]
 8025d9c:	685e      	ldr	r6, [r3, #4]
 8025d9e:	6046      	str	r6, [r0, #4]
 8025da0:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 8025da4:	f8a3 c004 	strh.w	ip, [r3, #4]
 8025da8:	f8a3 e002 	strh.w	lr, [r3, #2]
 8025dac:	80df      	strh	r7, [r3, #6]
 8025dae:	f1a1 0308 	sub.w	r3, r1, #8
 8025db2:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8025db6:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 8025dba:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 8025dbe:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8025dc2:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8025dc6:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8025dca:	45ac      	cmp	ip, r5
 8025dcc:	dd0f      	ble.n	8025dee <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 8025dce:	681d      	ldr	r5, [r3, #0]
 8025dd0:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 8025dd4:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8025dd8:	6015      	str	r5, [r2, #0]
 8025dda:	685d      	ldr	r5, [r3, #4]
 8025ddc:	6055      	str	r5, [r2, #4]
 8025dde:	f821 7c08 	strh.w	r7, [r1, #-8]
 8025de2:	f821 6c06 	strh.w	r6, [r1, #-6]
 8025de6:	f821 ec04 	strh.w	lr, [r1, #-4]
 8025dea:	f821 cc02 	strh.w	ip, [r1, #-2]
 8025dee:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8025df2:	f9b0 7000 	ldrsh.w	r7, [r0]
 8025df6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8025dfa:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8025dfe:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 8025e02:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8025e06:	4565      	cmp	r5, ip
 8025e08:	dd0d      	ble.n	8025e26 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 8025e0a:	6815      	ldr	r5, [r2, #0]
 8025e0c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8025e10:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8025e14:	6005      	str	r5, [r0, #0]
 8025e16:	6855      	ldr	r5, [r2, #4]
 8025e18:	8107      	strh	r7, [r0, #8]
 8025e1a:	6045      	str	r5, [r0, #4]
 8025e1c:	8146      	strh	r6, [r0, #10]
 8025e1e:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8025e22:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8025e26:	f9b0 7000 	ldrsh.w	r7, [r0]
 8025e2a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8025e2e:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 8025e32:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8025e36:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8025e3a:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8025e3e:	45ac      	cmp	ip, r5
 8025e40:	dd0f      	ble.n	8025e62 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8025e42:	681d      	ldr	r5, [r3, #0]
 8025e44:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8025e48:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8025e4c:	6005      	str	r5, [r0, #0]
 8025e4e:	685d      	ldr	r5, [r3, #4]
 8025e50:	6045      	str	r5, [r0, #4]
 8025e52:	f821 7c08 	strh.w	r7, [r1, #-8]
 8025e56:	f821 6c06 	strh.w	r6, [r1, #-6]
 8025e5a:	f821 ec04 	strh.w	lr, [r1, #-4]
 8025e5e:	f821 cc02 	strh.w	ip, [r1, #-2]
 8025e62:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 8025e66:	f102 0508 	add.w	r5, r2, #8
 8025e6a:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 8025e6e:	f9b0 e000 	ldrsh.w	lr, [r0]
 8025e72:	462f      	mov	r7, r5
 8025e74:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8025e78:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 8025e7c:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 8025e80:	45b2      	cmp	sl, r6
 8025e82:	dc18      	bgt.n	8025eb6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 8025e84:	3b08      	subs	r3, #8
 8025e86:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 8025e8a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8025e8e:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 8025e92:	45b2      	cmp	sl, r6
 8025e94:	dbf6      	blt.n	8025e84 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 8025e96:	42ab      	cmp	r3, r5
 8025e98:	681e      	ldr	r6, [r3, #0]
 8025e9a:	d30e      	bcc.n	8025eba <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 8025e9c:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 8025ea0:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8025ea4:	602e      	str	r6, [r5, #0]
 8025ea6:	685e      	ldr	r6, [r3, #4]
 8025ea8:	606e      	str	r6, [r5, #4]
 8025eaa:	f8a3 9000 	strh.w	r9, [r3]
 8025eae:	f8a3 8002 	strh.w	r8, [r3, #2]
 8025eb2:	809f      	strh	r7, [r3, #4]
 8025eb4:	80da      	strh	r2, [r3, #6]
 8025eb6:	462a      	mov	r2, r5
 8025eb8:	e7d3      	b.n	8025e62 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8025eba:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8025ebe:	6006      	str	r6, [r0, #0]
 8025ec0:	685e      	ldr	r6, [r3, #4]
 8025ec2:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8025ec6:	6046      	str	r6, [r0, #4]
 8025ec8:	1a1e      	subs	r6, r3, r0
 8025eca:	80da      	strh	r2, [r3, #6]
 8025ecc:	1b4a      	subs	r2, r1, r5
 8025ece:	f8a3 e000 	strh.w	lr, [r3]
 8025ed2:	10d2      	asrs	r2, r2, #3
 8025ed4:	f8a3 c002 	strh.w	ip, [r3, #2]
 8025ed8:	f8a3 8004 	strh.w	r8, [r3, #4]
 8025edc:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 8025ee0:	bfb5      	itete	lt
 8025ee2:	e9c4 0300 	strdlt	r0, r3, [r4]
 8025ee6:	4607      	movge	r7, r0
 8025ee8:	460b      	movlt	r3, r1
 8025eea:	e9c4 5100 	strdge	r5, r1, [r4]
 8025eee:	4638      	mov	r0, r7
 8025ef0:	3408      	adds	r4, #8
 8025ef2:	4619      	mov	r1, r3
 8025ef4:	e73f      	b.n	8025d76 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8025ef6:	4291      	cmp	r1, r2
 8025ef8:	d925      	bls.n	8025f46 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 8025efa:	f1a2 0310 	sub.w	r3, r2, #16
 8025efe:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 8025f02:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 8025f06:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 8025f0a:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 8025f0e:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8025f12:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 8025f16:	42b5      	cmp	r5, r6
 8025f18:	dd13      	ble.n	8025f42 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 8025f1a:	461d      	mov	r5, r3
 8025f1c:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 8025f20:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 8025f24:	3b08      	subs	r3, #8
 8025f26:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8025f2a:	619e      	str	r6, [r3, #24]
 8025f2c:	42a8      	cmp	r0, r5
 8025f2e:	686e      	ldr	r6, [r5, #4]
 8025f30:	f8a3 c010 	strh.w	ip, [r3, #16]
 8025f34:	61de      	str	r6, [r3, #28]
 8025f36:	825f      	strh	r7, [r3, #18]
 8025f38:	f8a3 8014 	strh.w	r8, [r3, #20]
 8025f3c:	f8a3 e016 	strh.w	lr, [r3, #22]
 8025f40:	d1dd      	bne.n	8025efe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 8025f42:	3208      	adds	r2, #8
 8025f44:	e7d7      	b.n	8025ef6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8025f46:	466b      	mov	r3, sp
 8025f48:	429c      	cmp	r4, r3
 8025f4a:	d903      	bls.n	8025f54 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 8025f4c:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8025f50:	3c08      	subs	r4, #8
 8025f52:	e710      	b.n	8025d76 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8025f54:	b051      	add	sp, #324	; 0x144
 8025f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025f5a <_ZN8touchgfx7Outline9sortCellsEv>:
 8025f5a:	6881      	ldr	r1, [r0, #8]
 8025f5c:	b111      	cbz	r1, 8025f64 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 8025f5e:	68c0      	ldr	r0, [r0, #12]
 8025f60:	f7ff bf03 	b.w	8025d6a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8025f64:	4770      	bx	lr

08025f66 <_ZN8touchgfx7Outline8getCellsEv>:
 8025f66:	b510      	push	{r4, lr}
 8025f68:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8025f6a:	4604      	mov	r4, r0
 8025f6c:	07da      	lsls	r2, r3, #31
 8025f6e:	d507      	bpl.n	8025f80 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 8025f70:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 8025f74:	f7ff fe83 	bl	8025c7e <_ZN8touchgfx7Outline6lineToEii>
 8025f78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8025f7a:	f023 0301 	bic.w	r3, r3, #1
 8025f7e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8025f80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8025f82:	079b      	lsls	r3, r3, #30
 8025f84:	d51a      	bpl.n	8025fbc <_ZN8touchgfx7Outline8getCellsEv+0x56>
 8025f86:	8b62      	ldrh	r2, [r4, #26]
 8025f88:	8b23      	ldrh	r3, [r4, #24]
 8025f8a:	4313      	orrs	r3, r2
 8025f8c:	d00d      	beq.n	8025faa <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8025f8e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8025f92:	2b00      	cmp	r3, #0
 8025f94:	db09      	blt.n	8025faa <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8025f96:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8025f98:	4293      	cmp	r3, r2
 8025f9a:	da06      	bge.n	8025faa <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8025f9c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8025fa0:	429a      	cmp	r2, r3
 8025fa2:	d80d      	bhi.n	8025fc0 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 8025fa4:	2301      	movs	r3, #1
 8025fa6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025faa:	68a0      	ldr	r0, [r4, #8]
 8025fac:	b138      	cbz	r0, 8025fbe <_ZN8touchgfx7Outline8getCellsEv+0x58>
 8025fae:	4620      	mov	r0, r4
 8025fb0:	f7ff ffd3 	bl	8025f5a <_ZN8touchgfx7Outline9sortCellsEv>
 8025fb4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8025fb6:	f023 0302 	bic.w	r3, r3, #2
 8025fba:	63e3      	str	r3, [r4, #60]	; 0x3c
 8025fbc:	68e0      	ldr	r0, [r4, #12]
 8025fbe:	bd10      	pop	{r4, pc}
 8025fc0:	f104 0314 	add.w	r3, r4, #20
 8025fc4:	6922      	ldr	r2, [r4, #16]
 8025fc6:	cb03      	ldmia	r3!, {r0, r1}
 8025fc8:	6010      	str	r0, [r2, #0]
 8025fca:	6051      	str	r1, [r2, #4]
 8025fcc:	6923      	ldr	r3, [r4, #16]
 8025fce:	3308      	adds	r3, #8
 8025fd0:	6123      	str	r3, [r4, #16]
 8025fd2:	68a3      	ldr	r3, [r4, #8]
 8025fd4:	3301      	adds	r3, #1
 8025fd6:	60a3      	str	r3, [r4, #8]
 8025fd8:	e7e7      	b.n	8025faa <_ZN8touchgfx7Outline8getCellsEv+0x44>

08025fda <_ZN8touchgfx8ScanlineD1Ev>:
 8025fda:	4770      	bx	lr

08025fdc <_ZN8touchgfx8ScanlineD0Ev>:
 8025fdc:	b510      	push	{r4, lr}
 8025fde:	4604      	mov	r4, r0
 8025fe0:	2124      	movs	r1, #36	; 0x24
 8025fe2:	f000 f877 	bl	80260d4 <_ZdlPvj>
 8025fe6:	4620      	mov	r0, r4
 8025fe8:	bd10      	pop	{r4, pc}

08025fea <_ZN8touchgfx8Scanline5resetEv>:
 8025fea:	b510      	push	{r4, lr}
 8025fec:	4604      	mov	r4, r0
 8025fee:	f7f3 f8f9 	bl	80191e4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 8025ff2:	61a0      	str	r0, [r4, #24]
 8025ff4:	f7f3 f8fc 	bl	80191f0 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 8025ff8:	61e0      	str	r0, [r4, #28]
 8025ffa:	f7f3 f8ff 	bl	80191fc <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 8025ffe:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8026002:	6220      	str	r0, [r4, #32]
 8026004:	6160      	str	r0, [r4, #20]
 8026006:	e9c4 3301 	strd	r3, r3, [r4, #4]
 802600a:	69e3      	ldr	r3, [r4, #28]
 802600c:	6123      	str	r3, [r4, #16]
 802600e:	2300      	movs	r3, #0
 8026010:	60e3      	str	r3, [r4, #12]
 8026012:	bd10      	pop	{r4, pc}

08026014 <_ZN8touchgfx8ScanlineC1Ev>:
 8026014:	4b07      	ldr	r3, [pc, #28]	; (8026034 <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 8026016:	b510      	push	{r4, lr}
 8026018:	6003      	str	r3, [r0, #0]
 802601a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802601e:	4604      	mov	r4, r0
 8026020:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8026024:	2300      	movs	r3, #0
 8026026:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802602a:	6143      	str	r3, [r0, #20]
 802602c:	f7ff ffdd 	bl	8025fea <_ZN8touchgfx8Scanline5resetEv>
 8026030:	4620      	mov	r0, r4
 8026032:	bd10      	pop	{r4, pc}
 8026034:	0802b488 	.word	0x0802b488

08026038 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 8026038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802603c:	1e0c      	subs	r4, r1, #0
 802603e:	4605      	mov	r5, r0
 8026040:	4617      	mov	r7, r2
 8026042:	461e      	mov	r6, r3
 8026044:	da03      	bge.n	802604e <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 8026046:	4426      	add	r6, r4
 8026048:	2e01      	cmp	r6, #1
 802604a:	d421      	bmi.n	8026090 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 802604c:	2400      	movs	r4, #0
 802604e:	f7f3 f8c3 	bl	80191d8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8026052:	42a0      	cmp	r0, r4
 8026054:	d91c      	bls.n	8026090 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8026056:	eb04 0806 	add.w	r8, r4, r6
 802605a:	f7f3 f8bd 	bl	80191d8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802605e:	4580      	cmp	r8, r0
 8026060:	d902      	bls.n	8026068 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 8026062:	f7f3 f8b9 	bl	80191d8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8026066:	1b06      	subs	r6, r0, r4
 8026068:	69a8      	ldr	r0, [r5, #24]
 802606a:	4632      	mov	r2, r6
 802606c:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8026070:	4420      	add	r0, r4
 8026072:	f7f4 fdb0 	bl	801abd6 <_ZN8touchgfx6memsetEPvhm>
 8026076:	686b      	ldr	r3, [r5, #4]
 8026078:	b2b2      	uxth	r2, r6
 802607a:	3301      	adds	r3, #1
 802607c:	42a3      	cmp	r3, r4
 802607e:	696b      	ldr	r3, [r5, #20]
 8026080:	d108      	bne.n	8026094 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 8026082:	8819      	ldrh	r1, [r3, #0]
 8026084:	440a      	add	r2, r1
 8026086:	801a      	strh	r2, [r3, #0]
 8026088:	3c01      	subs	r4, #1
 802608a:	4434      	add	r4, r6
 802608c:	e9c5 4701 	strd	r4, r7, [r5, #4]
 8026090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026094:	1c99      	adds	r1, r3, #2
 8026096:	6169      	str	r1, [r5, #20]
 8026098:	805a      	strh	r2, [r3, #2]
 802609a:	692b      	ldr	r3, [r5, #16]
 802609c:	1c9a      	adds	r2, r3, #2
 802609e:	612a      	str	r2, [r5, #16]
 80260a0:	805c      	strh	r4, [r3, #2]
 80260a2:	68eb      	ldr	r3, [r5, #12]
 80260a4:	3301      	adds	r3, #1
 80260a6:	60eb      	str	r3, [r5, #12]
 80260a8:	e7ee      	b.n	8026088 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

080260aa <_ZN8touchgfx15RenderingBufferC1Ev>:
 80260aa:	2200      	movs	r2, #0
 80260ac:	6002      	str	r2, [r0, #0]
 80260ae:	7102      	strb	r2, [r0, #4]
 80260b0:	6102      	str	r2, [r0, #16]
 80260b2:	e9c0 2202 	strd	r2, r2, [r0, #8]
 80260b6:	4770      	bx	lr

080260b8 <_ZN8touchgfx15RenderingBufferD1Ev>:
 80260b8:	4770      	bx	lr

080260ba <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 80260ba:	6083      	str	r3, [r0, #8]
 80260bc:	9b00      	ldr	r3, [sp, #0]
 80260be:	6001      	str	r1, [r0, #0]
 80260c0:	60c3      	str	r3, [r0, #12]
 80260c2:	9b01      	ldr	r3, [sp, #4]
 80260c4:	7102      	strb	r2, [r0, #4]
 80260c6:	6103      	str	r3, [r0, #16]
 80260c8:	4770      	bx	lr

080260ca <__aeabi_atexit>:
 80260ca:	460b      	mov	r3, r1
 80260cc:	4601      	mov	r1, r0
 80260ce:	4618      	mov	r0, r3
 80260d0:	f000 b90e 	b.w	80262f0 <__cxa_atexit>

080260d4 <_ZdlPvj>:
 80260d4:	f000 b812 	b.w	80260fc <_ZdlPv>

080260d8 <__cxa_guard_acquire>:
 80260d8:	6803      	ldr	r3, [r0, #0]
 80260da:	07db      	lsls	r3, r3, #31
 80260dc:	d406      	bmi.n	80260ec <__cxa_guard_acquire+0x14>
 80260de:	7843      	ldrb	r3, [r0, #1]
 80260e0:	b103      	cbz	r3, 80260e4 <__cxa_guard_acquire+0xc>
 80260e2:	deff      	udf	#255	; 0xff
 80260e4:	2301      	movs	r3, #1
 80260e6:	7043      	strb	r3, [r0, #1]
 80260e8:	4618      	mov	r0, r3
 80260ea:	4770      	bx	lr
 80260ec:	2000      	movs	r0, #0
 80260ee:	4770      	bx	lr

080260f0 <__cxa_guard_release>:
 80260f0:	2301      	movs	r3, #1
 80260f2:	6003      	str	r3, [r0, #0]
 80260f4:	4770      	bx	lr

080260f6 <__cxa_pure_virtual>:
 80260f6:	b508      	push	{r3, lr}
 80260f8:	f000 f80e 	bl	8026118 <_ZSt9terminatev>

080260fc <_ZdlPv>:
 80260fc:	f000 b844 	b.w	8026188 <free>

08026100 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8026100:	b508      	push	{r3, lr}
 8026102:	4780      	blx	r0
 8026104:	f000 f80d 	bl	8026122 <abort>

08026108 <_ZSt13get_terminatev>:
 8026108:	4b02      	ldr	r3, [pc, #8]	; (8026114 <_ZSt13get_terminatev+0xc>)
 802610a:	6818      	ldr	r0, [r3, #0]
 802610c:	f3bf 8f5b 	dmb	ish
 8026110:	4770      	bx	lr
 8026112:	bf00      	nop
 8026114:	200000ac 	.word	0x200000ac

08026118 <_ZSt9terminatev>:
 8026118:	b508      	push	{r3, lr}
 802611a:	f7ff fff5 	bl	8026108 <_ZSt13get_terminatev>
 802611e:	f7ff ffef 	bl	8026100 <_ZN10__cxxabiv111__terminateEPFvvE>

08026122 <abort>:
 8026122:	b508      	push	{r3, lr}
 8026124:	2006      	movs	r0, #6
 8026126:	f000 fa27 	bl	8026578 <raise>
 802612a:	2001      	movs	r0, #1
 802612c:	f7dd fc80 	bl	8003a30 <_exit>

08026130 <__assert_func>:
 8026130:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8026132:	4614      	mov	r4, r2
 8026134:	461a      	mov	r2, r3
 8026136:	4b09      	ldr	r3, [pc, #36]	; (802615c <__assert_func+0x2c>)
 8026138:	681b      	ldr	r3, [r3, #0]
 802613a:	4605      	mov	r5, r0
 802613c:	68d8      	ldr	r0, [r3, #12]
 802613e:	b14c      	cbz	r4, 8026154 <__assert_func+0x24>
 8026140:	4b07      	ldr	r3, [pc, #28]	; (8026160 <__assert_func+0x30>)
 8026142:	9100      	str	r1, [sp, #0]
 8026144:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8026148:	4906      	ldr	r1, [pc, #24]	; (8026164 <__assert_func+0x34>)
 802614a:	462b      	mov	r3, r5
 802614c:	f000 f970 	bl	8026430 <fiprintf>
 8026150:	f7ff ffe7 	bl	8026122 <abort>
 8026154:	4b04      	ldr	r3, [pc, #16]	; (8026168 <__assert_func+0x38>)
 8026156:	461c      	mov	r4, r3
 8026158:	e7f3      	b.n	8026142 <__assert_func+0x12>
 802615a:	bf00      	nop
 802615c:	20000108 	.word	0x20000108
 8026160:	0802b490 	.word	0x0802b490
 8026164:	0802b49d 	.word	0x0802b49d
 8026168:	0802b4cb 	.word	0x0802b4cb

0802616c <atexit>:
 802616c:	2300      	movs	r3, #0
 802616e:	4601      	mov	r1, r0
 8026170:	461a      	mov	r2, r3
 8026172:	4618      	mov	r0, r3
 8026174:	f000 baac 	b.w	80266d0 <__register_exitproc>

08026178 <malloc>:
 8026178:	4b02      	ldr	r3, [pc, #8]	; (8026184 <malloc+0xc>)
 802617a:	4601      	mov	r1, r0
 802617c:	6818      	ldr	r0, [r3, #0]
 802617e:	f000 b82b 	b.w	80261d8 <_malloc_r>
 8026182:	bf00      	nop
 8026184:	20000108 	.word	0x20000108

08026188 <free>:
 8026188:	4b02      	ldr	r3, [pc, #8]	; (8026194 <free+0xc>)
 802618a:	4601      	mov	r1, r0
 802618c:	6818      	ldr	r0, [r3, #0]
 802618e:	f000 bafd 	b.w	802678c <_free_r>
 8026192:	bf00      	nop
 8026194:	20000108 	.word	0x20000108

08026198 <sbrk_aligned>:
 8026198:	b570      	push	{r4, r5, r6, lr}
 802619a:	4e0e      	ldr	r6, [pc, #56]	; (80261d4 <sbrk_aligned+0x3c>)
 802619c:	460c      	mov	r4, r1
 802619e:	6831      	ldr	r1, [r6, #0]
 80261a0:	4605      	mov	r5, r0
 80261a2:	b911      	cbnz	r1, 80261aa <sbrk_aligned+0x12>
 80261a4:	f000 fa38 	bl	8026618 <_sbrk_r>
 80261a8:	6030      	str	r0, [r6, #0]
 80261aa:	4621      	mov	r1, r4
 80261ac:	4628      	mov	r0, r5
 80261ae:	f000 fa33 	bl	8026618 <_sbrk_r>
 80261b2:	1c43      	adds	r3, r0, #1
 80261b4:	d00a      	beq.n	80261cc <sbrk_aligned+0x34>
 80261b6:	1cc4      	adds	r4, r0, #3
 80261b8:	f024 0403 	bic.w	r4, r4, #3
 80261bc:	42a0      	cmp	r0, r4
 80261be:	d007      	beq.n	80261d0 <sbrk_aligned+0x38>
 80261c0:	1a21      	subs	r1, r4, r0
 80261c2:	4628      	mov	r0, r5
 80261c4:	f000 fa28 	bl	8026618 <_sbrk_r>
 80261c8:	3001      	adds	r0, #1
 80261ca:	d101      	bne.n	80261d0 <sbrk_aligned+0x38>
 80261cc:	f04f 34ff 	mov.w	r4, #4294967295
 80261d0:	4620      	mov	r0, r4
 80261d2:	bd70      	pop	{r4, r5, r6, pc}
 80261d4:	2000c6d4 	.word	0x2000c6d4

080261d8 <_malloc_r>:
 80261d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80261dc:	1ccd      	adds	r5, r1, #3
 80261de:	f025 0503 	bic.w	r5, r5, #3
 80261e2:	3508      	adds	r5, #8
 80261e4:	2d0c      	cmp	r5, #12
 80261e6:	bf38      	it	cc
 80261e8:	250c      	movcc	r5, #12
 80261ea:	2d00      	cmp	r5, #0
 80261ec:	4607      	mov	r7, r0
 80261ee:	db01      	blt.n	80261f4 <_malloc_r+0x1c>
 80261f0:	42a9      	cmp	r1, r5
 80261f2:	d905      	bls.n	8026200 <_malloc_r+0x28>
 80261f4:	230c      	movs	r3, #12
 80261f6:	603b      	str	r3, [r7, #0]
 80261f8:	2600      	movs	r6, #0
 80261fa:	4630      	mov	r0, r6
 80261fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026200:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80262d4 <_malloc_r+0xfc>
 8026204:	f000 f868 	bl	80262d8 <__malloc_lock>
 8026208:	f8d8 3000 	ldr.w	r3, [r8]
 802620c:	461c      	mov	r4, r3
 802620e:	bb5c      	cbnz	r4, 8026268 <_malloc_r+0x90>
 8026210:	4629      	mov	r1, r5
 8026212:	4638      	mov	r0, r7
 8026214:	f7ff ffc0 	bl	8026198 <sbrk_aligned>
 8026218:	1c43      	adds	r3, r0, #1
 802621a:	4604      	mov	r4, r0
 802621c:	d155      	bne.n	80262ca <_malloc_r+0xf2>
 802621e:	f8d8 4000 	ldr.w	r4, [r8]
 8026222:	4626      	mov	r6, r4
 8026224:	2e00      	cmp	r6, #0
 8026226:	d145      	bne.n	80262b4 <_malloc_r+0xdc>
 8026228:	2c00      	cmp	r4, #0
 802622a:	d048      	beq.n	80262be <_malloc_r+0xe6>
 802622c:	6823      	ldr	r3, [r4, #0]
 802622e:	4631      	mov	r1, r6
 8026230:	4638      	mov	r0, r7
 8026232:	eb04 0903 	add.w	r9, r4, r3
 8026236:	f000 f9ef 	bl	8026618 <_sbrk_r>
 802623a:	4581      	cmp	r9, r0
 802623c:	d13f      	bne.n	80262be <_malloc_r+0xe6>
 802623e:	6821      	ldr	r1, [r4, #0]
 8026240:	1a6d      	subs	r5, r5, r1
 8026242:	4629      	mov	r1, r5
 8026244:	4638      	mov	r0, r7
 8026246:	f7ff ffa7 	bl	8026198 <sbrk_aligned>
 802624a:	3001      	adds	r0, #1
 802624c:	d037      	beq.n	80262be <_malloc_r+0xe6>
 802624e:	6823      	ldr	r3, [r4, #0]
 8026250:	442b      	add	r3, r5
 8026252:	6023      	str	r3, [r4, #0]
 8026254:	f8d8 3000 	ldr.w	r3, [r8]
 8026258:	2b00      	cmp	r3, #0
 802625a:	d038      	beq.n	80262ce <_malloc_r+0xf6>
 802625c:	685a      	ldr	r2, [r3, #4]
 802625e:	42a2      	cmp	r2, r4
 8026260:	d12b      	bne.n	80262ba <_malloc_r+0xe2>
 8026262:	2200      	movs	r2, #0
 8026264:	605a      	str	r2, [r3, #4]
 8026266:	e00f      	b.n	8026288 <_malloc_r+0xb0>
 8026268:	6822      	ldr	r2, [r4, #0]
 802626a:	1b52      	subs	r2, r2, r5
 802626c:	d41f      	bmi.n	80262ae <_malloc_r+0xd6>
 802626e:	2a0b      	cmp	r2, #11
 8026270:	d917      	bls.n	80262a2 <_malloc_r+0xca>
 8026272:	1961      	adds	r1, r4, r5
 8026274:	42a3      	cmp	r3, r4
 8026276:	6025      	str	r5, [r4, #0]
 8026278:	bf18      	it	ne
 802627a:	6059      	strne	r1, [r3, #4]
 802627c:	6863      	ldr	r3, [r4, #4]
 802627e:	bf08      	it	eq
 8026280:	f8c8 1000 	streq.w	r1, [r8]
 8026284:	5162      	str	r2, [r4, r5]
 8026286:	604b      	str	r3, [r1, #4]
 8026288:	4638      	mov	r0, r7
 802628a:	f104 060b 	add.w	r6, r4, #11
 802628e:	f000 f829 	bl	80262e4 <__malloc_unlock>
 8026292:	f026 0607 	bic.w	r6, r6, #7
 8026296:	1d23      	adds	r3, r4, #4
 8026298:	1af2      	subs	r2, r6, r3
 802629a:	d0ae      	beq.n	80261fa <_malloc_r+0x22>
 802629c:	1b9b      	subs	r3, r3, r6
 802629e:	50a3      	str	r3, [r4, r2]
 80262a0:	e7ab      	b.n	80261fa <_malloc_r+0x22>
 80262a2:	42a3      	cmp	r3, r4
 80262a4:	6862      	ldr	r2, [r4, #4]
 80262a6:	d1dd      	bne.n	8026264 <_malloc_r+0x8c>
 80262a8:	f8c8 2000 	str.w	r2, [r8]
 80262ac:	e7ec      	b.n	8026288 <_malloc_r+0xb0>
 80262ae:	4623      	mov	r3, r4
 80262b0:	6864      	ldr	r4, [r4, #4]
 80262b2:	e7ac      	b.n	802620e <_malloc_r+0x36>
 80262b4:	4634      	mov	r4, r6
 80262b6:	6876      	ldr	r6, [r6, #4]
 80262b8:	e7b4      	b.n	8026224 <_malloc_r+0x4c>
 80262ba:	4613      	mov	r3, r2
 80262bc:	e7cc      	b.n	8026258 <_malloc_r+0x80>
 80262be:	230c      	movs	r3, #12
 80262c0:	603b      	str	r3, [r7, #0]
 80262c2:	4638      	mov	r0, r7
 80262c4:	f000 f80e 	bl	80262e4 <__malloc_unlock>
 80262c8:	e797      	b.n	80261fa <_malloc_r+0x22>
 80262ca:	6025      	str	r5, [r4, #0]
 80262cc:	e7dc      	b.n	8026288 <_malloc_r+0xb0>
 80262ce:	605b      	str	r3, [r3, #4]
 80262d0:	deff      	udf	#255	; 0xff
 80262d2:	bf00      	nop
 80262d4:	2000c6d0 	.word	0x2000c6d0

080262d8 <__malloc_lock>:
 80262d8:	4801      	ldr	r0, [pc, #4]	; (80262e0 <__malloc_lock+0x8>)
 80262da:	f000 b9e9 	b.w	80266b0 <__retarget_lock_acquire_recursive>
 80262de:	bf00      	nop
 80262e0:	2000c819 	.word	0x2000c819

080262e4 <__malloc_unlock>:
 80262e4:	4801      	ldr	r0, [pc, #4]	; (80262ec <__malloc_unlock+0x8>)
 80262e6:	f000 b9e4 	b.w	80266b2 <__retarget_lock_release_recursive>
 80262ea:	bf00      	nop
 80262ec:	2000c819 	.word	0x2000c819

080262f0 <__cxa_atexit>:
 80262f0:	b510      	push	{r4, lr}
 80262f2:	4c05      	ldr	r4, [pc, #20]	; (8026308 <__cxa_atexit+0x18>)
 80262f4:	4613      	mov	r3, r2
 80262f6:	b12c      	cbz	r4, 8026304 <__cxa_atexit+0x14>
 80262f8:	460a      	mov	r2, r1
 80262fa:	4601      	mov	r1, r0
 80262fc:	2002      	movs	r0, #2
 80262fe:	f000 f9e7 	bl	80266d0 <__register_exitproc>
 8026302:	bd10      	pop	{r4, pc}
 8026304:	4620      	mov	r0, r4
 8026306:	e7fc      	b.n	8026302 <__cxa_atexit+0x12>
 8026308:	080266d1 	.word	0x080266d1

0802630c <std>:
 802630c:	2300      	movs	r3, #0
 802630e:	b510      	push	{r4, lr}
 8026310:	4604      	mov	r4, r0
 8026312:	e9c0 3300 	strd	r3, r3, [r0]
 8026316:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802631a:	6083      	str	r3, [r0, #8]
 802631c:	8181      	strh	r1, [r0, #12]
 802631e:	6643      	str	r3, [r0, #100]	; 0x64
 8026320:	81c2      	strh	r2, [r0, #14]
 8026322:	6183      	str	r3, [r0, #24]
 8026324:	4619      	mov	r1, r3
 8026326:	2208      	movs	r2, #8
 8026328:	305c      	adds	r0, #92	; 0x5c
 802632a:	f000 f8f4 	bl	8026516 <memset>
 802632e:	4b05      	ldr	r3, [pc, #20]	; (8026344 <std+0x38>)
 8026330:	6263      	str	r3, [r4, #36]	; 0x24
 8026332:	4b05      	ldr	r3, [pc, #20]	; (8026348 <std+0x3c>)
 8026334:	62a3      	str	r3, [r4, #40]	; 0x28
 8026336:	4b05      	ldr	r3, [pc, #20]	; (802634c <std+0x40>)
 8026338:	62e3      	str	r3, [r4, #44]	; 0x2c
 802633a:	4b05      	ldr	r3, [pc, #20]	; (8026350 <std+0x44>)
 802633c:	6224      	str	r4, [r4, #32]
 802633e:	6323      	str	r3, [r4, #48]	; 0x30
 8026340:	bd10      	pop	{r4, pc}
 8026342:	bf00      	nop
 8026344:	08026491 	.word	0x08026491
 8026348:	080264b3 	.word	0x080264b3
 802634c:	080264eb 	.word	0x080264eb
 8026350:	0802650f 	.word	0x0802650f

08026354 <stdio_exit_handler>:
 8026354:	4a02      	ldr	r2, [pc, #8]	; (8026360 <stdio_exit_handler+0xc>)
 8026356:	4903      	ldr	r1, [pc, #12]	; (8026364 <stdio_exit_handler+0x10>)
 8026358:	4803      	ldr	r0, [pc, #12]	; (8026368 <stdio_exit_handler+0x14>)
 802635a:	f000 b87b 	b.w	8026454 <_fwalk_sglue>
 802635e:	bf00      	nop
 8026360:	200000b0 	.word	0x200000b0
 8026364:	08026ed9 	.word	0x08026ed9
 8026368:	200000bc 	.word	0x200000bc

0802636c <cleanup_stdio>:
 802636c:	6841      	ldr	r1, [r0, #4]
 802636e:	4b0c      	ldr	r3, [pc, #48]	; (80263a0 <cleanup_stdio+0x34>)
 8026370:	4299      	cmp	r1, r3
 8026372:	b510      	push	{r4, lr}
 8026374:	4604      	mov	r4, r0
 8026376:	d001      	beq.n	802637c <cleanup_stdio+0x10>
 8026378:	f000 fdae 	bl	8026ed8 <_fflush_r>
 802637c:	68a1      	ldr	r1, [r4, #8]
 802637e:	4b09      	ldr	r3, [pc, #36]	; (80263a4 <cleanup_stdio+0x38>)
 8026380:	4299      	cmp	r1, r3
 8026382:	d002      	beq.n	802638a <cleanup_stdio+0x1e>
 8026384:	4620      	mov	r0, r4
 8026386:	f000 fda7 	bl	8026ed8 <_fflush_r>
 802638a:	68e1      	ldr	r1, [r4, #12]
 802638c:	4b06      	ldr	r3, [pc, #24]	; (80263a8 <cleanup_stdio+0x3c>)
 802638e:	4299      	cmp	r1, r3
 8026390:	d004      	beq.n	802639c <cleanup_stdio+0x30>
 8026392:	4620      	mov	r0, r4
 8026394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026398:	f000 bd9e 	b.w	8026ed8 <_fflush_r>
 802639c:	bd10      	pop	{r4, pc}
 802639e:	bf00      	nop
 80263a0:	2000c6d8 	.word	0x2000c6d8
 80263a4:	2000c740 	.word	0x2000c740
 80263a8:	2000c7a8 	.word	0x2000c7a8

080263ac <global_stdio_init.part.0>:
 80263ac:	b510      	push	{r4, lr}
 80263ae:	4b0b      	ldr	r3, [pc, #44]	; (80263dc <global_stdio_init.part.0+0x30>)
 80263b0:	4c0b      	ldr	r4, [pc, #44]	; (80263e0 <global_stdio_init.part.0+0x34>)
 80263b2:	4a0c      	ldr	r2, [pc, #48]	; (80263e4 <global_stdio_init.part.0+0x38>)
 80263b4:	601a      	str	r2, [r3, #0]
 80263b6:	4620      	mov	r0, r4
 80263b8:	2200      	movs	r2, #0
 80263ba:	2104      	movs	r1, #4
 80263bc:	f7ff ffa6 	bl	802630c <std>
 80263c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80263c4:	2201      	movs	r2, #1
 80263c6:	2109      	movs	r1, #9
 80263c8:	f7ff ffa0 	bl	802630c <std>
 80263cc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80263d0:	2202      	movs	r2, #2
 80263d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80263d6:	2112      	movs	r1, #18
 80263d8:	f7ff bf98 	b.w	802630c <std>
 80263dc:	2000c810 	.word	0x2000c810
 80263e0:	2000c6d8 	.word	0x2000c6d8
 80263e4:	08026355 	.word	0x08026355

080263e8 <__sfp_lock_acquire>:
 80263e8:	4801      	ldr	r0, [pc, #4]	; (80263f0 <__sfp_lock_acquire+0x8>)
 80263ea:	f000 b961 	b.w	80266b0 <__retarget_lock_acquire_recursive>
 80263ee:	bf00      	nop
 80263f0:	2000c81a 	.word	0x2000c81a

080263f4 <__sfp_lock_release>:
 80263f4:	4801      	ldr	r0, [pc, #4]	; (80263fc <__sfp_lock_release+0x8>)
 80263f6:	f000 b95c 	b.w	80266b2 <__retarget_lock_release_recursive>
 80263fa:	bf00      	nop
 80263fc:	2000c81a 	.word	0x2000c81a

08026400 <__sinit>:
 8026400:	b510      	push	{r4, lr}
 8026402:	4604      	mov	r4, r0
 8026404:	f7ff fff0 	bl	80263e8 <__sfp_lock_acquire>
 8026408:	6a23      	ldr	r3, [r4, #32]
 802640a:	b11b      	cbz	r3, 8026414 <__sinit+0x14>
 802640c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026410:	f7ff bff0 	b.w	80263f4 <__sfp_lock_release>
 8026414:	4b04      	ldr	r3, [pc, #16]	; (8026428 <__sinit+0x28>)
 8026416:	6223      	str	r3, [r4, #32]
 8026418:	4b04      	ldr	r3, [pc, #16]	; (802642c <__sinit+0x2c>)
 802641a:	681b      	ldr	r3, [r3, #0]
 802641c:	2b00      	cmp	r3, #0
 802641e:	d1f5      	bne.n	802640c <__sinit+0xc>
 8026420:	f7ff ffc4 	bl	80263ac <global_stdio_init.part.0>
 8026424:	e7f2      	b.n	802640c <__sinit+0xc>
 8026426:	bf00      	nop
 8026428:	0802636d 	.word	0x0802636d
 802642c:	2000c810 	.word	0x2000c810

08026430 <fiprintf>:
 8026430:	b40e      	push	{r1, r2, r3}
 8026432:	b503      	push	{r0, r1, lr}
 8026434:	4601      	mov	r1, r0
 8026436:	ab03      	add	r3, sp, #12
 8026438:	4805      	ldr	r0, [pc, #20]	; (8026450 <fiprintf+0x20>)
 802643a:	f853 2b04 	ldr.w	r2, [r3], #4
 802643e:	6800      	ldr	r0, [r0, #0]
 8026440:	9301      	str	r3, [sp, #4]
 8026442:	f000 fa19 	bl	8026878 <_vfiprintf_r>
 8026446:	b002      	add	sp, #8
 8026448:	f85d eb04 	ldr.w	lr, [sp], #4
 802644c:	b003      	add	sp, #12
 802644e:	4770      	bx	lr
 8026450:	20000108 	.word	0x20000108

08026454 <_fwalk_sglue>:
 8026454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026458:	4607      	mov	r7, r0
 802645a:	4688      	mov	r8, r1
 802645c:	4614      	mov	r4, r2
 802645e:	2600      	movs	r6, #0
 8026460:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8026464:	f1b9 0901 	subs.w	r9, r9, #1
 8026468:	d505      	bpl.n	8026476 <_fwalk_sglue+0x22>
 802646a:	6824      	ldr	r4, [r4, #0]
 802646c:	2c00      	cmp	r4, #0
 802646e:	d1f7      	bne.n	8026460 <_fwalk_sglue+0xc>
 8026470:	4630      	mov	r0, r6
 8026472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026476:	89ab      	ldrh	r3, [r5, #12]
 8026478:	2b01      	cmp	r3, #1
 802647a:	d907      	bls.n	802648c <_fwalk_sglue+0x38>
 802647c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8026480:	3301      	adds	r3, #1
 8026482:	d003      	beq.n	802648c <_fwalk_sglue+0x38>
 8026484:	4629      	mov	r1, r5
 8026486:	4638      	mov	r0, r7
 8026488:	47c0      	blx	r8
 802648a:	4306      	orrs	r6, r0
 802648c:	3568      	adds	r5, #104	; 0x68
 802648e:	e7e9      	b.n	8026464 <_fwalk_sglue+0x10>

08026490 <__sread>:
 8026490:	b510      	push	{r4, lr}
 8026492:	460c      	mov	r4, r1
 8026494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026498:	f000 f898 	bl	80265cc <_read_r>
 802649c:	2800      	cmp	r0, #0
 802649e:	bfab      	itete	ge
 80264a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80264a2:	89a3      	ldrhlt	r3, [r4, #12]
 80264a4:	181b      	addge	r3, r3, r0
 80264a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80264aa:	bfac      	ite	ge
 80264ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80264ae:	81a3      	strhlt	r3, [r4, #12]
 80264b0:	bd10      	pop	{r4, pc}

080264b2 <__swrite>:
 80264b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80264b6:	461f      	mov	r7, r3
 80264b8:	898b      	ldrh	r3, [r1, #12]
 80264ba:	05db      	lsls	r3, r3, #23
 80264bc:	4605      	mov	r5, r0
 80264be:	460c      	mov	r4, r1
 80264c0:	4616      	mov	r6, r2
 80264c2:	d505      	bpl.n	80264d0 <__swrite+0x1e>
 80264c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80264c8:	2302      	movs	r3, #2
 80264ca:	2200      	movs	r2, #0
 80264cc:	f000 f86c 	bl	80265a8 <_lseek_r>
 80264d0:	89a3      	ldrh	r3, [r4, #12]
 80264d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80264d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80264da:	81a3      	strh	r3, [r4, #12]
 80264dc:	4632      	mov	r2, r6
 80264de:	463b      	mov	r3, r7
 80264e0:	4628      	mov	r0, r5
 80264e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80264e6:	f000 b8a7 	b.w	8026638 <_write_r>

080264ea <__sseek>:
 80264ea:	b510      	push	{r4, lr}
 80264ec:	460c      	mov	r4, r1
 80264ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80264f2:	f000 f859 	bl	80265a8 <_lseek_r>
 80264f6:	1c43      	adds	r3, r0, #1
 80264f8:	89a3      	ldrh	r3, [r4, #12]
 80264fa:	bf15      	itete	ne
 80264fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80264fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8026502:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8026506:	81a3      	strheq	r3, [r4, #12]
 8026508:	bf18      	it	ne
 802650a:	81a3      	strhne	r3, [r4, #12]
 802650c:	bd10      	pop	{r4, pc}

0802650e <__sclose>:
 802650e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026512:	f000 b839 	b.w	8026588 <_close_r>

08026516 <memset>:
 8026516:	4402      	add	r2, r0
 8026518:	4603      	mov	r3, r0
 802651a:	4293      	cmp	r3, r2
 802651c:	d100      	bne.n	8026520 <memset+0xa>
 802651e:	4770      	bx	lr
 8026520:	f803 1b01 	strb.w	r1, [r3], #1
 8026524:	e7f9      	b.n	802651a <memset+0x4>

08026526 <_raise_r>:
 8026526:	291f      	cmp	r1, #31
 8026528:	b538      	push	{r3, r4, r5, lr}
 802652a:	4604      	mov	r4, r0
 802652c:	460d      	mov	r5, r1
 802652e:	d904      	bls.n	802653a <_raise_r+0x14>
 8026530:	2316      	movs	r3, #22
 8026532:	6003      	str	r3, [r0, #0]
 8026534:	f04f 30ff 	mov.w	r0, #4294967295
 8026538:	bd38      	pop	{r3, r4, r5, pc}
 802653a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 802653c:	b112      	cbz	r2, 8026544 <_raise_r+0x1e>
 802653e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8026542:	b94b      	cbnz	r3, 8026558 <_raise_r+0x32>
 8026544:	4620      	mov	r0, r4
 8026546:	f000 f865 	bl	8026614 <_getpid_r>
 802654a:	462a      	mov	r2, r5
 802654c:	4601      	mov	r1, r0
 802654e:	4620      	mov	r0, r4
 8026550:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026554:	f000 b84c 	b.w	80265f0 <_kill_r>
 8026558:	2b01      	cmp	r3, #1
 802655a:	d00a      	beq.n	8026572 <_raise_r+0x4c>
 802655c:	1c59      	adds	r1, r3, #1
 802655e:	d103      	bne.n	8026568 <_raise_r+0x42>
 8026560:	2316      	movs	r3, #22
 8026562:	6003      	str	r3, [r0, #0]
 8026564:	2001      	movs	r0, #1
 8026566:	e7e7      	b.n	8026538 <_raise_r+0x12>
 8026568:	2400      	movs	r4, #0
 802656a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802656e:	4628      	mov	r0, r5
 8026570:	4798      	blx	r3
 8026572:	2000      	movs	r0, #0
 8026574:	e7e0      	b.n	8026538 <_raise_r+0x12>
	...

08026578 <raise>:
 8026578:	4b02      	ldr	r3, [pc, #8]	; (8026584 <raise+0xc>)
 802657a:	4601      	mov	r1, r0
 802657c:	6818      	ldr	r0, [r3, #0]
 802657e:	f7ff bfd2 	b.w	8026526 <_raise_r>
 8026582:	bf00      	nop
 8026584:	20000108 	.word	0x20000108

08026588 <_close_r>:
 8026588:	b538      	push	{r3, r4, r5, lr}
 802658a:	4d06      	ldr	r5, [pc, #24]	; (80265a4 <_close_r+0x1c>)
 802658c:	2300      	movs	r3, #0
 802658e:	4604      	mov	r4, r0
 8026590:	4608      	mov	r0, r1
 8026592:	602b      	str	r3, [r5, #0]
 8026594:	f7dd fa8f 	bl	8003ab6 <_close>
 8026598:	1c43      	adds	r3, r0, #1
 802659a:	d102      	bne.n	80265a2 <_close_r+0x1a>
 802659c:	682b      	ldr	r3, [r5, #0]
 802659e:	b103      	cbz	r3, 80265a2 <_close_r+0x1a>
 80265a0:	6023      	str	r3, [r4, #0]
 80265a2:	bd38      	pop	{r3, r4, r5, pc}
 80265a4:	2000c814 	.word	0x2000c814

080265a8 <_lseek_r>:
 80265a8:	b538      	push	{r3, r4, r5, lr}
 80265aa:	4d07      	ldr	r5, [pc, #28]	; (80265c8 <_lseek_r+0x20>)
 80265ac:	4604      	mov	r4, r0
 80265ae:	4608      	mov	r0, r1
 80265b0:	4611      	mov	r1, r2
 80265b2:	2200      	movs	r2, #0
 80265b4:	602a      	str	r2, [r5, #0]
 80265b6:	461a      	mov	r2, r3
 80265b8:	f7dd faa4 	bl	8003b04 <_lseek>
 80265bc:	1c43      	adds	r3, r0, #1
 80265be:	d102      	bne.n	80265c6 <_lseek_r+0x1e>
 80265c0:	682b      	ldr	r3, [r5, #0]
 80265c2:	b103      	cbz	r3, 80265c6 <_lseek_r+0x1e>
 80265c4:	6023      	str	r3, [r4, #0]
 80265c6:	bd38      	pop	{r3, r4, r5, pc}
 80265c8:	2000c814 	.word	0x2000c814

080265cc <_read_r>:
 80265cc:	b538      	push	{r3, r4, r5, lr}
 80265ce:	4d07      	ldr	r5, [pc, #28]	; (80265ec <_read_r+0x20>)
 80265d0:	4604      	mov	r4, r0
 80265d2:	4608      	mov	r0, r1
 80265d4:	4611      	mov	r1, r2
 80265d6:	2200      	movs	r2, #0
 80265d8:	602a      	str	r2, [r5, #0]
 80265da:	461a      	mov	r2, r3
 80265dc:	f7dd fa32 	bl	8003a44 <_read>
 80265e0:	1c43      	adds	r3, r0, #1
 80265e2:	d102      	bne.n	80265ea <_read_r+0x1e>
 80265e4:	682b      	ldr	r3, [r5, #0]
 80265e6:	b103      	cbz	r3, 80265ea <_read_r+0x1e>
 80265e8:	6023      	str	r3, [r4, #0]
 80265ea:	bd38      	pop	{r3, r4, r5, pc}
 80265ec:	2000c814 	.word	0x2000c814

080265f0 <_kill_r>:
 80265f0:	b538      	push	{r3, r4, r5, lr}
 80265f2:	4d07      	ldr	r5, [pc, #28]	; (8026610 <_kill_r+0x20>)
 80265f4:	2300      	movs	r3, #0
 80265f6:	4604      	mov	r4, r0
 80265f8:	4608      	mov	r0, r1
 80265fa:	4611      	mov	r1, r2
 80265fc:	602b      	str	r3, [r5, #0]
 80265fe:	f7dd fa07 	bl	8003a10 <_kill>
 8026602:	1c43      	adds	r3, r0, #1
 8026604:	d102      	bne.n	802660c <_kill_r+0x1c>
 8026606:	682b      	ldr	r3, [r5, #0]
 8026608:	b103      	cbz	r3, 802660c <_kill_r+0x1c>
 802660a:	6023      	str	r3, [r4, #0]
 802660c:	bd38      	pop	{r3, r4, r5, pc}
 802660e:	bf00      	nop
 8026610:	2000c814 	.word	0x2000c814

08026614 <_getpid_r>:
 8026614:	f7dd b9f4 	b.w	8003a00 <_getpid>

08026618 <_sbrk_r>:
 8026618:	b538      	push	{r3, r4, r5, lr}
 802661a:	4d06      	ldr	r5, [pc, #24]	; (8026634 <_sbrk_r+0x1c>)
 802661c:	2300      	movs	r3, #0
 802661e:	4604      	mov	r4, r0
 8026620:	4608      	mov	r0, r1
 8026622:	602b      	str	r3, [r5, #0]
 8026624:	f7dd fa7c 	bl	8003b20 <_sbrk>
 8026628:	1c43      	adds	r3, r0, #1
 802662a:	d102      	bne.n	8026632 <_sbrk_r+0x1a>
 802662c:	682b      	ldr	r3, [r5, #0]
 802662e:	b103      	cbz	r3, 8026632 <_sbrk_r+0x1a>
 8026630:	6023      	str	r3, [r4, #0]
 8026632:	bd38      	pop	{r3, r4, r5, pc}
 8026634:	2000c814 	.word	0x2000c814

08026638 <_write_r>:
 8026638:	b538      	push	{r3, r4, r5, lr}
 802663a:	4d07      	ldr	r5, [pc, #28]	; (8026658 <_write_r+0x20>)
 802663c:	4604      	mov	r4, r0
 802663e:	4608      	mov	r0, r1
 8026640:	4611      	mov	r1, r2
 8026642:	2200      	movs	r2, #0
 8026644:	602a      	str	r2, [r5, #0]
 8026646:	461a      	mov	r2, r3
 8026648:	f7dd fa19 	bl	8003a7e <_write>
 802664c:	1c43      	adds	r3, r0, #1
 802664e:	d102      	bne.n	8026656 <_write_r+0x1e>
 8026650:	682b      	ldr	r3, [r5, #0]
 8026652:	b103      	cbz	r3, 8026656 <_write_r+0x1e>
 8026654:	6023      	str	r3, [r4, #0]
 8026656:	bd38      	pop	{r3, r4, r5, pc}
 8026658:	2000c814 	.word	0x2000c814

0802665c <__errno>:
 802665c:	4b01      	ldr	r3, [pc, #4]	; (8026664 <__errno+0x8>)
 802665e:	6818      	ldr	r0, [r3, #0]
 8026660:	4770      	bx	lr
 8026662:	bf00      	nop
 8026664:	20000108 	.word	0x20000108

08026668 <__libc_init_array>:
 8026668:	b570      	push	{r4, r5, r6, lr}
 802666a:	4d0d      	ldr	r5, [pc, #52]	; (80266a0 <__libc_init_array+0x38>)
 802666c:	4c0d      	ldr	r4, [pc, #52]	; (80266a4 <__libc_init_array+0x3c>)
 802666e:	1b64      	subs	r4, r4, r5
 8026670:	10a4      	asrs	r4, r4, #2
 8026672:	2600      	movs	r6, #0
 8026674:	42a6      	cmp	r6, r4
 8026676:	d109      	bne.n	802668c <__libc_init_array+0x24>
 8026678:	4d0b      	ldr	r5, [pc, #44]	; (80266a8 <__libc_init_array+0x40>)
 802667a:	4c0c      	ldr	r4, [pc, #48]	; (80266ac <__libc_init_array+0x44>)
 802667c:	f000 fd6e 	bl	802715c <_init>
 8026680:	1b64      	subs	r4, r4, r5
 8026682:	10a4      	asrs	r4, r4, #2
 8026684:	2600      	movs	r6, #0
 8026686:	42a6      	cmp	r6, r4
 8026688:	d105      	bne.n	8026696 <__libc_init_array+0x2e>
 802668a:	bd70      	pop	{r4, r5, r6, pc}
 802668c:	f855 3b04 	ldr.w	r3, [r5], #4
 8026690:	4798      	blx	r3
 8026692:	3601      	adds	r6, #1
 8026694:	e7ee      	b.n	8026674 <__libc_init_array+0xc>
 8026696:	f855 3b04 	ldr.w	r3, [r5], #4
 802669a:	4798      	blx	r3
 802669c:	3601      	adds	r6, #1
 802669e:	e7f2      	b.n	8026686 <__libc_init_array+0x1e>
 80266a0:	080628c8 	.word	0x080628c8
 80266a4:	080628c8 	.word	0x080628c8
 80266a8:	080628c8 	.word	0x080628c8
 80266ac:	080628dc 	.word	0x080628dc

080266b0 <__retarget_lock_acquire_recursive>:
 80266b0:	4770      	bx	lr

080266b2 <__retarget_lock_release_recursive>:
 80266b2:	4770      	bx	lr

080266b4 <memcpy>:
 80266b4:	440a      	add	r2, r1
 80266b6:	4291      	cmp	r1, r2
 80266b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80266bc:	d100      	bne.n	80266c0 <memcpy+0xc>
 80266be:	4770      	bx	lr
 80266c0:	b510      	push	{r4, lr}
 80266c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80266c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80266ca:	4291      	cmp	r1, r2
 80266cc:	d1f9      	bne.n	80266c2 <memcpy+0xe>
 80266ce:	bd10      	pop	{r4, pc}

080266d0 <__register_exitproc>:
 80266d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80266d4:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8026788 <__register_exitproc+0xb8>
 80266d8:	4606      	mov	r6, r0
 80266da:	f8d8 0000 	ldr.w	r0, [r8]
 80266de:	461f      	mov	r7, r3
 80266e0:	460d      	mov	r5, r1
 80266e2:	4691      	mov	r9, r2
 80266e4:	f7ff ffe4 	bl	80266b0 <__retarget_lock_acquire_recursive>
 80266e8:	4b23      	ldr	r3, [pc, #140]	; (8026778 <__register_exitproc+0xa8>)
 80266ea:	681c      	ldr	r4, [r3, #0]
 80266ec:	b934      	cbnz	r4, 80266fc <__register_exitproc+0x2c>
 80266ee:	4c23      	ldr	r4, [pc, #140]	; (802677c <__register_exitproc+0xac>)
 80266f0:	601c      	str	r4, [r3, #0]
 80266f2:	4b23      	ldr	r3, [pc, #140]	; (8026780 <__register_exitproc+0xb0>)
 80266f4:	b113      	cbz	r3, 80266fc <__register_exitproc+0x2c>
 80266f6:	681b      	ldr	r3, [r3, #0]
 80266f8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80266fc:	6863      	ldr	r3, [r4, #4]
 80266fe:	2b1f      	cmp	r3, #31
 8026700:	dd07      	ble.n	8026712 <__register_exitproc+0x42>
 8026702:	f8d8 0000 	ldr.w	r0, [r8]
 8026706:	f7ff ffd4 	bl	80266b2 <__retarget_lock_release_recursive>
 802670a:	f04f 30ff 	mov.w	r0, #4294967295
 802670e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026712:	b32e      	cbz	r6, 8026760 <__register_exitproc+0x90>
 8026714:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8026718:	b968      	cbnz	r0, 8026736 <__register_exitproc+0x66>
 802671a:	4b1a      	ldr	r3, [pc, #104]	; (8026784 <__register_exitproc+0xb4>)
 802671c:	2b00      	cmp	r3, #0
 802671e:	d0f0      	beq.n	8026702 <__register_exitproc+0x32>
 8026720:	f44f 7084 	mov.w	r0, #264	; 0x108
 8026724:	f7ff fd28 	bl	8026178 <malloc>
 8026728:	2800      	cmp	r0, #0
 802672a:	d0ea      	beq.n	8026702 <__register_exitproc+0x32>
 802672c:	2300      	movs	r3, #0
 802672e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8026732:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8026736:	6863      	ldr	r3, [r4, #4]
 8026738:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802673c:	2201      	movs	r2, #1
 802673e:	409a      	lsls	r2, r3
 8026740:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8026744:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8026748:	4313      	orrs	r3, r2
 802674a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802674e:	2e02      	cmp	r6, #2
 8026750:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8026754:	bf02      	ittt	eq
 8026756:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802675a:	4313      	orreq	r3, r2
 802675c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8026760:	6863      	ldr	r3, [r4, #4]
 8026762:	f8d8 0000 	ldr.w	r0, [r8]
 8026766:	1c5a      	adds	r2, r3, #1
 8026768:	3302      	adds	r3, #2
 802676a:	6062      	str	r2, [r4, #4]
 802676c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8026770:	f7ff ff9f 	bl	80266b2 <__retarget_lock_release_recursive>
 8026774:	2000      	movs	r0, #0
 8026776:	e7ca      	b.n	802670e <__register_exitproc+0x3e>
 8026778:	2000c8a8 	.word	0x2000c8a8
 802677c:	2000c81c 	.word	0x2000c81c
 8026780:	0802b4cc 	.word	0x0802b4cc
 8026784:	08026179 	.word	0x08026179
 8026788:	2000010c 	.word	0x2000010c

0802678c <_free_r>:
 802678c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802678e:	2900      	cmp	r1, #0
 8026790:	d044      	beq.n	802681c <_free_r+0x90>
 8026792:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026796:	9001      	str	r0, [sp, #4]
 8026798:	2b00      	cmp	r3, #0
 802679a:	f1a1 0404 	sub.w	r4, r1, #4
 802679e:	bfb8      	it	lt
 80267a0:	18e4      	addlt	r4, r4, r3
 80267a2:	f7ff fd99 	bl	80262d8 <__malloc_lock>
 80267a6:	4a1e      	ldr	r2, [pc, #120]	; (8026820 <_free_r+0x94>)
 80267a8:	9801      	ldr	r0, [sp, #4]
 80267aa:	6813      	ldr	r3, [r2, #0]
 80267ac:	b933      	cbnz	r3, 80267bc <_free_r+0x30>
 80267ae:	6063      	str	r3, [r4, #4]
 80267b0:	6014      	str	r4, [r2, #0]
 80267b2:	b003      	add	sp, #12
 80267b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80267b8:	f7ff bd94 	b.w	80262e4 <__malloc_unlock>
 80267bc:	42a3      	cmp	r3, r4
 80267be:	d908      	bls.n	80267d2 <_free_r+0x46>
 80267c0:	6825      	ldr	r5, [r4, #0]
 80267c2:	1961      	adds	r1, r4, r5
 80267c4:	428b      	cmp	r3, r1
 80267c6:	bf01      	itttt	eq
 80267c8:	6819      	ldreq	r1, [r3, #0]
 80267ca:	685b      	ldreq	r3, [r3, #4]
 80267cc:	1949      	addeq	r1, r1, r5
 80267ce:	6021      	streq	r1, [r4, #0]
 80267d0:	e7ed      	b.n	80267ae <_free_r+0x22>
 80267d2:	461a      	mov	r2, r3
 80267d4:	685b      	ldr	r3, [r3, #4]
 80267d6:	b10b      	cbz	r3, 80267dc <_free_r+0x50>
 80267d8:	42a3      	cmp	r3, r4
 80267da:	d9fa      	bls.n	80267d2 <_free_r+0x46>
 80267dc:	6811      	ldr	r1, [r2, #0]
 80267de:	1855      	adds	r5, r2, r1
 80267e0:	42a5      	cmp	r5, r4
 80267e2:	d10b      	bne.n	80267fc <_free_r+0x70>
 80267e4:	6824      	ldr	r4, [r4, #0]
 80267e6:	4421      	add	r1, r4
 80267e8:	1854      	adds	r4, r2, r1
 80267ea:	42a3      	cmp	r3, r4
 80267ec:	6011      	str	r1, [r2, #0]
 80267ee:	d1e0      	bne.n	80267b2 <_free_r+0x26>
 80267f0:	681c      	ldr	r4, [r3, #0]
 80267f2:	685b      	ldr	r3, [r3, #4]
 80267f4:	6053      	str	r3, [r2, #4]
 80267f6:	440c      	add	r4, r1
 80267f8:	6014      	str	r4, [r2, #0]
 80267fa:	e7da      	b.n	80267b2 <_free_r+0x26>
 80267fc:	d902      	bls.n	8026804 <_free_r+0x78>
 80267fe:	230c      	movs	r3, #12
 8026800:	6003      	str	r3, [r0, #0]
 8026802:	e7d6      	b.n	80267b2 <_free_r+0x26>
 8026804:	6825      	ldr	r5, [r4, #0]
 8026806:	1961      	adds	r1, r4, r5
 8026808:	428b      	cmp	r3, r1
 802680a:	bf04      	itt	eq
 802680c:	6819      	ldreq	r1, [r3, #0]
 802680e:	685b      	ldreq	r3, [r3, #4]
 8026810:	6063      	str	r3, [r4, #4]
 8026812:	bf04      	itt	eq
 8026814:	1949      	addeq	r1, r1, r5
 8026816:	6021      	streq	r1, [r4, #0]
 8026818:	6054      	str	r4, [r2, #4]
 802681a:	e7ca      	b.n	80267b2 <_free_r+0x26>
 802681c:	b003      	add	sp, #12
 802681e:	bd30      	pop	{r4, r5, pc}
 8026820:	2000c6d0 	.word	0x2000c6d0

08026824 <__sfputc_r>:
 8026824:	6893      	ldr	r3, [r2, #8]
 8026826:	3b01      	subs	r3, #1
 8026828:	2b00      	cmp	r3, #0
 802682a:	b410      	push	{r4}
 802682c:	6093      	str	r3, [r2, #8]
 802682e:	da08      	bge.n	8026842 <__sfputc_r+0x1e>
 8026830:	6994      	ldr	r4, [r2, #24]
 8026832:	42a3      	cmp	r3, r4
 8026834:	db01      	blt.n	802683a <__sfputc_r+0x16>
 8026836:	290a      	cmp	r1, #10
 8026838:	d103      	bne.n	8026842 <__sfputc_r+0x1e>
 802683a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802683e:	f000 bb73 	b.w	8026f28 <__swbuf_r>
 8026842:	6813      	ldr	r3, [r2, #0]
 8026844:	1c58      	adds	r0, r3, #1
 8026846:	6010      	str	r0, [r2, #0]
 8026848:	7019      	strb	r1, [r3, #0]
 802684a:	4608      	mov	r0, r1
 802684c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026850:	4770      	bx	lr

08026852 <__sfputs_r>:
 8026852:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026854:	4606      	mov	r6, r0
 8026856:	460f      	mov	r7, r1
 8026858:	4614      	mov	r4, r2
 802685a:	18d5      	adds	r5, r2, r3
 802685c:	42ac      	cmp	r4, r5
 802685e:	d101      	bne.n	8026864 <__sfputs_r+0x12>
 8026860:	2000      	movs	r0, #0
 8026862:	e007      	b.n	8026874 <__sfputs_r+0x22>
 8026864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026868:	463a      	mov	r2, r7
 802686a:	4630      	mov	r0, r6
 802686c:	f7ff ffda 	bl	8026824 <__sfputc_r>
 8026870:	1c43      	adds	r3, r0, #1
 8026872:	d1f3      	bne.n	802685c <__sfputs_r+0xa>
 8026874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08026878 <_vfiprintf_r>:
 8026878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802687c:	460d      	mov	r5, r1
 802687e:	b09d      	sub	sp, #116	; 0x74
 8026880:	4614      	mov	r4, r2
 8026882:	4698      	mov	r8, r3
 8026884:	4606      	mov	r6, r0
 8026886:	b118      	cbz	r0, 8026890 <_vfiprintf_r+0x18>
 8026888:	6a03      	ldr	r3, [r0, #32]
 802688a:	b90b      	cbnz	r3, 8026890 <_vfiprintf_r+0x18>
 802688c:	f7ff fdb8 	bl	8026400 <__sinit>
 8026890:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026892:	07d9      	lsls	r1, r3, #31
 8026894:	d405      	bmi.n	80268a2 <_vfiprintf_r+0x2a>
 8026896:	89ab      	ldrh	r3, [r5, #12]
 8026898:	059a      	lsls	r2, r3, #22
 802689a:	d402      	bmi.n	80268a2 <_vfiprintf_r+0x2a>
 802689c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802689e:	f7ff ff07 	bl	80266b0 <__retarget_lock_acquire_recursive>
 80268a2:	89ab      	ldrh	r3, [r5, #12]
 80268a4:	071b      	lsls	r3, r3, #28
 80268a6:	d501      	bpl.n	80268ac <_vfiprintf_r+0x34>
 80268a8:	692b      	ldr	r3, [r5, #16]
 80268aa:	b99b      	cbnz	r3, 80268d4 <_vfiprintf_r+0x5c>
 80268ac:	4629      	mov	r1, r5
 80268ae:	4630      	mov	r0, r6
 80268b0:	f000 fb78 	bl	8026fa4 <__swsetup_r>
 80268b4:	b170      	cbz	r0, 80268d4 <_vfiprintf_r+0x5c>
 80268b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80268b8:	07dc      	lsls	r4, r3, #31
 80268ba:	d504      	bpl.n	80268c6 <_vfiprintf_r+0x4e>
 80268bc:	f04f 30ff 	mov.w	r0, #4294967295
 80268c0:	b01d      	add	sp, #116	; 0x74
 80268c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80268c6:	89ab      	ldrh	r3, [r5, #12]
 80268c8:	0598      	lsls	r0, r3, #22
 80268ca:	d4f7      	bmi.n	80268bc <_vfiprintf_r+0x44>
 80268cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80268ce:	f7ff fef0 	bl	80266b2 <__retarget_lock_release_recursive>
 80268d2:	e7f3      	b.n	80268bc <_vfiprintf_r+0x44>
 80268d4:	2300      	movs	r3, #0
 80268d6:	9309      	str	r3, [sp, #36]	; 0x24
 80268d8:	2320      	movs	r3, #32
 80268da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80268de:	f8cd 800c 	str.w	r8, [sp, #12]
 80268e2:	2330      	movs	r3, #48	; 0x30
 80268e4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8026a98 <_vfiprintf_r+0x220>
 80268e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80268ec:	f04f 0901 	mov.w	r9, #1
 80268f0:	4623      	mov	r3, r4
 80268f2:	469a      	mov	sl, r3
 80268f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80268f8:	b10a      	cbz	r2, 80268fe <_vfiprintf_r+0x86>
 80268fa:	2a25      	cmp	r2, #37	; 0x25
 80268fc:	d1f9      	bne.n	80268f2 <_vfiprintf_r+0x7a>
 80268fe:	ebba 0b04 	subs.w	fp, sl, r4
 8026902:	d00b      	beq.n	802691c <_vfiprintf_r+0xa4>
 8026904:	465b      	mov	r3, fp
 8026906:	4622      	mov	r2, r4
 8026908:	4629      	mov	r1, r5
 802690a:	4630      	mov	r0, r6
 802690c:	f7ff ffa1 	bl	8026852 <__sfputs_r>
 8026910:	3001      	adds	r0, #1
 8026912:	f000 80a9 	beq.w	8026a68 <_vfiprintf_r+0x1f0>
 8026916:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026918:	445a      	add	r2, fp
 802691a:	9209      	str	r2, [sp, #36]	; 0x24
 802691c:	f89a 3000 	ldrb.w	r3, [sl]
 8026920:	2b00      	cmp	r3, #0
 8026922:	f000 80a1 	beq.w	8026a68 <_vfiprintf_r+0x1f0>
 8026926:	2300      	movs	r3, #0
 8026928:	f04f 32ff 	mov.w	r2, #4294967295
 802692c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8026930:	f10a 0a01 	add.w	sl, sl, #1
 8026934:	9304      	str	r3, [sp, #16]
 8026936:	9307      	str	r3, [sp, #28]
 8026938:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802693c:	931a      	str	r3, [sp, #104]	; 0x68
 802693e:	4654      	mov	r4, sl
 8026940:	2205      	movs	r2, #5
 8026942:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026946:	4854      	ldr	r0, [pc, #336]	; (8026a98 <_vfiprintf_r+0x220>)
 8026948:	f7d9 fc62 	bl	8000210 <memchr>
 802694c:	9a04      	ldr	r2, [sp, #16]
 802694e:	b9d8      	cbnz	r0, 8026988 <_vfiprintf_r+0x110>
 8026950:	06d1      	lsls	r1, r2, #27
 8026952:	bf44      	itt	mi
 8026954:	2320      	movmi	r3, #32
 8026956:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802695a:	0713      	lsls	r3, r2, #28
 802695c:	bf44      	itt	mi
 802695e:	232b      	movmi	r3, #43	; 0x2b
 8026960:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026964:	f89a 3000 	ldrb.w	r3, [sl]
 8026968:	2b2a      	cmp	r3, #42	; 0x2a
 802696a:	d015      	beq.n	8026998 <_vfiprintf_r+0x120>
 802696c:	9a07      	ldr	r2, [sp, #28]
 802696e:	4654      	mov	r4, sl
 8026970:	2000      	movs	r0, #0
 8026972:	f04f 0c0a 	mov.w	ip, #10
 8026976:	4621      	mov	r1, r4
 8026978:	f811 3b01 	ldrb.w	r3, [r1], #1
 802697c:	3b30      	subs	r3, #48	; 0x30
 802697e:	2b09      	cmp	r3, #9
 8026980:	d94d      	bls.n	8026a1e <_vfiprintf_r+0x1a6>
 8026982:	b1b0      	cbz	r0, 80269b2 <_vfiprintf_r+0x13a>
 8026984:	9207      	str	r2, [sp, #28]
 8026986:	e014      	b.n	80269b2 <_vfiprintf_r+0x13a>
 8026988:	eba0 0308 	sub.w	r3, r0, r8
 802698c:	fa09 f303 	lsl.w	r3, r9, r3
 8026990:	4313      	orrs	r3, r2
 8026992:	9304      	str	r3, [sp, #16]
 8026994:	46a2      	mov	sl, r4
 8026996:	e7d2      	b.n	802693e <_vfiprintf_r+0xc6>
 8026998:	9b03      	ldr	r3, [sp, #12]
 802699a:	1d19      	adds	r1, r3, #4
 802699c:	681b      	ldr	r3, [r3, #0]
 802699e:	9103      	str	r1, [sp, #12]
 80269a0:	2b00      	cmp	r3, #0
 80269a2:	bfbb      	ittet	lt
 80269a4:	425b      	neglt	r3, r3
 80269a6:	f042 0202 	orrlt.w	r2, r2, #2
 80269aa:	9307      	strge	r3, [sp, #28]
 80269ac:	9307      	strlt	r3, [sp, #28]
 80269ae:	bfb8      	it	lt
 80269b0:	9204      	strlt	r2, [sp, #16]
 80269b2:	7823      	ldrb	r3, [r4, #0]
 80269b4:	2b2e      	cmp	r3, #46	; 0x2e
 80269b6:	d10c      	bne.n	80269d2 <_vfiprintf_r+0x15a>
 80269b8:	7863      	ldrb	r3, [r4, #1]
 80269ba:	2b2a      	cmp	r3, #42	; 0x2a
 80269bc:	d134      	bne.n	8026a28 <_vfiprintf_r+0x1b0>
 80269be:	9b03      	ldr	r3, [sp, #12]
 80269c0:	1d1a      	adds	r2, r3, #4
 80269c2:	681b      	ldr	r3, [r3, #0]
 80269c4:	9203      	str	r2, [sp, #12]
 80269c6:	2b00      	cmp	r3, #0
 80269c8:	bfb8      	it	lt
 80269ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80269ce:	3402      	adds	r4, #2
 80269d0:	9305      	str	r3, [sp, #20]
 80269d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8026aa8 <_vfiprintf_r+0x230>
 80269d6:	7821      	ldrb	r1, [r4, #0]
 80269d8:	2203      	movs	r2, #3
 80269da:	4650      	mov	r0, sl
 80269dc:	f7d9 fc18 	bl	8000210 <memchr>
 80269e0:	b138      	cbz	r0, 80269f2 <_vfiprintf_r+0x17a>
 80269e2:	9b04      	ldr	r3, [sp, #16]
 80269e4:	eba0 000a 	sub.w	r0, r0, sl
 80269e8:	2240      	movs	r2, #64	; 0x40
 80269ea:	4082      	lsls	r2, r0
 80269ec:	4313      	orrs	r3, r2
 80269ee:	3401      	adds	r4, #1
 80269f0:	9304      	str	r3, [sp, #16]
 80269f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80269f6:	4829      	ldr	r0, [pc, #164]	; (8026a9c <_vfiprintf_r+0x224>)
 80269f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80269fc:	2206      	movs	r2, #6
 80269fe:	f7d9 fc07 	bl	8000210 <memchr>
 8026a02:	2800      	cmp	r0, #0
 8026a04:	d03f      	beq.n	8026a86 <_vfiprintf_r+0x20e>
 8026a06:	4b26      	ldr	r3, [pc, #152]	; (8026aa0 <_vfiprintf_r+0x228>)
 8026a08:	bb1b      	cbnz	r3, 8026a52 <_vfiprintf_r+0x1da>
 8026a0a:	9b03      	ldr	r3, [sp, #12]
 8026a0c:	3307      	adds	r3, #7
 8026a0e:	f023 0307 	bic.w	r3, r3, #7
 8026a12:	3308      	adds	r3, #8
 8026a14:	9303      	str	r3, [sp, #12]
 8026a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026a18:	443b      	add	r3, r7
 8026a1a:	9309      	str	r3, [sp, #36]	; 0x24
 8026a1c:	e768      	b.n	80268f0 <_vfiprintf_r+0x78>
 8026a1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8026a22:	460c      	mov	r4, r1
 8026a24:	2001      	movs	r0, #1
 8026a26:	e7a6      	b.n	8026976 <_vfiprintf_r+0xfe>
 8026a28:	2300      	movs	r3, #0
 8026a2a:	3401      	adds	r4, #1
 8026a2c:	9305      	str	r3, [sp, #20]
 8026a2e:	4619      	mov	r1, r3
 8026a30:	f04f 0c0a 	mov.w	ip, #10
 8026a34:	4620      	mov	r0, r4
 8026a36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026a3a:	3a30      	subs	r2, #48	; 0x30
 8026a3c:	2a09      	cmp	r2, #9
 8026a3e:	d903      	bls.n	8026a48 <_vfiprintf_r+0x1d0>
 8026a40:	2b00      	cmp	r3, #0
 8026a42:	d0c6      	beq.n	80269d2 <_vfiprintf_r+0x15a>
 8026a44:	9105      	str	r1, [sp, #20]
 8026a46:	e7c4      	b.n	80269d2 <_vfiprintf_r+0x15a>
 8026a48:	fb0c 2101 	mla	r1, ip, r1, r2
 8026a4c:	4604      	mov	r4, r0
 8026a4e:	2301      	movs	r3, #1
 8026a50:	e7f0      	b.n	8026a34 <_vfiprintf_r+0x1bc>
 8026a52:	ab03      	add	r3, sp, #12
 8026a54:	9300      	str	r3, [sp, #0]
 8026a56:	462a      	mov	r2, r5
 8026a58:	4b12      	ldr	r3, [pc, #72]	; (8026aa4 <_vfiprintf_r+0x22c>)
 8026a5a:	a904      	add	r1, sp, #16
 8026a5c:	4630      	mov	r0, r6
 8026a5e:	f3af 8000 	nop.w
 8026a62:	4607      	mov	r7, r0
 8026a64:	1c78      	adds	r0, r7, #1
 8026a66:	d1d6      	bne.n	8026a16 <_vfiprintf_r+0x19e>
 8026a68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026a6a:	07d9      	lsls	r1, r3, #31
 8026a6c:	d405      	bmi.n	8026a7a <_vfiprintf_r+0x202>
 8026a6e:	89ab      	ldrh	r3, [r5, #12]
 8026a70:	059a      	lsls	r2, r3, #22
 8026a72:	d402      	bmi.n	8026a7a <_vfiprintf_r+0x202>
 8026a74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026a76:	f7ff fe1c 	bl	80266b2 <__retarget_lock_release_recursive>
 8026a7a:	89ab      	ldrh	r3, [r5, #12]
 8026a7c:	065b      	lsls	r3, r3, #25
 8026a7e:	f53f af1d 	bmi.w	80268bc <_vfiprintf_r+0x44>
 8026a82:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026a84:	e71c      	b.n	80268c0 <_vfiprintf_r+0x48>
 8026a86:	ab03      	add	r3, sp, #12
 8026a88:	9300      	str	r3, [sp, #0]
 8026a8a:	462a      	mov	r2, r5
 8026a8c:	4b05      	ldr	r3, [pc, #20]	; (8026aa4 <_vfiprintf_r+0x22c>)
 8026a8e:	a904      	add	r1, sp, #16
 8026a90:	4630      	mov	r0, r6
 8026a92:	f000 f879 	bl	8026b88 <_printf_i>
 8026a96:	e7e4      	b.n	8026a62 <_vfiprintf_r+0x1ea>
 8026a98:	0802b4d0 	.word	0x0802b4d0
 8026a9c:	0802b4da 	.word	0x0802b4da
 8026aa0:	00000000 	.word	0x00000000
 8026aa4:	08026853 	.word	0x08026853
 8026aa8:	0802b4d6 	.word	0x0802b4d6

08026aac <_printf_common>:
 8026aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026ab0:	4616      	mov	r6, r2
 8026ab2:	4699      	mov	r9, r3
 8026ab4:	688a      	ldr	r2, [r1, #8]
 8026ab6:	690b      	ldr	r3, [r1, #16]
 8026ab8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8026abc:	4293      	cmp	r3, r2
 8026abe:	bfb8      	it	lt
 8026ac0:	4613      	movlt	r3, r2
 8026ac2:	6033      	str	r3, [r6, #0]
 8026ac4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8026ac8:	4607      	mov	r7, r0
 8026aca:	460c      	mov	r4, r1
 8026acc:	b10a      	cbz	r2, 8026ad2 <_printf_common+0x26>
 8026ace:	3301      	adds	r3, #1
 8026ad0:	6033      	str	r3, [r6, #0]
 8026ad2:	6823      	ldr	r3, [r4, #0]
 8026ad4:	0699      	lsls	r1, r3, #26
 8026ad6:	bf42      	ittt	mi
 8026ad8:	6833      	ldrmi	r3, [r6, #0]
 8026ada:	3302      	addmi	r3, #2
 8026adc:	6033      	strmi	r3, [r6, #0]
 8026ade:	6825      	ldr	r5, [r4, #0]
 8026ae0:	f015 0506 	ands.w	r5, r5, #6
 8026ae4:	d106      	bne.n	8026af4 <_printf_common+0x48>
 8026ae6:	f104 0a19 	add.w	sl, r4, #25
 8026aea:	68e3      	ldr	r3, [r4, #12]
 8026aec:	6832      	ldr	r2, [r6, #0]
 8026aee:	1a9b      	subs	r3, r3, r2
 8026af0:	42ab      	cmp	r3, r5
 8026af2:	dc26      	bgt.n	8026b42 <_printf_common+0x96>
 8026af4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8026af8:	1e13      	subs	r3, r2, #0
 8026afa:	6822      	ldr	r2, [r4, #0]
 8026afc:	bf18      	it	ne
 8026afe:	2301      	movne	r3, #1
 8026b00:	0692      	lsls	r2, r2, #26
 8026b02:	d42b      	bmi.n	8026b5c <_printf_common+0xb0>
 8026b04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8026b08:	4649      	mov	r1, r9
 8026b0a:	4638      	mov	r0, r7
 8026b0c:	47c0      	blx	r8
 8026b0e:	3001      	adds	r0, #1
 8026b10:	d01e      	beq.n	8026b50 <_printf_common+0xa4>
 8026b12:	6823      	ldr	r3, [r4, #0]
 8026b14:	6922      	ldr	r2, [r4, #16]
 8026b16:	f003 0306 	and.w	r3, r3, #6
 8026b1a:	2b04      	cmp	r3, #4
 8026b1c:	bf02      	ittt	eq
 8026b1e:	68e5      	ldreq	r5, [r4, #12]
 8026b20:	6833      	ldreq	r3, [r6, #0]
 8026b22:	1aed      	subeq	r5, r5, r3
 8026b24:	68a3      	ldr	r3, [r4, #8]
 8026b26:	bf0c      	ite	eq
 8026b28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8026b2c:	2500      	movne	r5, #0
 8026b2e:	4293      	cmp	r3, r2
 8026b30:	bfc4      	itt	gt
 8026b32:	1a9b      	subgt	r3, r3, r2
 8026b34:	18ed      	addgt	r5, r5, r3
 8026b36:	2600      	movs	r6, #0
 8026b38:	341a      	adds	r4, #26
 8026b3a:	42b5      	cmp	r5, r6
 8026b3c:	d11a      	bne.n	8026b74 <_printf_common+0xc8>
 8026b3e:	2000      	movs	r0, #0
 8026b40:	e008      	b.n	8026b54 <_printf_common+0xa8>
 8026b42:	2301      	movs	r3, #1
 8026b44:	4652      	mov	r2, sl
 8026b46:	4649      	mov	r1, r9
 8026b48:	4638      	mov	r0, r7
 8026b4a:	47c0      	blx	r8
 8026b4c:	3001      	adds	r0, #1
 8026b4e:	d103      	bne.n	8026b58 <_printf_common+0xac>
 8026b50:	f04f 30ff 	mov.w	r0, #4294967295
 8026b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026b58:	3501      	adds	r5, #1
 8026b5a:	e7c6      	b.n	8026aea <_printf_common+0x3e>
 8026b5c:	18e1      	adds	r1, r4, r3
 8026b5e:	1c5a      	adds	r2, r3, #1
 8026b60:	2030      	movs	r0, #48	; 0x30
 8026b62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8026b66:	4422      	add	r2, r4
 8026b68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8026b6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8026b70:	3302      	adds	r3, #2
 8026b72:	e7c7      	b.n	8026b04 <_printf_common+0x58>
 8026b74:	2301      	movs	r3, #1
 8026b76:	4622      	mov	r2, r4
 8026b78:	4649      	mov	r1, r9
 8026b7a:	4638      	mov	r0, r7
 8026b7c:	47c0      	blx	r8
 8026b7e:	3001      	adds	r0, #1
 8026b80:	d0e6      	beq.n	8026b50 <_printf_common+0xa4>
 8026b82:	3601      	adds	r6, #1
 8026b84:	e7d9      	b.n	8026b3a <_printf_common+0x8e>
	...

08026b88 <_printf_i>:
 8026b88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8026b8c:	7e0f      	ldrb	r7, [r1, #24]
 8026b8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026b90:	2f78      	cmp	r7, #120	; 0x78
 8026b92:	4691      	mov	r9, r2
 8026b94:	4680      	mov	r8, r0
 8026b96:	460c      	mov	r4, r1
 8026b98:	469a      	mov	sl, r3
 8026b9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8026b9e:	d807      	bhi.n	8026bb0 <_printf_i+0x28>
 8026ba0:	2f62      	cmp	r7, #98	; 0x62
 8026ba2:	d80a      	bhi.n	8026bba <_printf_i+0x32>
 8026ba4:	2f00      	cmp	r7, #0
 8026ba6:	f000 80d4 	beq.w	8026d52 <_printf_i+0x1ca>
 8026baa:	2f58      	cmp	r7, #88	; 0x58
 8026bac:	f000 80c0 	beq.w	8026d30 <_printf_i+0x1a8>
 8026bb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8026bb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8026bb8:	e03a      	b.n	8026c30 <_printf_i+0xa8>
 8026bba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8026bbe:	2b15      	cmp	r3, #21
 8026bc0:	d8f6      	bhi.n	8026bb0 <_printf_i+0x28>
 8026bc2:	a101      	add	r1, pc, #4	; (adr r1, 8026bc8 <_printf_i+0x40>)
 8026bc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8026bc8:	08026c21 	.word	0x08026c21
 8026bcc:	08026c35 	.word	0x08026c35
 8026bd0:	08026bb1 	.word	0x08026bb1
 8026bd4:	08026bb1 	.word	0x08026bb1
 8026bd8:	08026bb1 	.word	0x08026bb1
 8026bdc:	08026bb1 	.word	0x08026bb1
 8026be0:	08026c35 	.word	0x08026c35
 8026be4:	08026bb1 	.word	0x08026bb1
 8026be8:	08026bb1 	.word	0x08026bb1
 8026bec:	08026bb1 	.word	0x08026bb1
 8026bf0:	08026bb1 	.word	0x08026bb1
 8026bf4:	08026d39 	.word	0x08026d39
 8026bf8:	08026c61 	.word	0x08026c61
 8026bfc:	08026cf3 	.word	0x08026cf3
 8026c00:	08026bb1 	.word	0x08026bb1
 8026c04:	08026bb1 	.word	0x08026bb1
 8026c08:	08026d5b 	.word	0x08026d5b
 8026c0c:	08026bb1 	.word	0x08026bb1
 8026c10:	08026c61 	.word	0x08026c61
 8026c14:	08026bb1 	.word	0x08026bb1
 8026c18:	08026bb1 	.word	0x08026bb1
 8026c1c:	08026cfb 	.word	0x08026cfb
 8026c20:	682b      	ldr	r3, [r5, #0]
 8026c22:	1d1a      	adds	r2, r3, #4
 8026c24:	681b      	ldr	r3, [r3, #0]
 8026c26:	602a      	str	r2, [r5, #0]
 8026c28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8026c2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8026c30:	2301      	movs	r3, #1
 8026c32:	e09f      	b.n	8026d74 <_printf_i+0x1ec>
 8026c34:	6820      	ldr	r0, [r4, #0]
 8026c36:	682b      	ldr	r3, [r5, #0]
 8026c38:	0607      	lsls	r7, r0, #24
 8026c3a:	f103 0104 	add.w	r1, r3, #4
 8026c3e:	6029      	str	r1, [r5, #0]
 8026c40:	d501      	bpl.n	8026c46 <_printf_i+0xbe>
 8026c42:	681e      	ldr	r6, [r3, #0]
 8026c44:	e003      	b.n	8026c4e <_printf_i+0xc6>
 8026c46:	0646      	lsls	r6, r0, #25
 8026c48:	d5fb      	bpl.n	8026c42 <_printf_i+0xba>
 8026c4a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8026c4e:	2e00      	cmp	r6, #0
 8026c50:	da03      	bge.n	8026c5a <_printf_i+0xd2>
 8026c52:	232d      	movs	r3, #45	; 0x2d
 8026c54:	4276      	negs	r6, r6
 8026c56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026c5a:	485a      	ldr	r0, [pc, #360]	; (8026dc4 <_printf_i+0x23c>)
 8026c5c:	230a      	movs	r3, #10
 8026c5e:	e012      	b.n	8026c86 <_printf_i+0xfe>
 8026c60:	682b      	ldr	r3, [r5, #0]
 8026c62:	6820      	ldr	r0, [r4, #0]
 8026c64:	1d19      	adds	r1, r3, #4
 8026c66:	6029      	str	r1, [r5, #0]
 8026c68:	0605      	lsls	r5, r0, #24
 8026c6a:	d501      	bpl.n	8026c70 <_printf_i+0xe8>
 8026c6c:	681e      	ldr	r6, [r3, #0]
 8026c6e:	e002      	b.n	8026c76 <_printf_i+0xee>
 8026c70:	0641      	lsls	r1, r0, #25
 8026c72:	d5fb      	bpl.n	8026c6c <_printf_i+0xe4>
 8026c74:	881e      	ldrh	r6, [r3, #0]
 8026c76:	4853      	ldr	r0, [pc, #332]	; (8026dc4 <_printf_i+0x23c>)
 8026c78:	2f6f      	cmp	r7, #111	; 0x6f
 8026c7a:	bf0c      	ite	eq
 8026c7c:	2308      	moveq	r3, #8
 8026c7e:	230a      	movne	r3, #10
 8026c80:	2100      	movs	r1, #0
 8026c82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8026c86:	6865      	ldr	r5, [r4, #4]
 8026c88:	60a5      	str	r5, [r4, #8]
 8026c8a:	2d00      	cmp	r5, #0
 8026c8c:	bfa2      	ittt	ge
 8026c8e:	6821      	ldrge	r1, [r4, #0]
 8026c90:	f021 0104 	bicge.w	r1, r1, #4
 8026c94:	6021      	strge	r1, [r4, #0]
 8026c96:	b90e      	cbnz	r6, 8026c9c <_printf_i+0x114>
 8026c98:	2d00      	cmp	r5, #0
 8026c9a:	d04b      	beq.n	8026d34 <_printf_i+0x1ac>
 8026c9c:	4615      	mov	r5, r2
 8026c9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8026ca2:	fb03 6711 	mls	r7, r3, r1, r6
 8026ca6:	5dc7      	ldrb	r7, [r0, r7]
 8026ca8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8026cac:	4637      	mov	r7, r6
 8026cae:	42bb      	cmp	r3, r7
 8026cb0:	460e      	mov	r6, r1
 8026cb2:	d9f4      	bls.n	8026c9e <_printf_i+0x116>
 8026cb4:	2b08      	cmp	r3, #8
 8026cb6:	d10b      	bne.n	8026cd0 <_printf_i+0x148>
 8026cb8:	6823      	ldr	r3, [r4, #0]
 8026cba:	07de      	lsls	r6, r3, #31
 8026cbc:	d508      	bpl.n	8026cd0 <_printf_i+0x148>
 8026cbe:	6923      	ldr	r3, [r4, #16]
 8026cc0:	6861      	ldr	r1, [r4, #4]
 8026cc2:	4299      	cmp	r1, r3
 8026cc4:	bfde      	ittt	le
 8026cc6:	2330      	movle	r3, #48	; 0x30
 8026cc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8026ccc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8026cd0:	1b52      	subs	r2, r2, r5
 8026cd2:	6122      	str	r2, [r4, #16]
 8026cd4:	f8cd a000 	str.w	sl, [sp]
 8026cd8:	464b      	mov	r3, r9
 8026cda:	aa03      	add	r2, sp, #12
 8026cdc:	4621      	mov	r1, r4
 8026cde:	4640      	mov	r0, r8
 8026ce0:	f7ff fee4 	bl	8026aac <_printf_common>
 8026ce4:	3001      	adds	r0, #1
 8026ce6:	d14a      	bne.n	8026d7e <_printf_i+0x1f6>
 8026ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8026cec:	b004      	add	sp, #16
 8026cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026cf2:	6823      	ldr	r3, [r4, #0]
 8026cf4:	f043 0320 	orr.w	r3, r3, #32
 8026cf8:	6023      	str	r3, [r4, #0]
 8026cfa:	4833      	ldr	r0, [pc, #204]	; (8026dc8 <_printf_i+0x240>)
 8026cfc:	2778      	movs	r7, #120	; 0x78
 8026cfe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8026d02:	6823      	ldr	r3, [r4, #0]
 8026d04:	6829      	ldr	r1, [r5, #0]
 8026d06:	061f      	lsls	r7, r3, #24
 8026d08:	f851 6b04 	ldr.w	r6, [r1], #4
 8026d0c:	d402      	bmi.n	8026d14 <_printf_i+0x18c>
 8026d0e:	065f      	lsls	r7, r3, #25
 8026d10:	bf48      	it	mi
 8026d12:	b2b6      	uxthmi	r6, r6
 8026d14:	07df      	lsls	r7, r3, #31
 8026d16:	bf48      	it	mi
 8026d18:	f043 0320 	orrmi.w	r3, r3, #32
 8026d1c:	6029      	str	r1, [r5, #0]
 8026d1e:	bf48      	it	mi
 8026d20:	6023      	strmi	r3, [r4, #0]
 8026d22:	b91e      	cbnz	r6, 8026d2c <_printf_i+0x1a4>
 8026d24:	6823      	ldr	r3, [r4, #0]
 8026d26:	f023 0320 	bic.w	r3, r3, #32
 8026d2a:	6023      	str	r3, [r4, #0]
 8026d2c:	2310      	movs	r3, #16
 8026d2e:	e7a7      	b.n	8026c80 <_printf_i+0xf8>
 8026d30:	4824      	ldr	r0, [pc, #144]	; (8026dc4 <_printf_i+0x23c>)
 8026d32:	e7e4      	b.n	8026cfe <_printf_i+0x176>
 8026d34:	4615      	mov	r5, r2
 8026d36:	e7bd      	b.n	8026cb4 <_printf_i+0x12c>
 8026d38:	682b      	ldr	r3, [r5, #0]
 8026d3a:	6826      	ldr	r6, [r4, #0]
 8026d3c:	6961      	ldr	r1, [r4, #20]
 8026d3e:	1d18      	adds	r0, r3, #4
 8026d40:	6028      	str	r0, [r5, #0]
 8026d42:	0635      	lsls	r5, r6, #24
 8026d44:	681b      	ldr	r3, [r3, #0]
 8026d46:	d501      	bpl.n	8026d4c <_printf_i+0x1c4>
 8026d48:	6019      	str	r1, [r3, #0]
 8026d4a:	e002      	b.n	8026d52 <_printf_i+0x1ca>
 8026d4c:	0670      	lsls	r0, r6, #25
 8026d4e:	d5fb      	bpl.n	8026d48 <_printf_i+0x1c0>
 8026d50:	8019      	strh	r1, [r3, #0]
 8026d52:	2300      	movs	r3, #0
 8026d54:	6123      	str	r3, [r4, #16]
 8026d56:	4615      	mov	r5, r2
 8026d58:	e7bc      	b.n	8026cd4 <_printf_i+0x14c>
 8026d5a:	682b      	ldr	r3, [r5, #0]
 8026d5c:	1d1a      	adds	r2, r3, #4
 8026d5e:	602a      	str	r2, [r5, #0]
 8026d60:	681d      	ldr	r5, [r3, #0]
 8026d62:	6862      	ldr	r2, [r4, #4]
 8026d64:	2100      	movs	r1, #0
 8026d66:	4628      	mov	r0, r5
 8026d68:	f7d9 fa52 	bl	8000210 <memchr>
 8026d6c:	b108      	cbz	r0, 8026d72 <_printf_i+0x1ea>
 8026d6e:	1b40      	subs	r0, r0, r5
 8026d70:	6060      	str	r0, [r4, #4]
 8026d72:	6863      	ldr	r3, [r4, #4]
 8026d74:	6123      	str	r3, [r4, #16]
 8026d76:	2300      	movs	r3, #0
 8026d78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026d7c:	e7aa      	b.n	8026cd4 <_printf_i+0x14c>
 8026d7e:	6923      	ldr	r3, [r4, #16]
 8026d80:	462a      	mov	r2, r5
 8026d82:	4649      	mov	r1, r9
 8026d84:	4640      	mov	r0, r8
 8026d86:	47d0      	blx	sl
 8026d88:	3001      	adds	r0, #1
 8026d8a:	d0ad      	beq.n	8026ce8 <_printf_i+0x160>
 8026d8c:	6823      	ldr	r3, [r4, #0]
 8026d8e:	079b      	lsls	r3, r3, #30
 8026d90:	d413      	bmi.n	8026dba <_printf_i+0x232>
 8026d92:	68e0      	ldr	r0, [r4, #12]
 8026d94:	9b03      	ldr	r3, [sp, #12]
 8026d96:	4298      	cmp	r0, r3
 8026d98:	bfb8      	it	lt
 8026d9a:	4618      	movlt	r0, r3
 8026d9c:	e7a6      	b.n	8026cec <_printf_i+0x164>
 8026d9e:	2301      	movs	r3, #1
 8026da0:	4632      	mov	r2, r6
 8026da2:	4649      	mov	r1, r9
 8026da4:	4640      	mov	r0, r8
 8026da6:	47d0      	blx	sl
 8026da8:	3001      	adds	r0, #1
 8026daa:	d09d      	beq.n	8026ce8 <_printf_i+0x160>
 8026dac:	3501      	adds	r5, #1
 8026dae:	68e3      	ldr	r3, [r4, #12]
 8026db0:	9903      	ldr	r1, [sp, #12]
 8026db2:	1a5b      	subs	r3, r3, r1
 8026db4:	42ab      	cmp	r3, r5
 8026db6:	dcf2      	bgt.n	8026d9e <_printf_i+0x216>
 8026db8:	e7eb      	b.n	8026d92 <_printf_i+0x20a>
 8026dba:	2500      	movs	r5, #0
 8026dbc:	f104 0619 	add.w	r6, r4, #25
 8026dc0:	e7f5      	b.n	8026dae <_printf_i+0x226>
 8026dc2:	bf00      	nop
 8026dc4:	0802b4e1 	.word	0x0802b4e1
 8026dc8:	0802b4f2 	.word	0x0802b4f2

08026dcc <__sflush_r>:
 8026dcc:	898a      	ldrh	r2, [r1, #12]
 8026dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026dd2:	4605      	mov	r5, r0
 8026dd4:	0710      	lsls	r0, r2, #28
 8026dd6:	460c      	mov	r4, r1
 8026dd8:	d458      	bmi.n	8026e8c <__sflush_r+0xc0>
 8026dda:	684b      	ldr	r3, [r1, #4]
 8026ddc:	2b00      	cmp	r3, #0
 8026dde:	dc05      	bgt.n	8026dec <__sflush_r+0x20>
 8026de0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8026de2:	2b00      	cmp	r3, #0
 8026de4:	dc02      	bgt.n	8026dec <__sflush_r+0x20>
 8026de6:	2000      	movs	r0, #0
 8026de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026dec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8026dee:	2e00      	cmp	r6, #0
 8026df0:	d0f9      	beq.n	8026de6 <__sflush_r+0x1a>
 8026df2:	2300      	movs	r3, #0
 8026df4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8026df8:	682f      	ldr	r7, [r5, #0]
 8026dfa:	6a21      	ldr	r1, [r4, #32]
 8026dfc:	602b      	str	r3, [r5, #0]
 8026dfe:	d032      	beq.n	8026e66 <__sflush_r+0x9a>
 8026e00:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8026e02:	89a3      	ldrh	r3, [r4, #12]
 8026e04:	075a      	lsls	r2, r3, #29
 8026e06:	d505      	bpl.n	8026e14 <__sflush_r+0x48>
 8026e08:	6863      	ldr	r3, [r4, #4]
 8026e0a:	1ac0      	subs	r0, r0, r3
 8026e0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8026e0e:	b10b      	cbz	r3, 8026e14 <__sflush_r+0x48>
 8026e10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8026e12:	1ac0      	subs	r0, r0, r3
 8026e14:	2300      	movs	r3, #0
 8026e16:	4602      	mov	r2, r0
 8026e18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8026e1a:	6a21      	ldr	r1, [r4, #32]
 8026e1c:	4628      	mov	r0, r5
 8026e1e:	47b0      	blx	r6
 8026e20:	1c43      	adds	r3, r0, #1
 8026e22:	89a3      	ldrh	r3, [r4, #12]
 8026e24:	d106      	bne.n	8026e34 <__sflush_r+0x68>
 8026e26:	6829      	ldr	r1, [r5, #0]
 8026e28:	291d      	cmp	r1, #29
 8026e2a:	d82b      	bhi.n	8026e84 <__sflush_r+0xb8>
 8026e2c:	4a29      	ldr	r2, [pc, #164]	; (8026ed4 <__sflush_r+0x108>)
 8026e2e:	410a      	asrs	r2, r1
 8026e30:	07d6      	lsls	r6, r2, #31
 8026e32:	d427      	bmi.n	8026e84 <__sflush_r+0xb8>
 8026e34:	2200      	movs	r2, #0
 8026e36:	6062      	str	r2, [r4, #4]
 8026e38:	04d9      	lsls	r1, r3, #19
 8026e3a:	6922      	ldr	r2, [r4, #16]
 8026e3c:	6022      	str	r2, [r4, #0]
 8026e3e:	d504      	bpl.n	8026e4a <__sflush_r+0x7e>
 8026e40:	1c42      	adds	r2, r0, #1
 8026e42:	d101      	bne.n	8026e48 <__sflush_r+0x7c>
 8026e44:	682b      	ldr	r3, [r5, #0]
 8026e46:	b903      	cbnz	r3, 8026e4a <__sflush_r+0x7e>
 8026e48:	6560      	str	r0, [r4, #84]	; 0x54
 8026e4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026e4c:	602f      	str	r7, [r5, #0]
 8026e4e:	2900      	cmp	r1, #0
 8026e50:	d0c9      	beq.n	8026de6 <__sflush_r+0x1a>
 8026e52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026e56:	4299      	cmp	r1, r3
 8026e58:	d002      	beq.n	8026e60 <__sflush_r+0x94>
 8026e5a:	4628      	mov	r0, r5
 8026e5c:	f7ff fc96 	bl	802678c <_free_r>
 8026e60:	2000      	movs	r0, #0
 8026e62:	6360      	str	r0, [r4, #52]	; 0x34
 8026e64:	e7c0      	b.n	8026de8 <__sflush_r+0x1c>
 8026e66:	2301      	movs	r3, #1
 8026e68:	4628      	mov	r0, r5
 8026e6a:	47b0      	blx	r6
 8026e6c:	1c41      	adds	r1, r0, #1
 8026e6e:	d1c8      	bne.n	8026e02 <__sflush_r+0x36>
 8026e70:	682b      	ldr	r3, [r5, #0]
 8026e72:	2b00      	cmp	r3, #0
 8026e74:	d0c5      	beq.n	8026e02 <__sflush_r+0x36>
 8026e76:	2b1d      	cmp	r3, #29
 8026e78:	d001      	beq.n	8026e7e <__sflush_r+0xb2>
 8026e7a:	2b16      	cmp	r3, #22
 8026e7c:	d101      	bne.n	8026e82 <__sflush_r+0xb6>
 8026e7e:	602f      	str	r7, [r5, #0]
 8026e80:	e7b1      	b.n	8026de6 <__sflush_r+0x1a>
 8026e82:	89a3      	ldrh	r3, [r4, #12]
 8026e84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026e88:	81a3      	strh	r3, [r4, #12]
 8026e8a:	e7ad      	b.n	8026de8 <__sflush_r+0x1c>
 8026e8c:	690f      	ldr	r7, [r1, #16]
 8026e8e:	2f00      	cmp	r7, #0
 8026e90:	d0a9      	beq.n	8026de6 <__sflush_r+0x1a>
 8026e92:	0793      	lsls	r3, r2, #30
 8026e94:	680e      	ldr	r6, [r1, #0]
 8026e96:	bf08      	it	eq
 8026e98:	694b      	ldreq	r3, [r1, #20]
 8026e9a:	600f      	str	r7, [r1, #0]
 8026e9c:	bf18      	it	ne
 8026e9e:	2300      	movne	r3, #0
 8026ea0:	eba6 0807 	sub.w	r8, r6, r7
 8026ea4:	608b      	str	r3, [r1, #8]
 8026ea6:	f1b8 0f00 	cmp.w	r8, #0
 8026eaa:	dd9c      	ble.n	8026de6 <__sflush_r+0x1a>
 8026eac:	6a21      	ldr	r1, [r4, #32]
 8026eae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8026eb0:	4643      	mov	r3, r8
 8026eb2:	463a      	mov	r2, r7
 8026eb4:	4628      	mov	r0, r5
 8026eb6:	47b0      	blx	r6
 8026eb8:	2800      	cmp	r0, #0
 8026eba:	dc06      	bgt.n	8026eca <__sflush_r+0xfe>
 8026ebc:	89a3      	ldrh	r3, [r4, #12]
 8026ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026ec2:	81a3      	strh	r3, [r4, #12]
 8026ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8026ec8:	e78e      	b.n	8026de8 <__sflush_r+0x1c>
 8026eca:	4407      	add	r7, r0
 8026ecc:	eba8 0800 	sub.w	r8, r8, r0
 8026ed0:	e7e9      	b.n	8026ea6 <__sflush_r+0xda>
 8026ed2:	bf00      	nop
 8026ed4:	dfbffffe 	.word	0xdfbffffe

08026ed8 <_fflush_r>:
 8026ed8:	b538      	push	{r3, r4, r5, lr}
 8026eda:	690b      	ldr	r3, [r1, #16]
 8026edc:	4605      	mov	r5, r0
 8026ede:	460c      	mov	r4, r1
 8026ee0:	b913      	cbnz	r3, 8026ee8 <_fflush_r+0x10>
 8026ee2:	2500      	movs	r5, #0
 8026ee4:	4628      	mov	r0, r5
 8026ee6:	bd38      	pop	{r3, r4, r5, pc}
 8026ee8:	b118      	cbz	r0, 8026ef2 <_fflush_r+0x1a>
 8026eea:	6a03      	ldr	r3, [r0, #32]
 8026eec:	b90b      	cbnz	r3, 8026ef2 <_fflush_r+0x1a>
 8026eee:	f7ff fa87 	bl	8026400 <__sinit>
 8026ef2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026ef6:	2b00      	cmp	r3, #0
 8026ef8:	d0f3      	beq.n	8026ee2 <_fflush_r+0xa>
 8026efa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8026efc:	07d0      	lsls	r0, r2, #31
 8026efe:	d404      	bmi.n	8026f0a <_fflush_r+0x32>
 8026f00:	0599      	lsls	r1, r3, #22
 8026f02:	d402      	bmi.n	8026f0a <_fflush_r+0x32>
 8026f04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026f06:	f7ff fbd3 	bl	80266b0 <__retarget_lock_acquire_recursive>
 8026f0a:	4628      	mov	r0, r5
 8026f0c:	4621      	mov	r1, r4
 8026f0e:	f7ff ff5d 	bl	8026dcc <__sflush_r>
 8026f12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8026f14:	07da      	lsls	r2, r3, #31
 8026f16:	4605      	mov	r5, r0
 8026f18:	d4e4      	bmi.n	8026ee4 <_fflush_r+0xc>
 8026f1a:	89a3      	ldrh	r3, [r4, #12]
 8026f1c:	059b      	lsls	r3, r3, #22
 8026f1e:	d4e1      	bmi.n	8026ee4 <_fflush_r+0xc>
 8026f20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026f22:	f7ff fbc6 	bl	80266b2 <__retarget_lock_release_recursive>
 8026f26:	e7dd      	b.n	8026ee4 <_fflush_r+0xc>

08026f28 <__swbuf_r>:
 8026f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026f2a:	460e      	mov	r6, r1
 8026f2c:	4614      	mov	r4, r2
 8026f2e:	4605      	mov	r5, r0
 8026f30:	b118      	cbz	r0, 8026f3a <__swbuf_r+0x12>
 8026f32:	6a03      	ldr	r3, [r0, #32]
 8026f34:	b90b      	cbnz	r3, 8026f3a <__swbuf_r+0x12>
 8026f36:	f7ff fa63 	bl	8026400 <__sinit>
 8026f3a:	69a3      	ldr	r3, [r4, #24]
 8026f3c:	60a3      	str	r3, [r4, #8]
 8026f3e:	89a3      	ldrh	r3, [r4, #12]
 8026f40:	071a      	lsls	r2, r3, #28
 8026f42:	d525      	bpl.n	8026f90 <__swbuf_r+0x68>
 8026f44:	6923      	ldr	r3, [r4, #16]
 8026f46:	b31b      	cbz	r3, 8026f90 <__swbuf_r+0x68>
 8026f48:	6823      	ldr	r3, [r4, #0]
 8026f4a:	6922      	ldr	r2, [r4, #16]
 8026f4c:	1a98      	subs	r0, r3, r2
 8026f4e:	6963      	ldr	r3, [r4, #20]
 8026f50:	b2f6      	uxtb	r6, r6
 8026f52:	4283      	cmp	r3, r0
 8026f54:	4637      	mov	r7, r6
 8026f56:	dc04      	bgt.n	8026f62 <__swbuf_r+0x3a>
 8026f58:	4621      	mov	r1, r4
 8026f5a:	4628      	mov	r0, r5
 8026f5c:	f7ff ffbc 	bl	8026ed8 <_fflush_r>
 8026f60:	b9e0      	cbnz	r0, 8026f9c <__swbuf_r+0x74>
 8026f62:	68a3      	ldr	r3, [r4, #8]
 8026f64:	3b01      	subs	r3, #1
 8026f66:	60a3      	str	r3, [r4, #8]
 8026f68:	6823      	ldr	r3, [r4, #0]
 8026f6a:	1c5a      	adds	r2, r3, #1
 8026f6c:	6022      	str	r2, [r4, #0]
 8026f6e:	701e      	strb	r6, [r3, #0]
 8026f70:	6962      	ldr	r2, [r4, #20]
 8026f72:	1c43      	adds	r3, r0, #1
 8026f74:	429a      	cmp	r2, r3
 8026f76:	d004      	beq.n	8026f82 <__swbuf_r+0x5a>
 8026f78:	89a3      	ldrh	r3, [r4, #12]
 8026f7a:	07db      	lsls	r3, r3, #31
 8026f7c:	d506      	bpl.n	8026f8c <__swbuf_r+0x64>
 8026f7e:	2e0a      	cmp	r6, #10
 8026f80:	d104      	bne.n	8026f8c <__swbuf_r+0x64>
 8026f82:	4621      	mov	r1, r4
 8026f84:	4628      	mov	r0, r5
 8026f86:	f7ff ffa7 	bl	8026ed8 <_fflush_r>
 8026f8a:	b938      	cbnz	r0, 8026f9c <__swbuf_r+0x74>
 8026f8c:	4638      	mov	r0, r7
 8026f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026f90:	4621      	mov	r1, r4
 8026f92:	4628      	mov	r0, r5
 8026f94:	f000 f806 	bl	8026fa4 <__swsetup_r>
 8026f98:	2800      	cmp	r0, #0
 8026f9a:	d0d5      	beq.n	8026f48 <__swbuf_r+0x20>
 8026f9c:	f04f 37ff 	mov.w	r7, #4294967295
 8026fa0:	e7f4      	b.n	8026f8c <__swbuf_r+0x64>
	...

08026fa4 <__swsetup_r>:
 8026fa4:	b538      	push	{r3, r4, r5, lr}
 8026fa6:	4b2a      	ldr	r3, [pc, #168]	; (8027050 <__swsetup_r+0xac>)
 8026fa8:	4605      	mov	r5, r0
 8026faa:	6818      	ldr	r0, [r3, #0]
 8026fac:	460c      	mov	r4, r1
 8026fae:	b118      	cbz	r0, 8026fb8 <__swsetup_r+0x14>
 8026fb0:	6a03      	ldr	r3, [r0, #32]
 8026fb2:	b90b      	cbnz	r3, 8026fb8 <__swsetup_r+0x14>
 8026fb4:	f7ff fa24 	bl	8026400 <__sinit>
 8026fb8:	89a3      	ldrh	r3, [r4, #12]
 8026fba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026fbe:	0718      	lsls	r0, r3, #28
 8026fc0:	d422      	bmi.n	8027008 <__swsetup_r+0x64>
 8026fc2:	06d9      	lsls	r1, r3, #27
 8026fc4:	d407      	bmi.n	8026fd6 <__swsetup_r+0x32>
 8026fc6:	2309      	movs	r3, #9
 8026fc8:	602b      	str	r3, [r5, #0]
 8026fca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8026fce:	81a3      	strh	r3, [r4, #12]
 8026fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8026fd4:	e034      	b.n	8027040 <__swsetup_r+0x9c>
 8026fd6:	0758      	lsls	r0, r3, #29
 8026fd8:	d512      	bpl.n	8027000 <__swsetup_r+0x5c>
 8026fda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026fdc:	b141      	cbz	r1, 8026ff0 <__swsetup_r+0x4c>
 8026fde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026fe2:	4299      	cmp	r1, r3
 8026fe4:	d002      	beq.n	8026fec <__swsetup_r+0x48>
 8026fe6:	4628      	mov	r0, r5
 8026fe8:	f7ff fbd0 	bl	802678c <_free_r>
 8026fec:	2300      	movs	r3, #0
 8026fee:	6363      	str	r3, [r4, #52]	; 0x34
 8026ff0:	89a3      	ldrh	r3, [r4, #12]
 8026ff2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8026ff6:	81a3      	strh	r3, [r4, #12]
 8026ff8:	2300      	movs	r3, #0
 8026ffa:	6063      	str	r3, [r4, #4]
 8026ffc:	6923      	ldr	r3, [r4, #16]
 8026ffe:	6023      	str	r3, [r4, #0]
 8027000:	89a3      	ldrh	r3, [r4, #12]
 8027002:	f043 0308 	orr.w	r3, r3, #8
 8027006:	81a3      	strh	r3, [r4, #12]
 8027008:	6923      	ldr	r3, [r4, #16]
 802700a:	b94b      	cbnz	r3, 8027020 <__swsetup_r+0x7c>
 802700c:	89a3      	ldrh	r3, [r4, #12]
 802700e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8027012:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8027016:	d003      	beq.n	8027020 <__swsetup_r+0x7c>
 8027018:	4621      	mov	r1, r4
 802701a:	4628      	mov	r0, r5
 802701c:	f000 f840 	bl	80270a0 <__smakebuf_r>
 8027020:	89a0      	ldrh	r0, [r4, #12]
 8027022:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027026:	f010 0301 	ands.w	r3, r0, #1
 802702a:	d00a      	beq.n	8027042 <__swsetup_r+0x9e>
 802702c:	2300      	movs	r3, #0
 802702e:	60a3      	str	r3, [r4, #8]
 8027030:	6963      	ldr	r3, [r4, #20]
 8027032:	425b      	negs	r3, r3
 8027034:	61a3      	str	r3, [r4, #24]
 8027036:	6923      	ldr	r3, [r4, #16]
 8027038:	b943      	cbnz	r3, 802704c <__swsetup_r+0xa8>
 802703a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802703e:	d1c4      	bne.n	8026fca <__swsetup_r+0x26>
 8027040:	bd38      	pop	{r3, r4, r5, pc}
 8027042:	0781      	lsls	r1, r0, #30
 8027044:	bf58      	it	pl
 8027046:	6963      	ldrpl	r3, [r4, #20]
 8027048:	60a3      	str	r3, [r4, #8]
 802704a:	e7f4      	b.n	8027036 <__swsetup_r+0x92>
 802704c:	2000      	movs	r0, #0
 802704e:	e7f7      	b.n	8027040 <__swsetup_r+0x9c>
 8027050:	20000108 	.word	0x20000108

08027054 <__swhatbuf_r>:
 8027054:	b570      	push	{r4, r5, r6, lr}
 8027056:	460c      	mov	r4, r1
 8027058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802705c:	2900      	cmp	r1, #0
 802705e:	b096      	sub	sp, #88	; 0x58
 8027060:	4615      	mov	r5, r2
 8027062:	461e      	mov	r6, r3
 8027064:	da0d      	bge.n	8027082 <__swhatbuf_r+0x2e>
 8027066:	89a3      	ldrh	r3, [r4, #12]
 8027068:	f013 0f80 	tst.w	r3, #128	; 0x80
 802706c:	f04f 0100 	mov.w	r1, #0
 8027070:	bf0c      	ite	eq
 8027072:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8027076:	2340      	movne	r3, #64	; 0x40
 8027078:	2000      	movs	r0, #0
 802707a:	6031      	str	r1, [r6, #0]
 802707c:	602b      	str	r3, [r5, #0]
 802707e:	b016      	add	sp, #88	; 0x58
 8027080:	bd70      	pop	{r4, r5, r6, pc}
 8027082:	466a      	mov	r2, sp
 8027084:	f000 f848 	bl	8027118 <_fstat_r>
 8027088:	2800      	cmp	r0, #0
 802708a:	dbec      	blt.n	8027066 <__swhatbuf_r+0x12>
 802708c:	9901      	ldr	r1, [sp, #4]
 802708e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8027092:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8027096:	4259      	negs	r1, r3
 8027098:	4159      	adcs	r1, r3
 802709a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802709e:	e7eb      	b.n	8027078 <__swhatbuf_r+0x24>

080270a0 <__smakebuf_r>:
 80270a0:	898b      	ldrh	r3, [r1, #12]
 80270a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80270a4:	079d      	lsls	r5, r3, #30
 80270a6:	4606      	mov	r6, r0
 80270a8:	460c      	mov	r4, r1
 80270aa:	d507      	bpl.n	80270bc <__smakebuf_r+0x1c>
 80270ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80270b0:	6023      	str	r3, [r4, #0]
 80270b2:	6123      	str	r3, [r4, #16]
 80270b4:	2301      	movs	r3, #1
 80270b6:	6163      	str	r3, [r4, #20]
 80270b8:	b002      	add	sp, #8
 80270ba:	bd70      	pop	{r4, r5, r6, pc}
 80270bc:	ab01      	add	r3, sp, #4
 80270be:	466a      	mov	r2, sp
 80270c0:	f7ff ffc8 	bl	8027054 <__swhatbuf_r>
 80270c4:	9900      	ldr	r1, [sp, #0]
 80270c6:	4605      	mov	r5, r0
 80270c8:	4630      	mov	r0, r6
 80270ca:	f7ff f885 	bl	80261d8 <_malloc_r>
 80270ce:	b948      	cbnz	r0, 80270e4 <__smakebuf_r+0x44>
 80270d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80270d4:	059a      	lsls	r2, r3, #22
 80270d6:	d4ef      	bmi.n	80270b8 <__smakebuf_r+0x18>
 80270d8:	f023 0303 	bic.w	r3, r3, #3
 80270dc:	f043 0302 	orr.w	r3, r3, #2
 80270e0:	81a3      	strh	r3, [r4, #12]
 80270e2:	e7e3      	b.n	80270ac <__smakebuf_r+0xc>
 80270e4:	89a3      	ldrh	r3, [r4, #12]
 80270e6:	6020      	str	r0, [r4, #0]
 80270e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80270ec:	81a3      	strh	r3, [r4, #12]
 80270ee:	9b00      	ldr	r3, [sp, #0]
 80270f0:	6163      	str	r3, [r4, #20]
 80270f2:	9b01      	ldr	r3, [sp, #4]
 80270f4:	6120      	str	r0, [r4, #16]
 80270f6:	b15b      	cbz	r3, 8027110 <__smakebuf_r+0x70>
 80270f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80270fc:	4630      	mov	r0, r6
 80270fe:	f000 f81d 	bl	802713c <_isatty_r>
 8027102:	b128      	cbz	r0, 8027110 <__smakebuf_r+0x70>
 8027104:	89a3      	ldrh	r3, [r4, #12]
 8027106:	f023 0303 	bic.w	r3, r3, #3
 802710a:	f043 0301 	orr.w	r3, r3, #1
 802710e:	81a3      	strh	r3, [r4, #12]
 8027110:	89a3      	ldrh	r3, [r4, #12]
 8027112:	431d      	orrs	r5, r3
 8027114:	81a5      	strh	r5, [r4, #12]
 8027116:	e7cf      	b.n	80270b8 <__smakebuf_r+0x18>

08027118 <_fstat_r>:
 8027118:	b538      	push	{r3, r4, r5, lr}
 802711a:	4d07      	ldr	r5, [pc, #28]	; (8027138 <_fstat_r+0x20>)
 802711c:	2300      	movs	r3, #0
 802711e:	4604      	mov	r4, r0
 8027120:	4608      	mov	r0, r1
 8027122:	4611      	mov	r1, r2
 8027124:	602b      	str	r3, [r5, #0]
 8027126:	f7dc fcd2 	bl	8003ace <_fstat>
 802712a:	1c43      	adds	r3, r0, #1
 802712c:	d102      	bne.n	8027134 <_fstat_r+0x1c>
 802712e:	682b      	ldr	r3, [r5, #0]
 8027130:	b103      	cbz	r3, 8027134 <_fstat_r+0x1c>
 8027132:	6023      	str	r3, [r4, #0]
 8027134:	bd38      	pop	{r3, r4, r5, pc}
 8027136:	bf00      	nop
 8027138:	2000c814 	.word	0x2000c814

0802713c <_isatty_r>:
 802713c:	b538      	push	{r3, r4, r5, lr}
 802713e:	4d06      	ldr	r5, [pc, #24]	; (8027158 <_isatty_r+0x1c>)
 8027140:	2300      	movs	r3, #0
 8027142:	4604      	mov	r4, r0
 8027144:	4608      	mov	r0, r1
 8027146:	602b      	str	r3, [r5, #0]
 8027148:	f7dc fcd1 	bl	8003aee <_isatty>
 802714c:	1c43      	adds	r3, r0, #1
 802714e:	d102      	bne.n	8027156 <_isatty_r+0x1a>
 8027150:	682b      	ldr	r3, [r5, #0]
 8027152:	b103      	cbz	r3, 8027156 <_isatty_r+0x1a>
 8027154:	6023      	str	r3, [r4, #0]
 8027156:	bd38      	pop	{r3, r4, r5, pc}
 8027158:	2000c814 	.word	0x2000c814

0802715c <_init>:
 802715c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802715e:	bf00      	nop
 8027160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027162:	bc08      	pop	{r3}
 8027164:	469e      	mov	lr, r3
 8027166:	4770      	bx	lr

08027168 <_fini>:
 8027168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802716a:	bf00      	nop
 802716c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802716e:	bc08      	pop	{r3}
 8027170:	469e      	mov	lr, r3
 8027172:	4770      	bx	lr
